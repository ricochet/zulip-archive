[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a> from <code>afonso360:riscv-fma-v2</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds lowering rules for the  <code>fmsub</code>/<code>fnmsub</code>/<code>fnmadd</code> instructions. </p>\n<p>These instructions were already implemented in the backend, but had no lowering rules associated with them, so they were never emitted.</p>\n</blockquote>",
        "id": 437796662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715249531
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>.</p>",
        "id": 437796663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715249531
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>.</p>",
        "id": 437796664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715249531
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#pullrequestreview-2048232277\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 437839410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715268728
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>.</p>",
        "id": 437843054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715270129
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2103773727\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>This is neat!</p>\n<p>Out of curiosity, can't you use these same fnmsub/fnmadd instructions if <code>y</code> is negated instead of <code>x</code>? Similarly if both <code>x</code> and <code>y</code> are negated, I think you can use fmadd/fmsub, depending on whether <code>z</code> is negated or not. And of course you could also match on <code>(fneg (fma ...))</code>, leading to 16 possible rules in total.</p>\n<p>That said, I'm a little worried about whether fusing negation into an <code>fma</code> can change its results. I'm hoping the answer is \"no\", but do either of you happen to know for sure and can you explain it to me? I'm reasonably confident that negating the result is equivalent to negating both terms and both cases are safe to fuse without loss of precision. I'm less confident that, for example, <code>fmadd x y (fneg z)</code> will always give the same results as <code>fmsub x y z</code> if the magnitude of <code>z</code> is very different than <code>x*y</code>.</p>\n<p>Anyway, I thought way too much about this and I think you can fold those 16 cases into four rules based on how many of <code>x</code>, <code>y</code>, <code>z</code>, or the result are wrapped in <code>fneg</code>:</p>\n<ul>\n<li>Even number of <code>fneg</code>s in (result, x, y): use <code>fm*</code></li>\n<li>Odd number of <code>fneg</code>s in (result, x, y): use <code>fnm*</code></li>\n<li>Even number of <code>fneg</code>s in (x, y, z): use <code>*add</code></li>\n<li>Odd number of <code>fneg</code>s in (x, y, z): use <code>*sub</code></li>\n</ul>\n<p>With the right helpers you can write the four rules all at the same priority. This is a little awkward and would be easier if ISLE had or-patterns or match expressions or something, but I think the following should work and generate about as good of a pattern-matching tree as we're capable of right now.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">IsFneg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"p\">(</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">negate</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">IsFneg</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_z</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_xor</span><span class=\"w\"> </span><span class=\"n\">neg_x</span><span class=\"w\"> </span><span class=\"n\">neg_y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">neg_z</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">priority</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">overlap</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">rules</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_x</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_y</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IsFneg</span><span class=\"p\">.</span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"n\">neg_z</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">is_fneg</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_xor</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_xor</span><span class=\"w\"> </span><span class=\"n\">neg_x</span><span class=\"w\"> </span><span class=\"n\">neg_y</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_xor</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">neg_z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">parity</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">indicate</span><span class=\"w\"> </span><span class=\"n\">whether</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">negate</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">respectively</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">InstOutput</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_scalar_float</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fmadd</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FRM</span><span class=\"p\">.</span><span class=\"n\">RME</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_scalar_float</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fmsub</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FRM</span><span class=\"p\">.</span><span class=\"n\">RME</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_scalar_float</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fnmsub</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FRM</span><span class=\"p\">.</span><span class=\"n\">RME</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_scalar_float</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fnmadd</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FRM</span><span class=\"p\">.</span><span class=\"n\">RME</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfmacc_vv</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfmsac_vv</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfnmsac_vv</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfnmacc_vv</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfmacc_vf</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfmsac_vf</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfnmsac_vf</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_fma</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rv_vfnmacc_vf</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unmasked</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Also I think you might be able to handle <code>(splat y)</code> as well because I guess floating-point multiplication is commutative assuming NaN canonicalization. So you can safely swap <code>x</code> and <code>y</code>, if I'm not mistaken…</p>\n</blockquote>",
        "id": 437917279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715310218
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2104315843\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>I'm not entirely sure, for these 4 instructions I pretty much copied the <a href=\"https://github.com/llvm/llvm-project/blob/c84c74e67839a5207d7c6318fc37e607f088a994/llvm/lib/Target/RISCV/RISCVInstrInfoF.td#L548-L567\">LLVM lowerings for them</a>. I also briefly looked at our x64 backend and noted that it had some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc081b74bc559cfddee4f01a02a018b903f31f1a/cranelift/codegen/src/isa/x64/lower.isle#L2853-L2864\">similar rules for <code>fnmadd</code></a>. I can't really explain these transformations in great detail, FP Math makes my head hurt <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span> .</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y.</p>\n</blockquote>\n<p>That case isn't represented in our backend, and I'm not entirely sure how to prove it. My z3 skills are non existent, but I probably can implement it for the x64 backend and fuzz it for a few days.</p>\n<hr>\n<p><code>(fneg (fma ...))</code> I think is a no-go since LLVM has this rule, but only with the <code>nsz</code> (No Signed Zero) flag, which means it probably swaps <code>-0.0</code> with <code>0.0</code> or vice-versa.</p>\n<hr>\n<p>Adding the <code>fneg y</code> variations seems like it would work, at least we have those rules in the x64 backend. And de-duplicating those rules with the vector rules seems really neat, since we have pretty much the same instructions for both.<br>\n</p>\n</blockquote>",
        "id": 437956346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715335018
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2104315843\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>I'm not entirely sure, for these 4 instructions I pretty much copied the <a href=\"https://github.com/llvm/llvm-project/blob/c84c74e67839a5207d7c6318fc37e607f088a994/llvm/lib/Target/RISCV/RISCVInstrInfoF.td#L548-L567\">LLVM lowerings for them</a>. I also briefly looked at our x64 backend and noted that it had some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc081b74bc559cfddee4f01a02a018b903f31f1a/cranelift/codegen/src/isa/x64/lower.isle#L2853-L2864\">similar rules for <code>fnmadd</code></a>. I can't really explain these transformations in great detail, FP Math makes my head hurt <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span> .</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y.</p>\n</blockquote>\n<p>That case isn't represented in our backend, and I'm not entirely sure how to prove it. My z3 skills are non existent, but I probably can implement it for the x64 backend and fuzz it for a few days.</p>\n<p>Edit: I was searching for related fma transformations and found this <a href=\"https://alive2.llvm.org/ce/z/XxwBAJ\">alive2</a> testcase that seems like a good starting point to try to play around and prove these transformations. I've never used alive, but I'll give it a go this afternoon, seems like it should be fairly easy.</p>\n<hr>\n<p><code>(fneg (fma ...))</code> I think is a no-go since LLVM has this rule, but only with the <code>nsz</code> (No Signed Zero) flag, which means it probably swaps <code>-0.0</code> with <code>0.0</code> or vice-versa.</p>\n<hr>\n<p>Adding the <code>fneg y</code> variations seems like it would work, at least we have those rules in the x64 backend. And de-duplicating those rules with the vector rules seems really neat, since we have pretty much the same instructions for both.<br>\n</p>\n</blockquote>",
        "id": 437956614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715335169
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2104315843\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>I'm not entirely sure, for these 4 instructions I pretty much copied the <a href=\"https://github.com/llvm/llvm-project/blob/c84c74e67839a5207d7c6318fc37e607f088a994/llvm/lib/Target/RISCV/RISCVInstrInfoF.td#L548-L567\">LLVM lowerings for them</a>. I also briefly looked at our x64 backend and noted that it had some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc081b74bc559cfddee4f01a02a018b903f31f1a/cranelift/codegen/src/isa/x64/lower.isle#L2853-L2864\">similar rules for <code>fnmadd</code></a>. I can't really explain these transformations in great detail, FP Math makes my head hurt <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span> .</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y.</p>\n</blockquote>\n<p>That case isn't represented in our backend, and I'm not entirely sure how to prove it. My z3 skills are non existent, but I probably can implement it for the x64 backend and fuzz it for a few days.</p>\n<p>Edit: I was searching for related fma transformations and found this <a href=\"https://alive2.llvm.org/ce/z/XxwBAJ\">alive2</a> testcase that seems like a good starting point to try to play around and prove these transformations. I've never used alive, but I'll give it a go this afternoon, seems like it should be fairly easy.</p>\n<hr>\n<p><code>(fneg (fma ...))</code> I think is a no-go since LLVM has this rule, but only with the <code>nsz</code> (No Signed Zero) flag, which means it probably swaps <code>-0.0</code> with <code>0.0</code> or vice-versa.</p>\n<hr>\n<p>Adding the <code>fneg y</code> variations seems like it would work, at least we have those rules in the x64 backend. And de-duplicating those rules with the vector rules seems really neat, since we have pretty much the same instructions for both. I'll try and merge those rules together like you suggested.</p>\n</blockquote>",
        "id": 437956878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715335263
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2104315843\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>I'm not entirely sure, for these 4 instructions I pretty much copied the <a href=\"https://github.com/llvm/llvm-project/blob/c84c74e67839a5207d7c6318fc37e607f088a994/llvm/lib/Target/RISCV/RISCVInstrInfoF.td#L548-L567\">LLVM lowerings for them</a>. I also briefly looked at our x64 backend and noted that it had some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc081b74bc559cfddee4f01a02a018b903f31f1a/cranelift/codegen/src/isa/x64/lower.isle#L2853-L2864\">similar rules for <code>fnmadd</code></a>. I can't really explain these transformations in great detail, FP Math makes my head hurt <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span> .</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y.</p>\n</blockquote>\n<p>That case isn't represented in our X64 backend, and I'm not entirely sure how to prove it. My z3 skills are non existent, but I probably can implement it for the x64 backend and fuzz it for a few days.</p>\n<p>Edit: I was searching for related fma transformations and found this <a href=\"https://alive2.llvm.org/ce/z/XxwBAJ\">alive2</a> testcase that seems like a good starting point to try to play around and prove these transformations. I've never used alive, but I'll give it a go this afternoon, seems like it should be fairly easy.</p>\n<hr>\n<p><code>(fneg (fma ...))</code> I think is a no-go since LLVM has this rule, but only with the <code>nsz</code> (No Signed Zero) flag, which means it probably swaps <code>-0.0</code> with <code>0.0</code> or vice-versa.</p>\n<hr>\n<p>Adding the <code>fneg y</code> variations seems like it would work, at least we have those rules in the x64 backend. And de-duplicating those rules with the vector rules seems really neat, since we have pretty much the same instructions for both. I'll try and merge those rules together like you suggested.</p>\n</blockquote>",
        "id": 437957874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715335734
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2104315843\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>I'm not entirely sure, for these 4 instructions I pretty much copied the <a href=\"https://github.com/llvm/llvm-project/blob/c84c74e67839a5207d7c6318fc37e607f088a994/llvm/lib/Target/RISCV/RISCVInstrInfoF.td#L548-L567\">LLVM lowerings for them</a>. I also briefly looked at our x64 backend and noted that it had some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bc081b74bc559cfddee4f01a02a018b903f31f1a/cranelift/codegen/src/isa/x64/lower.isle#L2853-L2864\">similar rules for <code>fnmadd</code></a>. I can't really explain these transformations in great detail, FP Math makes my head hurt <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span> .</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y.</p>\n</blockquote>\n<p>That case isn't represented in our X64 backend, and I'm not entirely sure how to prove it. My z3 skills are non existent, but I probably can implement it for the x64 backend and fuzz it for a few days. </p>\n<p>I also don't think magnitudes should matter here, <code>fneg</code> is a bitwise operation, it shouldn't do any early rounding that would be affected by magnitude.</p>\n<p>Edit: I was searching for related fma transformations and found this <a href=\"https://alive2.llvm.org/ce/z/XxwBAJ\">alive2</a> testcase that seems like a good starting point to try to play around and prove these transformations. I've never used alive, but I'll give it a go this afternoon, seems like it should be fairly easy.</p>\n<hr>\n<p><code>(fneg (fma ...))</code> I think is a no-go since LLVM has this rule, but only with the <code>nsz</code> (No Signed Zero) flag, which means it probably swaps <code>-0.0</code> with <code>0.0</code> or vice-versa.</p>\n<hr>\n<p>Adding the <code>fneg y</code> variations seems like it would work, at least we have those rules in the x64 backend. And de-duplicating those rules with the vector rules seems really neat, since we have pretty much the same instructions for both. I'll try and merge those rules together like you suggested.</p>\n</blockquote>",
        "id": 437960505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715337064
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2105622411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>So, I played around with alive for a bit. Really cool tool! Unfortunately the compiler explorer for alive2 has a short timeout so I had to run these locally.</p>\n<blockquote>\n<p>Out of curiosity, can't you use these same fnmsub/fnmadd instructions if y is negated instead of x? </p>\n</blockquote>\n<p>Yes you can! Here's the <a href=\"https://alive2.llvm.org/ce/z/sp-dNg\">proof that I built for this</a> and it does validate. <br>\n&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\">  </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tgt</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">seems</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">correct</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<blockquote>\n<p>I'm reasonably confident that negating the result is equivalent to negating both terms and both cases are safe to fuse without loss of precision.</p>\n</blockquote>\n<p>This one doesn't seem to pan out, it seems to have the issue with the signed zero. <a href=\"https://alive2.llvm.org/ce/z/6q5sCj\">Proof</a></p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">proofs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">neg_fma_eq_fma_negxz</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">n</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">verify</span><span class=\"o\">!</span>\n\n<span class=\"n\">ERROR</span>: <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n\n<span class=\"n\">Example</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.000015258789</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">Source</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">Target</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.000015258789</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">value</span>: #<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"n\">value</span>: #<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y</p>\n</blockquote>\n<p>I can't really test this using alive, since it doesn't have a fmsub intrinsic. But I did something similar using <code>fmul+f{add,sub}</code>, which has 2 rounding steps instead of one, which is what I think really matters. In this case the proof does check out and you can remove an intermediary <code>fneg</code>. <a href=\"https://alive2.llvm.org/ce/z/Qw_qo1\">Proof</a></p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">proofs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">fma_split_neg</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fadd</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">res</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fsub</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">res</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">seems</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">correct</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>We should probably add a mid end rule for this case!</p>\n<blockquote>\n<p>Similarly if both x and y are negated, I think you can use fmadd/fmsub, depending on whether z is negated or not. </p>\n</blockquote>\n<p>I'm not too worried about this case because it's already covered by a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/src/opts/arithmetic.isle#L107-L110\">mid end rule</a>. That being said, it looks like It comes pretty much for free with the solution that you proposed above, so might as well have it.</p>\n<p>I'm going to write up a PR using that. Thanks for looking at this in so much detail!</p>\n</blockquote>",
        "id": 438088578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715413881
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588#issuecomment-2105622411\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8588\">PR #8588</a>:</p>\n<blockquote>\n<p>So, I played around with alive for a bit. Really cool tool! Unfortunately the compiler explorer for alive2 has a short timeout so I had to run these locally.</p>\n<blockquote>\n<p>Out of curiosity, can't you use these same fnmsub/fnmadd instructions if y is negated instead of x? </p>\n</blockquote>\n<p>Yes you can! Here's the <a href=\"https://alive2.llvm.org/ce/z/sp-dNg\">proof that I built for this</a> and it does validate. <br>\n&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\">  </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">tgt</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">seems</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">correct</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<blockquote>\n<p>I'm reasonably confident that negating the result is equivalent to negating both terms and both cases are safe to fuse without loss of precision.</p>\n</blockquote>\n<p>This one doesn't seem to pan out, it seems to have the issue with the signed zero. <a href=\"https://alive2.llvm.org/ce/z/6q5sCj\">Proof</a></p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">proofs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">neg_fma_eq_fma_negxz</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">n</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">verify</span><span class=\"o\">!</span>\n\n<span class=\"n\">ERROR</span>: <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"n\">mismatch</span>\n\n<span class=\"n\">Example</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.000015258789</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">Source</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">Target</span>:\n<span class=\"nc\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.000015258789</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">fma</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>#<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">value</span>: #<span class=\"n\">x8000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"n\">value</span>: #<span class=\"n\">x0000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<blockquote>\n<p>I'm less confident that, for example, fmadd x y (fneg z) will always give the same results as fmsub x y z if the magnitude of z is very different than x*y</p>\n</blockquote>\n<p>I can't really test this using alive, since it doesn't have a fmsub intrinsic. But I did something similar using <code>fmul+f{add,sub}</code>, which has 2 rounding steps instead of one, which is what I think really matters here. In this case the proof does check out and you can remove an intermediary <code>fneg</code>. <a href=\"https://alive2.llvm.org/ce/z/Qw_qo1\">Proof</a></p>\n<p>&lt;details&gt;<br>\n  &lt;summary&gt;Result&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">afonso</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">AHKMV2</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">alive2</span><span class=\"o\">/</span><span class=\"n\">proofs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">alive</span><span class=\"o\">-</span><span class=\"n\">tv</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">undef</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">smt</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">1800000</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">fma_split_neg</span><span class=\"p\">.</span><span class=\"n\">ll</span>\n\n<span class=\"o\">----------------------------------------</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">negz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fadd</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">negz</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">res</span>\n<span class=\"p\">}</span>\n<span class=\"o\">=&gt;</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">tgt</span><span class=\"p\">(</span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n#<span class=\"mi\">0</span>:\n  <span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmul</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">y</span>\n<span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fsub</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">z</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"n\">half</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">res</span>\n<span class=\"p\">}</span>\n<span class=\"n\">Transformation</span><span class=\"w\"> </span><span class=\"n\">seems</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">correct</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>We should probably add a mid end rule for this case!</p>\n<blockquote>\n<p>Similarly if both x and y are negated, I think you can use fmadd/fmsub, depending on whether z is negated or not. </p>\n</blockquote>\n<p>I'm not too worried about this case because it's already covered by a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/src/opts/arithmetic.isle#L107-L110\">mid end rule</a>. That being said, it looks like It comes pretty much for free with the solution that you proposed above, so might as well have it.</p>\n<p>I'm going to write up a PR using that. Thanks for looking at this in so much detail!</p>\n</blockquote>",
        "id": 438088599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715413921
    }
]