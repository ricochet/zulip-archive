[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584\">issue #6584</a>:</p>\n<blockquote>\n<p>The preview 2 <code>WasiCtx</code> does not expose any methods for manipulating its contents. This can lead to the user having to write very awkward and error prone looking code <a href=\"https://github.com/fermyon/spin-componentize/blob/94b7f8a5dc02a263b55be7e5076b9b47a0229bbe/abi-conformance/src/test_wasi.rs#L321C1-L347\">such as this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">set_stdout</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stdout</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">WritePipe</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Cursor</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">delete</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">OutputStream</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">push_output_stream</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Would it make sense to add methods like on preview 1's <code>WasiCtx</code> that mirror the builder methods and make it trivial to update aspects of the context? One complication to this is that many of these methods would require the <code>Store</code> as well. Perhaps it would make sense to add these to <code>WasiView</code> instead? </p>\n<p>Let me know what you think. I'd be happy to contribute the implementation if we can come to an agreement on if and where these methods should exist.</p>\n</blockquote>",
        "id": 366557397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686846096
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584#issuecomment-1599252268\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584\">issue #6584</a>:</p>\n<blockquote>\n<p>My thinking with the design of preview2's WasiCtx and WasiCtxBuilder is for the embedder to exclusively manipulate the WasiCtxBuilder, then put it inside a Store once it is complete. The wasmtime::component::bindgen trait implementations can then exclusively manipulate WasiCtx (and Table, via WasiView), because the bindings generation abstracts away the Store extraction.</p>\n<p>I know there are some methods missing from WasiCtxBuilder, and Dan added a few of them while I was out on vacation last week.</p>\n<p>Does that distinction make sense, and work for your application?</p>\n</blockquote>",
        "id": 368010538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687283492
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584#issuecomment-1612137181\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584\">issue #6584</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6652\">https://github.com/bytecodealliance/wasmtime/pull/6652</a> makes all of the WasiCtx members private, so the only way to change the value for stdout, as in your example, is when using the WasiCtxBuilder.</p>\n</blockquote>",
        "id": 370580374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687987985
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584#issuecomment-1613043106\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584\">issue #6584</a>:</p>\n<blockquote>\n<p>I did some refactoring of the codebase that prompted this issue and was able to get things working. I think we can close this issue. </p>\n</blockquote>",
        "id": 370756899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688040693
    },
    {
        "content": "<p>rylev closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6584\">issue #6584</a>:</p>\n<blockquote>\n<p>The preview 2 <code>WasiCtx</code> does not expose any methods for manipulating its contents. This can lead to the user having to write very awkward and error prone looking code <a href=\"https://github.com/fermyon/spin-componentize/blob/94b7f8a5dc02a263b55be7e5076b9b47a0229bbe/abi-conformance/src/test_wasi.rs#L321C1-L347\">such as this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">set_stdout</span><span class=\"p\">(</span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stdout</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">WritePipe</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Cursor</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">delete</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">OutputStream</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">push_output_stream</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Would it make sense to add methods like on preview 1's <code>WasiCtx</code> that mirror the builder methods and make it trivial to update aspects of the context? One complication to this is that many of these methods would require the <code>Store</code> as well. Perhaps it would make sense to add these to <code>WasiView</code> instead? </p>\n<p>Let me know what you think. I'd be happy to contribute the implementation if we can come to an agreement on if and where these methods should exist.</p>\n</blockquote>",
        "id": 370756900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688040693
    }
]