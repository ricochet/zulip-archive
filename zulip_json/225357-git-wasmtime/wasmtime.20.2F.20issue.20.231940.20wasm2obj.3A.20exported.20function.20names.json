[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940#issuecomment-917460322\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940\">issue #1940</a>:</p>\n<blockquote>\n<p>Wasm2obj has been deleted in favor of <code>wasmtime compile</code>, so this can be closed I think.</p>\n</blockquote>",
        "id": 252929566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631387889
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940#issuecomment-918136316\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940\">issue #1940</a>:</p>\n<blockquote>\n<p>Yes, but <code>wasmtime compile</code> could be similarly affected - @alexcrichton, any opinion?</p>\n</blockquote>",
        "id": 253079740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631535660
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940#issuecomment-918231121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940\">issue #1940</a>:</p>\n<blockquote>\n<p>The format of the ELF with <code>wasmtime compile</code> isn't a public implementation detail so it's not intended to be consumed elsewhere, so because it's purely an implementation detail I'm gonna close this. Eventually we'll want a public-facing object-file format, but this will almost surely be addressed in such an implementation.</p>\n</blockquote>",
        "id": 253095562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631542159
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1940\">issue #1940</a>:</p>\n<blockquote>\n<p>Not sure if this is a bug, my own user error, or just a not-implemented-yet.</p>\n<p>I have the following minimal Wasm example (hello.wat):</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (export \"helloFunc\") (result i32) (i32.const 42))\n)\n</code></pre></div>\n<p><code>wasm2obj</code> seems to not respect the declared export function name:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>Linux<span class=\"o\">)</span>\n&gt; wasmtime wasm2obj hello.wat hello.o\n&gt; nm hello.o\n<span class=\"m\">0000000000000000</span> D _vmcontext_init\n<span class=\"m\">0000000000000000</span> T _wasm_function_0\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">(</span>macOS<span class=\"o\">)</span>\n&gt; wasmtime wasm2obj hello.wat hello.o\n&gt; nm hello.o\n000000000000000e D __vmcontext_init\n<span class=\"m\">0000000000000000</span> T __wasm_function_0\n</code></pre></div>\n<p>Instead of <code>_wasm_function_0</code>, I was expecting <code>helloFunc</code>.</p>\n<p>This behavior is still the same with the following <code>hello.wat</code> declaring the export a different way:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (result i32) (i32.const 42))\n  (export \"helloFunc\" (func 0))\n)\n</code></pre></div>\n<p>I've tested this on Wasmtime <code>master</code> as of this writing, which is commit c91a9313b.  As shown above, I observed this behavior on both Linux and macOS.</p>\n</blockquote>",
        "id": 253095565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631542160
    }
]