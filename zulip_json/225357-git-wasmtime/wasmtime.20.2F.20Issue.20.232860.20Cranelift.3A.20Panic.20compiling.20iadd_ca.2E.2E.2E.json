[
    {
        "content": "<p>Hypersonic opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would be helpful.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1465</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1467</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1468</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1469</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_carry</span><span class=\"w\"> </span><span class=\"n\">v1465</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1468</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1467</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1476</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1356</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1391</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1423</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1447</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1464</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1494</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1516</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1544</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v1476</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1356</span><span class=\"o\">+</span><span class=\"mi\">274</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -p cranelift-tools -- compile test.clif --target x86_64</code></p>\n<h3>Expected Results</h3>\n<p>Code successfully generates without a panic.</p>\n<h3>Actual Results</h3>\n<p>Panic: <code>thread 'main' panicked at 'ALU+imm and ALU+carry ops should not appear here!', cranelift/codegen/src/isa/x64/lower.rs:5740:13</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main HEAD (4a830b at time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 236274010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619489958
    },
    {
        "content": "<p>Hypersonic labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would be helpful.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1465</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1467</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1468</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1469</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_carry</span><span class=\"w\"> </span><span class=\"n\">v1465</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1468</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1467</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1476</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1356</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1391</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1423</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1447</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1464</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1494</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1516</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1544</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v1476</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1356</span><span class=\"o\">+</span><span class=\"mi\">274</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -p cranelift-tools -- compile test.clif --target x86_64</code></p>\n<h3>Expected Results</h3>\n<p>Code successfully generates without a panic.</p>\n<h3>Actual Results</h3>\n<p>Panic: <code>thread 'main' panicked at 'ALU+imm and ALU+carry ops should not appear here!', cranelift/codegen/src/isa/x64/lower.rs:5740:13</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main HEAD (4a830b at time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 236274011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619489958
    },
    {
        "content": "<p>Hypersonic labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would be helpful.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1465</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1467</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1468</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1469</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_carry</span><span class=\"w\"> </span><span class=\"n\">v1465</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1468</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1467</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1476</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1356</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1391</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1423</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1447</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1464</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1494</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1516</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1544</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v1476</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1356</span><span class=\"o\">+</span><span class=\"mi\">274</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -p cranelift-tools -- compile test.clif --target x86_64</code></p>\n<h3>Expected Results</h3>\n<p>Code successfully generates without a panic.</p>\n<h3>Actual Results</h3>\n<p>Panic: <code>thread 'main' panicked at 'ALU+imm and ALU+carry ops should not appear here!', cranelift/codegen/src/isa/x64/lower.rs:5740:13</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main HEAD (4a830b at time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 236274012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619489958
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827290551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>using this as an excuse to (finally) familiarize myself with the MachInst backend, i'm not sure why <code>ALU+imm and ALU+carry ops should not appear here</code> should be the case - it looks like <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/x64/lower.rs#L5740\">x64/lower.rs</a> is _the_ place for lowering to happen in x64, eschewing <code>codegen/meta</code>'s lowering?</p>\n<p>and if that's so, i'd expect <code>rustc_cranelift_codegen</code> to have hit this, but <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/src/num.rs#L212-L214\">maybe not</a>, since this is the only carry-shaped instruction i see over there.</p>\n</blockquote>",
        "id": 236279082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619494916
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827773136\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Greetings @Hypersonic and thanks for the report!</p>\n<p>The plan we made when starting to design the new backend was to phase out add+carry (and sub+borrow) opcodes in the CLIF, instead directly providing the wider adds/subs that one would normally lower into carry-using ops. In the legalization-based old backend, <code>i128.add</code> became an <code>i64.add</code> and an <code>i64.add_carry</code>; now we just open-code the two-add sequence. (This was in discussions between myself, @julian-seward1 and @bnjbvr back in Jan 2020 or so.)</p>\n<p>The reason for this design choice was that representing carry flags as normal values is fragile performance-wise: to get the correct (fast) machine code, which implicitly passes the bool in the carry flag, one has to pattern-match on the two instructions. The case where the <code>b1</code> is separate -- as in your example, coming from a constant -- has to be lowered separately with <code>pushf</code> or <code>setc</code> to extract the flag and <code>popf</code> or a conditional diamond with <code>clc</code>/<code>stc</code>. The latter codepaths would almost never be used and so are a correctness risk as well; and these instructions are slow, to the point that there should (hopefully!) almost always be a better way to solve the problem.</p>\n<p>Given that we just recently switched the default backend and haven't started the work of removing the old one, we haven't yet cleaned up the opcode space, but we intend to do so eventually.</p>\n<p>That does leave the question: what if one actually wants to generate an add-with-carry? I'm definitely open to understanding use-cases better. Are you hoping to take an arbitrary <code>b1</code> and feed it into the add? Or is this part of a lowering of some other wider arithmetic operation? If the latter, is there any other instruction that would help?</p>\n</blockquote>",
        "id": 236375389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619543734
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827773136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Greetings @Hypersonic and thanks for the report!</p>\n<p>The plan we made when starting to design the new backend was to phase out add+carry (and sub+borrow) opcodes in the CLIF, instead directly providing the wider adds/subs that one would normally lower into carry-using ops. In the legalization-based old backend, <code>i128.add</code> became an <code>i64.add</code> and an <code>i64.add_carry</code>; now we just open-code the two-add sequence. (This was in discussions between myself, @julian-seward1 and @bnjbvr back in Jan 2020 or so.)</p>\n<p>The reason for this design choice was that representing carry flags as normal values is fragile performance-wise: to get the correct (fast) machine code, which implicitly passes the bool in the carry flag, one has to pattern-match on the two instructions. The case where the <code>b1</code> is separate -- as in your example, coming from a constant -- has to be lowered separately with <code>pushf</code> or <code>setc</code> to extract the flag and <code>popf</code> or a conditional diamond with <code>clc</code>/<code>stc</code> to set it. The latter codepaths would almost never be used and so are a correctness risk as well; and these instructions are slow, to the point that there should (hopefully!) almost always be a better way to solve the problem.</p>\n<p>Given that we just recently switched the default backend and haven't started the work of removing the old one, we haven't yet cleaned up the opcode space, but we intend to do so eventually.</p>\n<p>That does leave the question: what if one actually wants to generate an add-with-carry? I'm definitely open to understanding use-cases better. Are you hoping to take an arbitrary <code>b1</code> and feed it into the add? Or is this part of a lowering of some other wider arithmetic operation? If the latter, is there any other instruction that would help?</p>\n</blockquote>",
        "id": 236375565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619543787
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827773136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Greetings @Hypersonic and thanks for the report!</p>\n<p>The plan we made when starting to design the new backend was to phase out add+carry (and sub+borrow) opcodes in the CLIF, instead directly providing the wider adds/subs that one would normally lower into carry-using ops. In the legalization-based old backend, <code>i128.add</code> became an <code>i64.add</code> and an <code>i64.add_carry</code>; now we just open-code the two-add sequence. (This was in discussions between myself, @julian-seward1 and @bnjbvr back in Jan 2020 or so.)</p>\n<p>The reason for this design choice was that representing carry flags as normal values is fragile performance-wise: to get the correct (fast) machine code, which implicitly passes the bool in the carry flag, one has to pattern-match on the two instructions. The case where the <code>b1</code> is separate -- as in your example, coming from a constant -- has to be lowered separately with <code>pushf</code> or <code>setc</code> to extract the flag and <code>popf</code> or a conditional diamond with <code>clc</code>/<code>stc</code> to set it. The materialized-carry-flag-value codepaths would almost never be used and so are a correctness risk as well; and these instructions are slow, to the point that there should (hopefully!) almost always be a better way to solve the problem.</p>\n<p>Given that we just recently switched the default backend and haven't started the work of removing the old one, we haven't yet cleaned up the opcode space, but we intend to do so eventually.</p>\n<p>That does leave the question: what if one actually wants to generate an add-with-carry? I'm definitely open to understanding use-cases better. Are you hoping to take an arbitrary <code>b1</code> and feed it into the add? Or is this part of a lowering of some other wider arithmetic operation? If the latter, is there any other instruction that would help?</p>\n</blockquote>",
        "id": 236375584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619543800
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827773136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Greetings @Hypersonic and thanks for the report!</p>\n<p>The plan we made when starting to design the new backend was to phase out add+carry (and sub+borrow) opcodes in the CLIF, instead directly providing the wider adds/subs that one would normally lower into carry-using ops. In the legalization-based old backend, <code>i128.add</code> became an <code>i64.add_ifcout</code> and an <code>i64.add_carry</code>; now we just open-code the two-add sequence. (This was in discussions between myself, @julian-seward1 and @bnjbvr back in Jan 2020 or so.)</p>\n<p>The reason for this design choice was that representing carry flags as normal values is fragile performance-wise: to get the correct (fast) machine code, which implicitly passes the bool in the carry flag, one has to pattern-match on the two instructions. The case where the <code>b1</code> is separate -- as in your example, coming from a constant -- has to be lowered separately with <code>pushf</code> or <code>setc</code> to extract the flag and <code>popf</code> or a conditional diamond with <code>clc</code>/<code>stc</code> to set it. The materialized-carry-flag-value codepaths would almost never be used and so are a correctness risk as well; and these instructions are slow, to the point that there should (hopefully!) almost always be a better way to solve the problem.</p>\n<p>Given that we just recently switched the default backend and haven't started the work of removing the old one, we haven't yet cleaned up the opcode space, but we intend to do so eventually.</p>\n<p>That does leave the question: what if one actually wants to generate an add-with-carry? I'm definitely open to understanding use-cases better. Are you hoping to take an arbitrary <code>b1</code> and feed it into the add? Or is this part of a lowering of some other wider arithmetic operation? If the latter, is there any other instruction that would help?</p>\n</blockquote>",
        "id": 236376273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619544094
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827780245\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>One use it to check for overflow. In cg_clif I currently have to manually check if an overflow has happened even though at least on x86 the processor already provides this information in the form of a flag.</p>\n</blockquote>",
        "id": 236376963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619544405
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827780245\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>One use it to check for overflow to crash. In cg_clif I currently have to manually check if an overflow has happened even though at least on x86 the processor already provides this information in the form of a flag.</p>\n</blockquote>",
        "id": 236377021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619544436
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827786871\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>@bjorn3 there is the <code>iadd_ifcout</code> instruction which is supported on the new backends (because stack-limit checks use it too IIRC) -- that should be usable to detect overflows? If not, we can add a variant that works for your case. Getting the flag out is easier (<code>SETcc</code>); it's the reloading into carry and use by subsequent operation, or pattern-matching to avoid that, that's slow/fragile.</p>\n</blockquote>",
        "id": 236378291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619545012
    },
    {
        "content": "<p>Hypersonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827806744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>My main use case is detecting the carry-out -- I don't really have any particular need for the carry-in, but this was the instruction I found that would give me the output I needed. If there's a different instruction that can give me that, I'm more than happy to use it.</p>\n</blockquote>",
        "id": 236382902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619546838
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-827851579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>@Hypersonic the <code>iadd_ifcout</code> instruction should give you just that, then, but if your case needs anything other then a trap, we'd need to add pattern-matching for e.g. <code>selectif</code> on its iflags result (right now we just match a <code>trapif</code> on its flags). We can certainly do that! I'm swamped at the moment but can get to this in a while if no one else is able to sooner.</p>\n</blockquote>",
        "id": 236392594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619550766
    },
    {
        "content": "<p>Hypersonic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-828004210\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>I think I'm covered by <code>iadd_ifcout</code>, thanks for the info! I'm going to close this issue since I think it's resolved for me.</p>\n</blockquote>",
        "id": 236424019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619564736
    },
    {
        "content": "<p>Hypersonic closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">Issue #2860</a>:</p>\n<blockquote>\n<p>Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would be helpful.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1465</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1467</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1468</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1469</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_carry</span><span class=\"w\"> </span><span class=\"n\">v1465</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1468</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1467</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1476</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1356</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1391</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1423</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1447</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1464</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1494</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1516</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1544</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v1476</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1356</span><span class=\"o\">+</span><span class=\"mi\">274</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -p cranelift-tools -- compile test.clif --target x86_64</code></p>\n<h3>Expected Results</h3>\n<p>Code successfully generates without a panic.</p>\n<h3>Actual Results</h3>\n<p>Panic: <code>thread 'main' panicked at 'ALU+imm and ALU+carry ops should not appear here!', cranelift/codegen/src/isa/x64/lower.rs:5740:13</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main HEAD (4a830b at time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 236424021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1619564736
    }
]