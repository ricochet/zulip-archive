[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501#issuecomment-1191860386\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">issue #4501</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 290423729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658432159
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501#issuecomment-1191866648\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4501\">issue #4501</a>:</p>\n<blockquote>\n<p>One thing perhaps worth mentioning here as well is the rationale for the current organization. As-is this PR adds a <code>wasmtime_environ::fact</code> module meaning the entire adapter compiler will be located in the <code>wasmtime-environ</code> crate. I chose to do this for a few reasons:</p>\n<ul>\n<li>The compiler depends on type information for components currently defined in <code>wasmtime-environ</code>.</li>\n<li>The compiler also depends on <code>CoreDef</code> and other definitions already defined in <code>wasmtime-environ</code>.</li>\n<li>As a standalone crate I could not come up with either a use case or an effective testing strategy. Using this requires identifying adapter module partitionings which is itself not trivial and testing felt much easier just running the whole gamut instead of trying to test individual pieces.</li>\n</ul>\n<p>While it theoretically could be split out it felt like it would drag most of the component model support in <code>wasmtime-environ</code> with it for little benefit. I ended up concluding that it's not worth it at this time.</p>\n<p>Eventually I think we want to refactor the <code>wasmtime-environ</code> crate to better suit a \"wasmtime build without Cranelift\" better. Right now there's lots of translation/compiler support in <code>wasmtime-environ</code> that is dead code if Wasmtime can't use Cranelift. I think this would be better suited as a Cargo feature, or better yet, a separate crate. My current thinking for a hypothetical \"future ideal\" is:</p>\n<ul>\n<li>Split out all type-level information from <code>wasmtime-environ</code> to.... somewhere. The <code>wasmtime-types</code> crate is already taken and depended on by <code>cranelift-wasm</code>, so some other name.</li>\n<li>Rename <code>wasmtime-environ</code> to something like <code>wasmtime-translate</code>. Make the <code>wasmtime</code> crate's dependency on <code>wasmtime-translate</code> conditional on the <code>cranelift</code> feature</li>\n</ul>\n<p>That way we would still have all the shared type information in a crate for everyone to share but at compile time omitting Cranelift would also automatically omit all other compilation support.</p>\n</blockquote>",
        "id": 290424554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658432634
    }
]