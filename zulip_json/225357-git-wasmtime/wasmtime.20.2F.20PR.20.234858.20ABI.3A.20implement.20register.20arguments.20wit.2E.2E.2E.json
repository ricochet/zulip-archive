[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a>.</p>",
        "id": 296897523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662153864
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a>.</p>",
        "id": 296897524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662153864
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, Cranelift's ABI code emits a sequence of moves from physical<br>\nregisters into vregs at the top of the function body, one for every<br>\nregister-carried argument.</p>\n<p>For a number of reasons, we want to move to operand constraints instead,<br>\nand remove the use of explicitly-named \"pinned vregs\"; this allows for<br>\nbetter regalloc in theory, as it removes the need to \"reverse-engineer\"<br>\nthe sequence of moves.</p>\n<p>This PR alters the ABI code so that it generates a single \"args\"<br>\npseudo-instruction as the first instruction in the function body. This<br>\npseudo-inst defs all register arguments, and constrains them to the<br>\nappropriate registers at the def-point. Subsequently the regalloc can<br>\nmove them wherever it needs to.</p>\n<p>Some care was taken not to have this pseudo-inst show up in<br>\npost-regalloc disassemblies, but the change did cause a general regalloc<br>\n\"shift\" in many tests, so the precise-output updates are a bit noisy.<br>\nSorry about that!</p>\n<p>A subsequent PR will handle the other half of the ABI code, namely, the<br>\ncallsite case, with a similar preg-to-constraint conversion.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 296897525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662153864
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 296897782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662153999
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 297652788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662576529
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 297653588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662576808
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099672511\">PR review</a>.</p>",
        "id": 297657142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662578123
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099672511\">PR review</a>.</p>",
        "id": 297657143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662578123
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965188103\">PR review comment</a>:</p>\n<blockquote>\n<p>If you move the vectors outside <code>ArgInfo</code>, making it <code>Vec&lt;ArgInfo&gt;</code> or similar, then <code>BoxArgInfo</code> could be defined as <code>Box&lt;[ArgInfo]&gt;</code> instead of boxing the vector. Since this would be a fat pointer, the box needs space for two <code>usize</code> values instead of one, but I'm guessing that wouldn't make any of the backends' <code>Inst</code> representations grow. I assume when you decided to box this that you were really trying to avoid sticking two <code>Vec</code>s in the instructions, which would need _six_ <code>usize</code> values.</p>\n</blockquote>",
        "id": 297657144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662578123
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965182966\">PR review comment</a>:</p>\n<blockquote>\n<p>Every user of <code>ArgInfo</code> currently has to zip together <code>defs</code> and <code>pregs</code>. I try to avoid that where possible because it means there's an invariant that the two vectors have the same length, which has to be maintained across distant parts of the codebase. I'd suggest instead either using a vector of pairs, or if you want to name the elements of the pair to make it clear which is which, then have this struct represent only one constraint and keep a <code>Vec&lt;ArgInfo&gt;</code> around instead.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>pub struct ArgInfo {\n    /// vreg defined at the top of the function with\n    /// register-argument values.\n    pub def: Writable&lt;Reg&gt;,\n    /// preg that constrains that vreg to ABI-defined locations.\n    pub preg: Reg,\n}\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 297657146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662578124
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099759838\">PR review</a>.</p>",
        "id": 297668802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662582859
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099759838\">PR review</a>.</p>",
        "id": 297668803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662582859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965245718\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems semi fragile. Is there a reason that we need an instruction for this and can't just constrain the collector directly at the top of <code>VCodeBuilder::collect_operands</code> and <code>count_operands</code> (ideally factoring out a <code>run_collector_on_function</code> helper that is used by both)? This would avoid having a magic instruction that has to always be at the top of the function and remove one extra <code>Inst</code> variant we would have to match on everywhere else.</p>\n</blockquote>",
        "id": 297668804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662582859
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965312253\">PR review comment</a>:</p>\n<blockquote>\n<p>Unfortunately, the whole allocator is built around operands living on instructions; there aren't any free-floating constraints that can exist separately. The alternative would be to inject the operands artificially as early-def operands on the first instruction in the body, but that seems worse to me.</p>\n<p>FWIW we do the same thing in the other direction on return instructions already. (I guess that one is a little more tightly coupled because the return also actually does the control transfer.)</p>\n<p>Another alternative could be to build a notion of \"input constraints\" into RA2, but the cleanest way to implement that IMHO would be to inject an artificial instruction in RA2's frontend, rather than have a separate kind of constraint, so it doesn't improve much in global complexity.</p>\n<p>I may be missing an option here though, if you had something else in mind?</p>\n</blockquote>",
        "id": 297675928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662585842
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099836958\">PR review</a>.</p>",
        "id": 297675929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662585842
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099839909\">PR review</a>.</p>",
        "id": 297676368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586018
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965314361\">PR review comment</a>:</p>\n<blockquote>\n<p>Why hide the synthetic <code>Args</code> instructions in the disassembly?</p>\n</blockquote>",
        "id": 297676369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586019
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099842178\">PR review</a>.</p>",
        "id": 297676688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586155
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965316017\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            // The code below must come first. Finish the current \"IR inst\"\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 297676689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586155
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099843390\">PR review</a>.</p>",
        "id": 297676870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586228
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965316868\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess it's somewhat subjective, but in the post-regalloc code it seemed like unnecessary clutter as it would always indicate tautologies (<code>args rdi=rdi, rsi=rsi, rcx=rcx, rdx=rdx, ...</code>). Happy to remove this special case if others disagree though :-) (To be clear, it still remains in the VCode debug print either way; the <code>want_disasm</code> mechanism is separate)</p>\n</blockquote>",
        "id": 297676871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586229
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099845411\">PR review</a>.</p>",
        "id": 297677141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586344
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965318261\">PR review comment</a>:</p>\n<blockquote>\n<p>What about cases where the args were passed on the stack? Would those end up being useful to see?</p>\n</blockquote>",
        "id": 297677142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586344
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965321932\">PR review comment</a>:</p>\n<blockquote>\n<p>I really like the suggestion to have the args be a vector of pairs <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 297677817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586676
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099850735\">PR review</a>.</p>",
        "id": 297677818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662586676
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099879078\">PR review</a>.</p>",
        "id": 297681579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662588673
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965342009\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, those are actually separately visible as loads, since <code>args</code> only handles registers. I suppose in the future if/when RA2 has a notion of \"custom stackslot locations\" we can give vregs constraints that directly indiciate where to load from, then we don't need that distinction; at that time we can do something different here.</p>\n</blockquote>",
        "id": 297681580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662588673
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1099924034\">PR review</a>.</p>",
        "id": 297687714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662592619
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965374117\">PR review comment</a>:</p>\n<blockquote>\n<p>That sounds good to me, thanks for the clarification!</p>\n</blockquote>",
        "id": 297687720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662592620
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 297714756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618488
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1100162015\">PR review</a>.</p>",
        "id": 297714777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618499
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965553326\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 297714778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618499
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965553866\">PR review comment</a>:</p>\n<blockquote>\n<p>Done; this is much cleaner now, thanks!</p>\n</blockquote>",
        "id": 297714847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618546
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1100162732\">PR review</a>.</p>",
        "id": 297714848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618546
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r965554855\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated! (Actually as a <code>Vec&lt;ArgPair&gt;</code> for now as the extra usize doesn't make a difference in the overall inst enum size and it keeps things a bit simpler otherwise)</p>\n<p>And indeed, the original out-of-lining of the data was because otherwise the <code>Inst</code> types all became larger; but no longer.</p>\n</blockquote>",
        "id": 297714981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618633
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1100164115\">PR review</a>.</p>",
        "id": 297714982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662618633
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966292399\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks like auto-updating the file tests deleted comments like this one.</p>\n</blockquote>",
        "id": 297843351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101180802\">PR review</a>.</p>",
        "id": 297843352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966269503\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd like to suggest this change too. I'd rather use <code>Option::inspect</code> but it's not stable yet.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            insts.into_iter().next().map(|inst| {\n                trace!(\n                    \"gen_retval_area_setup: inst {:?}; ptr reg is {:?}\",\n                    inst,\n                    self.ret_area_ptr.unwrap().to_reg()\n                );\n                inst\n            })\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 297843353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966292850\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we want to keep this comment too.</p>\n</blockquote>",
        "id": 297843354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966283768\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess as long as I'm asking for more things... something like this? It wasn't obvious to me what the \"default\" value here meant.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            // The `args` instruction below must come first. Finish the\n            // current \"IR inst\" with a default source location and continue the scan backward.\n            self.finish_ir_inst(Default::default());\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 297843355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101180802\">PR review</a>.</p>",
        "id": 297843356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662229
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966295938\">PR review comment</a>:</p>\n<blockquote>\n<p>Here's another deleted comment.</p>\n</blockquote>",
        "id": 297843357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662662230
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 297877973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678287
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101514237\">PR review</a>.</p>",
        "id": 297877975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678290
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966491052\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated, thanks!</p>\n</blockquote>",
        "id": 297877977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678290
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101514317\">PR review</a>.</p>",
        "id": 297877990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678299
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966491146\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 297877991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678299
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#discussion_r966491313\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops, I'm not sure why the updater removed that... restored (and I went through the diff chunk-by-chunk to make sure the below and others were not missed either).</p>\n</blockquote>",
        "id": 297878023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678327
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101514556\">PR review</a>.</p>",
        "id": 297878024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678327
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a>.</p>",
        "id": 297885721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662678396
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858#pullrequestreview-1101558393\">PR review</a>.</p>",
        "id": 297891841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662683372
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4858\">PR #4858</a>.</p>",
        "id": 297894056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662685395
    }
]