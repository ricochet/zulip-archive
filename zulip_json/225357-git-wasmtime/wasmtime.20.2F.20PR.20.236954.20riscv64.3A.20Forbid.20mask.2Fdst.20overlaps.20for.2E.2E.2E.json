[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a> from <code>afonso360:riscv-fix-vmergevvm</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is the first fuzz bug for RISC-V from fuzzgen! It took 80 core-hours to find on QEMU.</p>\n<p>The example code below produces the following instruction somewhere in the middle:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vmerge</span><span class=\"p\">.</span><span class=\"n\">vvm</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is a masked operation that writes the results to the mask register. Apparently this is illegal in pretty much all opcodes except a handful (see <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#53-vector-masking\">ยง 5.3 Vector Masking</a>).</p>\n<p>We already have a mechanism to deal with instructions that can't write to one of their source operands, so the fix here is to also apply that to these masked instructions. I tried to look for a way to encode these constraints separately but gave up and decided that it isn't that big a deal to forbid all overlaps, even if we could just forbid the mask/dst overlap.</p>\n<p>I've added a trait to organize overlapping information for opcodes, it Isn't strictly necessary but it gives me a nice centralized location to describe all the overlapping constraints (and how to merge them!).</p>\n</blockquote>",
        "id": 388672852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647607
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 388672854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647608
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 388672856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647608
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is the first fuzz bug for RISC-V from fuzzgen! It took 80 core-hours to find on QEMU.</p>\n<p>The example code below produces the following instruction somewhere in the middle:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vmerge</span><span class=\"p\">.</span><span class=\"n\">vvm</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is a masked operation that writes the results to the mask register. Apparently this is illegal in pretty much all opcodes except a handful (see <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#53-vector-masking\">ยง 5.3 Vector Masking</a>).</p>\n<p>We already have a mechanism to deal with instructions that can't write to one of their source operands, so the fix here is to also apply that to these masked instructions. I tried to look for a way to encode these constraints separately but gave up and decided that it isn't that big a deal to forbid all overlaps, even if we could just forbid the mask/dst overlap.</p>\n<p>I've added a trait to organize overlapping information for opcodes, it Isn't strictly necessary but it gives me a nice centralized location to describe all the overlapping constraints (and how to merge them!).</p>\n</blockquote>",
        "id": 388672991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647730
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is the first fuzz bug for RISC-V from fuzzgen! It took 80 core-hours to find on QEMU.</p>\n<p>The example code below produces the following instruction somewhere in the middle:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vmerge</span><span class=\"p\">.</span><span class=\"n\">vvm</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is a masked operation that writes the results to the mask register. Apparently this is illegal in pretty much all opcodes except for a handful (see <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#53-vector-masking\">ยง 5.3 Vector Masking</a>).</p>\n<p>We already have a mechanism to deal with instructions that can't write to one of their source operands, so the fix here is to also apply that to these masked instructions. I tried to look for a way to encode these constraints separately but gave up and decided that it isn't that big a deal to forbid all overlaps, even if we could just forbid the mask/dst overlap.</p>\n<p>I've added a trait to organize overlapping information for opcodes, it Isn't strictly necessary but it gives me a nice centralized location to describe all the overlapping constraints (and how to merge them!).</p>\n</blockquote>",
        "id": 388673139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647843
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 388673338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693647979
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 388675404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693649225
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 389384139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693995188
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954#pullrequestreview-1613544910\">PR review</a>.</p>",
        "id": 389445113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694011856
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6954\">PR #6954</a>.</p>",
        "id": 389456551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694014442
    }
]