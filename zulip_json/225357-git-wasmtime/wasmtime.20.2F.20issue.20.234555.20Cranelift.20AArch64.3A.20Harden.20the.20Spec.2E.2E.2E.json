[
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1199741412\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<blockquote>\n<p>... this should not result in a large pipeline bubble (hence large performance penalty) on current microarchitectures, is that right?</p>\n</blockquote>\n<p>Yes, microarchitectures that do not perform any value speculation should treat it as <code>NOP</code>.</p>\n<blockquote>\n<p>... would you be willing to run a quick test (any reasonably complex benchmark that uses the heap will do -- <code>bz2</code> or <code>spidermonkey</code> from Sightglass perhaps)?</p>\n</blockquote>\n<p>Sure, I can give it a try.</p>\n<blockquote>\n<p>... should there be a test that shows <code>csdb</code> appearing in br_table lowerings as well?</p>\n</blockquote>\n<p>Is the test I updated in <code>cranelift/codegen/src/isa/aarch64/mod.rs</code> insufficient?</p>\n</blockquote>",
        "id": 291351529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113683
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1199741412\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<blockquote>\n<p>... this should not result in a large pipeline bubble (hence large performance penalty) on current microarchitectures, is that right?</p>\n</blockquote>\n<p>Yes, microarchitectures that do not perform any value speculation should treat it as <code>NOP</code> (hence the choice of a particular encoding).</p>\n<blockquote>\n<p>... would you be willing to run a quick test (any reasonably complex benchmark that uses the heap will do -- <code>bz2</code> or <code>spidermonkey</code> from Sightglass perhaps)?</p>\n</blockquote>\n<p>Sure, I can give it a try.</p>\n<blockquote>\n<p>... should there be a test that shows <code>csdb</code> appearing in br_table lowerings as well?</p>\n</blockquote>\n<p>Is the test I updated in <code>cranelift/codegen/src/isa/aarch64/mod.rs</code> insufficient?</p>\n</blockquote>",
        "id": 291351631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113755
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1199741412\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<blockquote>\n<p>... this should not result in a large pipeline bubble (hence large performance penalty) on current microarchitectures, is that right?</p>\n</blockquote>\n<p>Yes, microarchitectures that do not perform any value speculation should treat it as <code>NOP</code> (hence the choice of a particular encoding).</p>\n<blockquote>\n<p>... would you be willing to run a quick test (any reasonably complex benchmark that uses the heap will do -- <code>bz2</code> or <code>spidermonkey</code> from Sightglass perhaps)?</p>\n</blockquote>\n<p>Sure, I can give it a try.</p>\n<blockquote>\n<p>... should there be a test that shows <code>csdb</code> appearing in br_table lowerings as well?</p>\n</blockquote>\n<p>Is the test I updated in <code>cranelift/codegen/src/isa/aarch64/mod.rs</code> insufficient? <strong>Edit</strong> - sorry, this sounds a bit rude, but I didn't mean it that way; I believe that test does the job.</p>\n</blockquote>",
        "id": 291352302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659114065
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1199770585\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<p>Ah, yes, the smoke test does technically cover <code>br_table</code>. I guess I was a bit surprised we don't have a filetest that exercises it that changed as a result of this; if you'd like to add one, that'd be great, as an opportunistic expansion of our test suite :-)</p>\n</blockquote>",
        "id": 291353885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659114876
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1199808535\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<p>Hah, it turns out that there are in fact tests - <code>cranelift/filetests/filetests/isa/aarch64/jumptable.clif</code> and, unsurprisingly, the <code>cranelift/filetests/filetests/runtests/br_table.clif</code> runtest. I think the issue is that we don't emit the <code>Csdb</code> VCode instruction explicitly for <code>br_table</code>, but the <code>JTSequence</code> compound operation instead, so actually we can't use a CLIF test to verify end-to-end the precise machine code that has been generated. Note that the <code>JTSequence</code> pretty-printing logic hasn't been updated to include the <code>csel</code> instruction added by the initial Spectre mitigation either; I will remedy both issues.</p>\n</blockquote>",
        "id": 291359773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117612
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555#issuecomment-1201273368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4555\">issue #4555</a>:</p>\n<blockquote>\n<p>Here are the Sightglass results on an Ampere Altra machine (<code>wasmtime/target/release/libwasmtime_bench_api.so</code> being the build that generates <code>CSDB</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">442011.60</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">101171.36</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">115783264</span><span class=\"w\"> </span><span class=\"mf\">116247975.57</span><span class=\"w\"> </span><span class=\"mi\">116880177</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">115445187</span><span class=\"w\"> </span><span class=\"mf\">115805963.97</span><span class=\"w\"> </span><span class=\"mi\">118081119</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">17636030.01</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">4052032.02</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">4631075480</span><span class=\"w\"> </span><span class=\"mf\">4649708462.75</span><span class=\"w\"> </span><span class=\"mi\">4675100300</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">4617673936</span><span class=\"w\"> </span><span class=\"mf\">4632072432.74</span><span class=\"w\"> </span><span class=\"mi\">4723056593</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.]</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">836103</span><span class=\"w\"> </span><span class=\"mf\">890682.87</span><span class=\"w\"> </span><span class=\"mi\">1035450</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">839938</span><span class=\"w\"> </span><span class=\"mf\">903084.69</span><span class=\"w\"> </span><span class=\"mi\">1030489</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">33442481</span><span class=\"w\"> </span><span class=\"mf\">35625535.03</span><span class=\"w\"> </span><span class=\"mi\">41416669</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">33595869</span><span class=\"w\"> </span><span class=\"mf\">36121314.02</span><span class=\"w\"> </span><span class=\"mi\">41218165</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There is no real difference, as expected.</p>\n</blockquote>",
        "id": 291582018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659363722
    }
]