[
    {
        "content": "<p><a href=\"https://github.com/dicej\">dicej</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">Issue #7745</a>.</p>",
        "id": 411086439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704318123
    },
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">issue #7745</a>:</p>\n<blockquote>\n<p>Per <a href=\"https://github.com/WebAssembly/wasi-libc/issues/456#issuecomment-1866412804\">https://github.com/WebAssembly/wasi-libc/issues/456#issuecomment-1866412804</a>, a number of <code>wasi-sdk</code> and <code>wasi-libc</code> tests are currently failing when run using Wasmtime but run successfully on other runtimes.  They seem to be related to thread-local storage (e.g. tests involving <code>errno</code>, which is a thread-local variable).</p>\n<h3>Test Case</h3>\n<p>This file was built from <a href=\"https://github.com/WebAssembly/wasi-sdk/blob/main/tests/general/signals.c\">https://github.com/WebAssembly/wasi-sdk/blob/main/tests/general/signals.c</a> for <code>wasm32-wasi-threads</code> using <code>wasi-sdk</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/13823659/signals.c.-O0.wasm.tar.gz\">signals.c.-O0.wasm.tar.gz</a></p>\n<h3>Steps to Reproduce</h3>\n<p>First, install any recent version of Wasmtime (e.g. v16.0.0).  Then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tar</span><span class=\"w\"> </span><span class=\"n\">xf</span><span class=\"w\"> </span><span class=\"n\">signals</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">gz</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">signals</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The expected output is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">psignal</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SIGINT</span>: <span class=\"nc\">Interrupt</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<p>The actual output is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">raise</span><span class=\"p\">(</span><span class=\"n\">_NSIG</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">errno</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">EINVAL</span><span class=\"w\"> </span><span class=\"p\">(</span>: <span class=\"nc\">main</span>: <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">signals</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>: <span class=\"mh\">0x1072</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">abort</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>: <span class=\"mh\">0x1179</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__assert_fail</span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x716</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span>\n<span class=\"w\">           </span><span class=\"mi\">3</span>:  <span class=\"mh\">0x1da</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v16.0.0</p>\n<p>Operating system: MacOS (but should repro on any OS)</p>\n<p>Architecture: ARM64 (but should repro on any architecture)</p>\n<h3>Extra Info</h3>\n<p>See also <a href=\"https://github.com/WebAssembly/wasi-threads/pull/49\">https://github.com/WebAssembly/wasi-threads/pull/49</a>, which may be related.</p>\n</blockquote>",
        "id": 411086457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704318124
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745#issuecomment-1877414579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">issue #7745</a>:</p>\n<blockquote>\n<p>What are the other runtimes this passes in? If I run this in <code>node</code> it produces the same error as Wasmtime using an adapted script from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6159\">this issue</a></p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;runner.js&lt;/summary&gt;</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ITERS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"c1\">////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">TextEncoder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s\">\"FITZGEN: unsupported encoding: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">enc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">charCodeAt</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// lol</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">TextDecoder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s\">\"FITZGEN: unsupported encoding: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">enc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">buf8</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"n\">fromCharCode</span><span class=\"p\">(</span><span class=\"n\">buf8</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span><span class=\"w\"> </span><span class=\"c1\">// lol</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">ionCompile</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"c1\">// while (!wasmHasTier2CompilationCompleted(module)) {</span>\n<span class=\"w\">  </span><span class=\"c1\">//   sleep(1);</span>\n<span class=\"w\">  </span><span class=\"c1\">// }</span>\n<span class=\"w\">  </span><span class=\"c1\">// wasmDis(module);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\" is unimplemented! args = \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">ProcExitError</span><span class=\"w\"> </span><span class=\"n\">extends</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Program exited with code \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">toString</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"ProcExitError: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">message</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">proxy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{};</span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">typeof</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"s\">\"function\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">];</span>\n<span class=\"w\">      </span><span class=\"k\">continue</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"TRACE: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\"(\"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\")\"</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">](</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"TRACE:   -&gt; \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">proxy</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">fs</span><span class=\"o\">'</span><span class=\"p\">);</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">smWasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">readFileSync</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">smModule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">ionCompile</span><span class=\"p\">(</span><span class=\"n\">smWasm</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ITERS</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">null</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">smInstance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">smModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trace</span><span class=\"p\">({</span>\n<span class=\"w\">      </span><span class=\"n\">env</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">memory</span>: <span class=\"nc\">new</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"p\">.</span><span class=\"n\">Memory</span><span class=\"p\">({</span>\n<span class=\"w\">          </span><span class=\"c1\">// shared: true,</span>\n<span class=\"w\">          </span><span class=\"n\">initial</span>: <span class=\"mi\">8000</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"n\">maximum</span>: <span class=\"mi\">16000</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}),</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"n\">bench</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">start</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">monotonicNow</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">monotonicNow</span><span class=\"p\">();</span>\n<span class=\"w\">          </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"ITER: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"n\">wasi</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">'</span><span class=\"na\">thread</span><span class=\"o\">-</span><span class=\"n\">spawn</span><span class=\"o\">'</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">thread</span><span class=\"o\">-</span><span class=\"n\">spawn</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"n\">wasi_snapshot_preview1</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">fd_pread</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">fd_pread</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">poll_oneoff</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">in_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"c1\">// throw new Error('poll_oneoff');</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">random_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt8</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">args_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt8</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">charCodeAt</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt8</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">args_sizes_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">clock_res_get</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">clock_time_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1000000</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setBigInt64</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BigInt</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_filestat_get</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">fd_filestat_get</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_read</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovecs_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovecs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"mi\">4</span>:\n            <span class=\"nc\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"s\">\"/home/nick/sightglass/benchmarks/spidermonkey/default.input.md\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">iovecs_len</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">unread</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">getUint32</span><span class=\"p\">(</span><span class=\"n\">iovecs_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">getUint32</span><span class=\"p\">(</span><span class=\"n\">iovecs_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">mem8</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">charCodeAt</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">unread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setUint32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">default</span>:\n            <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_seek</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">whence</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"mi\">4</span>:\n            <span class=\"nc\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"s\">\"/home/nick/sightglass/benchmarks/spidermonkey/default.input.md\"</span><span class=\"p\">).</span><span class=\"n\">length</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setBigUint64</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BigInt</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">default</span>:\n            <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_write</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">getInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">getInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)[</span><span class=\"n\">base</span><span class=\"p\">]</span>\n<span class=\"w\">              </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">.</span><span class=\"n\">fromCharCode</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"w\">              </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">              </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">              </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"c1\">//console.log(\"fd_write(\" + a + \"): \" + s.trimEnd());</span>\n<span class=\"w\">          </span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">trimEnd</span><span class=\"p\">());</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_fdstat_set_flags</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">fd_fdstat_set_flags</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">path_filestat_get</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">path_filestat_get</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">path_open</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dirflags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oflags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_inheriting</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fdflags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">path_len</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">path_len</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem8</span><span class=\"p\">[</span><span class=\"n\">path_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextDecoder</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"o\">'</span><span class=\"p\">)).</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"s\">\"default.input.md\"</span>:\n            <span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">default</span>:\n            <span class=\"nc\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">denying</span><span class=\"w\"> </span><span class=\"n\">path_open</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"sc\">')'</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">path_remove_directory</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">path_remove_directory</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">path_unlink_file</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">path_unlink_file</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">sched_yield</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">sched_yield</span><span class=\"o\">'</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">environ_get</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">environ_sizes_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_close</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_fdstat_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"c1\">// type</span>\n<span class=\"w\">          </span><span class=\"n\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"mi\">3</span>:\n            <span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"mi\">4</span>:\n            <span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"n\">default</span>:\n            <span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">out_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_prestat_get</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"c1\">// case for preopened \".\"</span>\n<span class=\"w\">          </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// discriminant for directory</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"c1\">// one entry in directory</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">DataView</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)).</span><span class=\"n\">setInt32</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">fd_prestat_dir_name</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextEncoder</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"o\">'</span><span class=\"p\">)).</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">          </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">mem8</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">          </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"n\">mem8</span><span class=\"p\">[</span><span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">          </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">proc_exit</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">ProcExitError</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">}));</span>\n\n<span class=\"w\">    </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">smInstance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">memory</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">smInstance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">_start</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 411223401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704386364
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745#issuecomment-1877531806\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">issue #7745</a>:</p>\n<blockquote>\n<p>Okay, I dug a bit deeper into this.  Turns out all the <code>wasi-libc</code> tests are passing with Wasmtime 16, Toywasm 35, and Wasmer 4.2.5 as long as I build with <code>-pthread</code> -- if I don't build with that flag, they all fail.  Lesson learned.</p>\n<p>Meanwhile, I've also updated the <code>wasi-sdk</code> test script to build with <code>-pthread</code>.  Now Toywasm and Wasmer are able to run the tests okay (modulo the fact that the .expected files are hard-coded to match Wasmtime, and the other runtimes format error output differently), but Wasmtime ends up busy looping forever as soon as any test tried to write to stdout, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">queue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">com</span><span class=\"p\">.</span><span class=\"n\">apple</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"n\">SIGSTOP</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"mh\">0x000000018c9a6060</span><span class=\"w\"> </span><span class=\"n\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"err\">`</span><span class=\"n\">kevent</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"mh\">0x0000000100a5d284</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">mio</span>::<span class=\"n\">waker</span>::<span class=\"n\">Waker</span>::<span class=\"n\">wake</span>::<span class=\"n\">h70f0de287550c690</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">2</span>: <span class=\"mh\">0x0000000100a4cb94</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">util</span>::<span class=\"n\">wake</span>::<span class=\"n\">wake_arc_raw</span>::<span class=\"n\">h1a32ae31a8ec5072</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">68</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">3</span>: <span class=\"mh\">0x0000000100a4c0f4</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">scheduler</span>::<span class=\"n\">current_thread</span>::<span class=\"n\">Context</span>::<span class=\"n\">park_yield</span>::<span class=\"n\">hc41080da61d04b53</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">320</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"mh\">0x00000001003da4a8</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">context</span>::<span class=\"n\">scoped</span>::<span class=\"n\">Scoped</span><span class=\"cp\">$LT$T$GT$</span>::<span class=\"n\">set</span>::<span class=\"n\">hf092eaeb69914454</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">820</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">5</span>: <span class=\"mh\">0x00000001005a69b0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">context</span>::<span class=\"n\">set_scheduler</span>::<span class=\"n\">h48cc529b1f87605e</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">172</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">6</span>: <span class=\"mh\">0x00000001003dbb50</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">scheduler</span>::<span class=\"n\">current_thread</span>::<span class=\"n\">CoreGuard</span>::<span class=\"n\">block_on</span>::<span class=\"n\">h0aea4e87e0591d94</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">112</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">7</span>: <span class=\"mh\">0x00000001005b33bc</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">tokio</span>::<span class=\"n\">runtime</span>::<span class=\"n\">context</span>::<span class=\"n\">runtime</span>::<span class=\"n\">enter_runtime</span>::<span class=\"n\">h2aa886ffe04dfc58</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">668</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">8</span>: <span class=\"mh\">0x00000001003ad284</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">in_tokio</span>::<span class=\"n\">hb195ebe39d79dde3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">420</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">9</span>: <span class=\"mh\">0x00000001004a7bf0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">_</span><span class=\"cp\">$LT$core</span><span class=\"o\">..</span><span class=\"n\">panic</span><span class=\"o\">..</span><span class=\"n\">unwind_safe</span><span class=\"o\">..</span><span class=\"n\">AssertUnwindSafe</span><span class=\"cp\">$LT$F$GT$$u20$as$u20$core</span><span class=\"o\">..</span><span class=\"n\">ops</span><span class=\"o\">..</span><span class=\"n\">function</span><span class=\"o\">..</span><span class=\"nb\">FnOnce</span><span class=\"cp\">$LT$$LP$$RP$$GT$$GT$</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h04ccc3778290beca</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">180</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">10</span>: <span class=\"mh\">0x00000001003ef1f0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">instance</span>::<span class=\"n\">Instance</span>::<span class=\"n\">from_vmctx</span>::<span class=\"n\">hac10297a5cfbc8d9</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">148</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">11</span>: <span class=\"mh\">0x00000001004209a0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">_</span><span class=\"cp\">$LT$F$u20$as$u20$wasmtime</span><span class=\"o\">..</span><span class=\"n\">func</span><span class=\"o\">..</span><span class=\"n\">IntoFunc</span><span class=\"cp\">$LT$T$C$$LP$wasmtime</span><span class=\"o\">..</span><span class=\"n\">func</span><span class=\"o\">..</span><span class=\"n\">Caller</span><span class=\"cp\">$LT$T$GT$$C$A1$C$A2$C$A3$C$A4$RP$$C$R$GT$$GT$</span>::<span class=\"n\">into_func</span>::<span class=\"n\">native_call_shim</span>::<span class=\"n\">h383012752bf42248</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">84</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">12</span>: <span class=\"mh\">0x00000001025c954c</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">13</span>: <span class=\"mh\">0x00000001025c7030</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">14</span>: <span class=\"mh\">0x00000001025c8650</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">15</span>: <span class=\"mh\">0x00000001025c882c</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">16</span>: <span class=\"mh\">0x00000001025c8a24</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">17</span>: <span class=\"mh\">0x00000001025c8300</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">18</span>: <span class=\"mh\">0x00000001025c8440</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">19</span>: <span class=\"mh\">0x00000001025c436c</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">20</span>: <span class=\"mh\">0x00000001025c6df0</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">21</span>: <span class=\"mh\">0x00000001025c42a0</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">22</span>: <span class=\"mh\">0x00000001025c91e8</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">23</span>: <span class=\"mh\">0x0000000100ede5e0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_setjmp_16_0_0</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">24</span>: <span class=\"mh\">0x000000010065e638</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">traphandlers</span>::<span class=\"n\">_</span><span class=\"cp\">$LT$impl$u20$wasmtime_runtime</span><span class=\"o\">..</span><span class=\"n\">traphandlers</span><span class=\"o\">..</span><span class=\"n\">call_thread_state</span><span class=\"o\">..</span><span class=\"n\">CallThreadState</span><span class=\"cp\">$GT$</span>::<span class=\"n\">with</span>::<span class=\"n\">ha4d3eccbd3d85625</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">25</span>: <span class=\"mh\">0x00000001004f7530</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">traphandlers</span>::<span class=\"n\">catch_traps</span>::<span class=\"n\">hd22f75804c9e7d97</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">152</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">26</span>: <span class=\"mh\">0x000000010044c0a8</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">func</span>::<span class=\"n\">invoke_wasm_and_catch_traps</span>::<span class=\"n\">h92e67288af28d454</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">184</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">27</span>: <span class=\"mh\">0x000000010044e2ac</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">func</span>::<span class=\"n\">Func</span>::<span class=\"n\">call_impl</span>::<span class=\"n\">h172a5645f5d101de</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1304</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">28</span>: <span class=\"mh\">0x0000000100495d10</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_cli</span>::<span class=\"n\">commands</span>::<span class=\"n\">run</span>::<span class=\"n\">RunCommand</span>::<span class=\"n\">load_main_module</span>::<span class=\"n\">h5baeac87cd95a968</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2596</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">29</span>: <span class=\"mh\">0x0000000100494190</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime_cli</span>::<span class=\"n\">commands</span>::<span class=\"n\">run</span>::<span class=\"n\">RunCommand</span>::<span class=\"n\">execute</span>::<span class=\"n\">hba50b58e459b0ce7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3056</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">30</span>: <span class=\"mh\">0x0000000100150474</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Wasmtime</span>::<span class=\"n\">execute</span>::<span class=\"n\">h2578284636f5c3af</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">296</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">31</span>: <span class=\"mh\">0x000000010014df80</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">old_cli</span>::<span class=\"n\">main</span>::<span class=\"n\">h4ab441c89575015e</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">580</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>: <span class=\"mh\">0x0000000100155530</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h90399811d0439507</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">12</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">33</span>: <span class=\"mh\">0x0000000100153ea0</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"n\">_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span>::<span class=\"n\">h5450f370f5c6d820</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">34</span>: <span class=\"mh\">0x000000010107f17c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"n\">impls</span>::<span class=\"n\">_</span><span class=\"cp\">$LT$impl$u20$core</span><span class=\"o\">..</span><span class=\"n\">ops</span><span class=\"o\">..</span><span class=\"n\">function</span><span class=\"o\">..</span><span class=\"nb\">FnOnce</span><span class=\"cp\">$LT$A$GT$$u20$for$u20$$RF$F$GT$</span>::<span class=\"n\">call_once</span>::<span class=\"n\">hdb9d57f6813b6639</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">284</span>:<span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">35</span>: <span class=\"mh\">0x000000010107f174</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">do_call</span>::<span class=\"n\">h3316be3da4e712e4</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">504</span>:<span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">36</span>: <span class=\"mh\">0x000000010107f174</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">h72745351e21d17fd</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">468</span>:<span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">37</span>: <span class=\"mh\">0x000000010107f174</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span>::<span class=\"n\">h2df3aeb4d14c657e</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">142</span>:<span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">38</span>: <span class=\"mh\">0x000000010107f174</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span>::<span class=\"n\">h40cc69f0b809216f</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">148</span>:<span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">39</span>: <span class=\"mh\">0x000000010107f174</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">do_call</span>::<span class=\"n\">hdf604766e4bed556</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">504</span>:<span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">40</span>: <span class=\"mh\">0x000000010107f170</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">h52de1aaf80258115</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">468</span>:<span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">41</span>: <span class=\"mh\">0x000000010107f170</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span>::<span class=\"n\">hec154f66f8285e2b</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">142</span>:<span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">42</span>: <span class=\"mh\">0x000000010107f170</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">haeade8bb0e866fa6</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">148</span>:<span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">opt</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">43</span>: <span class=\"mh\">0x0000000100151898</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"err\">`</span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">52</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">44</span>: <span class=\"mh\">0x000000018c687f28</span><span class=\"w\"> </span><span class=\"n\">dyld</span><span class=\"err\">`</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2236</span>\n</code></pre></div>\n<p>The stack trace is a bit different each time I take a sample, but it's generally spinning in <code>tokio</code> or <code>mio</code>.</p>\n</blockquote>",
        "id": 411235465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704391117
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745#issuecomment-1877539945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">issue #7745</a>:</p>\n<blockquote>\n<p>Maybe a <code>wait</code> is not being <code>notify</code>-ed? I added #7220 to help diagnose this kind of thing: does running with <code>WASMTIME_LOG=wasmtime_runtime=trace</code> help clarify things?</p>\n</blockquote>",
        "id": 411236488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704391506
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745#issuecomment-1877546864\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7745\">issue #7745</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_LOG</span><span class=\"o\">=</span><span class=\"n\">wasmtime_runtime</span><span class=\"o\">=</span><span class=\"n\">trace</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">argc_argv_main</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"n\">T18</span>:<span class=\"mi\">06</span>:<span class=\"mf\">50.745040</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">memory</span>: <span class=\"nc\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"mh\">0xb58</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">4294967295</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then it hangs with no further output.</p>\n<p>For reference:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// argc_argv_main.c</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"s\">\"hello from argc argv main!\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">pthread</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"w\"> </span><span class=\"n\">argc_argv_main</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">argc_argv_main</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"o\">-</span><span class=\"n\">O0</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 411237282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704391813
    }
]