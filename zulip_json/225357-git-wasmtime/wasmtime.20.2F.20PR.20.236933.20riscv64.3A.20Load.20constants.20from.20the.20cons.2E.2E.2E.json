[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a> from <code>afonso360:riscv-pool-constants</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a follow up to #6915 (and #5578 I guess). This PR enables loading ISLE constants from the constant pool. </p>\n<p>Not all constants are loaded from the constant pool. Constants that are observed at emit time are still loaded inline since I couldn't find a way of registering them with the MachBuffer for loading.</p>\n<p>This also causes a slight pessimization of the dynamic instruction count since we currently force the address to be fully loaded into a register before a load when resolving labels. This is easily fixable, but I'm going to do it in a follow-up PR.</p>\n</blockquote>",
        "id": 388112087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693402912
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a>.</p>",
        "id": 388112089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693402912
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a>.</p>",
        "id": 388112091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693402912
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933#pullrequestreview-1602834102\">PR review</a>:</p>\n<blockquote>\n<p>Nice! One comment about something that's perhaps preexisting, but this looks good to me regardless of that.</p>\n<blockquote>\n<p>Constants that are observed at emit time are still loaded inline since I couldn't find a way of registering them with the MachBuffer for loading.</p>\n</blockquote>\n<p>My guess is that if possible it'd be best to break up the macro-instruction into its components to handle this. That way instead of using macro-instructions the helpers in ISLE can be used. This may not always be applicable though.</p>\n<p>I did look at a few of these in <code>emit.rs</code> though and they were related to things like sp adjustments and stack probe loops which I think could also reasonably be switched over to asserting that the constant fits in an instruction rather than requiring a pool. (so long as the range matches what one would reasonably expect for these situations)</p>\n</blockquote>",
        "id": 388123875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693405629
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933#pullrequestreview-1602834102\">PR review</a>:</p>\n<blockquote>\n<p>Nice! One comment about something that's perhaps preexisting, but this looks good to me regardless of that.</p>\n<blockquote>\n<p>Constants that are observed at emit time are still loaded inline since I couldn't find a way of registering them with the MachBuffer for loading.</p>\n</blockquote>\n<p>My guess is that if possible it'd be best to break up the macro-instruction into its components to handle this. That way instead of using macro-instructions the helpers in ISLE can be used. This may not always be applicable though.</p>\n<p>I did look at a few of these in <code>emit.rs</code> though and they were related to things like sp adjustments and stack probe loops which I think could also reasonably be switched over to asserting that the constant fits in an instruction rather than requiring a pool. (so long as the range matches what one would reasonably expect for these situations)</p>\n</blockquote>",
        "id": 388123876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693405629
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933#discussion_r1310362512\">PR review comment</a>:</p>\n<blockquote>\n<p>This is preexisting I think, and probably affects other backends too, but technically emitting a 64-bit constant here is over-approximating how large it needs to be, right? In that only the <code>ty</code>-width sized bit-pattern of <code>c</code> is all that matters so for a 32-bit constant the 64-bit size is overkill?</p>\n<p>No need to fix here since this preserves what was done before, but may be worth trying to fix later?</p>\n</blockquote>",
        "id": 388123877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693405630
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933#pullrequestreview-1602887736\">PR review</a>.</p>",
        "id": 388128377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693406747
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933#discussion_r1310396120\">PR review comment</a>:</p>\n<blockquote>\n<p>My plan is to eventually fix #6922 and then we should be able to change this to only ever trigger for 64 bit constants, since all other constants should be able to be emitted with the previous rules (i.e. with constant materialization instructions). </p>\n</blockquote>",
        "id": 388128379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693406747
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a>.</p>",
        "id": 388131346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693407414
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a>.</p>",
        "id": 388132399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693407636
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6933\">PR #6933</a>.</p>",
        "id": 388153407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693413182
    }
]