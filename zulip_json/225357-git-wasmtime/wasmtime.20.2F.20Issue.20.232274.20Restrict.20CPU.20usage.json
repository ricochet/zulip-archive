[
    {
        "content": "<p>mleonhard opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274\">Issue #2274</a>:</p>\n<blockquote>\n<p>I wish to use wasmtime in a server to run small untrusted code blocks. I need to limit the CPU time consumed by each running block. I looked through the docs and found only the ability to interrupt running code (<a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Store.html#method.interrupt_handle\">Store::interrupt_handle</a>).  I don't want to kill badly-behaved blocks.  I want to make the blocks behave nicely.  I need the server to run hundreds of wasmtime VMs while also not starving the server's request processing code.</p>\n<p>Ideally, wasmtime would let me configure a set of VMs with a shared CPU restriction of a certain number of cores, or fractional cores.  The VMs would run concurrently and yield to each other so all can make progress.  And all of the VMs in the set would not consume more than the set amount of CPU time per second.</p>\n<p>Let's support or document how to restrict instance cpu time.</p>\n<p>Related issue for restricting memory usage: #2273</p>\n<p>Related discussion: <a href=\"https://users.rust-lang.org/t/limit-handler-to-cpu-memory-bounds/26429\">https://users.rust-lang.org/t/limit-handler-to-cpu-memory-bounds/26429</a></p>\n</blockquote>",
        "id": 212476889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602014231
    },
    {
        "content": "<p>mleonhard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274#issuecomment-704563787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274\">Issue #2274</a>:</p>\n<blockquote>\n<p>A workaround is to use <a href=\"https://docs.rs/core_affinity/0.5.10/core_affinity/\">core_affinity crate</a> to bind threads to a particular CPU core.  If all calls into the VM occur on one core, then they can never exceed one core of CPU usage.</p>\n<p>Other server workloads will run slowly if they get scheduled onto the VM's core.  As long as workload threads did not set CPU affinity, the OS will run them smoothly on other cores.</p>\n<p>I searched through the <a href=\"https://docs.rs/tokio/0.2.22/tokio/runtime/index.html\">tokio::runtime</a> source and found no indication that it sets thread CPU affinity.  <a href=\"https://crates.io/crates/async-std\">async-std</a> and <a href=\"https://crates.io/crates/smol\">smol</a> both use <a href=\"https://docs.rs/async-global-executor/latest/async_global_executor/index.html\">async_global_executor</a> which <a href=\"https://docs.rs/async-global-executor/1.3.0/src/async_global_executor/lib.rs.html#105\">does not set thread CPU affinity</a>.</p>\n</blockquote>",
        "id": 212488459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602019815
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274#issuecomment-704599762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274\">Issue #2274</a>:</p>\n<blockquote>\n<p>Currently Wasmtime has no inherent method of limiting CPU usage. It also has no form of resumable interrupts natively. One option is to inject your own periodic calls into the host which can do stack-switching to give you a form of preemption, but it's true that fully supporting this feature would likely require native support in Wasmtime itself. </p>\n<p>For now I'd recommend exploring the stack-switching option combined with host calls.</p>\n</blockquote>",
        "id": 212496965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602025729
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274#issuecomment-806029460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2274\">Issue #2274</a>:</p>\n<blockquote>\n<p>Coming back to this, I think this is roughly implemented with the combination of async support in Wasmtime plus fuel now. That gives you the ability to relatively deterministically preempt executing WebAssembly code to allow an embedding to make otherwise-relevant scheduling decisions. </p>\n<p>While that doesn't expose the native ability to limit CPU execution of WebAssembly in the manner that you're describing, I think it provides a solid building block for doing so. I'm not sure that it would make sense for wasmtime to manage thread pools or CPU resources in this regard, that sort of sounds like more of what an embedding of Wasmtime would want to do.</p>\n<p>In that sense is the async/fuel support enough for you to unblock this issue?</p>\n</blockquote>",
        "id": 231677885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616607818
    }
]