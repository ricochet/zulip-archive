[
    {
        "content": "<p><a href=\"https://github.com/dbezhetskov\">dbezhetskov</a> added the <a href=\"https://api.github.com/repos/bytecodealliance/wasmtime/labels/bug\">bug</a> label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754\">Issue #6754</a>.</p>",
        "id": 376941044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689852182
    },
    {
        "content": "<p>dbezhetskov opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754\">issue #6754</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>I'm experimenting with generating wasm and SpiderMonkey. The test case is a bit hard to reproduce but it is just executing a mix of generated by hand wasm and SpiderMonkey compiled to wasm.</p>\n<h3>Steps to Reproduce</h3>\n<p>...</p>\n<h3>Expected Results</h3>\n<p>No bug.</p>\n<h3>Actual Results</h3>\n<p>wasmtime._error.WasmtimeError: error while executing at wasm backtrace:<br>\n    0: 0x776866 - &lt;unknown&gt;!__wasi_clock_time_get<br>\n    1: 0x77667d - &lt;unknown&gt;!__clock_gettime<br>\n    2: 0x10b26 - &lt;unknown&gt;!mozilla::TimeStamp::Now(bool)<br>\n    3: 0x466d61 - &lt;unknown&gt;!js::jit::BaselineCacheIRCompiler::compile()<br>\n    4: 0x46fbc9 - &lt;unknown&gt;!js::jit::AttachBaselineCacheIRStub(JSContext<em>, js::jit::CacheIRWriter const&amp;, js::jit::CacheKind, JSScript</em>, js::jit::ICScript<em>, js::jit::ICFallbackStub</em>, char const*)<br>\n    5: 0x48bd4d - &lt;unknown&gt;!js::jit::DoSetElemFallback(JSContext<em>, js::jit::BaselineFrame</em>, js::jit::ICFallbackStub<em>, JS::Value</em>, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;)<br>\n    6:  0xdbc - &lt;unknown&gt;!&lt;wasm function 11&gt;<br>\n    7: 0x2674 - &lt;unknown&gt;!&lt;wasm function 37&gt;<br>\n    8: 0x2022 - &lt;unknown&gt;!&lt;wasm function 33&gt;<br>\n    9:  0x393 - &lt;unknown&gt;!&lt;wasm function 0&gt;<br>\n   10: 0x5c315f - &lt;unknown&gt;!js::jit::MaybeEnterJit(JSContext*, js::RunState&amp;)<br>\n   11: 0x8bfbf - &lt;unknown&gt;!js::RunScript(JSContext*, js::RunState&amp;)<br>\n   12: 0x9cdc4 - &lt;unknown&gt;!js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&amp;, js::MaybeConstruct, js::CallReason)<br>\n   13: 0x9d541 - &lt;unknown&gt;!js::CallFromStack(JSContext*, JS::CallArgs const&amp;, js::CallReason)<br>\n   14: 0x48efd5 - &lt;unknown&gt;!js::jit::DoCallFallback(JSContext<em>, js::jit::BaselineFrame</em>, js::jit::ICFallbackStub<em>, unsigned int, JS::Value</em>, JS::MutableHandle&lt;JS::Value&gt;)<br>\n   15:  0x86c - &lt;unknown&gt;!&lt;wasm function 5&gt;<br>\n   16: 0x231d - &lt;unknown&gt;!&lt;wasm function 35&gt;<br>\n   17: 0x21a6 - &lt;unknown&gt;!&lt;wasm function 34&gt;<br>\n   18:  0x393 - &lt;unknown&gt;!&lt;wasm function 0&gt;<br>\n   19: 0x5c315f - &lt;unknown&gt;!js::jit::MaybeEnterJit(JSContext*, js::RunState&amp;)<br>\n   20: 0x8bfbf - &lt;unknown&gt;!js::RunScript(JSContext*, js::RunState&amp;)<br>\n   21: 0x9cdc4 - &lt;unknown&gt;!js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&amp;, js::MaybeConstruct, js::CallReason)<br>\n   22: 0x9d653 - &lt;unknown&gt;!js::Call(JSContext*, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;, js::AnyInvokeArgs const&amp;, JS::MutableHandle&lt;JS::Value&gt;, js::CallReason)<br>\n   23: 0x2875af - &lt;unknown&gt;!JS_CallFunctionName(JSContext<em>, JS::Handle&lt;JSObject</em>&gt;, char const*, JS::HandleValueArray const&amp;, JS::MutableHandle&lt;JS::Value&gt;)<br>\n   24: 0xdab4 - CallFunctionByName(char*, bool)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 8.0.1</p>\n<p>Operating system: Ubuntu</p>\n<p>Architecture: amd_x64</p>\n<h3>Extra Info</h3>\n<p>My question is - what pointers should I align to be able to call __wasi_clock_time_get? StackPointer?<br>\nI export StackPointer from SpiderMonkey instance and use it to allocate stack.<br>\nI'm just curious of restrictions that I should to follow.</p>\n</blockquote>",
        "id": 376941046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689852182
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754#issuecomment-1643869561\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754\">issue #6754</a>:</p>\n<blockquote>\n<p>Low level details of WASI APIs such as alignment aren't super well documented for preview1 but it's possible to dig into them if you're interested. In general alignment behaves like C and 64-bit types are 8-byte aligned. You'll likely want to have a reference for the ABI of preview1 on-hand when digging into that.</p>\n<p>In the meantime though if you're modifying the stack pointer directly then it seems like one of the more likely causes of this error is that LLVM-generated wasm expects the in-wasm stack pointer to be 16-byte aligned. Are your modifications preserving this alignment or should you perhaps also be adding alignment in?</p>\n</blockquote>",
        "id": 376966723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689857442
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754#issuecomment-1701576462\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754\">issue #6754</a>:</p>\n<blockquote>\n<p>I'm going to close this since we haven't gotten many more details and the suspicion is that the modifications here are changing the stack pointer, but please feel free to comment with more details and I can reopen and/or help investigate further.</p>\n</blockquote>",
        "id": 388386107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693507376
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6754\">issue #6754</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>I'm experimenting with generating wasm and SpiderMonkey. The test case is a bit hard to reproduce but it is just executing a mix of generated by hand wasm and SpiderMonkey compiled to wasm.</p>\n<h3>Steps to Reproduce</h3>\n<p>...</p>\n<h3>Expected Results</h3>\n<p>No bug.</p>\n<h3>Actual Results</h3>\n<p>wasmtime._error.WasmtimeError: error while executing at wasm backtrace:<br>\n    0: 0x776866 - &lt;unknown&gt;!__wasi_clock_time_get<br>\n    1: 0x77667d - &lt;unknown&gt;!__clock_gettime<br>\n    2: 0x10b26 - &lt;unknown&gt;!mozilla::TimeStamp::Now(bool)<br>\n    3: 0x466d61 - &lt;unknown&gt;!js::jit::BaselineCacheIRCompiler::compile()<br>\n    4: 0x46fbc9 - &lt;unknown&gt;!js::jit::AttachBaselineCacheIRStub(JSContext<em>, js::jit::CacheIRWriter const&amp;, js::jit::CacheKind, JSScript</em>, js::jit::ICScript<em>, js::jit::ICFallbackStub</em>, char const*)<br>\n    5: 0x48bd4d - &lt;unknown&gt;!js::jit::DoSetElemFallback(JSContext<em>, js::jit::BaselineFrame</em>, js::jit::ICFallbackStub<em>, JS::Value</em>, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;)<br>\n    6:  0xdbc - &lt;unknown&gt;!&lt;wasm function 11&gt;<br>\n    7: 0x2674 - &lt;unknown&gt;!&lt;wasm function 37&gt;<br>\n    8: 0x2022 - &lt;unknown&gt;!&lt;wasm function 33&gt;<br>\n    9:  0x393 - &lt;unknown&gt;!&lt;wasm function 0&gt;<br>\n   10: 0x5c315f - &lt;unknown&gt;!js::jit::MaybeEnterJit(JSContext*, js::RunState&amp;)<br>\n   11: 0x8bfbf - &lt;unknown&gt;!js::RunScript(JSContext*, js::RunState&amp;)<br>\n   12: 0x9cdc4 - &lt;unknown&gt;!js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&amp;, js::MaybeConstruct, js::CallReason)<br>\n   13: 0x9d541 - &lt;unknown&gt;!js::CallFromStack(JSContext*, JS::CallArgs const&amp;, js::CallReason)<br>\n   14: 0x48efd5 - &lt;unknown&gt;!js::jit::DoCallFallback(JSContext<em>, js::jit::BaselineFrame</em>, js::jit::ICFallbackStub<em>, unsigned int, JS::Value</em>, JS::MutableHandle&lt;JS::Value&gt;)<br>\n   15:  0x86c - &lt;unknown&gt;!&lt;wasm function 5&gt;<br>\n   16: 0x231d - &lt;unknown&gt;!&lt;wasm function 35&gt;<br>\n   17: 0x21a6 - &lt;unknown&gt;!&lt;wasm function 34&gt;<br>\n   18:  0x393 - &lt;unknown&gt;!&lt;wasm function 0&gt;<br>\n   19: 0x5c315f - &lt;unknown&gt;!js::jit::MaybeEnterJit(JSContext*, js::RunState&amp;)<br>\n   20: 0x8bfbf - &lt;unknown&gt;!js::RunScript(JSContext*, js::RunState&amp;)<br>\n   21: 0x9cdc4 - &lt;unknown&gt;!js::InternalCallOrConstruct(JSContext*, JS::CallArgs const&amp;, js::MaybeConstruct, js::CallReason)<br>\n   22: 0x9d653 - &lt;unknown&gt;!js::Call(JSContext*, JS::Handle&lt;JS::Value&gt;, JS::Handle&lt;JS::Value&gt;, js::AnyInvokeArgs const&amp;, JS::MutableHandle&lt;JS::Value&gt;, js::CallReason)<br>\n   23: 0x2875af - &lt;unknown&gt;!JS_CallFunctionName(JSContext<em>, JS::Handle&lt;JSObject</em>&gt;, char const*, JS::HandleValueArray const&amp;, JS::MutableHandle&lt;JS::Value&gt;)<br>\n   24: 0xdab4 - CallFunctionByName(char*, bool)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 8.0.1</p>\n<p>Operating system: Ubuntu</p>\n<p>Architecture: amd_x64</p>\n<h3>Extra Info</h3>\n<p>My question is - what pointers should I align to be able to call __wasi_clock_time_get? StackPointer?<br>\nI export StackPointer from SpiderMonkey instance and use it to allocate stack.<br>\nI'm just curious of restrictions that I should to follow.</p>\n</blockquote>",
        "id": 388386110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693507376
    }
]