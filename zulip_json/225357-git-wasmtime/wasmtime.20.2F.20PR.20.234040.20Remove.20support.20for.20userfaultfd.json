[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4040\">PR #4040</a> from <code>rm-uffd</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes support for the <code>userfaultfd</code> or \"uffd\" syscall on<br>\nLinux. This support was originally added for users migrating from Lucet<br>\nto Wasmtime, but the recent developments of kernel-supported<br>\ncopy-on-write support for memory initialization wound up being more<br>\nappropriate for these use cases than usefaultfd. The main reason for<br>\nmoving to copy-on-write initialization are:</p>\n<ul>\n<li>\n<p>The <code>userfaultfd</code> feature was never necessarily intended for this<br>\n  style of use case with wasm and was susceptible to subtle and rare<br>\n  bugs that were extremely difficult to track down. We were never 100%<br>\n  certain that there were kernel bugs related to userfaultfd but the<br>\n  suspicion never went away.</p>\n</li>\n<li>\n<p>Handling faults with userfaultfd was always slow and single-threaded.<br>\n  Only one thread could handle faults and traveling to user-space to<br>\n  handle faults is inherently slower than handling them all in the<br>\n  kernel. The single-threaded aspect in particular presented a<br>\n  significant scaling bottleneck for embeddings that want to run many<br>\n  wasm instances in parallel.</p>\n</li>\n<li>\n<p>One of the major benefits of userfaultfd was lazy initialization of<br>\n  wasm linear memory which is also achieved with the copy-on-write<br>\n  initialization support we have right now.</p>\n</li>\n<li>\n<p>One of the suspected benefits of userfaultfd was less frobbing of the<br>\n  kernel vma structures when wasm modules are instantiated. Currently<br>\n  the copy-on-write support has a mitigation where we attempt to reuse<br>\n  the memory images where possible to avoid changing vma structures.<br>\n  When comparing this to userfaultfd's performance it was found that<br>\n  kernel modifications of vmas aren't a worrisome bottleneck so<br>\n  copy-on-write is suitable for this as well.</p>\n</li>\n</ul>\n<p>Overall there are no remaining benefits that userfaultfd gives that<br>\ncopy-on-write doesn't, and copy-on-write solves a major downsides of<br>\nuserfaultfd, the scaling issue with a single faulting thread.<br>\nAdditionally copy-on-write support seems much more robust in terms of<br>\nkernel implementation since it's only using standard memory-management<br>\nsyscalls which are heavily exercised. Finally copy-on-write support<br>\nprovides a new bonus where read-only memory in WebAssembly can be mapped<br>\ndirectly to the same kernel cache page, even amongst many wasm instances<br>\nof the same module, which was never possible with userfaultfd.</p>\n<p>In light of all this it's expected that all users of userfaultfd should<br>\nmigrate to the copy-on-write initialization of Wasmtime (which is<br>\nenabled by default).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 279120122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650054404
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4040#pullrequestreview-944636829\">PR review</a>.</p>",
        "id": 279311315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650303160
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4040\">PR #4040</a>.</p>",
        "id": 279312474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650303747
    }
]