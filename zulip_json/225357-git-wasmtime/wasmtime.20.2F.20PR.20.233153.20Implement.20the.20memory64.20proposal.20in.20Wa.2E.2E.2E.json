[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit implements the WebAssembly [memory64 proposal][proposal] in<br>\nboth Wasmtime and Cranelift. In terms of work done Cranelift ended up<br>\nneeding very little work here since most of it was already prepared for<br>\n64-bit memories at one point or another. Most of the work in Wasmtime is<br>\nlargely refactoring, changing a bunch of <code>u32</code> values to something else.</p>\n<p>A number of internal and public interfaces are changing as a result of<br>\nthis commit, for example:</p>\n<ul>\n<li>\n<p>Acessors on <code>wasmtime::Memory</code> that work with pages now all return<br>\n<code>u64</code> unconditionally rather than <code>u32</code>. This makes it possible to<br>\n  accommodate 64-bit memories with this API, but we may also want to<br>\n  consider <code>usize</code> here at some point since the host can't grow past<br>\n<code>usize</code>-limited pages anyway.</p>\n</li>\n<li>\n<p>The <code>wasmtime::Limits</code> structure is removed in favor of<br>\n  minimum/maximum methods on table/memory types.</p>\n</li>\n<li>\n<p>Many libcall intrinsics called by jit code now unconditionally take<br>\n<code>u64</code> arguments instead of <code>u32</code>. Return values are <code>usize</code>, however,<br>\n  since the return value, if successful, is always bounded by host<br>\n  memory while arguments can come from any guest.</p>\n</li>\n<li>\n<p>The <code>heap_addr</code> clif instruction now takes a 64-bit offset argument<br>\n  instead of a 32-bit one. It turns out that the legalization of<br>\n<code>heap_addr</code> already worked with 64-bit offsets, so this change was<br>\n  fairly trivial to make.</p>\n</li>\n<li>\n<p>The runtime implementation of mmap-based linear memories has changed<br>\n  to largely work in <code>usize</code> quantities in its API and in bytes instead<br>\n  of pages. This simplifies various aspects and reflects that<br>\n  mmap-memories are always bound by <code>usize</code> since that's what the host<br>\n  is using to address things, and additionally most calculations care<br>\n  about bytes rather than pages except for the very edge where we're<br>\n  going to/from wasm.</p>\n</li>\n</ul>\n<p>Overall I've tried to minimize the amount of <code>as</code> casts as possible,<br>\nusing checked <code>try_from</code> and checked arithemtic with either error<br>\nhandling or explicit <code>unwrap()</code> calls to tell us about bugs in the<br>\nfuture. Most locations have relatively obvious things to do with various<br>\nimplications on various hosts, and I think they should all be roughly of<br>\nthe right shape but time will tell. I mostly relied on the compiler<br>\ncomplaining that various types weren't aligned to figure out<br>\ntype-casting, and I manually audited some of the more obvious locations.<br>\nI suspect we have a number of hidden locations that will panic on 32-bit<br>\nhosts if 64-bit modules try to run there, but otherwise I think we<br>\nshould be generally ok (famous last words). In any case I wouldn't want<br>\nto enable this by default naturally until we've fuzzed it for some time.</p>\n<p>In terms of the actual underlying implementation, no one should expect<br>\nmemory64 to be all that fast. Right now it's implemented with<br>\n\"dynamic\" heaps which have a few consequences:</p>\n<ul>\n<li>\n<p>All memory accesses are bounds-checked. I'm not sure how aggressively<br>\n  Cranelift tries to optimize out bounds checks, but I suspect not a ton<br>\n  since we haven't stressed this much historically.</p>\n</li>\n<li>\n<p>Heaps are always precisely sized. This means that every call to<br>\n<code>memory.grow</code> will incur a <code>memcpy</code> of memory from the old heap to the<br>\n  new. We probably want to at least look into <code>mremap</code> on Linux and<br>\n  otherwise try to implement schemes where dynamic heaps have some<br>\n  reserved pages to grow into to help amortize the cost of<br>\n<code>memory.grow</code>.</p>\n</li>\n</ul>\n<p>The memory64 spec test suite is scheduled to now run on CI, but as with<br>\nall the other spec test suites it's really not all that comprehensive.<br>\nI've tried adding more tests for basic things as I've had to implement<br>\nguards for them, but I wouldn't really consider the testing adequate<br>\nfrom just this PR itself. I did try to take care in one test to actually<br>\nallocate a 4gb+ heap and then avoid running that in the pooling<br>\nallocator or in emulation because otherwise that may fail or take<br>\nexcessively long.</p>\n<p>[proposal]: <a href=\"https://github.com/WebAssembly/memory64/blob/master/proposals/memory64/Overview.md\">https://github.com/WebAssembly/memory64/blob/master/proposals/memory64/Overview.md</a></p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 248544024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628201523
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248544222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628201641
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248544471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628201778
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248572229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628226669
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248572764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628227393
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248615041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628258691
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248615102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628258730
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248651459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628275248
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248653132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628275992
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248657819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628278275
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#pullrequestreview-724669834\">PR review</a>.</p>",
        "id": 248666071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628282648
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#discussion_r684492461\">PR review comment</a>:</p>\n<blockquote>\n<p>A comment here about why we decided not to expand <code>heap_addr</code> to take the u64 would help document our discussion :-)</p>\n</blockquote>",
        "id": 248666072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628282648
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#pullrequestreview-724669834\">PR review</a>.</p>",
        "id": 248666073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628282648
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#discussion_r684472676\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch (avoiding wraparound). Could you add a comment re: the saturation here to note this is protecting against offset + access-size overflowing?</p>\n</blockquote>",
        "id": 248666075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628282648
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 248667837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628283607
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a>.</p>",
        "id": 248667901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628283629
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#pullrequestreview-727999474\">PR review</a>.</p>",
        "id": 249177964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628720983
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#pullrequestreview-727999474\">PR review</a>.</p>",
        "id": 249177965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628720983
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#discussion_r687234615\">PR review comment</a>:</p>\n<blockquote>\n<p>Same comment as above re: mention of <code>wasm pages</code>.</p>\n</blockquote>",
        "id": 249177966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628720983
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153#discussion_r687229607\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this commit is now out of date as it's now taking a size rather than page delta?</p>\n</blockquote>",
        "id": 249177967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628720983
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a> from <code>memory64</code> to <code>main</code>.</p>",
        "id": 249243379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628779206
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">PR #3153</a>.</p>",
        "id": 249243410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628779221
    }
]