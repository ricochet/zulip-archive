[
    {
        "content": "<p>mleonhard edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>I wish to use wasmtime in a server to run small untrusted code blocks.  I need to limit the maximum memory consumed by each running block to 5MB.  I looked through the docs and found no way to restrict how much memory the VM can allocate.  There seems to be a built-in limit of 4GB.  See #1872 .</p>\n<p>Let's support or document how to restrict total instance memory.</p>\n</blockquote>",
        "id": 212475353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602013353
    },
    {
        "content": "<p>mleonhard edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>I wish to use wasmtime in a server to run small untrusted code blocks.  I need to limit the maximum memory consumed by each running block to 5MB.  I looked through the docs and found no way to restrict how much memory the VM can allocate.  There seems to be a built-in limit of 4GB.  See #1872 .</p>\n<p>Let's support or document how to restrict memory usage.</p>\n</blockquote>",
        "id": 212475383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602013374
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-704514490\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>For imported memory you can set the limit when creating the memory. For exported memory you could parse the module and check that the memory limit is at most 5MB.</p>\n</blockquote>",
        "id": 212475962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602013698
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-704519126\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>You can control memory via a number of different means. Application-level configuration happens through the <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Config.html\"><code>Config</code></a> type. For example you can use <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Config.html#method.static_memory_maximum_size\"><code>static_memory_maximum_size</code></a>, <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Config.html#method.static_memory_guard_size\"><code>static_memory_guard_size</code></a>, and <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Config.html#method.dynamic_memory_guard_size\"><code>dynamic_memory_guard_size</code></a> to tweak how wasmtime allocates memory. The smallest VM reservations will come with a static max size of 0 and a dynamic guard of zero, but code will not perform as well at runtime.</p>\n<p>You can further configure the <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Config.html#method.with_host_memory\"><code>with_host_memory</code></a> method which means that your application is bringing its own memory allocation strategy, where you can limit even the size of locally defined memories in a wasm module.</p>\n<p>And as @bjorn3 mentioned if you're creating the memory itself then you can specify the maximum size at runtime.</p>\n</blockquote>",
        "id": 212476947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602014250
    },
    {
        "content": "<p>mleonhard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-704603304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>Thank you both for your quick replies.</p>\n<p>Is there a way to use <code>static_memory_maximum_size</code>, <code>static_memory_guard_size</code>, and <code>dynamic_memory_guard_size</code> to restrict the VM from allocating more memory?  Could I set the static_memory_guard_size to 4GB - 5MB?  I suppose this could work on a platform with a wide-enough memory address space.</p>\n<p>To use <code>wasmtime::Config::with_host_memory</code>, I must implement <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/trait.MemoryCreator.html\">wasmtime::MemoryCreator</a>.  The MemoryCreator is configured on the <code>Engine</code> which contains many VMs.  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e88d74903102266a18e97489557760b9be67f782/crates/runtime/src/instance.rs#L853\"><code>InstanceHandle::new</code></a> calls <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e88d74903102266a18e97489557760b9be67f782/crates/runtime/src/instance.rs#L1358\"><code>instance::create_memories</code></a> calls <code>MemoryCreator::new_memory</code> and does not pass any data about which VM (<code>Store</code> or <code>Instance</code>) the memory is for.  How could I use the engine-specific struct to decide if a particular VM has reached its allocation limit?</p>\n<p>I looked at how to check the size of memories in a module.  I'm not familiar with WASM memories.  Are all module-allocated memories exported?  Would this work?</p>\n<ol>\n<li>Call <a href=\"https://docs.rs/wasmtime/0.20.0/wasmtime/struct.Module.html#method.exports\"><code>wasmtime::Module::exports</code></a></li>\n<li>Iterate through the result and examine <code>ExternType::Memory</code> entries</li>\n<li>Error if there is a missing <code>Limits::max</code> value</li>\n<li>Sum up the <code>Limits::max</code> values and error if they go over the limit</li>\n</ol>\n<p><a href=\"https://docs.rs/wasmparser/0.63.0/wasmparser/struct.Parser.html\"><code>wasmparser::Parser</code></a> can parse the <a href=\"https://docs.rs/wasmparser/0.63.0/wasmparser/enum.MemoryType.html\">Memory entries</a>.  There is a <code>shared</code> flag.  I suppose <code>shared=true</code> means the memory is exported.  So some WASM binaries might have <code>shared=false</code> memories, which would not appear in the list of exports.  So I cannot use <code>wasmtime::Module::exports</code> to count total memory usage.  <code>wasmparser::Parser</code> should work.  I think this might be the solution.</p>\n<p>Does WASM define any way for a module to make new Memory objects at runtime?</p>\n</blockquote>",
        "id": 212497842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602026414
    },
    {
        "content": "<p>mleonhard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-704605787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>An article that describes how WASM memories work:<br>\n<a href=\"https://depth-first.com/articles/2019/10/16/compiling-c-to-webassembly-and-running-it-without-emscripten/\">https://depth-first.com/articles/2019/10/16/compiling-c-to-webassembly-and-running-it-without-emscripten/</a></p>\n</blockquote>",
        "id": 212498376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602026907
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-704633392\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>@mleonhard I'd recommend reading the documentation about dynamic/static memories. Unfortunately there is no \"disallow more than 5MB per instance\" switch in Wasmtime, and this is something that will require work to be done at this time. The <code>MemoryCreator</code> trait allows a custom implementation which you can embed with specifics related to your application. You can track growth and allocation to disallow or arbitrarily \"fail\" growth beyond a certain point.</p>\n<p>For wasm memories in general, I'd recommend reading up on documentation in the wasm spec or in various posts online. Wasm modules can define or import a memory. Memories always state a minimum size and optionally have a maximum size. You would probably want to validate in your application that the minimum size isn't too big.</p>\n</blockquote>",
        "id": 212504998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602032901
    },
    {
        "content": "<p>mleonhard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-706629909\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p>I found the answer: Code in a Wasm VM cannot make new Memory objects.  See <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-mem\">WebAssembly 1.1 Memories</a>.  Every Wasm binary can define exactly one Memory object with a specified initial size and an optional max size.  Code inside the VM can use <a href=\"https://webassembly.github.io/spec/core/syntax/instructions.html#memory-instructions\">memory instructions</a> to grow a Memory region, up to its max size.</p>\n<p>Code in a Wasm VM could import and call a function that makes a new Memory object or does anything.  By default, a wasmtime VM does not provide any importable functions to code inside the VM.  Call <a href=\"https://docs.rs/wasmtime-wasi/0.20.0/wasmtime_wasi/struct.Wasi.html#method.new\"><code>wasmtime_wasi::Wasi::new</code></a> to make WASI functions importable. See example <a href=\"https://bytecodealliance.github.io/wasmtime/examples-rust-wasi.html\">Embedding in Rust - WASI</a>.</p>\n<p>To check the max memory usage of a program running inside a wasmtime VM, <a href=\"https://crates.io/crates/wasmparser\">parse</a> the binary and check the max size of the single <code>Memory</code> entry.</p>\n<p>To set the memory usage limit of a program running inside a wasmtime VM, modify the binary to set the max size value of the <code>Memory</code> entry.  The <a href=\"https://crates.io/crates/object\">object crate</a> has an API and an <a href=\"https://github.com/gimli-rs/object/blob/master/examples/objcopy.rs\">example</a> that could be adapted to modify Wasm binaries, but it won't be pretty.</p>\n<p>I also found <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime\">WASM Micro Runtime</a> which provides a simple way to limit memory.  But it <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/230\">has no Rust bindings</a>.</p>\n</blockquote>",
        "id": 212941358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602375848
    },
    {
        "content": "<p>mleonhard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273#issuecomment-706633765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2273\">Issue #2273</a>:</p>\n<blockquote>\n<p><a href=\"https://crates.io/crates/parity-wasm\">https://crates.io/crates/parity-wasm</a> looks like a very clean library for modifying Wasm binaries to set memory max size.</p>\n</blockquote>",
        "id": 212942634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602378634
    }
]