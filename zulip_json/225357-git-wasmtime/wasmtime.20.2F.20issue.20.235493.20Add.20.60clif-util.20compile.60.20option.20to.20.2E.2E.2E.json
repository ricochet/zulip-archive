[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1367676395\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>I think this is a great idea! A bunch of people are out due to holidays, but if nobody else gets to it first I intend to review this next week. Feel free to comment again if you don't hear anything by the end of next week.</p>\n</blockquote>",
        "id": 318509886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672363960
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1370409550\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>I got partway through reviewing this today. Overall I think it's in good shape! A tip for anybody else who takes a look: turn on the \"ignore whitespace changes\" option when reviewing this diff.</p>\n<p>I'm not entirely satisfied with the <code>TargetIsa::cloned</code> addition. All the <code>TargetIsa</code> methods take immutable borrows, so it should be safe to just pass borrows everywhere. Unfortunately the <code>Module::isa</code> trait method doesn't have a lifetime parameter so there isn't an immediately obvious way to make it stop requiring its own boxed copy of the <code>TargetIsa</code>. Still, I would be happier with fixing the <code>Module</code> trait somehow than with adding <code>TargetIsa::cloned</code>, if we can come up with a reasonable way to do it.</p>\n<p>One option I think might work is a method like <code>Module::with_isa(&amp;self, f: impl FnOnce(&amp;dyn TargetIsa))</code> that calls the given function with the borrowed <code>TargetIsa</code>, so that the borrow must be dropped before the callback returns. Then I don't think the trait or its callers care what the actual lifetime of the object is. That's a little more than I like for a public API change though so it's not great either. We don't make API stability promises about Cranelift but we do try not to make changes without good reasons, at least.</p>\n<p>I want to think about this a little more, but I'm generally in favor of merging this PR, with or without changes. Thanks for proposing it!</p>\n</blockquote>",
        "id": 319312440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672798084
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1370706034\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>Maybe we could give out <code>Arc&lt;dyn TargetIsa&gt;</code> instead of <code>Box&lt;dyn TargetIsa&gt;</code>? </p>\n</blockquote>",
        "id": 319353626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672825894
    },
    {
        "content": "<p>samsartor <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372669595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>I'm pushing another version of this where  ObjectModule  borrows the ISA, just so you can see what it looks like. Overall it works out very cleanly. But I personally liked the cloned ISA more, since:</p>\n<ol>\n<li>lifetime params on structs can have wind up having unforeseen ergonomic costs</li>\n<li>I can not imagine any situation where ISA flags are not trivially cloneable</li>\n<li>the clone has negligible performance cost since it is far outside any tight loops</li>\n<li>changing the Box to a borrow or Arc is a breaking change for anyone using the ObjectModule interface</li>\n</ol>\n<p>Still, the cloned method was just a gross workaround for <code>dyn Module + Clone</code> not being a thing yet, and I'm not shedding any tears dropping it from this PR.</p>\n<p>If you want me to revert or go with the Arc instead, just say the word.</p>\n</blockquote>",
        "id": 319662414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672948747
    },
    {
        "content": "<p>samsartor <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372678963\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe we could give out <code>Arc&lt;dyn TargetIsa&gt;</code> instead of <code>Box&lt;dyn TargetIsa&gt;</code>?</p>\n</blockquote>\n<p>I liked this in principal, but it infects a _lot_ of files. To be consistent we'd want to change most uses of <code>&amp;dyn TargetIsa</code> to <code>Arc&lt;dyn TargetIsa&gt;</code>, and there are a lot of those. The nice thing about cloned was it left all the borrows of TargetIsa in place and let us upgrade at will.</p>\n</blockquote>",
        "id": 319663801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672949245
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372745345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>lifetime params on structs can have wind up having unforeseen ergonomic costs</p>\n</blockquote>\n<p>Yeah, cg_clif needs to pass <code>ObjectModule</code> to another thread, which needs it to be <code>'static</code>.</p>\n</blockquote>",
        "id": 319671783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672952460
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372778684\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>I'm not going to argue too vigorously about this, but if we can find a way to avoid cloning the <code>TargetIsa</code>s that everyone's happy with, I think it'd be nice.</p>\n<p>Barring that:</p>\n<p>@samsartor wrote:</p>\n<blockquote>\n<p>Still, the cloned method was just a gross workaround for <code>dyn Module + Clone</code> not being a thing yet, and I'm not shedding any tears dropping it from this PR.</p>\n</blockquote>\n<p>I guess another alternative is to define <code>trait TargetIsa: Clone</code>, so that deriving <code>Clone</code> on each <code>*Backend</code> struct is sufficient, right?</p>\n<blockquote>\n<p>I'm pushing another version of this where ObjectModule borrows the ISA, just so you can see what it looks like. Overall it works out very cleanly. But I personally liked the cloned ISA more, since:</p>\n<ol>\n<li>lifetime params on structs can have wind up having unforeseen ergonomic costs</li>\n</ol>\n</blockquote>\n<p>I totally agree with this point, although it looks like it might be okay in this case.</p>\n<blockquote>\n<ol start=\"2\">\n<li>I can not imagine any situation where ISA flags are not trivially cloneable</li>\n</ol>\n</blockquote>\n<p>I think the flags and <code>Target</code> are cheap to clone, but I'm not so sure about the <code>MachineEnv</code>: it has five vectors in it, and I'm not sure how big those are in practice. Usually proportional to the number of registers on the target machine I think, which doesn't sound too bad, but I'm not super familiar with that part.</p>\n<blockquote>\n<ol start=\"3\">\n<li>the clone has negligible performance cost since it is far outside any tight loops</li>\n<li>changing the Box to a borrow or Arc is a breaking change for anyone using the ObjectModule interface</li>\n</ol>\n</blockquote>\n<p>Both fair points!</p>\n<p>@bjorn3 wrote:</p>\n<blockquote>\n<blockquote>\n<p>lifetime params on structs can have wind up having unforeseen ergonomic costs</p>\n</blockquote>\n<p>Yeah, cg_clif needs to pass <code>ObjectModule</code> to another thread, which needs it to be <code>'static</code>.</p>\n</blockquote>\n<p>That's not that big of a deal though, is it? You can build a <code>Box&lt;dyn TargetIsa&gt;</code> and then call <code>Box::leak</code> on it to get a <code>'static</code> borrow.</p>\n</blockquote>",
        "id": 319673917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672953345
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372822399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p><code>Box::leak</code> leaks memory. This would make it unsuitable for running multiple compiler instances in the same process and would trip memory leak checkers.</p>\n<blockquote>\n<p>guess another alternative is to define trait TargetIsa: Clone, so that deriving Clone on each *Backend struct is sufficient, right?</p>\n</blockquote>\n<p>Clone is unfortunately not object safe.</p>\n</blockquote>",
        "id": 319678896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672955441
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372823786\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>I liked this in principal, but it infects a lot of files. To be consistent we'd want to change most uses of &amp;dyn TargetIsa to Arc&lt;dyn TargetIsa&gt;, and there are a lot of those. The nice thing about cloned was it left all the borrows of TargetIsa in place and let us upgrade at will.</p>\n</blockquote>\n<p>I don't think it is necessary to change most <code>&amp;dyn TargetIsa</code> to <code>Arc&lt;dyn TargetIsa&gt;</code>. Most places won't clone it and as such wouldn't have any benefit, only the cost of requiring an extra clone.</p>\n</blockquote>",
        "id": 319679073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672955515
    },
    {
        "content": "<p>samsartor <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372899066\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah, cg_clif needs to pass ObjectModule to another thread, which needs it to be 'static.</p>\n</blockquote>\n<p>This sounds serious enough to me that I'll revert the lifetime parameter for now.</p>\n<blockquote>\n<p>I guess another alternative is to define trait TargetIsa: Clone, so that deriving Clone on each *Backend struct is sufficient, right?</p>\n</blockquote>\n<p>I originally did this, but the trait object still needs its own method and at that point adding the cloned requirement felt like more of a breaking change. TBH I doing this and then providing a default cloned method would have been better.</p>\n<blockquote>\n<p>I don't think it is necessary to change most &amp;dyn TargetIsa to Arc&lt;dyn TargetIsa&gt;. Most places won't clone it and as such wouldn't have any benefit, only the cost of requiring an extra clone.</p>\n</blockquote>\n<blockquote>\n<p>if we can find a way to avoid cloning the TargetIsas that everyone's happy with, I think it'd be nice</p>\n</blockquote>\n<p>What do you think of the Arc compromise I just pushed?</p>\n<p>Also, should I squash my commits before you merge? Not sure what the policy is here.</p>\n</blockquote>",
        "id": 319688455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672959570
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372900852\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>I'm reviewing the <code>Arc</code> version now, thanks!</p>\n<p>We do squash-merges on PRs, so don't worry about cleaning up commit history.</p>\n</blockquote>",
        "id": 319688750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672959685
    },
    {
        "content": "<p>samsartor edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372899066\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah, cg_clif needs to pass ObjectModule to another thread, which needs it to be 'static.</p>\n</blockquote>\n<p>This sounds serious enough to me that I'll revert the lifetime parameter for now.</p>\n<blockquote>\n<p>I guess another alternative is to define trait TargetIsa: Clone, so that deriving Clone on each *Backend struct is sufficient, right?</p>\n</blockquote>\n<p>Like @bjorn3 said, Clone itself doesn't help, but it would let the cloned method be default implemented. I considered it originally but didn't do that way for some reason. If you don't like the Arc solution, we might go back and revisit that.</p>\n<blockquote>\n<p>I don't think it is necessary to change most &amp;dyn TargetIsa to Arc&lt;dyn TargetIsa&gt;. Most places won't clone it and as such wouldn't have any benefit, only the cost of requiring an extra clone.</p>\n</blockquote>\n<blockquote>\n<p>if we can find a way to avoid cloning the TargetIsas that everyone's happy with, I think it'd be nice</p>\n</blockquote>\n<p>What do you think of the Arc compromise I just pushed?</p>\n<p>Also, should I squash my commits before you merge? Not sure what the policy is here.</p>\n</blockquote>",
        "id": 319688886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672959732
    },
    {
        "content": "<p>samsartor edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372899066\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah, cg_clif needs to pass ObjectModule to another thread, which needs it to be 'static.</p>\n</blockquote>\n<p>This sounds serious enough to me that I'll revert the lifetime parameter for now.</p>\n<blockquote>\n<p>I guess another alternative is to define trait TargetIsa: Clone, so that deriving Clone on each *Backend struct is sufficient, right?</p>\n</blockquote>\n<p>Like @bjorn3 said, Clone itself doesn't help, but it would let the cloned method be default implemented. I considered it originally but didn't do that way for some reason. If you don't like the Arc solution, we might go back and revisit that.</p>\n<blockquote>\n<p>I don't think it is necessary to change most &amp;dyn TargetIsa to Arc&lt;dyn TargetIsa&gt;. Most places won't clone it and as such wouldn't have any benefit, only the cost of requiring an extra clone.</p>\n</blockquote>\n<blockquote>\n<p>if we can find a way to avoid cloning the TargetIsas that everyone's happy with, I think it'd be nice</p>\n</blockquote>\n<p>What do you think of the Arc compromise I just pushed? It is a much bigger diff but most of the changes are just <code>Box</code> -&gt; <code>Arc</code>.</p>\n<p>Also, should I squash my commits before you merge? Not sure what the policy is here.</p>\n</blockquote>",
        "id": 319688934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672959760
    },
    {
        "content": "<p>samsartor <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493#issuecomment-1372946646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5493\">issue #5493</a>:</p>\n<blockquote>\n<p>@jameysharp No worries. TBH I've missed this kinda code review stuff since I left industry :D</p>\n</blockquote>",
        "id": 319695725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672963204
    }
]