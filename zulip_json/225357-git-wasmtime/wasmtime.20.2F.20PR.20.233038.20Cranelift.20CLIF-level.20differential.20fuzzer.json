[
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244115983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624869513
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694205339\">PR review</a>.</p>",
        "id": 244182790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659974060\">PR review comment</a>:</p>\n<blockquote>\n<p>Tiny nit, but I personally prefer doc-comments to end in periods (e.g. \"Compilation Error when compiling a function.\").</p>\n</blockquote>",
        "id": 244182791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694205339\">PR review</a>.</p>",
        "id": 244182792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659983757\">PR review comment</a>:</p>\n<blockquote>\n<p>Should there be an error-case for \"timeout\", i.e. ran too long? I'll keep reading to see how infinite loops are caught but this seems like a separate logical case from explicit trap.</p>\n</blockquote>",
        "id": 244182793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659985885\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, it seems we might want a \"run for max N steps\" method on the interpreter here. Otherwise, if we have an infinite loop (when fuzz-case generation becomes sophisticated enough for that, if it's not already?), we tie up a core indefinitely.</p>\n<p>There's a question whether we step for N steps on both sides (interp and compiled) and then compare state at the end, or if we just reject inputs that run that long. I suspect probably the latter is good enough; the former would require instrumentation in the compiler to count ops and stop. We have \"fuel\" at the Wasmtime level but it's not built-in to Cranelift itself. And, anything a testcase could do to run indefinitely would be tested by other valid test cases as well, so I think it's fine to avoid these inputs altogether.</p>\n</blockquote>",
        "id": 244182794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659982583\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd prefer for the fuzz target to be integrated into the toplevel Wasmtime fuzzer crate, I think: while Cranelift is logically separate, it lives in the same repository, is already fuzzed by other fuzz targets there, and it is somewhat confusing to have two different <code>fuzz</code> directories.</p>\n</blockquote>",
        "id": 244182795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659987059\">PR review comment</a>:</p>\n<blockquote>\n<p>For now (a first version), we could just reject inputs that trap in the interpreter too, right? This of course means we don't cover edge-cases like \"divide should trap in exactly these cases\".</p>\n<p>I think that trap functionality is also generally handled by the runtime, e.g. Wasmtime, so we would have to build out another Cranelift-level implementation for this to be tested properly; that strikes me as disproportionate effort for the given reward, since trap cases are covered by Wasm tests and Wasm-level fuzzing as well.</p>\n</blockquote>",
        "id": 244182796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659987903\">PR review comment</a>:</p>\n<blockquote>\n<p>If we implement <code>Arbitrary</code> for the testcase type, can we just take that type in the <code>fuzz_target!</code>'s lambda directly? I'd prefer that both as it's a little more idiomatic and for the specific reason that this gives us a proper <code>Debug</code>-print of failing test cases.</p>\n</blockquote>",
        "id": 244182797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659988219\">PR review comment</a>:</p>\n<blockquote>\n<p>Taking the <code>Arbitrary</code> type directly (comment above) also means we don't have to manually handle this case.</p>\n</blockquote>",
        "id": 244182798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659989324\">PR review comment</a>:</p>\n<blockquote>\n<p>End sentence with <code>.</code>, and capitalize \"Cranelift\" here and below.</p>\n</blockquote>",
        "id": 244182799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659989484\">PR review comment</a>:</p>\n<blockquote>\n<p>s/util/utility/</p>\n</blockquote>",
        "id": 244182801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659990843\">PR review comment</a>:</p>\n<blockquote>\n<p>This is already supported by <code>cargo fuzz</code> (e.g., <code>cargo fuzz run fuzzgen ./fuzz/artifacts/...</code> -- do we need a separate implementation of it?</p>\n</blockquote>",
        "id": 244182802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659998710\">PR review comment</a>:</p>\n<blockquote>\n<p>This \"available variables\" approach is nice, but gets somewhat complicated with control flow, and you can see e.g. in the regalloc2 SSA generator there's a two-staged approach where we decide what values are defined in each block first, then (i) pick among values defined in blocks that dominate us for uses, (ii) ensure we define all vars we said we would in a given block.</p>\n<p>So, in this implementation, what happens if the variable is defined, but only in one predecessor? Do we unconditionally re-define it (and let the frontend handle the SSA fixup for that)?</p>\n<p>Another workaround is to decide at the top of the function which variables will exist, and assign initial values to all of them. Then all the rest of the instruction outputs are just redefinitions. This is actually probably the easiest and least buggy (which is what we want for a fuzztest generator!) and still shouldn't sacrifice any coverage, since it can turn into arbitrary SSA.</p>\n</blockquote>",
        "id": 244182803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660001223\">PR review comment</a>:</p>\n<blockquote>\n<p>As an aside, I very much like that this is designed to support multiple test inputs per function; this lets us get the most out of the cost of one compilation. Maybe a comment to this effect here?</p>\n</blockquote>",
        "id": 244182804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r659993855\">PR review comment</a>:</p>\n<blockquote>\n<p>We could, in theory, extend the codegen in the <code>cranelift-meta</code> crate to generate something like this table. I think it would be generally useful to have such a table for other table-driven code, too.</p>\n</blockquote>",
        "id": 244182805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660000632\">PR review comment</a>:</p>\n<blockquote>\n<p>As mentioned above, I think that this binary is <em>probably</em> not necessary.</p>\n<p>One use-case that you mentioned in the readme is to use this to quickly test the generator in an ad-hoc way. But a better idea might be to have a separate fuzz target that <em>only</em> runs the fuzztest generator, and then checks that the result passes the CLIF validator. In this way, you can test that we're generating valid CLIF. This is what e.g. the <code>ssagen</code> target in regalloc2 does.</p>\n</blockquote>",
        "id": 244182807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624903276
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694852874\">PR review</a>.</p>",
        "id": 244259511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624962043
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660481281\">PR review comment</a>:</p>\n<blockquote>\n<p>No, The main reason I built this was to produce an easily sharable test case, but i see that <code>cargo-fuzz fmt</code> with the <code>Arbitrary</code> impl provides us with that already. I'm going to remove this.</p>\n</blockquote>",
        "id": 244259512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624962043
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694922511\">PR review</a>.</p>",
        "id": 244266754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624966881
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660533735\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, lets add this to the TODO queue to be revisited later.</p>\n</blockquote>",
        "id": 244266755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624966881
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694929530\">PR review</a>.</p>",
        "id": 244267541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624967337
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660538988\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds like a good idea, I've added a new fuzz target that just validates the generated function</p>\n</blockquote>",
        "id": 244267542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624967337
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694950504\">PR review</a>.</p>",
        "id": 244270180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968731
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660554711\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>when fuzz-case generation becomes sophisticated enough for that, if it's not already?</p>\n</blockquote>\n<p>It isn't simply because we limit the number of generated instructions up to a maximum of 16. Otherwise I think we are simply limited by the input length. On a related note, I moved all of the arbitrary restrictions that we place on the generator into a <code>Config</code> module so that this become more obvious (and so that we can eventually do swarm fuzzing).</p>\n<blockquote>\n<p>There's a question whether we step for N steps on both sides (interp and compiled) and then compare state at the end, or if we just reject inputs that run that long. I suspect probably the latter is good enough</p>\n</blockquote>\n<p>Rejecting inputs that run that long on the interpreter seems like the way to go for me.</p>\n</blockquote>",
        "id": 244270181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968731
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694952431\">PR review</a>.</p>",
        "id": 244270420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968846
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660556042\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it makes sense. I'm not seeing a quick way to constrain the interpreter to run just N instructions, so lets add that when we implement branches and control flow.</p>\n</blockquote>",
        "id": 244270421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968846
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694954390\">PR review</a>.</p>",
        "id": 244270639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968966
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660557542\">PR review comment</a>:</p>\n<blockquote>\n<p>Great! Lets add this one to the TODO list as well.</p>\n</blockquote>",
        "id": 244270640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624968966
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660566912\">PR review comment</a>:</p>\n<blockquote>\n<p>The idea here was that this set of \"available variables\" is defined per block not per function (its not currently separated because we generate just one block), when branching or calling <code>return</code> we choose a random number of variables from the current block to transfer onto the next block (depending on the block \"signature\").</p>\n<p>I don't think we have issues with picking variables defined in predecessors because we never do that, and I don't think we can do that with clif? (I may be wrong here)</p>\n<blockquote>\n<p>Another workaround is to decide at the top of the function which variables will exist, and assign initial values to all of them. </p>\n</blockquote>\n<p>Ah! I didn't know that we could transform non SSA code into SSA code. This might be something that we actually want to fuzz as well. In that case I think this is a good way to go.</p>\n<p>Let me know if you want me to change this into the non SSA from.<br>\n</p>\n</blockquote>",
        "id": 244271994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624969729
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-694966914\">PR review</a>.</p>",
        "id": 244271995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624969729
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660566912\">PR review comment</a>.</p>",
        "id": 244272117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624969801
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660566912\">PR review comment</a>.</p>",
        "id": 244274236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624970840
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244274973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624971161
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660566912\">PR review comment</a>.</p>",
        "id": 244299599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624980226
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-695268543\">PR review</a>.</p>",
        "id": 244310964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624984968
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660791467\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>when branching ... we choose a random number of variables ... to transfer onto the next block</p>\n</blockquote>\n<p>This definitely works for a straightline sequence of blocks, but how does this work for loops? More generally, if you decide at the end of a block which variables to see as \"defined\" in the next block, you need to see all in-edges to a block before you know for sure that a variable is defined on every in-edge.</p>\n<p>This is the origin of the two-stage approach -- it breaks the cycle: if you pin down what <em>should</em> be defined in each location, you can then, in parallel, both rely on that (in uses) and ensure that (in defs).</p>\n<p>I think the easiest answer is to rely on the SSA-builder algorithm built into the variable helper layer which you're using here, and def everything at the top first, then select <em>any</em> variable for each use. The key thing (which I think may be flying under the radar here given the \"transfer to the next block\" phrasing above) is that \"variables\" as you're using them are not SSA values or blockparams; the latter are defined by the former depending on where you place the one or more definitions of a variable. (And indeed, a variable can have more than one def.) It's always correct to use a variable that has been defined at least once on every path from the entry block (has some dominating def), so the trivially correct thing to do is define everything (for the first time) in the entry block :-)</p>\n</blockquote>",
        "id": 244310966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624984969
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244317817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624987864
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r660832628\">PR review comment</a>:</p>\n<blockquote>\n<p>I've updated the fuzzer to perform this upfront allocation of variables. I'm slightly concerned that it now seems to be reusing the same variable a lot consecutively, but I think this may be the fuzzer exploring the non ssa to ssa code?</p>\n</blockquote>",
        "id": 244318967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624988365
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-695326213\">PR review</a>.</p>",
        "id": 244318968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624988365
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a>.</p>",
        "id": 244319022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624988398
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-696515565\">PR review</a>.</p>",
        "id": 244471471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625079360
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r661734193\">PR review comment</a>:</p>\n<blockquote>\n<p>I hadn't seen your reply when writing my previous comment. I've changed it to the upfront allocation and i think it should be better because we are probably going to stress the variable helper a bit more with the fuzzer.</p>\n<p>But i'm still not sure i'm following what you are saying. </p>\n<blockquote>\n<p>This definitely works for a straightline sequence of blocks, but how does this work for loops? More generally, if you decide at the end of a block which variables to see as \"defined\" in the next block, you need to see all in-edges to a block before you know for sure that a variable is defined on every in-edge.</p>\n</blockquote>\n<p>The way I'm thinking about this is as if every block is sort of a function.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Here</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n\n<span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v4</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\">              </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Here</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">choose</span><span class=\"w\"> </span><span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So in a sense, what I was thinking was: We generate the next block (or reuse an existing one) see what types it has in its signature and choose variables available in the current block to \"call\" it with (either block params or values locally defined by us).</p>\n<p>This way, we don't need to know who called this block, because we never use variables defined by anyone else.</p>\n<p>This is more of a curiosity now, because I've changed into the other approach and think it is better, but I'd like to understand why it wouldn't work.<br>\n</p>\n</blockquote>",
        "id": 244471472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625079360
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r661734193\">PR review comment</a>.</p>",
        "id": 244472100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625079620
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r661740164\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>We generate the next block (or reuse an existing one) see what types it has in its signature and choose variables available in the current block to \"call\" it with (either block params or values locally defined by us).</p>\n</blockquote>\n<p>Ah, I see! The key thing here, I think, is that \"what types it has in its signature\" is decided before code is generated, and so breaks the cycle: this is the equivalent to the pre-pass I mentioned that decides where to define things so that defs and uses can both rely on those decisions. So this approach would also work.</p>\n<p>Given that the <code>cranelift-frontend</code> logic is built to accept multi-def vars and generate SSA, I think that the approach this PR takes now (upfront initializations) is still the right one, but your approach would work well for generating the SSA directly, if we decide to do that instead at some point.</p>\n</blockquote>",
        "id": 244472783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625079943
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-696523687\">PR review</a>.</p>",
        "id": 244472784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625079944
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-696526348\">PR review</a>.</p>",
        "id": 244473185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625080144
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r661742267\">PR review comment</a>:</p>\n<blockquote>\n<p>Now that I'm looking at this again, I don't think its quite right, we probably should be assigning the block params to the pool of variables instead of creating new ones.</p>\n<p>I'll look at this again tommorow</p>\n</blockquote>",
        "id": 244473186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625080144
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-696527686\">PR review</a>.</p>",
        "id": 244473355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625080247
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-696529209\">PR review</a>.</p>",
        "id": 244473522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625080361
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r661744421\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should be right? At least, my understanding is that the blockparams are SSA values while the variables are a higher-level abstraction; it would be more confusing to have a pool of both and then selectively lower vars to SSA values or use an SSA value directly, I think.</p>\n</blockquote>",
        "id": 244473523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625080361
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a> from <code>fuzz-gen</code> to <code>main</code>.</p>",
        "id": 244542583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625133532
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r662149020\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, this works only because the first block is special and has the function params. I think for the other blocks we have to associate the block params to existing variables? Otherwise we run into the issue you were pointing out earlier where we may not have defined a variable depending on where we came from.</p>\n<p>Anyway, I'll probably start working on the control flow improvements today, and should be in a more informed position to address this when I submit the next PR.</p>\n</blockquote>",
        "id": 244546243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625135624
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#pullrequestreview-697047523\">PR review</a>.</p>",
        "id": 244547568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625136473
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038#discussion_r662149020\">PR review comment</a>.</p>",
        "id": 244548480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625137053
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3038\">PR #3038</a>.</p>",
        "id": 244565951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625146322
    }
]