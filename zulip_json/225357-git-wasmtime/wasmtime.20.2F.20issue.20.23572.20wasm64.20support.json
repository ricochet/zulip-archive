[
    {
        "content": "<p>lastmjs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-855302429\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Any update on the progress here? I'm working on building applications for the DFINITY Internet Computer, and having wasm64 working could do wonders for applications scaling on the Internet Computer. Right now applications (canisters) are limited to 4gb in size without doing some relatively complicated cross-canister scaling.</p>\n</blockquote>",
        "id": 241658456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622930952
    },
    {
        "content": "<p>aardappel <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-855321308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>@lastmjs Memory64 has progressed to a stage 3 proposal, LLVM/WABT/Binaryen support has further matured, spec implementation is available. The biggest things still not finished are Emscripten support (which is in progress) and of course VM support (V8 is in progress, not aware of others that have started).</p>\n<p>Wasmtime support would be great! Who's going to take it on? :)</p>\n</blockquote>",
        "id": 241665415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622943153
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-883762122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Are there any toy repos where someone has forked wasmtime to add wasm64 support? In my very limited understanding, the start of it is:</p>\n<ol>\n<li>change u32 to u64 here: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L260-L261\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L260-L261</a></li>\n<li>modify all the functions regarding memarg at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L118\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L118</a></li>\n<li>remove the 32-bit bound check (bad for security), possibly add bounds check (bad for performance) [here, I'm running 'trusted' wasm64 code]</li>\n</ol>\n<p>This is a bit above my current cranelift knowledge. Is there any repo/toolchain where someone forked all this and patched it?</p>\n</blockquote>",
        "id": 246661571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626822399
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884269233\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>FWIW the wasmparser crate, part of <a href=\"https://github.com/bytecodealliance/wasm-tools\">wasm-tools</a>, should already support wasm64 in that it implments validation and decoding support. What's not supported is Wasmtime's <code>code_translator.rs</code> or the supporting runtime support, since that's all geared towards 32-bit. AFAIK though there's no fork of Wasmtime with this implemented at this time (but I could be wrong!)</p>\n</blockquote>",
        "id": 246733836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626880364
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884292557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>The following two beliefs contradict:</p>\n<ol>\n<li>\n<p>@alexcrichton : Because you are one of the top wasmtime committers, I want to believe \"FWIW the wasmparser crate, part of wasm-tools, should already support wasm64 in that it implments validation and decoding support.\" is true</p>\n</li>\n<li>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L260-L261\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L260-L261</a> literally states:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MemoryImmediate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Alignment, stored as `n` where the actual alignment is `2^n`</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Unless this is some type of weird encoding where <code>actual_address = memory * 2^32 + offset</code>, I don't see how wasm-parser could possibly support wasm64. </p>\n<p>Am I mis understanding something fundamental? Does wasm64 not store address as a single u64? If I am misunderstanding this, can you point me to the documentation on how wasm64 does store addresses ?</p>\n</blockquote>",
        "id": 246737832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626882263
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884314689\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>In that structure the <code>align</code> field doesn't need to change since it can already represent all reasonable alignments. The <code>offset</code> field is just a fixed offset encoded in the <code>memarg</code> structure. The memory64 proposal <a href=\"https://github.com/WebAssembly/memory64/blob/master/proposals/memory64/Overview.md\">now indicates that this can be up to 64-bits</a>, but I think at the time I implemented memory64 validation that wasn't clarified in the upstream proposal. The <code>memory</code> field is the index of the memory being used, and that does not change in the memory64 proposal.</p>\n<p>That <code>MemoryImmediate</code> structure is an AST-level construct, not something used at runtime. It does not represent actual raw addresses, but rather it's the <code>memarg</code> from the spec on each memory-related instruction, describing which memory is being operated on, the alignment of the operation, and the fixed offset from the runtime-calculated address, if any.</p>\n</blockquote>",
        "id": 246741747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626884077
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884321653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L1235-L1246\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L1235-L1246</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// from wast crate</span>\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MemArg</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The alignment of this access.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This is not stored as a log, this is the actual alignment (e.g. 1, 2, 4,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 8, etc).</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The offset, in bytes of this access.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The memory index we're accessing</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"nc\">ast</span>::<span class=\"n\">ItemRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kw</span>::<span class=\"n\">memory</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the right MemoryArg ?</p>\n<p>// =============================</p>\n<p>It seems like, either way, I need to \"fork the instruction set\". Two options are:</p>\n<ol>\n<li>fork wast::Instruction <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L499\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L499</a></li>\n<li>fork wasmparser::Operator <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L350\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L350</a></li>\n</ol>\n<p>I was wondering if you had advice on which route might be nicer (the two enums look very similar).</p>\n</blockquote>",
        "id": 246743050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626884675
    },
    {
        "content": "<p>zeroexcuses edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884321653\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L1235-L1246\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L1235-L1246</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// from wast crate</span>\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MemArg</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The alignment of this access.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This is not stored as a log, this is the actual alignment (e.g. 1, 2, 4,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// 8, etc).</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The offset, in bytes of this access.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The memory index we're accessing</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"nc\">ast</span>::<span class=\"n\">ItemRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kw</span>::<span class=\"n\">memory</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the right MemArg ?</p>\n<p>// =============================</p>\n<p>It seems like, either way, I need to \"fork the instruction set\". Two options are:</p>\n<ol>\n<li>fork wast::Instruction <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L499\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wast/src/ast/expr.rs#L499</a></li>\n<li>fork wasmparser::Operator <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L350\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasmparser/src/primitives.rs#L350</a></li>\n</ol>\n<p>I was wondering if you had advice on which route might be nicer (the two enums look very similar).</p>\n</blockquote>",
        "id": 246743156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626884721
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884346824\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Are you looking to implement wasm64? (sorry I'm not sure if you're looking to learn information about the state of things or whether you're looking to help push forward the state of things)</p>\n</blockquote>",
        "id": 246748830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626887054
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884384353\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<blockquote>\n<p>Are you looking to implement wasm64? (sorry I'm not sure if you're looking to learn information about the state of things or whether you're looking to help push forward the state of things)</p>\n</blockquote>\n<p>I am looking to throw together a toy prototype with the following properties:</p>\n<p>* language looks like wasm, but uses 64-bit instead of 32-bit addresses<br>\n  * on x86_64, JITs via cranelift into native code<br>\n  * executes 'trusted' code (i.e. no bound checks)</p>\n<p>The XY problem is that I am generating wasm32 not via LLVM/Cranelift, but by my own toy code generator. I want to be able to swap in something that allows for &gt; 4GB memory.</p>\n</blockquote>",
        "id": 246756883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626890657
    },
    {
        "content": "<p>zeroexcuses edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884384353\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<blockquote>\n<p>Are you looking to implement wasm64? (sorry I'm not sure if you're looking to learn information about the state of things or whether you're looking to help push forward the state of things)</p>\n</blockquote>\n<p>I am looking to throw together a toy prototype with the following properties:</p>\n<p>* language looks like wasm, but uses 64-bit instead of 32-bit addresses<br>\n  * on x86_64, JITs via cranelift into native code<br>\n  * executes 'trusted' code (i.e. no bound checks)</p>\n<p>The XY problem is that I am generating wasm32 not via LLVM/Cranelift, but by my own toy code generator. I want to be able to swap in something that allows for &gt; 4GB memory.</p>\n<p>EDIT: I acknowledge this is quite different from 'write a wasm64 backend that passes wasmtime's coding standards and plays nicely with the rest of the wasmtime toolchain'</p>\n</blockquote>",
        "id": 246757048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626890734
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884480143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>If you're goal is to just use Cranelift I don't think there's any changes necessary, the rustc backend using Cranelift is already for x86_64 and works reasonably well. Otherwise if you want to work with wasm you can probably get away with a few small edits to <code>code_translator.rs</code>. Other than that though you're likely in territory I'm at least personally not able to help too much with.</p>\n</blockquote>",
        "id": 246774530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626899551
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884482686\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>I don't think I explained this well. I have</p>\n<ol>\n<li>a toy language FooLang</li>\n<li>a toy compiler FooLang -&gt; wast::{Module, Func, Instruction} -&gt; wasmtime -&gt; x86_64</li>\n<li>(2) however, is limited to 4GB memory; I want to eliminate this limitation</li>\n<li>I'm going for something like FooLang -&gt; (something that looks like wasm64) -&gt; cranelift_wasm -&gt; x86_64</li>\n</ol>\n<p>I am trying to figure out the minimal patch to { wast or wasmparser } + cranelift_wasm to (1) have the \"wasm-like ast\" be able to have 64 bit address and (2) generate corresponding instrs</p>\n</blockquote>",
        "id": 246775052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626899809
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-884952776\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Ah ok, unfortunately though I don't think there's a too-minimal-path. I think that wasm64 just needs to be implemented in cranelift-wasm.</p>\n</blockquote>",
        "id": 246853455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626963684
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-885217238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>The current 'minimal' changes I see are:</p>\n<ol>\n<li>copy <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wast\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wast</a> -&gt; wast64, change some u32 to u64 // this gives us an instruction set that supports 64bit addr</li>\n<li>copy <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser</a> -&gt; wasmparser64, changes some u32 to u64 // this gets us 64bit addr while parsing</li>\n<li>copy <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/wasm\">https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/wasm</a> -&gt; cranelift-wasm64, add support to generating instrs for 64-bit addr</li>\n<li>then, look at dependents of these 3 libs in the wasmtime tree, copy them, adding -64 prefix</li>\n</ol>\n<p>Is this approximately the 'minimal' path ?</p>\n</blockquote>",
        "id": 246901918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626986337
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-885220946\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>I think all of them should support both 32bit and 64bit memories especially because the multi-memory proposal allows mixing loads and stores to 32bit and 64bit memories within a single function.</p>\n</blockquote>",
        "id": 246902694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626986750
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-885245809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think all of them should support both 32bit and 64bit memories especially because the multi-memory proposal allows mixing loads and stores to 32bit and 64bit memories within a single function.</p>\n</blockquote>\n<p>In the general case, I agree that you are right. For my particular case, given:</p>\n<blockquote>\n<p>I'm going for something like FooLang -&gt; (something that looks like wasm64) -&gt; cranelift_wasm -&gt; x86_64</p>\n</blockquote>\n<p>only having 64 bit addr would be an acceptable first step</p>\n</blockquote>",
        "id": 246908114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626989154
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-885247979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Why not just implement the proposal as specified--for both memory sizes? It doesn't seem like that much more work and you would probably get some more help from maintainers of all these libraries since it helps them implement the proposal?</p>\n</blockquote>",
        "id": 246908427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626989387
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-885258034\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why not just implement the proposal as specified--for both memory sizes? It doesn't seem like that much more work and you would probably get some more help from maintainers of all these libraries since it helps them implement the proposal?</p>\n</blockquote>\n<ol>\n<li>\n<p>I have previously been playing around with wast &amp; cranelift-jit, so I believe the hack I have outlined above is a matter of days, whereas I have no idea how much work full wasm64 is (given no one has done it, sounds like months?)</p>\n</li>\n<li>\n<p>I don't think it's honest to pretend to care about something I don't care about just to get help from maintainers.</p>\n</li>\n</ol>\n</blockquote>",
        "id": 246910063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626990600
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-886968162\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/lightbeam\">https://github.com/bytecodealliance/wasmtime/tree/main/crates/lightbeam</a> work ? I am trying to run the examples at:</p>\n<p>* <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/examples/test.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/examples/test.rs</a><br>\n  * <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/benches.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/benches.rs</a><br>\nbut getting error: <code> enches::bench_fibonacci_run' panicked at 'not implemented: can't translate CodeSectionEntry(\"...\")', </code></p>\n<p>Now, I can modify <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/module.rs#L572\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/module.rs#L572</a> to map the enum to <code>{}</code>, but then it runs into the problem that nothing sets TranslateModule::translated_code_section.</p>\n<p>Thus, the question: is lightbeam currently in working state, or is it broken ?</p>\n</blockquote>",
        "id": 247249920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627327764
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-886969670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Lightbeam is unmaintained, so it is probably broken.</p>\n</blockquote>",
        "id": 247250212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627327916
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-888063545\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>No warranty. Not liable for damages. Do not use this code. Only for educational purposes. Probably dangerous side effects.</p>\n<p>I believe I got a basic \"ret 42\" to execute on lightbeam by copying/pasting <a href=\"http://module.rs\">module.rs</a> and fixing the generated runtime errors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WAT</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">(module</span>\n<span class=\"s\">(func $foo (result i32)</span>\n<span class=\"s\">  (i32.const 42)))</span>\n\n<span class=\"s\">\"#</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wat</span>::<span class=\"n\">parse_str</span><span class=\"p\">(</span><span class=\"n\">WAT</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TranslatedModule</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Parser</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">parse_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"payload received: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">TypeSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">translate_sections</span>::<span class=\"n\">type_</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">ImportSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">translate_sections</span>::<span class=\"n\">import</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">FunctionSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func_ty_indices</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">translate_sections</span>::<span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">TableSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">MemorySection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">translate_sections</span>::<span class=\"n\">memory</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span>::<span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s\">\"Multiple memory sections not yet implemented\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">MemoryType</span>::<span class=\"n\">M32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">limits</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">shared</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span>::<span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"s\">\"unsupported memory\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">,};</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">limits</span><span class=\"p\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">limits</span><span class=\"p\">.</span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span>::<span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"s\">\"Custom memory limits not supported in lightbeam\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),))</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">limits</span><span class=\"p\">);}}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">GlobalSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">global</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">ExportSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">StartSection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">ElementSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">element</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">DataSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">translate_sections</span>::<span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">CodeSectionStart</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Payload</span>::<span class=\"n\">CustomSection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Payload</span>::<span class=\"n\">Version</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">CodeSectionEntry</span><span class=\"p\">(</span><span class=\"n\">function_body</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">code_gen_session</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CodeGenSession</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">microwasm</span>::<span class=\"n\">I64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">null_offset_sink</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullOffsetSink</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">unimplemented_reloc_sink</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">translate_sections</span>::<span class=\"n\">UnimplementedRelocSink</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">null_trap_sink</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullTrapSink</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sinks</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sinks</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">relocs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">unimplemented_reloc_sink</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">traps</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">null_trap_sink</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">offsets</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">null_offset_sink</span><span class=\"p\">,};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">translate_wasm</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">code_gen_session</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sinks</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">function_body</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">translated_code_section</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">code_gen_session</span><span class=\"p\">.</span><span class=\"n\">into_translated_code_section</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">);}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Payload</span>::<span class=\"n\">End</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">(</span><span class=\"s\">\"can't translate {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">),}}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">translated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//  m| m.instantiate())?;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">translated</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func_ty_indices</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ExecutionError</span>::<span class=\"n\">FuncIndexOutOfBounds</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">type_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func_type</span><span class=\"p\">(</span><span class=\"n\">func_idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">type_</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">type_</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TypeList</span><span class=\"o\">&gt;</span>::<span class=\"n\">TYPE_LIST</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TypeList</span><span class=\"o\">&gt;</span>::<span class=\"n\">TYPE_LIST</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ExecutionError</span>::<span class=\"n\">TypeMismatch</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"func_idx: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_section</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">translated</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">translated_code_section</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"no code section\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start_buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">code_section</span><span class=\"p\">.</span><span class=\"n\">func_start</span><span class=\"p\">(</span><span class=\"n\">func_idx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">FunctionArgs</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">into_func</span><span class=\"p\">(</span><span class=\"n\">start_buf</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">translated</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ctx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;**</span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VmCtx</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null</span><span class=\"p\">()),)};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let result: u32 = translated.execute_func(0, (5u32, 3u32))?;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"f(5, 3) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_00</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">main</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(adding 5 + 3, even with right calling convention, unfortunately does not return 8 yet).</p>\n</blockquote>",
        "id": 247427675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627455595
    },
    {
        "content": "<p>zeroexcuses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-890257062\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>I think I just got passing arguments + adding working. This issue appears to be an out of sync comment + off-by-1 with passing arguments on sysv. In particular, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/backend.rs#L587\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/lightbeam/src/backend.rs#L587</a> needs to have the <code>rdi</code> register appended to the front of it.</p>\n<p>I am now interested in throwing the entire wasm test suite at refactored-lightbeam, and seeing what breaks. Is there a standard way of 'throwing entire wasm test suite\" ?</p>\n</blockquote>",
        "id": 247774115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627689123
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-893849823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>I have an initial PR for implementing this in cranelift and wasmtime at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">https://github.com/bytecodealliance/wasmtime/pull/3153</a></p>\n</blockquote>",
        "id": 248544318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628201691
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-897697262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>Added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3153\">https://github.com/bytecodealliance/wasmtime/pull/3153</a></p>\n</blockquote>",
        "id": 249243438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628779240
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">issue #572</a>:</p>\n<blockquote>\n<p>We should consider supporting wasm64 modules, not just wasm32; people will want to run with large linear address spaces, both to process large amounts of data and to provide address space for shared mappings or file mappings.</p>\n<p>Opening this issue to start discussing what that support should look like, and how we can do that with minimal complexity or duplication.</p>\n</blockquote>",
        "id": 249243440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628779240
    }
]