[
    {
        "content": "<p>ptitSeb opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>With 0.90 of Cranelift, <code>InsBuilder::trap_if(...)</code> was removed, and replaced with <code>Insbuild::trapnz(...)</code> and <code>InsBuilder::trapz(...)</code>, but the <code>trap_if(...)</code> allowed for more case than just Equal and Different (like for example <code>UnsignedGreaterThanOrEqual</code>).</p>\n<h4>Benefit</h4>\n<p>Easy <code>OutOfBound</code> trap for example</p>\n<h4>Implementation</h4>\n<p>Add more <code>trapXX(...)</code> like <code>trapnz(..)</code>/<code>trapz(..)</code></p>\n<h4>Alternatives</h4>\n<p>Manual jmp over / unconditional trap, but that's a bit cumbersome.</p>\n</blockquote>",
        "id": 324733299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675098962
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409076632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>You should be able to do a <code>trapnz</code> on an <code>icmp</code> result with any comparison op, I think?</p>\n</blockquote>",
        "id": 324743153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675101765
    },
    {
        "content": "<p>ptitSeb <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409117185\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>so, an <code>icmp</code> to get a value, than a test on that value to finaly do a trapz() or trapnz()? That's a solution, but still lot more complex then previous <code>trap_if</code></p>\n</blockquote>",
        "id": 324749030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675103388
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409138784\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>You can do <code>icmp</code> with the IntCC for the condition in which you want to trap and then directly pass the result of <code>icmp</code> to <code>trapnz</code>. For example</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">trap_if</span><span class=\"w\"> </span><span class=\"n\">uge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would turn into</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">uge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"n\">trapnz</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 324751084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675104006
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409138848\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>I believe the intent was that for <code>UnsignedGreaterThanOrEqual</code> you'd use <code>icmp</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">uge</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"n\">trapnz</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There are some special cases which might help, like the <code>uadd_overflow_trap</code> instruction, or using the carry output of <code>iadd_cout</code> as the input to <code>trapnz</code>.</p>\n<p>Do those options cover your needs?</p>\n</blockquote>",
        "id": 324751091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675104008
    },
    {
        "content": "<p>ptitSeb <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409171636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>Ok, thanks. the icmp / trapnz is good enough. I'll check the <code>uadd_overflow_trap</code> too also.</p>\n</blockquote>",
        "id": 324755362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675105410
    },
    {
        "content": "<p>ptitSeb <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409184993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>I guess I can close the ticket as my understanding of <code>trapz</code> / <code>trapnz</code> was eronuous: it doesn't take a CFlag but a Value (and so it's not a direct replacement to <code>trap_if</code>)</p>\n</blockquote>",
        "id": 324756650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675105825
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653#issuecomment-1409259356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>Right, <code>trapif</code> was removed as part of our effort to remove integer/floating-point CPU flags from CLIF. So yeah, I'll go ahead and close this. Thanks for asking the question thoughâ€”it's always good to hear from folks who are using Cranelift!</p>\n</blockquote>",
        "id": 324766818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675109179
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5653\">issue #5653</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>With 0.90 of Cranelift, <code>InsBuilder::trap_if(...)</code> was removed, and replaced with <code>Insbuild::trapnz(...)</code> and <code>InsBuilder::trapz(...)</code>, but the <code>trap_if(...)</code> allowed for more case than just Equal and Different (like for example <code>UnsignedGreaterThanOrEqual</code>).</p>\n<h4>Benefit</h4>\n<p>Easy <code>OutOfBound</code> trap for example</p>\n<h4>Implementation</h4>\n<p>Add more <code>trapXX(...)</code> like <code>trapnz(..)</code>/<code>trapz(..)</code></p>\n<h4>Alternatives</h4>\n<p>Manual jmp over / unconditional trap, but that's a bit cumbersome.</p>\n</blockquote>",
        "id": 324766821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675109179
    }
]