[
    {
        "content": "<p>jlb6740 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 242616387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623685099
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 242618967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623686054
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-683091913\">PR review</a>.</p>",
        "id": 242620168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623686513
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-683091913\">PR review</a>.</p>",
        "id": 242620169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623686513
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651079659\">PR review comment</a>:</p>\n<blockquote>\n<p>Please, use <code>32-bit integers</code> instead of <code>doubleword integers</code>.</p>\n<p>You should also update the <code>fcvt_low_from_sint</code> description.</p>\n</blockquote>",
        "id": 242620171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623686514
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-683203439\">PR review</a>.</p>",
        "id": 242636688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623693620
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651161535\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm good catch. Thanks!</p>\n</blockquote>",
        "id": 242636689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623693620
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651161535\">PR review comment</a>.</p>",
        "id": 242638514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623694452
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 242638765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623694570
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651195782\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you copy the docs from <code>fcvt_low_from_sint</code>?</p>\n</blockquote>",
        "id": 242643260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623696795
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-683250098\">PR review</a>.</p>",
        "id": 242643261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623696795
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 242643823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623697189
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 242651141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623700567
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/akirilov-arm\">akirilov-arm</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a>.</p>",
        "id": 242666371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623709414
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-683982812\">PR review</a>.</p>",
        "id": 242729822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623762804
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651773002\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there any specific reason to add a new IR operation? Correct me if I am wrong, but this is equivalent to <code>uwiden_low</code> + <code>fcvt_from_uint</code>, which should be straightforward to pattern-match in the backend (if it was a sequence of, say, 10 instructions, then a new IR operation would be perfectly understandable).</p>\n<p>I realize that this has already been done for <code>fcvt_low_from_sint</code>, so I guess the same question applies to it.</p>\n</blockquote>",
        "id": 242729823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623762804
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651776995\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, exactly, the term \"doubleword\" means \"64-bit\" in the Arm architecture.</p>\n</blockquote>",
        "id": 242729824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623762804
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r651161535\">PR review comment</a>.</p>",
        "id": 242805330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623794405
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-684631593\">PR review</a>.</p>",
        "id": 242818195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623804856
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r652269973\">PR review comment</a>:</p>\n<blockquote>\n<p>Hi @akirilov-arm .. good question. I did the lowering for fcvt_low_from_sint but don't remember the reasoning. Likely I simply did not realize swiden_low could be used. Brings up a question though of if the goal is to minimize the number of instructions here by reusing and mapping many-to-one as much as possible which will have the consequence of a more generic definition of the instruction. Or do we instead want to be more specific in our instruction name and definition and closely tie to the mapped wasm instruction. You mention how involved the pattern matching would get if instructions are shared may be a decider. I'll push another patch removing these new instructions and instead attempt to lower using uwiden_low and swiden_low.</p>\n</blockquote>",
        "id": 242818196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623804856
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-684646928\">PR review</a>.</p>",
        "id": 242820725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623807484
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r652283401\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm I remember now, we were mimicking the implementation of F32x4ConvertI32x4S but couldn't use or didn't want to use that same instruction. I think uwiden_low was never a thought. Rereading your question, I am not sure what you mean by uwiden_low+fcvt_from_uint as I was initially thinking you just asking why I didn't reuse uwiden_low? Can you explain what you mean by uwiden_low+fcvt_from_uint w.r.t the instruction definition in <a href=\"http://instruction.rs\">instruction.rs</a> and <a href=\"http://code_translator.rs\">code_translator.rs</a>? The patch I just pushed should address all other comments except this one.</p>\n</blockquote>",
        "id": 242820726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623807484
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 242820739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623807501
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-685384045\">PR review</a>.</p>",
        "id": 242904148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860110
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r652844230\">PR review comment</a>:</p>\n<blockquote>\n<p>What I mean is that no changes would be necessary to <code>instructions.rs</code>. As for <code>code_translator.rs</code>, it would need to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Operator</span>::<span class=\"n\">F64x2ConvertLowI32x4U</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pop1_with_bitcast</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I32X4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">widened_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">uwiden_low</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">push1</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fcvt_from_uint</span><span class=\"p\">(</span><span class=\"n\">F64X2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">widened_a</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then if a backend needs to do anything special for that combination, it will match the pattern.</p>\n</blockquote>",
        "id": 242904150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860110
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-685387316\">PR review</a>.</p>",
        "id": 242904556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860303
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r652846733\">PR review comment</a>:</p>\n<blockquote>\n<p>I think you missed a line in the description here.</p>\n</blockquote>",
        "id": 242904557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860303
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-685819506\">PR review</a>.</p>",
        "id": 242966950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623898009
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r653185645\">PR review comment</a>:</p>\n<blockquote>\n<p>Hi @akirilov-arm ok .. I am following the other instructions as an example and don't see the others doing this. What does it mean to call two instruction builders here? I tried the above and it's going to want something implemented for uwiden_low and fcvt_from_uint. Is this what you are suggesting?</p>\n</blockquote>",
        "id": 242966951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623898009
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-686415644\">PR review</a>.</p>",
        "id": 243029375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623941478
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r653641183\">PR review comment</a>:</p>\n<blockquote>\n<p>That's one way to do it, but it's probably going to result in suboptimal code generation. You can check the handling of <code>Operator::V128Load8Splat</code> - it's a really similar case, i.e. we generate 2 separate IR operations (<code>load</code> + <code>splat</code>) for 1 Wasm instruction, and then the backends pattern-match the combination to generate 1 final machine instruction.</p>\n</blockquote>",
        "id": 243029377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623941478
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-690343544\">PR review</a>.</p>",
        "id": 243619451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624435974
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r656863511\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm I see the implementation in <a href=\"http://code_translator.rs\">code_translator.rs</a>, but can you point to the backend lowering of Operator::V128Load8Splat that is using pattern matching?</p>\n</blockquote>",
        "id": 243619452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624435974
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-690596383\">PR review</a>.</p>",
        "id": 243644939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624451992
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657054944\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8c0ac72f10dc92efd94952b3dd94b43ea32d195/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L2256\">here</a>'s the AArch64 implementation, and in the x64 backend it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8c0ac72f10dc92efd94952b3dd94b43ea32d195/cranelift/codegen/src/isa/x64/lower.rs#L187\">seems</a> to be in <code>input_to_reg_mem()</code>, which is used by the <code>Splat</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8c0ac72f10dc92efd94952b3dd94b43ea32d195/cranelift/codegen/src/isa/x64/lower.rs#L5777\">implementation</a>.</p>\n</blockquote>",
        "id": 243644940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624451992
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-691185989\">PR review</a>.</p>",
        "id": 243719599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624486207
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657494597\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm I see a mergable_load call that I assume doesn't apply here? Is it really best to try and merge instructions instead of just mapping it explicitly 1:1 to the wasm instruction like it is now? I don't know that I follow exactly, but I think following your suggestion new logic would be needed in input_to_reg_mem that would get executed for every instruction calling this function. I guess the logic would check if the instruction does a widen and convert? Seems to be less straight forward? What's the advantage of avoiding the 1:1 mapping? </p>\n</blockquote>",
        "id": 243719600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624486207
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-691234199\">PR review</a>.</p>",
        "id": 243728551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624492979
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657535414\">PR review comment</a>:</p>\n<blockquote>\n<p>I haven't worked on the x64 backend, so I can't make specific implementation suggestions - my guess is that it would be similar to the AArch64 code, i.e. in the implementation of <code>fcvt_from_uint</code> you would check if the input is <code>uwiden_low</code> and act accordingly (<code>input_to_reg_mem()</code> doesn't seem like the right place). My point is that matching is possible and in this case easy because we need to match only one input, not a whole expression tree.</p>\n<p>I am working on enabling the <code>i16x8.q15mulr_sat_s</code> and <code>i32x4.trunc_sat_f64x2_s_zero</code> operations, which also happen to be expressible in terms of existing IR operations. However, they result in much more complicated patterns, which are no longer easy to match, so in those cases I would not make the same suggestion.</p>\n<p>The main advantage of avoiding the 1:1 mapping is that it reduces the work necessary for all backends to get basic support for the operation - once they implement 2 other operations, which they are going to do anyway because it is required by the Wasm SIMD specification, they get <code>f64x2.convert_low_i32x4_u</code> for free (and the same would apply to <code>f64x2.convert_low_i32x4_s</code> if it is changed similarly). Also, the pattern might occur organically in the Wasm code and would be handled properly. There is probably an argument to be made that enums should be kept as lean as possible, and that other applications that try to generate or manipulate Cranelift IR (say, another compiler frontend or a peephole optimizer) would have an easier job because they will have fewer things to consider, but these are lesser concerns.</p>\n<p>With all that said, I am definitely not categorically opposed to adding an IR operation, so perhaps it is best to hear a third opinion.</p>\n<p>cc @abrown @bnjbvr @bjorn3 @cfallin @uweigand</p>\n</blockquote>",
        "id": 243728552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624492979
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-691239081\">PR review</a>.</p>",
        "id": 243729367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624493779
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657539856\">PR review comment</a>:</p>\n<blockquote>\n<p>@jlb6740 we had some discussion on this topic last year -- see #2278 and #2376.</p>\n<p>I think in general, we want to try to limit new instructions we add at the CLIF level to those that are truly necessary; while combo-instructions make it easier to plumb through the new thing and get exactly the semantics you want, they impose ongoing maintenance cost and cost on new backend implementations, as the IR-level instruction set becomes more complex. Also, the operator-combos for which there are efficient lowerings may be different on different architectures; we then end up with the union of all combo-instructions, and while some backends will have efficient lowerings for the ones that were purpose-built for that backend, the other other backends will have to add new logic that could have come from the combination of simpler ops automatically, as @akirilov-arm says. In general, pattern-matching is a good way to implement better lowerings for some combos without taking on this cost, I think.</p>\n<p>In this particular case, the general helpers (e.g. <code>input_to_reg_mem()</code>) don't need to change at all; instead there would be some logic in the lowering case for <code>fcvt_from_uint</code> that looks for a <code>uwiden_low</code>. The <code>matches_input()</code> helper should be useful here.</p>\n</blockquote>",
        "id": 243729368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624493779
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-691251443\">PR review</a>.</p>",
        "id": 243731098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624495951
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657551196\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin It's probably reasonable to consider a \"complexity bound\" on the necessary matching, though, as I said - for instance, <code>i32x4.trunc_sat_f64x2_s_zero</code> is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_to_sint_sat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_to_sint_sat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snarrow</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(and maybe I am forgetting another straightforward way to generate a vector of zeros)<br>\nI would lean towards introducing a new IR operation in that case.</p>\n</blockquote>",
        "id": 243731099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624495952
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-691256858\">PR review</a>.</p>",
        "id": 243731911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624496911
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r657555881\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, definitely, the matching has some dynamic cost (in compile time and IR memory usage), so there's a tradeoff. When it's a simple A+B combo op as here, it seems reasonable to me to pattern-match the composition, but we should take it on a case-by-case basis. I'd be curious in your examples whether the lowering can give a more optimized instruction sequence for those 3/4 ops together than what would fall out of the simple lowering, but we can save such discussion for a future PR :-)</p>\n</blockquote>",
        "id": 243731912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1624496911
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 245358360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625771715
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 245360949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625773031
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 245361751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625773434
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-702443734\">PR review</a>.</p>",
        "id": 245362724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625773877
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r666475949\">PR review comment</a>:</p>\n<blockquote>\n<p>@akirilov-arm @cfallin Hi .. with some offline help from @cfallin I was able to understand what this should look like in lowering. I used the existing algorithm but will investigate doing it another way that uses fewer instructions. I did not try to refactor any other lowerings such as f64x2.convert_low_i32x4_s since this PR is about implementing f64x2.convert_low_i32x4_u and I figure we want to at least get the others finished before optimizing and refactoring previous instructions, but I do plan to refactor f64x2.convert_low_i32x4_s with a different PR if not just for symmetry. Let me know if there is anything else needed for this PR. </p>\n</blockquote>",
        "id": 245362725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625773877
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#discussion_r666475949\">PR review comment</a>.</p>",
        "id": 245362857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625773929
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a> from <code>implement_fcvt_low_from_unit</code> to <code>main</code>.</p>",
        "id": 245367471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625775982
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/akirilov-arm\">akirilov-arm</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a>.</p>",
        "id": 245393121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625796836
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982#pullrequestreview-703076615\">PR review</a>.</p>",
        "id": 245446300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625838975
    },
    {
        "content": "<p>jlb6740 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2982\">PR #2982</a>.</p>",
        "id": 245473798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625852346
    }
]