[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0                # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                       # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4     # this gets the index into the mask\nv4 = const_addr [mask ref]        # a RIP-relative LEA\nv5 = load_complex v3, v4          # MOVUPS the mask\nv6 = band v2, v5                       # mask off the bits that would have been zeroed in a true ushr.i8x16\n</pre></div>\n\n\n<p>4a9a4cb is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191323611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584756856
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0                # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                       # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4     # this gets the index into the mask\nv4 = const_addr [mask ref]        # a RIP-relative LEA\nv5 = load_complex v3, v4          # MOVUPS the mask\nv6 = band v2, v5                       # mask off the bits that would have been zeroed in a true ushr.i8x16\n</pre></div>\n\n\n<p>4a9a4cb is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191323637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584756944
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0                # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                       # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4     # this gets the index into the mask\nv4 = const_addr [mask ref]        # a RIP-relative LEA\nv5 = load_complex v3, v4          # MOVUPS the mask\nv6 = band v2, v5                       # mask off the bits that would have been zeroed in a true ushr.i8x16\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191323659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584756962
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n\n2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.\n\n&lt;!--\n\nPlease ensure that the following steps are all taken care of before submitting\nthe PR.\n\n\n- [ ] This has been discussed in issue #..., or if not, please tell us why\n  here.\n\n- [ ] A short description of what this does, why it is needed; if the\n  description becomes long, the matter should probably be discussed in an issue\n  first.\n\n- [ ] This PR contains test cases, if meaningful.\n- [ ] A reviewer from the core maintainer team has been assigned for this PR.\n  If you don&#39;t know who could review this, please indicate so. The list of\n  suggested reviewers on the right can help you.\n\nPlease ensure all communication adheres to the [code of\nconduct](https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md).\n--&gt;\n\n~~~\n</pre></div>\n\n\n</blockquote>",
        "id": 191325278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584760066
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191325281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584760079
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a>.</p>",
        "id": 191325322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584760112
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191680710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585088766
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191682172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585089747
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380755116\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380755116\">PR Review</a>.</p>",
        "id": 191683341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090705
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397511846\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397511846\">PR Review Comment</a>:</p>\n<blockquote>\n<p>TODO: I just need to remove this.</p>\n</blockquote>",
        "id": 191683342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090705
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380756427\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380756427\">PR Review</a>.</p>",
        "id": 191683578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090885
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397513037\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397513037\">PR Review Comment</a>:</p>\n<blockquote>\n<p>TODO: remove, included in <code>simd-bitwise-run.clif</code></p>\n</blockquote>",
        "id": 191683580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090885
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380756653\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-380756653\">PR Review</a>.</p>",
        "id": 191683609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090917
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397513246\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#discussion_r397513246\">PR Review Comment</a>:</p>\n<blockquote>\n<p>TODO: rename to <code>ushr_i8x16</code></p>\n</blockquote>",
        "id": 191683610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585090918
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 191818328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585174929
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 192745030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585873324
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 192845583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585938363
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 193346204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586363984
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a> from <code>i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds an implementation of i8x16 shift. Since x86 does not have such an instruction (i.e. it stops at i16x8), we spent a considerable time discussing the best way to implement this for x86 in <a href=\"https://github.com/WebAssembly/simd/issues/117\" title=\"https://github.com/WebAssembly/simd/issues/117\">a spec issue</a>. In the end, I chose to implement this with constant masks, for which I had to:</p>\n<ul>\n<li>Make constants declarable in the function preamble: <code>const42 = 0x.....</code></li>\n<li>Add a <code>const_addr</code> instruction in order to get the base address of a constant in the constant pool</li>\n</ul>\n<p>With this functionality in place, I then legalized <code>ushr.i8x16</code> to the equivalent of these seven instructions:</p>\n<div class=\"codehilite\"><pre><span></span>v0 = band_imm [shift index], 7  # this is pre-existent in code_translator.rs\nv1 = bitcast i64x2 v0           # this moves the shift index into an XMM register (could be scalar_to_vector)\nv2 = x86_psrl v1                # I&#39;m eliding some raw_bitcasts around this for clarity\nv3 = ishl_imm [shift index], 4  # this gets the index into the mask\nv4 = const_addr [mask ref]      # a RIP-relative LEA\nv5 = load_complex v3, v4        # MOVUPS the mask\nv6 = band v2, v5                # mask off the bits that would have been zeroed in a true ushr.i8x16```\n</pre></div>\n\n\n<p>2f648ea is actually not directly related to this PR but is useful for the benchmark I am attempting to run.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 193353516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586367336
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-395696730\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377#pullrequestreview-395696730\">PR Review</a>.</p>",
        "id": 194484548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587149563
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1377\">PR #1377</a>.</p>",
        "id": 194485404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587149989
    }
]