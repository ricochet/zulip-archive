[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a> from <code>elliottt:trevor/remove-union-find-from-elaborator</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Remove the UnionFind argument to <code>Elaborator::new</code>, and from the <code>Elaborator</code> structure, relying instead on the <code>value_to_best_value</code> table when computing canonical values.</p>\n<p>Co-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;<br>\nCo-authored-by: L. Pereira &lt;<a href=\"mailto:lpereira@fastly.com\">lpereira@fastly.com</a>&gt;</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421147388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707779545
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>:</p>\n<blockquote>\n<p>Remove the UnionFind argument to <code>Elaborator::new</code>, and from the <code>Elaborator</code> structure, relying instead on the <code>value_to_best_value</code> table when computing canonical values. Running sightglass on the spideromonkey benchmark showed no difference in performance between main and this branch (compile time or run time).</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421151163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781564
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>:</p>\n<blockquote>\n<p>Remove the <code>UnionFind</code> argument to <code>Elaborator::new</code>, and from the <code>Elaborator</code> structure, relying instead on the <code>value_to_best_value</code> table when computing canonical values. Running sightglass on the spideromonkey benchmark showed no difference in performance between main and this branch (compile time or run time).</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421151197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781574
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a> as ready for review.</p>",
        "id": 421151224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781596
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>.</p>",
        "id": 421151225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781596
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>.</p>",
        "id": 421151227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781596
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>:</p>\n<blockquote>\n<p>Remove the <code>UnionFind</code> argument to <code>Elaborator::new</code>, and from the <code>Elaborator</code> structure, relying instead on the <code>value_to_best_value</code> table when computing canonical values. Running sightglass on the spideromonkey benchmark showed no difference in performance between main and this branch (compile time or run time).</p>\n<p>Additionally, we compared the assembly produced with and without this change, and found the difference in generated code to be mostly negligible (<code>lea</code> instead of <code>add</code>, or a move between registers added or removed). The difference in the length of the disassembled output was only +15 lines, which out of <code>2212651</code> is pretty good.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421151808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707781952
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922#pullrequestreview-1876599791\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for taking this on!</p>\n<p>It's reassuring to see no changes to the compile-tests' outputs. I remembered one bit of the original thinking after our discussion earlier: IIRC, we had wanted to track elaborated values by canonical-value (union-find result) because otherwise, elaborating a use of an \"early\" node in the class will not necessarily see a later node that was union'd into the class -- it will result in redundant elaboration.</p>\n<p>I suspect this mostly doesn't show up in practice because eager rewriting means that all subsequent uses are of the latest (highest-numbered) rewrite, if any rewrites occurred, so the best-value propagation can give the best for the whole class at that node. But it'd be good to verify that is what you all had been thinking as well, and add a comment describing this somewhere. What do you think?</p>\n</blockquote>",
        "id": 421153931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707783188
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922#pullrequestreview-1876599791\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for taking this on!</p>\n<p>It's reassuring to see no changes to the compile-tests' outputs (EDIT: and so little in real code). I remembered one bit of the original thinking after our discussion earlier: IIRC, we had wanted to track elaborated values by canonical-value (union-find result) because otherwise, elaborating a use of an \"early\" node in the class will not necessarily see a later node that was union'd into the class -- it will result in redundant elaboration.</p>\n<p>I suspect this mostly doesn't show up in practice because eager rewriting means that all subsequent uses are of the latest (highest-numbered) rewrite, if any rewrites occurred, so the best-value propagation can give the best for the whole class at that node. But it'd be good to verify that is what you all had been thinking as well, and add a comment describing this somewhere. What do you think?</p>\n</blockquote>",
        "id": 421153978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707783222
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922#issuecomment-1939872497\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>:</p>\n<blockquote>\n<p>The goal that we had in removing the use of the union find structure was to enforce the assumption that it was valid to refer to an inner node of the union tree as a subset of an eclass. Using the union find results from the rewriting pass over the whole function during elaboration may end up merging results from different branches in the dominator tree into the same eclass, which would mean that we might canonicalize to a node higher in the union tree than we originally intended. If that situation occurred, we would be at the mercy of the cost function for correctness. I think that with the changes you proposed to how we manage access to the gvn map as well, we'll be able to relax the new guideline we introduced for using subsume when the RHS forgets values from the LHS in egraph rules.</p>\n<p>As to where we would add a comment, I'm not sure the best place to document this. Do we already document our use of sub-trees of the union tree to name subsets of the eclass? I think that's a super elegant implementation detail that's worth documenting, and we could call out careful management of eclasses in the same place.</p>\n</blockquote>",
        "id": 421155780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707784338
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922#issuecomment-1939946079\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>:</p>\n<blockquote>\n<p>OK, yeah, this is confirming to me why we didn't see the scoping issue originally: I think I had been imagining the canonical value to be the \"first\" and hence dominate all others in the eclass, but, indeed, you're correct that out-of-order canonical values can cause references that require the cost function (or the domtree-range scoping described in #7891) to handle. Thanks for \"elaborating\" on that!</p>\n<p>Perhaps we could add to the comment on <code>value_to_elaborated_value</code>?</p>\n<p>Incidentally, this gives me another thought: if we could somehow canonicalize toward dominating values (up the domtree), this problem would also go away. I'm not sure how to do that efficiently though, so I think this plus domtree-range scoping (to avoid delicate subsume rules) feels like the right way to make all this fully robust.</p>\n</blockquote>",
        "id": 421157461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707785561
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>.</p>",
        "id": 421307838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707851143
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7922\">PR #7922</a>.</p>",
        "id": 421315906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707854354
    }
]