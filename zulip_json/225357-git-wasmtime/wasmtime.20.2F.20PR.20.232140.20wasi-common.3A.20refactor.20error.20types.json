[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207292660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597773426
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207292756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597773481
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a>.</p>",
        "id": 207293573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597773834
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207296835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597775482
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/kubkon\">kubkon</a> and <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a>.</p>",
        "id": 207296852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597775489
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207347807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597788186
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207353129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597791964
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207353723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597792367
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207354443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597792951
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>std::io::Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207443794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597861557
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, and I don't have any firm<br>\nguarantees that nobody was depending on the old behavior, but it<br>\nappears to me that none of those unexpected errnos were reasonable<br>\nto expect from any of the filesystem syscalls wasi-common is making.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207444218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597861771
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207444398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597861875
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207445116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597862230
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207448087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597863696
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207448371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597863833
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207463772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597872578
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207467354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597875023
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a>.</p>",
        "id": 207875200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598292120
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208031730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598394181
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a> from <code>pch/wasi_error_handling</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR, wasi-common used the wiggle-generated <code>Errno</code> type throughout, and had a variety of <code>impl From&lt;OtherErrorType&gt; for Errno</code> impls that took care of conversions.</p>\n<p>This PR replaces that with a hand-written <code>Error</code> type that contains both the <code>Errno</code> variants the crate actually use, and variants for rich error types like <code>GuestError</code>, <code>Utf8Error</code>, and others. It uses <code>thiserror::Error</code> to derive a nice <code>Error</code> impl. Wiggle's error mapping feature takes care of converting this rich <code>Error</code> into an <code>Errno</code>.</p>\n<p>This decouples a huge amount of code in wasi-common from the details of the wiggle-generated type, which will be useful as we start supporting multiple snapshots through wiggle (i'm working on that now). It also means we can keep around richer error information for longer, which is better for error reporting. Rather than having ad-hoc log statements sprinkled in various <code>From</code> impls, we rely on the error conversion hooks that Wiggle provides to perform logging.</p>\n<p>This PR also changes, in a subtle way, the way a <code>std::io::Error</code> gets translated through to a wasi <code>Errno</code>.</p>\n<ul>\n<li>\n<p>a certain subset of io::Errors are expected - these we have<br>\n  a (platform-specific, because windows) method to translate into<br>\n  one of the wasi errno variants in the Error enum.</p>\n</li>\n<li>\n<p>some io::Errors are unexpected - wasi-common doesnt expect them from<br>\n  the underlying OS. rather than preserve any fidelity in reporting<br>\n  those to the user (only the unix impl attempts this), lets collect<br>\n  those as an <code>Error::UnexpectedIo(#[source] std::io::Error)</code>.<br>\n  We convert all of these unexpected into <code>Errno::Io</code> for returning<br>\n  to the guest.</p>\n</li>\n</ul>\n<p>This is a different behavior from before, where e.g. if the OS returned a <code>libc::ECONNABORTED</code> we would surface that to the guest as <code>Errno::Econnaborted</code>, and I don't have any firm guarantees that nobody was depending on the old behavior, but it appears to me that none of those unexpected errnos were reasonable to expect from any of the filesystem syscalls wasi-common is making. When wasi-common expands in responsibility to include sockets syscalls etc, we can add these behaviors back in explicitly.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208166210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598487967
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#pullrequestreview-479966288\">PR Review</a>.</p>",
        "id": 208725578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598983812
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#pullrequestreview-479966288\">PR Review</a>.</p>",
        "id": 208725580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598983812
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#discussion_r481312680\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ERROR_BUFFER_OVERFLOW</code> is .. a fascinatingly-named error.</p>\n</blockquote>",
        "id": 208725582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598983812
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#discussion_r481318954\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                                Err(Error::Inval) | Err(Error::Noent) =&gt; {}\n                                Err(Error::Notdir) =&gt; {\n</code></pre></div>\n\n\n<p>I'm having a hard time reconstructing how this works with symlinks, but I think the comment is describing the specific <code>readlinkat-returns-Notdir</code> case.</p>\n</blockquote>",
        "id": 208725583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598983812
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#pullrequestreview-480070789\">PR Review</a>.</p>",
        "id": 208739311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598990247
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#discussion_r481395842\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Me too. This is a transformation of code that existed before (when we had Eq; we no longer do) that I am not 100% convinced is correct, but don't have a sufficient understanding of the problem or test suite to disprove. </p>\n</blockquote>",
        "id": 208739312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598990247
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140#discussion_r481395842\">PR Review Comment</a>.</p>",
        "id": 208739460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598990303
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2140\">PR #2140</a>.</p>",
        "id": 208739906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598990487
    }
]