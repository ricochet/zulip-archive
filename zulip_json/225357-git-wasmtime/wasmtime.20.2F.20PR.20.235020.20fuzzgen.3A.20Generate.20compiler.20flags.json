[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> from <code>fuzzgen-flags</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR allows fuzzgen to generate compiler flags and test using those. We only allow compiler flags that shouldn't change the behaviour of the code.</p>\n<p>I wanted to submit this now so that we could fuzz PR's such as #4953 and #5004 that require optimizations enabled.</p>\n<p>However, when testing this it has found an issue with one of the passes (I haven't yet narrowed it down), but I don't want to start fixing it if we are going to change pretty much everything once #4953 lands. I'm opening this as a draft, and lets re test this once #4953 lands.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;The actual bug manifests as following:&lt;/summary&gt;</p>\n<p>Fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span>: <span class=\"nc\">Running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Running</span>: <span class=\"nc\">fuzz</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">fuzzgen</span><span class=\"o\">/</span><span class=\"n\">crash</span><span class=\"o\">-</span><span class=\"mf\">00e37</span><span class=\"n\">c2858c35c573ed85d618ea5d0c75ae06fda</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"n\">v137</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"n\">v137</span><span class=\"err\">`</span>: <span class=\"nc\">Aliasing</span><span class=\"w\"> </span><span class=\"n\">v137</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">v134</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ir</span><span class=\"o\">/</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">322</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I cannot reproduce via the CLIF file since that runs into <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4875#issuecomment-1239314171\">https://github.com/bytecodealliance/wasmtime/issues/4875#issuecomment-1239314171</a> (which I kinda forgot about <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). But I'm going to try and investigate that one in the mean time.<br>\n&lt;/details&gt;</p>\n<p>This also enables regalloc_checker as we discussed in #4979.</p>\n<p>cc: @jameysharp</p>\n</blockquote>",
        "id": 302461578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664978175
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> from <code>fuzzgen-flags</code> to <code>main</code>.</p>",
        "id": 303066915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665265950
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> from <code>fuzzgen-flags</code> to <code>main</code>.</p>",
        "id": 303312315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665428650
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> from <code>fuzzgen-flags</code> to <code>main</code>.</p>",
        "id": 303595351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665568999
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#pullrequestreview-1144729153\">PR review</a>.</p>",
        "id": 304547235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036819
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#pullrequestreview-1144729153\">PR review</a>.</p>",
        "id": 304547236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036819
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r997455573\">PR review comment</a>:</p>\n<blockquote>\n<p>It probably would make sense to leave a comment in <code>cranelift/codegen/meta/src/shared/settings.rs</code> where all of these options are defined to note \"please add to fuzzing list ...\" as a step when adding new otions?</p>\n</blockquote>",
        "id": 304547237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036819
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r997453735\">PR review comment</a>:</p>\n<blockquote>\n<p>Does it make sense to add <code>riscv64</code> here too (or are you worried it would find too many issues)?</p>\n<p>Actually in the spirit of your enum <code>.all()</code> method above -- perhaps we can define a <code>cranelift_codegen::isa::all()</code> that returns all <code>Triple</code>s compiled into the build, and use that here? (Feel free to drop that idea though if it's more than ~20 lines of complexity or so.)</p>\n</blockquote>",
        "id": 304547238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036819
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r997458365\">PR review comment</a>:</p>\n<blockquote>\n<p>Some of these can probably be excluded, based on knowledge of what they do and likely payoff from fuzzing time:</p>\n<ul>\n<li><code>machine_code_cfg_info</code> generates additional metadata for the embedder but this doesn't feed back into compilation anywhere; we can leave it on unconditionally to make sure the generation doesn't panic</li>\n<li><code>enable_simd</code>, <code>enable_float</code>, <code>enable_atomics</code> will cause panics in compilation if an input uses one of those features and it isn't enabled, but don't change compilation otherwise; so we can probably turn them on unconditionally (we're not, e.g., trying to test that a SIMD input causes panics with the feature off)</li>\n</ul>\n</blockquote>",
        "id": 304547240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036819
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#pullrequestreview-1144812295\">PR review</a>.</p>",
        "id": 304558437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666040827
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r997510970\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah the <code>all()</code> idea sounds good, I've been adding them where it think they would be useful for others.</p>\n</blockquote>",
        "id": 304558438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666040827
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#pullrequestreview-1144819579\">PR review</a>.</p>",
        "id": 304559670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666041267
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r997516259\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed, let me know if any other flags come to mind!</p>\n<blockquote>\n<p><code>enable_simd</code>, <code>enable_float</code>, <code>enable_atomics</code> will cause panics in compilation if an input uses one of those features and it isn't enabled,</p>\n</blockquote>\n<p>Enabling them unconditionally sounds good.</p>\n<p>But at least for <code>enable_floats</code> it hasn't panicked yet and we almost always insert floats for larger programs, so we might be silently allowing them anyway. (Haven't tested this yet)<br>\n</p>\n</blockquote>",
        "id": 304559671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666041267
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> from <code>fuzzgen-flags</code> to <code>main</code>.</p>",
        "id": 305204880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666288138
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#pullrequestreview-1149722111\">PR review</a>.</p>",
        "id": 305204901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666288144
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020#discussion_r1000942382\">PR review comment</a>:</p>\n<blockquote>\n<p>This ended up not being very easy to do, I might try it again later. But either way I've added <code>riscv64</code> to the target list.</p>\n</blockquote>",
        "id": 305204903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666288144
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a> as ready for review.</p>",
        "id": 305250139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666305667
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5020\">PR #5020</a>.</p>",
        "id": 305255622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666309252
    }
]