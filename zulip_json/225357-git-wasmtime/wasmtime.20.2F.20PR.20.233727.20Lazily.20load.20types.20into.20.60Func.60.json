[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727\">PR #3727</a> from <code>no-type-in-func</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit changes the construction of a <code>Func</code> to lazily load the type<br>\ninformation if required instead of always loading the type information<br>\nat <code>Func</code>-construction time. The main purpose of this change is to<br>\naccelerate instantiation of instances which have many imports. Currently<br>\nin the fast way of doing this the instantiation loop looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut store = Store::new(&amp;engine, ...);\nlet instance = instance_pre.instantiate(&amp;mut store);\n</code></pre></div>\n\n<p>In this situation the <code>instance_pre</code> will typically load host-defined<br>\nfunctions (defined via <code>Linker</code> APIs) into the <code>Store</code> as individual<br>\n<code>Func</code> items and then perform the instantiation process. The operation<br>\nof loading a <code>HostFunc</code> into a <code>Store</code> however currently involves two<br>\nexpensive operations:</p>\n<ul>\n<li>\n<p>First a read-only lock is taken on the <code>RwLock</code> around engine<br>\n  signatures.</p>\n</li>\n<li>\n<p>Next a clone of the wasm type is made to pull it out of the engine<br>\n  signature registry.</p>\n</li>\n</ul>\n<p>Neither of these is actually necessary for imported functions. The<br>\n<code>FuncType</code> for imported functions is never used since all comparisons<br>\nhappen with the intern'd indices instead. The only time a <code>FuncType</code> is<br>\nused typically is for exported functions when using <code>Func::typed</code> or<br>\nsimilar APIs which need type information.</p>\n<p>This commit makes this path faster by storing <code>Option&lt;FuncType&gt;</code> instead<br>\nof <code>FuncType</code> within a <code>Func</code>. This means that it starts out as <code>None</code><br>\nand is only filled in on-demand as necessary. This means that when<br>\ninstantiating a module with many imports no clones/locks are done.</p>\n<p>On a simple microbenchmark where a module with 100 imports is<br>\ninstantiated this PR improves instantiation time by ~35%. Due to the<br>\nrwlock used here and the general inefficiency of pthreads rwlocks the<br>\neffect is even more profound when many threads are performing the same<br>\ninstantiation process. On x86_64 with 8 threads performing instantiation<br>\nthis PR improves instantiation time by 80% and on arm64 it improves by<br>\n97% (wow read-contended glibc rwlocks on arm64 are slow).</p>\n<p>Note that much of the improvement here is also from memory<br>\nallocatoins/deallocations no longer being performed because dropping<br>\nfunctions within a store no longer requires deallocating the <code>FuncType</code><br>\nif it's not present.</p>\n<p>A downside of this PR is that <code>Func::ty</code> is now unconditionally taking<br>\nan rwlock if the type hasn't already been filled in. (it uses the<br>\nengine). If this is an issue in the future though we can investigate at<br>\nthat time using somthing like a <code>Once</code> to lazily fill in even when<br>\nmutable access to the store isn't available.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 269465189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643224277
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727#pullrequestreview-864000313\">PR review</a>.</p>",
        "id": 269466452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643224753
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727#pullrequestreview-864000313\">PR review</a>.</p>",
        "id": 269466453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643224753
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727#discussion_r792966890\">PR review comment</a>:</p>\n<blockquote>\n<p>There's probably a mundane borrow-checker-subtlety reason for returning the downgraded immutable-borrow of <code>StoreOpaque</code> here, but could we add a comment describing why?</p>\n</blockquote>",
        "id": 269466454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643224753
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727\">PR #3727</a> from <code>no-type-in-func</code> to <code>main</code>.</p>",
        "id": 269476237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643228606
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3727\">PR #3727</a>.</p>",
        "id": 269476258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643228618
    }
]