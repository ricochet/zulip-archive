[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741204358\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<p>Ok looks like this won't work <a href=\"https://github.com/bytecodealliance/wasmtime/blob/11a66086d42a51583b0f3adc1df872f574e34a58/cranelift/codegen/src/isa/riscv64/lower.isle#L35-L37\">for at least one reason</a> which is that <code>u8 + u8</code> does not mask (similar for other non-32 and non-64 sizes).</p>\n<p>@afonso360 do you know if this is a known issue with the risc-v backend? I'd be happy to help fix this up, but I'm not sure how deep this necessarily goes.</p>\n</blockquote>",
        "id": 393970460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006238
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741212467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok looks like this won't work <a href=\"https://github.com/bytecodealliance/wasmtime/blob/11a66086d42a51583b0f3adc1df872f574e34a58/cranelift/codegen/src/isa/riscv64/lower.isle#L35-L37\">for at least one reason</a> which is that <code>u8 + u8</code> does not mask (similar for other non-32 and non-64 sizes).</p>\n<p>@afonso360 do you know if this is a known issue with the risc-v backend? I'd be happy to help fix this up, but I'm not sure how deep this necessarily goes.</p>\n</blockquote>\n<p>The approach we were using in the past is to use <code>normalize_cmp_value</code> for the cases where we needed to make sure that a value had no non-zero upper bits. Probably that function should be renamed, and we should be more aggressive about using it when lowering operations that might rely on those upper bits.</p>\n</blockquote>",
        "id": 393971429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006661
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741400164\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 393994354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696016686
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741410895\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<p>Ok so I've looked around a bit, my conclusion is I don't know enough to be making changes here yet. I'm going to go back to the drawing board on some of this and see what I can figure out.</p>\n</blockquote>",
        "id": 393995655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696017361
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741524409\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<p>This is something that we really need! Currently we emit at least 4 instructions when we could do just one! Thanks for looking into this.</p>\n<p>Also this just reminded me that I had a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6112/files\">icmp PR</a> that I had forgot about. Feel free to pick out anything you need from there! </p>\n<blockquote>\n<p>One part that this commit removes is various sign-extensions around<br>\nicmp because, at least according to RISC-V's ABI, values are always<br>\nsign extended when sitting at rest in their registers. I'm not sure if<br>\nCranelift respects this everywhere just yet, </p>\n<p>@afonso360 do you know if this is a known issue with the risc-v backend? I'd be happy to help fix this up, but I'm not sure how deep this necessarily goes.</p>\n</blockquote>\n<p>We actually don't follow this at all. We follow the general cranelift convention that upper bits are undefined and we clear / sign extend them in the ops that need it.</p>\n<p>I looked up the ABI document and I could only find that sign extend requirement with regards to the calling convention, but as far as I know that is handled somewhere else in cranelift right?</p>\n</blockquote>",
        "id": 394009101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696024184
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113#issuecomment-1741538740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">issue #7113</a>:</p>\n<blockquote>\n<p>Oh dear apologies for missing that! I'll probably restart from there.</p>\n<p>I also need to investigate what's up with the ABI business and all that, but ok makes sense that Cranelift considers the upper bits undefined state. I know the ABI bits should do sign-extension as necessary, so I'll try to hunt that down and confirm and make sure it's all working.</p>\n</blockquote>",
        "id": 394011303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696025492
    }
]