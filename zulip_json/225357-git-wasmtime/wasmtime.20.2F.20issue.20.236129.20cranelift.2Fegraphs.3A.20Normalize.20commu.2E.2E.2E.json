[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">issue #6129</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Ensure that commutative operations are unified in the GVN map even if their arguments are in different orders. For example, <code>iadd v0, v1</code> should hit the same entry in the GVN map as <code>iadd v1, v0</code>.</p>\n<h4>Benefit</h4>\n<p>If more instructions unify through the GVN map, then fewer redundant computations will be performed at runtime. In addition, equality saturation may be able to identify more matching rules. This also keeps the size of the GVN map smaller.</p>\n<h4>Challenges</h4>\n<p>We currently have ISLE optimization rules which swap the operands to commutative operations if the left-hand operand is a constant, so that constants are always on the right. Other mid-end rules and some backend lowering rules (cc: @afonso360) currently rely on constants appearing on the right to avoid writing extra rules to match the commutative case.</p>\n<p>This proposed feature would undo those rules. (We would like to solve that a different way though: see #6128.)</p>\n<p>At first glance it seems appealing to fuse that policy into this feature: if exactly one operand is equivalent to a constant, then normalize it on the right, and otherwise use some other normalization policy. That could lead to more problems like #6126 though, if it's possible for a value to be discovered equivalent to a constant after it's already been used by another instruction in the GVN map.</p>\n<h4>Implementation</h4>\n<p>When inserting into or retrieving from the GVN map, first put the <code>InstructionData</code> in a normal form: If the opcode is commutative, compare the set-representative value number from the e-class for each of its operands; if they aren't already in non-descending order, swap them. Then proceed with the GVN map lookup.</p>\n<p>Note that the GVN map already relies on having a stable set representative for each e-class (but see #6126). So using those representatives to normalize the operand order doesn't require anything new.</p>\n<p>This generalizes to instructions where swapping operands isn't necessarily semantics-preserving by itself. For example, it's possible to swap the operands of any <code>icmp</code> as long as the condition code is also swapped, such as replacing <code>icmp gt v1, v0</code> with <code>icmp lt v0, v1</code>.</p>\n<h4>Alternatives</h4>\n<p>The _status quo_ isn't the worst thing in the world. I don't know of any other alternatives if we want to improve this aspect of GVN.</p>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 345795086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680213795
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">issue #6129</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Ensure that commutative operations are unified in the GVN map even if their arguments are in different orders. For example, <code>iadd v0, v1</code> should hit the same entry in the GVN map as <code>iadd v1, v0</code>.</p>\n<h4>Benefit</h4>\n<p>If more instructions unify through the GVN map, then fewer redundant computations will be performed at runtime. In addition, equality saturation may be able to identify more matching rules. This also keeps the size of the GVN map smaller.</p>\n<h4>Challenges</h4>\n<p>We currently have ISLE optimization rules which swap the operands to commutative operations if the left-hand operand is a constant, so that constants are always on the right. Other mid-end rules and some backend lowering rules (cc: @afonso360) currently rely on constants appearing on the right to avoid writing extra rules to match the commutative case.</p>\n<p>This proposed feature would undo those rules. (We would like to solve that a different way though: see #6128.)</p>\n<p>At first glance it seems appealing to fuse that policy into this feature: if exactly one operand is equivalent to a constant, then normalize it on the right, and otherwise use some other normalization policy. That could lead to more problems like #6126 though, if it's possible for a value to be discovered equivalent to a constant after it's already been used by another instruction in the GVN map.</p>\n<h4>Implementation</h4>\n<p>When inserting into or retrieving from the GVN map, first put the <code>InstructionData</code> in a normal form: If the opcode is commutative, compare the set-representative value number from the e-class for each of its operands; if they aren't already in non-descending order, swap them. Then proceed with the GVN map lookup.</p>\n<p>Note that the GVN map already relies on having a stable set representative for each e-class (but see #6126). So using those representatives to normalize the operand order doesn't require anything new.</p>\n<p>This generalizes to instructions where swapping operands isn't necessarily semantics-preserving by itself. For example, it's possible to swap the operands of any <code>icmp</code> as long as the condition code is also swapped, such as replacing <code>icmp gt v1, v0</code> with <code>icmp lt v0, v1</code>.</p>\n<h4>Alternatives</h4>\n<p>The _status quo_ isn't the worst thing in the world. I don't know of any other alternatives if we want to improve this aspect of GVN.</p>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 345795087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680213795
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">issue #6129</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Ensure that commutative operations are unified in the GVN map even if their arguments are in different orders. For example, <code>iadd v0, v1</code> should hit the same entry in the GVN map as <code>iadd v1, v0</code>.</p>\n<h4>Benefit</h4>\n<p>If more instructions unify through the GVN map, then fewer redundant computations will be performed at runtime. In addition, equality saturation may be able to identify more matching rules. This also keeps the size of the GVN map smaller.</p>\n<h4>Challenges</h4>\n<p>We currently have ISLE optimization rules which swap the operands to commutative operations if the left-hand operand is a constant, so that constants are always on the right. Other mid-end rules and some backend lowering rules (cc: @afonso360) currently rely on constants appearing on the right to avoid writing extra rules to match the commutative case.</p>\n<p>This proposed feature would undo those rules. (We would like to solve that a different way though: see #6128.)</p>\n<p>At first glance it seems appealing to fuse that policy into this feature: if exactly one operand is equivalent to a constant, then normalize it on the right, and otherwise use some other normalization policy. That could lead to more problems like #6126 though, if it's possible for a value to be discovered equivalent to a constant after it's already been used by another instruction in the GVN map.</p>\n<h4>Implementation</h4>\n<p>When inserting into or retrieving from the GVN map, first put the <code>InstructionData</code> in a normal form: If the opcode is commutative, compare the set-representative value number from the e-class for each of its operands; if they aren't already in non-descending order, swap them. Then proceed with the GVN map lookup.</p>\n<p>Note that the GVN map already relies on having a stable set representative for each e-class (but see #6126). So using those representatives to normalize the operand order doesn't require anything new.</p>\n<p>This generalizes to instructions where swapping operands isn't necessarily semantics-preserving by itself. For example, it's possible to swap the operands of any <code>icmp</code> as long as the condition code is also swapped, such as replacing <code>icmp gt v1, v0</code> with <code>icmp lt v0, v1</code>.</p>\n<h4>Alternatives</h4>\n<p>The _status quo_ isn't the worst thing in the world. I don't know of any other alternatives if we want to improve this aspect of GVN.</p>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 345795088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680213795
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">issue #6129</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Ensure that commutative operations are unified in the GVN map even if their arguments are in different orders. For example, <code>iadd v0, v1</code> should hit the same entry in the GVN map as <code>iadd v1, v0</code>.</p>\n<h4>Benefit</h4>\n<p>If more instructions unify through the GVN map, then fewer redundant computations will be performed at runtime. In addition, equality saturation may be able to identify more matching rules. This also keeps the size of the GVN map smaller.</p>\n<h4>Challenges</h4>\n<p>We currently have ISLE optimization rules which swap the operands to commutative operations if the left-hand operand is a constant, so that constants are always on the right. Other mid-end rules and some backend lowering rules (cc: @afonso360) currently rely on constants appearing on the right to avoid writing extra rules to match the commutative case.</p>\n<p>This proposed feature would undo those rules. (We would like to solve that a different way though: see #6128.)</p>\n<p>At first glance it seems appealing to fuse that policy into this feature: if exactly one operand is equivalent to a constant, then normalize it on the right, and otherwise use some other normalization policy. That could lead to more problems like #6126 though, if it's possible for a value to be discovered equivalent to a constant after it's already been used by another instruction in the GVN map.</p>\n<h4>Implementation</h4>\n<p>When inserting into or retrieving from the GVN map, first put the <code>InstructionData</code> in a normal form: If the opcode is commutative, compare the set-representative value number from the e-class for each of its operands; if they aren't already in non-descending order, swap them. Then proceed with the GVN map lookup.</p>\n<p>Note that the GVN map already relies on having a stable set representative for each e-class (but see #6126). So using those representatives to normalize the operand order doesn't require anything new.</p>\n<p>This generalizes to instructions where swapping operands isn't necessarily semantics-preserving by itself. For example, it's possible to swap the operands of any <code>icmp</code> as long as the condition code is also swapped, such as replacing <code>icmp gt v1, v0</code> with <code>icmp lt v0, v1</code>.</p>\n<h4>Alternatives</h4>\n<p>The _status quo_ isn't the worst thing in the world. I don't know of any other alternatives if we want to improve this aspect of GVN.</p>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 346707069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680570249
    },
    {
        "content": "<p>jameysharp reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6129\">issue #6129</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Ensure that commutative operations are unified in the GVN map even if their arguments are in different orders. For example, <code>iadd v0, v1</code> should hit the same entry in the GVN map as <code>iadd v1, v0</code>.</p>\n<h4>Benefit</h4>\n<p>If more instructions unify through the GVN map, then fewer redundant computations will be performed at runtime. In addition, equality saturation may be able to identify more matching rules. This also keeps the size of the GVN map smaller.</p>\n<h4>Challenges</h4>\n<p>We currently have ISLE optimization rules which swap the operands to commutative operations if the left-hand operand is a constant, so that constants are always on the right. Other mid-end rules and some backend lowering rules (cc: @afonso360) currently rely on constants appearing on the right to avoid writing extra rules to match the commutative case.</p>\n<p>This proposed feature would undo those rules. (We would like to solve that a different way though: see #6128.)</p>\n<p>At first glance it seems appealing to fuse that policy into this feature: if exactly one operand is equivalent to a constant, then normalize it on the right, and otherwise use some other normalization policy. That could lead to more problems like #6126 though, if it's possible for a value to be discovered equivalent to a constant after it's already been used by another instruction in the GVN map.</p>\n<h4>Implementation</h4>\n<p>When inserting into or retrieving from the GVN map, first put the <code>InstructionData</code> in a normal form: If the opcode is commutative, compare the set-representative value number from the e-class for each of its operands; if they aren't already in non-descending order, swap them. Then proceed with the GVN map lookup.</p>\n<p>Note that the GVN map already relies on having a stable set representative for each e-class (but see #6126). So using those representatives to normalize the operand order doesn't require anything new.</p>\n<p>This generalizes to instructions where swapping operands isn't necessarily semantics-preserving by itself. For example, it's possible to swap the operands of any <code>icmp</code> as long as the condition code is also swapped, such as replacing <code>icmp gt v1, v0</code> with <code>icmp lt v0, v1</code>.</p>\n<h4>Alternatives</h4>\n<p>The _status quo_ isn't the worst thing in the world. I don't know of any other alternatives if we want to improve this aspect of GVN.</p>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 346956606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680638206
    }
]