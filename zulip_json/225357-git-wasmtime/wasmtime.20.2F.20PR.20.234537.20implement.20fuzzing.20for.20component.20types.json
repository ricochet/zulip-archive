[
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>:</p>\n<blockquote>\n<p>This is the first part of my work to address #4307.  We now generate 1000<br>\narbitrary types and tests for those types at build time.  Each test includes a<br>\ncomponent which imports and exports functions that take and return its<br>\nrespective type.  The exported function calls the imported function, which is<br>\nimplemented by the host, and the host verifies that both the host function<br>\nargument and the guest function return value match the original input value.</p>\n<p>In terms of #4307, this includes the test case generator and the static API<br>\noracle.  I'll follow up with a dynamic API oracle in a subsequent PR.</p>\n<p>Signed-off-by: Joel Dice &lt;<a href=\"mailto:joel.dice@fermyon.com\">joel.dice@fermyon.com</a>&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291350834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113308
    },
    {
        "content": "<p>dicej edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>:</p>\n<blockquote>\n<p>This addresses #4307.</p>\n<p>For the static API we generate 100 arbitrary test cases at build time, each of<br>\nwhich includes 0-5 parameter types, a result type, and a WAT fragment containing<br>\nan imported function and an exported function.  The exported function calls the<br>\nimported function, which is implemented by the host.  At runtime, the fuzz test<br>\nselects a test case at random and feeds it zero or more sets of arbitrary<br>\nparameters and results, checking that values which flow host-to-guest and<br>\nguest-to-host make the transition unchanged.</p>\n<p>The fuzz test for the dynamic API follows a similar pattern, the only difference<br>\nbeing that test cases are generated at runtime.</p>\n<p>Signed-off-by: Joel Dice &lt;<a href=\"mailto:joel.dice@fermyon.com\">joel.dice@fermyon.com</a>&gt;</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291350916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113357
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291350981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659113399
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055863475\">PR review</a>.</p>",
        "id": 291358846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055863475\">PR review</a>.</p>",
        "id": 291358847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933486670\">PR review comment</a>:</p>\n<blockquote>\n<p>It's ok to omit this if it's empty</p>\n</blockquote>",
        "id": 291358848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933476888\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this necessary for this PR? (I think this might affect <code>cargo fuzz build --no-default-features</code> as still trying to build the spec interpreter)</p>\n</blockquote>",
        "id": 291358849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933480643\">PR review comment</a>:</p>\n<blockquote>\n<p>Like you mentioned in the issue this can lead to too-deep recursion in the text format. I think a better strategy might be to generate a <code>(type $name (record ...))</code> for each layer of a <code>Type</code> perhaps? That would avoid the <code>*.wast</code> limitations while still helping to fuzz super-deep type hierarchies in Wasmtime (which I think would actually be quite useful, so I'd rescind my other suggestion of limiting the depth here)</p>\n</blockquote>",
        "id": 291358851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933488105\">PR review comment</a>:</p>\n<blockquote>\n<p>Was this for correctnes or a refactoring? Fine either way of course, just curious for my own edification</p>\n</blockquote>",
        "id": 291358852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933486399\">PR review comment</a>:</p>\n<blockquote>\n<p>Currently the general style of this crate is that the <code>oracles</code> here don't take <code>Unstructured</code> but rather take a list of inputs. I think that would be  possible to do here? This would take a <code>TestCase</code> as input as well as a <code>Vec&lt;(...)&gt;</code> for inputs/outputs of each run.</p>\n</blockquote>",
        "id": 291358853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933489517\">PR review comment</a>:</p>\n<blockquote>\n<p>as a stylistic nit could this <code>]</code> go on a separate line?</p>\n</blockquote>",
        "id": 291358854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933493856\">PR review comment</a>:</p>\n<blockquote>\n<p>Currently the way time allotment on oss-fuzz works is that we're given a fixed time slice to balance between all of our fuzzing executables. In that sense the more fuzzers we have the more they take time away from other fuzzers. Since these are fuzzing the same thing in spirit could these two fuzzers be folded into one? The fuzz input could be used to determine whether the dynamic or static API could be fuzzed then I think.</p>\n</blockquote>",
        "id": 291358855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933494969\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps be replaced with something that dynamically fills out more of the <code>bytes</code> vector when an error is encountered? Otherwise this could run into a possible issue where unrelated changes to the fuzz generator could cause this build to fail if just-the-wrong-seed is chosen.</p>\n</blockquote>",
        "id": 291358856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933493088\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a little worried about the impact that this will have on build times because it means that <code>cargo fuzz build</code> will build all of Wasmtime once for the host and then once again for the \"target\". This is a case where from Cargo's perspective when you execute <code>cargo build --target $the_host_target</code> it's considered a cross-compilation and packages shared between the two are built twice.</p>\n<p>Improving this situation though is likely to not really be that easy. The \"easy\" thing to do is to split out the bits you need from <code>wasmtime-fuzzing</code> into their own separate crate. Splitting crates though is not always the easiest and ideally the pieces you're using to generate test cases here would ideally reuse the bits from <code>wasmtime-environ</code> as well to avoid duplicating things.</p>\n<p>Overall though I do think that this is something that should be solved before landing due to how heavyweight this dependency is when fuzzing. This'll link in <code>v8</code>, for example, to the build script which is no small feat.</p>\n</blockquote>",
        "id": 291358858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659117205
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291361835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118538
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055918223\">PR review</a>.</p>",
        "id": 291362250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118740
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933515349\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops, I didn't see this until after I wrote <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537/commits/8fceba5be1f00c72582b5deaf6b490e421dfc887\">https://github.com/bytecodealliance/wasmtime/pull/4537/commits/8fceba5be1f00c72582b5deaf6b490e421dfc887</a>.  Should I undo that and use this approach instead?</p>\n</blockquote>",
        "id": 291362251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118740
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055918916\">PR review</a>.</p>",
        "id": 291362359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118784
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933515870\">PR review comment</a>:</p>\n<blockquote>\n<p>Not sure where that came from, honestly.  I should be able to remove it.</p>\n</blockquote>",
        "id": 291362360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118784
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055922003\">PR review</a>.</p>",
        "id": 291362839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118983
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933518082\">PR review comment</a>:</p>\n<blockquote>\n<p>Correctness.  The original code meant that each argument would overwrite any that came before it in the list.  This was the first bug the fuzz tests found.</p>\n</blockquote>",
        "id": 291362842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659118983
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933524232\">PR review comment</a>:</p>\n<blockquote>\n<p>Aah yes indeed I see the issue now!</p>\n</blockquote>",
        "id": 291363284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119218
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055929273\">PR review</a>.</p>",
        "id": 291363285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119218
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055930405\">PR review</a>.</p>",
        "id": 291363434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119289
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933525021\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah sorry for giving conflicting advice! I think it would be best to exercise as interesting type hierarchies as we can (including weirdly deep ones) so I think it'd be better to skip the <code>*.wast</code>-based limits. That being said if you'd prefer to get something working first I'm definitely ok having a follow-up issue for this.</p>\n</blockquote>",
        "id": 291363435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119289
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933525046\">PR review comment</a>:</p>\n<blockquote>\n<p>Ugh, <a href=\"https://github.com/bytecodealliance/wasmtime/commit/8fceba5be1f00c72582b5deaf6b490e421dfc887\">https://github.com/bytecodealliance/wasmtime/commit/8fceba5be1f00c72582b5deaf6b490e421dfc887</a> didn't really address the issue anyway, so I'll try your approach.</p>\n</blockquote>",
        "id": 291363439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119291
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1055930439\">PR review</a>.</p>",
        "id": 291363440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659119291
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1056002179\">PR review</a>.</p>",
        "id": 291372534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659124247
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933575263\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure how to do that, given that we can't create an instance of <code>Val</code> without first getting the <code>Type</code>s from a <code>Func</code> from an <code>Instance</code>, and the fuzzer has no way to do that.</p>\n</blockquote>",
        "id": 291372535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659124247
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933577153\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess I do know a way -- I used to have a <code>Value</code> enum in <code>generator::component_types</code> which could be constructed independently and then later converted to a <code>Val</code> when the <code>Type</code> was available.  I had removed that because it was redundant in the current approach, but I could restore it.</p>\n</blockquote>",
        "id": 291372879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659124458
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1056004928\">PR review</a>.</p>",
        "id": 291372880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659124458
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1056013564\">PR review</a>.</p>",
        "id": 291374020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659125086
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933583182\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton How strongly do you feel about this?  I think it would require adding a substantial amount of code.</p>\n</blockquote>",
        "id": 291374021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659125086
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291383772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659130637
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291390046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659134654
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1056124065\">PR review</a>.</p>",
        "id": 291390097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659134695
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r933664476\">PR review comment</a>:</p>\n<blockquote>\n<p>This wasn't too painful to address.  See my latest commit.</p>\n</blockquote>",
        "id": 291390098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659134695
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291593259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659368730
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934666804\">PR review comment</a>:</p>\n<blockquote>\n<p>Given recent spec clarifications it's ok for thi sto have 0 flags, so I think it's ok to remove the \"non empty\" part here</p>\n</blockquote>",
        "id": 291594786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934667304\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we'll want to allow this to have zero fields as well as <code>Flags</code> below to exercise the zero-size case.</p>\n</blockquote>",
        "id": 291594787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057494072\">PR review</a>.</p>",
        "id": 291594788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934667600\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to the cases below I think that we'll want to remove this to allow testing zero-sized tuples as well.</p>\n</blockquote>",
        "id": 291594789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934683754\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah sorry I forgot to review this in the initial first pass. We won't want to have this implementation though because the <code>IntoComponentFunc</code> impl is only intended for host functions where the component-type of the function can be statically inferred. As you have probably surmised with the lock/etc in typechecking for these functions the \"dynamic\" interface here doesn't really match the interface for static functions.</p>\n<p>Instead what we'll want to do is something along the lines of the difference between <code>wasmtime::Func::{wrap,new}</code> where here you're defining the <code>new</code> equivalent. That will grow a new function <code>component::Linker::func_new</code> which will take the type of the function as its argument as well as a closure. The return values of the closure are then type-checked against the original type at runtime before yielding the result back to the original component.</p>\n<p>This may be worth splitting to its own PR if you'd prefer. I'm also happy to review it here as well though.</p>\n</blockquote>",
        "id": 291594790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934661087\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be updated to match the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md#size\">canonical definition</a> which aligns-up the summation of the discriminant and the max variant size rather than aligning-up each individual summation? I think it probably ends up being the same thing but figure it may be best to align (heh) with the spec where we can.</p>\n</blockquote>",
        "id": 291594791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934664298\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar comment as to above about aligning the result of the summation instead of each individual component to match the spec (although again I don't think it affects the results)</p>\n</blockquote>",
        "id": 291594792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934668582\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing I did for the <code>fact-valid-module</code> fuzzer was to just <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8d0224341c3336330b548c9c9e845da42a883080/crates/environ/fuzz/fuzz_targets/fact-valid-module.rs#L59\">specify this as a <code>usize</code></a> as well.</p>\n</blockquote>",
        "id": 291594793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934672362\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the seed be printed here to assist debugging in case the build script later returns an error?</p>\n</blockquote>",
        "id": 291594795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934676568\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh right sorry yes I forgot that we need the component on-hand to generate the values. Yeah in that case the refactor isn't worth it and the current structure is good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 291594796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369357
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057494072\">PR review</a>.</p>",
        "id": 291594797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369358
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291595317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659369535
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934697455\">PR review comment</a>:</p>\n<blockquote>\n<p>I was thinking a zero-sized tuple was just a <code>unit</code> and thus redundant.  Should we also allow zero-sized records, variants, unions, etc.?  I.e. should I remove the <code>NonEmptyArray</code> type entirely?</p>\n</blockquote>",
        "id": 291597418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659370274
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057545710\">PR review</a>.</p>",
        "id": 291597419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659370274
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057551277\">PR review</a>.</p>",
        "id": 291598038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659370514
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934701144\">PR review comment</a>:</p>\n<blockquote>\n<p>We should allow  zero-size records, yeah, but variants/unions/enums all require at least one case so the <code>NonEmptyArray</code> there is correct. You're right that in Rust an empty tuple will translate to a <code>()</code>, but for fuzzing here I think it's best to exercise as many cases as possible.</p>\n</blockquote>",
        "id": 291598039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659370515
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291610617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659376385
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934789723\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind sketching out an example of how your proposed API would be used?  I'm specifically interested in where the user would get the type of the function to pass to <code>component::Linker::func_new</code>.  Would they query the <code>Component</code> for the things it imports, find the function of interest, and get the type from that?</p>\n</blockquote>",
        "id": 291612717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377472
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057676870\">PR review</a>.</p>",
        "id": 291612719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377472
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057679433\">PR review</a>.</p>",
        "id": 291613007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377623
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934791520\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that is indeed a good question. In core wasm users would do <code>FuncType::new(...)</code> and create their own function type. In the fullness of time I'd expect the same operation to be available to components where function types could be manufactured in addition to being learned from components. That's a big missing piece of the embedding API for components right now though so, yeah, getting it from a component seems the most reasonable for now.</p>\n</blockquote>",
        "id": 291613008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377623
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291647802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659397520
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r934998157\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton I've just pushed an update per your suggested API.  Let me know what you think.</p>\n</blockquote>",
        "id": 291647910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659397609
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1057966694\">PR review</a>.</p>",
        "id": 291647911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659397609
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058788910\">PR review</a>.</p>",
        "id": 291710994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935609075\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I think that this needs to change in the future to taking the function type as the argument. That being said this works well enough for now and it's ok to extend this later, so I think this should stay as-is.</p>\n<p>Otherwise though eventually this will require filling out more of the <code>component::types</code> submodule in the same manner as <code>wasmtime::types</code> which is able to describe imports/exports/etc. I think the implementation will be roughly the same as what you have already with <code>Arc&lt;Types&gt;</code> and <code>FooIndex</code> paired together, but again it's ok to defer this to later.</p>\n</blockquote>",
        "id": 291710995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935611615\">PR review comment</a>:</p>\n<blockquote>\n<p>Eventually I think this will need to be filled out when the function type is an argument to <code>func_new</code>. Additionally for now I think it would be good to go ahead and fill out to have an \"extra layer\" of defense against bugs.</p>\n<p>For now I think the <code>new_dynamic</code> here could take a <code>TypeFuncIndex</code> and the implementation could basically test that the two function indices are the same (since everything comes from within the same component right now)</p>\n</blockquote>",
        "id": 291710996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935606272\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that <code>func_new</code> is somewhat rare and already fairly verbose I think it's ok to skip the variant-without-<code>StoreContextMut</code> and go straight to requiring the argument during <code>func_new</code></p>\n</blockquote>",
        "id": 291710997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058788910\">PR review</a>.</p>",
        "id": 291710998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935615130\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar to <code>TypedFunc::call</code> vs <code>Func::call</code>, is it possible to share this code with the existing entrypoint above? Given how different the parameters are represented it may be too onerous though.</p>\n</blockquote>",
        "id": 291710999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935618522\">PR review comment</a>:</p>\n<blockquote>\n<p>Above the 2x2 matrix of \"params direct/indirect\" x \"results direct/indirect\" is expressed with 4 different cases but the main reason for that is to get all the fiddly bits around the types to work out. Otherwise here though this may be more amenable to a straightforward \"load the params, do the call, store the result\" without having to specify 4 different cases (which leads to a fair bit of duplication between everything)</p>\n</blockquote>",
        "id": 291711000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935612119\">PR review comment</a>:</p>\n<blockquote>\n<p>Are these new <code>'static</code> bounds still required?</p>\n</blockquote>",
        "id": 291711001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935607454\">PR review comment</a>:</p>\n<blockquote>\n<p>This looks like it's basically copying the results of <code>ty</code>, but could <code>ty</code> be used as-is? The pairing of <code>index: TypeFuncIndex</code> and <code>&amp;Arc&lt;Types&gt;</code> I think should be enough to type-check everything</p>\n</blockquote>",
        "id": 291711002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935616082\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this specify both the rhs and the lhs of the transmute? (stylistically I prefer to do that given how dangerous <code>transmute</code> is in general)</p>\n</blockquote>",
        "id": 291711003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659448137
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935642227\">PR review comment</a>:</p>\n<blockquote>\n<p>We need to represent them as <code>component::Type</code>s in <code>call_host_dynamic</code> in order to use <code>Type::flatten_count</code>, <code>Type::next_field</code>, <code>Val::lift</code>, <code>Val::store</code>, etc.   I figured since we'd eventually convert them to <code>component::Type</code>s anyway, might as well do it once here rather than every time <code>call_host_dynamic</code> is invoked.</p>\n</blockquote>",
        "id": 291714213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659449235
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058840357\">PR review</a>.</p>",
        "id": 291714214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659449235
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058862392\">PR review</a>.</p>",
        "id": 291715830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450012
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935657860\">PR review comment</a>:</p>\n<blockquote>\n<p>That was my first thought, but I couldn't see an elegant way to do it.  With <code>Func::call</code> I was able to reuse <code>call_raw</code> by using <code>[ValRaw: MAX_FLAT_PARAMS]</code> as the <code>LowerParams</code> generic parameter.  I can't use that trick with <code>call_host</code>, though, since the space for the parameters has already been allocated by the caller.</p>\n<p>There probably is a way to refactor <code>call_host</code> to work in both contexts, but I expect it would be pretty ugly.</p>\n</blockquote>",
        "id": 291715831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450012
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058870795\">PR review</a>.</p>",
        "id": 291716490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450299
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935663778\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok that seems reasonable, this can be iterated on later if necessary.</p>\n</blockquote>",
        "id": 291716491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450299
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058871877\">PR review</a>.</p>",
        "id": 291716590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450336
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935664520\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok no worries, but in that case can you duplicate some of the more interesting test cases for imports for <code>func_new</code>-defined imports as well?</p>\n</blockquote>",
        "id": 291716591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659450336
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#discussion_r935688403\">PR review comment</a>:</p>\n<blockquote>\n<p>It will be required now that we're making <code>HostFunc::typecheck</code> more than a no-op for the dynamic case, since I'll need to convert the type of that field back to a <code>Box&lt;dyn Fn...&gt;</code> so it can store a closure which captures the <code>TypeFuncIndex</code>.</p>\n</blockquote>",
        "id": 291719310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659451529
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1058906520\">PR review</a>.</p>",
        "id": 291719314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659451530
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291736380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659458970
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537#pullrequestreview-1060422758\">PR review</a>.</p>",
        "id": 291858561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659537320
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a> from <code>component-fuzz-generator</code> to <code>main</code>.</p>",
        "id": 291861821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659538639
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">PR #4537</a>.</p>",
        "id": 292036642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659632576
    }
]