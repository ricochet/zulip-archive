[
    {
        "content": "<p><a href=\"https://github.com/aykevl\">aykevl</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">Issue #7833</a>.</p>",
        "id": 418421576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706365666
    },
    {
        "content": "<p>aykevl opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p><code>wasmtime</code> has a different output depending on whether it is run normally or through a pipe (for example, <code>tail</code>).</p>\n<h3>Test Case</h3>\n<p>See the wasm.test file here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14072592/wasm-test.zip\">wasm-test.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Normal case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Output is redirected to a pipe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n</code></pre></div>\n<p>For comparison, I tested the same thing in <code>wasmer</code> and it has the correct (first) output in both cases.</p>\n<h3>Expected Results</h3>\n<p>Output should be the same, regardless of where stdout is redirected.</p>\n<h3>Actual Results</h3>\n<p>The last line is somehow lost when stdout is redirected to a pipe (in this case, passing it to <code>tail</code> but I've also seen this issue when running from inside Go os/exec).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 17.0.0</p>\n<p>Operating system: Linux (Fedora Asahi)</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>This is a relatively big test case, I can try to make it smaller if needed.</p>\n</blockquote>",
        "id": 418421577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706365667
    },
    {
        "content": "<p>aykevl edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p><code>wasmtime</code> has a different output depending on whether it is run normally or through a pipe (for example, <code>tail</code>).</p>\n<h3>Test Case</h3>\n<p>See the wasm.test file here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14072592/wasm-test.zip\">wasm-test.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Normal case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Output is redirected to a pipe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n</code></pre></div>\n<p>For comparison, I tested the same thing in <code>wasmer</code> and it has the correct (first) output in both cases.</p>\n<h3>Expected Results</h3>\n<p>Output should be the same, regardless of where stdout is redirected.</p>\n<h3>Actual Results</h3>\n<p>The last line is somehow lost when stdout is redirected to a pipe (in this case, passing it to <code>tail</code> but I've also seen this issue when running from inside Go os/exec).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 17.0.0</p>\n<p>Operating system: Linux (Fedora Asahi)</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>This is a relatively big test case, I can try to make it smaller if needed.<br>\nFor example, I've found it reproducible using <code>fwrite(\"test\\n\", 5, 1, stdout);</code>.</p>\n</blockquote>",
        "id": 418425234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706368883
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1913337815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p>Thanks for the report! I can reproduce this behavior as well with the uploaded wasm. That being said though I'm not certian that this is a bug in Wasmtime. Through <code>WASMTIME_LOG=trace</code> in the non-piped case (tty stdout) the module is calling <code>fd_write</code> more times than in the piped case. In other words, in the piped case, the module itself isn't even requesting a print. The main difference here is that the module calls <code>fd_fdstat_get</code> and the tty version returns <code>fs_filetype: CharacterDevice</code> while the piped version returns <code>fs_filetype: Unknown</code> meaning that the module may use this to act differently.</p>\n<p>Would you be able to share the source code of this module? The bug may be in TinyGo's standard library, but it might also be in wasi-libc. This may also be a bug that's since been fixed in wasi-libc and may require a newer build than you might be using. Hard to tell! If you're able to share the original source we can try to help dig in further.</p>\n<p>Furthermore you mention <code>fwrite(\"test\\n\", 5, 1, stdout);</code> reproduces this behavior for you. Locally however I do not see a reproduction with a simple program doing that. This may indicate that this was a bug in wasi-libc that's since been fixed. Could you share the full source of the program (perhaps the module too) with <code>fwrite</code> and the version of wasi-sdk that you're using?</p>\n</blockquote>",
        "id": 418446923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706390132
    },
    {
        "content": "<p>aykevl closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p><code>wasmtime</code> has a different output depending on whether it is run normally or through a pipe (for example, <code>tail</code>).</p>\n<h3>Test Case</h3>\n<p>See the wasm.test file here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14072592/wasm-test.zip\">wasm-test.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Normal case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Output is redirected to a pipe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n</code></pre></div>\n<p>For comparison, I tested the same thing in <code>wasmer</code> and it has the correct (first) output in both cases.</p>\n<h3>Expected Results</h3>\n<p>Output should be the same, regardless of where stdout is redirected.</p>\n<h3>Actual Results</h3>\n<p>The last line is somehow lost when stdout is redirected to a pipe (in this case, passing it to <code>tail</code> but I've also seen this issue when running from inside Go os/exec).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 17.0.0</p>\n<p>Operating system: Linux (Fedora Asahi)</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>This is a relatively big test case, I can try to make it smaller if needed.<br>\nFor example, I've found it reproducible using <code>fwrite(\"test\\n\", 5, 1, stdout);</code>.</p>\n</blockquote>",
        "id": 421720134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708023351
    },
    {
        "content": "<p>aykevl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1946964652\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<blockquote>\n<p>That being said though I'm not certian that this is a bug in Wasmtime.</p>\n</blockquote>\n<p>Yeah, since reporting this bug I started to realize it's more likely to be a bug in wasm-libc.</p>\n<blockquote>\n<p>The main difference here is that the module calls <code>fd_fdstat_get</code> and the tty version returns <code>fs_filetype: CharacterDevice</code> while the piped version returns <code>fs_filetype: Unknown</code> meaning that the module may use this to act differently.</p>\n</blockquote>\n<p>Thanks! I wasn't aware that WASI allowed inspecting the output file type.</p>\n<blockquote>\n<p>Would you be able to share the source code of this module?</p>\n</blockquote>\n<p>It's essentially just testdata/cgo in <a href=\"https://github.com/tinygo-org/tinygo/pull/4101/files\">https://github.com/tinygo-org/tinygo/pull/4101/files</a> but without the <code>fflush</code> workaround.<br>\nUnfortunately, when I tried to reproduce it today I couldn't get it to fail. I don't remember updating anything (like wasmtime) so not sure why this is the case. Closing, I'll reopen the issue once I manage to reproduce it again.</p>\n</blockquote>",
        "id": 421720136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708023351
    },
    {
        "content": "<p>aykevl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1946992564\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p>Nevermind, that was a silly mistake on my side.</p>\n<p>I can reproduce it using the following steps (this assumes you already have a working TinyGo build):</p>\n<ol>\n<li>Check out the cgo-printf branch of TinyGo.</li>\n<li>run <code>go install</code>, <code>tinygo clean</code></li>\n<li>Comment out the <code>fflush</code> call at the bottom of testdata/cgo/main.c. (You can also uncomment most of the main function in testdata/cgo/main.go if you'd like).</li>\n<li>Build a binary using <code>tinygo build -o test.wasm -target=wasi ./testdata/cgo</code></li>\n<li>Run it using <code>wasmtime run test.wasm | tail</code>.</li>\n</ol>\n<p>That's rather involved just to reproduce this issue, I can try to make a reproducer that doesn't use TinyGo.</p>\n</blockquote>",
        "id": 421721583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708023865
    },
    {
        "content": "<p>aykevl reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p><code>wasmtime</code> has a different output depending on whether it is run normally or through a pipe (for example, <code>tail</code>).</p>\n<h3>Test Case</h3>\n<p>See the wasm.test file here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14072592/wasm-test.zip\">wasm-test.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Normal case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Output is redirected to a pipe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n</code></pre></div>\n<p>For comparison, I tested the same thing in <code>wasmer</code> and it has the correct (first) output in both cases.</p>\n<h3>Expected Results</h3>\n<p>Output should be the same, regardless of where stdout is redirected.</p>\n<h3>Actual Results</h3>\n<p>The last line is somehow lost when stdout is redirected to a pipe (in this case, passing it to <code>tail</code> but I've also seen this issue when running from inside Go os/exec).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 17.0.0</p>\n<p>Operating system: Linux (Fedora Asahi)</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>This is a relatively big test case, I can try to make it smaller if needed.<br>\nFor example, I've found it reproducible using <code>fwrite(\"test\\n\", 5, 1, stdout);</code>.</p>\n</blockquote>",
        "id": 421721584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708023867
    },
    {
        "content": "<p>aykevl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1946999121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<blockquote>\n<p>This may also be a bug that's since been fixed in wasi-libc and may require a newer build than you might be using.</p>\n</blockquote>\n<p>Tried again with the main branch of wasi-libc, same issue. So whatever it is, it doesn't look like it's fixed there.</p>\n</blockquote>",
        "id": 421721940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708023991
    },
    {
        "content": "<p>aykevl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1947038104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p>Update: I can't seem to reproduce this with a simple 'hello world', this needs a bit more investigation.</p>\n</blockquote>",
        "id": 421723960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708024721
    },
    {
        "content": "<p>aykevl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1947038104\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p>Update: I can't seem to reproduce this with a simple 'hello world' in C, this needs a bit more investigation.</p>\n</blockquote>",
        "id": 421723975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708024727
    },
    {
        "content": "<p>aykevl closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p><code>wasmtime</code> has a different output depending on whether it is run normally or through a pipe (for example, <code>tail</code>).</p>\n<h3>Test Case</h3>\n<p>See the wasm.test file here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14072592/wasm-test.zip\">wasm-test.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Normal case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>Output is redirected to a pipe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tail</span>\n<span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">puts</span>\n</code></pre></div>\n<p>For comparison, I tested the same thing in <code>wasmer</code> and it has the correct (first) output in both cases.</p>\n<h3>Expected Results</h3>\n<p>Output should be the same, regardless of where stdout is redirected.</p>\n<h3>Actual Results</h3>\n<p>The last line is somehow lost when stdout is redirected to a pipe (in this case, passing it to <code>tail</code> but I've also seen this issue when running from inside Go os/exec).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: wasmtime-cli 17.0.0</p>\n<p>Operating system: Linux (Fedora Asahi)</p>\n<p>Architecture: aarch64</p>\n<h3>Extra Info</h3>\n<p>This is a relatively big test case, I can try to make it smaller if needed.<br>\nFor example, I've found it reproducible using <code>fwrite(\"test\\n\", 5, 1, stdout);</code>.</p>\n</blockquote>",
        "id": 421725534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708025347
    },
    {
        "content": "<p>aykevl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833#issuecomment-1947075868\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7833\">issue #7833</a>:</p>\n<blockquote>\n<p>Ok, figured it out. I need to call <code>__wasm_call_dtors</code> before exiting. Apparently it flushes the stdout buffer.</p>\n<p>See:<br>\n<a href=\"https://github.com/WebAssembly/wasi-libc/blob/main/libc-bottom-half/crt/crt1-command.c#L46\">https://github.com/WebAssembly/wasi-libc/blob/main/libc-bottom-half/crt/crt1-command.c#L46</a></p>\n</blockquote>",
        "id": 421725535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708025348
    }
]