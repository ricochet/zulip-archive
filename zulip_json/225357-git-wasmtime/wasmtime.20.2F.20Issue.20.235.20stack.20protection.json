[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5#issuecomment-772786826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5\">Issue #5</a>:</p>\n<blockquote>\n<p>triage: I am not sure if this should be closed or not. Stack probes are implemented but using a separate stack for wasm isn't.</p>\n</blockquote>",
        "id": 225073707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612382789
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5#issuecomment-772792392\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5\">Issue #5</a>:</p>\n<blockquote>\n<p>Providing an option for stack-switching under wasmtime would be worthwhile; I'm pretty sure @alexcrichton is already thinking about this in the context of async work?</p>\n</blockquote>",
        "id": 225074793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612383285
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5#issuecomment-772822055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5\">Issue #5</a>:</p>\n<blockquote>\n<p>Since this was written Wasmtime and cranelift have been updated with multiple strategies for limiting stack usage. Cranelift retains support for Rust-style <code>__probestack</code> stack probing but Wasmtime has moved to Cranelift's support for stack quotas. In this mode wasm code can be assigned to consume at most a fixed amount of stack space on the wasm stack. This isn't stack switching, but <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5#issuecomment-391150935\">https://github.com/bytecodealliance/wasmtime/issues/5#issuecomment-391150935</a> seems to indicate that stack switching wasn't what was desired in the end (this is a 3-year-old issue after all).</p>\n<p>On the topic of stack switching the upcoming support for async in Wasmtime does indeed implement this. The purpose for that, though, is suspendable stacks rather than any sort of stack allocation and/or protection. That's all entirely separate from Cranelift, though.</p>\n<p>I'm going to go ahead and close this though since I think the spirit of the issue (limiting wasm stack without running the risk of clobbering the native stack too much) is done. If cranelift-supported stack switching is still desired then I think it's probably best if a fresh issue is opened with more specifics targeted at today's state-of-being.</p>\n</blockquote>",
        "id": 225081594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612386289
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5\">Issue #5</a>:</p>\n<blockquote>\n<p>If SIP really does isolate, then perhaps wasm code shouldn't be able to smash the native stack.<br>\nCurrently Cretonne expects wasm and native code to share the stack so for example wasm code can call an imported native function.</p>\n<p>What I'd like:</p>\n<ul>\n<li>SIP wasm environment/code runs using its own stack (sized to fit, mmap guarded).</li>\n<li>ability to switch stacks when making wasm -&gt; native calls, and native-&gt;wasm calls.</li>\n</ul>\n<p>If imported fn return types are i32, then perhaps this could be marshalled using a register, and a few assembler instructions could take care of the return value and prologue/epilogue modifying the stack pointer.</p>\n<p>Is this a crazy idea?</p>\n<p>Thanks!<br>\n</p>\n</blockquote>",
        "id": 225081597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612386289
    }
]