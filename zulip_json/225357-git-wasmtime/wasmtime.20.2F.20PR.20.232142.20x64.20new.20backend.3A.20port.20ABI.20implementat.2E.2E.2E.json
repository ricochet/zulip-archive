[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207352682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597791696
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a>.</p>",
        "id": 207352684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597791696
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207354513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597793036
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-470171223\">PR Review</a>.</p>",
        "id": 207375542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597820066
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-470171223\">PR Review</a>.</p>",
        "id": 207375543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597820066
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r472775106\">PR Review Comment</a>:</p>\n<blockquote>\n<p>*for the</p>\n</blockquote>",
        "id": 207375544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597820066
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207476886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882696
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471046788\">PR Review</a>.</p>",
        "id": 207476894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882708
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r473465817\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 207476895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597882708
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207478827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597884840
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471665630\">PR Review</a>.</p>",
        "id": 207532743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471665630\">PR Review</a>.</p>",
        "id": 207532744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474027602\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wasn't there when the trait was designed, but: would it make sense to pass a context, or the consumer of these insts directly here? (I remember some cases where it wasn't possible to do so, because it was used in both the lowering and code emission contexts, so maybe that's irrelevant.)<br>\nThis would avoid the smallvec allocation entirely here.</p>\n</blockquote>",
        "id": 207532745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474021878\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit (here and below many times): can you use <code>pub(crate)</code> instead?</p>\n</blockquote>",
        "id": 207532746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474029741\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Please expand GV here.</p>\n</blockquote>",
        "id": 207532747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474031029\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Same question above wrt i32 vs i64.</p>\n</blockquote>",
        "id": 207532748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474028794\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is it possible that the imm is actually large enough to trigger this? If so, would it make sense to materialize the immediate into a temp register, and use a reg/reg add below? If the imm can't be this large, could the trait function accept an <code>u32</code> instead of an <code>u64</code>?</p>\n</blockquote>",
        "id": 207532749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474032387\">PR Review Comment</a>:</p>\n<blockquote>\n<p>same question for i32 vs i64 in signature</p>\n</blockquote>",
        "id": 207532750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474030672\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just reading this doesn't help understanding why it's fine to do so, which makes me think the trait functions should be redesigned so the temp reg is also returned from <code>gen_add_imm</code>, or something like this.</p>\n</blockquote>",
        "id": 207532751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474032503\">PR Review Comment</a>:</p>\n<blockquote>\n<p>same remark about smallvec</p>\n</blockquote>",
        "id": 207532752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474036576\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: this comment can be removed, i think</p>\n</blockquote>",
        "id": 207532753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474038994\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is a bit feeble to use a bool in this case, could it be its own enum, to enhance readability?</p>\n</blockquote>",
        "id": 207532754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935968
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474047509\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 207532756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935969
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474052152\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: could you use <code>expect</code> instead of <code>unwrap</code>, here and below? it likely adds cases where we have a very big offset, and it just wouldn't be implemented here.</p>\n</blockquote>",
        "id": 207532757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935969
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474040280\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Something I've meaning to change here, just to avoid dummy memory reallocations: can you use a <code>vec!</code> declaration here, instead of multiple pushes? This method could even return a plain <code>&amp;[]</code>, since in both cases (baldrdash/not baldrdash), these arrays are statically known.</p>\n</blockquote>",
        "id": 207532758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935969
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474051066\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We can use an unstable sort here, not that it matters...</p>\n</blockquote>",
        "id": 207532759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935969
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474039471\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe we could rename this method <code>get_spillslot_byte_size</code>, then?</p>\n</blockquote>",
        "id": 207532760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935969
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474049135\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't know if this has an importance in terms of speed of gen'd code, but Spidermonkey does do a single sp+imm operation here, then use stores to sp+offset for each saved register. It would also avoid the weird <code>push 0</code> to keep the stack 16-bytes aligned.</p>\n</blockquote>",
        "id": 207532762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597935971
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471973000\">PR Review</a>.</p>",
        "id": 207572437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597956360
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474262466\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I thought about this, but (as you suspected) this is called in contexts where we have no <code>LowerCtx</code> or other direct consumer of callbacks. We could statically monomorphize on a closure argument that receives instructions, but that seems unnecessarily complex and would duplicate code in the binary; I made sure to size the <code>SmallVec</code>s so they should fit x64 and aarch64 cases in their inline storage, so the cost is (just) copying a few <code>Inst</code>s instead. Happy to go the other way though if you'd prefer!</p>\n</blockquote>",
        "id": 207572438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597956360
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471973205\">PR Review</a>.</p>",
        "id": 207572494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597956375
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474262625\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>u32</code> instead is much cleaner, thanks!</p>\n</blockquote>",
        "id": 207572495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597956376
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471981194\">PR Review</a>.</p>",
        "id": 207573782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957121
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474268961\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks for pointing this out; yeah, it is a bit convoluted. I've updated the documentation on the trait definition to clearly describe the requirements placed on the machine backend's implementation and register choices, and I've renamed <code>get_fixed_tmp_reg()</code> to <code>get_stacklimit_reg()</code> to make its purpose more explicit.</p>\n<p>I thought for a bit if there might be a better way to do this, but I haven't managed to find one, unless we push the whole \"compute this <code>GlobalValue</code> using only caller-saves\" logic into each machine backend. <code>gen_add_imm()</code> could return info about what it clobbers, but that still doesn't help the machine-independent implementation choose another register on its own. Really the machine-backend author has to choose fixed scratch registers and a corresponding add-with-large-immediate lowering (on RISCs at least) and just provide them to the machine-independent part.</p>\n<p>On x64, anyway, we can always have a full 32-bit immediate on an add, so the more tricky requirements are moot; all we need is some arbitrary caller-save register here. Hopefully simple enough but I'm open to other ideas :-)</p>\n</blockquote>",
        "id": 207573783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957121
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471985208\">PR Review</a>.</p>",
        "id": 207574446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957506
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474272100\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Changed all of these to <code>i32</code>.</p>\n</blockquote>",
        "id": 207574447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957506
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471987280\">PR Review</a>.</p>",
        "id": 207574762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957709
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474273652\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea!</p>\n</blockquote>",
        "id": 207574764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957709
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471988612\">PR Review</a>.</p>",
        "id": 207574967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957835
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474274672\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The interface back to the lowering code reasons in terms of number of spillslots, so I'd rather not convert to/from bytes internally; but I renamed this to <code>get_number_of_spillslots_for_value()</code>, which is hopefully more clear!</p>\n</blockquote>",
        "id": 207574968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597957835
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471991452\">PR Review</a>.</p>",
        "id": 207575512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958128
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474276998\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done! Returning a <code>'static</code> slice would require refactoring some other things to be const functions, I think, including in <a href=\"http://regalloc.rs\">regalloc.rs</a> (<code>Writable::from_reg</code>), or else adding lazy-inits, so I'm not sure if that's completely feasible at the moment, but perhaps we could think about this more...</p>\n</blockquote>",
        "id": 207575513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958128
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471992746\">PR Review</a>.</p>",
        "id": 207575701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958262
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474277999\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point! (I had initially thought we wanted a stable sort to ensure deterministic code output, but of course the registers will be unique, so it doesn't matter...)</p>\n</blockquote>",
        "id": 207575702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958262
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-471993382\">PR Review</a>.</p>",
        "id": 207575842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958334
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474278509\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 207575843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597958334
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-472008673\">PR Review</a>.</p>",
        "id": 207578271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597960028
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r474291024\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point! Done.</p>\n</blockquote>",
        "id": 207578273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597960028
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207579142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597960698
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207582491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597962908
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a>.</p>",
        "id": 207642759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598021262
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-483653116\">PR Review</a>.</p>",
        "id": 209312114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496306
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-483653116\">PR Review</a>.</p>",
        "id": 209312115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496306
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r484510207\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should we add \"not yet implemented\" to this error message? This may happen in real-world programs. Alternatively, should we report an <code>Err</code> <code>Result</code> here, with an impl limit exceeded error?</p>\n</blockquote>",
        "id": 209312116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496306
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r484513438\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we add an assertion that this is caller-save? (This depends on the calling convention, not sure if it's available from here.)</p>\n</blockquote>",
        "id": 209312117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496306
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r484511095\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sorry if this is not the right place/time for this suggestion, but: I am a bit confused when it comes to distinguish <code>Body</code> from <code>Call</code>, by just looking at the names. The comments really help, for that matter. Alternatively, what do you think of renaming <code>ABIBodyImpl</code> to <code>CalleeABIImpl</code>, and <code>ABICallImpl</code> to <code>CallerABIImpl</code>? (I just realize the consecutive <code>i</code> make it a bit hard to decipher, with any casing... so maybe not such a great idea.)</p>\n</blockquote>",
        "id": 209312118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496307
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r484511556\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(Another belated suggestion) <code>Impl</code> in a name (here, in <code>ABIMachineImpl</code>) makes me think that we have a concrete type, while it's actually a trait. Is there any other name that could avoid this confusion? <code>ABIMachineSpec</code> for instance?</p>\n</blockquote>",
        "id": 209312119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496307
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r484514932\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Real world programs could have large offsets (here and below) right? Should this message also contain \"not implemented yet\", or should the function return a <code>Result</code>, and here it'd be an <code>Err</code> with impl limit exceeded?</p>\n</blockquote>",
        "id": 209312120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599496307
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-484578584\">PR Review</a>.</p>",
        "id": 209459983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611230
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r485266859\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The stack offset here is limited by the stack-frame size, which we clamp to 128 MB in <code>compute_arg_locs()</code>, so I don't think we need to bubble up a <code>Result</code> (since it should not be reachable code for any input); but I've clarified the error message. Thanks!</p>\n</blockquote>",
        "id": 209459984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611231
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-484578675\">PR Review</a>.</p>",
        "id": 209460002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611249
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r485266939\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done; just asserting that it's a caller-save in systemv and baldrdash.</p>\n</blockquote>",
        "id": 209460003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611249
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-484578806\">PR Review</a>.</p>",
        "id": 209460024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611274
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r485267054\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Analogous to above, shouldn't happen due to stack-frame size limit; clarified messages.</p>\n</blockquote>",
        "id": 209460025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611274
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-484581106\">PR Review</a>.</p>",
        "id": 209460660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611789
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r485269212\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea!</p>\n</blockquote>",
        "id": 209460661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611789
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#pullrequestreview-484581349\">PR Review</a>.</p>",
        "id": 209460672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611801
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 209460689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611822
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142#discussion_r485269455\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, yes, I like the callee/caller distinction better than \"body\" / \"call\"; it's much more intuitive. I've gone ahead with these names (I think the <code>...ABIImpl</code> is fine IMHO.) Thanks!</p>\n</blockquote>",
        "id": 209460705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599611840
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a> from <code>machinst-abi-x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, in #2128, we factored out a common \"vanilla 64-bit ABI\"<br>\nimplementation from the AArch64 ABI code, with the idea that this should<br>\nbe largely compatible with x64. This PR alters the new x64 backend to<br>\nmake use of the shared infrastructure, removing the duplication that<br>\nexisted previously. The generated code is nearly (not exactly) the same;<br>\nthe only difference relates to how the clobber-save region is padded in<br>\nthe prologue.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 209461985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599613153
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2142\">PR #2142</a>.</p>",
        "id": 209463737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599615304
    }
]