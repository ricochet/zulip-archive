[
    {
        "content": "<p>badeend opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a> from <code>badeend:unstable-features</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>For extra context, see: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">https://github.com/bytecodealliance/wasmtime/pull/9276</a></p>\n<hr>\n<p>This PR adds the ability to enable/disable WIT APIs gated by <code>@unstable(feature = ...)</code> at link-time.</p>\n<p>Previously, unstable features could only be controlled at compile-time through the <code>features</code> option of <code>wasmtime::component::bindgen!</code>. That option has been removed. Bindings for unstable APIs are now generated unconditionally. Instead, the generated <code>add_to_linker***</code> functions take an additional <code>LinkOptions</code> parameter if the world/interface has any unstable features. The availability of unstable features is now controlled through that.</p>\n<p>The component bindgen generates a fresh <code>LinkOptions</code> type for each <code>interface</code> that needs it and a single <code>LinkOptions</code> type for the entire world, which is a union of all the interface's types. An example is included in the component-macro tests: <a href=\"https://github.com/badeend/wasmtime/blob/unstable-features/crates/component-macro/tests/codegen/unstable-features.wit\"><code>unstable-features.wit</code></a> produces:<br>\n<a href=\"https://github.com/badeend/wasmtime/compare/245dcab34c2fcae69e0f6c3f2daa15837ea6ff61..4fcfe6f866f36ed663f24199e1744bed3cf0bc2c#diff-ad635965474c257cbafce510463aaf52c1ac813f22168045ae22546d3b3ebfc6\">https://github.com/badeend/wasmtime/compare/245dcab34c2fcae69e0f6c3f2daa15837ea6ff61..4fcfe6f866f36ed663f24199e1744bed3cf0bc2c#diff-ad635965474c257cbafce510463aaf52c1ac813f22168045ae22546d3b3ebfc6</a></p>\n<hr>\n<p>A happy coincidence is that WASI-0.2.1 already includes a tiny but practical first use case: <code>exit-with-code</code>.<br>\nI've implemented that function and is gated behind the <code>-Scli-exit-with-code</code> CLI flag.</p>\n<p>@sunfishcode, if I interpret <a href=\"https://github.com/WebAssembly/wasi-cli/issues/11\">https://github.com/WebAssembly/wasi-cli/issues/11</a> correctly, you were OK with removing the Windows-specific restriction, right? See: <a href=\"https://github.com/badeend/wasmtime/commit/2f48c77867d0bd02c4c910510f491a71da22a0f0\">https://github.com/badeend/wasmtime/commit/2f48c77867d0bd02c4c910510f491a71da22a0f0</a></p>\n</blockquote>",
        "id": 475087442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728211252
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475087443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728211252
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475087444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728211252
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475087543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728211325
    },
    {
        "content": "<p>badeend edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>:</p>\n<blockquote>\n<p>For extra context, see: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">https://github.com/bytecodealliance/wasmtime/pull/9276</a></p>\n<hr>\n<p>This PR adds the ability to enable/disable WIT APIs gated by <code>@unstable(feature = ...)</code> at link-time.</p>\n<p>Previously, unstable features could only be controlled at compile-time through the <code>features</code> option of <code>wasmtime::component::bindgen!</code>. That option has been removed. Bindings for unstable APIs are now generated unconditionally. Instead, the generated <code>add_to_linker***</code> functions take an additional <code>LinkOptions</code> parameter if the world/interface has any unstable features. The availability of unstable features is now controlled through that.</p>\n<p>The component bindgen generates a fresh <code>LinkOptions</code> type for each <code>interface</code> that needs it and a single <code>LinkOptions</code> type for the entire world, which is a union of all the options contained in that world. An example is included in the component-macro tests: <a href=\"https://github.com/badeend/wasmtime/blob/unstable-features/crates/component-macro/tests/codegen/unstable-features.wit\"><code>unstable-features.wit</code></a> produces:<br>\n<a href=\"https://github.com/badeend/wasmtime/compare/245dcab34c2fcae69e0f6c3f2daa15837ea6ff61..4fcfe6f866f36ed663f24199e1744bed3cf0bc2c#diff-ad635965474c257cbafce510463aaf52c1ac813f22168045ae22546d3b3ebfc6\">https://github.com/badeend/wasmtime/compare/245dcab34c2fcae69e0f6c3f2daa15837ea6ff61..4fcfe6f866f36ed663f24199e1744bed3cf0bc2c#diff-ad635965474c257cbafce510463aaf52c1ac813f22168045ae22546d3b3ebfc6</a></p>\n<hr>\n<p>A happy coincidence is that WASI-0.2.1 already includes a tiny but practical first use case: <code>exit-with-code</code>.<br>\nI've implemented that function and is gated behind the <code>-Scli-exit-with-code</code> CLI flag.</p>\n<p>@sunfishcode, if I interpret <a href=\"https://github.com/WebAssembly/wasi-cli/issues/11\">https://github.com/WebAssembly/wasi-cli/issues/11</a> correctly, you were OK with removing the Windows-specific restriction, right? See: <a href=\"https://github.com/badeend/wasmtime/commit/2f48c77867d0bd02c4c910510f491a71da22a0f0\">https://github.com/badeend/wasmtime/commit/2f48c77867d0bd02c4c910510f491a71da22a0f0</a></p>\n</blockquote>",
        "id": 475088640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728212451
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#pullrequestreview-2352140779\">PR review</a>:</p>\n<blockquote>\n<p>This looks great to me, thanks for this! </p>\n<p>In retrospect though given the large number of changes related to <code>add_to_linker</code> what do you think about:</p>\n<ul>\n<li>Interface/world-level <code>add_to_linker</code> retains the <code>LinkOptions</code> parameter </li>\n<li>Top-level <code>add_to_linker</code> loses the <code>LinkOptions</code> parameter, and there's a new top-level <code>add_to_linker_with_options</code> function?</li>\n</ul>\n<p>Or perhaps this would only affect the helpers we have in <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code>? Basically it looks like there should be a convenience function for \"default options\" rather than requiring all callers to call it.</p>\n</blockquote>",
        "id": 475312311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728311753
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#discussion_r1790346885\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use a <code>BTreeSet</code> or <code>IndexSet</code> to ensure it always generates a deterministic order of options?</p>\n</blockquote>",
        "id": 475312312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728311753
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475357798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728323975
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#pullrequestreview-2352607778\">PR review</a>.</p>",
        "id": 475357840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728323987
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#discussion_r1790656724\">PR review comment</a>:</p>\n<blockquote>\n<p>Definitely</p>\n</blockquote>",
        "id": 475357841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728323987
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#issuecomment-2397571000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Interface/world-level add_to_linker retains the LinkOptions parameter</li>\n<li>Top-level add_to_linker loses the LinkOptions parameter, and there's a new top-level add_to_linker_with_options function?</li>\n</ul>\n</blockquote>\n<p>Don't know what top-level function you're referring to. I think the Interface/world-level add_to_linker functions are the only ones generated by the bindgen?</p>\n<p>I have just updated the wasmtime-wasi's functions back to their old signature and added an extra set of <code>_with_options</code> variants. I didn't touch the add_to_linker functions generated by bindgen.</p>\n</blockquote>",
        "id": 475359664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728324476
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#pullrequestreview-2352694962\">PR review</a>:</p>\n<blockquote>\n<p>Ah sorry for my rambling, this is exactly what I was thinking <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 475367393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728326920
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475374103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728328531
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#issuecomment-2397695216\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>:</p>\n<blockquote>\n<p>Try again please</p>\n</blockquote>",
        "id": 475374164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728328556
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475374445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728328632
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475387086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728332225
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381#issuecomment-2397813063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>:</p>\n<blockquote>\n<p>Sigh.</p>\n<p>Try again, again?</p>\n</blockquote>",
        "id": 475387408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728332317
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475387882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728332481
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">PR #9381</a>.</p>",
        "id": 475392063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728333812
    }
]