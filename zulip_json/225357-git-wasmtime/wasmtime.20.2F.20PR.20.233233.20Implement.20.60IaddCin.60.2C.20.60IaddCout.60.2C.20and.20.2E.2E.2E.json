[
    {
        "content": "<p>dheaton-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233\">PR #3233</a> from <code>implement-iaddc</code> to <code>main</code>:</p>\n<blockquote>\n<p>Implemented the following Opcodes for the Cranelift interpreter:</p>\n<ul>\n<li><code>IaddCin</code> to add two scalar integers with an input carry flag.</li>\n<li><code>IaddCout</code> to add two scalar integers and report overflow with the carry flag.</li>\n<li><code>IaddCarry</code> to add two scalar integers with an input carry flag, reporting overflow with the output carry flag.</li>\n</ul>\n<p>Copyright (c) 2021, Arm Limited</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 250470660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629804318
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738225459\">PR review</a>.</p>",
        "id": 250608851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629892297
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738225459\">PR review</a>.</p>",
        "id": 250608852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629892297
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695656460\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to also add tests for <code>i64</code>?</p>\n</blockquote>",
        "id": 250608853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629892297
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695667526\">PR review comment</a>:</p>\n<blockquote>\n<p>It looks like these instructions don't work at all in any of the backends. This is slightly concerning to me because I suspect that they may be legacy backend only instructions which will be deprecated soon. (is this the case @cfallin?).</p>\n<p>That being said, and assuming that they are a TODO item on the backends, I think we should move these tests to the <code>runtests</code> folder, even if they only run in the interpreter. Reason being, that eventually we will implement them, and these tests are a lot easier to find there. </p>\n<p>One of the things that I've been working towards is removing the <code>interpreter</code> folder and moving all test cases to the <code>runtests</code> folder. I think that the distinction isn't very meaningful. We already have some <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a662f5361de2edeaa1b0ba8fdcc16226eb827453/cranelift/filetests/filetests/runtests/stack-addr-32.clif\">tests</a> there that only work in the interpreter, but we never explicitly discussed this. Thoughts @cfallin, @abrown  ?</p>\n</blockquote>",
        "id": 250608854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629892298
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695668059\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            let carry = Value::lt(&amp;sum, &amp;arg(0)?)? &amp;&amp; Value::lt(&amp;sum, &amp;arg(1)?)?;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 250608855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629892298
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738568376\">PR review</a>.</p>",
        "id": 250643173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908571
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695914069\">PR review comment</a>:</p>\n<blockquote>\n<p>I dug into the history of these instructions: <code>iadd_carry</code>, <code>iadd_cin</code>,  and <code>iadd_cout</code> are not used by the Wasm-to-CLIF converter in <code>code_translator.rs</code> and do not appear in any of the ISA-specific lowering code in the new backend (e.g., <code>cranelift/codegen/src/isa/*</code>). They were added by @ryzokuken almost two years ago  in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1005\">https://github.com/bytecodealliance/cranelift/pull/1005</a> and, unless they or @bjorn3  are still using these instructions, I propose we remove them. (@afonso360, I'm fine with moving stuff into the <code>runtests</code> folder).</p>\n</blockquote>",
        "id": 250643174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908572
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738572980\">PR review</a>.</p>",
        "id": 250643755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908837
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695917610\">PR review comment</a>:</p>\n<blockquote>\n<p>The problem with this is that I hate to get rid of good code: thanks @dheaton-arm and @afonso360 for fleshing out the interpreter! We've talked before about cleaning up the CLIF opcode space and that probably should have happened before we jumped in on the interpreter, sorry; @cfallin can correct me if I'm wrong but I would think any CLIF opcode <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L3315-L3342\">here</a> or anything starting with <code>X86...</code> is a likely candidate for removal?</p>\n</blockquote>",
        "id": 250643756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908837
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738574647\">PR review</a>.</p>",
        "id": 250643951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908936
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695919017\">PR review comment</a>:</p>\n<blockquote>\n<p>I currently don't use them as backend support is bad, but if backend support is implemented I will want to use at least the <code>_cout</code> variants to detect overflows efficiently.</p>\n<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/9f5b52045c928157b12bec1d670e220fc7597375/src/num.rs#L198-L225\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/9f5b52045c928157b12bec1d670e220fc7597375/src/num.rs#L198-L225</a></p>\n<p>The <code>_carry</code> and I think <code>_cin</code> variants are necessary to efficiently implement certain llvm intrinsics used by stably exported simd intrinsics:</p>\n<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/9f5b52045c928157b12bec1d670e220fc7597375/src/intrinsics/llvm.rs#L145-L181\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/9f5b52045c928157b12bec1d670e220fc7597375/src/intrinsics/llvm.rs#L145-L181</a></p>\n</blockquote>",
        "id": 250643952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908936
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695919017\">PR review comment</a>.</p>",
        "id": 250644008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629908971
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738579131\">PR review</a>.</p>",
        "id": 250644463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629909208
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695922501\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>@cfallin can correct me if I'm wrong but I would think any CLIF opcode here or anything starting with X86... is a likely candidate for removal?</p>\n</blockquote>\n<p>The <code>_imm</code> opcodes are currently legalized to non-<code>_imm</code> variants. I use the <code>_imm</code> variants extensively in cg_clif as they are much more readable both in the cg_clif source and in textual clif ir form. The <code>if</code>/<code>ff</code> variants of instructions should be removed though IMO. Just like the <code>x86_</code> instructions.</p>\n</blockquote>",
        "id": 250644464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629909208
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695919017\">PR review comment</a>.</p>",
        "id": 250644490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629909227
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738587417\">PR review</a>.</p>",
        "id": 250645573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629909721
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695929195\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess the decision should be framed as an \"all or nothing:\" either we remove them from the interpreter and CLIF or we implement them in the interpreter AND the backends. E.g., the <code>_imm</code> variants are implemented in the interpreter and it wouldn't be too difficult to add support in the backends.</p>\n</blockquote>",
        "id": 250645574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629909721
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-738647319\">PR review</a>.</p>",
        "id": 250652636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629912751
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695970478\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we have 4 categories of opcodes here:</p>\n<ul>\n<li><code>op_imm</code>: These already work on the backends, and in the interpreter, and it looks like they are useful.</li>\n<li><code>op_cin</code>/<code>op_cout</code>/<code>op_carry</code>: These use a bool to signal a carry / borrow. They only work in the interpreter, but it sounds like there are uses for them if they worked in the backends.</li>\n<li><code>op_ifcin</code>/<code>op_ifcout</code>/<code>op_ifcarry</code>: These use the cpu flags type to achieve essentially what their non <code>if</code> version does.</li>\n<li><code>X86</code> prefixed: These are legacy, and we know they are going away in #3009.</li>\n</ul>\n<p>I agree with @bjorn3 about removing the <code>if</code> flag typed instructions. But that may be because I don't really understand the CPU flags type, or why we need it.</p>\n<blockquote>\n<p>the _imm variants are implemented in the interpreter and it wouldn't be too difficult to add support in the backends.</p>\n</blockquote>\n<p>I'm not sure we need to implement them in the backends separately, the current approach of transforming them into <code>op</code> + <code>const</code> probably saves some work. However, legalization was mentioned, and I think that is also going away in #3009 right?</p>\n</blockquote>",
        "id": 250652637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629912751
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695970478\">PR review comment</a>.</p>",
        "id": 250653414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629913075
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695970478\">PR review comment</a>.</p>",
        "id": 250657804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629914934
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r695970478\">PR review comment</a>.</p>",
        "id": 250658068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629915051
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696798818\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry for the delay in responding here -- first of all, yes, we do need to clean up the opcode space!</p>\n<p>The <code>X86...</code> opcodes are going away for sure -- that's uncontroversial I think. For the remainder, I think there are two fundamental questions here (to refine @afonso360 's excellent summary a bit):</p>\n<ul>\n<li>Do we have \"convenience ops\" like <code>iadd_imm</code> that are combinations of other instructions?</li>\n<li>How do we represent carry/borrow flags?</li>\n</ul>\n<p>On the first point, we've had discussions in the past about \"combo ops\" and settled on mostly not having them, unless we have some complex behavior that involves more than ~2 instructions and really should stay bundled for easier lowering. (E.g. expanding to 9 opcodes then pattern-matching that back to a known machine instruction sequence for the whole group is suboptimal.)</p>\n<p>We've sort of accepted the <code>_imm</code> variants for now but I do think they actually fall under the same reasoning and as such it would be better not to include them in the opcode space. That doesn't mean we can't have <em>builder methods</em> that remain with the same signature; these methods would just generate two opcodes (<code>iconst</code> and <code>iadd</code> for <code>iadd_imm</code>, for example). We don't have a mechanism for that in the meta-crate today but it seems like it wouldn't be <em>too</em> bad. The other counterargument that occurs to me is efficiency/density in the IR -- the separate instruction format packs the immediate into the same instruction. And there is readability as @bjorn3 mentions above. However pulling it out potentially has advantages too, e.g. for GVN. The major upside is that we don't have to implement <code>_imm</code> variants in every backend/interpreter/analysis that consumes CLIF, and that seems worth it to me. Thoughts?</p>\n<p>The other question is how to handle carries. With pattern-matching, we can handle either the carry-as-bool or carry-as-part-of-flags with about the same effort. I actually don't like the \"flags as a special value\" approach all that much -- it has unique constraints, in that only one flags value can be live at a time, and is sort of a relic from the encodings approach to lowering. So from first principles I'd prefer carry-as-bool. For the same reasons I'd also prefer <code>icmp</code> over <code>ifcmp</code>. But that's a nontrivial refactoring, and it doesn't have to happen right away. It looks like @bjorn3 and @afonso360 agree here.</p>\n<p>So back to the subject of this PR, I think that means (if others agree) that we should <em>keep</em> the cin/cout/carry variants here, as they seem to be the cleaner option and I'd want to move in that direction. Then at some point we can refactor the rest of the compiler to use them too. (Ideally after we have a DSL to describe instruction lowering, making such refactoring \"trivial\", but that's a separate push!) In the meantime, it's fine IMHO to have the ops working only in the interpreter as long as we have tests that describe their behavior.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 250801460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629995730
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-739703223\">PR review</a>.</p>",
        "id": 250801461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629995730
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-739724370\">PR review</a>.</p>",
        "id": 250804809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629997036
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696815491\">PR review comment</a>:</p>\n<blockquote>\n<p>My opinion: sounds like @bjorn3 can use these instructions so let's resolve any comments and merge this! Re: removing <code>_imm</code> variants, I agree with the approach @cfallin outlined to remove the opcodes--that one sounds like an implementable issue we could create. Re: flags-to-bool, I am not sure I understand all the effects of this, but it sounds reasonable and could be a separate issue as well.</p>\n</blockquote>",
        "id": 250804810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629997036
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-739734928\">PR review</a>.</p>",
        "id": 250806589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629997720
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696823411\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>sounds like @bjorn3 can use these instructions so let's resolve any comments and merge this!</p>\n</blockquote>\n<p>Agreed!</p>\n<hr>\n<p>I tend to agree about removing <code>_imm</code>.</p>\n<p>I also think that with a builder the <code>const</code> is probably always going to be above the <code>op</code> the readability lost is probably somewhat minimized. </p>\n<p>Some concerns are that <code>iadd_imm</code> has a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0771abf2103f9c5c07c7b7892b555c8ad1165a43/cranelift/codegen/src/ir/globalvalue.rs#L41\">special meaning</a> in global values, but that probably should be discussed in the <code>_imm</code> remove issue.</p>\n<blockquote>\n<p>Re: flags-to-bool, I am not sure I understand all the effects of this, but it sounds reasonable and could be a separate issue as well.</p>\n</blockquote>\n<p>Yeah, I prefer carry-as-bool as well, but I don't fully understand where else this change is going to impact</p>\n</blockquote>",
        "id": 250806591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629997720
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696823411\">PR review comment</a>.</p>",
        "id": 250807173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629997978
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-739748121\">PR review</a>.</p>",
        "id": 250808492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629998575
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696833364\">PR review comment</a>:</p>\n<blockquote>\n<p>OK cool, I created #3249 and #3250 to track these simplifications.</p>\n</blockquote>",
        "id": 250808493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629998575
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-739765208\">PR review</a>.</p>",
        "id": 250811233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629999685
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#discussion_r696846616\">PR review comment</a>:</p>\n<blockquote>\n<p>So, after all this, @dheaton-arm Could you please move the files to <code>runtests</code> and resolve the rest of the comments, and we'll merge this?</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 250811234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629999686
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233\">PR #3233</a> from <code>implement-iaddc</code> to <code>main</code>.</p>",
        "id": 251357437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630402927
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-742511555\">PR review</a>.</p>",
        "id": 251358010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630403240
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-742511555\">PR review</a>.</p>",
        "id": 251358028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630403249
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-742511555\">PR review</a>.</p>",
        "id": 251358719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630403603
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233\">PR #3233</a> from <code>implement-iaddc</code> to <code>main</code>.</p>",
        "id": 251362620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630405674
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233#pullrequestreview-742952278\">PR review</a>.</p>",
        "id": 251414562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630427356
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3233\">PR #3233</a>.</p>",
        "id": 251414627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630427379
    }
]