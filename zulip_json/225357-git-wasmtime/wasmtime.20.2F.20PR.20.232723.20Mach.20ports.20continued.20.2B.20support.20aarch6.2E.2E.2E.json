[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>:</p>\n<blockquote>\n<p>This is #2632 rebased and continued. Many thanks to @alexcrichton for providing a lot of help with the CFI directives in the custom assembly stub; this really helped simplify the design of frame unwinding.</p>\n<p>This is sufficient to make mach ports work on Mac M1, with the slight exception that the system's libunwind on this machine doesn't correctly interpret the CFI directives generated by the assembly stub. As a consequence, the stack trace information for wasm call frames is missing. Retrieving the source of another libunwind implementation, in Apple's LLVM fork or from the <a href=\"http://opensource.apple.com\">opensource.apple.com</a> website, building it and linking it against wasmtime is sufficient to get it working as expected. In addition to this, some experiments showed that the system libunwind's source code doesn't match what's on Apple's repository: this was inferred from looking at an abort error message's line number, and seeing it didn't match the line number for the same message in local sources. As a matter of fact, this is impossible to debug as is. Yet it seemed better to have something that worked, even incompletely. In the future, either we can wait for a new functioning version of OSX libunwind, or we could consider shipping our own, as a small C/C++ dependency.</p>\n<p>This is also blocked on <a href=\"https://github.com/fitzgen/mach/pull/64\">https://github.com/fitzgen/mach/pull/64</a> to be landed and released first.</p>\n<p>There's a bit more work to do to fully support Mac M1: I'm seeing WASI failures when trying to run the full test suite, to be handled in a second time.</p>\n</blockquote>",
        "id": 230060570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615567256
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230073466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615572425
    },
    {
        "content": "<p>bnjbvr closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a>.</p>",
        "id": 230322460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615804219
    },
    {
        "content": "<p>bnjbvr reopened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230322464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615804221
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230357813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615820153
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230364456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615822247
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230365226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615822517
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-612347386\">PR Review</a>.</p>",
        "id": 230373335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824673
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-612347386\">PR Review</a>.</p>",
        "id": 230373339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594451658\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this be moved to the bottom of the loop since we'll only possibly hit this case after a resumption from a suspend?</p>\n</blockquote>",
        "id": 230373340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594466362\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You know, thinking about it, we could probably store these values in volatile registers like x3/4, and the unwinding information could restore the information from those registers rather than from the stack possibly. That may avoid needing a stack allocation here at all.</p>\n<p>(or we could store them in callee-save registers which are more likely to be restored when unwinding in native code)</p>\n</blockquote>",
        "id": 230373341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594467768\">PR Review Comment</a>:</p>\n<blockquote>\n<p>eh I wouldn't really say that this function has a signature  because it's not natively callable, but this could perhaps describe the input register expectations.</p>\n</blockquote>",
        "id": 230373342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594464744\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does overwriting <code>fp</code> need to happen? I think that the unwinding from the assembly stub doesn't restore this overwritten value as well?</p>\n</blockquote>",
        "id": 230373343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594459428\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(that may also remove the need to call <code>lazy_per_thread_init</code> manually)</p>\n</blockquote>",
        "id": 230373344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594459166\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think with thread-switching support this map will need to be updated when async wasm crosses thread. I think in <code>TlsRestore::take</code> we'd remove something from this map and in <code>TlsRestore::restore</code> we'd re-insert back into the map.</p>\n</blockquote>",
        "id": 230373345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615824674
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-612473714\">PR Review</a>.</p>",
        "id": 230391879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831260
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594560246\">PR Review Comment</a>:</p>\n<blockquote>\n<p>\"strictly different from LR\" instead?</p>\n</blockquote>",
        "id": 230391880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831261
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-612473714\">PR Review</a>.</p>",
        "id": 230391881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831261
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594548672\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we link the SpiderMonkey source here (e.g. via Searchfox)?</p>\n</blockquote>",
        "id": 230391882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831261
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594563285\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I <em>think</em> it's necessary because there is no saved FP in the unwinding info for the stub (?) -- the 16-byte pushed frame is the pair (x3, LR). But then, why <code>SP + 16</code> rather than the actual prior <code>FP</code> value?</p>\n</blockquote>",
        "id": 230391883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831261
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r594562125\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The overall flow here was slightly unclear to me at first -- it might be good to add a figure summarizing how the stack is manipulated (here or where the frame is created in <a href=\"http://traphandlers.rs\">traphandlers.rs</a>, doesn't matter much).</p>\n</blockquote>",
        "id": 230391884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615831261
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595033268\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed! What I did was subtle: the <code>raw::replace</code> function was also registering the new CallThreadState for this thread, so it was done by the <code>raw::replace</code> calls in <code>TlsRestore::take</code> and <code>TlsRestore::restore</code>. The missing piece was to call the lazy per thread init in restore, as we might have crossed a thread boundary there. Commented to this effect. It's much simpler, thanks.</p>\n</blockquote>",
        "id": 230488442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615890005
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613068747\">PR Review</a>.</p>",
        "id": 230488443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615890005
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613110851\">PR Review</a>.</p>",
        "id": 230493275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615892714
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595066486\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea, done!</p>\n</blockquote>",
        "id": 230493276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615892714
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613247645\">PR Review</a>.</p>",
        "id": 230512171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901653
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595172502\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Alex is right, we were not restoring its value; it appears to work equally well without it, so I've removed it.</p>\n</blockquote>",
        "id": 230512172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901653
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613248945\">PR Review</a>.</p>",
        "id": 230512346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901720
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595173437\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've tried this, and it doesn't work; apparently libunwind reaaaally wants to restore the register value from the CFA. Tried both <code>cfa_register x3, x3</code> or <code>cfa_same_value x3</code> to indicate the value hadn't changed, but this wasn't apparently sufficient. Oh well.</p>\n<p>Any concern about doing it this way? I think it should be fine, even in case of stack overflow, because we should have some ballast before the actual stack overflow guard page, etc.</p>\n</blockquote>",
        "id": 230512347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901721
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613250887\">PR Review</a>.</p>",
        "id": 230512588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901819
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595174972\">PR Review Comment</a>:</p>\n<blockquote>\n<p>btw, it was only necessary to save pc, not LR: in the cranelift generated prologue of wasm functions, LR is saved, with an accompanying cfi directive, so there's no need to save it ourselves.</p>\n</blockquote>",
        "id": 230512590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615901819
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230514341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615902484
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613298078\">PR Review</a>.</p>",
        "id": 230518922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615904158
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595210184\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nah no concerns, just wondering if we could be super clever. Now's probably not the time to be clever though!</p>\n</blockquote>",
        "id": 230518923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615904158
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613303754\">PR Review</a>.</p>",
        "id": 230519653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615904424
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595214570\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This feels somewhat iffy to me that we rely on Cranelift to restore <code>lr</code> to unwind since this <code>blr</code> is otherwise overwriting the value of the wasm frame's <code>lr</code>. In the future if we optimize cranelift to not save <code>lr</code> to the stack for leaf functions, for example, we'd have to update this?</p>\n<p>I figured it was easy enough to push <code>lr</code> to the stack and have a CFI directive for how to restore it?</p>\n</blockquote>",
        "id": 230519654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615904424
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#pullrequestreview-613378615\">PR Review</a>.</p>",
        "id": 230530788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615907804
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723#discussion_r595270284\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As discussed on zulip, turns out we can even:</p>\n<ul>\n<li>set <code>lr</code> from the faulting pc</li>\n<li>jump to unwind directly</li>\n<li>burn the assembly stub with <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> </li>\n</ul>\n<p>I tried doing something like this a week or so ago, but it wasn't working (probably because of the intertwined return-address signing issue!). Good riddance!</p>\n</blockquote>",
        "id": 230530791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615907804
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230534282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615908926
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230661427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615973577
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a> from <code>mach-ports-continued</code> to <code>main</code>.</p>",
        "id": 230666377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615975996
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2723\">PR #2723</a>.</p>",
        "id": 230701361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615992203
    }
]