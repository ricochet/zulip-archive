[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:memory64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">Issue #8674</a>.</p>",
        "id": 439881608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716317627
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>The memory64 proposal was <a href=\"https://github.com/WebAssembly/memory64/issues/51\">recently updated</a> to include 64-bit tables in addition to 64-bit memories. Support for this extension has been <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1531\">implemented in wasm-tools</a> and the <code>main</code> branch of Wasmtime is now using this version of wasm-tools. Wasmtime, however, does not yet implement the table64 extension and this is intended to track that.</p>\n<p>Support for the table64 extension should be relatively simple in Wasmtime but it'll require a number of refactorings to switch indexing types and such. An (incomplete) list of implementation items to handle for this will be:</p>\n<ul>\n<li>Wasmtime's <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/types/src/lib.rs#L1448-L1450\">representation of table types</a> should be updated with 64-bit limits and a <code>table64</code> flag</li>\n<li>Methods taking indices in Wasmtime, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/wasmtime/src/runtime/vm/table.rs#L420\">such as this</a>, should switch to <code>u64</code> instead of <code>u32</code>.</li>\n<li>Libcalls involving tables, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/wasmtime/src/runtime/vm/libcalls.rs#L210\">like this</a>, should switch to <code>u64</code> values.</li>\n<li>Translation of invoking libcalls should switch to using 64-bit values instead of 32-bit values. 32-bit tables will zero-extend indices to 64-bit values.</li>\n<li>Embedder API methods, like <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Table.html#method.get\"><code>Table::get</code></a>, should switch to u64.</li>\n</ul>\n<p>More-or-less what I'm thinking is that a few key locations need to switch to <code>u64</code> and then whack-a-mole is played with rustc to figure out where else needs to be switched to a <code>u64</code>. One point of note I'll say is that in general it's best to avoid <code>as</code> casts in this refactoring. Casting with <code>as</code> loses information in top bits if casting to a smaller size and that can accidentally cover up cases that should be out of bounds or trap. Instead <code>u32::try_from</code> or <code>usize::try_from</code> should be used where possible with appropriate handling of the error (e.g. bubbling it up or unwrapping with a comment as to why the unwrap is ok)</p>\n</blockquote>",
        "id": 439881612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716317628
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2148696944\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>I'm up for a game of whack-a-mole if you could assign me.</p>\n</blockquote>",
        "id": 442670275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717551172
    },
    {
        "content": "<p>alexcrichton assigned ssnover to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>.</p>",
        "id": 442672721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717552195
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2174345518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>If you're interested @ssnover some \"getting started\" tests can be enabled by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/64126f76598365140d42602d5836cda8b50970e1/tests/wast.rs#L81-L100\">commenting out this block</a> now that the spec test suite has the table64 tests inside of it. Note though that those are not exhaustive tests so you'll likely want to write a test or two of your own as well.</p>\n</blockquote>",
        "id": 445216761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718655357
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2198588718\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton , sorry to go quiet on this issue after picking it up. I have a branch with most of the changes made, but I'm left with interactions around the <code>i31ref</code> type. Is there any equivalent being introduced by memory64 for an <code>i63ref</code> that is superseding or living alongside <code>i31ref</code>? </p>\n</blockquote>",
        "id": 448124226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719759287
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2200968834\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>There is not an <code>i63ref</code>, so no need to worry about it.</p>\n</blockquote>",
        "id": 448432389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719865854
    },
    {
        "content": "<p>lwshang <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2329688916\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>@ssnover Are you still working on it? If you’ve moved on to other things, I’d be happy to take it over and help move it forward.</p>\n<p>Actually, the project I’m working on is blocked due to the lack of table64 support in Wasmtime. So, I’ll start implementing it anyway.</p>\n</blockquote>",
        "id": 467624754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725473409
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>The memory64 proposal was <a href=\"https://github.com/WebAssembly/memory64/issues/51\">recently updated</a> to include 64-bit tables in addition to 64-bit memories. Support for this extension has been <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1531\">implemented in wasm-tools</a> and the <code>main</code> branch of Wasmtime is now using this version of wasm-tools. Wasmtime, however, does not yet implement the table64 extension and this is intended to track that.</p>\n<p>Support for the table64 extension should be relatively simple in Wasmtime but it'll require a number of refactorings to switch indexing types and such. An (incomplete) list of implementation items to handle for this will be:</p>\n<ul>\n<li>Wasmtime's <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/types/src/lib.rs#L1448-L1450\">representation of table types</a> should be updated with 64-bit limits and a <code>table64</code> flag</li>\n<li>Methods taking indices in Wasmtime, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/wasmtime/src/runtime/vm/table.rs#L420\">such as this</a>, should switch to <code>u64</code> instead of <code>u32</code>.</li>\n<li>Libcalls involving tables, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f99464727b69b3f7bfcdd334e0f1624526ed0b8c/crates/wasmtime/src/runtime/vm/libcalls.rs#L210\">like this</a>, should switch to <code>u64</code> values.</li>\n<li>Translation of invoking libcalls should switch to using 64-bit values instead of 32-bit values. 32-bit tables will zero-extend indices to 64-bit values.</li>\n<li>Embedder API methods, like <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Table.html#method.get\"><code>Table::get</code></a>, should switch to u64.</li>\n</ul>\n<p>More-or-less what I'm thinking is that a few key locations need to switch to <code>u64</code> and then whack-a-mole is played with rustc to figure out where else needs to be switched to a <code>u64</code>. One point of note I'll say is that in general it's best to avoid <code>as</code> casts in this refactoring. Casting with <code>as</code> loses information in top bits if casting to a smaller size and that can accidentally cover up cases that should be out of bounds or trap. Instead <code>u32::try_from</code> or <code>usize::try_from</code> should be used where possible with appropriate handling of the error (e.g. bubbling it up or unwrapping with a comment as to why the unwrap is ok)</p>\n</blockquote>",
        "id": 492535288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736352259
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674#issuecomment-2578047339\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">issue #8674</a>:</p>\n<blockquote>\n<p>Done in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9206\">https://github.com/bytecodealliance/wasmtime/pull/9206</a></p>\n</blockquote>",
        "id": 492535291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736352259
    }
]