[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851\">PR #1851</a> from <code>fuzz-less</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit disables Cranelift's debug verifier for our fuzz targets.<br>\nWe've gotten a good number of timeouts on OSS-Fuzz and some I've<br>\nrecently had some discussion over at <a href=\"https://github.com/google/oss-fuzz/issues/3944\">google/oss-fuzz#3944</a> about this<br>\nissue and what we can do. The result of that discussion was that there<br>\nare two primary ways we can speed up our fuzzers:</p>\n<ul>\n<li>\n<p>One is independent of Wasmtime, which is to tweak the flags used to<br>\n  compile code. The conclusion was that one flag was passed to LLVM<br>\n  which significantly increased runtime for very little benefit. This<br>\n  has now been disabled in <a href=\"https://github.com/rust-fuzz/cargo-fuzz/issues/229\">rust-fuzz/cargo-fuzz#229</a>.</p>\n</li>\n<li>\n<p>The other way is to reduce the amount of debug checks we run while<br>\n  fuzzing wasmtime itself. To put this in perspective, a test case which<br>\n  took ~100ms to instantiate was taking 50 <em>seconds</em> to instantiate in<br>\n  the fuzz target. This 500x slowdown was caused by a ton of<br>\n  multiplicative factors, but two major contributors were NaN<br>\n  canonicalization and cranelift's debug verifier. I suspect the NaN<br>\n  canonicalization itself isn't too pricy but when paired with the debug<br>\n  verifier in float-heavy code it can create lots of IR to verify.</p>\n</li>\n</ul>\n<p>This commit is specifically tackling this second point in an attempt to<br>\navoid slowing down our fuzzers too much. The intent here is that we'll<br>\ndisable the cranelift debug verifier for now but leave all other checks<br>\nenabled. If the debug verifier gets a speed boost we can try re-enabling<br>\nit, but otherwise it seems like for now it's otherwise not catching any<br>\nbugs and creating lots of noise about timeouts that aren't relevant.</p>\n<p>It's not great that we have to turn off internal checks since that's<br>\nwhat fuzzing is supposed to trigger, but given the timeout on OSS-Fuzz<br>\nand the multiplicative effects of all the slowdowns we have when<br>\nfuzzing, I'm not sure we can afford the massive slowdown of the debug verifier.</p>\n</blockquote>",
        "id": 200295201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591739235
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851\">PR #1851</a>.</p>",
        "id": 200295223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591739246
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851\">PR #1851</a> from <code>fuzz-less</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit disables Cranelift's debug verifier for our fuzz targets.<br>\nWe've gotten a good number of timeouts on OSS-Fuzz and some I've<br>\nrecently had some discussion over at <a href=\"https://github.com/google/oss-fuzz/issues/3944\">google/oss-fuzz#3944</a> about this<br>\nissue and what we can do. The result of that discussion was that there<br>\nare two primary ways we can speed up our fuzzers:</p>\n<ul>\n<li>\n<p>One is independent of Wasmtime, which is to tweak the flags used to<br>\n  compile code. The conclusion was that one flag was passed to LLVM<br>\n  which significantly increased runtime for very little benefit. This<br>\n  has now been disabled in <a href=\"https://github.com/rust-fuzz/cargo-fuzz/issues/229\">rust-fuzz/cargo-fuzz#229</a>.</p>\n</li>\n<li>\n<p>The other way is to reduce the amount of debug checks we run while<br>\n  fuzzing wasmtime itself. To put this in perspective, a test case which<br>\n  took ~100ms to instantiate was taking 50 <em>seconds</em> to instantiate in<br>\n  the fuzz target. This 500x slowdown was caused by a ton of<br>\n  multiplicative factors, but two major contributors were NaN<br>\n  canonicalization and cranelift's debug verifier. I suspect the NaN<br>\n  canonicalization itself isn't too pricy but when paired with the debug<br>\n  verifier in float-heavy code it can create lots of IR to verify.</p>\n</li>\n</ul>\n<p>This commit is specifically tackling this second point in an attempt to<br>\navoid slowing down our fuzzers too much. The intent here is that we'll<br>\ndisable the cranelift debug verifier for now but leave all other checks<br>\nenabled. If the debug verifier gets a speed boost we can try re-enabling<br>\nit, but otherwise it seems like for now it's otherwise not catching any<br>\nbugs and creating lots of noise about timeouts that aren't relevant.</p>\n<p>It's not great that we have to turn off internal checks since that's<br>\nwhat fuzzing is supposed to trigger, but given the timeout on OSS-Fuzz<br>\nand the multiplicative effects of all the slowdowns we have when<br>\nfuzzing, I'm not sure we can afford the massive slowdown of the debug verifier.</p>\n</blockquote>",
        "id": 200425305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591800164
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851\">PR #1851</a> from <code>fuzz-less</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit disables Cranelift's debug verifier for our fuzz targets.<br>\nWe've gotten a good number of timeouts on OSS-Fuzz and some I've<br>\nrecently had some discussion over at <a href=\"https://github.com/google/oss-fuzz/issues/3944\">google/oss-fuzz#3944</a> about this<br>\nissue and what we can do. The result of that discussion was that there<br>\nare two primary ways we can speed up our fuzzers:</p>\n<ul>\n<li>\n<p>One is independent of Wasmtime, which is to tweak the flags used to<br>\n  compile code. The conclusion was that one flag was passed to LLVM<br>\n  which significantly increased runtime for very little benefit. This<br>\n  has now been disabled in <a href=\"https://github.com/rust-fuzz/cargo-fuzz/issues/229\">rust-fuzz/cargo-fuzz#229</a>.</p>\n</li>\n<li>\n<p>The other way is to reduce the amount of debug checks we run while<br>\n  fuzzing wasmtime itself. To put this in perspective, a test case which<br>\n  took ~100ms to instantiate was taking 50 <em>seconds</em> to instantiate in<br>\n  the fuzz target. This 500x slowdown was caused by a ton of<br>\n  multiplicative factors, but two major contributors were NaN<br>\n  canonicalization and cranelift's debug verifier. I suspect the NaN<br>\n  canonicalization itself isn't too pricy but when paired with the debug<br>\n  verifier in float-heavy code it can create lots of IR to verify.</p>\n</li>\n</ul>\n<p>This commit is specifically tackling this second point in an attempt to<br>\navoid slowing down our fuzzers too much. The intent here is that we'll<br>\ndisable the cranelift debug verifier for now but leave all other checks<br>\nenabled. If the debug verifier gets a speed boost we can try re-enabling<br>\nit, but otherwise it seems like for now it's otherwise not catching any<br>\nbugs and creating lots of noise about timeouts that aren't relevant.</p>\n<p>It's not great that we have to turn off internal checks since that's<br>\nwhat fuzzing is supposed to trigger, but given the timeout on OSS-Fuzz<br>\nand the multiplicative effects of all the slowdowns we have when<br>\nfuzzing, I'm not sure we can afford the massive slowdown of the debug verifier.</p>\n</blockquote>",
        "id": 200444178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591808162
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851#pullrequestreview-428283505\">PR Review</a>.</p>",
        "id": 200449767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591810558
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1851\">PR #1851</a>.</p>",
        "id": 200451766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591811423
    }
]