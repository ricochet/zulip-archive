[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a <code>compile</code> command to the Wasmtime CLI.</p>\n<p>The command can be used to Ahead-Of-Time (AOT) compile WebAssembly modules.</p>\n<p>With the <code>all-arch</code> feature enabled, AOT compilation can be performed for<br>\nnon-native architectures (i.e. cross-compilation).</p>\n<p>The <code>Module::compile</code> method has been added to perform AOT compilation.</p>\n<p>A few of the CLI flags relating to \"on by default\" Wasm features have been<br>\nchanged to be \"--disable-XYZ\" flags.</p>\n<p>A simple example of using the <code>wasmtime compile</code> command:</p>\n<p><div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ wasmtime compile input.wasm\n$ wasmtime input.cwasm\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 232360906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617068188
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232361275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617068562
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-623847237\">PR Review</a>.</p>",
        "id": 232374792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617080765
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r603784421\">PR Review Comment</a>:</p>\n<blockquote>\n<p>*entries</p>\n</blockquote>",
        "id": 232374793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617080765
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-623847888\">PR Review</a>.</p>",
        "id": 232374851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617080868
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r603784905\">PR Review Comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>const COMPILED_MODULE_HEADER: &amp;[u8] = b\"\\0wasmtimeaot\";\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 232374852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617080868
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232375805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617081894
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-623856322\">PR Review</a>.</p>",
        "id": 232376037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617082170
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r603791918\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Are you sure I didn't mean uncastrated male horse? <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> </p>\n<p>Good eye! I selected the wrong word in the spell checker drop-down menu it seems.</p>\n</blockquote>",
        "id": 232376038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617082170
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232376045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617082192
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624321464\">PR Review</a>.</p>",
        "id": 232438243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604141629\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think that this can be done with <code>cranelift_other_flag(flag, \"true\")</code>, right? (not sure if we needed an extra method for this)</p>\n</blockquote>",
        "id": 232438244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624321464\">PR Review</a>.</p>",
        "id": 232438245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604143302\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW this method can probably be removed since we can just hash the return value of <code>enabled_isa_flags</code> I think?</p>\n</blockquote>",
        "id": 232438246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604145481\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've seen this in a few places, could this perhaps be refactored to a common function in <code>src/lib.rs</code>?</p>\n</blockquote>",
        "id": 232438247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604144518\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We may actually want to avoid this to avoid duplicating the logic below, and instead we could initialize <code>ret</code> like <code>wasm_backtrace_details</code> is initialized perhaps?</p>\n</blockquote>",
        "id": 232438248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604142389\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Instead of being a separate constructor could this be a configuration method?</p>\n<p>We could document <code>Config::new</code> as matching whatever the native machine is and then a <code>.target(..)</code> method which resets that internally?</p>\n</blockquote>",
        "id": 232438250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604148068\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW I was just thinking about this recently and how we might have to do this. It seems kinda bad that we're guaranteed to break anyone using these flags as soon as things stabilize, and it feels kinda odd having a mishmash of enable/disable.</p>\n<p>To help reduce the clutter in the CLI options as well as to make this a bit more future proof, what do you think of something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=+</span><span class=\"n\">simd</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=-</span><span class=\"n\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=+</span><span class=\"n\">multi</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"n\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">threads</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=+</span><span class=\"n\">all</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(similar to LLVM features and <code>-Ctarget-feature</code> in Rust)</p>\n<p>This also seems fine for me to file a follow-up too</p>\n</blockquote>",
        "id": 232438251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604153537\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This sort of makes me think that we should lean towards <code>-C</code> flags which affect codegen. In any case though this might be good to lift into <code>CommonOptions</code> perhaps?</p>\n</blockquote>",
        "id": 232438252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604156044\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this method perhaps be written as <code>Module::new(engine, bytes)?.serialize_into(output)</code>?</p>\n<p>I'd ideally prefer to avoid having this method since it seems like it should be a trivial combination of a constructor plus a <code>serialize</code> invocation, and splitting it up shouldn't be all that much less ergonomic. (I'd imagine it's fine to add the compiled module header to serialized modules too and we could even support them in <code>Module::new</code> to automatically <code>deserialize</code> as well)</p>\n</blockquote>",
        "id": 232438253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604152644\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think it'd be best if we didn't have to list out flags like this. I find it pretty unwieldy for the CLI since <code>wasmtime --help</code> becomes <em>super</em> long in not always so interesting ways.</p>\n<p>I thought that this could be done with <code>--cranelift-extra-flag has_znver1=true</code>, but that's naturally a whole lot more wordy than <code>--znver1</code>. Could we perhaps take some liberties and make this a bit more compact though? Similar to what I'm thinking below with wasm features we could do something like:</p>\n<ul>\n<li>Backends have the ability to return all possible flags (removing the need to keep the backend in sync with this file)</li>\n<li>We have a general <code>--codegen-features=...</code> or something similar to Rust's <code>-C</code> flag where we do <code>-Ccranelift=...</code></li>\n<li>The CLI would parse everything received and then match that against what the backend says is available, returning errors for anything enabled that the backend doesn't support</li>\n<li>We could implement something like <code>--codegen-features=help</code> to print out a helpful listing of all codegen features (similar to <code>-Ctarget-feature=help</code>)</li>\n</ul>\n<p>I think that'd help reduce the need to keep this file in sync with the cranelift backends and also clean up the CLI UI perhaps?</p>\n</blockquote>",
        "id": 232438254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604156706\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW using <code>wat::parse_file</code> was done before because it automatically gives better error messages if the input file is <code>*.wat</code>. We can give rustc-style errors with filenames/line numbers and snippets outlined.</p>\n</blockquote>",
        "id": 232438256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604160134\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW for this to be a bit more robust I think we'd want to move this outside of the bincode-encoded payload. Bincode may change formats (perhaps?) or we could change the structure here which means that if you're mismatching versions you're unlikely to get the error about different versions, that's only if the binary formats happen to align well.</p>\n</blockquote>",
        "id": 232438257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604158504\">PR Review Comment</a>:</p>\n<blockquote>\n<p>With these various <code>check_*</code> methods we can probably remove the <code>Hash</code> implementation for <code>Compiler</code> since IIRC it's only really used for this?</p>\n</blockquote>",
        "id": 232438258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604163216\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I always get this confused with the <code>isa_flags</code> below. Do you think we could use different names for these flags? IIRC there's like a two-level table of flags for cranelift ISAs, the \"this applies to all targets\" table and the \"this applies to only one target\" table. I think this is checking the target-independent table, right? And the <code>check_isa_flags</code> below is checking the target-specific table?</p>\n<p>I basically found it a bit confusing to have this and <code>check_isa_flags</code> below.</p>\n</blockquote>",
        "id": 232438259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604161846\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do you think it's worth ignoring this? Out of the codegen options this is definitely one where it doesn't actually affect the output in a super meaningful way. An unoptimized <code>Engine</code> could easily take an optimized precompiled wasm module</p>\n</blockquote>",
        "id": 232438260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115719
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604168260\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wondering, instead of hashing all flags could we alter cranelift to return an iterator over enabled configuration settings and their values? That way we could store the full map here and have better error messages perhaps</p>\n</blockquote>",
        "id": 232438261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604165040\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Similar to above using a destructuring statement to exhaustively list all fields I think might work well here too?</p>\n</blockquote>",
        "id": 232438262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604164522\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this use named fields along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Tunables</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">static_memory_bound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tunables</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// .. check all the fields</span>\n</code></pre></div>\n<p>so when we add a field to <code>Tunables</code> we're sure to add a case here too?</p>\n</blockquote>",
        "id": 232438263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604144806\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(ideally the same could be done for <code>opt_level</code> too)</p>\n</blockquote>",
        "id": 232438264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604166015\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also I've personally never been really that sold on the <code>impl Write</code> output for this sort of use case. It's hard for me to imagine where the output is so large it must be streamed rather than being held resident in memory.</p>\n</blockquote>",
        "id": 232438265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617115720
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624592778\">PR Review</a>.</p>",
        "id": 232476249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129839
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604346886\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unfortunately not; <code>Configurable::set</code> and <code>Configurable::enable</code> have different functionality relating to presets: the former will error for a preset whereas the latter applies it.</p>\n</blockquote>",
        "id": 232476250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129839
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624593080\">PR Review</a>.</p>",
        "id": 232476346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129861
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604347106\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That sounds good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  I'll make that change.</p>\n</blockquote>",
        "id": 232476347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129861
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604348248\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is still used for the compiler's hash implementation to generate the unique-for-this-system hash used by the code cache.</p>\n<p>Given that implementation is based on <code>Hash</code>, I felt it easier to just keep as-is than implement something else that could do the less-specific checks that deserializing the AOT artifact now does.</p>\n</blockquote>",
        "id": 232476659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129969
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624594585\">PR Review</a>.</p>",
        "id": 232476660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129969
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624594925\">PR Review</a>.</p>",
        "id": 232476716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129992
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604348509\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I'll make this change to keep the two in sync.</p>\n</blockquote>",
        "id": 232476718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617129992
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604348659\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll extract this out.</p>\n</blockquote>",
        "id": 232476758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130006
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624595133\">PR Review</a>.</p>",
        "id": 232476759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130006
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624599739\">PR Review</a>.</p>",
        "id": 232477633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130335
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604352326\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That makes sense to me.  I'll move this out and validate it from there.</p>\n</blockquote>",
        "id": 232477634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130335
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624603832\">PR Review</a>.</p>",
        "id": 232478344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130627
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604355417\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed, there's no reason this can't be done.  The intention behind this was to keep the previous requirement of having the common flags match 1:1, but loosen the requirement behind the ISA flags as they are (currently) just CPU features and having the feature present on the host running the code (e.g. \"I have AVX\") while not targeted by AOT compilation (i.e. \"I don't use AVX\") should be allowed.</p>\n<p>I can remove this check and allow the optimization level to differ (although I think it's a bit weird to say \"I want to run this module as 'none' when it was already compiled optimized\").</p>\n</blockquote>",
        "id": 232478345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130627
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604355417\">PR Review Comment</a>.</p>",
        "id": 232478383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130644
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624605443\">PR Review</a>.</p>",
        "id": 232478618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130747
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604356627\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed, it is confusing.  <code>flags_hash</code> here is the hash of the common/shared Cranelift flags and the <code>isa_flags</code> are those enabled by the target ISA (currently these are 1:1 with CPU features).</p>\n<p>I can see about a better name.</p>\n</blockquote>",
        "id": 232478619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130747
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604357481\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Excellent suggestion, I'll add that and we can then remove the assert on hashes as that was the intention for at least catching this case at runtime.</p>\n</blockquote>",
        "id": 232478885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130825
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624606562\">PR Review</a>.</p>",
        "id": 232478887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130825
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624606742\">PR Review</a>.</p>",
        "id": 232478922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130837
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604357613\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Definitely will add <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 232478923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617130837
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624611790\">PR Review</a>.</p>",
        "id": 232479946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131197
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604361198\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll see what I can do to improve this.</p>\n</blockquote>",
        "id": 232479947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131197
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604361520\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's still used for the code cache, which remains <code>Hash</code>-based.</p>\n</blockquote>",
        "id": 232480056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131232
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624612250\">PR Review</a>.</p>",
        "id": 232480057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131232
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624613913\">PR Review</a>.</p>",
        "id": 232480406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131356
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604362827\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do you know how it does that as I'm looking at the implementation of <code>_parse_file</code> in <code>wat</code> and it seems to just read the file to a <code>Vec&lt;u8&gt;</code> and call <code>parse_bytes</code>, effectively what we're doing here?</p>\n</blockquote>",
        "id": 232480407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131356
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604362827\">PR Review Comment</a>.</p>",
        "id": 232480678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131446
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624620787\">PR Review</a>.</p>",
        "id": 232481742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131873
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604368090\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like that idea.</p>\n<p>I propose that we keep the <code>--enable-XXX</code> as deprecated, undocumented flags for now for backcompat and to clean up <code>--help</code>, but perhaps break the <code>--enable-XXX false</code> options that only exist for the on-by-default ones by turning them back to bools; those users we'd steer to <code>--wasm-features=-XXX</code> immediately.</p>\n<p>Re the name: might <code>wasm-features</code> be slightly redundant given this is _wasm_time?  Perhaps just <code>features</code>?</p>\n</blockquote>",
        "id": 232481743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617131873
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624629948\">PR Review</a>.</p>",
        "id": 232483518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617132571
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604374950\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There's one big reason we _don't_ call <code>Module::new</code> from <code>Module::compile</code>: this explicitly does not want to call <code>CompiledModule::from_artifacts_list</code> as that will register the JIT'd code for the platform.</p>\n<p>The compilation might be for a target completely foreign to the host, so creating a <code>Module</code>, even a short-lived one that gets immediately serialized and dropped, doesn't make much sense.</p>\n<p>In fact, given that <code>Config</code> can now have a foreign target, I propose that <code>Module</code>'s constructors should be verifying that the given config's target matches the host before even attempting JIT compilation.  I'll add that.</p>\n<p>Re: <code>impl Write</code> I don't see much point in buffering unbounded data entirely in memory to immediately write it to disk and discard it like we'd do for the compile command.  I think, from an API-design perspective, that <code>impl Write</code> offers maximum flexibility for users of the API to do as they see fit: they can always just pass a <code>Vec&lt;u8&gt;</code> and be done.</p>\n</blockquote>",
        "id": 232483519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617132572
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624636169\">PR Review</a>.</p>",
        "id": 232484752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617133060
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604379548\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Lifting it into <code>CommonOptions</code> means <code>wasmtime run --interuptable foo.cwasm</code> would be possible, which to me doesn't make nearly as much sense as the <code>--wasm-timeout</code> option specific to the run command that inherently enables interruption in a useful way.</p>\n<p>I think <code>wasmtime compile --interruptable foo.wasm</code> and then <code>wasmtime run --wasm-timeout 60s foo.cwasm</code> would make sense to users (the latter errors if <code>--interruptable</code> wasn't given to the compile command).</p>\n<p>That said, though, I could be convinced that <code>wasmtime run --interruptable foo.cwasm</code> is a way to run a AOT module that was compiled with interruption support without specifying a timeout, similar to <code>--wasm-timeout &lt;some-reaaaaaally-long-timeout&gt;</code>.</p>\n</blockquote>",
        "id": 232484754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617133060
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624637357\">PR Review</a>.</p>",
        "id": 232484954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617133151
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604380495\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh whoops, I missed the <code>set_path</code> call in the error handling.  I'll change this back.</p>\n</blockquote>",
        "id": 232484955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617133152
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604380495\">PR Review Comment</a>.</p>",
        "id": 232485881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617133574
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624653107\">PR Review</a>.</p>",
        "id": 232487815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617134371
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604392537\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As I'd like to avoid opening the file twice (once to check if the AOT header is present before handing it off to <code>wat::parse_file</code> which opens the file in turn), do you think we could add a <code>wat::Error::set_path</code> method that sets the path if the underlying error kind is <code>Wast</code>?</p>\n</blockquote>",
        "id": 232487816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617134371
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604392537\">PR Review Comment</a>.</p>",
        "id": 232487893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617134403
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604392537\">PR Review Comment</a>.</p>",
        "id": 232488062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617134445
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604368090\">PR Review Comment</a>.</p>",
        "id": 232489408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617134982
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604368090\">PR Review Comment</a>.</p>",
        "id": 232489677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617135074
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624663926\">PR Review</a>.</p>",
        "id": 232490066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617135214
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604400625\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like the idea of a <code>--codegen-features</code> option.  This will require a bit of refactoring in the generated code for Cranelift's settings as the metadata about the settings isn't suitable for describing the settings to users this way.</p>\n<p>I'll see what I can make happen.<br>\n</p>\n</blockquote>",
        "id": 232490067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617135214
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624722666\">PR Review</a>.</p>",
        "id": 232501574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617140006
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604446523\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/252\">https://github.com/bytecodealliance/wasm-tools/pull/252</a> that would allow us to set the path in the error without having to resort to opening the file twice.</p>\n</blockquote>",
        "id": 232501575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617140006
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232518122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617150247
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232544664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617173955
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-624951295\">PR Review</a>.</p>",
        "id": 232544670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617173966
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604642085\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've added a <code>--wasm-features</code> option with the latest commit.</p>\n</blockquote>",
        "id": 232544673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617173967
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232545066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617174218
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604955396\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 232603321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201705
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625357441\">PR Review</a>.</p>",
        "id": 232603350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201714
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604947597\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps we could just outright remove this method now? With <code>Config::target</code> it doesn't seem too useful any more</p>\n</blockquote>",
        "id": 232603351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201715
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604948225\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this method (the one below that I can't actually comment on) be renamed to <code>cranelift_flag_set</code> to mirror the <code>cranelift_flag_enable</code>?</p>\n</blockquote>",
        "id": 232603353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201715
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625357441\">PR Review</a>.</p>",
        "id": 232603355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201716
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604952828\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah that was kind of my thinking where you could evaluate the overhead of interruptability with <code>wasmtime run --interruptable</code>, but I don't think it's super important so seems fine to stay here for now.</p>\n</blockquote>",
        "id": 232603364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604954459\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nah seems fine to just leave this until it trips someone up.</p>\n</blockquote>",
        "id": 232603365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201720
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604950853\">PR Review Comment</a>:</p>\n<blockquote>\n<p>To bikeshed a bit, could this perhaps be called <code>cranelift_enable</code> and the above method is called <code>cranelift_set</code>? (I figure that if cranelift wants two different operations we could probably mostly just try to mirror them here well enough</p>\n</blockquote>",
        "id": 232603367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201721
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625370504\">PR Review</a>.</p>",
        "id": 232603430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201735
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604957154\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Bah ok, well in that case we should probably lean into this naming in all the various places, either <code>set</code> or <code>enable</code> I think to be consistent about what maps to what</p>\n</blockquote>",
        "id": 232603479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201749
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625371632\">PR Review</a>.</p>",
        "id": 232604050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201950
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604957942\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah ok seems fine to leave for now in that case. I think this means, though, that we're ripe to refactor that part now too and use the same serialization/deserialization system at some point, but that's fine to happen later.</p>\n</blockquote>",
        "id": 232604137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617201970
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625376421\">PR Review</a>.</p>",
        "id": 232604508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617202093
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r604961427\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah I see, those are good points. I think though I'd ideally still like to push on a small set of constructors for <code>Module</code> instead of a standalone <code>compile</code> function. Could we perhaps defer the registration of JIT'd code for the platform to instantiation? I'm imagining we could have a <code>Mutex</code> of some kind which mutates the state of <code>Module</code> the first time it's instantiated or something like that.</p>\n<p>Personally I think it'd be a bummer if, when using cross-compilation, you're forced to never touch <code>Module::new</code> and friends and you instead have to use <code>Module::compile</code>, but there's no real fundamental reason to do so per se.</p>\n<p>Another possible alternative is that if the module looks cross-compiled we just never do the registration bits (and somehow we should error-out in <code>Instantiate</code> if the target actually mismatches the current host...), but I think I'd prefer to have the defer for now to avoid registering jit code on hosts where you don't actually do any instantiation.</p>\n</blockquote>",
        "id": 232605046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617202272
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625624148\">PR Review</a>.</p>",
        "id": 232646465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617217306
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605148141\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm still inclined to believe that constructing a <code>Module</code> implies it's usable (i.e.instantiatable) for the current host.  I think the constructors should error if 1) the module is AOT-compiled for a different target or 2) the associated <code>Config</code> has a target other than host and thus JIT doesn't make sense.</p>\n<p>I'm also inclined to believe that it's not desirable to produce a <code>Module</code> for AOT compilation (even internally) as the point of AOT compilation is getting an artifact that can be loaded _at a later time_ and likely from a different host.  I think that anyone making use of <code>Module::compile</code> would not be using <code>Module::new</code> on the artifact from the same host as doing AOT compilation and loading it on the same host isn't gaining anything over the code cache.</p>\n<p>It's not just code registration that we're skipping in <code>Module::compile</code> currently, but all the work done to get the module ready to be executed (i.e. \"linking it\" - copying the text sections into executable memory, applying relocations, etc.), none of which is required for AOT compilation.</p>\n<p>To me, at least, AOT compilation is a pretty explicit action that's independent of constructing a <code>Module</code> that can be executed.  Perhaps <code>Module::compile</code> isn't the best place for this, but I am strongly in favor of now allowing a <code>Module</code> to construct if the target isn't for host.</p>\n</blockquote>",
        "id": 232646466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617217306
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605148141\">PR Review Comment</a>.</p>",
        "id": 232646656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617217377
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605148141\">PR Review Comment</a>.</p>",
        "id": 232647569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617217737
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605148141\">PR Review Comment</a>.</p>",
        "id": 232648900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617218263
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625734809\">PR Review</a>.</p>",
        "id": 232668107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617226171
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605233113\">PR Review Comment</a>:</p>\n<blockquote>\n<p>My main worry is that having <code>Module::{new, compile}</code> could possibly be confusing for users because they both look like constructors and most might even lean towards \"compile\" since wasm is generally understood to be compiled to native code. Perhaps though we can solve all this by tweaking things a bit API-wise.</p>\n<p>In a hypothetical future version of the <code>wasmtime</code> crate you'll be able to jettison the runtime entirely and instead only have the cranelift compiler (and vice versa, you could only have the runtime without the compiler). In this hypothetical world if <code>Module</code> is a \"ready to instantiate module\" then we wouldn't want to expose it from the version of the crate that is missing the runtime. That would put <code>Module::compile</code> in a weird place since it needs to exist but the type it's attached to doesn't want to exist.</p>\n<p>Perhaps we could solve this by moving the method to <code>Engine::compile</code>? That way it's theoretically far away enough api-wise to not confuse users, we'll still have an <code>Engine</code> even with all modes of the wasmtime crate (whether you're removing the runtime or not), and we can clearly document that it's only intended for ahead-of-time-compiled cases.</p>\n<p>I think though that I would still want to tweak things a bit ideally:</p>\n<ul>\n<li>I think the format of the data from <code>Module::compile</code> and <code>Module::serialize</code> should be the same</li>\n<li>We could probably remove <code>Module::deserialize</code> and just document more sources of binary data for <code>Module::new</code> and/or <code>from_binary</code></li>\n<li>Personally I would still like to remove the <code>impl Write</code> in favor of just returning a <code>Vec&lt;u8&gt;</code>. I think that working with a <code>Vec&lt;u8&gt;</code> is generally more convenient and if we really need it for performance we could always add something like <code>compile_into</code> or <code>serialize_into</code>.</li>\n</ul>\n<p>How does that all sound?</p>\n</blockquote>",
        "id": 232668108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617226171
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605236136\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm on-board with everything you just proposed; I agree that moving <code>compile</code> out of <code>Module</code> into (perhaps) <code>Engine::compile_module</code> would make it clear that this is not useful for constructing a <code>Module</code> itself.</p>\n<p>I also am not opposed to using <code>Vec&lt;u8&gt;</code> instead of <code>impl Write</code>; agree that it's easy enough to enhance if necessary in the future.</p>\n</blockquote>",
        "id": 232668898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617226539
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625738601\">PR Review</a>.</p>",
        "id": 232668899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617226539
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625745644\">PR Review</a>.</p>",
        "id": 232670346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617227236
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605241899\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh actually a nice name might be <code>precompile_module</code> or something like that to emphasize it a bit more?</p>\n</blockquote>",
        "id": 232670347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617227236
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625775924\">PR Review</a>.</p>",
        "id": 232677092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617230654
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605266773\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Even better!</p>\n</blockquote>",
        "id": 232677093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617230654
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232707566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256088
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625918535\">PR Review</a>.</p>",
        "id": 232707686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256208
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605391469\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Okay, so I kept the <code>--cranelift-set</code> and <code>--cranelift-enable</code> flags, removed the various Cranelift flags from <code>wasmtime compile</code>, and added a <code>wasmtime settings</code> command that prints out the available settings for the target triple, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"w\"></span>\n<span class=\"n\">Cranelift</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">x86_64</span><span class=\"o\">-</span><span class=\"n\">apple</span><span class=\"o\">-</span><span class=\"n\">darwin</span><span class=\"o\">'</span>:\n\n<span class=\"nc\">Boolean</span><span class=\"w\"> </span><span class=\"n\">settings</span>:\n  <span class=\"nc\">has_sse3</span><span class=\"w\">       </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SSE3</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span><span class=\"w\">      </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SSSE3</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span><span class=\"w\">      </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SSE4</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span><span class=\"w\">      </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SSE4</span><span class=\"p\">.</span><span class=\"mf\">2.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span><span class=\"w\">        </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AVX</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span><span class=\"w\">       </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AVX2</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_avx512dq</span><span class=\"w\">   </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AVX512DQ</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_avx512vl</span><span class=\"w\">   </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AVX512VL</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_avx512f</span><span class=\"w\">    </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AVX512F</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span><span class=\"w\">     </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">POPCNT</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span><span class=\"w\">       </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BMI1</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span><span class=\"w\">       </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BMI2</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span><span class=\"w\">      </span><span class=\"n\">Has</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LZCNT</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Presets</span>:\n  <span class=\"nc\">baseline</span><span class=\"w\">     </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">preset</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">extensions</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">nehalem</span><span class=\"w\">      </span><span class=\"n\">Nehalem</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">haswell</span><span class=\"w\">      </span><span class=\"n\">Haswell</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">broadwell</span><span class=\"w\">    </span><span class=\"n\">Broadwell</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">skylake</span><span class=\"w\">      </span><span class=\"n\">Skylake</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cannonlake</span><span class=\"w\">   </span><span class=\"n\">Canon</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">icelake</span><span class=\"w\">      </span><span class=\"n\">Ice</span><span class=\"w\"> </span><span class=\"n\">Lake</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">znver1</span><span class=\"w\">       </span><span class=\"n\">Zen</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">generation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_sse3</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_ssse3</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_sse41</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_sse42</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_avx</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_avx2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_popcnt</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_bmi1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_bmi2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">has_lzcnt</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've pushed up the commit, so let me know if this is inline with what you were thinking.</p>\n</blockquote>",
        "id": 232707687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256208
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-625920258\">PR Review</a>.</p>",
        "id": 232707923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256468
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605392886\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The command intentionally doesn't present any of the \"shared\" settings as those really shouldn't be mucked around with by users, but we allow them for <code>--cranelift-set</code>/<code>--cranelift-enable</code> for users that know what they're doing.</p>\n</blockquote>",
        "id": 232707924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256468
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232708060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256588
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232708436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617256929
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232711650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617259733
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232711909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617260006
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232713290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617260957
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232716226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617262766
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626323844\">PR Review</a>.</p>",
        "id": 232766532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605700403\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Technically I think we might want to check a number of things here in the limit, e.g. if you enable avx512 or something like that but you don't have it we should probably bail out here at some point. I'm fine with that being a FIXME though to basically check things other than just the target.</p>\n</blockquote>",
        "id": 232766533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605702428\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Reading this again, is there perhaps a method on a<code>target_lexicon</code> for checking this? For example if the arch/os match you could I suppose in theory have a glibc/musl mismatch which would prevent running things. That's never an issue for us in wasmtime but this seems like an abstract thing <code>target_lexicon</code> might handle for us.</p>\n</blockquote>",
        "id": 232766534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605706444\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Are these groups still applicable? (I won't pretend to know what clap is doing here)</p>\n</blockquote>",
        "id": 232766535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605699180\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could the documentation be expanded here to mention that the intent of this method is that you'd take these bytes to <code>Module::new</code> at some other time, perhaps on a different machine or in a different process?</p>\n</blockquote>",
        "id": 232766537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605707092\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That looks fantastic to me, thanks for doing that!</p>\n</blockquote>",
        "id": 232766538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287633
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626335220\">PR Review</a>.</p>",
        "id": 232766674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617287667
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626555099\">PR Review</a>.</p>",
        "id": 232805861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617302871
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605873712\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There's nothing I can see in <code>target_lexicon</code> (re: a \"compatibility check\") that would be useful here.  Did you happen to spot something that might be?</p>\n</blockquote>",
        "id": 232805862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617302871
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626555222\">PR Review</a>.</p>",
        "id": 232805910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617302883
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r605873828\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good eye, these should be removed.</p>\n</blockquote>",
        "id": 232805913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617302884
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232853668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617332132
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626761897\">PR Review</a>.</p>",
        "id": 232853676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617332153
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606046980\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've removed <code>flags_hash</code> in favor of storing all of the shared and ISA-specific settings in the compiled module.</p>\n</blockquote>",
        "id": 232853677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617332153
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-626762040\">PR Review</a>.</p>",
        "id": 232853735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617332188
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606047104\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've done just that; we now store all the shared and ISA-specific settings in the compiled module and can now print out which of the shared flags is missing or different.</p>\n</blockquote>",
        "id": 232853737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617332188
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232854742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617333135
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a> from <code>compile-command</code> to <code>main</code>.</p>",
        "id": 232859534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617338406
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-627038488\">PR Review</a>.</p>",
        "id": 232910146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617376392
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606280443\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nah this is more of just a random musing.</p>\n</blockquote>",
        "id": 232910147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617376392
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-627038488\">PR Review</a>.</p>",
        "id": 232910148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617376392
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-627148676\">PR Review</a>.</p>",
        "id": 232930170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617385798
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606347097\">PR Review Comment</a>:</p>\n<blockquote>\n<p>One possible backwards-compatibility consideration: it looks like this will result in no encoding of default options in the saved compiled module, but if we later change a default in an incompatible way, would we want to catch that?</p>\n<p>(It's entirely possible that this is made irrelevant by some other versioning -- do you encode e.g. a git hash or wasmtime version in the <code>.cwasm</code> file too?)</p>\n</blockquote>",
        "id": 232930171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617385798
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#pullrequestreview-627160621\">PR Review</a>.</p>",
        "id": 232933257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617387293
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606356580\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed that there are way too many ways incompatibilities can be introduced, so to combat that we do indeed record the version in the cwasm and must be an identical match for now.</p>\n</blockquote>",
        "id": 232933258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617387293
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606356580\">PR Review Comment</a>.</p>",
        "id": 232933317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617387319
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791#discussion_r606356580\">PR Review Comment</a>.</p>",
        "id": 232933505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617387410
    },
    {
        "content": "<p>peterhuene merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2791\">PR #2791</a>.</p>",
        "id": 232933675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617387495
    }
]