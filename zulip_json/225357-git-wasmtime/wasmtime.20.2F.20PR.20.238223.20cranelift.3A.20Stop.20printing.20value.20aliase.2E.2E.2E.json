[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>.</p>",
        "id": 428390795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133189
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a> from <code>jameysharp:no-print-aliases</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is a follow-up to #8214. That PR made the CLIF printer resolve aliases before printing any value, which means now the aliases are never referenced.</p>\n<p>I expected plenty of tests to change due to removing the aliases from the printed representation of CLIF functions, but there was one surprise: in tests/disas/icall-loop.wat, this didn't just remove the aliases, but also changed the value numbering.</p>\n<p>As it turns out, in that one function, the last value in the function that Wasmtime generated was an alias (v28 -&gt; v3). The disas test harness has Wasmtime print the CLIF it generated, then the harness re-parses that CLIF, and passes the re-parsed CLIF to Cranelift's optimization passes. Since after this change the aliases are not printed, re-parsing the printed form doesn't round-trip perfectly, and specifically the last allocated value number changes. As a result, when legalization and optimization introduce new instructions, they get different result value numbers.</p>\n<p>My conclusion is that this is fine. The disas tests don't need to produce exactly the same value numbers that the full Wasmtime to Cranelift pipeline would produce. This process does produce the same instructions in the same order, and I think that's all that matters.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 428390796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133189
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>.</p>",
        "id": 428390797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133189
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>.</p>",
        "id": 428390798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133189
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>.</p>",
        "id": 428390799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133189
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015723534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>If you do a debug print of some <code>Value</code> you have somewhere in your code which happens to be an alias and then try to cross-reference it with the printed clif ir, you wouldn't be able to find the value anymore with this PR, right? Would it instead be possible to have places that print clif ir explicitly mutate the clif ir to resolve all aliases? (likely with a helper function for this on <code>func.dfg</code>) That way you have control over if aliases are printed or not.</p>\n</blockquote>",
        "id": 428392165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711133719
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015750801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>Perhaps we can have a <code>verbose</code> mode to printing (a flag carried on the writer object, not a Cranelift setting, to be clear) that prints all aliases still, but in a dump at the <code>bikeshed_choice({beginning, end})</code> of the function body?</p>\n<p>I like the cleanup here, but at the same time I'm also sympathetic to the view that this is \"changing the defined values\" visible to the reader, differently than the earlier use-aliases-in-args change; I can also easily imagine how this would become confusing when debugging. I think the above would largely address that: if one is println-debugging and wants to dump the function body before some algorithm starts to traverse values, one can dump it \"verbosely\" to include the aliases and such.</p>\n</blockquote>",
        "id": 428394562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711134773
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015757708\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>That's true, although you could also call <code>dfg.resolve_aliases</code> on values you want to display in your debug-print statements, which I would think would be more useful. Do you feel strongly that it's important to be able to find all Values represented in the CLIF serialization? I could be persuaded but I don't yet quite understand why it would be worth keeping.</p>\n<p>The egraph pass already has the side effect of resolving all aliases, so I also considered having the printer only print aliases which are actually used somewhere. But since #8214 makes the printer never show any alias uses, I thought that would be a waste of time.</p>\n</blockquote>",
        "id": 428395149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711135041
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015770461\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>I guess it comes down to: are the aliases semantically part of the CLIF still, or not? I think we should decide that, and then make the text representation follow. I'm concerned with not just debug printing but also \"machine-readable bugs\", so to speak: some other logic might reference a value somewhere along with text-serialized CLIF, and if the value has disappeared from the CLIF (or been replaced by some other new operator reusing the value number) then that's a subtle and hard-to-debug issue.</p>\n<p>If aliases are semantically part of CLIF, then any random <code>Value</code> one comes across anywhere should be reasonable to print, and look for in the CLIF; if they aren't, then <code>resolve_aliases</code> is a more or less mandatory step to take before exposing a value \"externally\".</p>\n<p>I think given the above bug potential, I am actually leaning toward \"aliases are still part of CLIF\"; that means we should print them, maybe even unconditionally, to avoid confusion about \"variants\"; and if we want to make them not part of CLIF, we should find ways to \"hide\" unsanitized (unresolved-aliases) Values. Separately, for a goal of \"print clean-looking CLIF\", we could do what @bjorn3 mentions and run a mutation (resolve all aliases in the instruction args, and delete alias definitions) before printing CLIF.</p>\n</blockquote>",
        "id": 428396472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711135631
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015807995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<blockquote>\n<p>are the aliases semantically part of the CLIF still, or not?</p>\n</blockquote>\n<p>IMO yes as you can change a value back from an alias to a regular instruction or change it to be an alias for a different value. If changing a value to be an alias for another value was a permanent change where modifying the value would actually modify the aliased value instead, only then would I consider aliases to not be semantically part of clif ir as the alias and it's target are indistinguishable modulo the <code>Eq</code> trait impl (it would likely need to be removed in that case as unlike <code>PartialEq</code>, <code>Eq</code> requires a value to be equal to itself).</p>\n</blockquote>",
        "id": 428400574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711137259
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015822217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>Right, so given that, the line that makes sense to me is: altering values we print in arguments is fine because chasing aliases to the root is semantically equivalent; and also that's a very useful thing when reading the code; but removing the definitions of the aliases is removing another \"output\", or meaningful element of the code.</p>\n<p>(I could also see an argument for removing the implicit alias-chasing in printing if we instead have a \"cleanup alias resolution pass\" before printing output that <em>also</em> deletes defs; that's fine because we're sequestering all the mutation away into a thing that does exactly the mutation it says on the tin, so to speak. But the above middle ground seems like a good compromise too, to me.)</p>\n</blockquote>",
        "id": 428401914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711137890
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015866639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>Alright, I'm convinced enough that aliases are part of the meaning of CLIF.</p>\n<p>But in that case I think we should revert #8214 and fully go the direction that @bjorn3 suggested instead, where if someone wants aliases resolved they should do it before printing.</p>\n<p>In addition, I want the aliases deleted once all their uses have been resolved, as Chris suggests. It looks like the way to do that is to update the alias' type to <code>INVALID</code> and its referent to <code>Value::reserved_value()</code>. I believe that will make the printer skip those values, without needing to introduce a \"verbose\" flag on printing.</p>\n<p>And I think I would like this alias resolution pass to happen in all the filetest-style harnesses, but that could be a separate discussion. I could go either way on whether Wasmtime's <code>--emit-clif</code> option should do alias resolution or not, but as that frontend rarely introduces aliases I guess it makes sense to just go ahead and print them, so that the round-trip done by the disas test harness is lossless.</p>\n</blockquote>",
        "id": 428405653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711139646
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2015889082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>That sounds like a good approach to me!</p>\n</blockquote>",
        "id": 428407641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711140642
    },
    {
        "content": "<p>jameysharp closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>.</p>",
        "id": 429532868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711412371
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223#issuecomment-2019146220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8223\">PR #8223</a>:</p>\n<blockquote>\n<p>The new helper for rewriting away aliases is in #8238 and the rest of the relevant changes are coming after that. I'm dropping this PR in favor of that.</p>\n</blockquote>",
        "id": 429532870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711412372
    }
]