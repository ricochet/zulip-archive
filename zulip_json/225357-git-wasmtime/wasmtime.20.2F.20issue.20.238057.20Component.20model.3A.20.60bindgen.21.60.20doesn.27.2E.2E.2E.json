[
    {
        "content": "<p><a href=\"https://github.com/tareksander\">tareksander</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">Issue #8057</a>.</p>",
        "id": 425245220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709797931
    },
    {
        "content": "<p>tareksander opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">issue #8057</a>:</p>\n<blockquote>\n<p>I'm working on a new WASI proposal and I'm implementing an example implementation with <code>wasmtime</code>. I have a correct WIT definition AFAIK and <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/example-runtime/src/main.rs#L14-L20\">I'm generating the bindings with the bindgen macro</a>. For some reason, the <code>key-data</code> record and <code>key</code> variant didn't generate a corresponding struct/enum. There's an error inside the generated bindgen code \"cannot find type \"KeyData\" in this scope\".</p>\n</blockquote>",
        "id": 425245223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709797932
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057#issuecomment-1984837886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">issue #8057</a>:</p>\n<blockquote>\n<p>Thanks for the report! I believe that issue should be fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8065\">https://github.com/bytecodealliance/wasmtime/pull/8065</a>.</p>\n<p>One other issue is that the <code>move</code> variant is defined twice: one <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/wit/event.wit#L163\">here</a> and one <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/wit/event.wit#L152\">here</a>. That's probably something which should be a WIT-level error, however, rather than late in bindgen.</p>\n<p>Also, for the future in case you find it useful, <code>WASMTIME_DEBUG_BINDGEN=1</code> can help provide some more comprehensible error messages as the source will be available. That wouldn't have helped you here as it was a bindgen bug, but if further issues arise it may help!</p>\n</blockquote>",
        "id": 425422137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709857812
    },
    {
        "content": "<p>tareksander <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057#issuecomment-1985188730\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">issue #8057</a>:</p>\n<blockquote>\n<blockquote>\n<p>One other issue is that the <code>move</code> variant is defined twice: one <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/wit/event.wit#L163\">here</a> and one <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/wit/event.wit#L152\">here</a>. That's probably something which should be a WIT-level error, however, rather than late in bindgen.</p>\n</blockquote>\n<p>Yes, that I have also notices and fixed locally, but the type error persisted anyways.</p>\n<p>If I understand #8065 correctly, right now bindgen thinks the types are unused, and therefore it doesn't generate them? I have restructured the WIT definitions anyways, I'll see if the bug also happens then.</p>\n</blockquote>",
        "id": 425462771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709883117
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057#issuecomment-1985896842\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">issue #8057</a>:</p>\n<blockquote>\n<p>Yes the <code>event</code> type and <code>key-data</code> aren't actually used by any imports or exports at this time (function-wise), so Wasmtime thinks they're dead types and doesn't generate bindings for one but does generate bindings for the other. If a function uses the types then bindings should get generated correctly. (note that regardless these are bugs in Wasmtime to fix!)</p>\n</blockquote>",
        "id": 425540898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709911740
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8057\">issue #8057</a>:</p>\n<blockquote>\n<p>I'm working on a new WASI proposal and I'm implementing an example implementation with <code>wasmtime</code>. I have a correct WIT definition AFAIK and <a href=\"https://github.com/tareksander/WASI-Windowing/blob/14b072cde5542bc81922e15275229fa3295301e1/example-runtime/src/main.rs#L14-L20\">I'm generating the bindings with the bindgen macro</a>. For some reason, the <code>key-data</code> record and <code>key</code> variant didn't generate a corresponding struct/enum. There's an error inside the generated bindgen code \"cannot find type \"KeyData\" in this scope\".</p>\n</blockquote>",
        "id": 426620937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710447314
    }
]