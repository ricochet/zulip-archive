[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Apologies that this didn't click earlier, but is it intentional that we do not support virtual fs in snapshot0 aka wasi_unstable? #701 landed (hooray!) but after careful re-examination I've noticed it never touched any of the old snapshot code. It's not a deal breaker per se unless we perceive anybody in the future wanting to use virtual fs with the old WASI ABI.</p>\n<p>The thing that really worries me though is that I've noticed both snapshots (wasi_unstable and wasi_snapshot_preview1) really diverge and in places where they supposedly shouldn't. Virtual fs is one of those places (but there are more!). My question here is, given that <code>wiggle</code> is hopefully round the corner (I plan to have a fully working port in the coming week), @pchickey and I can start figuring out a way of polyfilling syscall logic to different ABI snapshots which would make the out-of-sync issue essentially disappear (to a degree ofc!).</p>\n<p>Also, I remember having a discussion about this with @alexcrichton sometime in the past. I think we ought to really figure out a way of testing _all_ supported by Wasmtime WASI snapshots to avoid this type of errors in the future.</p>\n<p>Oh man, what started as a simple question, ended up as an essay. Apologies!</p>\n<p>cc @iximeow </p>\n</blockquote>",
        "id": 189963247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583571339
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Apologies that this didn't click earlier, but is it intentional that we do not support virtual fs in snapshot0 aka wasi_unstable? #701 landed (hooray!) but after careful re-examination I've noticed it never touched any of the old snapshot code. It's not a deal breaker per se unless we perceive anybody in the future wanting to use virtual fs with the old WASI ABI.</p>\n<p>The thing that really worries me though is that I've noticed both snapshots (wasi_unstable and wasi_snapshot_preview1) really diverge and in places where they supposedly shouldn't. Virtual fs is one of those places (but there are more!). My question here is, given that <code>wiggle</code> is hopefully round the corner (I plan to have a fully working port in the coming week), @pchickey and I can start figuring out a way of polyfilling syscall logic to different ABI snapshots which would make the out-of-sync issue essentially disappear (to a degree ofc!).</p>\n<p>Also, I remember having a discussion about this with @alexcrichton sometime in the past. I think we ought to really figure out a way of testing _all_ supported by Wasmtime WASI snapshots to avoid this type of errors in the future.</p>\n<p>Oh man, what started as a simple question, ended up as an essay. Apologies!</p>\n<p>cc @iximeow </p>\n</blockquote>",
        "id": 189963248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583571339
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Apologies that this didn't click earlier, but is it intentional that we do not support virtual fs in snapshot0 aka wasi_unstable? #701 landed (hooray!) but after careful re-examination I've noticed it never touched any of the old snapshot code. It's not a deal breaker per se unless we perceive anybody in the future wanting to use virtual fs with the old WASI ABI.</p>\n<p>The thing that really worries me though is that I've noticed both snapshots (wasi_unstable and wasi_snapshot_preview1) really diverge and in places where they supposedly shouldn't. Virtual fs is one of those places (but there are more!). My question here is, given that <code>wiggle</code> is hopefully round the corner (I plan to have a fully working port in the coming week), @pchickey and I can start figuring out a way of polyfilling syscall logic to different ABI snapshots which would make the out-of-sync issue essentially disappear (to a degree ofc!).</p>\n<p>Also, I remember having a discussion about this with @alexcrichton sometime in the past. I think we ought to really figure out a way of testing _all_ supported by Wasmtime WASI snapshots to avoid this type of errors in the future.</p>\n<p>Oh man, what started as a simple question, ended up as an essay. Apologies!</p>\n<p>cc @iximeow </p>\n</blockquote>",
        "id": 189963249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583571339
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596065418\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596065418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Also, while we're here. @sunfishcode @alexcrichton @pchickey do you guys think we should introduce <code>wiggle</code> in _both_ snapshots, or target only the current one (wasi_snapshot_preview1), and after we figure out the polyfill mechanics, backport to wasi_unstable?</p>\n</blockquote>",
        "id": 189963717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583572288
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596595518\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596595518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>On the topic of virtual fs in in snapshot0 specifically.. I simply didn't think about it. I can't imagine a reason snapshot0 should not be able to use snapshot0. @pchickey mentioned that lucet-wasi has been on snapshot0 for a bit while <code>wiggle</code> has gotten built out, but at one point while I was building it out I definitely had it using virtual files, so I'm highly suspicious of my understanding of.. something, somewhere.</p>\n</blockquote>",
        "id": 190080152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583767237
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596599487\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596599487\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Right, OK. I thought I'd double check with you before doing any further refactoring etc. So now the real question is whether we want to backport its functionality as-is to snapshot0 (and this involves a lot of nasty copy-pasting here and there), or if we can wait a little bit for <code>wiggle</code> to make entrance, figure out the polyfill mechanism between different snapshots, and then backporting is given to us for free. Thoughts? :-)</p>\n</blockquote>",
        "id": 190080941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583767651
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596719724\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596719724\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>The path I was thinking we'd follow here is:</p>\n<ol>\n<li>\n<p>Land wiggle support in snapshot 1 only. Keep the snapshot 0 tree intact, including using the old <code>wig</code> tool. Since its entirely different code, this should be pretty easy, right?</p>\n</li>\n<li>\n<p>Teach wiggle about the witx polyfill feature for calculating type &amp; func call equivalency. For polyfilled modules, let wiggle_generate spit out a <code>mod snapshot_0 { mod types { &lt;ts&gt; } &lt;funcs&gt; }</code> where we fill in equivalent types with aliases (e.g. <code>type Foo = super::super::snapshot_1::types::Foo</code>) and equivalent function calls with calls to the snapshot_1 version as well. Require the user provide manual implementations for all non-equivalent function calls.</p>\n</li>\n<li>\n<p>Land that wiggle feature in wasi-common, deleting snapshot 0 subtree and wig.</p>\n</li>\n</ol>\n</blockquote>",
        "id": 190104433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583779986
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596719724\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596719724\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>The path I was thinking we'd follow here is:</p>\n<ol>\n<li>\n<p>Land wiggle support in snapshot 1 only. Keep the snapshot 0 tree intact, including using the old <code>wig</code> tool. Since its entirely different code, this should be pretty easy, right?</p>\n</li>\n<li>\n<p>Teach wiggle about the witx polyfill feature for calculating type &amp; func call equivalency. For polyfilled modules, let wiggle_generate spit out a <code>mod snapshot_0 { mod types { &lt;ts&gt; } &lt;funcs&gt; }</code> where we fill in equivalent types with aliases (e.g. <code>type Foo = super::super::snapshot_1::types::Foo</code>), non-equivalent types with their definition. Fill in the equivalent function calls with the same code we generate in snapshot 1 - validate the inputs, and call the snapshot 1 trait method. The non-equivalent function calls will call a snapshot 0 trait method. The user is responsible for implementing these non-automatic methods in the snapshot 0 trait just like they are the snapshot 1 trait.</p>\n</li>\n<li>\n<p>Land that wiggle feature in wasi-common, deleting snapshot 0 subtree and wig.</p>\n</li>\n</ol>\n</blockquote>",
        "id": 190105009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583780308
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596773125\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596773125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>This plan sounds good to me! @sunfishcode I'd love to hear your thoughts on this as well!</p>\n</blockquote>",
        "id": 190116395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583787106
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596777385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596777385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>That sounds reasonable to me! And of course, it continues to make sense to factor out code into yanix/winx and into modules which aren't per-snapshot (currently we just have sandboxed_tty_writer) so that for the cases where we do have to use manual code, we can share as much as possible.</p>\n</blockquote>",
        "id": 190117290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583787713
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596779418\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252#issuecomment-596779418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1252\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1252\">Issue #1252</a>:</p>\n<blockquote>\n<p>Just an FYI that after #1253 lands, I'll restart my efforts at porting <code>wiggle</code> into <code>wasi-common</code>. If everything goes well, I'm really hopeful to have it fully working by the end of this week at the latest. This would mean we could start looking at polyfills soon.</p>\n</blockquote>",
        "id": 190117806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583788017
    }
]