[
    {
        "content": "<p>stevefan1999-personal opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724\">issue #7724</a>:</p>\n<blockquote>\n<p>I'm trying to implement the JS interface to WebAssembly using wasmtime with my own little JS engine project but I came across this</p>\n<blockquote>\n<p>A <a href=\"https://webassembly.github.io/spec/js-api/#memory\">Memory</a> object represents a single <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\">memory instance</a> which can be simultaneously referenced by multiple <a href=\"https://webassembly.github.io/spec/js-api/#instance\">Instance</a> objects. Each <a href=\"https://webassembly.github.io/spec/js-api/#memory\">Memory</a> object has the following internal slots:</p>\n<p>[[Memory]] : a <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\">memory address</a></p>\n<p>[[BufferObject]] : an <a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">ArrayBuffer</a> whose <a href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-data-blocks\">Data Block</a> is <a href=\"https://webassembly.github.io/spec/js-api/#identified-with\">identified with</a> the above memory address<br>\n</p>\n</blockquote>\n<p>(<a href=\"https://webassembly.github.io/spec/js-api/#memories\">https://webassembly.github.io/spec/js-api/#memories</a>)</p>\n<p>But if you look closely at <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#impl-Memory\">https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#impl-Memory</a>, you can see that the only way to create a <code>Memory</code> is by handing it a <code>Store</code>, but to get a <code>Store</code> you must first create it from an <code>Engine</code> and so I think there is currently no way to implement the required semantics the WebAssembly Spec needed me to do.</p>\n</blockquote>",
        "id": 409797282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703406815
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724#issuecomment-1868478295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724\">issue #7724</a>:</p>\n<blockquote>\n<p>An <code>Engine</code> is meant to be created once at startup and then used on all threads. (You can still create multiple <code>Engine</code>s if you need different settings in different places.) The way to model the JS behavior would be to create a single <code>Store</code> for every thread running javascript. Be aware however that all things that are part of a <code>Store</code> can't get deallocated without deallocating the entire <code>Store</code>. As such you can easily run out of memory if you keep a <code>Store</code> around for the entire JS execution.</p>\n</blockquote>",
        "id": 409802557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703411863
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724\">issue #7724</a>:</p>\n<blockquote>\n<p>I'm trying to implement the JS interface to WebAssembly using wasmtime with my own little JS engine project but I came across this</p>\n<blockquote>\n<p>A <a href=\"https://webassembly.github.io/spec/js-api/#memory\">Memory</a> object represents a single <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\">memory instance</a> which can be simultaneously referenced by multiple <a href=\"https://webassembly.github.io/spec/js-api/#instance\">Instance</a> objects. Each <a href=\"https://webassembly.github.io/spec/js-api/#memory\">Memory</a> object has the following internal slots:</p>\n<p>[[Memory]] : a <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\">memory address</a></p>\n<p>[[BufferObject]] : an <a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">ArrayBuffer</a> whose <a href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-data-blocks\">Data Block</a> is <a href=\"https://webassembly.github.io/spec/js-api/#identified-with\">identified with</a> the above memory address<br>\n</p>\n</blockquote>\n<p>(<a href=\"https://webassembly.github.io/spec/js-api/#memories\">https://webassembly.github.io/spec/js-api/#memories</a>)</p>\n<p>But if you look closely at <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#impl-Memory\">https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#impl-Memory</a>, you can see that the only way to create a <code>Memory</code> is by handing it a <code>Store</code>, but to get a <code>Store</code> you must first create it from an <code>Engine</code> and so I think there is currently no way to implement the required semantics the WebAssembly Spec needed me to do.</p>\n</blockquote>",
        "id": 410863364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704209552
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724#issuecomment-1874177907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7724\">issue #7724</a>:</p>\n<blockquote>\n<p>I don't have much more to add over what @bjorn3 already mentioned (thanks!) other than the Rust API for <code>wasmtime</code> is intentionally different from the JS API to better suit Rust idioms and cater to Wasmtime's use cases. </p>\n<p>Otherwise though given that a <code>Store</code>-per-JS-thread should suffice I'm otherwise going to close this. Let us know though if you've got other questions!</p>\n</blockquote>",
        "id": 410863366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704209553
    }
]