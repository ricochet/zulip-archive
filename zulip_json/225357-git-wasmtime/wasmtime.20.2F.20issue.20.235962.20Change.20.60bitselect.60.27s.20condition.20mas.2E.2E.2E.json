[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962\">issue #5962</a>:</p>\n<blockquote>\n<p>This came up during <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5918\">https://github.com/bytecodealliance/wasmtime/pull/5918</a> and the removal of the old <code>vselect</code> instruction. Currently the <code>bitselect</code> instruction uses the same type for all of its inputs and its output, but that means that for a floating-point selection the condition mask is also a floating-point value which is typically not the case. For example an <code>icmp</code> would produce an integer vector which could be used to <code>bitselect</code> the results of the comparisons.</p>\n<p>Using an integral mask would make the NaN-canonicalization for vectors slightly simpler and additionally make it easier to re-add the optimizations removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5918\">https://github.com/bytecodealliance/wasmtime/pull/5918</a> where <code>bitselect</code>-of-<code>fcmp</code> for float vectors could be optimized into <code>f{min,max}</code> where possible.</p>\n</blockquote>",
        "id": 340260818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678246048
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962\">issue #5962</a>:</p>\n<blockquote>\n<p>This came up during <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5918\">https://github.com/bytecodealliance/wasmtime/pull/5918</a> and the removal of the old <code>vselect</code> instruction. Currently the <code>bitselect</code> instruction uses the same type for all of its inputs and its output, but that means that for a floating-point selection the condition mask is also a floating-point value which is typically not the case. For example an <code>icmp</code> would produce an integer vector which could be used to <code>bitselect</code> the results of the comparisons.</p>\n<p>Using an integral mask would make the NaN-canonicalization for vectors slightly simpler and additionally make it easier to re-add the optimizations removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5918\">https://github.com/bytecodealliance/wasmtime/pull/5918</a> where <code>bitselect</code>-of-<code>fcmp</code> for float vectors could be optimized into <code>f{min,max}</code> where possible.</p>\n</blockquote>",
        "id": 340260819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678246048
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962#issuecomment-1460481924\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962\">issue #5962</a>:</p>\n<blockquote>\n<p>I attempted this naively with:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/meta/src/shared/instructions.rs b/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gh\">index 372407965..136e8f1bd 100755</span>\n<span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gu\">@@ -1449,7 +1449,15 @@ pub(crate) fn define(</span>\n<span class=\"w\"> </span>        .side_effects_idempotent(),\n<span class=\"w\"> </span>    );\n\n<span class=\"gd\">-    let c = &amp;Operand::new(\"c\", Any).with_doc(\"Controlling value to test\");</span>\n<span class=\"gi\">+    let BitselectTruthy = &amp;TypeVar::new(</span>\n<span class=\"gi\">+        \"BitselectTruthy\",</span>\n<span class=\"gi\">+        \"A truthy type for the `bitselect` instruction\",</span>\n<span class=\"gi\">+        TypeSetBuilder::new()</span>\n<span class=\"gi\">+            .ints(Interval::All)</span>\n<span class=\"gi\">+            .simd_lanes(Interval::All)</span>\n<span class=\"gi\">+            .build(),</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+    let c = &amp;Operand::new(\"c\", BitselectTruthy).with_doc(\"Controlling value to test\");</span>\n<span class=\"w\"> </span>    ig.push(\n<span class=\"w\"> </span>        Inst::new(\n<span class=\"w\"> </span>            \"bitselect\",\n<span class=\"gh\">diff --git a/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif b/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gh\">index b4449a967..de531b1e8 100644</span>\n<span class=\"gd\">--- a/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gi\">+++ b/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gu\">@@ -187,8 +187,8 @@ block0(v0: i16x8, v1: i16x8, v2: i16x8):</span>\n<span class=\"w\"> </span>;   bsl v0.16b, v1.16b, v2.16b\n<span class=\"w\"> </span>;   ret\n\n<span class=\"gd\">-function %vselect_f32x4(f32x4, f32x4, f32x4) -&gt; f32x4 {</span>\n<span class=\"gd\">-block0(v0: f32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"gi\">+function %vselect_f32x4(i32x4, f32x4, f32x4) -&gt; f32x4 {</span>\n<span class=\"gi\">+block0(v0: i32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"w\"> </span>    v3 = bitselect v0, v1, v2\n<span class=\"w\"> </span>    return v3\n<span class=\"w\"> </span>}\n<span class=\"gu\">@@ -203,8 +203,8 @@ block0(v0: f32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"w\"> </span>;   bsl v0.16b, v1.16b, v2.16b\n<span class=\"w\"> </span>;   ret\n\n<span class=\"gd\">-function %vselect_f64x2(f64x2, f64x2, f64x2) -&gt; f64x2 {</span>\n<span class=\"gd\">-block0(v0: f64x2, v1: f64x2, v2: f64x2):</span>\n<span class=\"gi\">+function %vselect_f64x2(i64x2, f64x2, f64x2) -&gt; f64x2 {</span>\n<span class=\"gi\">+block0(v0: i64x2, v1: f64x2, v2: f64x2):</span>\n<span class=\"w\"> </span>    v3 = bitselect v0, v1, v2\n<span class=\"w\"> </span>    return v3\n<span class=\"w\"> </span>}\n</code></pre></div>\n<p>but that's not quite what we want I think since it's allowing <code>i32</code> as a mask type for <code>f32x4</code> bitselects. I don't know how to require that the type size of the condition equals the type size of the mask</p>\n</blockquote>",
        "id": 340412971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678293857
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962#issuecomment-1460481924\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5962\">issue #5962</a>:</p>\n<blockquote>\n<p>I attempted this naively with:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/meta/src/shared/instructions.rs b/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gh\">index 372407965..136e8f1bd 100755</span>\n<span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/instructions.rs</span>\n<span class=\"gu\">@@ -1449,7 +1449,15 @@ pub(crate) fn define(</span>\n<span class=\"w\"> </span>        .side_effects_idempotent(),\n<span class=\"w\"> </span>    );\n\n<span class=\"gd\">-    let c = &amp;Operand::new(\"c\", Any).with_doc(\"Controlling value to test\");</span>\n<span class=\"gi\">+    let BitselectTruthy = &amp;TypeVar::new(</span>\n<span class=\"gi\">+        \"BitselectTruthy\",</span>\n<span class=\"gi\">+        \"A truthy type for the `bitselect` instruction\",</span>\n<span class=\"gi\">+        TypeSetBuilder::new()</span>\n<span class=\"gi\">+            .ints(Interval::All)</span>\n<span class=\"gi\">+            .simd_lanes(Interval::All)</span>\n<span class=\"gi\">+            .build(),</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+    let c = &amp;Operand::new(\"c\", BitselectTruthy).with_doc(\"Controlling value to test\");</span>\n<span class=\"w\"> </span>    ig.push(\n<span class=\"w\"> </span>        Inst::new(\n<span class=\"w\"> </span>            \"bitselect\",\n<span class=\"gh\">diff --git a/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif b/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gh\">index b4449a967..de531b1e8 100644</span>\n<span class=\"gd\">--- a/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gi\">+++ b/cranelift/filetests/filetests/isa/aarch64/simd-bitwise-compile.clif</span>\n<span class=\"gu\">@@ -187,8 +187,8 @@ block0(v0: i16x8, v1: i16x8, v2: i16x8):</span>\n<span class=\"w\"> </span>;   bsl v0.16b, v1.16b, v2.16b\n<span class=\"w\"> </span>;   ret\n\n<span class=\"gd\">-function %vselect_f32x4(f32x4, f32x4, f32x4) -&gt; f32x4 {</span>\n<span class=\"gd\">-block0(v0: f32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"gi\">+function %vselect_f32x4(i32x4, f32x4, f32x4) -&gt; f32x4 {</span>\n<span class=\"gi\">+block0(v0: i32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"w\"> </span>    v3 = bitselect v0, v1, v2\n<span class=\"w\"> </span>    return v3\n<span class=\"w\"> </span>}\n<span class=\"gu\">@@ -203,8 +203,8 @@ block0(v0: f32x4, v1: f32x4, v2: f32x4):</span>\n<span class=\"w\"> </span>;   bsl v0.16b, v1.16b, v2.16b\n<span class=\"w\"> </span>;   ret\n\n<span class=\"gd\">-function %vselect_f64x2(f64x2, f64x2, f64x2) -&gt; f64x2 {</span>\n<span class=\"gd\">-block0(v0: f64x2, v1: f64x2, v2: f64x2):</span>\n<span class=\"gi\">+function %vselect_f64x2(i64x2, f64x2, f64x2) -&gt; f64x2 {</span>\n<span class=\"gi\">+block0(v0: i64x2, v1: f64x2, v2: f64x2):</span>\n<span class=\"w\"> </span>    v3 = bitselect v0, v1, v2\n<span class=\"w\"> </span>    return v3\n<span class=\"w\"> </span>}\n</code></pre></div>\n<p>but that's not quite what we want I think since it's allowing <code>i32</code> as a mask type for <code>f32x4</code> bitselects. I don't know how to require that the type size of the condition equals the type size of the oeprands</p>\n</blockquote>",
        "id": 340414781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678294323
    }
]