[
    {
        "content": "<p>Stebalien labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<p>When <code>wasm_backtrace</code> is enabled, wasmtime is 300x slower in a specific stack-heavy test-case that:</p>\n<ol>\n<li>Pushes slightly less than 2048 stack elements (~300 recursive rust calls).</li>\n<li>Calls back out into the host, which recurses back into a new instance of the same module (about 1k times).</li>\n<li>Eventually traps and rewinds through all 1k recursive calls.</li>\n</ol>\n<p>While I'll admit that this is an unusual load, it can cause wasmtime to basically just sit there for ~20 seconds while bailing out, when it should take milliseconds at most.</p>\n<p>Proposed resolution: Keep the option to disable backtraces. While _very_ useful for debugging, the ability to disable them is still pretty useful.</p>\n<h3>Test Case</h3>\n<p>It's not quite as simple as a single wasm file. My guess is that there's some form of non-linear cost to keeping track of stack traces.</p>\n<h3>Steps to Reproduce</h3>\n<p>I can provide a reduced test-case that would help, it just might take a bit of time.</p>\n<p>Non-reduced test-case:</p>\n<ol>\n<li>Checkout <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943\">https://github.com/filecoin-project/ref-fvm/pull/943</a></li>\n<li>Disable <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129\">https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129</a></li>\n<li>In <code>testing/integration/tests</code>, run <code>cargo test --release native_stack_overflow</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>With backtraces disabled, it runs in 0.06 seconds.</p>\n<h3>Actual Results</h3>\n<p>With backtraces enabled, it runs in 20 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime: 1.0.1</p>\n<p>Operating system: Linux (5.19.14)</p>\n<p>Architecture: x86_64 (i7-1185G7)</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?<br>\n</p>\n</blockquote>",
        "id": 303199421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665380185
    },
    {
        "content": "<p>Stebalien opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<p>When <code>wasm_backtrace</code> is enabled, wasmtime is 300x slower in a specific stack-heavy test-case that:</p>\n<ol>\n<li>Pushes slightly less than 2048 stack elements (~300 recursive rust calls).</li>\n<li>Calls back out into the host, which recurses back into a new instance of the same module (about 1k times).</li>\n<li>Eventually traps and rewinds through all 1k recursive calls.</li>\n</ol>\n<p>While I'll admit that this is an unusual load, it can cause wasmtime to basically just sit there for ~20 seconds while bailing out, when it should take milliseconds at most.</p>\n<p>Proposed resolution: Keep the option to disable backtraces. While _very_ useful for debugging, the ability to disable them is still pretty useful.</p>\n<h3>Test Case</h3>\n<p>It's not quite as simple as a single wasm file. My guess is that there's some form of non-linear cost to keeping track of stack traces.</p>\n<h3>Steps to Reproduce</h3>\n<p>I can provide a reduced test-case that would help, it just might take a bit of time.</p>\n<p>Non-reduced test-case:</p>\n<ol>\n<li>Checkout <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943\">https://github.com/filecoin-project/ref-fvm/pull/943</a></li>\n<li>Disable <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129\">https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129</a></li>\n<li>In <code>testing/integration/tests</code>, run <code>cargo test --release native_stack_overflow</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>With backtraces disabled, it runs in 0.06 seconds.</p>\n<h3>Actual Results</h3>\n<p>With backtraces enabled, it runs in 20 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime: 1.0.1</p>\n<p>Operating system: Linux (5.19.14)</p>\n<p>Architecture: x86_64 (i7-1185G7)</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?<br>\n</p>\n</blockquote>",
        "id": 303199422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665380185
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037#issuecomment-1273414181\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<p>Thanks for reporting this! Digging in a bit here one aspect I believe is that we have quadratic behavior capturing the backtraces with interleavings of host and wasm frames, specifically each time Wasmtime returns with a trap back to wasm a backtrace is recaptured only to get thrown away later, meaning that with N sequences of host stack frames we'll capture a backtrace N times (hence the quadratic behavior). That may be one of the contributing factors to this and would probably be best to fix. @fitzgen would you be up for taking a look at this?</p>\n<p>In the meantime @Stebalien would you be able to produce a more standalone example of what's going on? I made a simple reproduction myself but was unable to get more than 600 ish interleavings of host/wasm deep so I'm not sure how to get up to the multiple thousands you describe.</p>\n</blockquote>",
        "id": 303271864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665412563
    },
    {
        "content": "<p>Stebalien <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037#issuecomment-1273542417\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<blockquote>\n<p>I made a simple reproduction myself but was unable to get more than 600 ish interleavings of host/wasm deep so I'm not sure how to get up to the multiple thousands you describe.</p>\n</blockquote>\n<p>Ah, we run wasmtime on a 64MiB stack to support cases like this. But I'll cobble together a reproducer.</p>\n</blockquote>",
        "id": 303288362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665418347
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037#issuecomment-1275221530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<p>Looking into this.</p>\n</blockquote>",
        "id": 303512534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665519240
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5037\">issue #5037</a>:</p>\n<blockquote>\n<p>When <code>wasm_backtrace</code> is enabled, wasmtime is 300x slower in a specific stack-heavy test-case that:</p>\n<ol>\n<li>Pushes slightly less than 2048 stack elements (~300 recursive rust calls).</li>\n<li>Calls back out into the host, which recurses back into a new instance of the same module (about 1k times).</li>\n<li>Eventually traps and rewinds through all 1k recursive calls.</li>\n</ol>\n<p>While I'll admit that this is an unusual load, it can cause wasmtime to basically just sit there for ~20 seconds while bailing out, when it should take milliseconds at most.</p>\n<p>Proposed resolution: Keep the option to disable backtraces. While _very_ useful for debugging, the ability to disable them is still pretty useful.</p>\n<h3>Test Case</h3>\n<p>It's not quite as simple as a single wasm file. My guess is that there's some form of non-linear cost to keeping track of stack traces.</p>\n<h3>Steps to Reproduce</h3>\n<p>I can provide a reduced test-case that would help, it just might take a bit of time.</p>\n<p>Non-reduced test-case:</p>\n<ol>\n<li>Checkout <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943\">https://github.com/filecoin-project/ref-fvm/pull/943</a></li>\n<li>Disable <a href=\"https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129\">https://github.com/filecoin-project/ref-fvm/pull/943/files#diff-f6ca4a1c384bf9a1f911827c3974f3f2b25357d937ce1d529732c09404ed6c92R129</a></li>\n<li>In <code>testing/integration/tests</code>, run <code>cargo test --release native_stack_overflow</code>.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>With backtraces disabled, it runs in 0.06 seconds.</p>\n<h3>Actual Results</h3>\n<p>With backtraces enabled, it runs in 20 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime: 1.0.1</p>\n<p>Operating system: Linux (5.19.14)</p>\n<p>Architecture: x86_64 (i7-1185G7)</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?<br>\n</p>\n</blockquote>",
        "id": 303848894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665670972
    }
]