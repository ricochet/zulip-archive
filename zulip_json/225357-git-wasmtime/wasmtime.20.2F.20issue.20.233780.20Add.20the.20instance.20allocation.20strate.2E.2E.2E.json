[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033142869\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>(on posting, I see fitzgen beat me to it -- strong +1 then to multiple-instantiate!)</p>\n</blockquote>",
        "id": 271203737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644360848
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033147069\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 271204520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644361280
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033149995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>I'll add a fuzz target for multi-instantiation.</p>\n</blockquote>",
        "id": 271205047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644361541
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033155418\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>Thanks! The fuzz target should also drop instances in random orders as well, so that it exercises the pooling allocator free lists too.</p>\n</blockquote>",
        "id": 271206020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644362050
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033330993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>I've added a <code>pooling</code> fuzz target that tests the pooling allocator by allocating instances from different modules and then dropping them in a different order.</p>\n<p>Take a look at the last commit and let me know if this approach needs improvement.</p>\n</blockquote>",
        "id": 271229112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644380381
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033388949\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>This is definitely in the right direction! If I understand correctly, this basically implements a two-phase approach: instantiate many times, picking from a group of modules (possibly instantiating the same module into multiple slots); then terminate all the instances, in some arbitrary order. Is that right?</p>\n<p>The thing that I think would be good to add would be reuse of pool slots, from the instantiate-&gt;drop-&gt;instantiate pattern; in other words, there need to be instantiate and drop events interwoven, rather than in two separate phases, to get some of the interesting corner cases. (With memfd for example it'd be nice to have coverage of cases that instantiate the same module over the same slot.)</p>\n<p>What about the \"<code>Arbitrary</code> list of commands\" fuzzing approach? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Arbitrary)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Command</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Instantiate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">freelist_index</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module_id</span>: <span class=\"kt\">usize</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Terminate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">instantiated_list_index</span>: <span class=\"kt\">usize</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then take an <code>Arbitrary</code> of a <code>Vec&lt;Command&gt;</code> and stream through the events. (With the above I'm imagining <code>freelist_index</code> and <code>instantiated_list_index</code> are taken modulo the length of the respective list, then we can <code>swap_remove</code> and put it on the other list; a lot like the drop approach in your current implementation.) Thoughts?</p>\n</blockquote>",
        "id": 271235216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644387140
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1033989513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<blockquote>\n<p>What about the \"<code>Arbitrary</code> list of commands\" fuzzing approach? Something like:</p>\n<p><code>\n#[derive(Arbitrary)]\nenum Command {\n  Instantiate { freelist_index: usize, module_id: usize },\n  Terminate { instantiated_list_index: usize },\n}\n</code></p>\n<p>then take an <code>Arbitrary</code> of a <code>Vec&lt;Command&gt;</code> and stream through the events. (With the above I'm imagining <code>freelist_index</code> and <code>instantiated_list_index</code> are taken modulo the length of the respective list, then we can <code>swap_remove</code> and put it on the other list; a lot like the drop approach in your current implementation.) Thoughts?</p>\n</blockquote>\n<p>(+1 but I'm going to bow out from further review here since it seems like we're at risk of too many cooks in the kitchen and y'all have this covered :) )</p>\n</blockquote>",
        "id": 271311155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644426315
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1034493375\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>@cfallin I replaced the <code>pooling</code> fuzz target with <code>instantiate-many</code> that tries to instantiate an arbitrary number of times followed by an interleaving of additional instantiations or terminations in an attempt to fuzz the reuse affinity.</p>\n<p>Let me know if you think there's more than can be done with this approach.</p>\n</blockquote>",
        "id": 271386294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644468980
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1035352217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>I'll rebase this in a sec.</p>\n</blockquote>",
        "id": 271478544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644519839
    },
    {
        "content": "<p>peterhuene deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780#issuecomment-1035352217\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3780\">issue #3780</a>:</p>\n<blockquote>\n<p>I'll rebase this in a sec.</p>\n</blockquote>",
        "id": 271479457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644520229
    }
]