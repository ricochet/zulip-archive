[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4609\">PR #4609</a> from <code>fix-a-test</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit fixes #4600 in a somewhat roundabout fashion. Currently the<br>\n<code>main</code> branch of Wasmtime exhibits unusual behavior:</p>\n<ul>\n<li>\n<p>If <code>./ci/run-tests.sh</code> is run then the <code>cache_accounts_for_opt_level</code><br>\n  test does not fail.</p>\n</li>\n<li>\n<p>If <code>cargo test -p wasmtime --lib</code> is run, however, then the test<br>\n  fails.</p>\n</li>\n</ul>\n<p>This test is indeed being run as part of <code>./ci/run-tests.sh</code> and it's<br>\nalso passing in CI. The exact failure is that part of the debuginfo<br>\nsupport we have takes an existing ELF image, copies it, and then appends<br>\nsome information to inform profilers/gdb about the image. This code is<br>\nall quite old at this point and not 100% optimal, but that's at least<br>\nwhere we're at.</p>\n<p>The problem is that the appended <code>ProgramHeader64</code> is not aligned<br>\ncorrectly during <code>cargo test -p wasmtime --lib</code>, which is the panic that<br>\nhappens causing the test to fail. The reason, however, that this test<br>\npasses with <code>./ci/run-tests.sh</code> is that the alignment of<br>\n<code>ProgramHeader64</code> is 1 instead of 8. The reason for that is that the<br>\n<code>object</code> crate has an <code>unaligned</code> feature which forcibly unaligns all<br>\nprimitives to 1 byte instead of their natural alignment. During <code>cargo\ntest -p wasmtime --lib</code> this feature is not enabled but during<br>\n<code>./ci/run-tests.sh</code> this feature is enabled. The feature is currently<br>\nenabled through inclusion of the <code>backtrace</code> crate which only happens<br>\nfor some tests in some crates.</p>\n<p>The alignment issue explains why the test fails on a single crate test<br>\nbut fails on the whole workspace tests. The next issue I investigated<br>\nwas if this test ever passed. It turns out that on v0.39.0 this test<br>\npassed, and the regression to main was introduced during #4571. That<br>\nPR, however, has nothing to do with any of this! The reason that this<br>\nshowed up as causing a \"regression\" however is because it changed<br>\ncranelift settings which changed the size of serialized metadata at the<br>\nend of a Wasmtime cache object.</p>\n<p>Wasmtime compiled artifacts are ELF images with Wasmtime-specific<br>\nmetadata appended after them. This appended metadata was making its way<br>\nall the way through to the gdbjit image itself which mean that while the<br>\nend of the ELF file itself was properly aligned the space after the<br>\nWasmtime metadata was not aligned. This metadata changes in size over<br>\ntime as Cranelift settings change which explains why #4571 was the<br>\n\"source\" of the regression.</p>\n<p>The fix in this commit is to discard the extra Wasmtime metadata when<br>\ncreating an <code>MmapVec</code> representing the underlying ELF image. This is<br>\nalready supported with <code>MmapVec::drain</code> so it was relatively easy to<br>\ninsert that. This means that the gdbjit image starts with just the ELF<br>\nfile itself which is always aligned at the end, which gets the test<br>\npassing with/without the <code>unaligned</code> feature in the <code>object</code> crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 292019211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659625067
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4609\">PR #4609</a>.</p>",
        "id": 292627611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660067720
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4609#pullrequestreview-1067477689\">PR review</a>.</p>",
        "id": 292671324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660086254
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4609\">PR #4609</a>.</p>",
        "id": 292771218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660143516
    }
]