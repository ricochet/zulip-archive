[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1454911013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 339619355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677969900
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1462924492\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<p>Oh good points! Shame on me for not actually reading all the way through on these bits... </p>\n<p>So hypothetically if the host uses ymm registers in its own code, that might cause stalls but given that the stall requires hopping between the guest and the host it probably isn't really going to affect much?</p>\n<p>Otherwise though locally I can't measure a difference before/after this PR, so the main motivation at this point is to copy what v8 does.</p>\n</blockquote>",
        "id": 340726638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678401524
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1462943128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<blockquote>\n<p>So hypothetically if the host uses ymm registers in its own code, that might cause stalls but given that the stall requires hopping between the guest and the host it probably isn't really going to affect much?</p>\n</blockquote>\n<p>Yeah, that's a good point. I guess we should remember that, beyond just the normal overhead of switching between guest and host, this YMM transition penalty could add to the switch overhead. Maybe it's worthwhile to think about running <code>VZEROUPPER</code> in the \"host to guest\" trampoline so that we feel more sure that guest code will be in the \"Clean UpperState\"? cc: @cfallin, @elliottt, @jameysharp; I guess this is a \"better safe than sorry\" kind of thought, but that goes along with the intent of this PR.</p>\n<blockquote>\n<p>Otherwise though locally I can't measure a difference before/after this PR, so the main motivation at this point is to copy what v8 does.</p>\n</blockquote>\n<p>Yeah, I wanted to say it earlier but don't want to sound cavalier: one might have to work rather hard to make the partial register dependency become a noticeable issue in a real benchmark. I'm not saying it can't be done and we shouldn't try to avoid it, just... the StackOverflow answer (\"you are experiencing a penalty for \"mixing\" non-VEX SSE and VEX-encoded instructions\") felt more alarmist than I thought was warranted.</p>\n</blockquote>",
        "id": 340729941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678402914
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1462950174\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<p>Oh sorry I didn't mean to raise an alarms or convey any sense of urgency. I should probably more succinctly put it as \"I was interested in filling out more AVX instructions, but had no technical motivation to document as the reason to do so, so I picked the first google result and pasted it here\"</p>\n<p>I'll need to read up more on VZEROUPPER as I'm not sure what it does and how it affects performance myself.</p>\n</blockquote>",
        "id": 340730900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678403336
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1462955335\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<p>The optimization manual says that <code>vzeroupper</code> \"has zero latency\" so I guess the only cost is instruction decode. Given that, adding one no-operand instruction to Wasmtime's trampolines sounds reasonable to me. (I guess it should be added for transitions in both directions between host and guest, based on the optimization manual's recommendations.)</p>\n<p>I think I remember at least one of those trampolines does a tail-call, so it doesn't have the opportunity to do this when the callee returns, which I suppose could lead to surprising results too.</p>\n<p>Just to check, we don't need to worry about ABI here, right? I'm assuming no x86 ABI guarantees anything about bits beyond the first 128 of vector registers across a call, or all the vector registers are caller-saved, or something.</p>\n</blockquote>",
        "id": 340731776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678403716
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931#issuecomment-1463000833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5931\">issue #5931</a>:</p>\n<blockquote>\n<blockquote>\n<p>Just to check, we don't need to worry about ABI here, right? I'm assuming no x86 ABI guarantees anything about bits beyond the first 128 of vector registers across a call, or all the vector registers are caller-saved, or something.</p>\n</blockquote>\n<p>Honestly, hadn't thought too much about this idea until today so I don't know, but if we did add <code>VZEROUPPER</code> in the \"host to guest\" direction, e.g., I think we would want to do so before we fill in any registers with passed <code>v128</code> values.</p>\n</blockquote>",
        "id": 340735340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405441
    }
]