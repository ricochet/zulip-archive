[
    {
        "content": "<p><a href=\"https://github.com/jeffcharles\">jeffcharles</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">Issue #9723</a>.</p>",
        "id": 485967486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733265364
    },
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/user-attachments/files/18000035/check_read_to_end.wasm.gz\">check_read_to_end.wasm.gz</a></p>\n<p>The source code for the Wasm module looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Read</span><span class=\"p\">};</span>\n\n<span class=\"cp\">#[export_name = </span><span class=\"s\">\"wizer.initialize\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">initializer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">    </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">().</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The source code for the host looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">pipe</span><span class=\"p\">::</span><span class=\"n\">MemoryInputPipe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">preview1</span><span class=\"p\">::</span><span class=\"n\">WasiP1Ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"check_read_to_end.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">preview1</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">cx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"n\">MemoryInputPipe</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">build_p1</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wizer.initialize\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">WasiP1Ctx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>Ungzip the Wasm file (or compile it) and move it to <code>check_read_to_end.wasm</code>.</li>\n<li><code>cargo run</code> the main program for the host.</li>\n</ol>\n<h3>Expected Results</h3>\n<p>The function call to run and exit.</p>\n<h3>Actual Results</h3>\n<p>The function call hangs.</p>\n<p>It looks like the <code>wasmtime_wasi::preview1::add_to_linker_sync</code>'s closure is run infinitely and in my debugger I can see the <code>MemoryInputPipe</code>'s <code>read</code> being called infinitely.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 27.0.0 and also 23.0.3</p>\n<p>Operating system: MacOS</p>\n<p>Architecture: AArch64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>Normally I'd define the WASI context on the store but I'm using Wizer which doesn't expose a public API that I can use to do that so this is a workaround I tried. However, I found it very unexpected that this causes a hang.</p>\n</blockquote>",
        "id": 485967490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733265366
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723#issuecomment-2516163448\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<p>I think the bug here is that you are creating a new WasiP1Ctx in the closure to add_to_linker, which is a “getter” function into your Ctx type, when the usual place to create it is in Store::new - if you change that does the behavior resolve?</p>\n</blockquote>",
        "id": 486010731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733286458
    },
    {
        "content": "<p>jeffcharles <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723#issuecomment-2517560503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<p>Yes it does resolve. However, as I mentioned in the issue:</p>\n<blockquote>\n<p>Normally I'd define the WASI context on the store but I'm using Wizer which doesn't expose a public API that I can use to do that so this is a workaround I tried.</p>\n</blockquote>\n<p>I did file <a href=\"https://github.com/bytecodealliance/wizer/issues/123\">https://github.com/bytecodealliance/wizer/issues/123</a> to ask for an example of how to define a custom WASI context when using Wizer.</p>\n<p>It might be worth augmenting the documentation around <code>add_to_linker_sync</code> and similar methods to clarify the closure may execute one or more times during an invocation of an exported Wasm method. That was definitely missing from my mental model and surprised me.</p>\n</blockquote>",
        "id": 486102464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733321724
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723#issuecomment-2517888034\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<p>Sorry, I missed that context at the end of your post. Yes, we should improve the docs to describe that those linker closures shouldn’t perform side effects.</p>\n</blockquote>",
        "id": 486128253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733328478
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723#issuecomment-2518631854\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<p>I'll admit I'm a bit lost about what to do about this. The problem here is that you're re-initializing <code>WasiCtx</code> so the guest itself is repeatedly reading and getting more data. The guest is waiting for a 0 return value signaling \"eof\" but every time it reads the context is reinitialized which provides more data.</p>\n<p>We could certainly provide more notes in <code>add_to_linker</code> and friends about the intent of the closure, but would that really help here? The <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview1/fn.add_to_linker_sync.html\">documentation already says</a> that the closure should be a \"projection\" which isn't as clear as it could be, but regardless that's a pretty niche location to document this and I suspect when the app here \"hangs\" you probably wouldn't go consult <code>add_to_linker_sync</code> as the first thing to see what went wrong.</p>\n<p>So all-in-all I agree that the docs of <code>add_to_linker_sync</code> could be improved, but would that really meaningfully change the experience here?</p>\n</blockquote>",
        "id": 486185109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733349017
    },
    {
        "content": "<p>jeffcharles <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723#issuecomment-2518715691\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9723\">issue #9723</a>:</p>\n<blockquote>\n<blockquote>\n<p>The problem here is that you're re-initializing WasiCtx so the guest itself is repeatedly reading and getting more data. The guest is waiting for a 0 return value signaling \"eof\" but every time it reads the context is reinitialized which provides more data.</p>\n</blockquote>\n<p>So technically it's the <code>MemoryInputPipe::new(...)</code> inside the closure that's introducing the problem for me, not the context reinitialization (even if it's not ideal).</p>\n<blockquote>\n<p>would that really help here?</p>\n</blockquote>\n<p>That's admittedly subjective. In my case, it would have. I actually was looking at how this function was called first when my program started hanging because my initial implementation was locking a mutex inside this closure to retrieve the byte array I wanted to pass to <code>stdin</code> and I wanted to check that I didn't introduce a deadlock which is what I thought was happening initially. And then I got confused when I noticed the closure was being called more than once because that didn't align with my prior mental model.</p>\n<p>Don't get me wrong, I would rather not re-initialize a <code>WasiCtx</code> in that closure, that's just a result of me using Wizer and Wizer seemingly not letting me set the stdin for its <code>WasiCtx</code>. But, it really wasn't clear to me that <code>add_to_linker_sync</code> would be called while inside a Wasm call.</p>\n</blockquote>",
        "id": 486192223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733352543
    }
]