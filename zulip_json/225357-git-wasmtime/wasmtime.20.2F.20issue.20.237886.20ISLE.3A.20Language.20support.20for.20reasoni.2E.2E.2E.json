[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7886\">issue #7886</a>:</p>\n<blockquote>\n<p>We've had a few issues recently with unbounded recursion in ISLE rules causing compilation time blowup: #7874 and #6968. As ISLE supports recursion, but unbounded recursion has caused some surprising behavior in the past, it would be nice if we had some tools to better reason about its use.</p>\n<h4>Feature</h4>\n<p>The straw-person feature I'd like to propose here is comes in two parts:</p>\n<ol>\n<li>A new annotation for rule declarations (<code>decl</code> not <code>rule</code>), indicating the argument that is considered to be shrinking for the purpose of structural recursion,</li>\n<li>The ISLE frontend is modified to analyze strongly connected components of decls, and all rules involved in cycles must have decls that include a structural recursion annotation.</li>\n</ol>\n<p>Note one important detail: there's no analysis of whether or not structural recursion is actually happening on the annotated parameter, just that the annotation is present. The reason for this is that I believe forcing rule authors to think about how structural recursion happening by raising an error when the annotation is missing will be enough to avoid these sorts of cases. Additionally we could forbid structural recursion on specific types of arguments: forbidding structural recursion annotations on <code>Value</code> arguments would be a great way to avoid accidentally introducing exponential egraph rule behavior for large input functions.</p>\n<p>More concretely, here's an example of what I'm thinking of, modifying the changes introduced in #7882:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">multi</span><span class=\"w\"> </span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"ss\">:struct</span><span class=\"w\"> </span><span class=\"nv\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">sextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">unary_op</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_lt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">reducible_modular_op</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">binary_op</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_lt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">reducible_modular_op</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Worst possible syntax here to forbid recursion through Value-typed arguments</span>\n<span class=\"p\">(</span><span class=\"nv\">forbid_recursion</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The important parts in this example are the <code>:struct</code> annotation on the <code>u8</code> parameter to <code>will_simplify_with_ireduce_rec</code>, and forbidding structural recursion on values of type <code>Value</code>.</p>\n<p>There is already <a href=\"https://coq.inria.fr/doc/V8.18.0/refman/using/libraries/funind.html\">prior art for this sort of annotation in the coq theorem prover</a> (though in that case the annotation is actually checked) where it's used to annotate recursive parameters when it's not obvious to the tool already.</p>\n<h4>Benefit</h4>\n<p>This would give us a mechanism for documenting structural recursion in ISLE rules as well as a way to forbid recursion on values whose structure we determine are problematic, providing a great place for user-friendly errors in the ISLE frontend.</p>\n<h4>Alternatives</h4>\n<p>An alternative proposal that @avanhatt had was to make fuel for recursive functions a language builtin, requiring the caller to explicitly provide fuel when calling a function from a recursive group. This would make it unavoidable that recursion would be finite in ISLE, and would include three changes:</p>\n<ol>\n<li>As with the above approach, we would need to identify recursive rule groups by running strongly connected components</li>\n<li>We would need to introduce a way to supply the fuel explicitly when calling into a recursive group</li>\n<li>Codegen would need to change to support threading the fuel parameter through recursive functions</li>\n</ol>\n<p>One open question here is if fuel would be threaded through generated functions, or passed in as an argument only. While the former would more accurately bound the number of calls in the recursive group, passing the recursion depth in only would be a simpler implementation choice, and may be fine for our purposes.<br>\n</p>\n</blockquote>",
        "id": 420310845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707328869
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7886\">issue #7886</a>:</p>\n<blockquote>\n<p>We've had a few issues recently with unbounded recursion in ISLE rules causing compilation time blowup: #7874 and #6968. As ISLE supports recursion, but unbounded recursion has caused some surprising behavior in the past, it would be nice if we had some tools to better reason about its use.</p>\n<h4>Feature</h4>\n<p>The straw-person feature I'd like to propose here is comes in two parts:</p>\n<ol>\n<li>A new annotation for rule declarations (<code>decl</code> not <code>rule</code>), indicating the argument that is considered to be shrinking for the purpose of structural recursion,</li>\n<li>The ISLE frontend is modified to analyze strongly connected components of decls, and all rules involved in cycles must have decls that include a structural recursion annotation.</li>\n</ol>\n<p>Note one important detail: there's no analysis of whether or not structural recursion is actually happening on the annotated parameter, just that the annotation is present. The reason for this is that I believe forcing rule authors to think about how structural recursion happening by raising an error when the annotation is missing will be enough to avoid these sorts of cases. Additionally we could forbid structural recursion on specific types of arguments: forbidding structural recursion annotations on <code>Value</code> arguments would be a great way to avoid accidentally introducing exponential egraph rule behavior for large input functions.</p>\n<p>More concretely, here's an example of what I'm thinking of, modifying the changes introduced in #7882:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">multi</span><span class=\"w\"> </span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"ss\">:struct</span><span class=\"w\"> </span><span class=\"nv\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">sextend</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">unary_op</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_lt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">reducible_modular_op</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"nv\">x@</span><span class=\"p\">(</span><span class=\"nv\">binary_op</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_lt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">reducible_modular_op</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">if-let</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">will_simplify_with_ireduce_rec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">u8_sub</span><span class=\"w\"> </span><span class=\"nv\">depth</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\">;; Worst possible syntax here to forbid recursion through Value-typed arguments</span>\n<span class=\"p\">(</span><span class=\"nv\">forbid_recursion</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The important parts in this example are the <code>:struct</code> annotation on the <code>u8</code> parameter to <code>will_simplify_with_ireduce_rec</code>, and forbidding structural recursion on values of type <code>Value</code>.</p>\n<p>There is already <a href=\"https://coq.inria.fr/doc/V8.18.0/refman/using/libraries/funind.html\">prior art for this sort of annotation in the coq theorem prover</a> (though in that case the annotation is actually checked) where it's used to annotate recursive parameters when it's not obvious to the tool already.</p>\n<h4>Benefit</h4>\n<p>This would give us a mechanism for documenting structural recursion in ISLE rules as well as a way to forbid recursion on values whose structure we determine are problematic, providing a great place for user-friendly errors in the ISLE frontend.</p>\n<h4>Alternatives</h4>\n<p>An alternative proposal that @avanhatt had was to make fuel for recursive functions a language builtin, requiring the caller to explicitly provide fuel when calling a function from a recursive group. This would make it unavoidable that recursion would be finite in ISLE, and would include three changes:</p>\n<ol>\n<li>As with the above approach, we would need to identify recursive rule groups by running strongly connected components</li>\n<li>We would need to introduce a way to supply the fuel explicitly when calling into a recursive group</li>\n<li>Codegen would need to change to support threading the fuel parameter through recursive functions</li>\n</ol>\n<p>One open question here is if fuel would be threaded through generated functions, or passed in as an argument only. While the former would more accurately bound the number of calls in the recursive group, passing the recursion depth in only would be a simpler implementation choice, and may be fine for our purposes.<br>\n</p>\n</blockquote>",
        "id": 420317010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707330850
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the isle label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7886\">Issue #7886</a>.</p>",
        "id": 438215962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715552047
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7886#issuecomment-2106391432\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7886\">issue #7886</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 438215979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715552082
    }
]