[
    {
        "content": "<p>iximeow opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue? Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using? <code>3179dcf</code> (<code>master</code>)</li>\n<li>If relevant, can you include some extra information about your environment? n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 189842901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583446460
    },
    {
        "content": "<p>iximeow labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue? Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using? <code>3179dcf</code> (<code>master</code>)</li>\n<li>If relevant, can you include some extra information about your environment? n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 189842902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583446460
    },
    {
        "content": "<p>iximeow labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue? Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using? <code>3179dcf</code> (<code>master</code>)</li>\n<li>If relevant, can you include some extra information about your environment? n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 189842903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583446460
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?<ul>\n<li>Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n</ul>\n</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using?<ul>\n<li><code>3179dcf</code> (<code>master</code>)</li>\n</ul>\n</li>\n<li>If relevant, can you include some extra information about your environment?<ul>\n<li>n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 189842950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583446503
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?<ul>\n<li>Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n</ul>\n</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using?<ul>\n<li><code>3179dcf</code> (<code>master</code>)</li>\n</ul>\n</li>\n<li>If relevant, can you include some extra information about your environment?<ul>\n<li>n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes? Edit: this depends on other questions like, can <code>TlsGetAddr</code> be hoisted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/licm.rs#L139-L141\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/licm.rs#L139-L141\">in LICM</a>? Eligible for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/dce.rs#L14-L15\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/dce.rs#L14-L15\">DCE</a>? And interaction with the verifier?  Given that it <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3296-R3299\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3296-R3299\">includes a call</a> I think this might be the right way to go about it. And since the call takes an argument <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3285-R3290\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3285-R3290\">in rdi</a>, if there needs to be a signature for verifier reasons, it looks like we can synthesize one of the form <code>(rdi) -&gt; rax</code>?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 189844603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583447590
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595732420\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595732420\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<p>This is now biting us in Spidermonkey too, where we only build the relevant backends, so this is high priority for us.</p>\n<p>We could add supplementary builds with disabled features in automation, to make sure they don't get broken anymore.</p>\n</blockquote>",
        "id": 189884219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583495094
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595732740\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595732740\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<p>I initially tried adding <code>is_call</code>, but that requires <code>analyze_call</code> to return a valid <code>CallInfo</code>. As the instructions in question are not normal calls and don't have a <code>Signature</code>, it is not possible to return a valid <code>CallInfo</code>.</p>\n<blockquote>\n<p>can TlsGetAddr be hoisted in LICM? Eligible for DCE?</p>\n</blockquote>\n<p>Yes and yes, I think.</p>\n<blockquote>\n<p>And since the call takes an argument in rdi, if there needs to be a signature for verifier reasons, it looks like we can synthesize one of the form (rdi) -&gt; rax?</p>\n</blockquote>\n<p>How would that signature get assigned to the instruction? It is not possible to lower the instructions to libcalls, as they require a very specific combination of x86 instructions for the linker to handle it correctly.</p>\n<blockquote>\n<p>was surprised to learn cargo build --no-default-features --features std didn't work to show this, but that seems to be a consequence of this issue.</p>\n</blockquote>\n<p>During compilation the build script detects the current architecture and automatically enables support for it. (at least if there are no archs enabled through feature flags)</p>\n</blockquote>",
        "id": 189884291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583495155
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595737669\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595737669\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<p>So my current thinking is the following: since this can't be emulated properly with a call, maybe the proper way here is to add a new accessor on the opcode? I've got a wip patch that does this, with a new property called \"clobbers_all_regs\", and which is tested during register allocation in place of the opcode comparisons. I thought about other names, like \"emulates_call\", but this seems to be the most explicit, at the very least.</p>\n</blockquote>",
        "id": 189885369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583496022
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595739050\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595739050\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<blockquote>\n<p>I've got a wip patch that does this, with a new property called \"clobbers_all_regs\"</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 189885567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583496266
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595739467\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240#issuecomment-595739467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<p>Was actually working on the same, but named it <code>clobbers_all</code> :)</p>\n</blockquote>",
        "id": 189885617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583496340
    },
    {
        "content": "<p>bnjbvr closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1240\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1240\">Issue #1240</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?<ul>\n<li>Build <code>cranelift-codegen</code> targeting only one architecture (as an example, clone <a href=\"https://github.com/iximeow/cautious-pancake\" target=\"_blank\" title=\"https://github.com/iximeow/cautious-pancake\">https://github.com/iximeow/cautious-pancake</a> and build it)</li>\n</ul>\n</li>\n<li>What do you expect to happen?<ul>\n<li>Compilation should succeed.</li>\n</ul>\n</li>\n<li>What does actually happen?<ul>\n<li>Compilation does not succeed.</li>\n</ul>\n</li>\n<li>Which Cranelift version / commit hash / branch are you using?<ul>\n<li><code>3179dcf</code> (<code>master</code>)</li>\n</ul>\n</li>\n<li>If relevant, can you include some extra information about your environment?<ul>\n<li>n/a - reproducible anywhere Cargo runs.</li>\n</ul>\n</li>\n</ul>\n<p>This was first mentioned by @stefson in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595205081\">this comment</a>.</p>\n<p>I agree with @bjorn3's assessment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174#issuecomment-595217112\">in reply</a>. Since TLS access assumes a C ABI, would it make sense to just add <code>is_call</code> as an attribute to these opcodes? Edit: this depends on other questions like, can <code>TlsGetAddr</code> be hoisted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/licm.rs#L139-L141\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/licm.rs#L139-L141\">in LICM</a>? Eligible for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/dce.rs#L14-L15\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/dce.rs#L14-L15\">DCE</a>? And interaction with the verifier?  Given that it <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3296-R3299\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3296-R3299\">includes a call</a> I think this might be the right way to go about it. And since the call takes an argument <a href=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3285-R3290\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1174/files#diff-868c004db6bfd05b9f83082219c3389fR3285-R3290\">in rdi</a>, if there needs to be a signature for verifier reasons, it looks like we can synthesize one of the form <code>(rdi) -&gt; rax</code>?</p>\n<p>A wider concern: does anyone have ideas on how we'd build Cranelift under these different, more specific, feature flag combinations? I was surprised to learn <code>cargo build --no-default-features --features std</code> didn't work to show this, but that seems to be a consequence of <a href=\"https://github.com/rust-lang/cargo/issues/4753\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo/issues/4753\">this issue</a>. It seems appropriate to have some test crates that build under feature flag combinations we want to support, so issues like this get caught in CI. It would raise build times a bit, but I'm not sure how much. Does that sound acceptable?</p>\n</blockquote>",
        "id": 191459383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584962372
    }
]