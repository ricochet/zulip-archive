[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313#issuecomment-914831154\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313\">issue #3313</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 252396538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631067225
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313#issuecomment-915357035\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313\">issue #3313</a>:</p>\n<blockquote>\n<p>Thinking about this, the cases we're dealing with are:</p>\n<ol>\n<li>When \"exiting native\" by calling wasm, if that traps we never call \"entering native\" or anything else</li>\n<li>When \"entering native\" by entering a host function, if that traps we currently don't call \"exiting native\" as we exit with the trap.</li>\n<li>When the host function returns a normal trap in the implementation, it looks like <code>Func::new</code> doesn't call \"exiting native\" correctly, but <code>Func::wrap</code> does. </li>\n<li>When \"exiting native\" by returning from a host function, if that traps we still call \"entering native\" on the other side.</li>\n<li>When \"entering native\" by returning from wasm execution, if that traps we don't call anything else and just bail out.</li>\n</ol>\n<p>Ideally I want the hooks installed into the <code>Store</code> to be simple and we track most other things for you in Wasmtime itself. I think the best way we can interpret this is with guidelines of:</p>\n<ul>\n<li>If a trap happen when \"entering\" a state, then the state isn't changed. In this case the \"entering\" isn't defined by the callback names today, but rather entering into wasm by calling it or entering native by calling a host function. </li>\n<li>If a trap happens when \"exiting\" a state, then the state is still changed. (e.g. returning from a host call or returning from a wasm call).</li>\n</ul>\n<p>To model this we probably want to remove the enter/exit callbacks and instead have something like one callback which receives an enum describing what's happening. The enum would have 4 values of 1/2/4/5 above, and perhaps other options as well like \"I'm exiting the host from a hostcall but a trap was returned there anyway\". With that sort of modeling the behavior we need to update is:</p>\n<ol>\n<li>No change. By failing the \"enter wasm\" state you remain in \"native\" state, so no future callbacks necessary.</li>\n<li>No change. By failing the \"enter native\" state we remain in \"wasm\", so no \"exiting native\" is necessary.</li>\n<li>Needs a bugfix in <code>Func::new</code></li>\n<li>No change. By failing the \"exit host\" state we still force entry into the \"wasm\" state, which means it's correct.</li>\n<li>No change. By failing the \"exit wasm\" state we're still forced back into the native state.</li>\n</ol>\n<p>Does that make sense? I had to think about this for awhile... Basically I think we may want to change the interface from two callbacks to one-with-arguments where the arguments describe what's happening?</p>\n</blockquote>",
        "id": 252484400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631116130
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313#issuecomment-915423730\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313\">issue #3313</a>:</p>\n<blockquote>\n<p>Yes, I really like the design change to one-with-arguments: the argument to describing whether the state transition is a call or a return fixes another ambiguity.</p>\n<p>I also will change the function to take a <code>Caller</code>, instead of the state <code>T</code>.</p>\n</blockquote>",
        "id": 252498860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631121497
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313#issuecomment-915446376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313\">issue #3313</a>:</p>\n<blockquote>\n<p>I don't think we can pass a <code>Caller&lt;'_, T&gt;</code> without extra work to be done because the callback itself lives within the <code>Caller</code>, but is there a reason you think that the callback may need access to the whole store?</p>\n</blockquote>",
        "id": 252503790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631123507
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313#issuecomment-915473500\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3313\">issue #3313</a>:</p>\n<blockquote>\n<p>You're right, we dont have Caller available in all of these contexts. I thought it would be interesting to be able to inspect/modify fuel, but it doesn't make sense for this mechanism</p>\n</blockquote>",
        "id": 252510363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631125902
    }
]