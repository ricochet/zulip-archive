[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352#issuecomment-1778105735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352\">issue #7352</a>:</p>\n<blockquote>\n<p>A performance measurement, also:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">fastly2</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">hyperfine</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"p\">,</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"s\">\"target/release/wasmtime compile -C pcc={pcc} --target x86_64 ../wasm-tests/spidermonkey.wasm\"</span>\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:     <span class=\"mf\">995.9</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">13.1</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">7685.1</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">347.6</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:   <span class=\"mf\">981.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"mf\">1015.4</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">1.009</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.008</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">7.828</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.349</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">0.998</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">1.026</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Summary</span>\n<span class=\"w\">  </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">ran</span>\n<span class=\"w\">    </span><span class=\"mf\">1.01</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>or in other words, ~1% overhead.</p>\n<p>Prior to this PR, turning on PCC automatically enabled the regalloc checker as well; I found this to have much higher overhead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">fastly2</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">hyperfine</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"n\">checker</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"p\">,</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"s\">\"target/release/wasmtime compile -C pcc=yes -C cranelift-regalloc_checker={checker} --target x86_64 ../wasm-tests/spidermonkey.wasm\"</span>\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">regalloc_checker</span><span class=\"o\">=</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">1.034</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.010</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">7.798</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.362</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">1.018</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">1.055</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">regalloc_checker</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">1.741</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.033</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">15.546</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.393</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">1.710</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">1.820</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Summary</span>\n<span class=\"w\">  </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">regalloc_checker</span><span class=\"o\">=</span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">ran</span>\n<span class=\"w\">    </span><span class=\"mf\">1.68</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.04</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">pcc</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">regalloc_checker</span><span class=\"o\">=</span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>or about 68% above just PCC. Given that, IMHO a good design tradeoff point is to run PCC in production, but not the regalloc checker; we already fuzz continuously with the latter. It can always be turned on explicitly.</p>\n</blockquote>",
        "id": 398366221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698184566
    },
    {
        "content": "<p>jeffparsons <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352#issuecomment-1778123138\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352\">issue #7352</a>:</p>\n<blockquote>\n<p>An inquisitive member of the peanut gallery would like to know if you have written anything high-level about your goals for this work? I've seen the PRs flying by and it sounds really cool, but I don't understand any of the context. In particular, I've been wondering:</p>\n<ul>\n<li>Is this primarily aimed at having another layer of safety without compromising performance, or does it unlock opportunities for increased performance without having to compromise on existing safety by replacing blunter mechanisms?</li>\n<li>Are there particular workloads that you expect this work to benefit?</li>\n<li>If increased performance is a goal, do you have any targets/estimates/hopes in mind?</li>\n</ul>\n</blockquote>",
        "id": 398367662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698185390
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352#issuecomment-1778148227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352\">issue #7352</a>:</p>\n<blockquote>\n<p>@jeffparsons great questions! I haven't written anything beyond the initial issue proposing this work in #6090 -- the last section of that issue writeup describes the proof-carrying code / \"memory capabilities\" model. I plan to write more eventually.</p>\n<p>The goal doesn't have anything to do with perf -- the generated code doesn't change, and this doesn't allow any more aggressive strategies to be used -- but rather, risk mitigation. We've had a few CVEs that have allowed sandbox escapes from Wasmtime due to miscompiles, and so I want to build infrastructure that does translation validation to prove a given compilation artifact doesn't have such an issue. Long-term, it could also be used to verify other invariants (e.g., @fitzgen and I have talked a bit about how it could be used to provide additional safety in the implementation of Wasm GC).</p>\n</blockquote>",
        "id": 398369767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698186674
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352#issuecomment-1780289116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7352\">issue #7352</a>:</p>\n<blockquote>\n<p>I reworked the whole PCC implementation for x64 based on the above feedback -- removing the ability to pattern-match into <code>Gpr</code> / <code>Xmm</code> types forced a transpose of the whole thing, but as a side-effect, I think the explicit case breakdown is kind of nice in its thoroughness. I was able to actually remove the <code>_</code> catch-all and list every instruction kind explicitly, so we'll be forced to think about semantics (and catch memory accesses, etc.) whenever we add a new instruction kind. Let me know what you think!</p>\n</blockquote>",
        "id": 398585974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698284863
    }
]