[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a fairly simple improvement. Cranelift's <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.scalar_to_vector\"><code>scalar_to_vector</code> instruction</a> grabs a scalar value and places it at the bottom of a vector register.</p>\n<p>We translate this into the <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1115-vector-integer-merge-instructions\"><code>vmerge.vxm</code> instruction</a> in the RISC-V backend.</p>\n<p>This is all fairly ok, but we don't have a rule to match the <code>vmerge.vim</code> instruction that can instead place an immediate value instead of a register.</p>\n<p>Implementing this should be fairly simple, we can create a rule similar to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/lower.isle#L2340-L2353\">existing ones</a> but using a <code>imm5_from_value</code> extractror:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm5_from_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>This <code>imm5_from_value</code> extractor doesn't exist yet, but we already have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/inst.isle#L1837C33-L1837C33\">equivalent in the <code>replicated_imm5</code> extractor</a>. It should be fairly easy to extract that into it's own separate extractor for use in this new rule.</p>\n<p>See the existing <code>uimm5_from_value</code> extractor for help.</p>\n<p>If anyone needs help working on this issue let me know!</p>\n</blockquote>",
        "id": 395543146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696772255
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:E-easy label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">Issue #7189</a>.</p>",
        "id": 395543147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696772255
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">Issue #7189</a>.</p>",
        "id": 395543148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696772255
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a fairly simple improvement. Cranelift's <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.scalar_to_vector\"><code>scalar_to_vector</code> instruction</a> grabs a scalar value and places it at the bottom of a vector register.</p>\n<p>We translate this into the <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1115-vector-integer-merge-instructions\"><code>vmerge.vxm</code> instruction</a> in the RISC-V backend.</p>\n<p>This is all fairly ok, but we don't have a rule to match the <code>vmerge.vim</code> instruction that can instead place an immediate value instead of a register.</p>\n<p>Implementing this should be fairly simple, we can create a rule similar to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/lower.isle#L2340-L2353\">existing ones</a> but using a <code>imm5_from_value</code> extractror:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm5_from_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>This <code>imm5_from_value</code> extractor doesn't exist yet, but we already have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/inst.isle#L1837C33-L1837C33\">equivalent in the <code>replicated_imm5</code> extractor</a>. It should be fairly easy to extract that into it's own separate extractor for use in this new rule.</p>\n<p>See the existing <code>uimm5_from_value</code> extractor for help.</p>\n<p>If anyone needs help working on this issue let me know!</p>\n</blockquote>",
        "id": 395543160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696772262
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a fairly simple improvement. Cranelift's <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.scalar_to_vector\"><code>scalar_to_vector</code> instruction</a> grabs a scalar value and places it at the bottom of a vector register.</p>\n<p>We translate this into the <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1115-vector-integer-merge-instructions\"><code>vmerge.vxm</code> instruction</a> in the RISC-V backend.</p>\n<p>This is all fairly ok, but we don't have a rule to match the <code>vmerge.vim</code> instruction that can place an immediate value instead of a register.</p>\n<p>Implementing this should be fairly simple, we can create a rule similar to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/lower.isle#L2340-L2353\">existing ones</a> but using a <code>imm5_from_value</code> extractror:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm5_from_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>This <code>imm5_from_value</code> extractor doesn't exist yet, but we already have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/inst.isle#L1837C33-L1837C33\">equivalent in the <code>replicated_imm5</code> extractor</a>. It should be fairly easy to extract that into it's own separate extractor for use in this new rule.</p>\n<p>See the existing <code>uimm5_from_value</code> extractor for help.</p>\n<p>If anyone needs help working on this issue let me know!</p>\n</blockquote>",
        "id": 395543350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696772401
    },
    {
        "content": "<p>BieVic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189#issuecomment-1759235580\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p>Hey! I'm fairly new to Cranelift but would like to give it a try.</p>\n</blockquote>",
        "id": 396247894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697102093
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189#issuecomment-1759486799\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p>Awesome <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Let me know if you need any help getting started!</p>\n</blockquote>",
        "id": 396275751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697112802
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7189\">issue #7189</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a fairly simple improvement. Cranelift's <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.scalar_to_vector\"><code>scalar_to_vector</code> instruction</a> grabs a scalar value and places it at the bottom of a vector register.</p>\n<p>We translate this into the <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1115-vector-integer-merge-instructions\"><code>vmerge.vxm</code> instruction</a> in the RISC-V backend.</p>\n<p>This is all fairly ok, but we don't have a rule to match the <code>vmerge.vim</code> instruction that can place an immediate value instead of a register.</p>\n<p>Implementing this should be fairly simple, we can create a rule similar to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/lower.isle#L2340-L2353\">existing ones</a> but using a <code>imm5_from_value</code> extractror:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_vec_fits_in_register</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scalar_to_vector</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm5_from_value</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>This <code>imm5_from_value</code> extractor doesn't exist yet, but we already have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fef8a90f258483ac6c2e470d3de277a743d5d392/cranelift/codegen/src/isa/riscv64/inst.isle#L1837C33-L1837C33\">equivalent in the <code>replicated_imm5</code> extractor</a>. It should be fairly easy to extract that into it's own separate extractor for use in this new rule.</p>\n<p>See the existing <code>uimm5_from_value</code> extractor for help.</p>\n<p>If anyone needs help working on this issue let me know!</p>\n</blockquote>",
        "id": 397543291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697734345
    }
]