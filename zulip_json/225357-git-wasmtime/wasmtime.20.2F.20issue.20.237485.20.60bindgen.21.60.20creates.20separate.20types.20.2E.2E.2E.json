[
    {
        "content": "<p>jeffparsons opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>Originally discussed on Zulip here: <a href=\"#narrow/stream/217126-wasmtime/topic/Sharing.20generated.20code.20between.20same.20interface.20import.2Fexport\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Sharing.20generated.20code.20between.20same.20interface.20import.2Fexport</a></p>\n<p>It would sometimes be convenient to share the generated types between imports and exports of an interface, e.g. if one component calls the host though a given interface and then the host forwards the call to some other component in an entirely separate instance using the same interface.</p>\n<p>This is currently not possible, and so conversion between the structurally-identical but separate types must be done manually. If there is a good reason why the imported and exported WIT types should be generated as separate Rust types, perhaps conversions between them should be generated for when you know that's what you want to do?</p>\n</blockquote>",
        "id": 400500745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699265772
    },
    {
        "content": "<p>jeffparsons edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>Originally discussed on Zulip here: <a href=\"#narrow/stream/217126-wasmtime/topic/Sharing.20generated.20code.20between.20same.20interface.20import.2Fexport\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Sharing.20generated.20code.20between.20same.20interface.20import.2Fexport</a></p>\n<p>It would sometimes be convenient to share the generated types between imports and exports of an interface, e.g. if one component calls the host though a given interface and then the host forwards the call to some other component in an entirely separate instance using the same interface.</p>\n<p>This is currently not possible, and so conversion between the structurally-identical but separate types must be done manually. If there is a good reason why the imported and exported WIT types should be generated as separate Rust types, perhaps conversions between them should be generated for when you know that's what you want to do?</p>\n<p><strong>EDIT:</strong> Another use case this would help is extending generated types with extra behavior and sharing that through a crate.</p>\n</blockquote>",
        "id": 401057979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699496931
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485#issuecomment-1804361399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>I think one way to possibly solve this would be to create some sort of has for a type which models the structure and then deduplicate based on this hash. That would chiefly have to incorporate differences in resources and additionally details like borrowing specific to Rust. Afterwards deduplication based on that shouldn't be too too hard.</p>\n</blockquote>",
        "id": 401214761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699555128
    },
    {
        "content": "<p>jeffparsons <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485#issuecomment-1806636997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>Small tangent: it sounds like this could also be used for the dynamic representations to avoid the need for deep equivalence tests on each call. Does that sound right?<br>\n</p>\n</blockquote>",
        "id": 401465760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699669923
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485#issuecomment-1808532694\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>Sorry I'm not sure what you mean, can you clarify?</p>\n</blockquote>",
        "id": 401806613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699893762
    },
    {
        "content": "<p>jeffparsons <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485#issuecomment-1868417981\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7485\">issue #7485</a>:</p>\n<blockquote>\n<p>Ah, sorry, I forgot about this.</p>\n<p>There's a decent chance I've misunderstood something, but my current understanding is that when you call a component function from a host dynamically (i.e. using <code>wasmtime::component::Func</code>), it first <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b583c54fda13b53dea362861125dd1e2ced1381d/crates/wasmtime/src/component/func.rs#L365C27-L365C27\">performs</a> a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b583c54fda13b53dea362861125dd1e2ced1381d/crates/wasmtime/src/component/types.rs#L678\">deep structural type-check</a>.</p>\n<p>If all types that are capable of structural equivalence had a content hash associated with them, could that be used in an additional fast path in <code>check</code> to save from doing the deep structural check with every call? Maybe this is only relevant when taking values from one store and passing them to a different store (otherwise it looks like there is an existing fast path??) but that is a use case that is important to me.</p>\n<p>All that said, I'm not actually champing at the bit for higher performance or anything; I'm currently only tinkering on hobby stuff, and only mentioned this at all because I'd been looking at the relevant code recently and wondered if it would be low-hanging fruit in a future world where component types already had a convenient hash hanging around.</p>\n</blockquote>",
        "id": 409774842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703385589
    }
]