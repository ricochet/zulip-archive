[
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1242\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1242\">PR #1242</a> from <code>yanix-io-error</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR may seem somewhat controversial at first, but hear me<br>\nout first. Currently, Yanix would return a custom error that's a<br>\nwrapper around three other error types returned by various entities<br>\ninside Rust's <code>libstd</code>. In particular, Yanix's error type would wrap<br>\n<code>io::Error</code>, <code>num::TryFromIntError</code> and <code>ffi::NulError</code>. It turns<br>\nout that there is a natural conversion between the first and the last<br>\nand provided by the standard library, i.e., <code>From&lt;ffi::NulError&gt; for io::Error</code><br>\nis provided. So at the surface it may seem that only the first two<br>\nwrapped error types are worth keeping.</p>\n<p>Digging a little bit deeper into <code>libstd</code>, <code>num::TryFromIntError</code><br>\nis essentially speaking only a marker that the integral conversion<br>\nwent wrong. The struct implementing this error stores a unit type,<br>\nand nothing more. It therefore seems like a waste to wrap this<br>\nparticular error when we could unify everything under <code>io::Error</code>.<br>\nAnd so, whenever we perform an int conversion, I suggest we simply<br>\nremap the error to <code>io::Error::from_raw_os_error(libc::EOVERFLOW)</code><br>\nsince this carries a comparable amount of information.</p>\n<p>As a result of completely discarding <code>yanix::Error</code> custom error type,<br>\nwe are invariably simplifying <code>yanix</code> itself, but also allowing<br>\n<code>wasi-common</code> to simplify in several places as well.</p>\n<p>I'm curious to see what you guys reckon!</p>\n</blockquote>",
        "id": 189890458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583499968
    }
]