[
    {
        "content": "<p>plicease opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<ol>\n<li>Adjust the multi.c example that comes with wasmtime #1715 </li>\n<li>compile and run on aarch64 </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>pi1% env RUST_BACKTRACE=1 ./a.out\nInitializing...\nCompiling module...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not implemented&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:1203:18\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n  12: cranelift_codegen::isa::aarch64::lower::lower_insn_to_regs\n  13: cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower\n  14: cranelift_codegen::machinst::compile::compile\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n  16: cranelift_codegen::context::Context::compile\n  17: cranelift_codegen::context::Context::compile_and_emit\n  18: wasmtime_jit::compiler::make_trampoline\n  19: wasmtime_jit::compiler::Compiler::compile\n  20: wasmtime_jit::instantiate::CompiledModule::new\n  21: wasmtime::module::Module::from_binary_unchecked\n  22: wasmtime::module::Module::from_binary\n  23: wasmtime_module_new\n  24: main\n  25: __libc_start_main\n  26: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 3705270992\nAbort (core dumped)\n</code></pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expect the program to run without fail as it does on x86_64.  multi_value isn't supported on aarch64 I'd expect the config option to fail (although I note that it doesn't have a return value).  I did do a search on github issues and PRs for multi values and I didn't see anything relevant so I wasn't 100% sure if this just wasn't supported yet or ever.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is 0.16.0, bit I've seen it in dev versions including the 8f2d442.  I'm using the binaries from the github releases tab.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>Raspberry Pi Ubuntu Focal </p>\n<div class=\"codehilite\"><pre><span></span><code>pi1% uname -a\nLinux pi1 5.4.0-1008-raspi #8-Ubuntu SMP Wed Apr 8 11:13:06 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></div>\n\n\n<p>I originally saw this in my CI for perl Wasm bindings:<br>\n<a href=\"https://github.com/perlwasm/Wasm/issues/58\">https://github.com/perlwasm/Wasm/issues/58</a><br>\nBut only just now verified that I could reproduce from the wasmtime example.</p>\n</blockquote>",
        "id": 197744097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589571946
    },
    {
        "content": "<p>plicease labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<ol>\n<li>Adjust the multi.c example that comes with wasmtime #1715 </li>\n<li>compile and run on aarch64 </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>pi1% env RUST_BACKTRACE=1 ./a.out\nInitializing...\nCompiling module...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not implemented&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:1203:18\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n  12: cranelift_codegen::isa::aarch64::lower::lower_insn_to_regs\n  13: cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower\n  14: cranelift_codegen::machinst::compile::compile\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n  16: cranelift_codegen::context::Context::compile\n  17: cranelift_codegen::context::Context::compile_and_emit\n  18: wasmtime_jit::compiler::make_trampoline\n  19: wasmtime_jit::compiler::Compiler::compile\n  20: wasmtime_jit::instantiate::CompiledModule::new\n  21: wasmtime::module::Module::from_binary_unchecked\n  22: wasmtime::module::Module::from_binary\n  23: wasmtime_module_new\n  24: main\n  25: __libc_start_main\n  26: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 3705270992\nAbort (core dumped)\n</code></pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expect the program to run without fail as it does on x86_64.  multi_value isn't supported on aarch64 I'd expect the config option to fail (although I note that it doesn't have a return value).  I did do a search on github issues and PRs for multi values and I didn't see anything relevant so I wasn't 100% sure if this just wasn't supported yet or ever.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is 0.16.0, bit I've seen it in dev versions including the 8f2d442.  I'm using the binaries from the github releases tab.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>Raspberry Pi Ubuntu Focal </p>\n<div class=\"codehilite\"><pre><span></span><code>pi1% uname -a\nLinux pi1 5.4.0-1008-raspi #8-Ubuntu SMP Wed Apr 8 11:13:06 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></div>\n\n\n<p>I originally saw this in my CI for perl Wasm bindings:<br>\n<a href=\"https://github.com/perlwasm/Wasm/issues/58\">https://github.com/perlwasm/Wasm/issues/58</a><br>\nBut only just now verified that I could reproduce from the wasmtime example.</p>\n</blockquote>",
        "id": 197744098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589571946
    },
    {
        "content": "<p>plicease edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<ol>\n<li>Adjust the multi.c example that comes with wasmtime #1715 </li>\n<li>compile and run on aarch64 </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>pi1% env RUST_BACKTRACE=1 ./a.out\nInitializing...\nCompiling module...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not implemented&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:1203:18\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n  12: cranelift_codegen::isa::aarch64::lower::lower_insn_to_regs\n  13: cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower\n  14: cranelift_codegen::machinst::compile::compile\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n  16: cranelift_codegen::context::Context::compile\n  17: cranelift_codegen::context::Context::compile_and_emit\n  18: wasmtime_jit::compiler::make_trampoline\n  19: wasmtime_jit::compiler::Compiler::compile\n  20: wasmtime_jit::instantiate::CompiledModule::new\n  21: wasmtime::module::Module::from_binary_unchecked\n  22: wasmtime::module::Module::from_binary\n  23: wasmtime_module_new\n  24: main\n  25: __libc_start_main\n  26: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 3705270992\nAbort (core dumped)\n</code></pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expect the program to run without fail as it does on x86_64.  If multi_value isn't supported on aarch64 I'd expect the config option to fail (although I note that it doesn't have a return value).  I did do a search on github issues and PRs for multi values and I didn't see anything relevant so I wasn't 100% sure if this just wasn't supported yet or ever.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is 0.16.0, bit I've seen it in dev versions including the 8f2d442.  I'm using the binaries from the github releases tab.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>Raspberry Pi Ubuntu Focal </p>\n<div class=\"codehilite\"><pre><span></span><code>pi1% uname -a\nLinux pi1 5.4.0-1008-raspi #8-Ubuntu SMP Wed Apr 8 11:13:06 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></div>\n\n\n<p>I originally saw this in my CI for perl Wasm bindings:<br>\n<a href=\"https://github.com/perlwasm/Wasm/issues/58\">https://github.com/perlwasm/Wasm/issues/58</a><br>\nBut only just now verified that I could reproduce from the wasmtime example.</p>\n</blockquote>",
        "id": 197746043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589573083
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<ol>\n<li>Adjust the multi.c example that comes with wasmtime #1715 </li>\n<li>compile and run on aarch64 </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>pi1% env RUST_BACKTRACE=1 ./a.out\nInitializing...\nCompiling module...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not implemented&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:1203:18\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n  12: cranelift_codegen::isa::aarch64::lower::lower_insn_to_regs\n  13: cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower\n  14: cranelift_codegen::machinst::compile::compile\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n  16: cranelift_codegen::context::Context::compile\n  17: cranelift_codegen::context::Context::compile_and_emit\n  18: wasmtime_jit::compiler::make_trampoline\n  19: wasmtime_jit::compiler::Compiler::compile\n  20: wasmtime_jit::instantiate::CompiledModule::new\n  21: wasmtime::module::Module::from_binary_unchecked\n  22: wasmtime::module::Module::from_binary\n  23: wasmtime_module_new\n  24: main\n  25: __libc_start_main\n  26: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 3705270992\nAbort (core dumped)\n</code></pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expect the program to run without fail as it does on x86_64.  If multi_value isn't supported on aarch64 I'd expect the config option to fail (although I note that it doesn't have a return value).  I did do a search on github issues and PRs for multi values and I didn't see anything relevant so I wasn't 100% sure if this just wasn't supported yet or ever.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is 0.16.0, bit I've seen it in dev versions including the 8f2d442.  I'm using the binaries from the github releases tab.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>Raspberry Pi Ubuntu Focal </p>\n<div class=\"codehilite\"><pre><span></span><code>pi1% uname -a\nLinux pi1 5.4.0-1008-raspi #8-Ubuntu SMP Wed Apr 8 11:13:06 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></div>\n\n\n<p>I originally saw this in my CI for perl Wasm bindings:<br>\n<a href=\"https://github.com/perlwasm/Wasm/issues/58\">https://github.com/perlwasm/Wasm/issues/58</a><br>\nBut only just now verified that I could reproduce from the wasmtime example.</p>\n</blockquote>",
        "id": 197751068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589576046
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716#issuecomment-629478753\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<p>I've only got access to an emulator, but if debug assertions are enabled it looks like there's a preceding problem which may be the root of the issue here:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;assertion failed: rets.iter().all(|a| match a { &amp;ABIArg::Stack(..) =&gt; false, _ =&gt; true, })&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:225:9\n</code></pre></div>\n\n\n<p>(which is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bd0b8189002a773b27eb539168be4fe8c08ddc4d/cranelift/codegen/src/isa/aarch64/abi.rs#L224-L228\">this line</a>)</p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;stack trace&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;assertion failed: rets.iter().all(|a| match a { &amp;ABIArg::Stack(..) =&gt; false, _ =&gt; true, })&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:225:9\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libstd/panicking.rs:397\n  12: cranelift_codegen::isa::aarch64::abi::ABISig::from_func_sig\n             at cranelift/codegen/src/isa/aarch64/abi.rs:225\n  13: cranelift_codegen::isa::aarch64::abi::AArch64ABIBody::new\n             at cranelift/codegen/src/isa/aarch64/abi.rs:372\n  14: cranelift_codegen::isa::aarch64::AArch64Backend::compile_vcode\n             at cranelift/codegen/src/isa/aarch64/mod.rs:49\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n             at cranelift/codegen/src/isa/aarch64/mod.rs:61\n  16: cranelift_codegen::context::Context::compile\n             at cranelift/codegen/src/context.rs:186\n  17: cranelift_codegen::context::Context::compile_and_emit\n             at cranelift/codegen/src/context.rs:132\n  18: wasmtime_environ::cranelift::compile::{{closure}}\n             at crates/environ/src/cranelift.rs:358\n  19: core::ops::function::impls::&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/ops/function.rs:242\n  20: &lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter::with::{{closure}}\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/map_with.rs:317\n  21: core::iter::adapters::map_try_fold::{{closure}}\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:779\n  22: core::iter::traits::iterator::Iterator::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/traits/iterator.rs:1877\n  23: &lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:805\n  24: &lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:805\n  25: &lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:1750\n  26: &lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:805\n  27: &lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/adapters/mod.rs:1750\n  28: core::iter::traits::iterator::Iterator::fold\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/iter/traits/iterator.rs:2004\n  29: &lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/fold.rs:158\n  30: &lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/while_some.rs:139\n  31: &lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/map.rs:248\n  32: &lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/map_with.rs:322\n  33: rayon::iter::plumbing::Producer::fold_with\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/plumbing/mod.rs:110\n  34: rayon::iter::plumbing::bridge_producer_consumer::helper\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/plumbing/mod.rs:438\n  35: rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}}\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.0/src/iter/plumbing/mod.rs:427\n  36: rayon_core::join::join_context::call_b::{{closure}}\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/join/mod.rs:130\n  37: &lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}}\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/job.rs:113\n  38: &lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libstd/panic.rs:318\n  39: std::panicking::try::do_call\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libstd/panicking.rs:303\n  40: __rust_maybe_catch_panic\n             at src/libpanic_unwind/lib.rs:86\n  41: std::panicking::try\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libstd/panicking.rs:281\n  42: std::panic::catch_unwind\n             at /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libstd/panic.rs:394\n  43: rayon_core::unwind::halt_unwinding\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/unwind.rs:17\n  44: &lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/job.rs:119\n  45: rayon_core::job::JobRef::execute\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/job.rs:59\n  46: rayon_core::registry::WorkerThread::execute\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:681\n  47: rayon_core::registry::WorkerThread::wait_until_cold\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:665\n  48: rayon_core::registry::WorkerThread::wait_until\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:639\n  49: rayon_core::registry::main_loop\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:759\n  50: rayon_core::registry::ThreadBuilder::run\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:56\n  51: &lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}}\n             at /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.7.0/src/registry.rs:101\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 42381904\nqemu: uncaught target signal 6 (Aborted) - core dumped\n</code></pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 197751186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589576139
    },
    {
        "content": "<p>plicease <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716#issuecomment-638463229\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<p>might be related #1774?</p>\n</blockquote>",
        "id": 199677221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591218622
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716#issuecomment-638466518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<p>Hi, sorry, I missed this issue previously; #1774 (which I just merged) should fix this. I don't have your precise test-case handy; please let us know if it still fails and I can investigate further!</p>\n</blockquote>",
        "id": 199677769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591218981
    },
    {
        "content": "<p>plicease <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716#issuecomment-638487912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> works thanks!</p>\n</blockquote>",
        "id": 199683497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591222278
    },
    {
        "content": "<p>plicease closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1716\">Issue #1716</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<ol>\n<li>Adjust the multi.c example that comes with wasmtime #1715 </li>\n<li>compile and run on aarch64 </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>pi1% env RUST_BACKTRACE=1 ./a.out\nInitializing...\nCompiling module...\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not implemented&#39;, cranelift/codegen/src/isa/aarch64/abi.rs:1203:18\nstack backtrace:\n   0: backtrace::backtrace::libunwind::trace\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\n   1: backtrace::backtrace::trace_unsynchronized\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\n   2: std::sys_common::backtrace::_print_fmt\n             at src/libstd/sys_common/backtrace.rs:78\n   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n             at src/libstd/sys_common/backtrace.rs:59\n   4: core::fmt::write\n             at src/libcore/fmt/mod.rs:1063\n   5: std::io::Write::write_fmt\n             at src/libstd/io/mod.rs:1426\n   6: std::sys_common::backtrace::_print\n             at src/libstd/sys_common/backtrace.rs:62\n   7: std::sys_common::backtrace::print\n             at src/libstd/sys_common/backtrace.rs:49\n   8: std::panicking::default_hook::{{closure}}\n             at src/libstd/panicking.rs:204\n   9: std::panicking::default_hook\n             at src/libstd/panicking.rs:224\n  10: std::panicking::rust_panic_with_hook\n             at src/libstd/panicking.rs:470\n  11: std::panicking::begin_panic\n  12: cranelift_codegen::isa::aarch64::lower::lower_insn_to_regs\n  13: cranelift_codegen::machinst::lower::Lower&lt;I&gt;::lower\n  14: cranelift_codegen::machinst::compile::compile\n  15: &lt;cranelift_codegen::isa::aarch64::AArch64Backend as cranelift_codegen::machinst::MachBackend&gt;::compile_function\n  16: cranelift_codegen::context::Context::compile\n  17: cranelift_codegen::context::Context::compile_and_emit\n  18: wasmtime_jit::compiler::make_trampoline\n  19: wasmtime_jit::compiler::Compiler::compile\n  20: wasmtime_jit::instantiate::CompiledModule::new\n  21: wasmtime::module::Module::from_binary_unchecked\n  22: wasmtime::module::Module::from_binary\n  23: wasmtime_module_new\n  24: main\n  25: __libc_start_main\n  26: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfatal runtime error: failed to initiate panic, error 3705270992\nAbort (core dumped)\n</code></pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expect the program to run without fail as it does on x86_64.  If multi_value isn't supported on aarch64 I'd expect the config option to fail (although I note that it doesn't have a return value).  I did do a search on github issues and PRs for multi values and I didn't see anything relevant so I wasn't 100% sure if this just wasn't supported yet or ever.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>This is 0.16.0, bit I've seen it in dev versions including the 8f2d442.  I'm using the binaries from the github releases tab.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>Raspberry Pi Ubuntu Focal </p>\n<div class=\"codehilite\"><pre><span></span><code>pi1% uname -a\nLinux pi1 5.4.0-1008-raspi #8-Ubuntu SMP Wed Apr 8 11:13:06 UTC 2020 aarch64 aarch64 aarch64 GNU/Linux\n</code></pre></div>\n\n\n<p>I originally saw this in my CI for perl Wasm bindings:<br>\n<a href=\"https://github.com/perlwasm/Wasm/issues/58\">https://github.com/perlwasm/Wasm/issues/58</a><br>\nBut only just now verified that I could reproduce from the wasmtime example.</p>\n</blockquote>",
        "id": 199683498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591222279
    }
]