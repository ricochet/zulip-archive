[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485\">PR #2485</a> from <code>fuzz-less-threads</code> to <code>main</code>:</p>\n<blockquote>\n<p>I was having limited success fuzzing locally because apparently the<br>\nfuzzer was spawning too many threads. Looking into it that indeed<br>\nappears to be the case! The threads which time out runtime of wasm only<br>\nexit after the sleep has completely finished, meaning that if we execute<br>\na ton of wasm that exits quickly each run will generate a sleeping thread.</p>\n<p>This commit fixes the issue by using some synchronization to ensure the<br>\nsleeping thread exits when our fuzzed run also exits.<br>\n</p>\n</blockquote>",
        "id": 219149031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607380906
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485#pullrequestreview-546659336\">PR Review</a>.</p>",
        "id": 219158673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607388439
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485#discussion_r537946056\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What if there is a spurious wake up? Something that isn't related to the fuzz target completing. I think there should be an atomic or something that gets set on drop as well, and then this here should <code>while !atomic.load() { cvar.wait_timeout(); }</code>.</p>\n</blockquote>",
        "id": 219158674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607388439
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485#pullrequestreview-546659336\">PR Review</a>.</p>",
        "id": 219158675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607388439
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485\">PR #2485</a> from <code>fuzz-less-threads</code> to <code>main</code>:</p>\n<blockquote>\n<p>I was having limited success fuzzing locally because apparently the<br>\nfuzzer was spawning too many threads. Looking into it that indeed<br>\nappears to be the case! The threads which time out runtime of wasm only<br>\nexit after the sleep has completely finished, meaning that if we execute<br>\na ton of wasm that exits quickly each run will generate a sleeping thread.</p>\n<p>This commit fixes the issue by using some synchronization to ensure the<br>\nsleeping thread exits when our fuzzed run also exits.<br>\n</p>\n</blockquote>",
        "id": 219355553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607529319
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485#discussion_r539426752\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It makes it a bit more complicated to handle adjustments to the timeout and such, and given the nondeterministic nature of a timeout I figured it wouldn't matter too much, but I went ahead and added in handling of spurious wakeups.</p>\n</blockquote>",
        "id": 219355636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607529350
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485#pullrequestreview-548331517\">PR Review</a>.</p>",
        "id": 219355637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607529350
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2485\">PR #2485</a>.</p>",
        "id": 219361844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607531679
    }
]