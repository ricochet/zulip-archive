[
    {
        "content": "<p>grovesNL opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a> from <code>grovesNL:rustc-hash</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>From a Zulip discussion a few months ago (<a href=\"#narrow/stream/217126-wasmtime/topic/Custom.20hashers\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Custom.20hashers</a>) it was mentioned that custom hashers like <code>rustc-hash</code> should be ok for most usage of hashmaps/indexmaps because they don't need DoS protection.</p>\n<p><code>exports</code> showed up in a recent profile (e.g., when <code>_get_export</code> does <code>instance.module().exports.get_full(name)?;</code>) so I thought it might be good to start by adding <code>rustc-hash</code> here. Because this is used in <code>get_export</code>, this optimization should be useful generally.</p>\n</blockquote>",
        "id": 418306351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706285417
    },
    {
        "content": "<p><strong>grovesNL</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418306353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706285417
    },
    {
        "content": "<p><strong>grovesNL</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418306354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706285417
    },
    {
        "content": "<p><strong>grovesNL</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418306355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706285417
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912547821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>Thanks for this! This is a bit of an interesting question to me though because Wasmtime is in a different position than rustc and is exposed to untrusted modules and this could in theory be an issue for embedders. That being said I think it'd still be good to solve this. One idea would be to expose the underlying indices that Wasmtime uses. For example instead of looking up via name on instances each time you could look up the name on a <code>Module</code> once, get an index, and then use that index with instantiations of all future modules. That should in theory be even faster than a rustc-hash based approach.</p>\n<p>Would a scheme like that work for your use case? If so would you be interested in adapting this PR to such an approach?</p>\n</blockquote>",
        "id": 418334984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706295750
    },
    {
        "content": "<p>grovesNL <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912658676\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>Yeah that makes sense for embedders. In my case I'm both the producer and consumer of the module (e.g., I'm writing the export names during encoding, and then immediately looking them up from the instance) so DoS isn't important. It would be useful to override the hasher throughout most types in cases like this but I can appreciate not wanting to complicate type signatures too.</p>\n<p>That scheme sounds ok, but I'm not sure how to expose the index we'd need without mapping bidirectionally between <code>EntityIndex</code> and <code>usize</code> somewhere. For example, <code>exports</code> is <code>IndexMap&lt;String, EntityIndex&gt;</code> so it doesn't seem like we have a great way to expose either <code>EntityIndex</code> or <code>usize</code> (the actual index for the map):</p>\n<ul>\n<li>\n<p>If we expose <code>EntityIndex</code> (the value for the index map) on the original <code>wasmtime::Module</code>, then we don't have a clear way to convert back from an <code>EntityIndex</code> to the <code>usize</code> needed to look it up on the instance later on. e.g., the <code>EntityIndex</code> to <code>usize</code> mapping isn't preserved during <code>translate_payload</code> so we can't recover it afterwards except by iterating all exports to find it.</p>\n</li>\n<li>\n<p>If we expose <code>usize</code>, then we'd still have to do some kind of name to <code>usize</code> lookup after we have the instance, but that would have the same overhead as the original <code>get_export</code> name lookup.</p>\n</li>\n</ul>\n<p>Ideally I could get the <code>EntityIndex</code> from the original <code>wasmtime::Module</code> or query the <code>usize</code> by name from <code>InstancePre</code> somehow (so I could share it across all instances created from it).</p>\n</blockquote>",
        "id": 418347285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706301097
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912749768\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>Oh the raw value here that <code>get_export</code> is interested in is the <code>ExportIndex</code>. There's no need to recomputed the <code>usize</code> index of the name in the export map. For that either returning <code>ExportIndex</code> raw or perhaps a wrapper around it should be sufficient (along with a new method like <code>get_export</code> that takes this as an argument)</p>\n</blockquote>",
        "id": 418356865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706306308
    },
    {
        "content": "<p>grovesNL <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912850450\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>If we add a function like this to <code>wasmtime::Module</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export_index</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">EntityIndex</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">compiled_module</span><span class=\"p\">().</span><span class=\"n\">module</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"n\">copied</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then on <code>Instance</code> we might want want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export_by_index</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsContextMut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"nc\">EntityIndex</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ... same boilerplate as `get_export` ...</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Extern</span>::<span class=\"n\">from_wasmtime_export</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_export_by_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The part I'm not sure about is setting the lazily populated <code>data.exports[i]</code> with the export before we return it. We don't seem to be able to determine the index (<code>i</code>) from <code>ExportIndex</code> without searching the <code>exports</code> by value, because the <code>exports</code> indexmap is keyed by the export name, not its <code>EntityIndex</code>.</p>\n</blockquote>",
        "id": 418368281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706313923
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912863832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>Aha I apologize, I had forgotten about that. That was why the <code>usize</code> you were talking about is important!</p>\n<p>How about this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ModuleExport</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[derive(Copy, Clone)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ModuleExport</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">module</span>: <span class=\"nc\">CompiledModuleId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// make sure this isn't mixed up with different modules</span>\n<span class=\"w\">    </span><span class=\"n\">entity</span>: <span class=\"nc\">EntityIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// raw index into the wasm module</span>\n<span class=\"w\">    </span><span class=\"n\">export_name_index</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// the index within the `IndexMap`</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_module_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">export</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ModuleExport</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Export</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(please bikeshed the names)</p>\n<p>Basically package everything up in a new struct in the <code>wasmtime</code> crate</p>\n</blockquote>",
        "id": 418369987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706315009
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912866581\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>I suppose stepping back a little bit for a moment, one thing I would say is that in Wasmtime we've tried to basically avoid hash maps wherever we can. Where possible we use indexes into lists rather than strings to entries. While hash maps are necessary in the API somewhere it's often possible to lift the hash lookups outside of loops. Or at least that's what's worked out for us so far, not that we can't make the hash maps faster here just that we'd prefer to explore other avenues first (and also because even a faster hash map is probably much slower than a simple bounds check)</p>\n</blockquote>",
        "id": 418370429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706315276
    },
    {
        "content": "<p>grovesNL updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418377556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706321196
    },
    {
        "content": "<p>grovesNL updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418377593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706321241
    },
    {
        "content": "<p>grovesNL <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828#issuecomment-1912915588\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>:</p>\n<blockquote>\n<p>Thanks for clarifying! I updated the PR to match the scheme you described.</p>\n<p>Is the purpose of including <code>CompiledModuleId</code> on <code>ModuleExport</code> just out of convenience for user-code, or should we compare these somewhere during <code>get_module_export</code>?</p>\n</blockquote>",
        "id": 418377862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706321519
    },
    {
        "content": "<p>grovesNL updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418378088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706321735
    },
    {
        "content": "<p>grovesNL updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7828\">PR #7828</a>.</p>",
        "id": 418378150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706321780
    }
]