[
    {
        "content": "<p><a href=\"https://github.com/dbaeumer\">dbaeumer</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">Issue #8392</a>.</p>",
        "id": 433709872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713345444
    },
    {
        "content": "<p>dbaeumer opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>Executing a wasm application on wasmtime that has multiple threads where on thread does file I/O results in a hang on the first file I/O operation.</p>\n<p>Disclaimer: I am not a Rust expert.  But since the application runs correctly as a OS process I assume that the Rust code is OK. I am also not sure if this is a Rust toolchain problem or a wasmtime problem.</p>\n<h3>Test Case</h3>\n<p>Clone <a href=\"https://github.com/dbaeumer/wasm-threads.git\">https://github.com/dbaeumer/wasm-threads.git</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>npm run build:wasm</code> to build the wasm file</li>\n<li><code>npm run wasmtime</code> to execute the wasm file in wasmtime</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The application doesn't hang on the <code>fs::File::open</code> call</p>\n<p>I expect the same result as executing:</p>\n<p><code>npm run build:os</code><br>\n<code>npm run run:os</code></p>\n<h3>Actual Results</h3>\n<p>The application does hang.</p>\n<h3>Versions and Environment</h3>\n<p>Rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nc\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"n\">rustup</span><span class=\"w\"> </span><span class=\"n\">home</span>:  <span class=\"o\">/</span><span class=\"n\">xxxx</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">rustup</span>\n\n<span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">--------------------------------------</span>\n\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">unknown</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview1</span><span class=\"o\">-</span><span class=\"n\">threads</span>\n<span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n\n<span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">----------------</span>\n\n<span class=\"n\">stable</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">)</span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.77.2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"n\">ef9e3d8</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Wasmtime: wasmtime-cli 19.0.2 (040ec9209 2024-04-11)</p>\n<p>Operating system: </p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 22.04.4 LTS<br>\nRelease:        22.04<br>\nCodename:       jammy</p>\n</blockquote>",
        "id": 433709873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713345444
    },
    {
        "content": "<p>dbaeumer edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>Executing a wasm application on wasmtime that has multiple threads where on thread does file I/O results in a hang on the first file I/O operation.</p>\n<p>Disclaimer: I am not a Rust expert.  But since the application runs correctly as a OS process I assume that the Rust code is OK. I am also not sure if this is a Rust toolchain problem or a wasmtime problem.</p>\n<h3>Test Case</h3>\n<p>Clone <a href=\"https://github.com/dbaeumer/wasm-threads.git\">https://github.com/dbaeumer/wasm-threads.git</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>npm run build:wasm</code> to build the wasm file</li>\n<li><code>npm run run:wasmtime</code> to execute the wasm file in wasmtime</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The application doesn't hang on the <code>fs::File::open</code> call</p>\n<p>I expect the same result as executing:</p>\n<p><code>npm run build:os</code><br>\n<code>npm run run:os</code></p>\n<h3>Actual Results</h3>\n<p>The application does hang.</p>\n<h3>Versions and Environment</h3>\n<p>Rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nc\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"n\">rustup</span><span class=\"w\"> </span><span class=\"n\">home</span>:  <span class=\"o\">/</span><span class=\"n\">xxxx</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">rustup</span>\n\n<span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">--------------------------------------</span>\n\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">unknown</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview1</span><span class=\"o\">-</span><span class=\"n\">threads</span>\n<span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n\n<span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">----------------</span>\n\n<span class=\"n\">stable</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">)</span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.77.2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"n\">ef9e3d8</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Wasmtime: wasmtime-cli 19.0.2 (040ec9209 2024-04-11)</p>\n<p>Operating system: </p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 22.04.4 LTS<br>\nRelease:        22.04<br>\nCodename:       jammy</p>\n</blockquote>",
        "id": 433710028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713345488
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2061438766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>Using gdb/logging it looks like the main thread is blocked in <code>memory.atomic.wait32(addr=0x104198, expected=0x80000002, timeout=None)</code>. Given that I'm not sure that the issue is in Wasmtime and this looks like a wasi-libc issue perhaps? (e.g. something perhaps related to locking in the initialization of files and such.</p>\n</blockquote>",
        "id": 433793415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713365239
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2061451855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>@abrown this seems relevant to your interests :)</p>\n</blockquote>",
        "id": 433796362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713365565
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2080168601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>I ran @dbaeumer's code today on the latest version of Wasmtime (@dbaeumer, thanks for the great reproducer). I believe the hang is due to incorrect locking in wasi-libc. This is not a Wasmtime issue, but I'll explain what I figured out here:</p>\n<p>When running with <code>WASMTIME_LOG=wasmtime_runtime::threads=trace</code>, I see one <code>memory.atomic.wait</code> that is not corresponded elsewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T19</span>:<span class=\"mi\">11</span>:<span class=\"mf\">26.438492</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">threads</span>::<span class=\"n\">shared_memory</span>: <span class=\"nc\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">wait32</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"mh\">0x103f2c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"mi\">2147483650</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The stack trace at this instruction looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__wait</span>\n<span class=\"n\">__lock</span>\n<span class=\"n\">internal_register_preopened_fd_unlocked</span>\n<span class=\"n\">__wasilibc_populate_preopens</span>\n<span class=\"n\">__wasilibc_find_abspath</span>\n<span class=\"n\">__wasilibc_find_relpath_alloc</span>\n<span class=\"n\">__wasilibc_find_relpath</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">open_parent</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h2a891633185b03b0</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h57333908bc41373d</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">_open</span>::<span class=\"n\">h0ba6508e7f3dab94</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">open</span>::<span class=\"n\">h917f7ccf95a22000</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h2bd1932e28feed10</span>\n<span class=\"n\">wasm_threads</span>::<span class=\"n\">main</span>::<span class=\"n\">hd67815b1e283a1b0</span>\n<span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h0dba6a9e804e86ee</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h884974562e00ebc8</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h79de5d68ac140761</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">h301b28581f6245a7</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"n\">h8217158c4515bb59</span>\n<span class=\"n\">__main_void</span>\n<span class=\"n\">_start</span>\n</code></pre></div>\n<p>This points to a problem in <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L106-L125\"><code>internal_register_preopened_fd_unlocked</code></a>. From the file name, it would appear that no locking should happen here because its parent, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L234-L292\"><code>__wasilibc_populate_preopens</code></a>, has already acquired the lock. But, in fact, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L61-L82\"><code>resize</code></a> attempts to reacquire it despite it being held in the parent.</p>\n<p>Looking at Git blame, I added the additional locking very early on in the wasi-threads implementation effort (<a href=\"https://github.com/WebAssembly/wasi-libc/pull/311/files#diff-c7b46e06335bd882bf33d42159d0f1f9a7b20fa8b43e36a570420c16b02868a9R61\">#311</a>) and it looks like the mistake comes from not understanding how these preopens work correctly. I believe we can safely remove the lock in <code>resize</code> since it is not used elsewhere but I would like to reproduce end-to-end with the Rust toolchain; @alexcrichton, can you remind me how to use <code>cargo</code> with a modified version of wasi-libc?</p>\n</blockquote>",
        "id": 435664794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714168613
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2080168601\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>I ran @dbaeumer's code today on the latest version of Wasmtime (@dbaeumer, thanks for the great reproducer). I believe the hang is due to incorrect locking in wasi-libc. This is not a Wasmtime issue, but I'll explain what I figured out here:</p>\n<p>When running with <code>WASMTIME_LOG=wasmtime_runtime::threads=trace</code>, I see one <code>memory.atomic.wait</code> that is not corresponded elsewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T19</span>:<span class=\"mi\">11</span>:<span class=\"mf\">26.438492</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">threads</span>::<span class=\"n\">shared_memory</span>: <span class=\"nc\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">wait32</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"mh\">0x103f2c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"mi\">2147483650</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The stack trace at this instruction looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__wait</span>\n<span class=\"n\">__lock</span>\n<span class=\"n\">internal_register_preopened_fd_unlocked</span>\n<span class=\"n\">__wasilibc_populate_preopens</span>\n<span class=\"n\">__wasilibc_find_abspath</span>\n<span class=\"n\">__wasilibc_find_relpath_alloc</span>\n<span class=\"n\">__wasilibc_find_relpath</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">open_parent</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h2a891633185b03b0</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h57333908bc41373d</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">_open</span>::<span class=\"n\">h0ba6508e7f3dab94</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">open</span>::<span class=\"n\">h917f7ccf95a22000</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h2bd1932e28feed10</span>\n<span class=\"n\">wasm_threads</span>::<span class=\"n\">main</span>::<span class=\"n\">hd67815b1e283a1b0</span>\n<span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h0dba6a9e804e86ee</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h884974562e00ebc8</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h79de5d68ac140761</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">h301b28581f6245a7</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"n\">h8217158c4515bb59</span>\n<span class=\"n\">__main_void</span>\n<span class=\"n\">_start</span>\n</code></pre></div>\n<p>This points to a problem in <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L106-L125\"><code>internal_register_preopened_fd_unlocked</code></a>. From the file name, it would appear that no locking should happen here because its parent, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L234-L292\"><code>__wasilibc_populate_preopens</code></a>, has already acquired the lock. But, in fact, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L61-L82\"><code>resize</code></a> attempts to reacquire it despite it being held in the parent.</p>\n<p>Looking at Git blame, I added the additional locking very early on in the wasi-threads implementation effort (<a href=\"https://github.com/WebAssembly/wasi-libc/pull/311/files#diff-c7b46e06335bd882bf33d42159d0f1f9a7b20fa8b43e36a570420c16b02868a9R61\">#311</a>) and it looks like the mistake comes from not understanding how these preopens work correctly. I believe we can safely remove the lock in <code>resize</code> since it is not used elsewhere but I would like to reproduce end-to-end with the Rust toolchain; @alexcrichton, can you remind me how to use <code>cargo</code> with a modified version of wasi-libc?</p>\n<p>=====</p>\n<p>EDIT: scratch the Git blame analysis; looking at this more, I think this was actually introduced in a refactoring in <a href=\"https://github.com/WebAssembly/wasi-libc/pull/408/files#diff-c7b46e06335bd882bf33d42159d0f1f9a7b20fa8b43e36a570420c16b02868a9R106\">#408</a>. @sunfishcode, it probably wasn't clear that <code>resize</code> retakes the lock? But it should be fine to remove it, right?</p>\n</blockquote>",
        "id": 435665286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714168893
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2080168601\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>I ran @dbaeumer's code today on the latest version of Wasmtime (@dbaeumer, thanks for the great reproducer). I believe the hang is due to incorrect locking in wasi-libc. This is not a Wasmtime issue, but I'll explain what I figured out here:</p>\n<p>When running with <code>WASMTIME_LOG=wasmtime_runtime::threads=trace</code>, I see one <code>memory.atomic.wait</code> that is not corresponded elsewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">26</span><span class=\"n\">T19</span>:<span class=\"mi\">11</span>:<span class=\"mf\">26.438492</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">threads</span>::<span class=\"n\">shared_memory</span>: <span class=\"nc\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">wait32</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"mh\">0x103f2c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"mi\">2147483650</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The stack trace at this instruction looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__wait</span>\n<span class=\"n\">__lock</span>\n<span class=\"n\">internal_register_preopened_fd_unlocked</span>\n<span class=\"n\">__wasilibc_populate_preopens</span>\n<span class=\"n\">__wasilibc_find_abspath</span>\n<span class=\"n\">__wasilibc_find_relpath_alloc</span>\n<span class=\"n\">__wasilibc_find_relpath</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">open_parent</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h2a891633185b03b0</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">wasi</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h57333908bc41373d</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">_open</span>::<span class=\"n\">h0ba6508e7f3dab94</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">open</span>::<span class=\"n\">h917f7ccf95a22000</span>\n<span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span>::<span class=\"n\">h2bd1932e28feed10</span>\n<span class=\"n\">wasm_threads</span>::<span class=\"n\">main</span>::<span class=\"n\">hd67815b1e283a1b0</span>\n<span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h0dba6a9e804e86ee</span>\n<span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h884974562e00ebc8</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h79de5d68ac140761</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">h301b28581f6245a7</span>\n<span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"n\">h8217158c4515bb59</span>\n<span class=\"n\">__main_void</span>\n<span class=\"n\">_start</span>\n</code></pre></div>\n<p>This points to a problem in <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L106-L125\"><code>internal_register_preopened_fd_unlocked</code></a>. From the file name, it would appear that no locking should happen here because its parent, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L234-L292\"><code>__wasilibc_populate_preopens</code></a>, has already acquired the lock. But, in fact, <a href=\"https://github.com/WebAssembly/wasi-libc/blob/9e8c542319242a5e536e14e6046de5968d298038/libc-bottom-half/sources/preopens.c#L61-L82\"><code>resize</code></a> attempts to reacquire it despite it being held in the parent.</p>\n<p>Looking at Git blame, I added the additional locking very early on in the wasi-threads implementation effort (<a href=\"https://github.com/WebAssembly/wasi-libc/pull/311/files#diff-c7b46e06335bd882bf33d42159d0f1f9a7b20fa8b43e36a570420c16b02868a9R61\">#311</a>) and it looks like the mistake comes from not understanding how these preopens work correctly. I believe we can safely remove the lock in <code>resize</code> since it is not used elsewhere but I would like to reproduce end-to-end with the Rust toolchain; @alexcrichton, can you remind me how to use <code>cargo</code> with a modified version of wasi-libc?</p>\n<hr>\n<p>EDIT: scratch the Git blame analysis; looking at this more, I think this was actually introduced in a refactoring in <a href=\"https://github.com/WebAssembly/wasi-libc/pull/408/files#diff-c7b46e06335bd882bf33d42159d0f1f9a7b20fa8b43e36a570420c16b02868a9R106\">#408</a>. @sunfishcode, it probably wasn't clear that <code>resize</code> retakes the lock? But it should be fine to remove it, right?</p>\n</blockquote>",
        "id": 435665327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714168921
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2089720408\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<blockquote>\n<p>@alexcrichton, can you remind me how to use cargo with a modified version of wasi-libc?</p>\n</blockquote>\n<p>The \"easiest\" way is perhaps to:</p>\n<ul>\n<li>Check-out wasi-sdk</li>\n<li>Update/edit the wasi-libc submodule with your changes</li>\n<li>Build wasi-sdk</li>\n<li>Set <code>WASI_SDK_PATH</code> and build the Rust target</li>\n</ul>\n<p>You can probably also finagle this with various sysroot flags and Rust configuration as well and get away with only building wasi-libc if you'd like to.</p>\n</blockquote>",
        "id": 436625585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714631788
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392#issuecomment-2091584479\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>Ok, here's how I verified that <a href=\"https://github.com/WebAssembly/wasi-libc/issues/491\">WebAssembly/wasi-libc#491</a> actually fixes this issue:</p>\n<ul>\n<li>built <a href=\"https://github.com/WebAssembly/wasi-libc\">wasi-libc</a> with threads support: <code>make THREAD_MODEL=posix</code></li>\n<li>in each of the <code>sysroot/*</code> directories, I had to \"rename\" the target to what Rust believes it to be: <code>ln -s wasm32-wasi-threads wasm32-wasip1-threads</code></li>\n<li>\n<p>with the <a href=\"https://github.com/WebAssembly/wasi-libc\">rust</a> repository cloned, configure <code>config.toml</code> to point to the modified <code>wasi-libc</code>:<br>\n<code>toml\n  lld = true\n  [target.wasm32-wasip1-threads]\n  wasi-root = \".../wasi-libc/sysroot\"\n  </code></p>\n</li>\n<li>\n<p>build <code>rustc</code>: <code>./x.py build --stage 1 --target wasm32-wasip1-threads</code></p>\n</li>\n<li>inform <code>rustup</code> of the new compiler: <code>rustup toolchain link stage1 build/x86_64-unknown-linux-gnu/stage1</code></li>\n<li>with @dbaeumer's <a href=\"https://github.com/dbaeumer/wasm-threads\">repository</a> cloned, build the reproducer with the modified <code>rustc</code> and <code>wasi-libc</code>: <code>rustc +stage1 -v --target=wasm32-wasip1-threads src/main.rs</code></li>\n<li>run the compiled reproducer with any recent Wasmtime:<br>\n<code>console\n  $ wasmtime --dir .::. --wasi threads=y --wasm threads=y main.wasm\n  Before file open\n  After file open\n  hi number 1 from the spawned thread!\n  hi number 2 from the spawned thread!\n  hi number 3 from the spawned thread!\n  hi number 4 from the spawned thread!\n  hi number 5 from the spawned thread!\n  hi number 6 from the spawned thread!\n  hi number 7 from the spawned thread!\n  hi number 8 from the spawned thread!\n  hi number 9 from the spawned thread!\n  Thread finished\n  </code></li>\n</ul>\n<p>Having run these steps, I'm a bit more confident that <a href=\"https://github.com/WebAssembly/wasi-libc/issues/491\">WebAssembly/wasi-libc#491</a> does not miss anything and, once that merges, I propose we close this.</p>\n</blockquote>",
        "id": 436776535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714683825
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8392\">issue #8392</a>:</p>\n<blockquote>\n<p>Executing a wasm application on wasmtime that has multiple threads where on thread does file I/O results in a hang on the first file I/O operation.</p>\n<p>Disclaimer: I am not a Rust expert.  But since the application runs correctly as a OS process I assume that the Rust code is OK. I am also not sure if this is a Rust toolchain problem or a wasmtime problem.</p>\n<h3>Test Case</h3>\n<p>Clone <a href=\"https://github.com/dbaeumer/wasm-threads.git\">https://github.com/dbaeumer/wasm-threads.git</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>npm run build:wasm</code> to build the wasm file</li>\n<li><code>npm run run:wasmtime</code> to execute the wasm file in wasmtime</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The application doesn't hang on the <code>fs::File::open</code> call</p>\n<p>I expect the same result as executing:</p>\n<p><code>npm run build:os</code><br>\n<code>npm run run:os</code></p>\n<h3>Actual Results</h3>\n<p>The application does hang.</p>\n<h3>Versions and Environment</h3>\n<p>Rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nc\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n<span class=\"n\">rustup</span><span class=\"w\"> </span><span class=\"n\">home</span>:  <span class=\"o\">/</span><span class=\"n\">xxxx</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">rustup</span>\n\n<span class=\"n\">installed</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">--------------------------------------</span>\n\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">unknown</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span>\n<span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview1</span><span class=\"o\">-</span><span class=\"n\">threads</span>\n<span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n\n<span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">toolchain</span>\n<span class=\"o\">----------------</span>\n\n<span class=\"n\">stable</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">)</span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.77.2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"n\">ef9e3d8</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Wasmtime: wasmtime-cli 19.0.2 (040ec9209 2024-04-11)</p>\n<p>Operating system: </p>\n<p>Distributor ID: Ubuntu<br>\nDescription:    Ubuntu 22.04.4 LTS<br>\nRelease:        22.04<br>\nCodename:       jammy</p>\n</blockquote>",
        "id": 436777302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714684199
    }
]