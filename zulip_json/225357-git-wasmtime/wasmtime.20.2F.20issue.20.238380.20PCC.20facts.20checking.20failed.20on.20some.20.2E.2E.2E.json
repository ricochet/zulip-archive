[
    {
        "content": "<p><a href=\"https://github.com/feilongjiang\">feilongjiang</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">Issue #8380</a>.</p>",
        "id": 433451741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713249509
    },
    {
        "content": "<p>feilongjiang opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>The following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>TODO: first, ...</li>\n<li>TODO: second, ...</li>\n<li>Etc...</li>\n</ul>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433451747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713249510
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>TODO: first, ...</li>\n<li>TODO: second, ...</li>\n<li>Etc...</li>\n</ul>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433451969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713249615
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433452113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713249712
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2905l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433452854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713250060
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2906l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2905l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433453009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713250130
    },
    {
        "content": "<p>feilongjiang edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC checks on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2906l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2905l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 433453337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713250276
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058561169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 433471676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713257065
    },
    {
        "content": "<p>feilongjiang <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need to <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Any idea about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433506665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713269146
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need to <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433508642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713269779
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433509173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713269953
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions. After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code>, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433513011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713271147
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code>, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433513716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713271344
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code>, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433513815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713271382
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code>, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail, too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433513863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713271394
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code> and be overwritten, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail, too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n</blockquote>",
        "id": 433514419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713271564
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code> and be overwritten, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail, too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n<p>Edit:<br>\nTurns out we should also fix the constant passed to <code>check_constant</code> for <code>movk</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/pcc.rs b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gh\">index cdc6ca42e..b2dd95577 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gu\">@@ -305,7 +305,8 @@ pub(crate) fn check(</span>\n<span class=\"w\"> </span>            let input = get_fact_or_default(vcode, rn, 64);\n<span class=\"w\"> </span>            if let Some(input_constant) = input.as_const(64) {\n<span class=\"w\"> </span>                let constant = u64::from(imm.bits) &lt;&lt; (imm.shift * 16);\n<span class=\"gd\">-                let constant = input_constant | constant;</span>\n<span class=\"gi\">+                let mask = 0xFFFF &lt;&lt; (imm.shift * 16);</span>\n<span class=\"gi\">+                let constant = input_constant &amp; !mask | constant;</span>\n<span class=\"w\"> </span>                check_constant(ctx, vcode, rd, 64, constant)\n<span class=\"w\"> </span>            } else {\n<span class=\"w\"> </span>                check_output(ctx, vcode, rd, &amp;[], |_vcode| {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433516805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713272368
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code> and be overwritten, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail, too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n<p>Edit:<br>\nTurns out we should also update the <code>constant</code> passed to <code>check_constant</code> for <code>movk</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/pcc.rs b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gh\">index cdc6ca42e..b2dd95577 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gu\">@@ -305,7 +305,8 @@ pub(crate) fn check(</span>\n<span class=\"w\"> </span>            let input = get_fact_or_default(vcode, rn, 64);\n<span class=\"w\"> </span>            if let Some(input_constant) = input.as_const(64) {\n<span class=\"w\"> </span>                let constant = u64::from(imm.bits) &lt;&lt; (imm.shift * 16);\n<span class=\"gd\">-                let constant = input_constant | constant;</span>\n<span class=\"gi\">+                let mask = 0xFFFF &lt;&lt; (imm.shift * 16);</span>\n<span class=\"gi\">+                let constant = input_constant &amp; !mask | constant;</span>\n<span class=\"w\"> </span>                check_constant(ctx, vcode, rd, 64, constant)\n<span class=\"w\"> </span>            } else {\n<span class=\"w\"> </span>                check_output(ctx, vcode, rd, &amp;[], |_vcode| {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433517009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713272417
    },
    {
        "content": "<p>feilongjiang edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2058931085\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Also, find another issue on AArch64 when generating facts for <code>mov</code> instructions:<br>\nCurrently, <code>movk</code> will generate a fact range by simply orring the old <code>running_value</code> with <code>imm16 &lt;&lt; shift</code> [1], but to get the correct fact range, maybe we should use the following snippets:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">&amp;=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n<span class=\"n\">running_value</span><span class=\"w\"> </span><span class=\"o\">|=</span><span class=\"w\"> </span><span class=\"n\">imm16</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>For example, for immediate <code>0x9_ffff_ffff</code>, we need two <code>mov</code> instructions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">movn</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">65526</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">32</span>\n<span class=\"w\">    </span><span class=\"n\">v193</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movk</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v194</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v193</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LSL</span><span class=\"w\"> </span>#<span class=\"mi\">48</span>\n<span class=\"w\">    </span><span class=\"n\">v194</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff0009ffffffff</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The first <code>movn</code> generates the correct fact range as #7593 merged. But for <code>movk</code>, it should be <code>range(64, 0x9ffffffff, 0009ffffffff)</code> since we want to move <code>0x9_ffff_ffff</code> to the register, right? If the correct fact range is <code>range(64, 0x9ffffffff, 0x9ffffffff)</code>, then the later <code>subsume</code> check will fail as <code>0xffff0009ffffffff</code> can not subsume <code>0x9ffffffff</code>.</p>\n<p>Before <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, it will not trigger any error since we only check the range generated by <code>mov</code> instructions (but incorrect fact range). After that, the fact range of <code>movk</code> may be an alias of the previous <code>vreg</code> and be overwritten, which may result in fact range mismatch. E.g.: for the immediate <code>0xFFFFFFFFFFF0BDC0</code>, the expected fact would be <code>Range { bit_width: 64, min: 0xFFFFFFFFFFF0BDC0, max: 0xFFFFFFFFFFF0BDC0}</code>, but the actual fact is <code>Range { bit_width: 64, min: 0xFFFFFFFFFFFFBDC0, max: 0xFFFFFFFFFFFFBDC0}</code>, then <code>subsume</code> check would fail, too.</p>\n<p>Any ideas about that?</p>\n<ol>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396\">https://github.com/bytecodealliance/wasmtime/blob/7daffed81f005bc2fa88d72c44a45a14b91e1566/cranelift/codegen/src/isa/aarch64/lower/isle.rs#L392-L396</a></li>\n</ol>\n<hr>\n<p>Edit:<br>\nTurns out we should also update the <code>constant</code> passed to <code>check_constant</code> for <code>movk</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/pcc.rs b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gh\">index cdc6ca42e..b2dd95577 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/pcc.rs</span>\n<span class=\"gu\">@@ -305,7 +305,8 @@ pub(crate) fn check(</span>\n<span class=\"w\"> </span>            let input = get_fact_or_default(vcode, rn, 64);\n<span class=\"w\"> </span>            if let Some(input_constant) = input.as_const(64) {\n<span class=\"w\"> </span>                let constant = u64::from(imm.bits) &lt;&lt; (imm.shift * 16);\n<span class=\"gd\">-                let constant = input_constant | constant;</span>\n<span class=\"gi\">+                let mask = 0xFFFF &lt;&lt; (imm.shift * 16);</span>\n<span class=\"gi\">+                let constant = input_constant &amp; !mask | constant;</span>\n<span class=\"w\"> </span>                check_constant(ctx, vcode, rd, 64, constant)\n<span class=\"w\"> </span>            } else {\n<span class=\"w\"> </span>                check_output(ctx, vcode, rd, &amp;[], |_vcode| {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433517434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713272561
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2059976165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>PCC isn't actively being worked on right now and we expect some issues when we get back to fuzzing it -- thanks for looking at this! I'd be happy to review a PR with a fix if you have one.</p>\n</blockquote>",
        "id": 433613309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713304212
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>When I run PCC checks on <a href=\"https://github.com/MatthiasJReisinger/PolyBenchC-4.2.1\">PloyBenchC</a>, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>After adding <code>WASMTIME_LOG=trace</code>, the failure was actually caused by the following facts checking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2906l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">59944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">59944</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2905l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Checking</span><span class=\"w\"> </span><span class=\"n\">facts</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">inst</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">compute_addr</span>: <span class=\"nc\">Real</span><span class=\"p\">(</span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">v299</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">1921</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">bits</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">get_fact_or_default</span>: <span class=\"nc\">reg</span><span class=\"w\"> </span><span class=\"n\">v299</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">add</span>: <span class=\"nc\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_width</span>: <span class=\"mi\">32</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">clamp_range</span>: <span class=\"nc\">fact</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>:  -&gt; <span class=\"nc\">clamping</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">checking</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">derived</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">4294967295</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">subsumes</span><span class=\"w\"> </span><span class=\"n\">stated</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71080</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">INFO</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">ir</span>::<span class=\"n\">pcc</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">checking</span><span class=\"w\"> </span><span class=\"n\">instruction</span>: <span class=\"nc\">lea</span><span class=\"w\">     </span><span class=\"mi\">71072</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">v299</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2904l</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<p>Here are the problem facts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit_width</span>: <span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">71072</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which have different <code>bit_width</code>, adding these two facts return a <code>None</code> fact. And finally <code>check_subsumes_optionals</code>  returns an <code>UnsupportedFact</code> error.</p>\n<p>According to the trace log, I find the following IRs are suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block9</span>:\n  <span class=\"nc\">v4339</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xea28</span>\n<span class=\"w\">  </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">  </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span>\n<span class=\"w\">  </span><span class=\"n\">v4407</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x115a8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4406</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x0001_15a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2858</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n</code></pre></div>\n<p>they are all <code>iconst.i32</code> type but have a 64-bit fact range.<br>\nAfter digging in, I think it may introduced by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">https://github.com/bytecodealliance/wasmtime/pull/8173</a>, <code>attach_constant_fact</code> creates facts for constants by adding a 64-bit fact regardless of the constant type.</p>\n<h3>Test Case</h3>\n<p>PolybenchC 2mm</p>\n<h3>Steps to Reproduce</h3>\n<p>First, compile 2mm into wasm with wasi-sdk:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">utilities</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">polybench</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"o\">-</span><span class=\"n\">algebra</span><span class=\"o\">/</span><span class=\"n\">kernels</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__heap_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">__data_end</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">DPOLYBENCH_TIME</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span>\n</code></pre></div>\n<p>Second, run the <code>2mm.wasm</code> with PCC checking enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Cpcc</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">mm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>PCC facts check passed without error.</p>\n<h3>Actual Results</h3>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Proof</span><span class=\"o\">-</span><span class=\"n\">carrying</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">UnsupportedFact</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest commit on the <code>main</code> branch (commit id: d53d078)</p>\n<p>Operating system: Ubuntu 22.04 LTS</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>With the following patch, I can pass the PCC check without error. If it is the root cause, I would like to create a PR to fix that.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -485,7 +487,7 @@ where</span>\n<span class=\"w\"> </span>    /// Helper to propagate facts on constant values: if PCC is\n<span class=\"w\"> </span>    /// enabled, then unconditionally add a fact attesting to the\n<span class=\"w\"> </span>    /// Value's concrete value.\n<span class=\"gd\">-    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value) {</span>\n<span class=\"gi\">+    fn attach_constant_fact(&amp;mut self, inst: Inst, value: Value, ty: Type) {</span>\n<span class=\"w\"> </span>        if self.flags.enable_pcc() {\n<span class=\"w\"> </span>            if let InstructionData::UnaryImm {\n<span class=\"w\"> </span>                opcode: Opcode::Iconst,\n<span class=\"gu\">@@ -493,7 +495,9 @@ where</span>\n<span class=\"w\"> </span>            } = self.func.dfg.insts[inst]\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let imm: i64 = imm.into();\n<span class=\"gd\">-                self.func.dfg.facts[value] = Some(Fact::constant(64, imm as u64));</span>\n<span class=\"gi\">+                let fact = Some(Fact::constant(ty.bits().try_into().unwrap(), imm as u64));</span>\n<span class=\"gi\">+                self.func.dfg.facts[value] = fact;</span>\n<span class=\"w\"> </span>            }\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    }\n</code></pre></div>\n</blockquote>",
        "id": 434231700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713471443
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380#issuecomment-2065220473\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8380\">issue #8380</a>:</p>\n<blockquote>\n<p>Now that #8393 is merged, I'm closing this issue because I assume it's fixed, but if you find more bugs you can open a new issue or re-open this one. Thank you!</p>\n</blockquote>",
        "id": 434231702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713471444
    }
]