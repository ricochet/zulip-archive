[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576\">PR #2576</a> from <code>cmp-load-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>On x64, the new backend generates <code>cmp</code> instructions at their use-sites<br>\nwhen possible (when the icmp that generates a boolean is known) so that<br>\nthe condition flows directly through flags rather than a materialized<br>\nboolean. E.g., both <code>bint</code> (boolean to int) and <code>select</code> (conditional<br>\nselect) instruction lowerings invoke <code>emit_cmp()</code> to do so.</p>\n<p>Load-op fusion in <code>emit_cmp()</code> nominally allowed <code>cmp</code> to use its <code>cmp\nreg, mem</code> form.</p>\n<p>However, the mergeable-load condition (load has only single use) was not<br>\nadequately checked. Consider the sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The load <code>v2</code> is only used in the <code>icmp</code> at <code>v3</code>. However, the cmp will<br>\nbe separately codegen'd twice, once for the <code>bint</code> and once for the<br>\n<code>select</code>.</p>\n<p>Prior to this fix, the above example would result in the load at <code>v2</code><br>\nsinking to the <code>cmp</code> just above the <code>select</code>; we then emit another <code>cmp</code><br>\nfor the <code>bint</code>, but the load has already been used once so we do not<br>\nallow merging. We thus (i) expect the register for <code>v2</code> to contain the<br>\nloaded value, but (ii) skip the codegen for the load because it has been<br>\nsunk. This results in a regalloc error (unexpected livein) as the<br>\nunfilled register is upward-exposed to the entry point.</p>\n<p>Because of this, we need to accept only the reg, reg form in<br>\n<code>emit_cmp()</code> (and the FP equivalent). We could get marginally better<br>\ncode by tracking whether the <code>cmp</code> we are emitting comes from an<br>\n<code>icmp</code>/<code>fcmp</code> with only one use; but IMHO simplicity is a better rule<br>\nhere when subtle interactions occur.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 222513304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610495890
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576\">PR #2576</a>.</p>",
        "id": 222513305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610495890
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576\">PR #2576</a>.</p>",
        "id": 222513306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610495890
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576#pullrequestreview-567466492\">PR Review</a>.</p>",
        "id": 222617862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610559586
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576#discussion_r556709322\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe a comment saying something like \"see comment above <code>let rhs = put_input_in_reg(...)</code> in <code>emit_cmp</code> for why we force RHS into a register\" because this is a bit subtle?</p>\n</blockquote>",
        "id": 222617864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610559586
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576#pullrequestreview-567466492\">PR Review</a>.</p>",
        "id": 222617865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610559586
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576\">PR #2576</a> from <code>cmp-load-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>On x64, the new backend generates <code>cmp</code> instructions at their use-sites<br>\nwhen possible (when the icmp that generates a boolean is known) so that<br>\nthe condition flows directly through flags rather than a materialized<br>\nboolean. E.g., both <code>bint</code> (boolean to int) and <code>select</code> (conditional<br>\nselect) instruction lowerings invoke <code>emit_cmp()</code> to do so.</p>\n<p>Load-op fusion in <code>emit_cmp()</code> nominally allowed <code>cmp</code> to use its <code>cmp\nreg, mem</code> form.</p>\n<p>However, the mergeable-load condition (load has only single use) was not<br>\nadequately checked. Consider the sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The load <code>v2</code> is only used in the <code>icmp</code> at <code>v3</code>. However, the cmp will<br>\nbe separately codegen'd twice, once for the <code>bint</code> and once for the<br>\n<code>select</code>.</p>\n<p>Prior to this fix, the above example would result in the load at <code>v2</code><br>\nsinking to the <code>cmp</code> just above the <code>select</code>; we then emit another <code>cmp</code><br>\nfor the <code>bint</code>, but the load has already been used once so we do not<br>\nallow merging. We thus (i) expect the register for <code>v2</code> to contain the<br>\nloaded value, but (ii) skip the codegen for the load because it has been<br>\nsunk. This results in a regalloc error (unexpected livein) as the<br>\nunfilled register is upward-exposed to the entry point.</p>\n<p>Because of this, we need to accept only the reg, reg form in<br>\n<code>emit_cmp()</code> (and the FP equivalent). We could get marginally better<br>\ncode by tracking whether the <code>cmp</code> we are emitting comes from an<br>\n<code>icmp</code>/<code>fcmp</code> with only one use; but IMHO simplicity is a better rule<br>\nhere when subtle interactions occur.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 222619184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610560148
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576#pullrequestreview-567474871\">PR Review</a>.</p>",
        "id": 222619191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610560153
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576#discussion_r556715815\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done, thanks!</p>\n</blockquote>",
        "id": 222619192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610560154
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2576\">PR #2576</a>.</p>",
        "id": 222625177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610562818
    }
]