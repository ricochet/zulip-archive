[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646253511\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:wasm\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 201312836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592507427
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646277186\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>That definitely sounds like a better design, albeit more implementation effort. How strongly do you feel vs waiting until we actually care about the performance of <code>funcref</code>?</p>\n<blockquote>\n<p>We statically know all possible indices that can be referenced by <code>ref.func</code>,</p>\n</blockquote>\n<p>I know that this is true at the spec level with the <code>refs</code> member of the validation context, but do you know if we actually retain this info anywhere? Not sure this is exposed by <code>wasmparser</code> or <code>cranelift_wasm</code>.</p>\n</blockquote>",
        "id": 201318869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592510495
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646278809\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>I think it's fine to take the shortest path for now regardless of perf to a complete implementation of reference types, but looking forward to things like <code>table.copy</code> and <code>table.init</code> on <code>funcref</code> tables I feel like we're gonna be jumping through a lot of hoops trying to convert back and forth between <code>VMCallerCheckedAnyfunc</code> and <code>VMFuncRef</code>. I'm fine deferring to you, but it feels to me that it'll be basically equivalent the amount of work to take either strategy (in that I'm not sure one is that much more onerous than the other).</p>\n<p>Currently AFAIK the <code>refs</code> member isn't exposed, so cranelift-wasm would likely need to construct this.</p>\n</blockquote>",
        "id": 201319364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592510719
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646283649\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>My one concern with your proposed design is just figuring out where to stick the new side tables for <code>VMCallerCheckedAnyfunc</code>s and how to plumb that through everywhere. Its the kind of thing that seems like it might run into the annoying <code>wasmtime</code>/<code>wasmtime-runtime</code> crate boundary again. I'll investigate a little more and see if I can't make it work.</p>\n</blockquote>",
        "id": 201320586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592511389
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646287636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>Perhaps we could temporarily allocate a <code>VMCallerCheckedAnyfunc</code> for every function in the module, and shove that into the <code>VMContext</code>? That way the index of the function is the same as the index into that table. We could later optimize that to not allocate such a big table for functions that aren't referenced.</p>\n</blockquote>",
        "id": 201321540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592511916
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-646358956\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>Pushed a wip commit that switches to using <code>*const VMCallerCheckedAnyfunc</code> for <code>funcref</code>s. It compiles at least, but tests are failing.</p>\n</blockquote>",
        "id": 201339000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592523841
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-647793632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 201667220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592863703
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-647808185\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>@alexcrichton okay I think this is ready for review again.</p>\n</blockquote>",
        "id": 201670732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592866363
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-647815830\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 201672557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592867838
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648351821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>@alexcrichton okay, I've deduped the null func refs into the store, and made <code>Extern::Func</code> non-nullable.</p>\n<p>Still need to write a couple tests that pass in <code>Val::Func(None)</code> to various things, but I think you can take another look a this while I do that.</p>\n</blockquote>",
        "id": 201766899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592938515
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648362833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>Looks great to me! I've got one final question though before landing, which I just thought of after reading this. Could we be even <em>more</em> clever and make the null funcref a literal null pointer? It looks like you were worried about the cost of <code>call_indirect</code> in terms of number of checks, but I think that it's the same number of checks as before, we're just testing <code>anyfunc_ptr</code> for whether it's null instead of <code>func_addr</code>, which we assume is always non-null.</p>\n<p>With that in place translation of <code>ref.null</code> would be super simple, just a bag of zeros all the time!</p>\n</blockquote>",
        "id": 201769117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592939399
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648412830\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looks great to me! I've got one final question though before landing, which I just thought of after reading this. Could we be even _more_ clever and make the null funcref a literal null pointer? It looks like you were worried about the cost of <code>call_indirect</code> in terms of number of checks, but I think that it's the same number of checks as before, we're just testing <code>anyfunc_ptr</code> for whether it's null instead of <code>func_addr</code>, which we assume is always non-null.</p>\n<p>With that in place translation of <code>ref.null</code> would be super simple, just a bag of zeros all the time!</p>\n</blockquote>\n<p>The concern wasn't about the path for <code>call_indirect</code> with a null funcref (which should be a super rare event, and leads to a trap anyways, so it isn't ever gonna be fast). The concern was introducing an extra potential cache miss in front of every non-trapping <code>call_indirect</code> before we actually end up calling the function.</p>\n<p>Originally, we couldn't use a null pointer for a null func ref, but after all the refactorings this PR has been through, that might not be the case anymore. Let me double check. Either way, I think <code>ref.null</code> will be cheap enough either way. But this actually made me discover a latent bug: <code>cranelift-wasm</code> doesn't allow you customize <code>ref.null</code>'s translation (currently). It also always assumes that all references are of the reference type (which is not true for <code>funcref</code>s for us). So I have a bit more work to do here either way.</p>\n</blockquote>",
        "id": 201781695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592945713
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648433584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>Oh I'm not actually worried about the cost of <code>ref.null</code>, it's more that using a null pointer for <code>ref.null</code> felt clearer and easier to understand.</p>\n<p>Could you elaborate on the cache misses, though? With this current incantation a <code>call_indirect</code> is: load anyref, load funcptr, check null, load type, check match, call. With a null pointer representation it would instead be load anyref, check null, load type, check match, load funcptr, call. I'm not sure how the cache misses would be different there?</p>\n</blockquote>",
        "id": 201784754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947108
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648436256\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>The extra potential cache miss is from changing table elements from <code>VMCallerCheckedAnyfunc</code> to a pointer to a <code>VMCallerCheckedAnyfunc</code> (regardless whether that is a nullable pointer or not).</p>\n<p>It makes it so that there is an extra pointer chase to get to the <code>func_ptr</code> member of an element in the table.</p>\n</blockquote>",
        "id": 201785464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947475
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648438504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>Ah ok, I remember talking about that yeah. I thought you meant that the extra cache miss was about the representation of the null function in the sense of is it a null pointer or is it a sentinel. </p>\n</blockquote>",
        "id": 201786083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947808
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901#issuecomment-648483555\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1901\">Issue #1901</a>:</p>\n<blockquote>\n<p>phew. okay.</p>\n<ul>\n<li>I made <code>ref.null func</code> be a null pointer, rather than a <code>VMCallerCheckedAnyfunc</code> with a null <code>func_ptr</code> member.</li>\n<li>similarly, <code>VMCallerCheckedAnyfunc::func_ptr</code> is now <code>NonNull</code>.</li>\n<li>I added the extra <code>translate_*</code> hooks to <code>cranelift_wasm::FuncEnvironment</code> to allow for non-uniform reference types representations.</li>\n</ul>\n<p>@alexcrichton I think this is ready for another (and hopefully the last!) round of review. Thanks for your patience with this one!</p>\n</blockquote>",
        "id": 201797966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592955699
    }
]