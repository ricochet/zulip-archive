[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3775\">PR #3775</a> from <code>update-instantiation-benchmark</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently the \"sequential\" and \"parallel\" benchmarks reports somewhat<br>\ndifferent timings. For sequential it's time-to-instantiate, but for<br>\nparallel it's time-to-instantiate-10k instances. The parallelism in the<br>\nparallel benchmark can also theoretically be affected by rayon's<br>\nwork-stealing. For example if rayon doesn't actually do any work<br>\nstealing at all then this ends up being a sequential test again.<br>\nOtherwise though it's possible for some threads to finish much earlier<br>\nas rayon isn't guaranteed to keep threads busy.</p>\n<p>This commit applies a few updates to the benchmark:</p>\n<ul>\n<li>\n<p>First an <code>InstancePre&lt;T&gt;</code> is now used instead of a <code>Linker&lt;T&gt;</code> to<br>\n  front-load type-checking and avoid that on each instantiation (and<br>\n  this is generally the fastest path to instantiate right now).</p>\n</li>\n<li>\n<p>Next the instantiation benchmark is changed to measure one<br>\n  instantiation-per-iteration to measure per-instance instantiation to<br>\n  better compare with sequential numbers.</p>\n</li>\n<li>\n<p>Finally rayon is removed in favor of manually creating background<br>\n  threads that infinitely do work until we tell them to stop. These<br>\n  background threads are guaranteed to be working for the entire time<br>\n  the benchmark is executing and should theoretically exhibit what the<br>\n  situation that there's N units of work all happening at once.</p>\n</li>\n</ul>\n<p>I also applied some minor updates here such as having the parallel<br>\ninstantiation defined conditionally for multiple modules as well as<br>\nupping the limits of the pooling allocator to handle a large module<br>\n(rustpython.wasm) that I threw at it.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 271045343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644269809
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3775#pullrequestreview-875326287\">PR review</a>.</p>",
        "id": 271053439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644273328
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3775\">PR #3775</a>.</p>",
        "id": 271061349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644278139
    }
]