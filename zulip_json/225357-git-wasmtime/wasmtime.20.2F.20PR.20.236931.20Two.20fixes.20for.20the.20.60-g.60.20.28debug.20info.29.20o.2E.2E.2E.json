[
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>:</p>\n<blockquote>\n<p>Two changes:<br>\n1) Fix a small bug where a constant DWARF \"block\" wasn't handled in transformation.<br>\n2) Fix up instruction offsets after code emission to account for branch removal.</p>\n<p>See also the commit messages for a bit more detail.</p>\n<p>With these two changes, I am able to step through the code generated by the <a href=\"https://github.com/dotnet/runtimelab/tree/feature/NativeAOT-LLVM\">compiler</a> we are working on.</p>\n<p>Fixes #3999.<br>\n</p>\n</blockquote>",
        "id": 388096495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693399010
    },
    {
        "content": "<p>SingleAccretion updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388100627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400130
    },
    {
        "content": "<p><strong>SingleAccretion</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a> as ready for review.</p>",
        "id": 388101057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400229
    },
    {
        "content": "<p><strong>SingleAccretion</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388101060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400231
    },
    {
        "content": "<p><strong>SingleAccretion</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388101062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400231
    },
    {
        "content": "<p><strong>SingleAccretion</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388101065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400231
    },
    {
        "content": "<p><strong>SingleAccretion</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388101067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693400231
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603065113\">PR review</a>:</p>\n<blockquote>\n<p>Looks good to me!</p>\n<p>Would it be possible to construct a somewhat minimal test case where the branch lowering messes up the offsets and we need to monotize them and add it to our debugging tests? Eg <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/lldb.rs#L62\">https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/lldb.rs#L62</a></p>\n</blockquote>",
        "id": 388151067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693412429
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603083045\">PR review</a>.</p>",
        "id": 388152645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693412929
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603083045\">PR review</a>.</p>",
        "id": 388152900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693413013
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310536263\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm -- it's theoretically possible, if it were a block that had just a jump instruction, no fallthrough (previous block ended in an uncond branch), and we rewrote branches to this last block to go directly to the jump dest instead.</p>\n<p>Perhaps you could pull out the result of <code>buffer.finish(...)</code> (which is where the last optimization call occurs) to before this line?</p>\n</blockquote>",
        "id": 388153442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693413189
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310531586\">PR review comment</a>:</p>\n<blockquote>\n<p>This does seem to leave an interesting corner case: if the very first instruction is a jump and is chomped (say because it's a jump to the fallthrough location, i.e. the next block), we artificially skip.</p>\n<p>However I think it's OK for the following very subtle reason: we can only chomp back to an empty buffer (and hence have an offset of <code>0</code> on the non-first instruction) if we have one jump instruction (and nothing else) in the first block; MachBuffer will never chomp e.g. a cond+uncond pair to nothing. In the single-jump-inst case, that inst also has an offset of <code>0</code> so it's still monotonic.</p>\n<p>Could we leave a comment to this effect?</p>\n</blockquote>",
        "id": 388156114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693414046
    },
    {
        "content": "<p>SingleAccretion submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603137577\">PR review</a>.</p>",
        "id": 388157846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693414662
    },
    {
        "content": "<p>SingleAccretion created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310572384\">PR review comment</a>:</p>\n<blockquote>\n<p>That is a great point you bring up.</p>\n<blockquote>\n<p>if we have one jump instruction (and nothing else) in the first block; MachBuffer will never chomp e.g. a cond+uncond pair to nothing. In the single-jump-inst case, that inst also has an offset of 0 so it's still monotonic.</p>\n</blockquote>\n<p>Am I right to understand that this is because of the VCode construction? I considered:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Block0</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\"> </span><span class=\"n\">Block1</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">Block1</span>\n<span class=\"n\">Block1</span>:\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Which</span><span class=\"w\"> </span><span class=\"n\">_can_</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"w\"> </span><span class=\"n\">down</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I was writing the comment as follows, does that match your expectation?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Not all instructions get their offsets recorded. As for the case where</span>\n<span class=\"c1\">// the offset is legitimately zero (first instruction), we are guaranteed</span>\n<span class=\"c1\">// that no more than one prior jump (which would also have been at a zero</span>\n<span class=\"c1\">// offset) could have been removed because the first block will not have</span>\n<span class=\"c1\">// multiple jumps.</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 388158126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693414747
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310572384\">PR review comment</a>.</p>",
        "id": 388158443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693414832
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310572384\">PR review comment</a>.</p>",
        "id": 388159204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693415079
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603189233\">PR review</a>.</p>",
        "id": 388163392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693416678
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310608317\">PR review comment</a>:</p>\n<blockquote>\n<p>I would replace the last bit with \"... because either the first block will not have multiple branches, or else it would not have been completely elided.\"</p>\n<p>This is related to your example: no block will have two unconditional branches; we emit only one \"terminator\" VCode instruction per block, and those are either one uncond, or a two-target form that is cond+uncond (or switch or ret, both of which are indirect).</p>\n<p>(Additional subtlety just to allay any confusion: some pseudoinsts <em>do</em> emit branch insts internally, but those are completely invisible to the MachBuffer (i.e., not reported).)</p>\n</blockquote>",
        "id": 388164054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693416953
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603269111\">PR review</a>.</p>",
        "id": 388171422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693419768
    },
    {
        "content": "<p>SingleAccretion created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310654029\">PR review comment</a>:</p>\n<blockquote>\n<p>I've thought about this some more, and became less convinced it's a correct assumption. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Block0</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\"> </span><span class=\"n\">Block2</span>\n<span class=\"n\">Block1</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\"> </span><span class=\"n\">Block2</span>\n<span class=\"n\">Block2</span>:\n</code></pre></div>\n<p>(This can be fixed in a more obvious matter by using not-zero for the distinguished \"invalid offset\" value)</p>\n</blockquote>",
        "id": 388173012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693420341
    },
    {
        "content": "<p>SingleAccretion edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310654029\">PR review comment</a>.</p>",
        "id": 388174681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693420988
    },
    {
        "content": "<p>SingleAccretion created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310717406\">PR review comment</a>:</p>\n<blockquote>\n<p>These Unix exclusions are copy&amp;pasted with the assumption they're CI-induced. I verified the test passes on Windows.</p>\n</blockquote>",
        "id": 388180435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693423260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310719701\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah it is a bit funky, but these tests are only force-enabled in some CI configurations.</p>\n</blockquote>",
        "id": 388180504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693423291
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603353963\">PR review</a>.</p>",
        "id": 388180508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693423292
    },
    {
        "content": "<p>SingleAccretion updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388180836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693423421
    },
    {
        "content": "<p>SingleAccretion submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603350900\">PR review</a>.</p>",
        "id": 388182724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693424145
    },
    {
        "content": "<p>SingleAccretion submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1603259960\">PR review</a>.</p>",
        "id": 388184046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693424684
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#discussion_r1310659506\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! Yes, indeed, that's the far more sensible solution. (One might be tempted to make it a <code>Vec&lt;Option&lt;CodeOffset&gt;&gt;</code> but for memory-efficiency let's define a sentinel value e.g. <code>const NO_INST_OFFSET: CodeOffset = u32::MAX</code> maybe?)</p>\n</blockquote>",
        "id": 388184626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693424900
    },
    {
        "content": "<p>SingleAccretion updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388188458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693426460
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931#pullrequestreview-1607309884\">PR review</a>:</p>\n<blockquote>\n<p>Latest changes LGTM to me -- thanks very much for this!</p>\n</blockquote>",
        "id": 388560454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693586350
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6931\">PR #6931</a>.</p>",
        "id": 388571209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693590148
    }
]