[
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>:</p>\n<blockquote>\n<p>This pull request is meant to illustrate the RFC proposal to improve control flow integrity for compiled WebAssembly code by using the Branch Target Identification extension to the Arm instruction set architecture (<a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>), so it is not ready to be merged yet.</p>\n</blockquote>",
        "id": 281154437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651670746
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>:</p>\n<blockquote>\n<p>This pull request is meant to illustrate the RFC proposal to improve control flow integrity for compiled WebAssembly code by using the Branch Target Identification extension to the Arm instruction set architecture (<a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>), so it is not ready to be merged yet.</p>\n<p><strong>P.S.</strong> The RFC proposal has now been merged, and the changes in this PR have been updated the reflect the final version of the proposal, so they are now ready.</p>\n</blockquote>",
        "id": 281154690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651670856
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>:</p>\n<blockquote>\n<p>This pull request is meant to illustrate the RFC proposal to improve control flow integrity for compiled WebAssembly code by using the Branch Target Identification (BTI) extension to the Arm instruction set architecture (<a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>), so it is not ready to be merged yet.</p>\n<p><strong>P.S.</strong> The RFC proposal has now been merged, and the changes in this PR have been updated the reflect the final version of the proposal, so they are now ready.</p>\n</blockquote>",
        "id": 281190622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651685443
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 281811971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652183596
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 282264737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652456286
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 284012644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653575242
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 284041841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653589255
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-987707121\">PR review</a>.</p>",
        "id": 284152313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653667535
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r883751123\">PR review comment</a>:</p>\n<blockquote>\n<p>The bti feature being detected doesn't necessarily mean that the kernel supports it, right? Maybe you could try using <code>PROT_BTI</code> and if that fails try again without?</p>\n</blockquote>",
        "id": 284152314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653667535
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-987708996\">PR review</a>.</p>",
        "id": 284152531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653667648
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r883752488\">PR review comment</a>:</p>\n<blockquote>\n<p>This is somewhat unfortunate code duplication.</p>\n</blockquote>",
        "id": 284152532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653667648
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-989284518\">PR review</a>.</p>",
        "id": 284361317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653913964
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r884782811\">PR review comment</a>:</p>\n<blockquote>\n<p>No, that's exactly what it means. The reason is that the 64-bit Arm architecture does not provide any mechanism to unprivileged software, i.e. userspace, to detect the features supported by the processor while bypassing the kernel (or more privileged software); indeed, it does not provide such a mechanism at all (irrespective of the kernel involvement), leaving it to the software environment to define one.</p>\n</blockquote>",
        "id": 284361319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653913964
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 287039710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655897552
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 287041281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655898445
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 287050786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655903331
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a>.</p>",
        "id": 287165385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977199
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a>.</p>",
        "id": 287165386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977199
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1017139769\">PR review</a>.</p>",
        "id": 287201403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995767
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r905110115\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this use <code>io::Error::last_os_error()</code> as well to forward along the original error message?</p>\n</blockquote>",
        "id": 287201404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995767
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r905113310\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps move to a method on <code>Engine</code>?</p>\n</blockquote>",
        "id": 287201405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995767
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r905114259\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of ferrying around this <code>bool</code> as a return value from this function could the <code>is_branch_protection_enabled</code> testing go as a method on <code>Engine</code>? Most contexts that are being given this <code>bool</code> already have the <code>Engine</code> so they should be able to query the engine itself for this </p>\n</blockquote>",
        "id": 287201406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995767
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1017139769\">PR review</a>.</p>",
        "id": 287201409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995768
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r905111914\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps be unconditionally done? I would expect that the detection of the <code>bti</code> feature would happen at a higher level than this (e.g. at the Wasmtime <code>Config</code> layer) where <code>enable_branch_protection</code> is only <code>true</code> if the machine actually has <code>bti</code>.</p>\n<p>Although I think it's ok to still have <code>cfg!(target_arch = \"aarch64\")</code> in the condition since this is still arm64-specific.</p>\n</blockquote>",
        "id": 287201412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655995769
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 293704458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660652438
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074154048\">PR review</a>.</p>",
        "id": 293721802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660657765
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946803576\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could this perhaps be unconditionally done? I would expect that the detection of the <code>bti</code> feature would happen at a higher level than this (e.g. at the Wasmtime <code>Config</code> layer) where <code>enable_branch_protection</code> is only <code>true</code> if the machine actually has <code>bti</code>.</p>\n</blockquote>\n<p>My other comment provides a bit of context, but I didn't touch the higher-level layers on purpose, so that we support as much flexibility as possible, e.g. compile ahead-of-time a module with BTI on a machine that does not support BTI, or load a module that has been compiled ahead-of-time without BTI, while the engine is set to use BTI. I think that we will need to be more careful if we are making these decisions at a higher level - for instance, distinguish between <code>wasmtime compile</code> and <code>wasmtime run</code>.</p>\n</blockquote>",
        "id": 293721803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660657765
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a>.</p>",
        "id": 293721834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660657776
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074214447\">PR review</a>.</p>",
        "id": 293728835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660104
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074214447\">PR review</a>.</p>",
        "id": 293728836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660105
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946848080\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that <code>isa_flags</code> always come from the <code>Engine</code> itself could this parameter be dropped and internally this uses <code>self.compiler().isa_flags()</code>?</p>\n</blockquote>",
        "id": 293728837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660105
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946849918\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be dropped here since it can be inferred from the <code>&amp;Engine</code> argument?</p>\n</blockquote>",
        "id": 293728838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660105
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946845040\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps still fall through to <code>rustix</code> below but use <code>MprotectFlags::from_u32</code> until there's a constant for <code>PROT_BTI</code>?</p>\n</blockquote>",
        "id": 293728839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660105
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946850281\">PR review comment</a>:</p>\n<blockquote>\n<p>Since this an be inferred from <code>&amp;Engine</code>-the-argument could this return value be dropped?</p>\n</blockquote>",
        "id": 293728840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660105
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r946849272\">PR review comment</a>:</p>\n<blockquote>\n<p>Also if it's a perf concern it might be prudent to add <code>engine.compiler().is_branch_protection_enabled(..)</code> since <code>isa_flags()</code> returns a whole new <code>BTreeMap</code> each time it's called I think. Or otherwise watch it get enabled on <code>Config</code> and ferry through that <code>bool</code> to here or similar.</p>\n</blockquote>",
        "id": 293728852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660107
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 293730395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660602
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074657648\">PR review</a>.</p>",
        "id": 293783375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660677270
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r947166695\">PR review comment</a>:</p>\n<blockquote>\n<p>There is one case in which the flags come from a previously compiled module - <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693/files#diff-f2a833f03cb2f0dfcd4dfda02740e498dea0ce15fc9749d67c711999c22ea5cfR230\">line 230</a> in <code>crates/wasmtime/src/module/serialization.rs</code>. However, I can create a wrapper function, say <code>is_branch_protection_enabled_globally()</code>, that simply calls this one with a fixed parameter, <code>&amp;engine.compiler().isa_flags()</code>, and change most call sites to invoke it instead.</p>\n</blockquote>",
        "id": 293783376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660677271
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r947168762\">PR review comment</a>:</p>\n<blockquote>\n<p>See my comment about line 540 in <code>crates/wasmtime/src/engine.rs</code>.</p>\n</blockquote>",
        "id": 293783833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660677444
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074660618\">PR review</a>.</p>",
        "id": 293783834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660677444
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r947179233\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a bit tricky, but the reason is the cache implementation on line 291, and in particular the call to <code>SerializedModule::into_parts()</code> on line 314, which, given the declaration of <code>ModuleCacheEntry::get_data_raw()</code>, enforces a particular function signature for <code>Module::build_artifacts()</code>. I tried changing the closure on line 311, so that it didn't return whatever <code>SerializedModule::into_parts()</code>'s return value was directly by defining a mutable flag <code>enable_branch_protection</code> inside <code>Module::from_binary()</code>, but then the Rust compiler complained that it could not accept a closure that captured variables in that location.</p>\n</blockquote>",
        "id": 293785939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660678269
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1074675416\">PR review</a>.</p>",
        "id": 293785942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660678269
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 294248111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660909722
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 294251125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660910763
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1078739222\">PR review</a>.</p>",
        "id": 294253891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660911847
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r950134498\">PR review comment</a>:</p>\n<blockquote>\n<p>@alexcrichton I am not too happy about this part, but I tried separating the parsing of the ELF image and the changing of the memory protection done by <code>CodeMemory::publish()</code> and I ran into various borrow checker and lifetime issues that seemed beyond my Rust skills, so I went ahead with this suboptimal, but nevertheless correct solution.</p>\n</blockquote>",
        "id": 294253892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660911847
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1079279720\">PR review</a>.</p>",
        "id": 294349600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660937447
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r950505911\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh dear, I'll work on improving this with some refactorings but otherwise this PR looks good to me, thanks for the updates!</p>\n</blockquote>",
        "id": 294349601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660937447
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r950505911\">PR review comment</a>.</p>",
        "id": 294349626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660937455
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r950513797\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah I ended up with <a href=\"https://github.com/akirilov-arm/wasmtime/pull/1\">https://github.com/akirilov-arm/wasmtime/pull/1</a> which was easier than I thought</p>\n</blockquote>",
        "id": 294351539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660938275
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1079291040\">PR review</a>.</p>",
        "id": 294351540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660938275
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 294656701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661168324
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1080336435\">PR review</a>.</p>",
        "id": 294658923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661169189
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r951346034\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, parsing the ELF header twice definitely helps.</p>\n</blockquote>",
        "id": 294658924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661169189
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 294660338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661169668
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 294660584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661169763
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r951346034\">PR review comment</a>.</p>",
        "id": 294661127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661169951
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1081133823\">PR review</a>.</p>",
        "id": 294766816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r951911208\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than take a single <code>bool</code> here, can we take an options struct? It may seem overkill for one flag but <code>enable_branch_protection</code> would not be my first guess for the meaning of a bare <code>false</code> hanging out in a <code>Memory::new</code> call :-)</p>\n</blockquote>",
        "id": 294766817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202345
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1081133823\">PR review</a>.</p>",
        "id": 294766818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r951908944\">PR review comment</a>:</p>\n<blockquote>\n<p>This logic feels a little bit brittle to me. If I understand correctly, it is determining what the \"real\" CLIF-level block for this target is meant to be, even if we have inserted an edge block, so that we can tell if any indirect branch might reach it; is that right?</p>\n<p>If so, I think what we really should have is a set of <em>lowered</em> block indices reachable via an indirect branch, computed by the lowering-order code. We can compute this when we traverse the lowered-block's successors if we know that we're visiting out-edges of an indirect branch, I think.</p>\n</blockquote>",
        "id": 294766819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r951902680\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add a comment here noting what the <code>bool</code> arg to the closure is for?</p>\n</blockquote>",
        "id": 294766820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202345
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 297550377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662542270
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1098837644\">PR review</a>.</p>",
        "id": 297551451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662542745
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#discussion_r964606281\">PR review comment</a>:</p>\n<blockquote>\n<p>I decided to define a new <code>enum</code> and pass it instead. I noticed that Windows defined some memory protection flags that were related to Control Flow Guard, its own CFI implementation, and this approach seems like a good way to leave the possibility of adding support for them in the future (if we decide to do so), while keeping the current implementation simple.</p>\n</blockquote>",
        "id": 297551452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662542745
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a> from <code>bti</code> to <code>main</code>.</p>",
        "id": 297557018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662544913
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1099949347\">PR review</a>.</p>",
        "id": 297691707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662595628
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#pullrequestreview-1100867977\">PR review</a>.</p>",
        "id": 297795241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662647760
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">PR #3693</a>.</p>",
        "id": 297795286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662647764
    }
]