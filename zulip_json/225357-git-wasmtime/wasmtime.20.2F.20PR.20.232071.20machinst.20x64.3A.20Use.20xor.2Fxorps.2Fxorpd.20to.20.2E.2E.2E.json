[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071\">PR #2071</a> from <code>x64-xor</code> to <code>main</code>:</p>\n<blockquote>\n<p>This shows how we can factor out helpers for knowing whether an instruction redefines its input instead of using it.</p>\n</blockquote>",
        "id": 205145508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595871027
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071\">PR #2071</a>.</p>",
        "id": 205145509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595871027
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071\">PR #2071</a>.</p>",
        "id": 205145510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595871027
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456007824\">PR Review</a>.</p>",
        "id": 205148325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595872709
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456007824\">PR Review</a>.</p>",
        "id": 205148326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595872709
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461066879\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This reads a little awkwardly (three cheers for expression-<code>if</code>s, but...). Perhaps add a helper to <code>RegMemImm</code> such as <code>.to_reg() -&gt; Option&lt;Reg&gt;</code>, then you can do <code>op == ... &amp;&amp; src.to_reg() == Some(dst.to_reg()</code>?</p>\n</blockquote>",
        "id": 205148327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595872710
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461068384\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We should have a comment here describing what's going on, perhaps similar to my suggestion in @abrown's patch <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2060#discussion_r460293433\">here</a>.</p>\n</blockquote>",
        "id": 205148328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595872710
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456055503\">PR Review</a>.</p>",
        "id": 205155730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595876614
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461105405\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Another thought: why not make these methods of <code>Inst</code>? Then we can use this logic with <code>inst.is_def()</code> and avoid searching around for <code>alu_rmi_r_is_def</code>?</p>\n</blockquote>",
        "id": 205155732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595876614
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456057256\">PR Review</a>.</p>",
        "id": 205156036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595876780
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461106826\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What do you think of <code>map_as_def</code>? I don't feel too strongly about that but I think it would pretty helpful to explain here what is going on (e.g. we have to pretend the register is writable because <code>map_def</code> only accepts writable registers).</p>\n</blockquote>",
        "id": 205156037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595876780
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456407527\">PR Review</a>.</p>",
        "id": 205208360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595924455
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461403972\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like the expression-<code>if</code>, but maybe it could be made clearer by changing the formal parameters thusly:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn alu_rmi_r_is_def(rmi: &amp;RegMemImm, reg: Writable&lt;Reg&gt;, op: AluRmiROpcode)\n</code></pre></div>\n\n\n<p>Other comments:</p>\n<ul>\n<li>I would find the name <code>alu_rmi_r_is_const</code> more natural; could that be considered?</li>\n<li>also <code>op == AluRmiROpcode::Sub</code> behaves similarly, and really we should handle that too, even though we don't expect anybody to actually use it</li>\n</ul>\n</blockquote>",
        "id": 205208361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595924455
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456410282\">PR Review</a>.</p>",
        "id": 205208624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595924654
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461406000\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just as a sanity check .. do we need special-case handling for <code>map_regs</code>?  IIUC, if there is no special-case handling then the mapping for the <code>reg</code> component of the insn will assert, complaining that the <code>def</code> and <code>use</code> maps are inconsistent .. yes?  Can you confirm?</p>\n</blockquote>",
        "id": 205208625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595924654
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456417106\">PR Review</a>.</p>",
        "id": 205209357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595925189
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461411395\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Or maybe <code>alu_rmi_r_produces_const</code> ..</p>\n</blockquote>",
        "id": 205209358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595925189
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456423371\">PR Review</a>.</p>",
        "id": 205210202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595925690
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461416345\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also <code>cmpeqxx</code> or whatever the recommended generate-all-1s idiom is.  The Intel opt guide suggests this is recommended for Sandy Bridge onwards.</p>\n</blockquote>",
        "id": 205210203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595925690
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456425064\">PR Review</a>.</p>",
        "id": 205210403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595925825
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-456658623\">PR Review</a>.</p>",
        "id": 205238403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595944704
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r461601172\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I add that in #2060.</p>\n</blockquote>",
        "id": 205238404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595944704
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-459188957\">PR Review</a>.</p>",
        "id": 205591838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596203421
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r463622790\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I like it!</p>\n</blockquote>",
        "id": 205591839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596203421
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-459189612\">PR Review</a>.</p>",
        "id": 205591922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596203474
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r463623319\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I didn't run into any issues with this, and i could confirm it was probably used. This patch does adjust both reg usage collection and reg usage mapping, so nothing should be missing as far as i can tell.</p>\n</blockquote>",
        "id": 205591923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596203474
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#pullrequestreview-459207195\">PR Review</a>.</p>",
        "id": 205594886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596204871
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071#discussion_r463636506\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks for the comments! To sum up:</p>\n<ul>\n<li>created it as a method of Inst</li>\n<li>called <code>produces_const()</code></li>\n<li>and added helper <code>to_reg</code> to both RegMem and RegMemImm</li>\n</ul>\n</blockquote>",
        "id": 205594887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596204871
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071\">PR #2071</a> from <code>x64-xor</code> to <code>main</code>:</p>\n<blockquote>\n<p>This shows how we can factor out helpers for knowing whether an instruction redefines its input instead of using it.</p>\n</blockquote>",
        "id": 205596415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596205650
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2071\">PR #2071</a>.</p>",
        "id": 205637129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596226674
    }
]