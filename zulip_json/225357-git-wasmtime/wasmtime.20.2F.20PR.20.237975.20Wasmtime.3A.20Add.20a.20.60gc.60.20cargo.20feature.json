[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a> from <code>fitzgen:gc-cargo-feature</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This controls whether support for <code>ExternRef</code> and its associated deferred, reference-counting garbage collector is enabled at compile time or not. It will also be used for similarly for Wasmtime's full Wasm GC support as that gets added.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422724262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708560293
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422724263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708560293
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422724264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708560293
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1958422125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<p>I didn't add a smoke test build without the <code>gc</code> cargo feature to CI, but I can do that if we decide we can afford the CI time.</p>\n</blockquote>",
        "id": 422724339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708560348
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1958476007\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 422729199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708563819
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1958476178\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 422729218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708563832
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896177326\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n<p>My main comments below are about perhaps shifting around <code>#[cfg]</code> to try to reduce it. That's my main worried with these sorts of features is that it can become difficult in the limit to ensure all the <code>#[cfg]</code> annotations are aligned so I'm hoping we can try to reduce them as much as possible. More-or-less I think that <code>ExternRef</code> and probably <code>VMExternRef</code> should have the same API no matter the feature set (modulo constructors) and that way consumers don't have to <code>#[cfg]</code> which should help centralize this.</p>\n<p>We'll also definitely want this on CI and I'd recommend putting it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e98a8d54ec558724481cf963f879be69ec01795/.github/workflows/main.yml#L277-L292\">around here</a></p>\n</blockquote>",
        "id": 422846310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616923
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896177326\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n<p>My main comments below are about perhaps shifting around <code>#[cfg]</code> to try to reduce it. That's my main worried with these sorts of features is that it can become difficult in the limit to ensure all the <code>#[cfg]</code> annotations are aligned so I'm hoping we can try to reduce them as much as possible. More-or-less I think that <code>ExternRef</code> and probably <code>VMExternRef</code> should have the same API no matter the feature set (modulo constructors) and that way consumers don't have to <code>#[cfg]</code> which should help centralize this.</p>\n<p>We'll also definitely want this on CI and I'd recommend putting it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e98a8d54ec558724481cf963f879be69ec01795/.github/workflows/main.yml#L277-L292\">around here</a></p>\n</blockquote>",
        "id": 422846311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499449862\">PR review comment</a>:</p>\n<blockquote>\n<p>In the interest of reducing <code>#[cfg]</code> as much as possible (or at least centralizing it) could this and other helper methods be preserved here? That way in <code>wasmtime-runtime</code> itself it would have the <code>match x {}</code> to assert unreachability (or some method on <code>VMExternRef</code> itself)</p>\n</blockquote>",
        "id": 422846314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499445100\">PR review comment</a>:</p>\n<blockquote>\n<p>I realize that this is what I recommended, having an uninhabited public type, but I'm second guessing myself now. This feels like it's pushing a lot of <code>#[cfg]</code> noise into the consumers of externref.</p>\n<p>Could the methods on <code>ExternRef</code>, at least used by Wasmtime itself, be preserved? That way only <code>ExternRef</code> itself needs <code>#[cfg]</code> and consumers don't have to mind whether it's defined or not.</p>\n</blockquote>",
        "id": 422846315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499447976\">PR review comment</a>:</p>\n<blockquote>\n<p>You can actually skip this documentation as rustdoc will auto-generate it with the right annotations. Elsewhere in the codebase we've got <code>#[cfg_attr(docsrs, doc(cfg(feature = \"async\")))]</code>, so could all public methods gated behind the <code>gc</code> feature have a similar annotation?</p>\n</blockquote>",
        "id": 422846316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499460008\">PR review comment</a>:</p>\n<blockquote>\n<p>In contrast with <code>wasmtime::ExternRef</code> this feels like the right balance of <code>#[cfg]</code> to me where we want to change runtime shapes which requires <code>#[cfg]</code> in this file. Not the best but also not overly awful.</p>\n</blockquote>",
        "id": 422846317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499452955\">PR review comment</a>:</p>\n<blockquote>\n<p>For this file in particular I might recommend compiling this in both modes of with/without GC. Each method would have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">)]</span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* current code */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">))]</span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>and only construction-related methods would be not provided</p>\n</blockquote>",
        "id": 422846318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499456124\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll need to be specifically inverted with GC support disabled since wasmparser has this on-by-default</p>\n</blockquote>",
        "id": 422846319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708616924
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422871828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624351
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422871830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624351
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896498991\">PR review</a>.</p>",
        "id": 422872018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624420
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499652584\">PR review comment</a>:</p>\n<blockquote>\n<p>It requires the <code>doc_cfg</code> nightly feature for rustdoc to add that annotation, which <code>docs.rs</code> enables but local <code>cargo doc</code> invocations probably don't. Therefore, I think it is worth leaving the comment there.</p>\n</blockquote>",
        "id": 422872019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624420
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896511530\">PR review</a>.</p>",
        "id": 422872382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624544
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499659616\">PR review comment</a>:</p>\n<blockquote>\n<p>The problem with this specific case is that we store the <code>VMExternRefActivationsTable</code> directly in the store, so if it is uninhabited, then the whole <code>Store</code> becomes uninhabited.</p>\n</blockquote>",
        "id": 422872383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624544
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896514261\">PR review</a>.</p>",
        "id": 422872487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624572
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499661126\">PR review comment</a>:</p>\n<blockquote>\n<p>True yeah, but that's why it's gated by <code>docsrs</code> so the <a href=\"http://docs.rs\">docs.rs</a> docs are the only ones that show this. I'd recommend using the <code>#[cfg_attr]</code> approach since that's what everything else does in the API docs right now, or otherwise we should remove all those and add manual docs there too</p>\n</blockquote>",
        "id": 422872489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624572
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896538190\">PR review</a>.</p>",
        "id": 422873301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624823
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499674780\">PR review comment</a>:</p>\n<blockquote>\n<p>I actually think we want to keep whole implementations of <code>ExternRef</code> separate for GC vs not GC. Looking into the future, there are going to be a bunch more types that are going to be doing this same split, likely whole submodules of things, and I don't think it will be very nice to have all these <code>cfg</code>s for the whole submodule tree. I think it will be better to have (a) the GC-enabled submodule tree and (b) a single GC-disabled module that defines all the same things from (a) but with uninhabited types.</p>\n</blockquote>",
        "id": 422873302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624823
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896546346\">PR review</a>.</p>",
        "id": 422873542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624895
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499679950\">PR review comment</a>:</p>\n<blockquote>\n<p>We could make it an <code>Option</code>, but then we enable the potential for accidentally setting it to <code>None</code> when GC <em>is</em> enabled. I think I'd rather leave these handful of <code>cfg</code>s in comparison to that.</p>\n</blockquote>",
        "id": 422873544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624895
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422873711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708624932
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1959987232\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<p>Okay, I've updated this PR to stub out more <code>VMExternRef</code> things and methods when GC is disabled at compile time and removed a bunch of <code>cfg</code>s from the rest of the code base. Not all of them in <code>store.rs</code>, as mentioned inline above. I think this is ready for another round of review.</p>\n</blockquote>",
        "id": 422874055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625039
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896569698\">PR review</a>.</p>",
        "id": 422874849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625273
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499694853\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess we could have a <code>GcOnly&lt;T&gt;</code> type like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">GcOnly</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">T</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GcOnly</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">with</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">))]</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But that seems like overkill maybe?</p>\n</blockquote>",
        "id": 422874850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625273
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499694853\">PR review comment</a>.</p>",
        "id": 422875072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625341
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422876027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625597
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422876668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708625713
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896637388\">PR review</a>.</p>",
        "id": 422880600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708626914
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499725275\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd personally prefer to avoid <code>GcOnly&lt;T&gt;</code>, I feel like those sorts of wrappers haven't worked out well in the past or require otherwise just as much <code>#[cfg]</code> traffic. For <code>VMExternRefActivationsTable</code> I'd expect that'd become an empty struct rather than uninhabited because there are no references to track?</p>\n</blockquote>",
        "id": 422880601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708626914
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896641790\">PR review</a>.</p>",
        "id": 422880879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627004
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499726750\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the non-gc modules have methods that match on the uninhabited self then? Basically something to keep the <code>#[cfg]</code> rather than requiring it at all use-sites throughout the code base</p>\n</blockquote>",
        "id": 422880880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627004
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499726750\">PR review comment</a>.</p>",
        "id": 422880904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627014
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896668960\">PR review</a>.</p>",
        "id": 422882224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627453
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499734773\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah I could make that change, good idea.</p>\n</blockquote>",
        "id": 422882225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627454
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896672027\">PR review</a>.</p>",
        "id": 422882333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627495
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499735503\">PR review comment</a>:</p>\n<blockquote>\n<p>They do? The only ones left throughout the code base should be things that call constructors.</p>\n</blockquote>",
        "id": 422882334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627495
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896674676\">PR review</a>.</p>",
        "id": 422882460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627532
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499736113\">PR review comment</a>:</p>\n<blockquote>\n<p>(It just turns out we call constructors frequently, unfortunately)</p>\n</blockquote>",
        "id": 422882461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708627533
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422884061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708628104
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896707208\">PR review</a>.</p>",
        "id": 422884072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708628108
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499750267\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 422884074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708628108
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422887808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629395
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422887809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629395
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422887810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629395
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896748666\">PR review</a>.</p>",
        "id": 422887846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629411
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#pullrequestreview-1896748666\">PR review</a>.</p>",
        "id": 422887848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629412
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499783298\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this drop the <code>pub(crate)</code>?</p>\n</blockquote>",
        "id": 422887849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629412
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499784480\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps to <code>_inner.assert_unreachable()</code> or something like that? (where <code>VMExternRef</code> only has that method when the <code>gc</code> feature is disabled)</p>\n</blockquote>",
        "id": 422887850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629412
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499778824\">PR review comment</a>:</p>\n<blockquote>\n<p>This is fine as-is but one trick I've done in the past is at the root of the crate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![cfg_attr(not(feature = </span><span class=\"s\">\"gc\"</span><span class=\"cp\">), allow(irrefutable_let_patterns))]</span>\n</code></pre></div>\n<p>or more often <code>unused_imports</code> or similar. </p>\n</blockquote>",
        "id": 422887851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629412
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#discussion_r1499781056\">PR review comment</a>:</p>\n<blockquote>\n<p>more bits for <code>#[cfg_attr(docsrs, ...)]</code></p>\n</blockquote>",
        "id": 422887852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629412
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422887875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629419
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422888904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629769
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422888959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629793
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422889189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708629875
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1960369432\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:ref-types\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 422909891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708638291
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422917774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708642125
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422917785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708642132
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422935731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708653354
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975#issuecomment-1960631467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 422935780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708653365
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422936280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708653591
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 422936305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708653596
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 423042352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708703284
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 423055886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708707239
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 423055973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708707252
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7975\">PR #7975</a>.</p>",
        "id": 423064291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708710055
    }
]