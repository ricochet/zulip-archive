[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a> from <code>x86_32-mvp</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR, together with #1612, #1615 and #1616 makes it possible to run simple WASI binaries on x86_32 Linux. There are some caveats:</p>\n<p>* Because of the approach taken in #1612, it is necessary to always use <code>--enable-simd</code>.<br>\n  * There are still some issues in the 32-bit legalizer that prevent complex applications from running.<br>\n  * Debug information is not generated.</p>\n<p>Other than that it should be fully functional, or at least I don't see anything obviously broken.</p>\n</blockquote>",
        "id": 195564611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588080904
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-401873168\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-401873168\">PR Review</a>.</p>",
        "id": 195569146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588082926
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416643626\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416643626\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ArgumentPurpose::Normal</code> is not correct.</p>\n</blockquote>",
        "id": 195569147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588082926
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-401874875\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-401874875\">PR Review</a>.</p>",
        "id": 195569407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588083032
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416644995\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416644995\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You should use <code>pos.func.stack_slots.make_incoming_arg(types::I32, offset)</code> and then load from the resulting stack slot.</p>\n</blockquote>",
        "id": 195569408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588083032
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416644995\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r416644995\">PR Review Comment</a>.</p>",
        "id": 195569525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588083098
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402347219\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402347219\">PR Review</a>.</p>",
        "id": 195656614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588131741
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417050262\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417050262\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does that actually work in the prologue itself?</p>\n</blockquote>",
        "id": 195656615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588131741
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402353387\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402353387\">PR Review</a>.</p>",
        "id": 195658322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133345
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417056196\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417056196\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ish. Stack slots are handled correctly in x86 after rsp's final adjustment, even though there may be a little more prologue afterward (for example, x86_64 XMM preservation <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d2ec33c6caec7eda7afcf9f025c88b413b7ff0f1/cranelift/codegen/src/isa/x86/abi.rs#L799\" title=\"https://github.com/bytecodealliance/wasmtime/blob/d2ec33c6caec7eda7afcf9f025c88b413b7ff0f1/cranelift/codegen/src/isa/x86/abi.rs#L799\">relies on this</a>). It looks like this is too early for an explicit <code>stack_load</code> here.</p>\n</blockquote>",
        "id": 195658323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133345
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402354693\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402354693\">PR Review</a>.</p>",
        "id": 195658510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133703
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417057421\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417057421\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That was my understanding too, which is why I spent several hours figuring out a solution that does not involve a <code>stack_load</code>.</p>\n</blockquote>",
        "id": 195658511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133703
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417057515\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417057515\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I agree. What would be appropriate here, assuming <code>stack_load</code> indeed isn't, as discussed below?</p>\n</blockquote>",
        "id": 195658533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133741
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402354820\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402354820\">PR Review</a>.</p>",
        "id": 195658534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588133741
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402402699\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-402402699\">PR Review</a>.</p>",
        "id": 195667330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588143268
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417101780\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r417101780\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe use <code>fill</code>? That one takes the SSA var stored on stack and outputs it ib a register.</p>\n</blockquote>",
        "id": 195667331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588143269
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r418895465\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r418895465\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@bjorn3 <code>fill</code> has the exact same problem as <code>stack_load</code>, no? It also uses stack slots, which is what I am avoiding in this code.</p>\n</blockquote>",
        "id": 196033611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588395190
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-404500465\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-404500465\">PR Review</a>.</p>",
        "id": 196033612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588395190
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406164662\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406164662\">PR Review</a>.</p>",
        "id": 196369854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588713695
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420414022\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420414022\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@iximeow Could you advise on any workable way to implement this operation? I'll be happy to implement whatever the upstream likes here. I think I could use a <code>stack_load</code> with an ad-hoc fixup if that's considered OK, though that looks pretty gross to me personally.</p>\n</blockquote>",
        "id": 196369855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588713695
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406260490\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406260490\">PR Review</a>.</p>",
        "id": 196389380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588729321
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420502865\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420502865\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this is the workable approach, since stack slot machinery isn't usable this early in the function. I agree that <code>stack_load</code> with some later fixup would not be better.</p>\n</blockquote>",
        "id": 196389381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588729321
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406261113\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406261113\">PR Review</a>.</p>",
        "id": 196390147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588730549
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406261113\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406261113\">PR Review</a>.</p>",
        "id": 196390148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588730549
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420503495\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420503495\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is to read the item before the return address, right? That happens to be the leftmost argument and VMContext typically, but I think this ought to be</p>\n<div class=\"codehilite\"><pre><span></span><code>let offset = offset + i32::from(pos.isa.pointer_bytes() * (1 + vmctx_index))\n``` to be correct if VMContext happens to be some later argument.\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 196390149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588730549
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420506568\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420506568\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd give <code>ArgumentPurpose::CalleeSaved</code> a shot here, this is well after register allocation so it's probably free of risk in side effects there. The primary benefit of being descriptive here is to be clear this isn't an argument from the original function somehow ending up in esp, I don't think the <code>ArgumentPurpose</code> at this point would have any actual effect.</p>\n</blockquote>",
        "id": 196390150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588730549
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420507323\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420507323\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                    // The following access can be marked `trusted` because it is a load of an argument. We\n                    // know it is safe because it was safe to write it in preparing this function call.\n                    let ret =\n</code></pre></div>\n\n\n<p>Just because while we can be quite confident it's a trusted access, it might not be immediately obvious to the reader.</p>\n</blockquote>",
        "id": 196390151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588730549
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a> from <code>x86_32-mvp</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR, together with #1612, #1615 and #1616 makes it possible to run simple WASI binaries on x86_32 Linux. There are some caveats:</p>\n<p>* Because of the approach taken in #1612, it is necessary to always use <code>--enable-simd</code>.<br>\n  * There are still some issues in the 32-bit legalizer that prevent complex applications from running.<br>\n  * Debug information is not generated.</p>\n<p>Other than that it should be fully functional, or at least I don't see anything obviously broken.</p>\n</blockquote>",
        "id": 196390697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731281
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420510476\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420510476\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You're being kind heh, I'm pretty sure I, uh, just copy-and-pasted that <code>trusted</code> bit without ever stopping to give it any thought.</p>\n</blockquote>",
        "id": 196390722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731334
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406268166\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406268166\">PR Review</a>.</p>",
        "id": 196390723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731334
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a> from <code>x86_32-mvp</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR, together with #1612, #1615 and #1616 makes it possible to run simple WASI binaries on x86_32 Linux. There are some caveats:</p>\n<p>* Because of the approach taken in #1612, it is necessary to always use <code>--enable-simd</code>.<br>\n  * There are still some issues in the 32-bit legalizer that prevent complex applications from running.<br>\n  * Debug information is not generated.</p>\n<p>Other than that it should be fully functional, or at least I don't see anything obviously broken.</p>\n</blockquote>",
        "id": 196390861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731499
    },
    {
        "content": "<p>whitequark submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406268804\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-406268804\">PR Review</a>.</p>",
        "id": 196390862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731499
    },
    {
        "content": "<p>whitequark created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420511092\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420511092\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good catch, fixed</p>\n</blockquote>",
        "id": 196390863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731499
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a> from <code>x86_32-mvp</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR, together with #1612, #1615 and #1616 makes it possible to run simple WASI binaries on x86_32 Linux. There are some caveats:</p>\n<p>* Because of the approach taken in #1612, it is necessary to always use <code>--enable-simd</code>.<br>\n  * There are still some issues in the 32-bit legalizer that prevent complex applications from running.<br>\n  * Debug information is not generated.</p>\n<p>Other than that it should be fully functional, or at least I don't see anything obviously broken.</p>\n</blockquote>",
        "id": 196390892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731549
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420503495\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#discussion_r420503495\">PR Review Comment</a>.</p>",
        "id": 196391073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588731750
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a> from <code>x86_32-mvp</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR, together with #1612, #1615 and #1616 makes it possible to run simple WASI binaries on x86_32 Linux. There are some caveats:</p>\n<p>* Because of the approach taken in #1612, it is necessary to always use <code>--enable-simd</code>.<br>\n  * There are still some issues in the 32-bit legalizer that prevent complex applications from running.<br>\n  * Debug information is not generated.</p>\n<p>Other than that it should be fully functional, or at least I don't see anything obviously broken.</p>\n</blockquote>",
        "id": 196859704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588916524
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-408638063\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620#pullrequestreview-408638063\">PR Review</a>.</p>",
        "id": 196984541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589019998
    },
    {
        "content": "<p>iximeow merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1620\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1620\">PR #1620</a>.</p>",
        "id": 196984549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589020028
    }
]