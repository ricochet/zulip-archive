[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011402
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011402
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011402
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011402
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011403
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">issue #6038</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term that constructs constants without having to know whether we need to use <code>iconst</code>, <code>vconst</code>, <code>f32const</code>, <code>f64const</code>, …</p>\n<h4>Benefit</h4>\n<p>We can write more general optimizations without needing a lot of special cases.</p>\n<h4>Implementation</h4>\n<p>I'm pretty sure this isn't quite right, but I'm thinking of an ISLE term something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"nv\">pure</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Type</span><span class=\"w\"> </span><span class=\"nv\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">uextend</span><span class=\"w\"> </span><span class=\"nv\">$I128</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">$I64</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_int</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ty_vec</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">splat</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lane_type</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>I don't know whether this should go in <code>prelude-opt.isle</code> or <code>prelude.isle</code>. It depends on whether it's useful in lowering as well as optimization. I think it probably isn't useful in lowering and should go in the optimization-specific prelude.</p>\n<p>Thanks to @fitzgen for the general idea.</p>\n</blockquote>",
        "id": 342445583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679011500
    }
]