[
    {
        "content": "<p>ueno opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214015643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603264928
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 217502731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605966948
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 217514728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605986280
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 217534860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606021416
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 217552812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606054001
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304#pullrequestreview-537837942\">PR Review</a>.</p>",
        "id": 217802319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606246126
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304#discussion_r529825954\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this be <code>&amp;self</code> instead of <code>&amp;mut self</code>?</p>\n</blockquote>",
        "id": 217802321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606246127
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a> from <code>wip/dueno/entries</code> to <code>main</code>:</p>\n<blockquote>\n<p>I am sure that this is not a good idea and there could be a better approach, but I would like to hear any opinions.</p>\n<p>In our project, we want to open an I/O stream in a custom WASI module (or dynamically open it by the host) and somehow inject its handle to the main WASI module, to allow the guest to read/write with the <code>fd_*</code> functions. That is currently not possible because the FD management (<code>EntryTable</code>) is internal to the wasi-common crate.</p>\n<p>I'm wondering if <code>EntryTable</code> can be made public, with a couple of registration/lookup methods, so other modules can register FD through it.  A typical usage would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// Create a centrally managed file descriptor table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">EntryTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create WasiCtx with the table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">// Create a context of an external WASI module with the same table.</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiOtherCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The implementation of <code>WasiOtherCtx</code> can create a <code>Handle</code> internally and register it with <code>EntryTable::insert_handle</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[x] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[x] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217845207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606281015
    },
    {
        "content": "<p>ueno submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304#pullrequestreview-538161438\">PR Review</a>.</p>",
        "id": 217845219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606281052
    },
    {
        "content": "<p>ueno created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304#discussion_r530111831\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Fixed; thanks!</p>\n</blockquote>",
        "id": 217845220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606281053
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a>.</p>",
        "id": 426246559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710296403
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304#issuecomment-1993151978\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2304\">PR #2304</a>:</p>\n<blockquote>\n<p>This is a pretty old PR at this point and lots has changed in the interim, especially around WASI, so I'm going to close this. If there's still bits to pull in today though I think it'd be good to update and re-send.</p>\n</blockquote>",
        "id": 426246571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710296404
    }
]