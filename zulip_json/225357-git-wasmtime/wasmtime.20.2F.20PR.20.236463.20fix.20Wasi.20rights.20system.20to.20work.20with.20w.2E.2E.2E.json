[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a> from <code>bytecodealliance:pch/wasi_read_write_rights</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Based on #6390 </p>\n<p>This is an upstreaming of #6462 </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using fd_fdstat_get) and used those to mask the rights requested to path_open. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to path_open, which is a problem because the FD_READ and FD_WRITE rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>\n<p>directories always return the full set of rights in fd_fdstat_get.<br>\nwe record the access mode that a file is opened with, and use that to set the FD_READ and FD_WRITE bits in fs_rights_base for a file's fd_fdstat_get.</p>\n</li>\n<li>\n<p>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling fd_read and fd_write</p>\n</li>\n<li>This PR is just for the release-9.0.0 branch, I will work on upstreaming it to main but the situation there is slightly more complex because the test also needs to pass under the preview 2 implementation.</li>\n</ul>\n<p>Preview 2's wit definition was unintentionally (per @sunfishcode) missing a way for <code>filesystem.{read,write,append}-via-stream</code> to return an <code>error-code</code> when a descriptor cannot be used to create such a stream. I added this to the wit definition in order to make the preview 2 behavior match the legacy implementation.</p>\n</blockquote>",
        "id": 361188116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685060525
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>:</p>\n<blockquote>\n<p>Based on #6390 </p>\n<p>This is an upstreaming of #6462 </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using fd_fdstat_get) and used those to mask the rights requested to path_open. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to path_open, which is a problem because the FD_READ and FD_WRITE rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>directories always return the full set of rights in fd_fdstat_get.</li>\n<li>legacy implementation records the access mode that a file is opened with, and use that to set the FD_READ and FD_WRITE bits in fs_rights_base for a file's fd_fdstat_get. The preview 2 implementation already did this.</li>\n<li>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling fd_read and fd_write</li>\n</ul>\n<p>Preview 2's wit definition was unintentionally (per @sunfishcode) missing a way for <code>filesystem.{read,write,append}-via-stream</code> to return an <code>error-code</code> when a descriptor cannot be used to create such a stream. I added this to the wit definition in order to make the preview 2 behavior match the legacy implementation.</p>\n</blockquote>",
        "id": 361188137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685060556
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>:</p>\n<blockquote>\n<p>Based on #6390 because I needed to edit wits - will land after that merges.</p>\n<p>This is an upstreaming of #6462 </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using fd_fdstat_get) and used those to mask the rights requested to path_open. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to path_open, which is a problem because the FD_READ and FD_WRITE rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>directories always return the full set of rights in fd_fdstat_get.</li>\n<li>legacy implementation records the access mode that a file is opened with, and use that to set the FD_READ and FD_WRITE bits in fs_rights_base for a file's fd_fdstat_get. The preview 2 implementation already did this.</li>\n<li>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling fd_read and fd_write</li>\n</ul>\n<p>Preview 2's wit definition was unintentionally (per @sunfishcode) missing a way for <code>filesystem.{read,write,append}-via-stream</code> to return an <code>error-code</code> when a descriptor cannot be used to create such a stream. I added this to the wit definition in order to make the preview 2 behavior match the legacy implementation.</p>\n</blockquote>",
        "id": 361188354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685060733
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361400361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123263
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>:</p>\n<blockquote>\n<p>This is an upstreaming of #6462 </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6265\">https://github.com/bytecodealliance/wasmtime/pull/6265</a> introduced a regression with programs using wasi-libc, reported at <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415\">https://github.com/WebAssembly/wasi-libc/issues/415</a>.</p>\n<p>Wasi-libc read the rights of the base directory (using fd_fdstat_get) and used those to mask the rights requested to path_open. In 6265, I changed the behavior of fdstat_get to always report and empty set of rights. This means that Wasi-libc will always pass an empty set of rights to path_open, which is a problem because the FD_READ and FD_WRITE rights are how path_open determines if a descriptor is to be opened for reading, writing, or both.</p>\n<p>The fix is as follows:</p>\n<ul>\n<li>directories always return the full set of rights in fd_fdstat_get.</li>\n<li>legacy implementation records the access mode that a file is opened with, and use that to set the FD_READ and FD_WRITE bits in fs_rights_base for a file's fd_fdstat_get. The preview 2 implementation already did this.</li>\n<li>A test demonstrates the behavior of the fdstat rights bits, and that opening for reading, writing, or reading and writing behaves correctly when calling fd_read and fd_write</li>\n</ul>\n<p>Preview 2's wit definition was unintentionally (per @sunfishcode) missing a way for <code>filesystem.{read,write,append}-via-stream</code> to return an <code>error-code</code> when a descriptor cannot be used to create such a stream. I added this to the wit definition in order to make the preview 2 behavior match the legacy implementation.</p>\n</blockquote>",
        "id": 361401064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123434
    },
    {
        "content": "<p><strong>pchickey</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a> as ready for review.</p>",
        "id": 361401114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123445
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/itsrainy\">itsrainy</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361401116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123446
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361401118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123446
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361402029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123680
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361402030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123680
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463#pullrequestreview-1446708905\">PR review</a>.</p>",
        "id": 361402438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123769
    },
    {
        "content": "<p>pchickey has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361402916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685123903
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361433195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685133162
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361433267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685133190
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 361433309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685133206
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362292916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685478206
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362300023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685480914
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362310143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485286
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362310571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485480
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362311975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685486115
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463#pullrequestreview-1451940803\">PR review</a>.</p>",
        "id": 362313586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685486971
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>.</p>",
        "id": 362318048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685489674
    },
    {
        "content": "<p>squeek502 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463#issuecomment-2246130554\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6463\">PR #6463</a>:</p>\n<blockquote>\n<p>The bug that this fixed has regressed in certain ways. Reproduction here: <a href=\"https://github.com/WebAssembly/wasi-libc/issues/415#issuecomment-2244254211\">https://github.com/WebAssembly/wasi-libc/issues/415#issuecomment-2244254211</a></p>\n</blockquote>",
        "id": 453504867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721763170
    }
]