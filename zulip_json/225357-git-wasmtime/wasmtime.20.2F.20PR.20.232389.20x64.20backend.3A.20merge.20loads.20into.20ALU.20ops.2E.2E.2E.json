[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 216298151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605058522
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a>.</p>",
        "id": 216298152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605058522
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a>.</p>",
        "id": 216298153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605058522
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 216298235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605058573
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 216951127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605571991
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 217022707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605629162
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532617517\">PR Review</a>.</p>",
        "id": 217036420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532617517\">PR Review</a>.</p>",
        "id": 217036421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525350477\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ditto.  Also, can you add a 1-liner saying what <code>src_inst</code> is?  Is it the load?  The insn using the result of the load?  etc</p>\n</blockquote>",
        "id": 217036422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525354852\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Confusing that the second operand of the <code>addl</code> is missing; can this be added?  Ditto for the cases below.</p>\n</blockquote>",
        "id": 217036423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525356095\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Uh, this output is so minimal I don't really understand.  If the expected output begins <code>movzbq</code>, it seems like this isn't testing load-op merging at all.</p>\n</blockquote>",
        "id": 217036424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525349810\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Please add a 1-liner comment saying roughly what this does.</p>\n</blockquote>",
        "id": 217036425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605634793
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 217047342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639791
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532696905\">PR Review</a>.</p>",
        "id": 217047445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639841
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525413292\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, yes, this test is actually testing that the merge <em>doesn't</em> happen (because doing so would cause a 32-bit load as part of a 32-bit add instruction, but the <code>i8</code> may be the last byte in the heap, for example). Added a comment to this effect.</p>\n</blockquote>",
        "id": 217047448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639841
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532698729\">PR Review</a>.</p>",
        "id": 217047750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639981
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525414759\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The idea here was to make the test invariant to possible regalloc changes; for some reason it's using <code>r12</code> here, which seemed odd to me. But, I suppose it's clearer to just do the Simple Thing and match the whole instruction; fixed.</p>\n</blockquote>",
        "id": 217047752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639981
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532698802\">PR Review</a>.</p>",
        "id": 217047761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639986
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525414822\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 217047762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639986
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#pullrequestreview-532698946\">PR Review</a>.</p>",
        "id": 217047780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639999
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#discussion_r525414933\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 217047781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605639999
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a> from <code>x64-load-op</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR makes use of the support in #2366 for sinking effectful<br>\ninstructions and merging them with consumers. In particular, on x86, we<br>\nwant to make use of the ability of many instructions to load one operand<br>\ndirectly from memory. That is, instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we want to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">addq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As described in more detail in #2366, sinking and merging the load is<br>\nonly possible under certain conditions. In particular, we need to ensure<br>\nthat the use is the <em>only</em> use (otherwise the load happens more than<br>\nonce), and we need to ensure that it does not move across other<br>\neffectful ops (see #2366 for how we ensure this).</p>\n<p>This change is actually fairly simple, given that all the framework is<br>\nin place: we simply pattern-match a load on one operand of an ALU<br>\ninstruction that takes an RMI (reg, mem, or immediate) operand, and<br>\ngenerate the mem form when we match.</p>\n<p>Also makes a drive-by improvement in the x64 backend to use<br>\nstatically-monomorphized <code>LowerCtx</code> types rather than a <code>&amp;mut dyn\nLowerCtx</code>.</p>\n<p>On <code>bz2.wasm</code>, this results in ~1% instruction-count reduction. More is<br>\nlikely possible by following up with other instructions that can merge<br>\nmemory loads as well.</p>\n<p>This PR includes #2366 and also #2376 (I built on top of the latter because<br>\notherwise there would be some merge conflicts due to their overlap); both<br>\nof those should land before this does.</p>\n</blockquote>",
        "id": 217047807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605640015
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">PR #2389</a>.</p>",
        "id": 217052044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605642141
    }
]