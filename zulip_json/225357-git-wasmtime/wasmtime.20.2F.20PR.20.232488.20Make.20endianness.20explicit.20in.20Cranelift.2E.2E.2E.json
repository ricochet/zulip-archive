[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">PR #2488</a> from <code>endian-memory-v4</code> to <code>main</code>:</p>\n<blockquote>\n<p>WebAssembly memory operations are by definition little-endian even on<br>\nbig-endian target platforms.  However, other memory accesses will require<br>\nnative target endianness (e.g. to access parts of the VMContext that is<br>\nalso accessed by VM native code).  This means on big-endian targets,<br>\nthe code generator will have to handle both little- and big-endian<br>\nmemory accesses.  However, there is currently no way to encode that<br>\ndistinction into the Cranelift IR that describes memory accesses.</p>\n<p>This patch provides such a way by adding an explicit endianness marker<br>\nto each instance of MemFlags.  Since each Cranelift IR instruction that<br>\ndescribes memory accesses already has an instance of MemFlags attached,<br>\nthat will now automatically provide endianness information.</p>\n<p>Beyond the core mechanics of adding the endianness marker to MemFlags,<br>\nthis patch also updates all creators of MemFlags instances.  In order<br>\nto ensure each MemFlags has the correct endianness marker, it is now<br>\nmandatory to pass such a marker whenever constructing a MemFlags.</p>\n<p>This in turn requires all places constructing a MemFlags (except for<br>\nthe WebAssembly translator) to pass in the native target endianness.<br>\nThis can be determined from the TargetIsa where that is readily<br>\navailable; front-end code wil retrieve the target endianness from a new<br>\nmember of the TargetFrontendConfig structure filled by the back end.</p>\n<p>In addition, the GlobalValueData::Load structure was changed to hold<br>\na full MemFlags instead of just a \"readonly\" flag, which not only<br>\nsimplifies related code a bit but now allows passing through of<br>\nendianness information as well.</p>\n<p>Finally, IR parsing and debug printing routines were updated to<br>\nhandle the new endianness marker; this in turn required updating<br>\nCranelift \"filetests\" test cases that contain memory instructions.</p>\n<p>This patch addresses issue #2124.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219204550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607433192
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">PR #2488</a> from <code>endian-memory-v4</code> to <code>main</code>:</p>\n<blockquote>\n<p>WebAssembly memory operations are by definition little-endian even on<br>\nbig-endian target platforms.  However, other memory accesses will require<br>\nnative target endianness (e.g. to access parts of the VMContext that is<br>\nalso accessed by VM native code).  This means on big-endian targets,<br>\nthe code generator will have to handle both little- and big-endian<br>\nmemory accesses.  However, there is currently no way to encode that<br>\ndistinction into the Cranelift IR that describes memory accesses.</p>\n<p>This patch provides such a way by adding an explicit endianness marker<br>\nto each instance of MemFlags.  Since each Cranelift IR instruction that<br>\ndescribes memory accesses already has an instance of MemFlags attached,<br>\nthat will now automatically provide endianness information.</p>\n<p>Beyond the core mechanics of adding the endianness marker to MemFlags,<br>\nthis patch also updates all creators of MemFlags instances.  In order<br>\nto ensure each MemFlags has the correct endianness marker, it is now<br>\nmandatory to pass such a marker whenever constructing a MemFlags.</p>\n<p>This in turn requires all places constructing a MemFlags (except for<br>\nthe WebAssembly translator) to pass in the native target endianness.<br>\nThis can be determined from the TargetIsa where that is readily<br>\navailable; front-end code wil retrieve the target endianness from a new<br>\nmember of the TargetFrontendConfig structure filled by the back end.</p>\n<p>In addition, the GlobalValueData::Load structure was changed to hold<br>\na full MemFlags instead of just a \"readonly\" flag, which not only<br>\nsimplifies related code a bit but now allows passing through of<br>\nendianness information as well.</p>\n<p>Finally, IR parsing and debug printing routines were updated to<br>\nhandle the new endianness marker; this in turn required updating<br>\nCranelift \"filetests\" test cases that contain memory instructions.</p>\n<p>This patch addresses issue #2124.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219206210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607434316
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538382587\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think using the native endian by default would be nicer. Except for WASM you almost always want to use the native endian.</p>\n</blockquote>",
        "id": 219207205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607434947
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547243773\">PR Review</a>.</p>",
        "id": 219207206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607434947
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547245938\">PR Review</a>.</p>",
        "id": 219207443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435101
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538385309\">PR Review Comment</a>:</p>\n<blockquote>\n<p>But where would you get that?   It depends on the target.</p>\n</blockquote>",
        "id": 219207444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435101
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547248600\">PR Review</a>.</p>",
        "id": 219207788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435291
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538388791\">PR Review Comment</a>:</p>\n<blockquote>\n<p>An empty <code>MemFlags</code> would mean native endian, but you could add a flag to override it to either little endian or big endian. A little endian target will then look if the big endian flag exists and use little endian otherwise. A big endian target will look if the little endian flag exists and use big endian otherwise. You could add a method to <code>MemFlags</code> that accepts the native endian and computes the real endian of the memory instruction to avoid duplication of this logic.</p>\n</blockquote>",
        "id": 219207790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435292
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547248611\">PR Review</a>.</p>",
        "id": 219207791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435292
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538388806\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, the point of requiring <em>every</em> MemFlags to carry explicit endianness was to make it impossible to accidentally \"lose\" endianness e.g. during IR transformations.    This is of course a decision that can be made either way: is it more important to try and prevent this type of accidental bug, at the cost of added verbosity, or the other way round?</p>\n</blockquote>",
        "id": 219207792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607435292
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">PR #2488</a> from <code>endian-memory-v4</code> to <code>main</code>:</p>\n<blockquote>\n<p>WebAssembly memory operations are by definition little-endian even on<br>\nbig-endian target platforms.  However, other memory accesses will require<br>\nnative target endianness (e.g. to access parts of the VMContext that is<br>\nalso accessed by VM native code).  This means on big-endian targets,<br>\nthe code generator will have to handle both little- and big-endian<br>\nmemory accesses.  However, there is currently no way to encode that<br>\ndistinction into the Cranelift IR that describes memory accesses.</p>\n<p>This patch provides such a way by adding an explicit endianness marker<br>\nto each instance of MemFlags.  Since each Cranelift IR instruction that<br>\ndescribes memory accesses already has an instance of MemFlags attached,<br>\nthat will now automatically provide endianness information.</p>\n<p>Beyond the core mechanics of adding the endianness marker to MemFlags,<br>\nthis patch also updates all creators of MemFlags instances.  In order<br>\nto ensure each MemFlags has the correct endianness marker, it is now<br>\nmandatory to pass such a marker whenever constructing a MemFlags.</p>\n<p>This in turn requires all places constructing a MemFlags (except for<br>\nthe WebAssembly translator) to pass in the native target endianness.<br>\nThis can be determined from the TargetIsa where that is readily<br>\navailable; front-end code wil retrieve the target endianness from a new<br>\nmember of the TargetFrontendConfig structure filled by the back end.</p>\n<p>In addition, the GlobalValueData::Load structure was changed to hold<br>\na full MemFlags instead of just a \"readonly\" flag, which not only<br>\nsimplifies related code a bit but now allows passing through of<br>\nendianness information as well.</p>\n<p>Finally, IR parsing and debug printing routines were updated to<br>\nhandle the new endianness marker; this in turn required updating<br>\nCranelift \"filetests\" test cases that contain memory instructions.</p>\n<p>This patch addresses issue #2124.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219210036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607436418
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547500607\">PR Review</a>.</p>",
        "id": 219241753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607451266
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538682901\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this is a case where we want to prefer explicitness: otherwise it's too easy to introduce assumptions that break only on big-endian systems. Hopefully we eventually have such a system on CI, but it's still better to lift the safety to the API/type level.</p>\n</blockquote>",
        "id": 219241755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607451266
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547755227\">PR Review</a>.</p>",
        "id": 219288033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477552
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#pullrequestreview-547755227\">PR Review</a>.</p>",
        "id": 219288034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477552
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538924355\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If we have doc-comments here, I think we should start with what the flag means then what the consequences (undefined behavior if you violate the implication of the flag) are. So something like:</p>\n<ul>\n<li>notrap: Program promises that the access will not trap; if it does, the result is undefined (usually a fatal signal). Causes backends to omit trap metadata for resulting access. Set by <code>MemFlags::trusted()</code>, and in a virtual-machine / sandboxing context, usually used for \"trusted\" loads to VM data structures, i.e., addresses not controlled by untrusted guest code.</li>\n<li>aligned: Program promises that the access is aligned to the natural alignment for the element type. If not, result is undefined (may result in traps on some machines).</li>\n<li>readonly: Program promises that the access is to readonly data. If used for a store, or if the underlying memory content is changed, then results are undefined. In practice, allows the compiler to assume that one loaded value can be reused and assumed to be up-to-date.</li>\n<li>bigendian: (your comment)</li>\n</ul>\n</blockquote>",
        "id": 219288035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477552
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538922335\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Outdated doc-comment? In principle, any of the <code>MemFlags</code> bits could apply to a global value load, not just <code>readonly</code>, I think.</p>\n</blockquote>",
        "id": 219288036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477552
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538926018\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, to add to above: it might be nice to add some rationale here; surely some readers will be confused by this, as it feels a bit odd coming from e.g. LLVM. We should state that this arises from the goal to have a completely machine-independent IR, whose meaning doesn't change across targets; in contrast, other IRs often are generated with target information already in mind. The client that generates IR <em>may</em> wish to consult target info to optimally choose \"native\" endian for cases where it doesn't matter, but it's better to be explicit about this in all cases.</p>\n</blockquote>",
        "id": 219288037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477552
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488#discussion_r538926018\">PR Review Comment</a>.</p>",
        "id": 219288219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607477706
    },
    {
        "content": "<p>cfallin closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2488\">PR #2488</a>.</p>",
        "id": 219908036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607983205
    }
]