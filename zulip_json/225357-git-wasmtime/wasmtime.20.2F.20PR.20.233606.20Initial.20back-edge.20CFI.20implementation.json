[
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a> from <code>pauth</code> to <code>main</code>:</p>\n<blockquote>\n<p>This pull request is meant to illustrate the RFC proposal to improve control flow integrity for compiled WebAssembly code by using the Pointer Authentication extension to the Arm instruction set architecture (<a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>), so it is not in a shape to be merged yet. The generation of the unwinding information is a hack to make things work (i.e. pass the tests) before there is a resolution to <a href=\"https://github.com/gimli-rs/gimli/issues/130\">gimli-rs/gimli#130</a> and <a href=\"https://github.com/gimli-rs/gimli/issues/608\">gimli-rs/gimli#608</a>.</p>\n<p><strong>P.S.</strong> Actually I apply another hack to test the code - I change the processor feature detection logic in <code>cranelift/native/src/lib.rs</code>, so that the availability of PAuth is hardcoded (and there is no need to use a nightly toolchain). What you see here and what CI is testing is the clean code, though.</p>\n</blockquote>",
        "id": 287225099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656006372
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a> from <code>pauth</code> to <code>main</code>:</p>\n<blockquote>\n<p>This pull request is meant to illustrate the RFC proposal to improve control flow integrity for compiled WebAssembly code by using the Pointer Authentication extension to the Arm instruction set architecture (<a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>), so it is not in a shape to be merged yet. The generation of the unwinding information is a hack to make things work (i.e. pass the tests) before there is a resolution to <a href=\"https://github.com/gimli-rs/gimli/issues/130\">gimli-rs/gimli#130</a> and <a href=\"https://github.com/gimli-rs/gimli/issues/608\">gimli-rs/gimli#608</a>.</p>\n<p><strong>P.S.</strong> Actually I apply another hack to test the code - I change the processor feature detection logic in <code>cranelift/native/src/lib.rs</code>, so that the availability of PAuth is hardcoded (and there is no need to use a nightly toolchain). What you see here and what CI is testing is the clean code, though.</p>\n<p><strong>P.P.S.</strong> The RFC proposal has now been merged, and the changes in this PR have been updated the reflect the final version of the proposal, so they are now ready. No hacks are necessary (and have been removed from the code), but on Linux unwinding through functions with signed return addresses will result in crashes unless the unwinder includes the fix discussed in issue #3183 (note that return address signing is not enabled by default).</p>\n</blockquote>",
        "id": 287225943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656006774
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a>.</p>",
        "id": 288010432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656587431
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a>.</p>",
        "id": 288010438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656587435
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r911316681\">PR review comment</a>:</p>\n<blockquote>\n<p>This feels a little too inefficient to me to put into the hotpath of codegen, even if it's used only in prologues/epilogues. I think the reason we pass around <code>Vec&lt;settings::Flags&gt;</code> rather than the backend-specific type is to avoid another type parameter, but I suspect we could do a lot better here with a little more thought. Could you look into whether we could (e.g.) add the ISA-specific <code>Flags</code> type as a projected type on <code>ABIMachineSpec</code> and carry it that way, or maybe even instantiate an <code>ABIMachineSpec</code> with specific flags in the backend and then pass it to the <code>ABICallee</code>, and add <code>&amp;self</code> to all its methods? In other words, let's make flag resolution static if we can.</p>\n</blockquote>",
        "id": 288067073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612807
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r911319978\">PR review comment</a>:</p>\n<blockquote>\n<p>Together with the <code>unimplemented</code> above, is this going to create issues by default on macOS/aarch64? Should we avoid turning on PAuth on this platform until we implement that?</p>\n</blockquote>",
        "id": 288067075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612808
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1025307028\">PR review</a>.</p>",
        "id": 288067077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612808
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r911317406\">PR review comment</a>:</p>\n<blockquote>\n<p>Comment here to note which instruction this is, since it's not the actual <code>ret</code>?</p>\n</blockquote>",
        "id": 288067078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612808
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1025307028\">PR review</a>.</p>",
        "id": 288067079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612808
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r911313240\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we add \"as opposed to the default use of the A key\" here, and maybe also a little bit about why one would want to do this (\"some operating systems or ABIs may require it instead\" or somesuch)?</p>\n</blockquote>",
        "id": 288067081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656612808
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a> from <code>pauth</code> to <code>main</code>.</p>",
        "id": 291883582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659547497
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1060763881\">PR review</a>.</p>",
        "id": 291885374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659548299
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r936966019\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin My thinking was that since macOS hardcoded the use of the B key, the additional metadata specifying the key was unnecessary, hence this logic was safe. Now that we have our custom unwinder, this issue might be moot anyway, except perhaps for debugging/profiling purposes.</p>\n<p>Also, note that back-edge CFI is disabled by default, since <code>sign_return_address</code> is the setting that makes the real change. Actually, I had a thought that since pointer authentication was always supported on Apple Silicon, we might treat that platform differently, i.e. by adding a line here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"s\">\"sign_return_address\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 291885377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659548299
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a>.</p>",
        "id": 291885522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659548371
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1060798398\">PR review</a>.</p>",
        "id": 291889385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659550065
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r936990245\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I had missed that it's still off by default. My real concern was just whether we were going to hit <code>unimplemented</code> bits immediately on macOS but it sounds like that's not the case.</p>\n<p>... and I just tested on my M1 machine and all tests pass, so this indeed is fine.</p>\n<p>I'm personally fine with enabling it by default; @bnjbvr do you have any opinions on this, given you did the initial M1 porting work? Flipping the switch can happen in a followup PR if we decide to do so; we don't need to delay this PR I think.</p>\n</blockquote>",
        "id": 291889386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659550065
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1060799154\">PR review</a>.</p>",
        "id": 291889501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659550105
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606\">PR #3606</a>.</p>",
        "id": 291889519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659550111
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1060818800\">PR review</a>.</p>",
        "id": 291900715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659551161
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r937004917\">PR review comment</a>:</p>\n<blockquote>\n<p>As a further clarification, since we are using the <code>HINT</code> encodings by default, it should actually be safe to enable the mechanism everywhere (modulo the unwinder issues discussed in #3183, which, as I said before, might be moot by now), but at least on Apple Silicon we have a guarantee that we are not filling up the processor pipeline with no-ops.</p>\n</blockquote>",
        "id": 291900717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659551162
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1062030323\">PR review</a>.</p>",
        "id": 292015590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659623532
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r937866235\">PR review comment</a>:</p>\n<blockquote>\n<p>If this passes all tests with this setting, I don't see any downside in enabling it by default, and only benefits, so I'd be in favor of doing this. Perhaps we'd need some basic documentation explaining that \"if you run into this particular kind of SIG* failure, this might be because of pointer authentication\", and make sure it's still possible to disable it, would we run into a bug that wasn't caught by the test suite.</p>\n</blockquote>",
        "id": 292015591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659623532
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#pullrequestreview-1062037743\">PR review</a>.</p>",
        "id": 292016011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659623721
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r937871353\">PR review comment</a>:</p>\n<blockquote>\n<p>I can do a candidate PR for this that one of you can test - of course, it is going to pass the CI checks trivially.</p>\n</blockquote>",
        "id": 292016012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659623722
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3606#discussion_r937871353\">PR review comment</a>.</p>",
        "id": 292016457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659623924
    }
]