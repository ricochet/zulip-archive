[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change ports CLIF's <code>select</code> instruction to ISLE for x64.</p>\n</blockquote>",
        "id": 267652273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641938609
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a>.</p>",
        "id": 267653329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641939086
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a>.</p>",
        "id": 267653345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641939088
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 267653793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641939187
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 267663000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944351
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-849839592\">PR review</a>.</p>",
        "id": 267663202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944515
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r782606007\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin, I believe this test is incorrect--both previously and with the current lowering. By first moving <code>%xmm0</code> to <code>%xmm1</code> with <code>movaps</code>, the flag-checking jumps really have no effect (they just move almost the same data again). Thoughts?</p>\n</blockquote>",
        "id": 267663204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944515
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-849840128\">PR review</a>.</p>",
        "id": 267663284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r782606398\">PR review comment</a>:</p>\n<blockquote>\n<p>Zooming out: not only was the <code>FloatCC::Equal</code> lowering incorrect for FP, but there are no tests (that I can see) that exercise the other variants.</p>\n</blockquote>",
        "id": 267663285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944576
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r782606398\">PR review comment</a>.</p>",
        "id": 267663324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641944609
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783351801\">PR review comment</a>:</p>\n<blockquote>\n<p>This overwrites <code>dst</code> from above, I think -- it seems we want the first cmove to write a tmp, and <code>alternative</code> in the second to be that tmp? So then we have the equivalent of <code>cmove(cc1, a, cmove(cc2, b, alternative))</code>.</p>\n</blockquote>",
        "id": 267769113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013484
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-850875985\">PR review</a>.</p>",
        "id": 267769114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013485
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-850859644\">PR review</a>.</p>",
        "id": 267770012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013861
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-850859644\">PR review</a>.</p>",
        "id": 267770014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783339997\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this have a comment describing what it is?</p>\n</blockquote>",
        "id": 267770015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783352700\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>is_reg</code> prefix makes me think that these will extract from <code>Reg</code>s but they actually will extract from <code>Type</code>s. Can we rename these to <code>is_{xmm,gpr}_type</code> instead perhaps?</p>\n</blockquote>",
        "id": 267770016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783341159\">PR review comment</a>:</p>\n<blockquote>\n<p>So this is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cc1</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">cc2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">consequent</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">alternative</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>right?</p>\n<p>Could we maybe add that pseudocode to the comments for these variants? I think that will be very helpful for future readers.</p>\n</blockquote>",
        "id": 267770017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783355258\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds like we need some runtests for these <code>select</code>s, rather than just compile tests.</p>\n</blockquote>",
        "id": 267770018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783342779\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;;;; Rules for `select` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; CLIF `select` instructions receive a testable argument (i.e. boolean or\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 267770019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r783354492\">PR review comment</a>:</p>\n<blockquote>\n<p>Alternatively, we could have them operate on <code>Reg</code>s and keep the current names. Then we would just have to adjust the call sites appropriately, which I think would be possible for all call sites since they also have <code>Reg</code>s available.</p>\n</blockquote>",
        "id": 267770021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642013862
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 268095297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642209579
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 269657053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643326178
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 269658638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643327003
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 269828278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643420243
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> as ready for review.</p>",
        "id": 269828364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643420297
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 269828873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643420893
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-868269499\">PR review</a>.</p>",
        "id": 270088534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-868269499\">PR review</a>.</p>",
        "id": 270088536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795958459\">PR review comment</a>:</p>\n<blockquote>\n<p>I think these hard-coded sizes are fine, since we know an <code>i128</code> is represented with two <code>i64</code> GPRs.</p>\n</blockquote>",
        "id": 270088537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795963561\">PR review comment</a>:</p>\n<blockquote>\n<p>Doing the <code>emit</code> here is actually unsafe because nothing is guaranteeing that</p>\n<ul>\n<li>we just emitted the flags producer before this</li>\n<li>nothing else is emitted after the flags producer and before this flags consumer that clobbers the flags</li>\n</ul>\n<p>What we want to do is return two <code>ConsumesFlags</code> here that we can then pass into <code>with_flags_2</code> along with a <code>FlagsProducer</code>.</p>\n<p>ISLE doesn't have tuple/fixed-size-arrays support, so we will have to define an extern type for this.</p>\n<p>But! The other rule for <code>cmove_from_values</code> for when it is a single-register value emits only one <code>ConsumesFlags</code>, so I think we actually want an extern type that is either one or two <code>ConsumesFlags</code>. I think we can just use a <code>SmallVec&lt;[ConsumesFlags; 2]&gt;</code>.</p>\n</blockquote>",
        "id": 270088538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795959887\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that <code>cmove_from_values</code> should take these <code>ValueRegs</code> instead of <code>Value</code>s. This lets us reuse it in places where we've already put the values into registers.</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">decl</span> <span class=\"nv\">cmove_from_values</span> <span class=\"p\">(</span><span class=\"nv\">Type</span> <span class=\"nv\">CC</span> <span class=\"nv\">ValueRegs</span> <span class=\"nv\">ValueRegs</span><span class=\"p\">)</span> <span class=\"nv\">ConsumesFlags</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">cmove_from_vlaue</span> <span class=\"nv\">$I128</span> <span class=\"nv\">cc</span> <span class=\"nv\">consequent</span> <span class=\"nv\">alternative</span><span class=\"p\">)</span>\n      <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"o\">````</span>\n<span class=\"nv\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 270088539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795984245\">PR review comment</a>:</p>\n<blockquote>\n<p>These rules look great, thanks!</p>\n</blockquote>",
        "id": 270088540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795985037\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that we will want a <code>with_flags_*</code> variant that takes the <code>SmallVec&lt;[ConsumesFlags; 2]&gt;</code> as well, and it will probably have to be implemented in external Rust code so it can loop over each <code>ConsumesFlags</code> in the small vec.</p>\n</blockquote>",
        "id": 270088541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795964312\">PR review comment</a>:</p>\n<blockquote>\n<p>We need to have an extractor that ensure that this is a single-register type, as discussed before:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>(rule (cmove_from_values (is_single_register_type ty) cc consequent alternative)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 270088545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656585
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r795965978\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: we should clarify how we are combining the multiple flags here:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; Helper for creating `cmove` instructions with the logical OR of multiple\n;; flags. Note that these instructions will always result in more than one\n;; emitted x86 instruction.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 270088546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643656584
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-869830373\">PR review</a>.</p>",
        "id": 270286651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643749727
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r797022801\">PR review comment</a>:</p>\n<blockquote>\n<p>The downside to that is that it bloats the rules in <code>lower.isle</code>; can we do this refactoring in a future PR or issue, e.g., the next time cmove is used?</p>\n</blockquote>",
        "id": 270286652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643749728
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 270287114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643749900
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-869835107\">PR review</a>.</p>",
        "id": 270287599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750051
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r797027331\">PR review comment</a>:</p>\n<blockquote>\n<p>This sounds like a lot of new infrastructure to build and this PR may already have enough of that. The current lowering rules perform the same unsafe emission as this PR. Can't this be done afterwards?</p>\n</blockquote>",
        "id": 270287600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750051
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 270288183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750260
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-869838871\">PR review</a>.</p>",
        "id": 270288327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750302
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r797030999\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, I added an extractor that just checks that the type is not <code>I128</code> in fb334e1--can you take a look at that?</p>\n</blockquote>",
        "id": 270288328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750302
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 270288549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750384
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-869901835\">PR review</a>.</p>",
        "id": 270299174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643754690
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r797097661\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, that works for me.</p>\n</blockquote>",
        "id": 270299175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643754690
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-869914875\">PR review</a>.</p>",
        "id": 270301281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643755751
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r797113045\">PR review comment</a>:</p>\n<blockquote>\n<p>The current lowering rules for <code>select</code> are written in Rust, so it isn't really comparable. It would be one thing if this <code>emit</code> was near the <code>emit</code> for the flags-producer instruction and the <code>emit</code> for the other flags-consuming instruction, but it isn't. It isn't even clear to me, reading this code, that the instructions will always be emitted in the correct order!</p>\n<p>It seems to me that the order of evaluation will be something like</p>\n<ul>\n<li>construct <code>FlagsProducer</code> (do not emit it)</li>\n<li>call this constructor<ul>\n<li>emit first cmove</li>\n<li>construct FlagsConsumer with the second cmove</li>\n</ul>\n</li>\n<li>call a <code>with_flags</code> variant with the constructed <code>FlagsProducer</code> and <code>FlagsConsumer</code><ul>\n<li>emit the producer</li>\n<li>emit the consumer</li>\n</ul>\n</li>\n</ul>\n<p>If that is actually how things end up evaluating, then we would get <code>cmove; test/cmp; cmove</code> instead of <code>test/cmp; cmove; cmove</code>.</p>\n<p>It looks like we aren't testing <code>select</code> with <code>i128</code>s yet (since you have only ported floating point <code>select</code>s so far). But this is exactly the kind bug I want to avoid with a dedicated <code>with_flags_*</code> variant that takes <code>SmallVec&lt;[ConsumesFlags; 2]&gt;</code>, as described above.</p>\n<p>I really think we should fix this issue before landing this PR, or change this PR to not define and use <code>cmove_from_values</code> and instead use plain <code>cmove</code> (which will work for all the single-register values for <code>select</code> that are are currently supported in ISLE).</p>\n</blockquote>",
        "id": 270301282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643755751
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 272027944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644954342
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-883582375\">PR review</a>.</p>",
        "id": 272029760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644955186
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r807267156\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok, @cfallin and I (but mostly @cfallin), worked on this a bit. The unpolished results are in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682/commits/667935f6ae12122be0454ba905c4c665c55404e1\">667935f</a>--@fitzgen, thoughts?<br>\n</p>\n</blockquote>",
        "id": 272029761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644955186
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-883641095\">PR review</a>.</p>",
        "id": 272036763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644958662
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r807308749\">PR review comment</a>:</p>\n<blockquote>\n<p>The extensions to <code>with_flags</code>, <code>ProducesFlags</code>, and <code>ConsumesFlags</code> look good!</p>\n</blockquote>",
        "id": 272036764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644958662
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-883641655\">PR review</a>.</p>",
        "id": 272036848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644958695
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#discussion_r807309156\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks good!</p>\n</blockquote>",
        "id": 272036849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644958695
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 272458102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645218756
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 272458451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645218937
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a>.</p>",
        "id": 272461000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645220343
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a>.</p>",
        "id": 272461002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645220345
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-890203842\">PR review</a>.</p>",
        "id": 272846596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645554603
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#pullrequestreview-890220192\">PR review</a>.</p>",
        "id": 272848626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645555511
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 272894509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645581110
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a> from <code>isle-select</code> to <code>main</code>.</p>",
        "id": 272903817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645590578
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">PR #3682</a>.</p>",
        "id": 272988024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645639398
    }
]