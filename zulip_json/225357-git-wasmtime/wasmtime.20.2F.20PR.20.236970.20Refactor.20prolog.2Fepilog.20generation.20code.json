[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a> from <code>uweigand:refactor-prolog-epilog</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This patch refactors all of the ISA/ABI specific prolog/epilog generation code around the following two ideas:</p>\n<ol>\n<li>\n<p>Separate <em>planning</em> of the function's frame layout from the actual <em>implementation</em> within prolog / epilog code.</p>\n</li>\n<li>\n<p>No longer overload different purposes (middle-end register tracking, platform-specific details like authorization modes, and pop-stack-on-return) into a single return instruction.</p>\n</li>\n</ol>\n<p>As to 1., the new approach is based around a FrameLayout data structure, which collects all information needed to emit prolog and epilog code, specifically the list of clobbered registers, and the sizes of all areas of the function's stack frame.</p>\n<p>This data structure is now computed <em>once</em>, before any code is emitted, and stored in the Callee data structure.  ABIs need to implement this via a new compute_frame_layout callback, which gets all data from common code needed to make all decisions around stack layout in one place.</p>\n<p>The FrameLayout is then used going forward to answer all questions about frame sizes, and it is passed to all ABI routines involved in prolog / epilog code generation.  [ This removes a lot of duplicated calculation, e.g. the list of clobbered registers is now only computed once and re-used everywhere. ]</p>\n<p>This in turn allows to reduce the number of distinct callbacks ABIs need to implement, and simplifies common code logic around how and when to call them.  In particular, we now only have the following four routines, which are always called in this order:</p>\n<p>gen_prologue_frame_setup<br>\ngen_clobber_save</p>\n<p>gen_clobber_restore<br>\ngen_epilogue_frame_restore</p>\n<p>The main differences to before are:</p>\n<ul>\n<li>frame_setup/restore are now called unconditionally (the target ABI can look in the FrameLayout to detect the case where no frame setup is required and skip whatever it thinks appropriate in that case)</li>\n<li>there is no separate gen_prologue_start; if the target needs to do anything here, it can now just do it instead in gen_prologue_frame_setup</li>\n<li>common code no longer attempts to emit a return instruction; instead the target can do whatever is necessary/optimal in gen_epilogue_frame_restore</li>\n</ul>\n<p>[ In principle we could also just have a single gen_prologue and gen_epilogue callback - I didn't implement this because then all the stack checking / probing logic would have to be moved to target code as well. ]</p>\n<p>As to 2., currently targets are required to implement a single<br>\n\"Ret\" return instruction.   This is initially used during<br>\nregister allocation to hold a list of return preg/vreg pairs.<br>\nDuring epilog emission, this is replaced by another copy of<br>\nthe same \"Ret\" instruction that now carries various platform<br>\nspecific data (e.g. authorization modes on aarch64), and is<br>\nalso overloaded to handle the case where the ABI requires<br>\nthat a number of bytes are popped during return.</p>\n<p>This is a bit unfortunate in that it blows up the size of the instruction data, and also forces targets (that do not have a \"ret N\" instruction like Intel) into duplicated and possible sub-optimal implementations of stack adjustment during low-level emission of the return instruction.</p>\n<p>The new approach separates these concerns.  Initially, common code emits a new \"Rets\" instruction that is completely parallel to the existing \"Args\", and is used only during register allocation holding the preg/vreg pairs.  That instruction -like now- is replaced during epilog emission - but unlike now the replacement is now completely up to the target, which can do whatever it needs in gen_epilogue_frame_restore.</p>\n<p>This would typically emit some platform-specific low-level \"Ret\" instruction instead of the regalloc \"Rets\".  It also allows non-Intel targets to just create a normal (or even optimized) stack adjustment sequence before its low-level \"Ret\".</p>\n<p>[ In particular, on riscv64 pop-stack-before-return currently emits two distinct stack adjustment instructions immediately after one another.  These could now be easily merged, but that's not yet done in this patch.  ]</p>\n<p>No functional change intended on any target.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 389476056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694018175
    },
    {
        "content": "<p><strong>uweigand</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 389476060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694018176
    },
    {
        "content": "<p><strong>uweigand</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 389476062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694018176
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 390554417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694535479
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970#pullrequestreview-1622759359\">PR review</a>:</p>\n<blockquote>\n<p>This is excellent -- thank you very much for the simplification!</p>\n<p>I was curious initially why we couldn't just have one \"pre\" hook and one \"post\" hook -- i.e., why we need to separate the clobber-save/restore step -- but at least for the prologue, I guess the answer is that we insert the stack-check beforehand. For the epilogue the ABI code really does just invoke one hook then the other; but for symmetry it's kind of nice to keep the hooks paired. Does that match your thinking?</p>\n<p>In any case, this looks good to merge!</p>\n</blockquote>",
        "id": 390564188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694539178
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 390573598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694542886
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 390576307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694543932
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6970\">PR #6970</a>.</p>",
        "id": 390585818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694548131
    }
]