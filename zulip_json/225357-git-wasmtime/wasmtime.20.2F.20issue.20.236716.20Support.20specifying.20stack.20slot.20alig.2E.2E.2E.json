[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>See title.</p>\n<h4>Benefit</h4>\n<p>Correct alignment are necessary to avoid crashes on some architectures and code may depend on correct alignment. In addition rustc checks that the right alignment is used when dereferencing a raw pointer in debug mode. This breaks rayon which allocates a stack value with cacheline alignment and then takes a raw pointer which it later dereferences. See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381</a>.</p>\n<h4>Implementation</h4>\n<p>Sort stackslots by alignment for better packing and then add padding as necessary and if the alignment of a stack slot exceeds the ABI stack alignment realign the stack at runtime.</p>\n<h4>Alternatives</h4>\n<p>Doing dynamic alignment at runtime in the cranelift ir producer. This is slower and has higher stack usage overhead.</p>\n</blockquote>",
        "id": 374719755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689189538
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716#issuecomment-1633082632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<p>Also necessary to fix <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1258\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1258</a>.</p>\n</blockquote>",
        "id": 374719894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689189576
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>See title.</p>\n<h4>Benefit</h4>\n<p>Correct alignment are necessary to avoid crashes on some architectures and code may depend on correct alignment. In addition rustc checks that the right alignment is used when dereferencing a raw pointer in debug mode. This breaks rayon which allocates a stack value with cacheline alignment and then takes a raw pointer which it later dereferences. See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381</a>.</p>\n<h4>Implementation</h4>\n<p>Sort stackslots by alignment for better packing and then add padding as necessary and if the alignment of a stack slot exceeds the ABI stack alignment realign the stack at runtime.</p>\n<h4>Alternatives</h4>\n<p>Doing dynamic alignment at runtime in the cranelift ir producer. This is slower and has higher stack usage overhead.</p>\n</blockquote>",
        "id": 439064359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715878972
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716#issuecomment-2116066403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<p>Would you mind reopening this? It hasn't been fully resolved yet: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8635/files#r1603954465\">https://github.com/bytecodealliance/wasmtime/pull/8635/files#r1603954465</a></p>\n</blockquote>",
        "id": 439090514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715889077
    },
    {
        "content": "<p>cfallin reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>See title.</p>\n<h4>Benefit</h4>\n<p>Correct alignment are necessary to avoid crashes on some architectures and code may depend on correct alignment. In addition rustc checks that the right alignment is used when dereferencing a raw pointer in debug mode. This breaks rayon which allocates a stack value with cacheline alignment and then takes a raw pointer which it later dereferences. See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1381</a>.</p>\n<h4>Implementation</h4>\n<p>Sort stackslots by alignment for better packing and then add padding as necessary and if the alignment of a stack slot exceeds the ABI stack alignment realign the stack at runtime.</p>\n<h4>Alternatives</h4>\n<p>Doing dynamic alignment at runtime in the cranelift ir producer. This is slower and has higher stack usage overhead.</p>\n</blockquote>",
        "id": 439102696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715894127
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716#issuecomment-2116198518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<p>Sure; to summarize here, the issue is that alignment is now correct with respect to the start of stack frame, but start of stack frame is only aligned as per ABI (e.g. 16 bytes on x86-64 and aarch64) so we need to dynamically align SP (it must be dynamic).</p>\n</blockquote>",
        "id": 439102700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715894128
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716#issuecomment-2116198518\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">issue #6716</a>:</p>\n<blockquote>\n<p>Sure; to summarize here, the issue is that alignment is now correct with respect to the start of stack frame, but start of stack frame is only aligned as per ABI (e.g. 16 bytes on x86-64 and aarch64) so we need to dynamically align SP (it must be dynamic, we can't know statically anything more than the ABI guarantee).</p>\n</blockquote>",
        "id": 439102748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715894155
    }
]