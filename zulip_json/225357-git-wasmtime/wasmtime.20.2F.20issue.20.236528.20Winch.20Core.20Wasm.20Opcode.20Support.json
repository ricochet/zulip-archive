[
    {
        "content": "<p>saulecabrera labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those proposals and other proposals. </p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@jeffcharles)</li>\n<li>[ ]     I32And (@jeffcharles)</li>\n<li>[ ]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@jeffcharles)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364096007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686079311
    },
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those proposals and other proposals. </p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@jeffcharles)</li>\n<li>[ ]     I32And (@jeffcharles)</li>\n<li>[ ]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@jeffcharles)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364096008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686079312
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528#issuecomment-1579323871\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 364096178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686079356
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@jeffcharles)</li>\n<li>[ ]     I32And (@jeffcharles)</li>\n<li>[ ]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@jeffcharles)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364097401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686079719
    },
    {
        "content": "<p>itsrainy <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528#issuecomment-1579437252\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>This is great! Thanks for putting this together @saulecabrera!</p>\n<p>Coincidentally @cfallin, @fitzgen and I started working on <code>i32.popcnt</code> and <code>i64.popcnt</code> just this morning, primarily as a way of giving me a mini-tour of winch. @jeffcharles if you've already done the work for those instructions, we can close the <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">draft PR</a> I just put up. It would also be helpful/interesting for me to compare implementations, if that's the case.</p>\n</blockquote>",
        "id": 364113554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686084902
    },
    {
        "content": "<p>jeffcharles <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528#issuecomment-1579466855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>All good, I haven't started on either of those yet. I'm trying to debug an issue as part of implementing <code>clz</code> and <code>ctz</code> and I think your PR will be very helpful in resolving that issue.</p>\n</blockquote>",
        "id": 364117243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686086396
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[ ]     I32And (@jeffcharles)</li>\n<li>[ ]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364250574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686138204
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[ ]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232128
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[ ]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232131
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[ ]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232133
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[ ]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232134
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[ ]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232136
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[ ]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232138
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[ ]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232140
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[ ]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232144
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[ ]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232145
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[ ]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232148
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[ ]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232149
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[ ]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232151
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[ ]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232153
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[ ]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232155
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[ ]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232174
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[ ]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 364568443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686232178
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[ ]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365674821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686601478
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[ ]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365674827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686601479
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[ ]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365674847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686601484
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[ ]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365674857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686601486
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[ ]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365944160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686677610
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[ ]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 365944166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686677612
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 366242149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686760235
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[ ]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[ ]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 366313798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686780580
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[ ]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 366313887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686780605
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[ ]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 367624847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687178515
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[ ]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 367624855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687178517
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[ ]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 367624860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687178519
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 368088500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687311937
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee </li>\n<li>[ ]     GlobalGet </li>\n<li>[ ]     GlobalSet </li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 368088503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687311940
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[ ]     BrTable</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee (@saulecabrera)</li>\n<li>[ ]     GlobalGet (@saulecabrera)</li>\n<li>[ ]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 368088605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687311985
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     ReturnCall</li>\n<li>[ ]     ReturnCallIndirect </li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee (@saulecabrera)</li>\n<li>[ ]     GlobalGet (@saulecabrera)</li>\n<li>[ ]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 368310966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687367939
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[ ]     LocalTee (@saulecabrera)</li>\n<li>[ ]     GlobalGet (@saulecabrera)</li>\n<li>[ ]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 368311092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687367971
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[ ]     GlobalGet (@saulecabrera)</li>\n<li>[ ]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 373225555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688739226
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[ ]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 373280880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688749960
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 373280884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688749961
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable</li>\n<li>[ ]     Drop</li>\n<li>[ ]     Select</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const (@saulecabrera)</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 373281050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688750005
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[ ]     Drop (@saulecabrera)</li>\n<li>[ ]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[ ]     F32Const (@saulecabrera)</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 386380724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692621940
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[ ]     Drop (@saulecabrera)</li>\n<li>[ ]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[ ]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 386869325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692797431
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[ ]     Drop (@saulecabrera)</li>\n<li>[ ]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 386869333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692797433
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[ ]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 387288216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692973628
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect </li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy</li>\n<li>[ ]     TableFill</li>\n<li>[ ]     TableGet </li>\n<li>[ ]     TableSet</li>\n<li>[ ]     TableGrow </li>\n<li>[ ]     TableSize </li>\n</ul>\n</blockquote>",
        "id": 387288224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692973630
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect (@saulecabrera)</li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit </li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 387861270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693308007
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect (@saulecabrera)</li>\n<li>[ ]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 387861315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693308033
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[ ]     F32Abs</li>\n<li>[ ]     F32Neg</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[ ]     F64Abs</li>\n<li>[ ]     F64Neg</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 388545440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693581450
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[ ]     F32Ceil</li>\n<li>[ ]     F32Floor</li>\n<li>[ ]     F32Trunc,</li>\n<li>[ ]     F32Nearest</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[ ]     F64Ceil,</li>\n<li>[ ]     F64Floor</li>\n<li>[ ]     F64Trunc,</li>\n<li>[ ]     F64Nearest</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 390185412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694380157
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[ ]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 390978738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694708979
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop </li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 393743800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695913098
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop (@saulecabrera)</li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 394396807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696244862
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[ ]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 394701153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696363462
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[ ]     ElemDrop (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600474
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[ ]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600476
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[ ]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600478
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[ ]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600479
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[ ]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600481
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[ ]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600483
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[ ]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600485
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 395265214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600487
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add,</li>\n<li>[ ]     F32Sub</li>\n<li>[ ]     F32Mul</li>\n<li>[ ]     F32Div</li>\n<li>[ ]     F32Min</li>\n<li>[ ]     F32Max</li>\n<li>[ ]     F32Copysign</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add</li>\n<li>[ ]     F64Sub</li>\n<li>[ ]     F64Mul</li>\n<li>[ ]     F64Div</li>\n<li>[ ]     F64Min</li>\n<li>[ ]     F64Max</li>\n<li>[ ]     F64Copysign</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 396135542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697044891
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq</li>\n<li>[ ]     F32Ne</li>\n<li>[ ]     F32Lt</li>\n<li>[ ]     F32Gt</li>\n<li>[ ]     F32Le</li>\n<li>[ ]     F32Ge</li>\n<li>[ ]     F64Eq</li>\n<li>[ ]     F64Ne</li>\n<li>[ ]     F64Lt</li>\n<li>[ ]     F64Gt</li>\n<li>[ ]     F64Le</li>\n<li>[ ]     F64Ge</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 396269168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697110309
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397158074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697565469
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723342
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723344
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723348
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723350
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723351
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[ ]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723353
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[ ]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723358
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[ ]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723359
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[ ]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723361
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[ ]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723362
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[ ]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723364
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[ ]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723366
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[ ]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723368
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[ ]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723370
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[ ]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723374
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[ ]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723375
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[ ]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723377
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[ ]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723379
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[ ]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723380
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[ ]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723382
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[ ]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723384
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[ ]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 397509825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697723385
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[ ]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335725
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[ ]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335727
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[ ]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335729
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[ ]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335732
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[ ]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335733
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[ ]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335735
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[ ]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335736
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[ ]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335738
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[ ]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335739
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[ ]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335741
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[ ]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335743
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S</li>\n<li>[ ]     I64ExtendI32U</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S</li>\n<li>[ ]     I64Extend16S</li>\n<li>[ ]     I64Extend32S</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 398719859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698335744
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S(@jeffcharles)</li>\n<li>[ ]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407270575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702310481
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S(@jeffcharles)</li>\n<li>[ ]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S(@jeffcharles)</li>\n<li>[ ]     I32Extend16S</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407271178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702310624
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[ ]     I64ExtendI32S(@jeffcharles)</li>\n<li>[ ]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S(@jeffcharles)</li>\n<li>[ ]     I32Extend16S (@jeffcharles)</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407271446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702310691
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[ ]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S(@jeffcharles)</li>\n<li>[ ]     I32Extend16S (@jeffcharles)</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555778
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[ ]     I32Extend8S(@jeffcharles)</li>\n<li>[ ]     I32Extend16S (@jeffcharles)</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555780
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[ ]     I32Extend16S (@jeffcharles)</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555784
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[ ]     I64Extend8S(@jeffcharles)</li>\n<li>[ ]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555785
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[ ]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555787
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555789
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[ ]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555790
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S</li>\n<li>[ ]     I32TruncF32U</li>\n<li>[ ]     I32TruncF64S</li>\n<li>[ ]     I32TruncF64U</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S</li>\n<li>[ ]     I64TruncF32U</li>\n<li>[ ]     I64TruncF64S</li>\n<li>[ ]     I64TruncF64U</li>\n<li>[ ]     F32ConvertI32S</li>\n<li>[ ]     F32ConvertI32U</li>\n<li>[ ]     F32ConvertI64S</li>\n<li>[ ]     F32ConvertI64U</li>\n<li>[ ]     F32DemoteF64</li>\n<li>[ ]     F64ConvertI32S</li>\n<li>[ ]     F64ConvertI32U</li>\n<li>[ ]     F64ConvertI64S</li>\n<li>[ ]     F64ConvertI64U</li>\n<li>[ ]     F64PromoteF32</li>\n<li>[ ]     I32ReinterpretF32</li>\n<li>[ ]     I64ReinterpretF64</li>\n<li>[ ]     F32ReinterpretI32</li>\n<li>[ ]     F64ReinterpretI64</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     I32TruncSatF32S</li>\n<li>[ ]     I32TruncSatF32U</li>\n<li>[ ]     I32TruncSatF64S</li>\n<li>[ ]     I32TruncSatF64U</li>\n<li>[ ]     I64TruncSatF32S</li>\n<li>[ ]     I64TruncSatF32U</li>\n<li>[ ]     I64TruncSatF64S</li>\n<li>[ ]     I64TruncSatF64U</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407946762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702555835
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit </li>\n<li>[ ]     DataDrop</li>\n<li>[ ]     MemoryCopy</li>\n<li>[ ]     MemoryFill </li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n</blockquote>",
        "id": 407947233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702556036
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load </li>\n<li>[ ]     I64Load </li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[ ] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[ ] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 408667045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702924405
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize </li>\n<li>[ ]     MemoryGrow </li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[ ] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[ ] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 408667679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702924671
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize (@saulecabrera)</li>\n<li>[ ]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[ ] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[ ] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 408673303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702927005
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize (@saulecabrera)</li>\n<li>[ ]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409020300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703021991
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[ ]     MemorySize (@saulecabrera)</li>\n<li>[ ]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409020302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703021992
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[ ]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198908
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[ ]     MemoryInit (@saulecabrera)</li>\n<li>[ ]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198910
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198915
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[ ]     MemoryCopy (@saulecabrera)</li>\n<li>[ ]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198916
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198918
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[ ]     I32TruncF32S (@jeffcharles)</li>\n<li>[ ]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 409476920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198919
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[ ]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319902
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[ ]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319903
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319905
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[ ]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319906
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[ ]     I64TruncF32U (@jeffcharles)</li>\n<li>[ ]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319908
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[ ]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412941998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319909
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319911
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319911
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319913
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319914
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F32ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319915
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319918
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319919
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319921
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[ ]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319922
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[ ]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319925
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[ ]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319926
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[ ]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319927
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319928
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[ ]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319929
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[ ]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319930
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load </li>\n<li>[ ]     F64Load</li>\n<li>[ ]     I32Load8S </li>\n<li>[ ]     I32Load8U </li>\n<li>[ ]     I32Load16S </li>\n<li>[ ]     I32Load16U</li>\n<li>[ ]     I64Load8S </li>\n<li>[ ]     I64Load8U </li>\n<li>[ ]     I64Load16S </li>\n<li>[ ]     I64Load16U</li>\n<li>[ ]     I64Load32S </li>\n<li>[ ]     I64Load32U </li>\n<li>[ ]     I32Store </li>\n<li>[ ]     I64Store </li>\n<li>[ ]     F32Store</li>\n<li>[ ]     F64Store </li>\n<li>[ ]     I32Store8 </li>\n<li>[ ]     I32Store16</li>\n<li>[ ]     I64Store8</li>\n<li>[ ]     I64Store16 </li>\n<li>[ ]     I64Store32</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 412942069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705319933
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[ ]     I32Load (@saulecabrera)</li>\n<li>[ ]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[ ]     I64Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420128047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707250658
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[ ]     I64Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400431
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[ ]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[ ]     I64Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400432
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[ ]     I64Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400433
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400437
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[ ]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400439
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[ ]     I32Store8 (@saulecabrera)</li>\n<li>[ ]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400440
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[ ]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400443
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400444
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[ ]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400445
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[ ]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400446
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[ ]     I64Load32U (@saulecabrera)</li>\n<li>[ ]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400448
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400451
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[ ]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400452
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[ ]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400453
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[ ]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400454
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[ ]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400455
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[ ]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400457
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[ ]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400458
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400458
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[ ]     I32Load8S (@saulecabrera)</li>\n<li>[ ]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400460
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[ ]     F64Load (@saulecabrera)</li>\n<li>[x]     I32Load8S (@saulecabrera)</li>\n<li>[x]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400464
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[x]     F64Load (@saulecabrera)</li>\n<li>[x]     I32Load8S (@saulecabrera)</li>\n<li>[x]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400465
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[x]     F64Load (@saulecabrera)</li>\n<li>[x]     I32Load8S (@saulecabrera)</li>\n<li>[x]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420462456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707400466
    },
    {
        "content": "<p>saulecabrera closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">issue #6528</a>:</p>\n<blockquote>\n<p>During the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Debugging/2023/debugging-06-01.md\">debugging meeting on June 1, 2023</a>, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contributors to know where to start. </p>\n<p>This list is intended to be a comprehensive compilation of the missing opcodes required to achieve parity with Core Wasm(*). Each entry also includes an owner, indicating that work on a particular opcode is currently in progress.</p>\n<p>(*) Excluding SIMD and Reference Types to start, as drafted in the initial RFC. We can open dedicated issues as we get to those and other proposals.</p>\n<p>cc/ @fitzgen @itsrainy </p>\n<ul>\n<li>[x]     Unreachable (@saulecabrera)</li>\n<li>[x]     Block (@saulecabrera)</li>\n<li>[x]     Loop (@saulecabrera)</li>\n<li>[x]     If (@saulecabrera)</li>\n<li>[x]     Else, (@saulecabrera)</li>\n<li>[x]     Br (@saulecabrera)</li>\n<li>[x]     BrIf (@saulecabrera)</li>\n<li>[x]     Return (@saulecabrera)</li>\n<li>[x]     CallIndirect (@saulecabrera)</li>\n<li>[x]     BrTable (@saulecabrera)</li>\n<li>[x]     Drop (@saulecabrera)</li>\n<li>[x]     Select (@saulecabrera)</li>\n<li>[x]     LocalTee (@saulecabrera)</li>\n<li>[x]     GlobalGet (@saulecabrera)</li>\n<li>[x]     GlobalSet (@saulecabrera)</li>\n<li>[x]     I32Load (@saulecabrera)</li>\n<li>[x]     I64Load (@saulecabrera)</li>\n<li>[x]     F32Load (@saulecabrera)</li>\n<li>[x]     F64Load (@saulecabrera)</li>\n<li>[x]     I32Load8S (@saulecabrera)</li>\n<li>[x]     I32Load8U (@saulecabrera)</li>\n<li>[x]     I32Load16S (@saulecabrera)</li>\n<li>[x]     I32Load16U (@saulecabrera)</li>\n<li>[x]     I64Load8S (@saulecabrera)</li>\n<li>[x]     I64Load8U (@saulecabrera)</li>\n<li>[x]     I64Load16S (@saulecabrera)</li>\n<li>[x]     I64Load16U (@saulecabrera)</li>\n<li>[x]     I64Load32S (@saulecabrera)</li>\n<li>[x]     I64Load32U (@saulecabrera)</li>\n<li>[x]     I32Store (@saulecabrera)</li>\n<li>[x]     I64Store (@saulecabrera)</li>\n<li>[x]     F32Store (@saulecabrera)</li>\n<li>[x]     F64Store (@saulecabrera)</li>\n<li>[x]     I32Store8 (@saulecabrera)</li>\n<li>[x]     I32Store16 (@saulecabrera)</li>\n<li>[x]     I64Store8 (@saulecabrera)</li>\n<li>[x]     I64Store16 (@saulecabrera)</li>\n<li>[x]     I64Store32 (@saulecabrera)</li>\n<li>[x]     MemorySize (@saulecabrera)</li>\n<li>[x]     MemoryGrow (@saulecabrera)</li>\n<li>[x]     F32Const (@saulecabrera)</li>\n<li>[x]     F64Const (@saulecabrera) </li>\n<li>[x]     F32Eq (@jeffcharles)</li>\n<li>[x]     F32Ne(@jeffcharles)</li>\n<li>[x]     F32Lt(@jeffcharles)</li>\n<li>[x]     F32Gt(@jeffcharles)</li>\n<li>[x]     F32Le(@jeffcharles)</li>\n<li>[x]     F32Ge(@jeffcharles)</li>\n<li>[x]     F64Eq(@jeffcharles)</li>\n<li>[x]     F64Ne(@jeffcharles)</li>\n<li>[x]     F64Lt(@jeffcharles)</li>\n<li>[x]     F64Gt(@jeffcharles)</li>\n<li>[x]     F64Le(@jeffcharles)</li>\n<li>[x]     F64Ge(@jeffcharles)</li>\n<li>[x]     I32Clz (@jeffcharles)</li>\n<li>[x]     I32Ctz (@jeffcharles)</li>\n<li>[x]     I32Popcnt (@itsrainy)</li>\n<li>[x]     I32And (@jeffcharles)</li>\n<li>[x]     I32Or (@jeffcharles)</li>\n<li>[x]     I32Xor (@jeffcharles)</li>\n<li>[x]     I32Shl (@jeffcharles)</li>\n<li>[x]     I32ShrS (@jeffcharles)</li>\n<li>[x]     I32ShrU (@jeffcharles)</li>\n<li>[x]     I32Rotl (@jeffcharles)</li>\n<li>[x]     I32Rotr (@jeffcharles)</li>\n<li>[x]     I64Clz (@jeffcharles)</li>\n<li>[x]     I64Ctz (@jeffcharles)</li>\n<li>[x]     I64Popcnt (@itsrainy)</li>\n<li>[x]     I64And (@jeffcharles)</li>\n<li>[x]     I64Or (@jeffcharles)</li>\n<li>[x]     I64Xor (@jeffcharles)</li>\n<li>[x]     I64Shl (@jeffcharles)</li>\n<li>[x]     I64ShrS (@jeffcharles)</li>\n<li>[x]     I64ShrU (@jeffcharles)</li>\n<li>[x]     I64Rotl (@jeffcharles)</li>\n<li>[x]     I64Rotr (@jeffcharles)</li>\n<li>[x]     F32Abs (@elliottt)</li>\n<li>[x]     F32Neg (@elliottt)</li>\n<li>[x]     F32Ceil (@elliottt)</li>\n<li>[x]     F32Floor (@elliottt)</li>\n<li>[x]     F32Trunc (@elliottt)</li>\n<li>[x]     F32Nearest (@elliottt)</li>\n<li>[x]     F32Sqrt (@jeffcharles)</li>\n<li>[x]     F32Add (@jeffcharles)</li>\n<li>[x]     F32Sub (@jeffcharles)</li>\n<li>[x]     F32Mul (@jeffcharles)</li>\n<li>[x]     F32Div (@jeffcharles)</li>\n<li>[x]     F32Min (@jeffcharles)</li>\n<li>[x]     F32Max (@jeffcharles )</li>\n<li>[x]     F32Copysign (@jeffcharles)</li>\n<li>[x]     F64Abs (@elliottt)</li>\n<li>[x]     F64Neg (@elliottt)</li>\n<li>[x]     F64Ceil (@elliottt)</li>\n<li>[x]     F64Floor (@elliottt)</li>\n<li>[x]     F64Trunc (@elliottt)</li>\n<li>[x]     F64Nearest (@elliottt)</li>\n<li>[x]     F64Sqrt (@jeffcharles)</li>\n<li>[x]     F64Add (@jeffcharles)</li>\n<li>[x]     F64Sub (@jeffcharles)</li>\n<li>[x]     F64Mul (@jeffcharles)</li>\n<li>[x]     F64Div (@jeffcharles)</li>\n<li>[x]     F64Min (@jeffcharles)</li>\n<li>[x]     F64Max (@jeffcharles)</li>\n<li>[x]     F64Copysign (@jeffcharles)</li>\n<li>[x]     I32WrapI64 (@jeffcharles)</li>\n<li>[x]     I32TruncF32S (@jeffcharles)</li>\n<li>[x]     I32TruncF32U (@jeffcharles)</li>\n<li>[x]     I32TruncF64S (@jeffcharles)</li>\n<li>[x]     I32TruncF64U (@jeffcharles)</li>\n<li>[x]     I64ExtendI32S(@jeffcharles)</li>\n<li>[x]     I64ExtendI32U(@jeffcharles)</li>\n<li>[x]     I64TruncF32S (@jeffcharles)</li>\n<li>[x]     I64TruncF32U (@jeffcharles)</li>\n<li>[x]     I64TruncF64S (@jeffcharles)</li>\n<li>[x]     I64TruncF64U (@jeffcharles)</li>\n<li>[x]     F32ConvertI32S (@jeffcharles)</li>\n<li>[x]     F32ConvertI32U (@jeffcharles)</li>\n<li>[x]     F32ConvertI64S (@jeffcharles)</li>\n<li>[x]     F32ConvertI64U (@jeffcharles)</li>\n<li>[x]     F32DemoteF64 (@jeffcharles)</li>\n<li>[x]     F64ConvertI32S (@jeffcharles)</li>\n<li>[x]     F64ConvertI32U (@jeffcharles)</li>\n<li>[x]     F64ConvertI64S (@jeffcharles)</li>\n<li>[x]     F64ConvertI64U (@jeffcharles)</li>\n<li>[x]     F64PromoteF32 (@jeffcharles)</li>\n<li>[x]     I32ReinterpretF32 (@jeffcharles)</li>\n<li>[x]     I64ReinterpretF64 (@jeffcharles)</li>\n<li>[x]     F32ReinterpretI32 (@jeffcharles)</li>\n<li>[x]     F64ReinterpretI64 (@jeffcharles)</li>\n<li>[x]     I32Extend8S(@jeffcharles)</li>\n<li>[x]     I32Extend16S (@jeffcharles)</li>\n<li>[x]     I64Extend8S(@jeffcharles)</li>\n<li>[x]     I64Extend16S(@jeffcharles)</li>\n<li>[x]     I64Extend32S(@jeffcharles)</li>\n<li>[x]     MemoryInit (@saulecabrera)</li>\n<li>[x]     DataDrop (@saulecabrera)</li>\n<li>[x]     MemoryCopy (@saulecabrera)</li>\n<li>[x]     MemoryFill (@saulecabrera)</li>\n<li>[x]     TableInit (@saulecabrera)</li>\n<li>[x]     ElemDrop (@saulecabrera)</li>\n<li>[x]     TableFill (@saulecabrera)</li>\n<li>[x]     TableCopy (@saulecabrera)</li>\n<li>[x]     TableGet (@saulecabrera)</li>\n<li>[x]     TableSet (@saulecabrera)</li>\n<li>[x]     TableGrow (@saulecabrera)</li>\n<li>[x]     TableSize (@saulecabrera)</li>\n</ul>\n<h2>Proposals</h2>\n<ul>\n<li>[x] Multi-Value (@saulecabrera)<ul>\n<li>[x] Functions</li>\n<li>[x] Blocks</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 420683680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707494958
    }
]