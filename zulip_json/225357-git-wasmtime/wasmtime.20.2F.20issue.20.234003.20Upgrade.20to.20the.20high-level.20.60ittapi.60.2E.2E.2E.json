[
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1091765366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>Ah, seems compilation of the ittapi crate on windows is broken. Any ideas @abrown @jlb6740?</p>\n</blockquote>",
        "id": 278166580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649339429
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1092037446\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>I looked into this but don't know yet how to resolve it: the compilation failure is due to <code>strnlen_s</code> not being available in MinGW by default (it is, after all, a non-standard function). There are <a href=\"https://sourceforge.net/p/mingw-w64/mailman/mingw-w64-public/thread/AANLkTik5hq4_+R=bQf_gXSirc+U7gf2PJdTX+nmtRSUM@mail.gmail.com/\">some thoughts out there</a> that adding <code>--enable-secure-api</code> will include the headers with this function, but before I add that to <code>ittapi-sys</code>'s <code>build.rs</code>, I wanted to be able to reproduce the issue. </p>\n<p>Locally I was unable to reproduce: after installing MSYS2 and compiling the <code>ittapi</code> crates with <code>cargo build --target x86_64-pc-windows-gnu</code>, everything seemed to build as normal. When I run <code>cargo test --target x86_64-pc-windows-gnu</code>, I get a different error: <code>linker x86)64-w64-mingw32-gcc not found</code>.</p>\n<p>I then attempted to <a href=\"https://github.com/intel/ittapi/pull/56\">reproduce on ittapi's CI</a>: using a similar setup to the Wasmtime workflow, I added <code>x86_64-pc-windows-gnu</code> as a target in the matrix. With the <code>windows-latest</code> OS, however, the crates built and tests ran. With the <code>windows-2019</code> OS, then I observe a completely different failure related to <a href=\"https://github.com/intel/ittapi/runs/5873202242?check_suite_focus=true#step:6:719\"><code>libclang.dll</code> being inaccessible</a>.</p>\n<p>Any suggestions?</p>\n</blockquote>",
        "id": 278202955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649354326
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098283270\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>@bnjbvr: since we can't really replicate this, we could just disable the ittapi dependency for MinGW builds?</p>\n</blockquote>",
        "id": 278858073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649869342
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098289756\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>@abrown Need to check but I think that we do use this target to cross-compile internally. If so at least I might find people who could poke at this, maybe...</p>\n</blockquote>",
        "id": 278859120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649869784
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098295192\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>Seems we don't use it, so yeah we could disable ittapi on mingw then, and if someone wants to support that, they would need to contribute a patch. Does it sound acceptable?</p>\n</blockquote>",
        "id": 278860011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649870155
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098306429\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does it sound acceptable?</p>\n</blockquote>\n<p>It sounds acceptable to me, though others feel free to comment. I'm not sure how much energy to put into MinGW since I don't use it much (ever!) and I wonder sometimes if it has been obsoleted by WSL.</p>\n</blockquote>",
        "id": 278861685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649870913
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098329703\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>Personally I find managing platform-specific exceptions and such to APIs not easy to maintain over time. To that end I would prefer to see this solved. It looks to me like MinGW doesn't provide the <code>strnlen_s</code> function which is the source of this error. The only reason we're seeing this now is probably because something in the <code>ittapi</code> crate is calling a function we didn't call before in the C library and the C function requires <code>strnlen_s</code> or something like that.</p>\n<blockquote>\n<p>Locally I was unable to reproduce: after installing MSYS2 and compiling the ittapi crates with cargo build --target x86_64-pc-windows-gnu, everything seemed to build as normal</p>\n</blockquote>\n<p>That's because when you build an rlib it doesn't actually link anything, so this doesn't verify that symbols are actually present on the system.</p>\n<blockquote>\n<p>When I run cargo test --target x86_64-pc-windows-gnu, I get a different error: linker x86)64-w64-mingw32-gcc not found.</p>\n</blockquote>\n<p>If the <code>)</code> there isn't a typo then that's a misconfigured compiler somewhere. Otherwise this may mean you're not running the command in an MSYS2 shell or something like that. Basically if the linker isn't being invoked you won't be able to reproduce this issue.</p>\n<blockquote>\n<p>With the windows-latest OS, however, the crates built and tests ran</p>\n</blockquote>\n<p>I don't think that the CI is configured correctly which is why this seems to work. In the logs I see:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"err\">\\</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">up</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">date</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">deps</span><span class=\"err\">\\</span><span class=\"n\">bindgen_up_to_date</span><span class=\"o\">-</span><span class=\"n\">ae57c289f5ef2e2d</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but if you're cross compiling the path to the binary should be <code>target\\x86_64-pc-windows-gnu\\debug\\deps\\...</code>. You added this to the CI configuration:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">echo</span><span class=\"w\"> </span><span class=\"n\">CARGO_BUILD_TARGET</span><span class=\"o\">=</span><span class=\"cp\">$</span><span class=\"p\">{{</span><span class=\"w\"> </span><span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"cp\">$GITHUB_ENV</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">if</span>: <span class=\"nc\">matrix</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I don't think that works because the shell you're using is windows cmd or powershell (I dunno which) and probably doesn't use <code>$foo</code> for environment variables. This I believe means you're not actually configuring Cargo for cross-compilation.</p>\n</blockquote>",
        "id": 278865201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649872575
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1098355673\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>Very good call, @alexcrichton! Managed to reproduce the compilation error on <code>ittapi</code> now: <a href=\"https://github.com/intel/ittapi/pull/61\">https://github.com/intel/ittapi/pull/61</a></p>\n</blockquote>",
        "id": 278869400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649874422
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1154182537\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>This should be merge-able once GitHub's virtual environment for Windows is updated with the latest version of MinGW: <a href=\"https://github.com/actions/virtual-environments/pull/5729\">https://github.com/actions/virtual-environments/pull/5729</a>.</p>\n</blockquote>",
        "id": 285961879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655140790
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1164994378\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>I believe that the updated version of MinGW (which includes the missing <code>strnlen_s</code> definition) has been rolled out to the machines that run the <code>windows-latest</code> CI jobs. Over in <a href=\"https://github.com/intel/ittapi/pull/63\">https://github.com/intel/ittapi/pull/63</a> I was able to build <code>ittapi</code> without issues on <code>windows-latest</code>. I'm re-running CI here to check if we can actually merge this now.</p>\n</blockquote>",
        "id": 287269715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656025426
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1165626578\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>I believe the issue here is that we're pinned to windows-2019 (see <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3864\">https://github.com/bytecodealliance/wasmtime/pull/3864</a> for info on that) so we're not getting updates. I'd reiterate though that there's no requirement to get this working on all platforms. Disabling this on mingw is fine.</p>\n</blockquote>",
        "id": 287337228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656080597
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003#issuecomment-1187575100\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4003\">issue #4003</a>:</p>\n<blockquote>\n<p>Just added a commit that disables this on windows + mingw, and it seems to compile fine. Unfortunately there's an unrelated MacOS build error (Github says the CI run has been cancelled), and I can't request a retry, so could anyone with the right authorization bits please do that?</p>\n</blockquote>",
        "id": 289973466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658154741
    }
]