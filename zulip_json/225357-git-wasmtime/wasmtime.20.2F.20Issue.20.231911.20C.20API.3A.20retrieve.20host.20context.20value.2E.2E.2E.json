[
    {
        "content": "<p>thibaultcha opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Hello!</p>\n<p>Lately, I have been pondering about something stumbling me in the C API. From my understanding of it, I seem to either be facing some limitation in the C API or to be having some misconceptions about what the most efficient way of using it would be. I am also not sure if this discussion belongs here or ultimately to the <a href=\"https://github.com/WebAssembly/wasm-c-api\">https://github.com/WebAssembly/wasm-c-api</a> repository, but I thought that here would be a better starting point.</p>\n<p>The use-case at hand is: in my host functions callbacks (<code>wasmtime_func_callback_with_env_t</code>), I'd like to retrieve some context values from my (event-driven) host application.</p>\n<h2>Example</h2>\n<p>Below are some extracts from my embedding, which is using the Linker:</p>\n<ol>\n<li>With said Linker, we can define host functions for future imports:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_func_new_with_env</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">functype</span><span class=\"p\">,</span> <span class=\"n\">my_host_func</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">,</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>Later on, let's create an instance of this module that will be bound to a given event source:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<ol start=\"3\">\n<li>Assuming our instance eventually gets invoked and the executed wasm code calls our above import, we end up in our host callback:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span> <span class=\"o\">*</span><span class=\"nf\">my_host_func</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">wasmtime_caller_t</span> <span class=\"o\">*</span><span class=\"n\">caller</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Here, we can retrieve the instance and the `ptr` pointer</span>\n  <span class=\"c1\">// previously given to `wasmtime_func_new_with_env`.</span>\n\n  <span class=\"c1\">// But how can we retrieve more host context values that</span>\n  <span class=\"c1\">// were created *after* `wasmtime_func_new_with_env`?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The lack of ability to assign some context data to an Instance seems to make it tricky to efficiently embed inside of an event-driven application.</p>\n<h2>Thoughts</h2>\n<p>There were two solutions that I could think of:</p>\n<ol>\n<li>Stop using the Linker, create the instance via <code>wasmtime_instance_new()</code> and bind imports with <code>wasmtime_func_new_with_env()</code> right after. This allows for some host context pointers to be given to the callback <code>void *env</code> argument, which solves our above issue, but raises questions as to what the performance trade-offs of it could be. _Am I mistaken in thinking that using this approach could be more expansive than using the above one with the Linker?_</li>\n<li>If so, then sticking to the Linker sorts of makes <code>wasmtime_func_new_with_env</code> less useful (since it can pass references to data created at that time only). Yet, we could maybe store some data alongside an Instance for this purpose via some getter/setter API, something like: <code>wasmtime_instance_env_set(wasm_instance_t *instance, void *env)</code>. This pointer would then be given to host function callbacks, in one of their arguments.</li>\n</ol>\n<p>What I wonder is: am I onto an actual need for the C API, onto something that's already solved, or am I misunderstanding something bigger? Either way, I'd very much appreciate hearing some thoughts on it!</p>\n<p>Thanks in advance!</p>\n</blockquote>",
        "id": 201690249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592892009
    },
    {
        "content": "<p>thibaultcha edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Hello!</p>\n<p>Lately, I have been pondering about something stumbling me in the C API. From my understanding of it, I seem to either be facing some limitation in the C API or to be having some misconceptions about what the most efficient way of using it would be. I am also not sure if this discussion belongs here or ultimately to the <a href=\"https://github.com/WebAssembly/wasm-c-api\">https://github.com/WebAssembly/wasm-c-api</a> repository, but I thought that here would be a better starting point.</p>\n<p>The use-case at hand is: in my host functions callbacks (<code>wasmtime_func_callback_with_env_t</code>), I'd like to retrieve some context values from my (event-driven) host application.</p>\n<h2>Example</h2>\n<p>Below are some extracts from my embedding, which is using the Linker:</p>\n<ol>\n<li>With said Linker, we can define host functions for future imports:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_func_new_with_env</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">functype</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">my_host_func</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">,</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>Later on, let's create an instance of this module that will be bound to a given event source:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<ol start=\"3\">\n<li>Assuming our instance eventually gets invoked and the executed wasm code calls our above import, we end up in our host callback:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span> <span class=\"o\">*</span><span class=\"nf\">my_host_func</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">wasmtime_caller_t</span> <span class=\"o\">*</span><span class=\"n\">caller</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Here, we can retrieve the instance and the `ptr` pointer</span>\n  <span class=\"c1\">// previously given to `wasmtime_func_new_with_env`.</span>\n\n  <span class=\"c1\">// But how can we retrieve more host context values that</span>\n  <span class=\"c1\">// were created *after* `wasmtime_func_new_with_env`?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The lack of ability to assign some context data to an Instance seems to make it tricky to efficiently embed inside of an event-driven application.</p>\n<h2>Thoughts</h2>\n<p>There were two solutions that I could think of:</p>\n<ol>\n<li>Stop using the Linker, create the instance via <code>wasmtime_instance_new()</code> and bind imports with <code>wasmtime_func_new_with_env()</code> right after. This allows for some host context pointers to be given to the callback <code>void *env</code> argument, which solves our above issue, but raises questions as to what the performance trade-offs of it could be. _Am I mistaken in thinking that using this approach could be more expansive than using the above one with the Linker?_</li>\n<li>If so, then sticking to the Linker sorts of makes <code>wasmtime_func_new_with_env</code> less useful (since it can pass references to data created at that time only). Yet, we could maybe store some data alongside an Instance for this purpose via some getter/setter API, something like: <code>wasmtime_instance_env_set(wasm_instance_t *instance, void *env)</code>. This pointer would then be given to host function callbacks, in one of their arguments.</li>\n</ol>\n<p>What I wonder is: am I onto an actual need for the C API, onto something that's already solved, or am I misunderstanding something bigger? Either way, I'd very much appreciate hearing some thoughts on it!</p>\n<p>Thanks in advance!</p>\n</blockquote>",
        "id": 201690272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592892080
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648157925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>For the first solution you have, I'm not sure if that will be possible since the instance's imports must exist before the instance is created, so you can't bind imports after instantiation. Also FWIW using <code>Linker</code> vs raw instances shouldn't have an impact on performance.</p>\n<p>In general though it sounds like this is where the <code>env</code> argument would be used? You could, for example, allocate some space which is filled in after instantiation, and pass that as the <code>env</code>. That way when the function is called it has access to the data stuffed into <code>env</code> after initialization. You'd just need to be careful that if the function is called during initialization is reports an error of some form. (this is a fundamental wasm limitation, and is why the <code>start</code> function isn't the most useful)</p>\n</blockquote>",
        "id": 201727113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592919854
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648269127\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>@alexcrichton Hi there,</p>\n<blockquote>\n<p>For the first solution you have, I'm not sure if that will be possible since the instance's imports must exist before the instance is created, so you can't bind imports after instantiation.</p>\n</blockquote>\n<p>Yes, in this case, the Instance is created within the host context, and I can pass the necessary pointers to <code>wasmtime_func_new_with_env()</code>. </p>\n<blockquote>\n<p>Also FWIW using Linker vs raw instances shouldn't have an impact on performance.</p>\n</blockquote>\n<p>Even assuming that for each new Instance, we loop over its imports and call <code>wasmtime_func_new_with_env()</code> for each one of them?</p>\n<blockquote>\n<p>You could, for example, allocate some space which is filled in after instantiation, and pass that as the env. That way when the function is called it has access to the data stuffed into env after initialization.</p>\n</blockquote>\n<p>I did not include this solution in my above reasoning because it significantly complicates an embedding's design. Doing so would mean that <code>env</code> needs to be a global R/B Tree which is maintained by the host application in which it has to stuff context values for each created Instance. Besides the extra cost associated with that, the host application now has to deal with maintaining global states for each Instance, adding associated state when the Instance is created, and removing it when it is deleted. This seems like a breaking of encapsulation to me and a rather poor design for an embedding. Instead of having to do all of this extra work, a host application could simply associate some arbitrary data with a given Instance right after having created it. This is _significantly_ simpler and leaner (a single line of code for associating data vs. having to maintain associated global structures on the side).  </p>\n</blockquote>",
        "id": 201748058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592929194
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648329129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>FWIW there is a <code>wasm_instance_set_host_info</code> API to set arbitrary data on the <code>wasm_instance_t</code>, but you don't have access to this as part of <code>wasm_func_call</code>. Additionally I'm not sure what you mean about looping over imports and calling <code>wasmtime_func_new_with_env</code> for them? It seems like you do the same for raw instantiation vs linker-based instantiation?</p>\n</blockquote>",
        "id": 201761304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592935766
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648367747\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Thank you for continuing this discussion!</p>\n<p>With Linker-based instantiation, I call <code>wasmtime_func_new_with_env()</code> _once_ for each host function during the initialization of my host program. Then, during runtime, I call <code>wasmtime_linker_instantiate()</code> once for each execution context in which I will need an Instance.</p>\n<p>With raw instantiation, it seems like I would have to call <code>wasmtime_func_new_with_env()</code> for each host function <strong>for each Instance</strong> that I create.</p>\n<p>This is the source of my confusion as to whether Linker-based instantiation may be cheaper than raw instantiation. If the cost is similar, I can rely on the <code>env</code> argument of <code>wasmtime_func_new_with_env()</code> to keep track of host context values. If raw instantiation is significantly more expensive (computation and memory wise), then I would need another way to bound host context values to a given Instance.</p>\n</blockquote>",
        "id": 201770349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592940024
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648377664\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Digging into the Linker's code, I seem to notice that the associated cost would be somewhat identical. The difference seems to be whether the imports are resolved in the Linker's Rust code or in the host application's C code.</p>\n<p>Because using the Linker could greatly reduce efforts from embedder, do you think that there is a need for host context values to be given to <code>wasmtime_linker_instantiate()</code>? Such given values could then be passed to the functions created by the Linker, and retrievable in the <code>wasmtime_func_callback_with_env_t</code> callbacks in their <code>void *env</code> argument maybe?</p>\n</blockquote>",
        "id": 201772458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592941254
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648403511\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Er sorry I'm still not really sure what this issue is about. It's not clear to me what contextual information you're attaching where, and why the <code>env</code> pointer and/or the <code>set_host_info</code> business aren't the right solution. I'm a bit confused by the discussion of performance, too, so perhaps that could be set aside for a bit to figure out the env business?</p>\n</blockquote>",
        "id": 201779166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592944551
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648434076\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>I sure can elaborate and be more specific!</p>\n<p>I am embedding wasmtime inside of the Nginx web server. Upon processing of an HTTP request, Nginx creates a <code>ngx_http_request_t</code> structure. What I want to do is to create a new instance for each such <code>ngx_http_request_t</code> structure. The instance will then be called at various points during the processing of this HTTP request, until it is freed (at which point the instance will be freed as well).</p>\n<p>Now, when the instance associated to a request invokes an imported host function, I need to retrieve this <code>ngx_http_request_t</code> structure to know on which request the callback's logic should apply. Therefore, I need a way to bound an instance to a specific request context data in order to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span>\n<span class=\"nf\">my_host_func</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">wasmtime_caller_t</span> <span class=\"o\">*</span><span class=\"n\">caller</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">env</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>Now, because I am using the Linker in order to not have to implement my own imports resolver (which I previously did but would like to avoid if possible), I cannot associate this <code>ngx_http_request_t</code> pointer to a given instance created via <code>wasmtime_linker_instantiate()</code> (unless I am missing something else).</p>\n<p>This issue is trying to solve this problem: how to retrieve host context values from a callback when instances are created via the Linker.</p>\n</blockquote>",
        "id": 201784881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947180
    },
    {
        "content": "<p>thibaultcha edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648434076\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>I sure can elaborate and be more specific!</p>\n<p>I am embedding wasmtime inside of the Nginx web server. Upon processing of an HTTP request, Nginx creates a <code>ngx_http_request_t</code> structure. What I want to do is to create a new instance for each such <code>ngx_http_request_t</code> structure. The instance will then be called at various points during the processing of this HTTP request, until it is freed (at which point the instance will be freed as well).</p>\n<p>Now, when the instance associated to a request invokes an imported host function, I need to retrieve this <code>ngx_http_request_t</code> structure to know on which request the callback's logic should apply. Therefore, I need a way to bound an instance to a specific request context data in order to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span>\n<span class=\"nf\">my_host_func</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">wasmtime_caller_t</span> <span class=\"o\">*</span><span class=\"n\">caller</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">env</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>Now, because I am using the Linker in order to not have to implement my own imports resolver (which I previously did but would like to avoid if possible), I cannot associate this <code>ngx_http_request_t</code> pointer to a given instance created via <code>wasmtime_linker_instantiate()</code> (unless I am missing something else).</p>\n<p>This issue is trying to solve this problem: how to retrieve host context values from a callback when instances are created via the Linker.</p>\n</blockquote>",
        "id": 201785185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947323
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648437703\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>What you'll likely want to do in that case is:</p>\n<ul>\n<li>Have a global <code>wasm_engine_t</code> used by all requests</li>\n<li>Cache a global <code>wasm_module_t</code> with the engine (using a temporary store to satisfy API requirements)</li>\n<li>Create a <code>wasm_store_t</code> per-request using the global engine</li>\n<li>Instantiate the global module within this store</li>\n</ul>\n<p>The last step means you'll have to recreate functions for every request anyway, so you'll be able to pair the <code>env</code> parameter at that time.</p>\n<p>Does that make sense? It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion. </p>\n</blockquote>",
        "id": 201785823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592947681
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648446053\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion.</p>\n</blockquote>\n<p>Hmm right, that's what I was doing since I was hoping that all instance could be backed by the same <code>wasm_store_t</code> (maybe misunderstanding the underlying performance implications, or memory sharing between different requests, e.g. eventually allowing for sharing globals between them, etc...).</p>\n<p>So, what I seem to be understanding is that with your proposed implementation, instantiating the module within the request's store can be performed via raw instantiation (and binding the imports myself), or via instantiating a new Linker, itself tied to the request's store, and eventually creating the instance for me. Either way allows for pairing the <code>env</code> argument when creating the functions.</p>\n</blockquote>",
        "id": 201788162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592948926
    },
    {
        "content": "<p>thibaultcha edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648446053\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion.</p>\n</blockquote>\n<p>Hmm right, that's what I was doing since I was hoping that all instance could be backed by the same <code>wasm_store_t</code> (maybe misunderstanding the underlying performance implications, or memory sharing between different requests, e.g. eventually allowing for sharing globals between them, etc...).</p>\n<p>So, what I seem to be understanding is that with your proposed implementation, instantiating the module within the request's store can be performed via raw instantiation (and binding the imports myself), or via instantiating a new Linker (itself tied to the request's store) and eventually creating the instance for me. Either way allows for pairing the <code>env</code> argument when creating the functions at that time.</p>\n</blockquote>",
        "id": 201788392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592949055
    },
    {
        "content": "<p>thibaultcha edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648446053\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion.</p>\n</blockquote>\n<p>Hmm right, that's what I was doing since I was hoping that all instance could be backed by the same <code>wasm_store_t</code> (maybe misunderstanding the underlying performance implications, or memory sharing between different requests, e.g. eventually allowing for sharing globals between them, etc...).</p>\n<p>So, what I seem to be understanding is that with your proposed implementation, instantiating the module within the request's store can be performed via raw instantiation (and binding the imports myself), or via instantiating a new Linker (itself tied to the request's store) which would eventually create the instance for me. Either way allows for pairing the <code>env</code> argument when creating the functions at that time.</p>\n</blockquote>",
        "id": 201788413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592949072
    },
    {
        "content": "<p>thibaultcha edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648446053\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion.</p>\n</blockquote>\n<p>Hmm right, that's what I was doing since I was hoping that all instance could be backed by the same <code>wasm_store_t</code> (maybe misunderstanding the underlying performance implications? I was hoping to save the extra allocation costs).</p>\n<p>So, what I seem to be understanding is that with your proposed implementation, instantiating the module within the request's store can be performed via raw instantiation (and binding the imports myself), or via instantiating a new Linker (itself tied to the request's store) which would eventually create the instance for me. Either way allows for pairing the <code>env</code> argument when creating the functions at that time.</p>\n</blockquote>",
        "id": 201789044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592949449
    },
    {
        "content": "<p>thibaultcha edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648446053\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like you're caching the <code>wasm_linker_t</code> globally which may be causing my confusion.</p>\n</blockquote>\n<p>Hmm right, that's what I was doing since I was hoping that all instances could be backed by the same <code>wasm_store_t</code> (maybe misunderstanding the underlying performance implications? I was hoping to save the extra allocation costs).</p>\n<p>So, what I seem to be understanding is that with your proposed implementation, instantiating the module within the request's store can be performed via raw instantiation (and binding the imports myself), or via instantiating a new Linker (itself tied to the request's store) which would eventually create the instance for me. Either way allows for pairing the <code>env</code> argument when creating the functions at that time.</p>\n</blockquote>",
        "id": 201789268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592949573
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-648869422\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Yeah that's what I'm thinking, where if you instantiate per-request then you can create imports paired with <code>env</code> arguments.</p>\n<p>For <code>wasm_store_t</code> the issue isn't so much about reusing allocations but rather ever freeing them. No <code>wasm_instance_t</code> is fully deallocated until the entirety of its store and all other references to the store have gone away. This is done because we don't have a full GC. If you're a long-runner server (e.g. nginx) you probably want to keep memory usage under control, so you'll likely want to have a store-per-request so when the request is finished you'll be able to free all memory associated with the request.</p>\n</blockquote>",
        "id": 201857483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593010267
    },
    {
        "content": "<p>thibaultcha <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911#issuecomment-649287860\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Thank you for the <code>wasm_store_t</code> clarifications! Alright then, this discussion answers the questions that I had on retrieving host context values and a clarifies a few more points; I'll go ahead and close this issue now.</p>\n<p>Thank you for your time @alexcrichton, much appreciated.</p>\n</blockquote>",
        "id": 201937985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593068851
    },
    {
        "content": "<p>thibaultcha closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1911\">Issue #1911</a>:</p>\n<blockquote>\n<p>Hello!</p>\n<p>Lately, I have been pondering about something stumbling me in the C API. From my understanding of it, I seem to either be facing some limitation in the C API or to be having some misconceptions about what the most efficient way of using it would be. I am also not sure if this discussion belongs here or ultimately to the <a href=\"https://github.com/WebAssembly/wasm-c-api\">https://github.com/WebAssembly/wasm-c-api</a> repository, but I thought that here would be a better starting point.</p>\n<p>The use-case at hand is: in my host functions callbacks (<code>wasmtime_func_callback_with_env_t</code>), I'd like to retrieve some context values from my (event-driven) host application.</p>\n<h2>Example</h2>\n<p>Below are some extracts from my embedding, which is using the Linker:</p>\n<ol>\n<li>With said Linker, we can define host functions for future imports:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_func_new_with_env</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">functype</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">my_host_func</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">,</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">));</span>\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>Later on, let's create an instance of this module that will be bound to a given event source:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<ol start=\"3\">\n<li>Assuming our instance eventually gets invoked and the executed wasm code calls our above import, we end up in our host callback:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span> <span class=\"o\">*</span><span class=\"nf\">my_host_func</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">wasmtime_caller_t</span> <span class=\"o\">*</span><span class=\"n\">caller</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Here, we can retrieve the instance and the `ptr` pointer</span>\n  <span class=\"c1\">// previously given to `wasmtime_func_new_with_env`.</span>\n\n  <span class=\"c1\">// But how can we retrieve more host context values that</span>\n  <span class=\"c1\">// were created *after* `wasmtime_func_new_with_env`?</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The lack of ability to assign some context data to an Instance seems to make it tricky to efficiently embed inside of an event-driven application.</p>\n<h2>Thoughts</h2>\n<p>There were two solutions that I could think of:</p>\n<ol>\n<li>Stop using the Linker, create the instance via <code>wasmtime_instance_new()</code> and bind imports with <code>wasmtime_func_new_with_env()</code> right after. This allows for some host context pointers to be given to the callback <code>void *env</code> argument, which solves our above issue, but raises questions as to what the performance trade-offs of it could be. _Am I mistaken in thinking that using this approach could be more expansive than using the above one with the Linker?_</li>\n<li>If so, then sticking to the Linker sorts of makes <code>wasmtime_func_new_with_env</code> less useful (since it can pass references to data created at that time only). Yet, we could maybe store some data alongside an Instance for this purpose via some getter/setter API, something like: <code>wasmtime_instance_env_set(wasm_instance_t *instance, void *env)</code>. This pointer would then be given to host function callbacks, in one of their arguments.</li>\n</ol>\n<p>What I wonder is: am I onto an actual need for the C API, onto something that's already solved, or am I misunderstanding something bigger? Either way, I'd very much appreciate hearing some thoughts on it!</p>\n<p>Thanks in advance!</p>\n</blockquote>",
        "id": 201937986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593068851
    }
]