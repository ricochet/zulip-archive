[
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-601992256\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-601992256\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>There is now an official spec proposal repo, <a href=\"https://github.com/WebAssembly/memory64\" target=\"_blank\" title=\"https://github.com/WebAssembly/memory64\">memory64</a>.</p>\n</blockquote>",
        "id": 191327615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584764430
    },
    {
        "content": "<p>lygstate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-690855420\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>When this going to happen?</p>\n</blockquote>",
        "id": 209738293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599795771
    },
    {
        "content": "<p>aardappel <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-690856397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>I've implemented wasm64 support in LLVM, LLD, WABT, now working on Binaryen..</p>\n</blockquote>",
        "id": 209738426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599796010
    },
    {
        "content": "<p>lygstate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-690858787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>Wonderfull work, support in wasmtime would be relative harder?</p>\n</blockquote>",
        "id": 209738730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599796608
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-691013281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>Indeed, that's excellent progress, @aardappel!</p>\n<blockquote>\n<p>Wonderfull work, support in wasmtime would be relative harder?</p>\n</blockquote>\n<p>My understanding — which might be wrong — is that it's probably not a huge amount of work, but also non-trivial. @alexcrichton and @sunfishcode, ISTM we talked about this a while ago, do you happen to have an idea of the work involved to make this happen?</p>\n</blockquote>",
        "id": 209763711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599819778
    },
    {
        "content": "<p>lygstate <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-691040228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<blockquote>\n<p>Indeed, that's excellent progress, @aardappel!</p>\n<blockquote>\n<p>Wonderfull work, support in wasmtime would be relative harder?</p>\n</blockquote>\n<p>My understanding — which might be wrong — is that it's probably not a huge amount of work, but also non-trivial. @alexcrichton and @sunfishcode, ISTM we talked about this a while ago, do you happen to have an idea of the work involved to make this happen?</p>\n</blockquote>\n<p>does the wasm64 and wasm32 have different abi？</p>\n</blockquote>",
        "id": 209768869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599823888
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-691043063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>They would need to have different abi's. Pointer size is part of the abi and they use different pointer sizes.</p>\n</blockquote>",
        "id": 209769506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599824326
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572#issuecomment-691245314\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/572\">Issue #572</a>:</p>\n<blockquote>\n<p>I suspect this would be relatively simple to implement nowadays. The memory64 proposal is quite small, basically just changing memory-operating instructions to work with either 32 or 64-bit indices. The work in <code>wasmparser</code> is already done to implement the <code>memory64</code> proposal, so all that's needed to be done is to thread it all through cranelift. </p>\n<p>At this time this probably won't be as well optimized as memory32 since we can't naively do the exact same guard page trick we do there (reserving a 32-bit region of the address space). That being said cranelift has all the internal machinery to insert manual checks on each load/store, so we'd just need to hook that up. Overall this is likely a simple-ish refactoring of the code translator to conditionally use 64 or 32-bit indices everywhere, depending on what type each memory has.</p>\n<p>The <code>wasmtime</code> API itself may not even have to change at all for something like this. We might add a flag to <code>Memory</code> as to whether it's 64-bit or not, but otherwise everything is pretty much the same. Although ABIs are different that's only really an artifact of compilation toolchains, once you get to the runtime it's all basically just a wasm blob.</p>\n</blockquote>",
        "id": 209817049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599848576
    }
]