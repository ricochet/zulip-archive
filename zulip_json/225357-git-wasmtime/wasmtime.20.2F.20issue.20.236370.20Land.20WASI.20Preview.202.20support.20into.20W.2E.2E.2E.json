[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[ ] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[ ] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[ ] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this crate's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules</li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository.</li>\n</ol>\n</blockquote>",
        "id": 357427335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683765187
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[ ] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[ ] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this crate's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules</li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository.</li>\n</ol>\n</blockquote>",
        "id": 358592682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684195556
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[ ] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this crate's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules</li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository.</li>\n</ol>\n</blockquote>",
        "id": 359075413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684355069
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[ ] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules</li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 359470918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684435075
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules</li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 359527861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684461057
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[ ] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 359528181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684461289
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[ ] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[x] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 362266020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685470626
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[x] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[x] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[ ] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 378830250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1690382749
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[x] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[x] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[x] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[ ] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 393581112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695854882
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[x] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[x] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[x] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[x] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 393581128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695854883
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370#issuecomment-1738207280\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>I think this issue has lived its useful life and we can now call it closed - the preview 2 support is still not totally complete in wasmtime-wasi but it, and the specs themselves, are maturing rapidly.</p>\n</blockquote>",
        "id": 393581213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695854946
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">issue #6370</a>:</p>\n<blockquote>\n<p>We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! <a href=\"https://github.com/bytecodealliance/preview2-prototyping/\">https://github.com/bytecodealliance/preview2-prototyping/</a></p>\n<p>The work is not yet totally complete, but I believe that it is mature enough that we should start landing it into this repository, and keep iterating on it here. It was included in the <a href=\"https://bytecodealliance.org/articles/component-model-tooling-compatibility\">March 28 tooling compatibility matrix</a>, but it turns out we skipped compatibility with the wasmtime 8.0 release due to some bindgen changes we needed. I'd like to get everything landed and part of the regular Wasmtime release cycle for 10.0, which will cut at the beginning of June.</p>\n<p>Here is my rough plan for how we will land changes. These plans are open to changes so please leave your feedback!</p>\n<ol>\n<li>[x] Move the adapter (found at the root of the p2p repo) to <code>crates/wasi-preview1-component-adapter</code>. We will bring its child proc-macro crate <code>byte-array</code>, and the test harness <code>validate</code>, in as well underneath that directory. Add building, validating, and publishing the adapter binary (for both commands and reactors) to the wasmtime repository's CI. Runtime (integration) tests will be added in the subsequent steps.</li>\n<li>[x] Restructure the <code>test-programs</code> crate to support building both modules and components (using the adapter from step 1). Keep all the existing tests of wasi-common (which covers both the cap-std-sync and tokio backends) intact, but refactor like we did in p2p to make the structure of how tests are run driven by hand-written code, rather than packing a ton of magic into the macros. The components will be built, but not actually executed yet.</li>\n<li>[x] Land the contents of preview2-prototyping's <code>wasi-common</code> crate under <code>wasmtime-wasi</code> in the <code>pub mod preview2</code> space, and behind the (enabled by default) <code>preview2</code> cargo feature. Leave this repository's <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates untouched. They will continue to provide all preview 1 functionality for the moment. The preview 2 functionality will be passing all tests that it does in p2p through the <code>test-programs</code> (at the moment this means poll-oneoff and some trailing slashes behavior is broken), and this PR will port in the other tests from the p2p repo as well.</li>\n</ol>\n<p>At this point we can say the wasmtime project has preview 2 support! It is, however, behind a different WasiCtx api (with some changes to the builder, and the way to add it to a linker), and is totally separate from the preview 1 support.</p>\n<p>The next steps are:</p>\n<ol>\n<li>[x] Finish the development work I have planned to straighten out the poll-oneoff / streams / async vs sync embedding design in preview 2, which is currently not passing all its tests. At this point, we can just ignore some trailing slash behavior in the test suite, but the stuff everyone really cares about ought to be done.</li>\n<li>[x] Land @rvolosatovs 's work on a host-side preview 2 wit-bindgen to preview 1 wiggle adapter. Hook this up to the test suite, passing all the same tests as the legacy implementation, without using the <code>wasi-preview1-component-adapter</code> or any component-model features in wasmtime.</li>\n<li>[x] Land preview2-prototyping's <code>wasmtime-wasi-sockets</code> crate into this repository. This crate is separate from, but depends upon, what will land in <code>wasmtime-wasi::preview2</code>. It need to be integrated with the poll oneoff design fixes, and it needs a test suite, in order to land.</li>\n<li>[x] Port the <code>wasmtime-wasi-http</code> crate to use the poll-oneoff fixes above, making it compatible with components instead of just modules]</li>\n<li>[ ] Bring <code>wasmtime-wasi::preview2</code>'s docs up to Wasmtime project standards. </li>\n</ol>\n<p>Once the poll design changes and host-side adapter are landed, we can start working on transitioning the legacy implementation out of wasmtime:</p>\n<ol>\n<li>[ ] Move all of <code>wasmtime-wasi</code>'s existing preview 1 support behind <code>pub mod preview1_legacy</code> and the off-by-default <code>preview1_legacy</code> cargo feature. Move the <code>preview2</code> module out to the root. The new host-side adapter interface to provides preview 1 support to all users, except those who have regressions and need to use the legacy support for a limited time.</li>\n<li>[ ] The known regressions for preview 2 support include some trailing slash filesystem behaviors, and the support for preview 1's late-added <code>sock_*</code> functions. Presently, the sock functions have no tests in the tree, or anywhere else I can find, so I don't have a way to port those to preview 2 without taking a wild guess at what semantics they need. The only known user of these functions was Enarx, who are no longer in business. If any other users need these sock functions to keep working in either the host or wasm adapter for preview 1, we'll need them to contribute to that support- all of the Bytecode Alliance contributors I have spoke to so far don't have a business case for supporting preview 1's sockets, and instead are all in on preview 2 sockets.</li>\n<li>[ ] After 2 releases in off-by-default legacy mode, we will delete the legacy preview 1 code from the repository. This means retiring the <code>wasi-common</code>, <code>wasi-cap-std-sync</code>, and <code>wasi-tokio</code> crates. We could publish a final empty version indicating they wont get any more updates and have been replaced with wasmtime-wasi.</li>\n</ol>\n</blockquote>",
        "id": 393581214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695854946
    }
]