[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145#issuecomment-1496796070\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145\">issue #6145</a>:</p>\n<blockquote>\n<ul>\n<li>This is probably important for embedders with custom signal handlers: \"x64: Take SIGFPE signals for divide traps\" (#6026)</li>\n<li>@fitzgen maybe should write up something about \"Add a bounds-checking optimization for dynamic memories and guard pages\" (#6031)</li>\n<li>I don't know what this is but it sounds worth mentioning: Add a <code>--dynamic-memory-reserved-for-growth</code> CLI flag (#5980)</li>\n<li>New profiling \"perfmap\" mode and changed CLI flags for profiling (#6030)</li>\n</ul>\n<p>Many of this round of Cranelift changes should have an impact (hopefully positive!) on Wasmtime:</p>\n<ul>\n<li>We got a bunch of support for making use of more specialized instructions such as AVX on x86 where available (#5930, #5931, #5924, #5982, #5999, #5986, #6023, #6025, #6060, #6086, #6092)</li>\n<li>Fixed bugs and suboptimal codegen in aarch64 (#5977, #5987, #5997, #5976, #6078)</li>\n<li>Fixed bugs and suboptimal codegen in riscv64 (#5919, #5964, #5951, #5857, #5854, #6087)</li>\n<li>We generate more cache-friendly code for traps now (#6011)</li>\n<li>We have a bunch of new machine-independent optimizations (#5909, #6033, #6034, #6032, #6037, #6053, #6052, #6072, #6095, #6130)</li>\n</ul>\n</blockquote>",
        "id": 347002017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680657619
    },
    {
        "content": "<p>jameysharp edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145#issuecomment-1496796070\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145\">issue #6145</a>:</p>\n<blockquote>\n<ul>\n<li>This is probably important for embedders with custom signal handlers: #6026</li>\n<li>@fitzgen maybe should write up the measured performance improvements from #6031</li>\n<li>I don't know what this is but it sounds worth mentioning: #5980</li>\n<li>New profiling \"perfmap\" mode and changed CLI flags for profiling: #6030</li>\n</ul>\n<p>Many of this round of Cranelift changes should have an impact (hopefully positive!) on Wasmtime:</p>\n<ul>\n<li>We got a bunch of support for making use of more specialized instructions such as AVX on x86 where available (#5930, #5931, #5924, #5982, #5999, #5986, #6023, #6025, #6060, #6086, #6092)</li>\n<li>Fixed bugs and suboptimal codegen in aarch64 (#5977, #5987, #5997, #5976, #6078)</li>\n<li>Fixed bugs and suboptimal codegen in riscv64 (#5919, #5964, #5951, #5857, #5854, #6087)</li>\n<li>We generate more cache-friendly code for traps now (#6011)</li>\n<li>We have a bunch of new machine-independent optimizations (#5909, #6033, #6034, #6032, #6037, #6053, #6052, #6072, #6095, #6130)</li>\n</ul>\n</blockquote>",
        "id": 347002617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680658002
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145#issuecomment-1497653634\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6145\">issue #6145</a>:</p>\n<blockquote>\n<p>The <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6119\">initial integration between Wasmtime and Winch</a> was merged yesterday too. It's behind a cargo feature, so I'm not sure if this one is applicable for the release notes. Nevertheless I decided to bring it up just in case it is.</p>\n</blockquote>",
        "id": 347177534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680707368
    }
]