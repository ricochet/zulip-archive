[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a> from <code>fiber_cfi</code> to <code>main</code>:</p>\n<blockquote>\n<p>Now the fiber implementation on AArch64 authenticates function<br>\nreturn addresses and includes the relevant BTI instructions, except<br>\non macOS.</p>\n<p>Copyright (c) 2022, Arm Limited.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 284476473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654004349
    },
    {
        "content": "<p><strong>akirilov-arm</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a>.</p>",
        "id": 284476531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654004372
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a> from <code>fiber_cfi</code> to <code>main</code>:</p>\n<blockquote>\n<p>Now the fiber implementation on AArch64 authenticates function return addresses and includes the relevant BTI instructions, except on macOS.</p>\n<p>This PR has been spun off from #3606 and fixes #3183.</p>\n</blockquote>",
        "id": 284476762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654004459
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-990559730\">PR review</a>.</p>",
        "id": 284485141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007584
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-990559730\">PR review</a>.</p>",
        "id": 284485148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007586
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885712306\">PR review comment</a>:</p>\n<blockquote>\n<p>Is the \"FIXME\" here referring to that theoretically we should add like a <code>FastAppleAarch64</code> convention or something like that? If that's the case it's definitely ok to leave this just as a comment for now, and perosnally I'd be ok leaving this as an implementation detial until someone otherwise proves that it's better to add the fast aarch64 variant.</p>\n</blockquote>",
        "id": 284485154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885717926\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I work in assembly so little I end up needing a lot of comments to help guide me through what's happening here. I can sort of piece together what I think is happening here but would you be up for writing a longer-form comment at the top of this file (or somewhere appropriate) about the register authentication bits that are implemented here? (and then refer to that comment from this section)</p>\n</blockquote>",
        "id": 284485161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007590
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885714148\">PR review comment</a>:</p>\n<blockquote>\n<p>To confirm, this is because the macos assembler doesn't have support for the <code>paciasp</code> instruction natively? (do you know if there's a version that does support it?)</p>\n</blockquote>",
        "id": 284485164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007590
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885713211\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I'm pretty unfamiliar with all of this. Would you be up for adding a comment here to why this is necessary and perhaps an online doc if possible explaining the format of this section?</p>\n</blockquote>",
        "id": 284485166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654007591
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-990681184\">PR review</a>.</p>",
        "id": 284494215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654011278
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885794214\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, that's right. TBH currently the ABI implementation does not really distinguish between calling conventions, i.e. it generates essentially the same code in all cases (except for the unwinding information, as discussed here).</p>\n</blockquote>",
        "id": 284494217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654011279
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-990745729\">PR review</a>.</p>",
        "id": 284501204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654013873
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r885839127\">PR review comment</a>:</p>\n<blockquote>\n<p>macOS differs in several details in the way it handles authenticated pointers (e.g. it uses the B key, i.e. the <code>PACIBSP</code> instruction in this case), particularly with respect to unwinding, and currently I am unable to tackle the implementation properly, so I have chosen to skip it for the time being. Note that we are actually using a <code>HINT</code> instruction here (essentially a no-op), which is part of the base 64-bit architecture, so assemblers should not have any issue with it, even if they are really old; <code>PACIASP</code> is just an alias for a <code>HINT</code> with a particular immediate.</p>\n</blockquote>",
        "id": 284501205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654013873
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-991166485\">PR review</a>.</p>",
        "id": 284538991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654032188
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r886140963\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh wow sorry I completely misread \"ifndef CFG_TARGET_OS_macos\" as \"if macos\" which is entirely the opposite of what's happening here. </p>\n<p>Otherwise those makes sense! Although the same question still somewhat applies, do general assemblers not recognize <code>paciasp</code> as an instruction? (or is there like some common assembler that only recently got support for such syntax?)</p>\n</blockquote>",
        "id": 284538992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654032188
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-992241527\">PR review</a>.</p>",
        "id": 284633763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654099963
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r886990597\">PR review comment</a>:</p>\n<blockquote>\n<p>Arm actually maintains documentation on the support for various architectural features by the 2 major open source toolchains - <a href=\"https://developer.arm.com/Tools%20and%20Software/GNU%20Toolchain#Supported-Devices\">here</a> is the page for the GNU toolchain and <a href=\"https://developer.arm.com/Tools%20and%20Software/LLVM%20Toolchain#Supported-Devices\">here</a> is the information for the LLVM one. So, consider Ubuntu 18.04 (LTS release, still supported) - it ships with version 2.30 of Binutils, so it does support pointer authentication (i.e. the <code>autiasp</code>, <code>pacia1716</code>, and <code>paciasp</code> instructions), but it does not support BTI; I am not sure what the case is with Linux distributions with even longer support periods such as RHEL. I have decided to be conservative and use an approach that works as long as the assembler has AArch64 support at all, but I would not mind changing it.</p>\n</blockquote>",
        "id": 284633764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654099963
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-992259850\">PR review</a>.</p>",
        "id": 284635340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654100719
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r887004417\">PR review comment</a>:</p>\n<blockquote>\n<p>At least for <code>bti</code>, if a currently supported Ubuntu can't assemble the instruction, IMHO it seems like we should probably avoid it for the time being -- we otherwise don't really have stringent version requirements on the system toolchain AFAIK, just on Rust, and I've seen plenty of old Ubuntu (and other distro) installs in production in various places.</p>\n<p>Could we <code>#define _bti hint #XX</code> and maybe the PAC instructions too for uniformity?</p>\n<p>(I'll defer to Alex on this though if he feels differently, he's far more qualified on toolchain questions generally)</p>\n</blockquote>",
        "id": 284635342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654100720
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a> from <code>fiber_cfi</code> to <code>main</code>:</p>\n<blockquote>\n<p>Now the fiber implementation on AArch64 authenticates function return addresses and includes the relevant BTI instructions, except on macOS, following the guidelines presented in the <a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a> RFC proposal.</p>\n<p>This PR has been spun off from #3606 and fixes #3183.</p>\n</blockquote>",
        "id": 284647065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654106175
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-992468262\">PR review</a>.</p>",
        "id": 284647230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654106258
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#discussion_r887148726\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I'm mostly just curious I don't think any concrete changes are needed. The <code>// actual-instr</code> comments are clear enough to me what it's supposed to be. If there's some assembler that needs the <code>hint ...</code> instead of the actual instruction seems fine to leave these in.</p>\n</blockquote>",
        "id": 284647231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654106258
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a> from <code>fiber_cfi</code> to <code>main</code>.</p>",
        "id": 285530765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654780003
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195#pullrequestreview-1001416328\">PR review</a>.</p>",
        "id": 285541322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654784229
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4195\">PR #4195</a>.</p>",
        "id": 285541333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654784234
    }
]