[
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1201330488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>Thanks all for the first batch of reviews!</p>\n<p>@cfallin this makes sense to me. At this point there's not much that needs those relocations, if I'm not mistaken; mostly things that weren't trivially <code>Hash</code>ables, or source locations that were absolute, or external names being embedded and copied around. I'm looking into this.</p>\n</blockquote>",
        "id": 291588535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659366562
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1210938145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>I've updated the initial text of this PR, and while not ideal/perfect, I claim this is ready for review and could be merged as a first step. Remaining things to do as follow-ups, either myself in my copious free time, or other interested contributors <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> : </p>\n<ul>\n<li>fuzzing could be improved, to generate an instruction that could serve as replacement of another instruction. This would likely also require a position where to put this instruction, and some care ensuring that the instruction is compatible (same number of input/returns + same types for all inputs/returns)</li>\n<li>there's a proliferation of <code>Name</code> types that could potentially be unified, maybe?</li>\n<li><code>ExternalName</code> could just become a reference into the <code>FunctionParameters</code> mapping of reference to actual name value, as (it's likely, not proven that) codegen doesn't care about the identity of the function callee. So <code>ExternalName</code> would become a new entity type, and there'd be <code>ExternalNameData</code> in the table. Might not be true for libcalls which identity may matter during codegen, so may require that <code>ExternalName</code> becomes a sum type: either a reference into the <code>FunctionParameter</code>'s table, or the <code>Libcall</code> embedded itself.</li>\n<li>optimization work could be done to identify why a recompilation is, in the worst case, only 50% faster than compiling from scratch (it should be much higher in theory).</li>\n</ul>\n</blockquote>",
        "id": 292786289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660148042
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1210938145\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>I've updated the initial text of this PR, and while not ideal/perfect, I claim this is ready for review and could be merged as a first step. Remaining things to do as follow-ups, either myself in my copious free time, or other interested contributors <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> : </p>\n<ul>\n<li>fuzzing could be improved, to generate an instruction that could serve as replacement of another instruction. This would likely also require a position where to put this instruction, and some care ensuring that the instruction is compatible (same number of input/returns + same types for all inputs/returns)</li>\n<li>there's a proliferation of <code>Name</code> types that could potentially be unified, maybe?</li>\n<li><code>ExternalName</code> could just become a reference into the <code>FunctionParameters</code> mapping of reference to actual name value, as (it's likely, not proven that) codegen doesn't care about the identity of the function callee. So <code>ExternalName</code> would become a new entity type, and there'd be <code>ExternalNameData</code> in the table. Might not be true for libcalls which identity may matter during codegen, so may require that <code>ExternalName</code> becomes a sum type: either a reference into the <code>FunctionParameter</code>'s table, or the <code>Libcall</code> embedded itself.</li>\n<li>right now, if a <code>UserExternalNameRef</code> changes (that is, a function calls decides to change callee), then it changes the identity of the <code>FunctionStencil</code>, thus resulting in a cache miss; this could likely be refactored and improved, enabling more cache hits.</li>\n<li>optimization work could be done to identify why a recompilation is, in the worst case, only 50% faster than compiling from scratch (it should be much higher in theory).</li>\n</ul>\n</blockquote>",
        "id": 292793461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660150472
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1210938145\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>I've updated the initial text of this PR, and while not ideal/perfect, I claim this is ready for review and could be merged as a first step. Remaining things to do as follow-ups, either myself in my copious free time, or other interested contributors <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> : </p>\n<ul>\n<li>fuzzing could be improved, to generate an instruction that could serve as replacement of another instruction. This would likely also require a position where to put this instruction, and some care ensuring that the instruction is compatible (same number of input/returns + same types for all inputs/returns)</li>\n<li>there's a proliferation of <code>Name</code> types that could potentially be unified, maybe?</li>\n<li><code>ExternalName</code> could just become a reference into the <code>FunctionParameters</code> mapping of reference to actual name value, as (it's likely, not proven that) codegen doesn't care about the identity of the function callee. So <code>ExternalName</code> would become a new entity type, and there'd be <code>ExternalNameData</code> in the table. Might not be true for libcalls which identity may matter during codegen, so may require that <code>ExternalName</code> becomes a sum type: either a reference into the <code>FunctionParameter</code>'s table, or the <code>Libcall</code> embedded itself.</li>\n<li>right now, if a <code>UserExternalNameRef</code> changes (that is, a function call switches the callee identity), then it changes the identity of the <code>FunctionStencil</code>, thus resulting in a cache miss; this could likely be refactored and improved, enabling more cache hits.</li>\n<li>optimization work could be done to identify why a recompilation is, in the worst case, only 50% faster than compiling from scratch (it should be much higher in theory).</li>\n</ul>\n</blockquote>",
        "id": 292793490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660150484
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1212263312\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>@cfallin This new version incorporates changes to address your review feedback during the live review session (that we organized to help going through the changes, as this is a large patch). This is now ready and passes <code>cargo test --all</code> on my machine, with no performance regression on compile times, so I would claim this is ready :-) Cheers!</p>\n</blockquote>",
        "id": 292971428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660237952
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1212346877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>I just merged in <code>main</code> to this PR to see if it fixes CI.</p>\n</blockquote>",
        "id": 292983908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660242458
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551#issuecomment-1212389213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4551\">issue #4551</a>:</p>\n<blockquote>\n<p>Hmm, @bnjbvr it looks like some of the changes broke the fuzz targets -- happy to merge once that is fixed up.</p>\n</blockquote>",
        "id": 292992029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660245388
    }
]