[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4198\">PR #4198</a> from <code>no-component-value</code> to <code>main</code>:</p>\n<blockquote>\n<p>Prior to this PR a major feature of calling component exports (#4039)<br>\nwas the usage of the <code>Value&lt;T&gt;</code> type. This type represents a value<br>\nstored in wasm linear memory (the type <code>T</code> stored there). This<br>\nimplementation had a number of drawbacks though:</p>\n<ul>\n<li>\n<p>When returning a value it's ABI-specific whether you use <code>T</code> or<br>\n<code>Value&lt;T&gt;</code> as a return value. If <code>T</code> is represented with one wasm<br>\n  primitive then you have to return <code>T</code>, otherwise the return value must<br>\n  be <code>Value&lt;T&gt;</code>. This is somewhat non-obvious and leaks ABI-details into<br>\n  the API which is unfortunate.</p>\n</li>\n<li>\n<p>The <code>T</code> in <code>Value&lt;T&gt;</code> was somewhat non-obvious. For example a<br>\n  wasm-owned string was <code>Value&lt;String&gt;</code>. Using <code>Value&lt;&amp;str&gt;</code> didn't<br>\n  work.</p>\n</li>\n<li>\n<p>Working with <code>Value&lt;T&gt;</code> was unergonomic in the sense that you had to<br>\n  first \"pair\" it with a <code>&amp;Store&lt;U&gt;</code> to get a <code>Cursor&lt;T&gt;</code> and then you<br>\n  could start reading the value.</p>\n</li>\n<li>\n<p>Custom structs and enums, while not implemented yet, were planned to<br>\n  be quite wonky where when you had <code>Cursor&lt;MyStruct&gt;</code> then you would<br>\n  have to import a <code>CursorMyStructExt</code> trait generated by a proc-macro<br>\n  (think a <code>#[derive]</code> on the definition of <code>MyStruct</code>) which would<br>\n  enable field accessors, returning cursors of all the fields.</p>\n</li>\n<li>\n<p>In general there was no \"generic way\" to load a <code>T</code> from memory. Other<br>\n  operations like lift/lower/store all had methods in the<br>\n<code>ComponentValue</code> trait but load had no equivalent.</p>\n</li>\n</ul>\n<p>None of these drawbacks were deal-breakers per-se. When I started<br>\nto implement imported functions, though, the <code>Value&lt;T&gt;</code> type no longer<br>\nworked. The major difference between imports and exports is that when<br>\nreceiving values from wasm an export returns at most one wasm primitive<br>\nwhere an import can yield (through arguments) up to 16 wasm primitives.<br>\nThis means that if an export returned a string it would always be<br>\n<code>Value&lt;String&gt;</code> but if an import took a string as an argument there was<br>\nactually no way to represent this with <code>Value&lt;String&gt;</code> since the value<br>\nwasn't actually stored in memory but rather the pointer/length pair is<br>\nreceived as arguments. Overall this meant that <code>Value&lt;T&gt;</code> couldn't be<br>\nused for arguments-to-imports, which means that altogether something new<br>\nwould be required.</p>\n<p>This PR completely removes the <code>Value&lt;T&gt;</code> and <code>Cursor&lt;T&gt;</code> type in favor<br>\nof a different implementation. The inspiration from this comes from the<br>\nfact that all primitives can be both lifted and lowered into wasm while<br>\nit's just some times which can only go one direction. For example<br>\n<code>String</code> can be lowered into wasm but can't be lifted from wasm. Instead<br>\nsome sort of \"view\" into wasm needs to be created during lifting.</p>\n<p>One of the realizations from #4039 was that we could leverage<br>\nrun-time-type-checking to reject static constructions that don't make<br>\nsense. For example if an embedder asserts that a wasm function returns a<br>\nRust <code>String</code> we can reject that at typechecking time because it's<br>\nimpossible for a wasm module to ever do that.</p>\n<p>The new system of imports/exports in this PR now looks like:</p>\n<ul>\n<li>\n<p>Type-checking takes into accont an <code>Op</code> operation which indicates<br>\n  whether we'll be lifting or lowering the type. This means that we can<br>\n  allow the lowering operation for <code>String</code> but disallow the lifting<br>\n  operation. While we can't statically rule out an embedder saying that<br>\n  a component returns a <code>String</code> we can now reject it at runtime and<br>\n  disallow it from being called.</p>\n</li>\n<li>\n<p>The <code>ComponentValue</code> trait now sports a new <code>load</code> function. This<br>\n  function will load and instance of <code>Self</code> from the byte-array<br>\n  provided. This is implemented for all types but only ever actually<br>\n  executed when the <code>lift</code> operation is allowed during type-checking.</p>\n</li>\n<li>\n<p>The <code>Lift</code> associated type is removed since it's now expected that the<br>\n  lift operation returns <code>Self</code>.</p>\n</li>\n<li>\n<p>The <code>ComponentReturn</code> trait is now no longer necessary and is removed.<br>\n  Instead returns are bounded by <code>ComponentValue</code>. During type-checking<br>\n  it's required that the return value can be lifted, disallowing, for<br>\n  example, returning a <code>String</code> or <code>&amp;str</code>.</p>\n</li>\n<li>\n<p>With <code>Value</code> gone there's no need to specify the ABI details of the<br>\n  return value, or whether it's communicated through memory or not. This<br>\n  means that handling return values through memory is transparently<br>\n  handled by Wasmtime.</p>\n</li>\n<li>\n<p>Validation is in a sense more eagerly performed now. Whenever a value<br>\n<code>T</code> is loaded the entire immediate structure of <code>T</code> is loaded and<br>\n  validated. Note that recursive through memory validation still does<br>\n  not happen, so the contents of lists or strings aren't validated, it's<br>\n  just validated that the pointers are in-bounds.</p>\n</li>\n</ul>\n<p>Overall this felt like a much clearer system to work with and should be<br>\nmuch easier to integrate with imported functions as well. The new<br>\n<code>WasmStr</code> and <code>WasmList&lt;T&gt;</code> types can be used in import arguments and<br>\nlifted from the immediate arguments provided rather than forcing them to<br>\nalways be stored in memory.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 284494839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654011548
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4198\">PR #4198</a>.</p>",
        "id": 284646931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654106130
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4198\">PR #4198</a> from <code>no-component-value</code> to <code>main</code>.</p>",
        "id": 284648579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654106852
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4198#pullrequestreview-992629124\">PR review</a>.</p>",
        "id": 284663722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654114677
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4198\">PR #4198</a>.</p>",
        "id": 284666338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654115917
    }
]