[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705\">issue #5705</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Our mid-end optimization rules define a special constructor called <code>subsume</code> in <code>prelude_opt.isle</code>. Its effect is to cause the e-graph optimization pass to ignore other results from the same call to <code>simplify</code>. Let's consider making it a feature of the ISLE language instead, applicable to any multi-term.</p>\n<h4>Background</h4>\n<p>For a rule-driven multi-constructor term, ISLE currently generates a Rust function which accumulates results into a <code>Vec</code>. It returns the whole vector once all pattern matches have completed.</p>\n<p>The e-graph specific implementation of <code>subsume</code> records all values it's called on in the optimization context. After all pattern matches have finished, <code>optimize_pure_enode</code> checks each value from the accumulated vector to see if it is one where <code>subsume</code> was used. The first one it finds causes the rest of the vector to be skipped, and returns a singleton e-class. However any earlier values were already added to the e-graph; they're effectively hidden from elaboration but still taking memory.</p>\n<p>This is used for any rule where we know ahead of time that if the rule matches, it will produce a result which is at least as good as any other rule we might pick. It's primarily used for rules which rewrite an expression into a constant.</p>\n<h4>Benefit</h4>\n<p>If ISLE were aware of the semantics of <code>subsume</code>, it could apply two optimizations to the generated code:</p>\n<ul>\n<li>\n<p>The first rule which matches and is flagged as <code>subsume</code> could return early with a singleton vector. Then the caller doesn't have to process any results that it's going to ignore, and the <code>simplify</code> function doesn't have to evaluate later pattern matches whose results will be ignored anyway.</p>\n</li>\n<li>\n<p>Rules flagged <code>subsume</code> could be checked before other rules, if that allows us to check fewer patterns. This isn't trivial to get right but could be a nice compile-time win.</p>\n</li>\n</ul>\n<p>Making <code>subsume</code> a part of the language is also useful for static analysis purposes, like #5704, or checking if such rules fully shadow other rules.</p>\n<p>This would allow <code>subsume</code>-like behavior in multi-terms other than <code>simplify</code>. I don't have a use-case in mind for that but it might be useful for something. Currently I think any multi-term could call <code>subsume</code> and maybe do something useful with it, but it would be difficult to use correctly anywhere except at the top-level of the right-hand side of rules in <code>simplify</code>.</p>\n<h4>Implementation</h4>\n<p>I'm imagining an optional keyword after <code>(rule</code> but before the left-hand side.</p>\n<h4>Alternatives</h4>\n<p>We could define rule priorities in multi-terms to mean that all rules of the same priority have their results returned together, and only the highest priority which matches any rule is returned. That might be a useful generalization of \"subsumes\", or it might just make the rules harder to reason about.</p>\n</blockquote>",
        "id": 325734650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675463047
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705#issuecomment-1416545561\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705\">issue #5705</a>:</p>\n<blockquote>\n<p>This is really interesting to me because it diverges significantly from my mental model / layering -- worth digging into why, I think!</p>\n<p><code>subsume</code> was at least originally meant to be an egraph-specific intrinsic, and I think this can still be seen today in behavior that islec could not replicate purely by itself if <code>subsume</code> were just a way to alter multi-term behavior: the subsuming value <em>replaces</em> even the original input to the rewrite in the value-map as we build the egraph. In other words, if we <code>subsume</code> an expression with a constant due to cprop, it's not just that we return only that <code>iconst</code> <code>Value</code> and nothing else; it's that the toplevel loop that would ordinarily build an eclass out of the input (rewritten) value and its various rewrites, instead takes just the one rewrite.</p>\n<p>Seen another way, this would mean that the conceptual <code>Iterator&lt;Item = Value&gt;</code> return from the <code>simplify</code> multi-term would instead need to turn into something like <code>Iterator&lt;Item = MaybeSubsumingValue&gt;</code> where <code>enum MaybeSubsumingValue { Normal(Value), Subsuming(Value) }</code>. We could do something like that but...</p>\n<p>What I <em>do</em> like instead is that islec has special knowledge of a <em>property</em> of the <code>subsume</code> constructor, such that it tries to evaluate these rules first, as you suggest. I think it should be on <code>subsume</code>, and not on rules that use it (else we're liable to forget it); and should perhaps be something like <code>(decl shortcut subsume (Value) Value)</code> where <code>shortcut</code> means \"the RHS evaluating this ctor can return its value alone\". We still need the external ctor call to actually make the above behavior happen though.</p>\n<p>All of that said, while writing the last paragraph, the sum-type approach is actually starting to grow on me. Perhaps what we want is a <code>subsume</code>, marked with <code>shortcut</code>, that builds a <code>(MaybeSubsumingValue.Subsuming x)</code> from <code>x</code>; and an implicit converter otherwise that builds a <code>(MaybeSubsumingValue.Normal x)</code> from <code>x</code>. Thoughts?</p>\n</blockquote>",
        "id": 325746234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675469122
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705#issuecomment-1430290376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705\">issue #5705</a>:</p>\n<blockquote>\n<p>We discussed <code>subsume</code> yesterday and concluded that we should try treating it as an egraph-specific dynamic property of the result of <code>simplify</code>, rather than something we annotate on individual rules. There could still be an advantage to having some way to make <code>simplify</code> return early, but until we have a clearer idea of exactly which shortcuts we want I don't think we should put too much thought into that aspect. So I'm retracting this idea, at least for now.</p>\n</blockquote>",
        "id": 327860762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676404119
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705\">issue #5705</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Our mid-end optimization rules define a special constructor called <code>subsume</code> in <code>prelude_opt.isle</code>. Its effect is to cause the e-graph optimization pass to ignore other results from the same call to <code>simplify</code>. Let's consider making it a feature of the ISLE language instead, applicable to any multi-term.</p>\n<h4>Background</h4>\n<p>For a rule-driven multi-constructor term, ISLE currently generates a Rust function which accumulates results into a <code>Vec</code>. It returns the whole vector once all pattern matches have completed.</p>\n<p>The e-graph specific implementation of <code>subsume</code> records all values it's called on in the optimization context. After all pattern matches have finished, <code>optimize_pure_enode</code> checks each value from the accumulated vector to see if it is one where <code>subsume</code> was used. The first one it finds causes the rest of the vector to be skipped, and returns a singleton e-class. However any earlier values were already added to the e-graph; they're effectively hidden from elaboration but still taking memory.</p>\n<p>This is used for any rule where we know ahead of time that if the rule matches, it will produce a result which is at least as good as any other rule we might pick. It's primarily used for rules which rewrite an expression into a constant.</p>\n<h4>Benefit</h4>\n<p>If ISLE were aware of the semantics of <code>subsume</code>, it could apply two optimizations to the generated code:</p>\n<ul>\n<li>\n<p>The first rule which matches and is flagged as <code>subsume</code> could return early with a singleton vector. Then the caller doesn't have to process any results that it's going to ignore, and the <code>simplify</code> function doesn't have to evaluate later pattern matches whose results will be ignored anyway.</p>\n</li>\n<li>\n<p>Rules flagged <code>subsume</code> could be checked before other rules, if that allows us to check fewer patterns. This isn't trivial to get right but could be a nice compile-time win.</p>\n</li>\n</ul>\n<p>Making <code>subsume</code> a part of the language is also useful for static analysis purposes, like #5704, or checking if such rules fully shadow other rules.</p>\n<p>This would allow <code>subsume</code>-like behavior in multi-terms other than <code>simplify</code>. I don't have a use-case in mind for that but it might be useful for something. Currently I think any multi-term could call <code>subsume</code> and maybe do something useful with it, but it would be difficult to use correctly anywhere except at the top-level of the right-hand side of rules in <code>simplify</code>.</p>\n<h4>Implementation</h4>\n<p>I'm imagining an optional keyword after <code>(rule</code> but before the left-hand side.</p>\n<h4>Alternatives</h4>\n<p>We could define rule priorities in multi-terms to mean that all rules of the same priority have their results returned together, and only the highest priority which matches any rule is returned. That might be a useful generalization of \"subsumes\", or it might just make the rules harder to reason about.</p>\n</blockquote>",
        "id": 327860764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676404119
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705#issuecomment-1485753451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5705\">issue #5705</a>:</p>\n<blockquote>\n<p>We're tracking the new plan for <code>subsume</code> in #6105.</p>\n</blockquote>",
        "id": 344953063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945700
    }
]