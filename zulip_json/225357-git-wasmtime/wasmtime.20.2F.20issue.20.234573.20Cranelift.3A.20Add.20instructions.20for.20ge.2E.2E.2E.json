[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1201857772\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"cranelift:meta\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 291649272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659398699
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1201909637\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<p>@uweigand would you mind taking a look at the s390x-specific bits in here? I'm not 100% sure I got it right. I think you should be able to just look at the test expectations to quickly check here. Thanks!</p>\n</blockquote>",
        "id": 291653935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659403414
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202084202\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<p>How are these instructions expected to behave in the face of inlining?</p>\n</blockquote>",
        "id": 291671173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659422764
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202426229\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand would you mind taking a look at the s390x-specific bits in here? I'm not 100% sure I got it right. I think you should be able to just look at the test expectations to quickly check here. Thanks!</p>\n</blockquote>\n<p>Hi @fitzgen, the <code>get_return_address</code> implementation isn't correct in the general case.  It looks like you're assuming r14 holds the return address throughout execution of the function?  That isn't true, it is only guaranteed to hold the return address at the ABI boundaries, everywhere else it's just a normal allocatable general-purpose register.</p>\n<p>For this is to be always correct, we instead have to read the return address from the stack slot where it was saved in the prologue.  However, that doesn't happen in leaf functions - unless it is forced via the <code>preserve_frame_pointers</code> flag.  Can we make that assumption for <code>get_return_address</code>?   It seems it is already made for <code>get_frame_pointer</code>.</p>\n<p>If so, we can read the return address from the slot at \"initial stack pointer + 14*8\".   This could be done either via <code>MemArg::InitialSPOffset</code> (which currently isn't exposed to ISLE yet, but it should be straightforward to add a <code>memarg_initial_stack_off</code> or similar).   In the alternative, the initial stack pointer actually equals the frame pointer (backchain) value, so it could also be implemented via something like <code>(memarg_reg_plus_off (get_frame_pointer) 112 0 (memarg_trusted))</code>.</p>\n<p>Also, I'm a bit confused about why that new <code>mov_preg</code> thing is necessary.  I'd have expected to use something like <code>(copy_reg (writable_reg 15))</code> instead, or maybe even better some new <code>(copy_reg (stack_reg))</code> - this is already used in other places to retrieve the value of a physical register.</p>\n<p>(Or, in the alternative, even something like <code>(load_addr (memarg_stack_off 0))</code> would work to get the stack pointer.)<br>\n</p>\n</blockquote>",
        "id": 291701810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659443480
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202975433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>How are these instructions expected to behave in the face of inlining?</p>\n</blockquote>\n<p>We don't have inlining so it is a bit of a hypothetical question at the moment, but these instructions are about physical frames, so I imagine we would want to ignore logical frames that don't have a corresponding physical frame (i.e. they have been inlined) and just return information about the current physical frame regardless.</p>\n</blockquote>",
        "id": 291735870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659458696
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202977441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, I'm a bit confused about why that new <code>mov_preg</code> thing is necessary.</p>\n</blockquote>\n<p>It is about getting an unallocatable physical register's value into a virtual register, and avoiding the pinned vregs that we want to remove support for from <code>regalloc2</code>, and which just existed in order to get the initial migration working.</p>\n</blockquote>",
        "id": 291736113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659458817
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202979574\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Also, I'm a bit confused about why that new mov_preg thing is necessary. I'd have expected to use something like (copy_reg (writable_reg 15)) instead, or maybe even better some new (copy_reg (stack_reg)) - this is already used in other places to retrieve the value of a physical register.</p>\n</blockquote>\n<p>This came out of some discussion that @fitzgen and I had: I would like to push the backends gradually away from using the \"pinned vregs\", or vregs that represent physical registers directly, and instead use operand constraints wherever possible. This is because handling moves-from-pinned and moves-to-pinned-vregs introduces a bunch of special cases in regalloc, and leads to worse performance (it uses a whole instruction, the move, to communicate what should be just a constraint) and sometimes bugs (e.g. <a href=\"https://github.com/bytecodealliance/regalloc2/issues/60\">bytecodealliance/regalloc2#60</a>). Just yesterday I was helping to find the cause for a weird <code>mov rA, rB; mov rB, rA</code> sequence and it turned out to be because of moves-to-pregs before a call (in x64 in this case) where operand constraints would have led to properly elided moves.</p>\n<p>So it's a bit forward-looking, but there is a reason! At some point later I (or someone) will go through and systematically update the remaining uses.</p>\n</blockquote>",
        "id": 291736329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659458940
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202999330\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<p>Okay I pushed a couple new commits:</p>\n<ul>\n<li>switched x64 away from the new variant of <code>Amode</code> and just check the base register when getting operands for <code>Amode::ImmReg</code>, which I think is a bit nicer.</li>\n<li>Fixed s390x per @uweigand's feedback (thanks! would appreciate if you could give this another quick once over)</li>\n</ul>\n</blockquote>",
        "id": 291739025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659460151
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1203031853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Okay I pushed a couple new commits:<br>\n    * Fixed s390x per @uweigand's feedback (thanks! would appreciate if you could give this another quick once over)</p>\n</blockquote>\n<p>LGTM.  I've added a couple of inline comments, but those are really just cosmetic.</p>\n</blockquote>",
        "id": 291743209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659462255
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1203035042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Okay I pushed a couple new commits:\n* Fixed s390x per @uweigand's feedback (thanks! would appreciate if you could give this another quick once over)</p>\n</blockquote>\n<p>LGTM. I've added a couple of inline comments, but those are really just cosmetic.</p>\n</blockquote>\n<p>Oh, maybe one more thing comes to mind:  it would be great if the affected ISLE patterns actually <em>verified</em> that <code>preserve_frame_pointer</code> is true if they depend on that fact.   Maybe some predicate in <code>prelude.isle</code> that could be used like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">get_frame_pointer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">preserve_frame_pointer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">load64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memarg_stack_off</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then we'd get a compile-time error instead of random run-time crashes if the assumption was violated.<br>\n</p>\n</blockquote>",
        "id": 291743561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659462467
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1203035513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would like to push the backends gradually away from using the \"pinned vregs\", or vregs that represent physical registers directly, and instead use operand constraints wherever possible.</p>\n</blockquote>\n<p>I see, thanks for the explanation!</p>\n</blockquote>",
        "id": 291743662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659462500
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1203167627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh, maybe one more thing comes to mind: it would be great if the affected ISLE patterns actually _verified_ that <code>preserve_frame_pointer</code> is true if they depend on that fact.</p>\n</blockquote>\n<p>The CLIF verifier does check this condition, so by the time we lower the CLIF, we know we have valid CLIF, and this check should be unnecessary. I wouldn't mind the redundancy if it were a simple one-line debug assertion, but since it would involve new external ISLE extractors, I don't think it is quite worth it.</p>\n</blockquote>",
        "id": 291762218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659471081
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1203279420\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Oh, maybe one more thing comes to mind: it would be great if the affected ISLE patterns actually _verified_ that <code>preserve_frame_pointer</code> is true if they depend on that fact.</p>\n</blockquote>\n<p>The CLIF verifier does check this condition</p>\n</blockquote>\n<p>Ah, good!   I hadn't see that.<br>\n</p>\n</blockquote>",
        "id": 291777836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659479729
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1204319508\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<p>I didn't see an answer to my question in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202084202\">https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202084202</a>.</p>\n</blockquote>",
        "id": 291899923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659550810
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1204339889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<blockquote>\n<p>I didn't see an answer to my question in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202084202\">#4573 (comment)</a>.</p>\n</blockquote>\n<p>@fitzgen replied to your comment in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1202975433\">this comment</a>.</p>\n</blockquote>",
        "id": 291902601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659552038
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573#issuecomment-1205214892\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4573\">issue #4573</a>:</p>\n<blockquote>\n<p>Missed that comment. Thanks @cfallin.</p>\n</blockquote>",
        "id": 292002591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659617508
    }
]