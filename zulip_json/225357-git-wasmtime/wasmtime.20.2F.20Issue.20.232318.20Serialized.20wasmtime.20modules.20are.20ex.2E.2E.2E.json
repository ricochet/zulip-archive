[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'm using custom module serialization based caching in <a href=\"https://yowasp.org\">YoWASP</a>, primarily to be able to show a message during cold startup (which can take many minutes on slow machines), but also to avoid applying zstd compression that noticeably increases startup latency. </p>\n<p>The problem is that the cached modules are extremely large—so large that it causes a near-pathological amount of disk I/O. On Linux, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5436001/yosys.wasm.zip\">yosys.wasm</a><br>\n (21M wasm file) results in a 290M serialized module, an increase of ~14×. On Windows, for some reason, that very same file results in a ~580M serialized module, an increase of ~28×. The native Yosys binary for x86_64 is 17M; even once you account for libc and libstdc++, it really should not take over half a gigabyte of space.</p>\n<p>I'm filing this issue on request of @alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/43#issuecomment-716211943\">here</a>.</p>\n</blockquote>",
        "id": 214513502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603661285
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'm using custom module serialization based caching in <a href=\"https://yowasp.org\">YoWASP</a>, primarily to be able to show a message during cold startup (which can take many minutes on slow machines), but also to avoid applying zstd compression that noticeably increases startup latency. </p>\n<p>The problem is that the cached modules are extremely large—so large that it causes a near-pathological amount of disk I/O. On Linux, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5436001/yosys.wasm.zip\">yosys.wasm</a> (21M wasm file) results in a 290M serialized module, an increase of ~14×. On Windows, for some reason, that very same file results in a ~580M serialized module, an increase of ~28×. The native Yosys binary for x86_64 is 17M; even once you account for libc and libstdc++, it really should not take over half a gigabyte of space.</p>\n<p>I'm filing this issue on request of @alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/43#issuecomment-716211943\">here</a>.</p>\n</blockquote>",
        "id": 214513508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603661295
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-716214807\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Oh and the script that runs it is <a href=\"https://github.com/YoWASP/yosys/blob/develop/pypi/yowasp_yosys/__init__.py\">here</a>. It's extremely simple but maybe I forgot something important.</p>\n</blockquote>",
        "id": 214513526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603661329
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'm using custom module serialization based caching in <a href=\"https://yowasp.org\">YoWASP</a>, primarily to be able to show a message during cold startup (which can take many minutes on slow machines), but also to avoid applying zstd compression that noticeably increases warm startup latency. </p>\n<p>The problem is that the cached modules are extremely large—so large that it causes a near-pathological amount of disk I/O. (On Windows VMs, due to the I/O, warm startup actually becomes slower. On bare metal Windows on SSDs it still gets faster.)</p>\n<p>On Linux, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5436001/yosys.wasm.zip\">yosys.wasm</a> (21M wasm file) results in a 290M serialized module, an increase of ~14×. On Windows, for some reason, that very same file results in a ~580M serialized module, an increase of ~28×. The native Yosys binary for x86_64 is 17M; even once you account for libc and libstdc++, it really should not take over half a gigabyte of space.</p>\n<p>I'm filing this issue on request of @alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/43#issuecomment-716211943\">here</a>.</p>\n</blockquote>",
        "id": 214513555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603661381
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'm using custom module serialization based caching in <a href=\"https://yowasp.org\">YoWASP</a>, primarily to be able to show a message during cold startup (which can take many minutes on slow machines), but also to avoid applying zstd compression that noticeably increases warm startup latency. </p>\n<p>The problem is that the cached modules are extremely large—so large that it causes a near-pathological amount of disk I/O. (On Windows VMs, due to the I/O, warm startup actually becomes slower compared to wasmtime's own caching. On bare metal Windows on SSDs it still gets faster.)</p>\n<p>On Linux, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5436001/yosys.wasm.zip\">yosys.wasm</a> (21M wasm file) results in a 290M serialized module, an increase of ~14×. On Windows, for some reason, that very same file results in a ~580M serialized module, an increase of ~28×. The native Yosys binary for x86_64 is 17M; even once you account for libc and libstdc++, it really should not take over half a gigabyte of space.</p>\n<p>I'm filing this issue on request of @alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/43#issuecomment-716211943\">here</a>.</p>\n</blockquote>",
        "id": 214513623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603661435
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-716235921\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>The cache entry size is effectively the bincode-coded size of <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fc1cedb2ff43e4b31bcc8f99ef069d5a2d189899/crates/jit/src/instantiate.rs#L53-L73\">this structure</a>, which I believe is roughly analagous to the in-memory size of that structure. Adding some simple instrumentation I was able to get the encoded byte size of each of the fields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">module</span>:                  <span class=\"mi\">152817</span><span class=\"w\"></span>\n<span class=\"n\">obj</span>:                   <span class=\"mi\">56236896</span><span class=\"w\"></span>\n<span class=\"n\">funcs</span>:                <span class=\"mi\">242146780</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">traps</span><span class=\"p\">)</span>:                <span class=\"mi\">24182940</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">address_map</span><span class=\"p\">)</span>:         <span class=\"mi\">217774640</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">stack_maps</span><span class=\"p\">)</span>:             <span class=\"mi\">189216</span><span class=\"w\"></span>\n<span class=\"n\">data_initializers</span>:      <span class=\"mi\">2880584</span><span class=\"w\"></span>\n<span class=\"n\">unwind_info</span>:            <span class=\"mi\">4611040</span><span class=\"w\"></span>\n<span class=\"n\">total</span>:                <span class=\"mi\">306028126</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>clearly <code>funcs</code> is the massive field (too much so), and the worst offenders are the <code>traps</code> and <code>address_maps</code> maps. Neither of these maps really justifies taking up so much space, and longer-term we need to have a more serious refactoring to probably encode these entirely different in a much more compact fashion. The consumer, however, relies on random-access right now (or at least the ability to do a binary search), so it won't be immediately trivial to restructure these data structures. In the meantime <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2321\">https://github.com/bytecodealliance/wasmtime/pull/2321</a> should be a band-aid for now to make it a bit more reasonable (although still pretty unreasonable).</p>\n<p>I've yet to investigate the Windows discrepancy here, that's quite worrisome too!</p>\n</blockquote>",
        "id": 214520509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603670751
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-716236004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Oh and after that PR, the breakdown looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">module</span>:                  <span class=\"mi\">152817</span><span class=\"w\"></span>\n<span class=\"n\">obj</span>:                   <span class=\"mi\">56236896</span><span class=\"w\"></span>\n<span class=\"n\">funcs</span>:                 <span class=\"mi\">97596780</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">traps</span><span class=\"p\">)</span>:                <span class=\"mi\">24182940</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">address_map</span><span class=\"p\">)</span>:          <span class=\"mi\">73224640</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">funcs</span><span class=\"p\">(</span><span class=\"n\">stack_maps</span><span class=\"p\">)</span>:             <span class=\"mi\">189216</span><span class=\"w\"></span>\n<span class=\"n\">data_initializers</span>:      <span class=\"mi\">2880584</span><span class=\"w\"></span>\n<span class=\"n\">unwind_info</span>:            <span class=\"mi\">4611040</span><span class=\"w\"></span>\n<span class=\"n\">total</span>:                <span class=\"mi\">161478126</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214520557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603670779
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-716960042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Ok I've got one more linked improvement as well as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2326\">https://github.com/bytecodealliance/wasmtime/pull/2326</a> which should account for the discrepancy on Windows.</p>\n</blockquote>",
        "id": 214658747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603770230
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-718983138\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>With current master plus <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2324\">https://github.com/bytecodealliance/wasmtime/pull/2324</a> the cache entry size of the original wasm module is down to 97MB, and the cache entry sizes should be roughly the same on Linux and Windows. @whitequark  for your use cases is that still too large? It's still pretty large  having a &gt;4x size increase, but further changes may require more invasive tweaks than the low hanging fruit picked off so far.</p>\n</blockquote>",
        "id": 215018852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604001061
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-719349711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<blockquote>\n<p>for your use cases is that still too large?</p>\n</blockquote>\n<p>Seems excellent to me. Any chance you can do a point release of wasmtime-py with the updated interpreter? I have to test on a fairly heterogenous set of machines so it'd be much easier if I didn't have to distribute patched wheels as well.</p>\n</blockquote>",
        "id": 215063033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604043036
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-719745008\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Sure! I'll wait until #2324 is in and then I'll do a release of wasmtime</p>\n</blockquote>",
        "id": 215138447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604085122
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-719823892\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I don't know how easy <code>bincode</code> is to extend, but all the address-keyed func data could probably compress really well if we used deltas instead of absolute values combined with a variable length integer encoding (e.g. LEB128).</p>\n</blockquote>",
        "id": 215157168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604096111
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-719824029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>(and we ensured they were sorted)</p>\n</blockquote>",
        "id": 215157189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604096137
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-721820292\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>@fitzgen turns out bincode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2322\">has an option for just that</a>!</p>\n</blockquote>",
        "id": 215601947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604505828
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722469405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Ok wasmtime-py 0.21.0 is now published @whitequark if you'd be able to test it out</p>\n</blockquote>",
        "id": 215732088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604592024
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722470143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'll take a look over the next few days!</p>\n</blockquote>",
        "id": 215732299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604592097
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722471632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Were there any breaking changes? It's a bit unfortunate that I'll have to rebuild all the packages as that makes it a bit harder to get other people to compare several different versions.</p>\n</blockquote>",
        "id": 215732723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604592247
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722481093\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I've rebuilt yowasp-yosys and yowasp-nextpnr-ice40 with wasmtime 0.21.0 on my Linux machine.</p>\n<p>* Yosys: 291M→94M cache file size improvement, ~2x warm startup latency improvement (wow!!);<br>\n  * nextpnr-ice40: 23M→6.9M cache file size improvement, warm startup latency changes within noise threshold.</p>\n</blockquote>",
        "id": 215735526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604593162
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722487183\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Right now our release process for wasmtime is just \"major bump everything\", and we're then trying to keep the external packages like wasmtime-py and wasmtime-go in sync with the main repo. We should probably allocate space to have minor version bumps of everything as well though...</p>\n<p>Glad to hear the results as well!</p>\n</blockquote>",
        "id": 215737106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604593751
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722488506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Ah ok if it's in sync with the main repo then it might actually be pretty handy. I wasn't sure exactly how it worked.</p>\n</blockquote>",
        "id": 215737518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604593878
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722691601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>@alexcrichton I've tried running yowasp-yosys and yowasp-nextpnr-ice40 on the cheapest and slowest laptop I found nearby, and it's only something like 2× slower on both cold and warm startup than my XPS 13. I have no idea how you managed to achieve that, and I'm quite impressed. As far as I'm concerned this is enough performance.</p>\n</blockquote>",
        "id": 215784678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604616818
    },
    {
        "content": "<p>whitequark closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>I'm using custom module serialization based caching in <a href=\"https://yowasp.org\">YoWASP</a>, primarily to be able to show a message during cold startup (which can take many minutes on slow machines), but also to avoid applying zstd compression that noticeably increases warm startup latency. </p>\n<p>The problem is that the cached modules are extremely large—so large that it causes a near-pathological amount of disk I/O. (On Windows VMs, due to the I/O, warm startup actually becomes slower compared to wasmtime's own caching. On bare metal Windows on SSDs it still gets faster.)</p>\n<p>On Linux, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5436001/yosys.wasm.zip\">yosys.wasm</a> (21M wasm file) results in a 290M serialized module, an increase of ~14×. On Windows, for some reason, that very same file results in a ~580M serialized module, an increase of ~28×. The native Yosys binary for x86_64 is 17M; even once you account for libc and libstdc++, it really should not take over half a gigabyte of space.</p>\n<p>I'm filing this issue on request of @alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/43#issuecomment-716211943\">here</a>.</p>\n</blockquote>",
        "id": 215784679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604616818
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318#issuecomment-722697820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2318\">Issue #2318</a>:</p>\n<blockquote>\n<p>Nice! Thanks again for the report and helping to investigate!</p>\n</blockquote>",
        "id": 215786096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604617844
    }
]