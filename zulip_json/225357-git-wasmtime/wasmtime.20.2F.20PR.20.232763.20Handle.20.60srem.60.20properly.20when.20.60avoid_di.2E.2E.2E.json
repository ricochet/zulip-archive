[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763\">PR #2763</a> from <code>fix-srem-trap</code> to <code>main</code>:</p>\n<blockquote>\n<p>The codegen for div/rem ops has two modes, depending on the<br>\n<code>avoid_div_traps</code> flag: it can either do all checks for trapping<br>\nconditions explicitly, and use explicit trap instructions, then use a<br>\nhardware divide instruction that will not trap (<code>avoid_div_traps ==\ntrue</code>); or it can run in a mode where a hardware FP fault on the divide<br>\ninstruction implies a Wasm trap (<code>avoid_div_traps == false</code>). Wasmtime<br>\nuses the former while Lucet (for example) uses the latter.</p>\n<p>It turns out that because we run all our spec tests run under Wasmtime,<br>\nwe missed a spec corner case that fails in the latter: INT_MIN % -1 == 0<br>\nper the spec, but causes a trap with the x86 signed divide/remainder<br>\ninstruction. Hence, in Lucet, this specific remainder computation would<br>\nincorrectly result in a Wasm trap.</p>\n<p>This PR fixes the issue by just forcing use of the explicit-checks<br>\nimplementation for <code>srem</code> even when <code>avoid_div_traps</code> is false.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 231749628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616650054
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763\">PR #2763</a>.</p>",
        "id": 231749629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616650054
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763\">PR #2763</a> from <code>fix-srem-trap</code> to <code>main</code>:</p>\n<blockquote>\n<p>The codegen for div/rem ops has two modes, depending on the<br>\n<code>avoid_div_traps</code> flag: it can either do all checks for trapping<br>\nconditions explicitly, and use explicit trap instructions, then use a<br>\nhardware divide instruction that will not trap (<code>avoid_div_traps == true</code>);<br>\nor it can run in a mode where a hardware FP fault on the divide<br>\ninstruction implies a Wasm trap (<code>avoid_div_traps == false</code>). Wasmtime<br>\nuses the former while Lucet (for example) uses the latter.</p>\n<p>It turns out that because we run all our spec tests run under Wasmtime,<br>\nwe missed a spec corner case that fails in the latter: INT_MIN % -1 == 0<br>\nper the spec, but causes a trap with the x86 signed divide/remainder<br>\ninstruction. Hence, in Lucet, this specific remainder computation would<br>\nincorrectly result in a Wasm trap.</p>\n<p>This PR fixes the issue by just forcing use of the explicit-checks<br>\nimplementation for <code>srem</code> even when <code>avoid_div_traps</code> is false.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 231749643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616650078
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763\">PR #2763</a> from <code>fix-srem-trap</code> to <code>main</code>.</p>",
        "id": 231749960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616650386
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763#pullrequestreview-620767672\">PR Review</a>.</p>",
        "id": 231754279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616654548
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2763\">PR #2763</a>.</p>",
        "id": 231755222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616655506
    }
]