[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a> from <code>address-sp-add</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>use explicit address lowering for passing stack arguments to calls, when the offset is large.</li>\n</ul>\n<p>One question is: what <code>Inst</code> should cause a move from SP to another register? I preferred to keep the \"high-level\" semantics of <code>Inst::Mov</code>, instead of relying on every producer to produce an <code>Inst::Add { rd, sp, 0 }</code>. This means we have to modify the codegen of <code>Inst::Mov</code> when SP is involved, but it seemed like fine blackboxing.</p>\n<p>The PR as a whole is a bit messy. I was wondering if <code>gen_copy_reg_to_arg</code> shouldn't just take the <code>ctx</code> argument, but then type parameters were involved, making the trait more contrived. I didn't look into it, it might be the right thing to do in the future (otherwise this aarch64 impl detail leaks into the general interface, which is bad).</p>\n<p>Good thing is that thanks to many new assertions, error like this one should be more easily caught in the future.</p>\n<p>cc @julian-seward1 because I was hitting an assertion in regalloc if I didn't include the change in <code>is_move</code>: <code>assert!(iix_bounds.uses_len == 1);</code> (backtracking.rs:572). That happens during coalescing; I checked and the value was 0, instead of the expected 1. I don't think the change in <code>is_move</code> ought to be correct, so it'd be nice to see if there's something else to do to fix this.</p>\n</blockquote>",
        "id": 195095151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587663466
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\" title=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a>.</p>",
        "id": 195095153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587663467
    },
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a> from <code>address-sp-add</code> to <code>master</code>:</p>\n<blockquote>\n<p>and use explicit address lowering for passing stack arguments to calls, when the offset is large.</p>\n<p>One question is: what <code>Inst</code> should cause a move from SP to another register? I preferred to keep the \"high-level\" semantics of <code>Inst::Mov</code>, instead of relying on every producer to produce an <code>Inst::Add { rd, sp, 0 }</code>. This means we have to modify the codegen of <code>Inst::Mov</code> when SP is involved, but it seemed like fine blackboxing.</p>\n<p>The PR as a whole is a bit messy. I was wondering if <code>gen_copy_reg_to_arg</code> shouldn't just take the <code>ctx</code> argument, but then type parameters were involved, making the trait more contrived. I didn't look into it, it might be the right thing to do in the future (otherwise this aarch64 impl detail leaks into the general interface, which is bad).</p>\n<p>Good thing is that thanks to many new assertions, error like this one should be more easily caught in the future.</p>\n<p>cc @julian-seward1 because I was hitting an assertion in regalloc if I didn't include the change in <code>is_move</code>: <code>assert!(iix_bounds.uses_len == 1);</code> (backtracking.rs:572). That happens during coalescing; I checked and the value was 0, instead of the expected 1. I don't think the change in <code>is_move</code> ought to be correct, so it'd be nice to see if there's something else to do to fix this.</p>\n</blockquote>",
        "id": 195095276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587663525
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399395683\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399395683\">PR Review</a>.</p>",
        "id": 195106312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669134
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399395683\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399395683\">PR Review</a>.</p>",
        "id": 195106313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669134
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414054221\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414054221\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Add a FIXME comment referring to a regalloc issue number, maybe?</p>\n</blockquote>",
        "id": 195106314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669135
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414052478\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414052478\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm. I don't want to block this PR on it, but I'm thinking we should really clean up the ABI traits to take a <code>LowerCtx</code> and just emit instructions and allocate temps as needed directly, as you suggested above. @alexcrichton hit a similar issue with is stack-check PR (#1573). It's my design flaw originally (sorry!) so I can take this as a followup item once that PR and this one land.</p>\n</blockquote>",
        "id": 195106315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669135
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399423935\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399423935\">PR Review</a>.</p>",
        "id": 195110766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671316
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399423935\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399423935\">PR Review</a>.</p>",
        "id": 195110767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671316
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414077641\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414077641\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What is the difference between this and <code>store_stack_sp</code>?</p>\n</blockquote>",
        "id": 195110768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671316
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399424377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399424377\">PR Review</a>.</p>",
        "id": 195110827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671351
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399424377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399424377\">PR Review</a>.</p>",
        "id": 195110828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671351
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414078040\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414078040\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Other archs may not need this.</p>\n</blockquote>",
        "id": 195110829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587671351
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399787774\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399787774\">PR Review</a>.</p>",
        "id": 195164624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587720611
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414433192\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414433192\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>store_stack_sp</code> may generate several instructions to lower the SP addition.</p>\n</blockquote>",
        "id": 195164625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587720611
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414433375\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414433375\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, see also other comments.</p>\n</blockquote>",
        "id": 195164650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587720625
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399787949\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-399787949\">PR Review</a>.</p>",
        "id": 195164651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587720625
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a> from <code>address-sp-add</code> to <code>master</code>:</p>\n<blockquote>\n<p>and use explicit address lowering for passing stack arguments to calls, when the offset is large.</p>\n<p>One question is: what <code>Inst</code> should cause a move from SP to another register? I preferred to keep the \"high-level\" semantics of <code>Inst::Mov</code>, instead of relying on every producer to produce an <code>Inst::Add { rd, sp, 0 }</code>. This means we have to modify the codegen of <code>Inst::Mov</code> when SP is involved, but it seemed like fine blackboxing.</p>\n<p>The PR as a whole is a bit messy. I was wondering if <code>gen_copy_reg_to_arg</code> shouldn't just take the <code>ctx</code> argument, but then type parameters were involved, making the trait more contrived. I didn't look into it, it might be the right thing to do in the future (otherwise this aarch64 impl detail leaks into the general interface, which is bad).</p>\n<p>Good thing is that thanks to many new assertions, error like this one should be more easily caught in the future.</p>\n<p>cc @julian-seward1 because I was hitting an assertion in regalloc if I didn't include the change in <code>is_move</code>: <code>assert!(iix_bounds.uses_len == 1);</code> (backtracking.rs:572). That happens during coalescing; I checked and the value was 0, instead of the expected 1. I don't think the change in <code>is_move</code> ought to be correct, so it'd be nice to see if there's something else to do to fix this.</p>\n</blockquote>",
        "id": 195171107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587724948
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400057650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400057650\">PR Review</a>.</p>",
        "id": 195205989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587742697
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414671851\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414671851\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I looked into this, and I could make it work as discussed, but it puts the type parameter down to the implementation of <code>store_stack_sp</code>, which is unfortunate. Maybe we could revisit this later, and instead manually monomorphize the <code>LowerCtx</code> trait into its own impl <code>Lower</code>.</p>\n</blockquote>",
        "id": 195205990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587742697
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a> from <code>address-sp-add</code> to <code>master</code>:</p>\n<blockquote>\n<p>and use explicit address lowering for passing stack arguments to calls, when the offset is large.</p>\n<p>One question is: what <code>Inst</code> should cause a move from SP to another register? I preferred to keep the \"high-level\" semantics of <code>Inst::Mov</code>, instead of relying on every producer to produce an <code>Inst::Add { rd, sp, 0 }</code>. This means we have to modify the codegen of <code>Inst::Mov</code> when SP is involved, but it seemed like fine blackboxing.</p>\n<p>The PR as a whole is a bit messy. I was wondering if <code>gen_copy_reg_to_arg</code> shouldn't just take the <code>ctx</code> argument, but then type parameters were involved, making the trait more contrived. I didn't look into it, it might be the right thing to do in the future (otherwise this aarch64 impl detail leaks into the general interface, which is bad).</p>\n<p>Good thing is that thanks to many new assertions, error like this one should be more easily caught in the future.</p>\n<p>cc @julian-seward1 because I was hitting an assertion in regalloc if I didn't include the change in <code>is_move</code>: <code>assert!(iix_bounds.uses_len == 1);</code> (backtracking.rs:572). That happens during coalescing; I checked and the value was 0, instead of the expected 1. I don't think the change in <code>is_move</code> ought to be correct, so it'd be nice to see if there's something else to do to fix this.</p>\n</blockquote>",
        "id": 195206062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587742736
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a> from <code>address-sp-add</code> to <code>master</code>:</p>\n<blockquote>\n<p>and use explicit address lowering for passing stack arguments to calls, when the offset is large.</p>\n<p>One question is: what <code>Inst</code> should cause a move from SP to another register? I preferred to keep the \"high-level\" semantics of <code>Inst::Mov</code>, instead of relying on every producer to produce an <code>Inst::Add { rd, sp, 0 }</code>. This means we have to modify the codegen of <code>Inst::Mov</code> when SP is involved, but it seemed like fine blackboxing.</p>\n<p>The PR as a whole is a bit messy. I was wondering if <code>gen_copy_reg_to_arg</code> shouldn't just take the <code>ctx</code> argument, but then type parameters were involved, making the trait more contrived. I didn't look into it, it might be the right thing to do in the future (otherwise this aarch64 impl detail leaks into the general interface, which is bad).</p>\n<p>Good thing is that thanks to many new assertions, error like this one should be more easily caught in the future.</p>\n<p>cc @julian-seward1 because I was hitting an assertion in regalloc if I didn't include the change in <code>is_move</code>: <code>assert!(iix_bounds.uses_len == 1);</code> (backtracking.rs:572). That happens during coalescing; I checked and the value was 0, instead of the expected 1. I don't think the change in <code>is_move</code> ought to be correct, so it'd be nice to see if there's something else to do to fix this.</p>\n</blockquote>",
        "id": 195206370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587742892
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400139724\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400139724\">PR Review</a>.</p>",
        "id": 195220610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587749415
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414743743\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#discussion_r414743743\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, indeed; I want to try to keep things parameterized on the <code>Lower</code> trait (and not simplify to just the one impl) because it gives us flexibility later to e.g. be generic over multiple input IRs. This seems fine for now, I think.</p>\n</blockquote>",
        "id": 195220612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587749416
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400141613\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586#pullrequestreview-400141613\">PR Review</a>.</p>",
        "id": 195220923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587749575
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1586\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1586\">PR #1586</a>.</p>",
        "id": 195220963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587749601
    }
]