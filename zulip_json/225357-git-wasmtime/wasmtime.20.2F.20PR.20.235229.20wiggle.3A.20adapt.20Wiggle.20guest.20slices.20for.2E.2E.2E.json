[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>:</p>\n<blockquote>\n<p>When multiple threads can concurrently modify a WebAssembly shared memory, the underlying data for a Wiggle <code>GuestSlice</code> and <code>GuestSliceMut</code> could change due to access from other threads. This breaks Rust guarantees when <code>&amp;[T]</code> and <code>&amp;mut [T]</code> slices are handed out. This change modifies <code>GuestPtr</code> to make <code>as_slice</code> and <code>as_slice_mut</code> return an <code>Option</code> which is <code>None</code> when the underlying WebAssembly memory is shared.</p>\n<p>But WASI implementations still need access to the underlying WebAssembly memory, both to read to it and write from it. This change adds new APIs:</p>\n<ul>\n<li><code>GuestPtr::to_vec</code> copies the  bytes from WebAssembly memory (from which we can safely take a <code>&amp;[T]</code>)</li>\n<li><code>GuestPtr::as_unsafe_slice_mut</code> returns a wrapper <code>struct</code> from which we can  <code>unsafe</code>-ly return a mutable slice (users must accept the unsafety of concurrently modifying a <code>&amp;mut [T]</code>)</li>\n</ul>\n<p>This approach allows us to maintain Wiggle's borrow-checking infrastructure, which enforces the guarantee that Wiggle will not modify overlapping regions, e.g. This is important because the underlying system calls may expect this. Though other threads may modify the same underlying region, this is impossible to prevent; at least Wiggle will not be able to do so.</p>\n<p>Finally, the changes to Wiggle's API are propagated to all WASI implementations in Wasmtime. For now, code locations that attempt to get a guest slice will panic if the underlying memory is shared. Note that Wiggle is not enabled for shared memory (that will come later in something like #5054), but when it is, these panics will be clear indicators of locations that must be re-implemented in a thread-safe way.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 308676986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667942978
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>:</p>\n<blockquote>\n<p>When multiple threads can concurrently modify a WebAssembly shared memory, the underlying data for a Wiggle <code>GuestSlice</code> and <code>GuestSliceMut</code> could change due to access from other threads. This breaks Rust guarantees when <code>&amp;[T]</code> and <code>&amp;mut [T]</code> slices are handed out. This change modifies <code>GuestPtr</code> to make <code>as_slice</code> and <code>as_slice_mut</code> return an <code>Option</code> which is <code>None</code> when the underlying WebAssembly memory is shared.</p>\n<p>But WASI implementations still need access to the underlying WebAssembly memory, both to read to it and write from it. This change adds new APIs:</p>\n<ul>\n<li><code>GuestPtr::to_vec</code> copies the  bytes from WebAssembly memory (from which we can safely take a <code>&amp;[T]</code>)</li>\n<li><code>GuestPtr::as_unsafe_slice_mut</code> returns a wrapper <code>struct</code> from which we can  <code>unsafe</code>-ly return a mutable slice (users must accept the unsafety of concurrently modifying a <code>&amp;mut [T]</code>)</li>\n</ul>\n<p>This approach allows us to maintain Wiggle's borrow-checking infrastructure, which enforces the guarantee that Wiggle will not modify overlapping regions, e.g. This is important because the underlying system calls may expect this. Other threads may modify the same underlying region and this is impossible to prevent; at least Wiggle will not be able to do so.</p>\n<p>Finally, the changes to Wiggle's API are propagated to all WASI implementations in Wasmtime. For now, code locations that attempt to get a guest slice will panic if the underlying memory is shared. Note that Wiggle is not enabled for shared memory (that will come later in something like #5054), but when it is, these panics will be clear indicators of locations that must be re-implemented in a thread-safe way.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 308677242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667943045
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 308689259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667948624
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1172971604\">PR review</a>.</p>",
        "id": 308690824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1172971604\">PR review</a>.</p>",
        "id": 308690825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017207753\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the <code>expect</code> messages here be replaced with something along the lines of a <code>TODO: ..</code> to clarify that there's nothing a user running into this can do to fix things, it requires source changes here.</p>\n</blockquote>",
        "id": 308690826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017210477\">PR review comment</a>:</p>\n<blockquote>\n<p>double <code>as *mut T</code> cast?</p>\n</blockquote>",
        "id": 308690827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017210288\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this have a comment, or a reference, for why shared memory is rejected here?</p>\n</blockquote>",
        "id": 308690828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017209850\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you update the documentation of this function to indicate what the <code>Option</code> return means?</p>\n</blockquote>",
        "id": 308690829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017213566\">PR review comment</a>:</p>\n<blockquote>\n<p>We'll need to be careful here because the mere presence of <code>&amp;mut [T]</code>, however ephemeral it is, will be UB for Rust that we need to avoid. Basically the raw-pointer-ness needs to get plumbed all the way down to the <code>std::ptr::copy</code>.</p>\n<p>Also, can you be sure to tag this <code>std::ptr::copy</code> in the threads issue as \"please audit at some point\" along the lines of the other copies already in <code>runtime/src/instances.rs</code></p>\n</blockquote>",
        "id": 308690830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017210175\">PR review comment</a>:</p>\n<blockquote>\n<p>Or sort of more generally I think it's worth writing down somewhere the general idea behind shared memory and how it works in wiggle, and then link to that as part of various comments.</p>\n</blockquote>",
        "id": 308690831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017211729\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps be refactored with the result or such to be usable as an internal implementation detail of the two methods above? Deduplicating the bounds checks would be pretty convenient and the \"Unsafe\" version could then have a methods <code>{shared,mut}_borrow</code> to give the safe versions, returning <code>None</code> for shared memories.</p>\n<p>basically <code>as_slice()</code> could be a small wrapper around <code>Ok(self.as_unsafe_slice().shared_borrow())</code> or something like that.</p>\n</blockquote>",
        "id": 308690832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017210731\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar requests as above for doc updates and comments on the test for shared memory here</p>\n</blockquote>",
        "id": 308690833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1017209504\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, given the sheer quantity of these, I think it might be good to have some sort of greppable string in the message here so an entry can be added to the threads tracking issue of how to find places to resolve.</p>\n</blockquote>",
        "id": 308690834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949522
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 308857641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668022244
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 308858083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668022400
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1174671244\">PR review</a>.</p>",
        "id": 308863132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668024167
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1018360717\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think that this is doing what you might expect, I think this'll need to be written with <code>std::slice::from_raw_parts</code>. That being said I think it's best to drop <code>as_slice</code> and <code>as_slice_mut</code> here for now since nothing needs it. I think these would be better modeled as a <code>Deref&lt;Target = [UnsafeCell&lt;T&gt;]&gt;</code> in the future if it's necessary.</p>\n</blockquote>",
        "id": 308863133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668024167
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1018362322\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this method be implemented with <code>as_unsafe_slice_mut</code> to deduplicate the bits internally?</p>\n</blockquote>",
        "id": 308863134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668024167
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1018362986\">PR review comment</a>:</p>\n<blockquote>\n<p>For this this will still need to be implemented with an actual call to <code>std::ptr::copy</code>. I know for a fact that anything other than that is inherently UB, the only question to me is whether <code>std::ptr::copy</code> is UB-or-not in this situation.</p>\n</blockquote>",
        "id": 308863135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668024168
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1174671244\">PR review</a>.</p>",
        "id": 308863136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668024168
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 308887525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668033376
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 308892253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668035875
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> as ready for review.</p>",
        "id": 308892383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668035949
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1174944037\">PR review</a>.</p>",
        "id": 308901765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668041988
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1174944037\">PR review</a>.</p>",
        "id": 308901766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668041988
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1018552626\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this will need to do a <code>guest_slice.mut_borrow()?;</code> before doing this copy to return an error if this is already borrowed for unshared memories.</p>\n</blockquote>",
        "id": 308901767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668041988
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1176059988\">PR review</a>.</p>",
        "id": 309018712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668095656
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1019321392\">PR review comment</a>:</p>\n<blockquote>\n<p>I have <code>UnsafeGuestSlice::mut_borrow(self)</code> which then makes it difficult to either use the mutable borrow or use the unsafe slice for <code>std::ptr::copy</code>. Should it take <code>&amp;mut self</code> instead?</p>\n</blockquote>",
        "id": 309018715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668095657
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1176071115\">PR review</a>.</p>",
        "id": 309020017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668096022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#discussion_r1019328859\">PR review comment</a>:</p>\n<blockquote>\n<p>While no longer compatible with <code>?</code> how about:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">BorrowResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Shared</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">GuestError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>as the return value? So that way given a <code>Shared</code> error you  can still get at the internal pointer.</p>\n<p>While you could change <code>mut_burrow</code> to <code>&amp;mut self</code> it would require still having the <code>self</code> version to get the lifetimes on <code>as_slice_mut</code> to work.</p>\n</blockquote>",
        "id": 309020018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668096022
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 309053472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668105676
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#pullrequestreview-1176382318\">PR review</a>.</p>",
        "id": 309063950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668108986
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a>.</p>",
        "id": 309063961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668108992
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a> from <code>shmem-in-wiggle-copy-and-unsafe</code> to <code>main</code>.</p>",
        "id": 309070428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668111197
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">PR #5229</a>.</p>",
        "id": 309087527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668117294
    }
]