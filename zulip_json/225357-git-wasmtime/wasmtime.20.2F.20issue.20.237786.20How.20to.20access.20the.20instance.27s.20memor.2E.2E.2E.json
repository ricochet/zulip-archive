[
    {
        "content": "<p>eigenein opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any of them. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host→guest call</p>\n<p>Should I put a reference to instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416463410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705534443
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any of them. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host→guest call</p>\n<p>Should I put a reference to instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416463472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705534469
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host→guest call</p>\n<p>Should I put a reference to instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416463499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705534488
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416463523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705534504
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416464658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535168
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>. Am I missing something?</p>\n</blockquote>",
        "id": 416464904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535318
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>, that is effeectively making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416464977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535361
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code>, that is effectively making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416464991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535366
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from there?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code> – so that would effectively be making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416465034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535391
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from it?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code> – so that would effectively be making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416465976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535867
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from it?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722\">https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722</a>, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> to the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code> – so that would effectively be making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416466233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705535997
    },
    {
        "content": "<p>eigenein edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from it?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722\">https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722</a>, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> into the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code> – so that would effectively be making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416466331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705536021
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786#issuecomment-1897557763\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p>There's an example for this <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Func.html#method.wrap\">on the documentation of <code>Func::wrap</code></a> where the gist of it is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"memory\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"failed to find host memory\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>One option is to store a <code>Memory</code> in the <code>T</code> of <code>Store&lt;T&gt;</code> (i.e. replace the <code>()</code> you're using currently), but the easiest option is probably to call <code>caller.get_export(...)</code></p>\n</blockquote>",
        "id": 416470995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705538173
    },
    {
        "content": "<p>eigenein <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786#issuecomment-1897563849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p>@alexcrichton Thank you, just exactly what I needed and completely overlooked!</p>\n</blockquote>",
        "id": 416472025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705538611
    },
    {
        "content": "<p>eigenein closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7786\">issue #7786</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi team,</p>\n<p>I'm instantiating a long-lived <code>Engine</code> and <code>Linker</code>, and then I'm adding some host functions to the linker (Rust API). Some of these functions should receive a string as a parameter, so an offset and a length in a guest's memory, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"logging\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"info\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// How do I access instance's memory here and read from it?</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I could use a closure as suggested in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722\">https://github.com/bytecodealliance/wasmtime/issues/2491#issuecomment-742352722</a>, but I'm going to support a plugin system, and a shared host function may be called from any plugin. Also, <code>Store</code> is short-lived, and I wouldn't like to re-instantiate a <code>Linker</code> together with the closures for every host-to-guest call</p>\n<p>Should I put a reference to <code>Instance</code> or to the instance's <code>Memory</code> into the instance's <code>Store</code>? That smells a little, since <code>Caller</code> already contains <code>Store</code> and all the memories are already owned by <code>Store</code> – so that would effectively be making a loop of references. Am I missing something?</p>\n</blockquote>",
        "id": 416472026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705538611
    }
]