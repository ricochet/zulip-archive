[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a> from <code>saulecabrera:winch-overhaul-abi</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change overhauls Winch's ABI. This means that as part of this change,  the default ABI now closely resembles Cranelift's ABI, particularly on the treatment of the VMContext. This change also fixes many wrong assumptions about trampolines, which are tied to how the previous ABI operated.</p>\n<p>The main motivation behind this change is:</p>\n<ul>\n<li>To make it easier to integrate Winch-generated functions with Wasmtime</li>\n<li>Fix fuzz bugs related to imports</li>\n<li>Solidify the implementation regarding the usage of a pinned register to hold the VMContext value throughout the lifetime of a function.</li>\n</ul>\n<p>The previous implementation had the following characteristics, and wrong assumptions):</p>\n<ul>\n<li>Assumed that internal functions don't receive a caller or callee VMContexts as parameters.</li>\n<li>\n<p>Worked correctly in the following scenarios: <br>\n    * <code>Wasm -&gt; Native</code>: since we can explicitly load the caller and callee <code>VMContext</code>, because we're calling a native import. <br>\n    * <code>(Native, Array) -&gt; Wasm</code>: because the native signatures define a tuple of  <code>VMContext</code> as arguments.</p>\n</li>\n<li>\n<p>It didn't work in the following scenario:</p>\n<ul>\n<li><code>Wasm-&gt;Wasm</code>: When calling imports from another WebAssembly instance (via direct call or <code>call_indirect</code>. The previous implementation wrongly assumes that there should be a trampoline in this case, but there isn't. The code was generated by the same compiler, so the same ABI should be used in both functions, but it doesn't. </li>\n</ul>\n</li>\n</ul>\n<p>This change introduces the following changes, which fix the previous assumptions and bugs:</p>\n<ul>\n<li>All internal functions declare a two extra pointer-sized parameters, which will hold the callee and caller <code>VMContext</code>s</li>\n<li>Use a pinned register that will be considered live through the lifetime of the function instead of pinning it at the trampoline level. The pinning explicitlly happens when entering the function body and no other assumptions are made from there on.</li>\n<li>Introduce the concept of special <code>ContextArgs</code> for function calls. This enum holds metadata about which context arguments are needed depending on the callee. The previous implementation of introducing register values at arbitrary locations in the value stack conflicts with the stack ordering principle which states that older values must <em>always</em> precede newer values. So we can't insert a register, because if a spill happens the order of the values will be wrong. </li>\n</ul>\n<p>Finally, given that this change also enables the <code>imports.wast</code> test suite, it also includes a fix to <code>global.{get, set}</code> instructions which didn't account entirely for imported globals.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422651804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531475
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422651805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531476
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422651806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531476
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422651808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531476
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1893632360\">PR review</a>.</p>",
        "id": 422652617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531666
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1497854457\">PR review comment</a>:</p>\n<blockquote>\n<p>This change is fairly large already, so I opted to just introduce this macro and use it in a couple of places that are updated by this change. My plan is to follow up with a general replace after landing this change (but I can do so here too if preferred).</p>\n</blockquote>",
        "id": 422652619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531667
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<p>This change overhauls Winch's ABI. This means that as part of this change,  the default ABI now closely resembles Cranelift's ABI, particularly on the treatment of the VMContext. This change also fixes many wrong assumptions about trampolines, which are tied to how the previous ABI operated.</p>\n<p>The main motivation behind this change is:</p>\n<ul>\n<li>To make it easier to integrate Winch-generated functions with Wasmtime</li>\n<li>Fix fuzz bugs related to imports</li>\n<li>Solidify the implementation regarding the usage of a pinned register to hold the VMContext value throughout the lifetime of a function.</li>\n</ul>\n<p>The previous implementation had the following characteristics, and wrong assumptions):</p>\n<ul>\n<li>Assumed that internal functions don't receive a caller or callee VMContexts as parameters.</li>\n<li>\n<p>Worked correctly in the following scenarios: <br>\n    * <code>Wasm -&gt; Native</code>: since we can explicitly load the caller and callee <code>VMContext</code>, because we're calling a native import. <br>\n    * <code>(Native, Array) -&gt; Wasm</code>: because the native signatures define a tuple of  <code>VMContext</code> as arguments.</p>\n</li>\n<li>\n<p>It didn't work in the following scenario:</p>\n<ul>\n<li><code>Wasm-&gt;Wasm</code>: When calling imports from another WebAssembly instance (via direct call or <code>call_indirect</code>. The previous implementation wrongly assumed that there should be a trampoline in this case, but there isn't. The code was generated by the same compiler, so the same ABI should be used in both functions. </li>\n</ul>\n</li>\n</ul>\n<p>This change introduces the following changes, which fix the previous assumptions and bugs:</p>\n<ul>\n<li>All internal functions declare a two extra pointer-sized parameters, which will hold the callee and caller <code>VMContext</code>s</li>\n<li>Use a pinned register that will be considered live through the lifetime of the function instead of pinning it at the trampoline level. The pinning explicitlly happens when entering the function body and no other assumptions are made from there on.</li>\n<li>Introduce the concept of special <code>ContextArgs</code> for function calls. This enum holds metadata about which context arguments are needed depending on the callee. The previous implementation of introducing register values at arbitrary locations in the value stack conflicts with the stack ordering principle which states that older values must <em>always</em> precede newer values. So we can't insert a register, because if a spill happens the order of the values will be wrong. </li>\n</ul>\n<p>Finally, given that this change also enables the <code>imports.wast</code> test suite, it also includes a fix to <code>global.{get, set}</code> instructions which didn't account entirely for imported globals.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422652981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708531742
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<p>This change overhauls Winch's ABI. This means that as part of this change,  the default ABI now closely resembles Cranelift's ABI, particularly on the treatment of the VMContext. This change also fixes many wrong assumptions about trampolines, which are tied to how the previous ABI operated.</p>\n<p>The main motivation behind this change is:</p>\n<ul>\n<li>To make it easier to integrate Winch-generated functions with Wasmtime</li>\n<li>Fix fuzz bugs related to imports</li>\n<li>Solidify the implementation regarding the usage of a pinned register to hold the VMContext value throughout the lifetime of a function.</li>\n</ul>\n<p>The previous implementation had the following characteristics, and wrong assumptions):</p>\n<ul>\n<li>Assumed that internal functions don't receive a caller or callee VMContexts as parameters.</li>\n<li>Worked correctly in the following scenarios: <br>\n    * <code>Wasm -&gt; Native</code>: since we can explicitly load the caller and callee <code>VMContext</code>, because we're calling a native import. <br>\n    * <code>(Native, Array) -&gt; Wasm</code>: because the native signatures define a tuple of  <code>VMContext</code> as arguments.</li>\n<li>It didn't work in the following scenario:<ul>\n<li><code>Wasm-&gt;Wasm</code>: When calling imports from another WebAssembly instance (via direct call or <code>call_indirect</code>. The previous implementation wrongly assumed that there should be a trampoline in this case, but there isn't. The code was generated by the same compiler, so the same ABI should be used in both functions. </li>\n</ul>\n</li>\n</ul>\n<p>This change introduces the following changes, which fix the previous assumptions and bugs:</p>\n<ul>\n<li>All internal functions declare a two extra pointer-sized parameters, which will hold the callee and caller <code>VMContext</code>s</li>\n<li>Use a pinned register that will be considered live through the lifetime of the function instead of pinning it at the trampoline level. The pinning explicitlly happens when entering the function body and no other assumptions are made from there on.</li>\n<li>Introduce the concept of special <code>ContextArgs</code> for function calls. This enum holds metadata about which context arguments are needed depending on the callee. The previous implementation of introducing register values at arbitrary locations in the value stack conflicts with the stack ordering principle which states that older values must <em>always</em> precede newer values. So we can't insert a register, because if a spill happens the order of the values will be wrong. </li>\n</ul>\n<p>Finally, given that this change also enables the <code>imports.wast</code> test suite, it also includes a fix to <code>global.{get, set}</code> instructions which didn't account entirely for imported globals.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422657398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708532742
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<p>This change overhauls Winch's ABI. This means that as part of this change,  the default ABI now closely resembles Cranelift's ABI, particularly on the treatment of the VMContext. This change also fixes many wrong assumptions about trampolines, which are tied to how the previous ABI operated.</p>\n<p>The main motivation behind this change is:</p>\n<ul>\n<li>To make it easier to integrate Winch-generated functions with Wasmtime</li>\n<li>Fix fuzz bugs related to imports</li>\n<li>Solidify the implementation regarding the usage of a pinned register to hold the VMContext value throughout the lifetime of a function.</li>\n</ul>\n<p>The previous implementation had the following characteristics, and wrong assumptions:</p>\n<ul>\n<li>Assumed that internal functions don't receive a caller or callee VMContexts as parameters.</li>\n<li>Worked correctly in the following scenarios: <br>\n    * <code>Wasm -&gt; Native</code>: since we can explicitly load the caller and callee <code>VMContext</code>, because we're calling a native import. <br>\n    * <code>(Native, Array) -&gt; Wasm</code>: because the native signatures define a tuple of  <code>VMContext</code> as arguments.</li>\n<li>It didn't work in the following scenario:<ul>\n<li><code>Wasm-&gt;Wasm</code>: When calling imports from another WebAssembly instance (via direct call or <code>call_indirect</code>. The previous implementation wrongly assumed that there should be a trampoline in this case, but there isn't. The code was generated by the same compiler, so the same ABI should be used in both functions. </li>\n</ul>\n</li>\n</ul>\n<p>This change introduces the following changes, which fix the previous assumptions and bugs:</p>\n<ul>\n<li>All internal functions declare a two extra pointer-sized parameters, which will hold the callee and caller <code>VMContext</code>s</li>\n<li>Use a pinned register that will be considered live through the lifetime of the function instead of pinning it at the trampoline level. The pinning explicitlly happens when entering the function body and no other assumptions are made from there on.</li>\n<li>Introduce the concept of special <code>ContextArgs</code> for function calls. This enum holds metadata about which context arguments are needed depending on the callee. The previous implementation of introducing register values at arbitrary locations in the value stack conflicts with the stack ordering principle which states that older values must <em>always</em> precede newer values. So we can't insert a register, because if a spill happens the order of the values will be wrong. </li>\n</ul>\n<p>Finally, given that this change also enables the <code>imports.wast</code> test suite, it also includes a fix to <code>global.{get, set}</code> instructions which didn't account entirely for imported globals.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422657442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708532755
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<p>This change overhauls Winch's ABI. This means that as part of this change,  the default ABI now closely resembles Cranelift's ABI, particularly on the treatment of the VMContext. This change also fixes many wrong assumptions about trampolines, which are tied to how the previous ABI operated.</p>\n<p>The main motivation behind this change is:</p>\n<ul>\n<li>To make it easier to integrate Winch-generated functions with Wasmtime</li>\n<li>Fix fuzz bugs related to imports</li>\n<li>Solidify the implementation regarding the usage of a pinned register to hold the VMContext value throughout the lifetime of a function.</li>\n</ul>\n<p>The previous implementation had the following characteristics, and wrong assumptions:</p>\n<ul>\n<li>Assumed that internal functions don't receive a caller or callee VMContexts as parameters.</li>\n<li>Worked correctly in the following scenarios: <br>\n    * <code>Wasm -&gt; Native</code>: since we can explicitly load the caller and callee <code>VMContext</code>, because we're calling a native import. <br>\n    * <code>(Native, Array) -&gt; Wasm</code>: because the native signatures define a tuple of  <code>VMContext</code> as arguments.</li>\n<li>It didn't work in the following scenario:<ul>\n<li><code>Wasm -&gt; Wasm</code>: When calling imports from another WebAssembly instance (via direct call or <code>call_indirect</code>. The previous implementation wrongly assumed that there should be a trampoline in this case, but there isn't. The code was generated by the same compiler, so the same ABI should be used in both functions. </li>\n</ul>\n</li>\n</ul>\n<p>This change introduces the following changes, which fix the previous assumptions and bugs:</p>\n<ul>\n<li>All internal functions declare a two extra pointer-sized parameters, which will hold the callee and caller <code>VMContext</code>s</li>\n<li>Use a pinned register that will be considered live through the lifetime of the function instead of pinning it at the trampoline level. The pinning explicitlly happens when entering the function body and no other assumptions are made from there on.</li>\n<li>Introduce the concept of special <code>ContextArgs</code> for function calls. This enum holds metadata about which context arguments are needed depending on the callee. The previous implementation of introducing register values at arbitrary locations in the value stack conflicts with the stack ordering principle which states that older values must <em>always</em> precede newer values. So we can't insert a register, because if a spill happens the order of the values will be wrong. </li>\n</ul>\n<p>Finally, given that this change also enables the <code>imports.wast</code> test suite, it also includes a fix to <code>global.{get, set}</code> instructions which didn't account entirely for imported globals.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 422657527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708532767
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1893919789\">PR review</a>:</p>\n<blockquote>\n<p>Overall looks great, thanks! Just a few nits below.</p>\n</blockquote>",
        "id": 422673928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1893919789\">PR review</a>:</p>\n<blockquote>\n<p>Overall looks great, thanks! Just a few nits below.</p>\n</blockquote>",
        "id": 422673929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1497991301\">PR review comment</a>:</p>\n<blockquote>\n<p>s/the the/the/</p>\n</blockquote>",
        "id": 422673930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1497960735\">PR review comment</a>:</p>\n<blockquote>\n<p>s/paramters/parameters/</p>\n</blockquote>",
        "id": 422673931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1497995345\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than <code>unchecked</code>, which to me implies lack of a bounds check or similar, can we name this in a way that indicates the index-space is shifted relative to above? E.g. perhaps the above <code>get_local</code> becomes <code>get_wasm_local</code> and <code>get_local_unchecked</code> becomes <code>get_raw_local</code>?</p>\n<p>Alternately, avoid exposing <code>get_local_unchecked</code> at all and have two separate methods <code>get_callee_local()</code> / <code>get_caller_local()</code>?</p>\n</blockquote>",
        "id": 422673932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1497998477\">PR review comment</a>:</p>\n<blockquote>\n<p>here and perhaps elsewhere, can we have a constant (maybe an associated constant of <code>ContextArgs</code>) indicating how many args we expect? Basically it'd be nice to tie this to other definitions so that we don't miss it if we ever add, e.g., a third context arg.</p>\n</blockquote>",
        "id": 422673933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708537635
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#issuecomment-1957879915\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 422702203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708548306
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422706154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550139
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422706155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550139
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422706156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550139
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422706158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550140
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#issuecomment-1957963624\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>:</p>\n<blockquote>\n<p>Oh bad rebase -- sorry about that. Fixing it now. </p>\n</blockquote>",
        "id": 422706305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550211
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422706746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708550424
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422710780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552440
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1894490056\">PR review</a>.</p>",
        "id": 422710876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552471
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1498360370\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed, thanks!</p>\n</blockquote>",
        "id": 422710878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552472
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1894490224\">PR review</a>.</p>",
        "id": 422710893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552479
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1498360481\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 422710894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552479
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1894491160\">PR review</a>.</p>",
        "id": 422710979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552522
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1498361136\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the suggestion -- I ended up with <code>get_frame_local</code> and <code>get_wasm_local</code> to be able to distinguish one from another. </p>\n</blockquote>",
        "id": 422710980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552522
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#pullrequestreview-1894493163\">PR review</a>.</p>",
        "id": 422711174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552613
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974#discussion_r1498362546\">PR review comment</a>:</p>\n<blockquote>\n<p>Good catch -- I introduced <code>MAX_CONTEXT_ARGS</code> near the <code>ContextArgs</code> definition, which is used in the trampoline. In the non-trampoline case (normal function calls), the expected number of context arguments is already parametrized through <code>ContextArgs::len</code></p>\n</blockquote>",
        "id": 422711175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708552613
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7974\">PR #7974</a>.</p>",
        "id": 422719912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708557309
    }
]