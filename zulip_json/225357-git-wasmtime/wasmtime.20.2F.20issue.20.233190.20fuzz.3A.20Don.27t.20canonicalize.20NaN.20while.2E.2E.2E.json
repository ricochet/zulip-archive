[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190#issuecomment-899632936\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190\">issue #3190</a>:</p>\n<blockquote>\n<p>Someone should definitely double-check me on this. My vague historical experience with NaN is that one machine produces the same nan bits all the time, but the theoretical possibility is that different machines produce different nan bits. I don't know the historical reasoning behind the canonicalization of nan pass in Cranelift, but I suspect it was to produce entirely deterministic execution results of wasm, regardless of environment. I believe, though, that within one environment (such as the same process on the same machine) it's not necessary for that level of determinism?</p>\n</blockquote>",
        "id": 249609244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629130178
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190#issuecomment-899642071\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190\">issue #3190</a>:</p>\n<blockquote>\n<p>In practice, CPUs do produce different NaN bits. For example, x86 produces NaNs with the sign bit set; ARM produces NaNs with the sign bit unset.</p>\n<p>Also, JITs sometimes need to use custom code sequences which produce different NaNs than the hardware's typical behavior. For example, x86 doesn't have instructions corresponding to wasm's <code>min</code> and <code>max</code>, so JITs have to use sequences of several instructions to implement wasm's semantics, and there are a few different ways to do it, and they produce different NaN results.</p>\n<p>So I expect disabling nan canonicalization will reduce the number of spurious fuzz differences, but won't reliably eliminate them. Ideally, the spec interpreter should have an option to canonicalize NaNs as well.<br>\n</p>\n</blockquote>",
        "id": 249610673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629130883
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190#issuecomment-899648190\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190\">issue #3190</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 249611793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629131425
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190#issuecomment-899736003\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190\">issue #3190</a>:</p>\n<blockquote>\n<p>Ok if that's the case I don't think this will work out. I like your suggestion of implementing this in wasm-smith, though, so I'll do that!</p>\n</blockquote>",
        "id": 249629842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629139488
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190#issuecomment-899795323\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3190\">issue #3190</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/319\">https://github.com/bytecodealliance/wasm-tools/pull/319</a> contains the wasm-smith-does-the-canonicalization strategy. I'll disable cranelift-based canonicalization just for the differential fuzzers, but ensure that wasm-smith-canonicalization is enabled for those fuzzers.</p>\n</blockquote>",
        "id": 249642452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629145427
    }
]