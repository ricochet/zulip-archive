[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a> from <code>jameysharp:drop-unused-args</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Before this, Cranelift ABI code would emit a stack-load instruction for every stack argument and add all register arguments to the <code>args</code> pseudo-instruction, whether those arguments were used or not.</p>\n<p>However, we already know which arguments are used at that point because we need the analysis for load-sinking, so it's easy to filter the unused arguments out.</p>\n<p>This avoids generating loads that are immediately dead, which is good for the generated code. It also slightly reduces the size of the register allocation problem, which is a small win in compile time.</p>\n<p>This also changes which registers RA2 chooses in some cases because it no longer considers unused defs from the <code>args</code> pseudo-instruction.</p>\n<p>There was an existing method named <code>arg_is_needed_in_body</code> which sounded like it should be the right place to implement this. However, that method was only used for Baldrdash integration and has been a stub since that integration was removed in #4571. Also it didn't have access to the <code>value_ir_uses</code> map needed here. But the place where that method was called does have access to that map and was perfect for this.</p>\n<p>Thanks to @elliottt for doing the initial investigation of this change with me.</p>\n</blockquote>",
        "id": 434829657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814027
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434829658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814027
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434829659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814027
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434829663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814027
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434829666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814027
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438#pullrequestreview-2015648853\">PR review</a>:</p>\n<blockquote>\n<p>Super-clean precision change for a nice result -- thanks very much for thinking through this! I'm excited to see the useless loads go away in a bunch of functions.</p>\n</blockquote>",
        "id": 434830581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814330
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438#issuecomment-2070910874\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>:</p>\n<blockquote>\n<p>So <code>cargo test -p wasmtime engine::serialization::test::cache_accounts_for_opt_level</code> fails with this PR. The panic message is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">14</span>:\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">SSA</span><span class=\"p\">(</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">192</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>This test simply compiles <code>(module (func))</code> several times with different optimization settings and with Wasmtime's cache enabled.</p>\n<p>From experimentation, this problem only seems to occur if Wasmtime's debug-info is enabled. I guess this is the only test that runs in that mode.</p>\n<p>I thought <code>emit_value_label_markers_for_block_args</code>, or the special case to call <code>emit_value_label_marks_for_value</code> on the vmctx parameter, seemed like likely candidates for telling RA2 to use an argument that's not otherwise used. But commenting out those calls doesn't fix this.</p>\n<p>I'm not sure how else to investigate this; any suggestions?</p>\n</blockquote>",
        "id": 434841310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713818265
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438#issuecomment-2070918339\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>:</p>\n<blockquote>\n<p>Can you dump the vcode from the failure? The most pertinent bit is figuring out what is still using the argument, I guess (as you suggest)...</p>\n</blockquote>",
        "id": 434842212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713818558
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434846275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713819996
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8438\">PR #8438</a>.</p>",
        "id": 434853340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713822569
    }
]