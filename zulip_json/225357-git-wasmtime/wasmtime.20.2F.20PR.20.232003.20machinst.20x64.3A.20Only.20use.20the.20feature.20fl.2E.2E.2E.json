[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a> from <code>x64-remove-use-new-backend</code> to <code>main</code>:</p>\n<blockquote>\n<p>Before this patch, running the x64 new backend would require both<br>\ncompiling with <code>--features experimental_x64</code> and running with<br>\n<code>use_new_backend</code>.</p>\n<p>This patches changes this behavior so that the runtime flag is not<br>\nneeded anymore: using the feature flag will enforce usage of the new<br>\nbackend everywhere, making using and testing it much simpler:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run --features experimental_x64 ;; other CLI options/flags\n</code></pre></div>\n\n\n<p>This also gives a hint at what the meta language generation would look<br>\nlike after switching to the new backend.</p>\n<p>Compiling only with the x64 codegen flag gives a nice compile time speedup.</p>\n<p>As a bonus, this makes it possible to run all the Cranelift and Wasmtime tests just by enabling the feature flag, which should avoid us a few headaches with the Cranelift testing framework in particular :-)</p>\n</blockquote>",
        "id": 203401463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594308933
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a>.</p>",
        "id": 203401464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594308933
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a>.</p>",
        "id": 203401466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594308933
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446032457\">PR Review</a>.</p>",
        "id": 203454566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337268
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452543379\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Shorter is: <code>let result = if let Some(...</code> and do the <code>if let Err(err) ...</code> check afterwards.</p>\n</blockquote>",
        "id": 203454567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337268
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446034887\">PR Review</a>.</p>",
        "id": 203454970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337698
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452545497\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not necessarily in this PR (but you could if you wanted to): what do you think of using a trait to describe that things like these transform groups can be generated? Then the awkward <code>(isas, new_backend_isas)</code> could be done away with in <code>build.rs</code>. I think that type of thing makes the code easier to use, even if eventually we get rid of the old/new backend distinction.</p>\n</blockquote>",
        "id": 203454971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337698
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446035656\">PR Review</a>.</p>",
        "id": 203455134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337827
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452546262\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(You still need an enum like the following but that still seems better than the extra logic above:)</p>\n<div class=\"codehilite\"><pre><span></span><code>enum BackendType {\n  New(TransformGroups),\n  Old(TransfomGroups),\n}\nimpl Generator for BackendType ...\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203455135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337827
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452546262\">PR Review Comment</a>.</p>",
        "id": 203455155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594337856
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446037669\">PR Review</a>.</p>",
        "id": 203455557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594338178
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452547990\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not sure I'm tracking what this change is about...</p>\n</blockquote>",
        "id": 203455558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594338178
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446038303\">PR Review</a>.</p>",
        "id": 203455671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594338295
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446226795\">PR Review</a>.</p>",
        "id": 203482847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594370533
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452707305\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, this fixes a recent regression on the x64 backend, after @yurydelendik switched linking in wasmtime. I think that the underlying object implementation doesn't recognize x86 rel32 relocations in x64 and marks them as generic. The longer term fix for wasmtime is to do what Cranelift old-backend x86 did: pessimize all direct calls (since we don't know the offset to the callee and can't ensure it'll fit in a 32-bits payload, for very large programs) and generate a load function address in register + call indirect. Which also explains the todo below.</p>\n</blockquote>",
        "id": 203482848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594370533
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a> from <code>x64-remove-use-new-backend</code> to <code>main</code>:</p>\n<blockquote>\n<p>Before this patch, running the x64 new backend would require both<br>\ncompiling with <code>--features experimental_x64</code> and running with<br>\n<code>use_new_backend</code>.</p>\n<p>This patches changes this behavior so that the runtime flag is not<br>\nneeded anymore: using the feature flag will enforce usage of the new<br>\nbackend everywhere, making using and testing it much simpler:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run --features experimental_x64 ;; other CLI options/flags\n</code></pre></div>\n\n\n<p>This also gives a hint at what the meta language generation would look<br>\nlike after switching to the new backend.</p>\n<p>Compiling only with the x64 codegen flag gives a nice compile time speedup.</p>\n<p>As a bonus, this makes it possible to run all the Cranelift and Wasmtime tests just by enabling the feature flag, which should avoid us a few headaches with the Cranelift testing framework in particular :-)</p>\n</blockquote>",
        "id": 203507875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594388675
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a>.</p>",
        "id": 203507917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594388711
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#pullrequestreview-446481959\">PR Review</a>.</p>",
        "id": 203518522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594393869
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003#discussion_r452905188\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Looks like we still need <code>&amp;mut fmt</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003/checks?check_run_id=858163032#step:11:115\">https://github.com/bytecodealliance/wasmtime/pull/2003/checks?check_run_id=858163032#step:11:115</a></p>\n</blockquote>",
        "id": 203518523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594393869
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a> from <code>x64-remove-use-new-backend</code> to <code>main</code>:</p>\n<blockquote>\n<p>Before this patch, running the x64 new backend would require both<br>\ncompiling with <code>--features experimental_x64</code> and running with<br>\n<code>use_new_backend</code>.</p>\n<p>This patches changes this behavior so that the runtime flag is not<br>\nneeded anymore: using the feature flag will enforce usage of the new<br>\nbackend everywhere, making using and testing it much simpler:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run --features experimental_x64 ;; other CLI options/flags\n</code></pre></div>\n\n\n<p>This also gives a hint at what the meta language generation would look<br>\nlike after switching to the new backend.</p>\n<p>Compiling only with the x64 codegen flag gives a nice compile time speedup.</p>\n<p>As a bonus, this makes it possible to run all the Cranelift and Wasmtime tests just by enabling the feature flag, which should avoid us a few headaches with the Cranelift testing framework in particular :-)</p>\n</blockquote>",
        "id": 203532166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594400410
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2003\">PR #2003</a>.</p>",
        "id": 203941547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594811490
    }
]