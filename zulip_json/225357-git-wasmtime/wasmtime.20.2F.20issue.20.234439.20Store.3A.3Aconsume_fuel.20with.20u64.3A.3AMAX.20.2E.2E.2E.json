[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>Currently the following test will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// fuel wraps to i64 so the store has i64::MAX fuel now</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// consume all but one fuel</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// confirm that one fuel remains</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// try to add fuel to get to 11 more fuel</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- this assertion will fail since the store says it has 1 fuel</span>\n</code></pre></div>\n<p>The \"bug\" is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e31ff9dc67b6ea2cc2611307291e86fbaff548de/crates/wasmtime/src/store.rs#L1419-L1425\">here</a> where when 10 fuel is added the counters there look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1411</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1412</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">consumed_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1413</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>adj</code> is already <code>i64::MAX</code>  so <code>adj.checked_add(fuel)</code> overflows and we hit the overflow case which resets everything back to its prior value. </p>\n<p>Unfortunately I don't think that this is fixable with the current APIs of <code>Store</code>. Currently <code>Store::consumed_fuel</code> will report how much fuel has been consumed for the entire lifetime of the store which requires keeping the <code>fuel_adj</code> counter around, meaning that we can't actually represent consuming <code>u64::MAX</code> fuel since the <code>fuel_adj</code> is an <code>i64</code>. </p>\n<p>I don't know how to best fix this myself, but we have some fuzz targets using this pattern and suffering from it so we'll need to fix them.</p>\n</blockquote>",
        "id": 289467978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657722803
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>Currently the following test will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// fuel wraps to i64 so the store has i64::MAX fuel now</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// consume all but one fuel</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// confirm that one fuel remains</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// try to add fuel to get to 11 more fuel</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- this assertion will fail since the store says it has 1 fuel</span>\n</code></pre></div>\n<p>The \"bug\" is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e31ff9dc67b6ea2cc2611307291e86fbaff548de/crates/wasmtime/src/store.rs#L1419-L1425\">here</a> where when 10 fuel is added the counters there look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1411</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1412</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">consumed_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1413</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>adj</code> is already <code>i64::MAX</code>  so <code>adj.checked_add(fuel)</code> overflows and we hit the overflow case which resets everything back to its prior value. </p>\n<p>Unfortunately I don't think that this is fixable with the current APIs of <code>Store</code>. Currently <code>Store::consumed_fuel</code> will report how much fuel has been consumed for the entire lifetime of the store which requires keeping the <code>fuel_adj</code> counter around, meaning that we can't actually represent consuming <code>u64::MAX</code> fuel since the <code>fuel_adj</code> is an <code>i64</code>. </p>\n<p>I don't know how to best fix this myself, but we have some fuzz targets using this pattern and suffering from it so we'll need to fix them.</p>\n</blockquote>",
        "id": 289467994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657722809
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439#issuecomment-1183304453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 289468174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657722863
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439#issuecomment-1185849553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>Rather than resetting on overflow, what if we set to <code>MAX - 1</code>? or just <code>MAX</code> itself?</p>\n</blockquote>",
        "id": 289773780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657913941
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439#issuecomment-1185861862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>The main problem is the <code>Store::consumed_fuel</code> API. We can reset counters but then that function isn't correct any more since it's moreso fuel consumed since the last call to <code>add_fuel</code>. That's perhaps not the worst interpretation of the API and would indeed allow fixing this issue.</p>\n</blockquote>",
        "id": 289775562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657914909
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>Currently the following test will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// fuel wraps to i64 so the store has i64::MAX fuel now</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// consume all but one fuel</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// confirm that one fuel remains</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// try to add fuel to get to 11 more fuel</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">add_fuel</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">consume_fuel</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-- this assertion will fail since the store says it has 1 fuel</span>\n</code></pre></div>\n<p>The \"bug\" is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e31ff9dc67b6ea2cc2611307291e86fbaff548de/crates/wasmtime/src/store.rs#L1419-L1425\">here</a> where when 10 fuel is added the counters there look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1411</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1412</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">consumed_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1413</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fuel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n</code></pre></div>\n<p>where <code>adj</code> is already <code>i64::MAX</code>  so <code>adj.checked_add(fuel)</code> overflows and we hit the overflow case which resets everything back to its prior value. </p>\n<p>Unfortunately I don't think that this is fixable with the current APIs of <code>Store</code>. Currently <code>Store::consumed_fuel</code> will report how much fuel has been consumed for the entire lifetime of the store which requires keeping the <code>fuel_adj</code> counter around, meaning that we can't actually represent consuming <code>u64::MAX</code> fuel since the <code>fuel_adj</code> is an <code>i64</code>. </p>\n<p>I don't know how to best fix this myself, but we have some fuzz targets using this pattern and suffering from it so we'll need to fix them.</p>\n</blockquote>",
        "id": 428030136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710976105
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439#issuecomment-2010868531\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4439\">issue #4439</a>:</p>\n<blockquote>\n<p>I believe this is now fixed now that <code>consume_fuel</code> is gone.</p>\n</blockquote>",
        "id": 428030139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710976106
    }
]