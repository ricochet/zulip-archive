[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102#issuecomment-932580568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102\">issue #1102</a>:</p>\n<blockquote>\n<p>Is this still a problem with the new x64 backend?</p>\n</blockquote>",
        "id": 255808687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633122959
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102#issuecomment-932592757\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102\">issue #1102</a>:</p>\n<blockquote>\n<p>I'm not sure if this would use <code>cmov</code> today (it should if the CLIF uses a <code>select</code> op) but the branches should be reasonable (like llvm and gcc) now due to <code>MachBuffer</code>'s simplification pass.</p>\n</blockquote>",
        "id": 255811330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633124449
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102\">issue #1102</a>:</p>\n<blockquote>\n<p>I thought I'd look into codegen. Consider the following test of a simple branch, where compilers were asked to generate the best code:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">five</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>LLVM generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">five</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\">                </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x6</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">3</span>:   <span class=\"nc\">b8</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x5</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">c7</span><span class=\"w\">                </span><span class=\"n\">cmovl</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>GCC generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">five</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">f8</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">2</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\">                </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x6</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">5</span>:   <span class=\"nc\">ba</span><span class=\"w\"> </span><span class=\"mi\">08</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">a</span>:   <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\">                </span><span class=\"n\">cmovge</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And Cranelift generates (via clang-compiled wasm):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">b8</span><span class=\"w\"> </span><span class=\"mi\">08</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">9</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\">                </span><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"mi\">7</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\">                   </span><span class=\"n\">jg</span><span class=\"w\">  </span><span class=\"mh\">0x12</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">e</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">f8</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"nc\">eb</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\">                   </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"mh\">0x14</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">12</span>:   <span class=\"nc\">eb</span><span class=\"w\"> </span><span class=\"n\">fc</span><span class=\"w\">                   </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"mh\">0x10</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">15</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There are some obvious things to fix up:</p>\n<ul>\n<li>[ ] Constructing/destructing stack frames can be skipped if the stack is unused.</li>\n<li>[x] <code>0xc</code> jumps conditionally to <code>0x12</code>, which is an unconditional jump to <code>0x10</code>, which is an unconditional jump to <code>0x14</code>, which is an unconditional jump to the end of the function.</li>\n<li>[ ] Simple branches can be folded into <code>cmov</code> on x86. In this case we have <code>cmp</code>..<code>jg</code>..<code>mov</code>..<code>jmp</code> which is exactly what a <code>cmov</code> does.</li>\n</ul>\n</blockquote>",
        "id": 255811332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633124449
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102#issuecomment-932595332\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1102\">issue #1102</a>:</p>\n<blockquote>\n<p>The first item is covered by #1148.</p>\n</blockquote>",
        "id": 255812059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633124799
    }
]