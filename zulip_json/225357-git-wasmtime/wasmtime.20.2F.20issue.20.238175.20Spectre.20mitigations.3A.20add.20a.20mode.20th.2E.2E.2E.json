[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>In discussion today with @fitzgen, @jameysharp, @elliottt and @lpereira, we were considering the idea to <a href=\"https://arxiv.org/abs/2110.04751\">dynamically monitor branch mispredictions</a> and isolate execution of any Wasm instance that had used up a \"misspeculation quota\". I realized that actually what we could do is (effectively) turn off speculation -- you run out, you can't use it anymore! -- by dynamically inserting <code>lfence</code>s.</p>\n<p>Specifically: the (one?) neat thing about fully coherent icaches on x86 is that we can switch out the code that's running, on the fly, even if other threads are in the middle of functions we're switching out, <em>as long as we're very careful to do it atomically</em> (state between any two stores is valid code).</p>\n<p>Consider the case where we want an <code>lfence</code> before every indirect branch (say; or before every branch; orthogonal detail) and we have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">compute</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">br_table</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span><span class=\"p\">.</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">space</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">lfence</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">rax</span>\n</code></pre></div>\n<p>we can replace the three bytes of <code>nop</code> (<code>0x90, 0x90, 0x90</code>) with <code>lfence</code> (<code>0x0f</code>, <code>0xae</code>, <code>0xe8</code>) if we want to \"turn off speculation\" for this module for a little bit.</p>\n<p>There are at least three ways to do that on an x86 machine (with coherent icaches):</p>\n<ul>\n<li>Do an atomic store to code memory. For this we'd need W+X mappings temporarily, and an extra <code>nop</code> to make this a 32-bit region we could overwrite with one 32-bit store.</li>\n<li>Above, but switch from R+X to R+W; take the SIGBUS from any running thread, temporarily hold, and release when we switch the mapping back (via a futex?).</li>\n<li>The one I like best: keep another version of the code segment around, and mmap it over the first.</li>\n</ul>\n<p>The last one is pretty neat: <code>mmap</code> is atomic with respect to every other thread (appears as a single store in the total store order; it must, because if other thread had it mapped, it would receive an IPI, which is a synchronizing edge). So we basically \"yank out the code ROM and replace it\" in between instructions, and the new code doesn't speculate.</p>\n<p>Using this, we can build a control loop in a separate thread that monitors mispredict counters, and can flip the switch at will for any module that has excessive counts. It doesn't have to be a one-way trapdoor: a module could have a \"mispredict quota\" per time unit, and could reset to the fast code (no <code>lfence</code>s) after a set period. There is no impact on other modules -- it only impacts the module with the mispredicts.</p>\n<p>Finally, I suspect this will be a bit harder on non-coherent-icache architectures (aarch64, riscv64), but actually maybe the \"mmap a new thing on top of running code\" is enough of a jolt to yoink all other cores into coherent happiness again. Note that I haven't tested that!</p>\n</blockquote>",
        "id": 427574134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710795729
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>In discussion today with @fitzgen, @jameysharp, @elliottt and @lpereira, we were considering the idea to <a href=\"https://arxiv.org/abs/2110.04751\">dynamically monitor branch mispredictions</a> and isolate execution of any Wasm instance that had used up a \"misspeculation quota\". I realized that actually what we could do is (effectively) turn off speculation -- you run out, you can't use it anymore! -- by dynamically inserting <code>lfence</code>s.</p>\n<p>Specifically: the (one?) neat thing about fully coherent icaches on x86 is that we can switch out the code that's running, on the fly, even if other threads are in the middle of functions we're switching out, <em>as long as we're very careful to do it atomically</em> (state between any two stores is valid code).</p>\n<p>Consider the case where we want an <code>lfence</code> before every indirect branch (say; or before every branch; orthogonal detail) and we have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">compute</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">br_table</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">space</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">lfence</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span>\n<span class=\"w\">    </span><span class=\"n\">nop</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">rax</span>\n</code></pre></div>\n<p>we can replace the three bytes of <code>nop</code> (<code>0x90, 0x90, 0x90</code>) with <code>lfence</code> (<code>0x0f</code>, <code>0xae</code>, <code>0xe8</code>) if we want to \"turn off speculation\" for this module for a little bit.</p>\n<p>There are at least three ways to do that on an x86 machine (with coherent icaches):</p>\n<ul>\n<li>Do an atomic store to code memory. For this we'd need W+X mappings temporarily, and an extra <code>nop</code> to make this a 32-bit region we could overwrite with one 32-bit store.</li>\n<li>Above, but switch from R+X to R+W; take the SIGBUS from any running thread, temporarily hold, and release when we switch the mapping back (via a futex?).</li>\n<li>The one I like best: keep another version of the code segment around, and mmap it over the first.</li>\n</ul>\n<p>The last one is pretty neat: <code>mmap</code> is atomic with respect to every other thread (appears as a single store in the total store order; it must, because if other thread had it mapped, it would receive an IPI, which is a synchronizing edge). So we basically \"yank out the code ROM and replace it\" in between instructions, and the new code doesn't speculate.</p>\n<p>Using this, we can build a control loop in a separate thread that monitors mispredict counters, and can flip the switch at will for any module that has excessive counts. It doesn't have to be a one-way trapdoor: a module could have a \"mispredict quota\" per time unit, and could reset to the fast code (no <code>lfence</code>s) after a set period. There is no impact on other modules -- it only impacts the module with the mispredicts.</p>\n<p>Finally, I suspect this will be a bit harder on non-coherent-icache architectures (aarch64, riscv64), but actually maybe the \"mmap a new thing on top of running code\" is enough of a jolt to yoink all other cores into coherent happiness again. Note that I haven't tested that!</p>\n</blockquote>",
        "id": 427574804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710795994
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2004998591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>One slight tweak: those three <code>nop</code>s need to be one 3-byte <code>nop</code> for the atomic \"store\" of the new code with re-<code>mmap</code> to work safely; otherwise RIP might be right in the middle of where the <code>lfence</code> is about to spontaneously appear.</p>\n</blockquote>",
        "id": 427575578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710796302
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2005103230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>Is a single <code>mmap</code> that spans multiple pages guaranteed to be entirely atomic?<br>\n</p>\n</blockquote>",
        "id": 427580599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710798486
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2005110598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>I think so? At the very least, in the Linux implementation, the memory-map changes are made under one lock, and one IPI is performed to other cores if needed; it'd be neat to find something in the POSIX spec either way to cite though.</p>\n</blockquote>",
        "id": 427581315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710798784
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2005162571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>Even with low amounts of mispredicted branches it would be possible to (slowly) leak data, right?</p>\n</blockquote>",
        "id": 427586426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710801160
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2005642025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>The idea is that one would set the quota according to the desired probability (leak bit-rate bound). I haven't thought too much about the control algorithm here but perhaps one puts a module in \"non-speculative mode\" for the remaining duration of any individual instance alive at the time of the heightened branch mispredict rate (one could implement this with epochs, labeling instances at startup and keeping a count of active instances in epoch N-1 and N). Or something like that.</p>\n<p>I should also note that this can be layered with existing mitigations: so e.g. any explicit bounds checks are protected already (cannot read others' heaps even in misspeculation) and this technique is mainly to address the \"indirect branches can jump anywhere and find a read gadget\" problem, which itself should have a lower effective bit-rate...</p>\n</blockquote>",
        "id": 427609769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710815865
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175#issuecomment-2005901697\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8175\">issue #8175</a>:</p>\n<blockquote>\n<p>I just experimented a bit with this idea by writing a little program that mmaps two assembly routines over the top of each other -- identical except for LFENCE's vs. 3-byte NOP's -- while running, and observing the effective timing difference. (The second thread can actually mmap back and forth with different duty cycles and one can observe that smoothly changing the runtime by altering how much speculation occurs -- a very weird sort of PWM.) <a href=\"https://gist.github.com/cfallin/ea989ef69515864306ebbba06e935732\">Here</a> is the gist. Note that this doesn't verify the page-crossing behavior (the little snippet lives on one page), it just shows that the remap-it-live action does work.</p>\n</blockquote>",
        "id": 427627404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710829528
    }
]