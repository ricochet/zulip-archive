[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[ ] <code>float_add</code></li>\n<li>[ ] <code>float_sub</code></li>\n<li>[ ] <code>float_mul</code></li>\n<li>[ ] <code>float_div</code></li>\n<li>[ ] <code>float_min</code></li>\n<li>[ ] <code>float_max</code></li>\n<li>[ ] <code>float_copysign</code></li>\n<li>[ ] <code>float_neg</code></li>\n<li>[ ] <code>float_abs</code></li>\n<li>[ ] <code>float_round</code></li>\n<li>[ ] <code>float_sqrt</code></li>\n<li>[ ] <code>and</code></li>\n<li>[ ] <code>or</code></li>\n<li>[ ] <code>xor</code></li>\n<li>[ ] <code>shift</code></li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code></li>\n<li>[ ] <code>cmp_with_set</code></li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 432538375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712765194
    },
    {
        "content": "<p><a href=\"https://github.com/saulecabrera\">saulecabrera</a> added the winch label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">Issue #8321</a>.</p>",
        "id": 432538389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712765199
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321#issuecomment-2047943344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 432538496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712765239
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[ ] <code>float_copysign</code></li>\n<li>[ ] <code>float_neg</code></li>\n<li>[ ] <code>float_abs</code></li>\n<li>[ ] <code>float_round</code></li>\n<li>[ ] <code>float_sqrt</code></li>\n<li>[ ] <code>and</code></li>\n<li>[ ] <code>or</code></li>\n<li>[ ] <code>xor</code></li>\n<li>[ ] <code>shift</code></li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code></li>\n<li>[ ] <code>cmp_with_set</code></li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 433318806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194273
    },
    {
        "content": "<p>lpereira <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321#issuecomment-2064739217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Sorry for looking at this only now -- but I should have some of these instructions implemented soon.  I've been caught up with other things but want to resume work on this ASAP.</p>\n</blockquote>",
        "id": 434211212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713462686
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321#issuecomment-2064757545\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>@lpereira to prevent accidental duplication of work and to help minimize conflicts and the need for rebases, could you edit the OP issue to add your name next to the instructions you're currently working on implementing? Thanks!</p>\n</blockquote>",
        "id": 434212062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713463021
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[ ] <code>float_copysign</code></li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[ ] <code>and</code></li>\n<li>[ ] <code>or</code></li>\n<li>[ ] <code>xor</code></li>\n<li>[ ] <code>shift</code></li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code></li>\n<li>[ ] <code>cmp_with_set</code></li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 434975162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713875944
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[ ] <code>and</code></li>\n<li>[ ] <code>or</code></li>\n<li>[ ] <code>xor</code></li>\n<li>[ ] <code>shift</code></li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code></li>\n<li>[ ] <code>cmp_with_set</code></li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 436276038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714484926
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code></li>\n<li>[ ] <code>cmp_with_set</code></li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 452631214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721412115
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[ ] <code>cmp</code> @vulc41n </li>\n<li>[ ] <code>cmp_with_set</code> @vulc41n </li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 453669674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721821385
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> @vulc41n </li>\n<li>[x] <code>cmp_with_set</code> @vulc41n </li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 454485319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722094266
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> @vulc41n </li>\n<li>[x] <code>cmp_with_set</code> @vulc41n </li>\n<li>[ ] <code>clz</code></li>\n<li>[ ] <code>ctz</code></li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 454485321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722094267
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[ ] <code>clz</code> (@vulc41n)</li>\n<li>[ ] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 454955857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722289272
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[ ] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 454955869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722289276
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code></li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code></li>\n<li>[ ] <code>jmp</code></li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 454955877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722289279
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code> (@vulc41n)</li>\n<li>[ ] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 455143763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722351193
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code> (@vulc41n)</li>\n<li>[ ] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code></li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 455147123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722352141
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[ ] <code>branch</code> (@vulc41n)</li>\n<li>[ ] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 457136055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723044292
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[ ] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 457136078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723044297
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[ ] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 457136084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723044298
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code></li>\n<li>[ ] <code>wasm_load</code></li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 457136103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723044300
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[ ] <code>wasm_store</code> (@vulc41n)</li>\n<li>[ ] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 457136327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723044358
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[ ] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462086584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723548287
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code></li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code></li>\n<li>[ ] <code>promote</code></li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code></li>\n<li>[ ] <code>extend</code></li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462086592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723548289
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[ ] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[ ] <code>demote</code> (@vulc41n)</li>\n<li>[ ] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code> (@vulc41n)</li>\n<li>[ ] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558181
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[ ] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code> (@vulc41n)</li>\n<li>[ ] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558186
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code> (@vulc41n)</li>\n<li>[ ] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558188
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[ ] <code>wrap</code> (@vulc41n)</li>\n<li>[ ] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558189
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[ ] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558190
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code></li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code></li>\n<li>[ ] <code>trapz</code></li>\n<li>[ ] <code>trapif</code></li>\n</ul>\n</blockquote>",
        "id": 462125098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723558194
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 462312911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723630814
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code></li>\n<li>[ ] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 469504781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726087891
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code></li>\n<li>[x] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[ ] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 469504785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726087892
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code></li>\n<li>[x] <code>address_at_sp</code></li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code></li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 469504837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726087916
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[ ] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 469505005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726088004
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code></li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 470602826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726493078
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 470602864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726493086
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code></li>\n<li>[ ] <code>checked_uadd</code></li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 470603521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726493203
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[ ] <code>trap</code> (@vulc41n)</li>\n<li>[ ] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 470603750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726493258
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[ ] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 474888350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728070187
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[ ] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 474888355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728070189
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 474888365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728070190
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[ ] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 474888369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728070192
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[ ] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 474888410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728070201
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code></li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@saulecabrera)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 479660785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730287594
    },
    {
        "content": "<p>saulecabrera assigned saulecabrera to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>.</p>",
        "id": 480803340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730842352
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[ ] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486359148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733419865
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[ ] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486541684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733499879
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code></li>\n<li>[ ] <code>rem</code></li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486541701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733499888
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code></li>\n<li>[ ] <code>reinterpret_int_as_float</code></li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486549778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733502189
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[ ] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[ ] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486815936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733703230
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[ ] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[ ] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 486974509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733744916
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 487104913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733780489
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code></li>\n<li>[ ] <code>unsigned_convert</code></li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 487104916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733780489
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>signed_convert</code> (@minirop)</li>\n<li>[ ] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 487318879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733856178
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 488128106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733931588
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[ ] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 488128107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733931588
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[ ] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 488128129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733931596
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[ ] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 488137083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733934127
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[ ] Support for <code>V128</code></li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[x] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 488170542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733945129
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[x] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code></li>\n<li>[ ] <code>unsigned_truncate</code> </li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 490059904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734647548
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[x] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[ ] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[ ] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 490061017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734648161
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[x] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[x] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[ ] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 491984409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736098758
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">issue #8321</a>:</p>\n<blockquote>\n<p>Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation.</p>\n<p>If you're interested in taking on any of the elements below, please add your name beside it to signal that you're actively working on it (if you don't have permission to edit this issue, feel free to reach out via Zulip).</p>\n<ul>\n<li>[ ] Stack checks ( <code>check_stack</code>) (@saulecabrera)</li>\n<li>[x] <code>address_from_sp</code> (@vulc41n)</li>\n<li>[x] <code>address_at_sp</code>(@vulc41n)</li>\n<li>[x] <code>address_at_vmctx</code> (@MarinPostma)</li>\n<li>[x] <code>wasm_store</code> (@vulc41n)</li>\n<li>[x] <code>wasm_load</code> (@vulc41n)</li>\n<li>[x] <code>call</code> (@MarinPostma)</li>\n<li>[x] <code>load_ptr</code></li>\n<li>[x] <code>load_addr</code></li>\n<li>[x] <code>pop</code> (@vulc41n)</li>\n<li>[x] <code>cmov</code> (@vulc41n)</li>\n<li>[x] <code>checked_uadd</code> (@vulc41n)</li>\n<li>[x] <code>float_add</code> (@evacchi)</li>\n<li>[x] <code>float_sub</code>(@evacchi)</li>\n<li>[x] <code>float_mul</code>(@evacchi)</li>\n<li>[x] <code>float_div</code>(@evacchi)</li>\n<li>[x] <code>float_min</code>(@evacchi)</li>\n<li>[x] <code>float_max</code>(@evacchi)</li>\n<li>[x] <code>float_copysign</code> (@evacchi)</li>\n<li>[x] <code>float_neg</code> (@evacchi)</li>\n<li>[x] <code>float_abs</code> (@evacchi)</li>\n<li>[x] <code>float_round</code>(@evacchi)</li>\n<li>[x] <code>float_sqrt</code>(@evacchi)</li>\n<li>[x] <code>and</code>(@evacchi)</li>\n<li>[x] <code>or</code>(@evacchi)</li>\n<li>[x] <code>xor</code>(@evacchi)</li>\n<li>[x] <code>shift</code>(@evacchi)</li>\n<li>[x] <code>div</code> (@MarinPostma)</li>\n<li>[x] <code>rem</code> (@MarinPostma)</li>\n<li>[x] <code>zero</code> (@saulecabrera)</li>\n<li>[x] <code>popcnt</code> (@vulc41n)</li>\n<li>[x] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[x] <code>unsigned_truncate</code> (@MarinPostma)</li>\n<li>[x] <code>signed_convert</code> (@minirop)</li>\n<li>[x] <code>unsigned_convert</code> (@minirop)</li>\n<li>[x] <code>reinterpret_float_as_int</code> (@minirop)</li>\n<li>[x] <code>reinterpret_int_as_float</code> (@minirop)</li>\n<li>[x] <code>demote</code> (@vulc41n)</li>\n<li>[x] <code>promote</code> (@vulc41n)</li>\n<li>[x] <code>cmp</code> (@vulc41n) </li>\n<li>[x] <code>cmp_with_set</code> (@vulc41n)</li>\n<li>[x] <code>clz</code> (@vulc41n)</li>\n<li>[x] <code>ctz</code> (@vulc41n)</li>\n<li>[x] <code>wrap</code> (@vulc41n)</li>\n<li>[x] <code>extend</code> (@vulc41n)</li>\n<li>[x] <code>branch</code> (@vulc41n)</li>\n<li>[x] <code>jmp</code> (@vulc41n)</li>\n<li>[x] <code>unreachable</code> (@vulc41n)</li>\n<li>[x] <code>jmp_table</code> (@vulc41n)</li>\n<li>[x] <code>trap</code> (@vulc41n)</li>\n<li>[x] <code>trapz</code> (@vulc41n)</li>\n<li>[x] <code>trapif</code> (@vulc41n)</li>\n</ul>\n</blockquote>",
        "id": 491984410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736098760
    }
]