[
    {
        "content": "<p>adambratschikaye edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417189796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916327
    },
    {
        "content": "<p><strong>adambratschikaye</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a> as ready for review.</p>",
        "id": 417189872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916354
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417189876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916355
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417189877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916355
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417189878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916356
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417189879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916356
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1903609863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>With these changes I was able to get <a href=\"https://github.com/adambratschikaye/wasmtime-in-wasm\">this example</a> of performing wasmtime compilation within wasm to work. However there was one problem with is that the compilation of wasmtime to wasm32 contains a function with ~60,000 locals and <code>wasmparser</code> has a hard limit of 50,000 locals per function.</p>\n<p>So I'd like to add a test that does the compilation within wasm, but I still need to figure out how to handle that limit on locals.</p>\n</blockquote>",
        "id": 417190654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705916644
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 417194043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705917925
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1904646836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>That's awesome! I think you're perhaps the first person ever to execute a cross-compilation using Cranelift from a 32-bit architecture to a 64-bit architecture!</p>\n<p>I'll dig into this today and give a review.</p>\n</blockquote>",
        "id": 417298533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705950998
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1837188082\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for this! Reading over it, everything looks at a high level ok here, but if you're ok with it I'd like to brainstorm a bit on the internal organization here. My goal here would be to cut down on \"complexity\" (a loose term here...) which kind of translates to minimizing <code>#[cfg]</code> and other things. Some possible ideas:</p>\n<ul>\n<li>\n<p>Could the <code>runtime</code> module, at its root, have everything reexported of it's internals? My hope would be that in <code>lib.rs</code> we'd have:</p>\n<p><code>rust\n#[cfg(feature = \"runtime\")]\nmod runtime;\n#[cfg(feature = \"runtime\")]\npub use runtime::*;\n</code></p>\n<p>I think <code>cargo fmt</code> has issues with modules defined via macro expansions so moving the <code>mod runtime</code> out of a macro may benefit that niche use case.</p>\n</li>\n<li>\n<p>I think it's ok to move some more things into <code>runtime</code> that are technically agnostic like <code>limits</code>, <code>resources</code>, and <code>stack</code>.</p>\n</li>\n<li>Can you add a builder to CI to build the wasmtime crate for the wasm32-wasi target with the <code>runtime</code> feature disabled?</li>\n<li>\n<p>Splitting <code>engine.rs</code> feels not great since it's now so spread out (and requires a large struct with a bunch of <code>pub(crate)</code> which never feels great. This might be something where it may be worth some more <code>#[cfg]</code>. Do you know if a design such as this would work?</p>\n<p><code>rust\nimpl Engine { /* common methods */ }\n#[cfg(feature = \"runtime\")] \nimpl Engine { /* runtime methods */ }\n#[cfg(feature = \"compile\")] \nimpl Engine { /* compilation methods */ }\n</code></p>\n<p>that might help keep everything in a single file, albeit there'd probably be a lot of <code>#[cfg]</code> related to <code>use</code> directives at the top of the file perhaps.</p>\n</li>\n<li>\n<p>Do you think it would make sense to have a top level <code>mod compile;</code> with all compilation-related bits under that? Right now it's sort of spread out at the root it seems.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417302163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705952296
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1837188082\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for this! Reading over it, everything looks at a high level ok here, but if you're ok with it I'd like to brainstorm a bit on the internal organization here. My goal here would be to cut down on \"complexity\" (a loose term here...) which kind of translates to minimizing <code>#[cfg]</code> and other things. Some possible ideas:</p>\n<ul>\n<li>\n<p>Could the <code>runtime</code> module, at its root, have everything reexported of it's internals? My hope would be that in <code>lib.rs</code> we'd have:</p>\n<p><code>rust\n#[cfg(feature = \"runtime\")]\nmod runtime;\n#[cfg(feature = \"runtime\")]\npub use runtime::*;\n</code></p>\n<p>I think <code>cargo fmt</code> has issues with modules defined via macro expansions so moving the <code>mod runtime</code> out of a macro may benefit that niche use case.</p>\n</li>\n<li>\n<p>I think it's ok to move some more things into <code>runtime</code> that are technically agnostic like <code>limits</code>, <code>resources</code>, and <code>stack</code>.</p>\n</li>\n<li>Can you add a builder to CI to build the wasmtime crate for the wasm32-wasi target with the <code>runtime</code> feature disabled?</li>\n<li>\n<p>Splitting <code>engine.rs</code> feels not great since it's now so spread out (and requires a large struct with a bunch of <code>pub(crate)</code> which never feels great. This might be something where it may be worth some more <code>#[cfg]</code>. Do you know if a design such as this would work?</p>\n<p><code>rust\nimpl Engine { /* common methods */ }\n#[cfg(feature = \"runtime\")] \nimpl Engine { /* runtime methods */ }\n#[cfg(feature = \"compile\")] \nimpl Engine { /* compilation methods */ }\n</code></p>\n<p>that might help keep everything in a single file, albeit there'd probably be a lot of <code>#[cfg]</code> related to <code>use</code> directives at the top of the file perhaps.</p>\n</li>\n<li>\n<p>Do you think it would make sense to have a top level <code>mod compile;</code> with all compilation-related bits under that? Right now it's sort of spread out at the root it seems.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417302164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705952296
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#discussion_r1462306270\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you add a doc-block here and above <code>runtime</code> below indicating what the feature is?</p>\n</blockquote>",
        "id": 417302165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705952296
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#discussion_r1462304758\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind throwing a comment above this indicating why it's here?</p>\n</blockquote>",
        "id": 417302166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705952296
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1904684123\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<blockquote>\n<p>So I'd like to add a test that does the compilation within wasm, but I still need to figure out how to handle that limit on locals.</p>\n</blockquote>\n<p>Can you paste an example of buliding wasmtime like this? I checked out your repo and pointed it at this branch and this passed:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>but I expected that it might otherwise fail</p>\n</blockquote>",
        "id": 417302597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705952484
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1905689112\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>Thanks, all those comments seem reasonable and I'll look into them.</p>\n</blockquote>",
        "id": 417408698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706003746
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418080124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706189619
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418090649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706192824
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418096868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706194504
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418100540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706195565
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418100541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706195565
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418101987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706195900
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418114242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706199190
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418118812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706200503
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418122237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706201518
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418127348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706202989
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418140462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706207368
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1844391137\">PR review</a>.</p>",
        "id": 418140713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706207454
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#discussion_r1466774243\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, added one.</p>\n</blockquote>",
        "id": 418140714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706207454
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1844392471\">PR review</a>.</p>",
        "id": 418140849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706207508
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#discussion_r1466775150\">PR review comment</a>:</p>\n<blockquote>\n<p>I added one for <code>runtime</code>. I think this feature isn't actually necessary - I modified the cranelift build so that if <code>all-arch</code> is enabled it doesn't complain if it can't build for the host arch.</p>\n</blockquote>",
        "id": 418140850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706207508
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1910814129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>Ok, I've made most of the suggested changes:</p>\n<blockquote>\n<ul>\n<li>Could the <code>runtime</code> module, at its root, have everything reexported of it's internals? My hope would be that in <code>lib.rs</code> we'd have:<br>\n<code>rust\n  #[cfg(feature = \"runtime\")]\n  mod runtime;\n  #[cfg(feature = \"runtime\")]\n  pub use runtime::*;\n  </code><br>\n  I think <code>cargo fmt</code> has issues with modules defined via macro expansions so moving the <code>mod runtime</code> out of a macro may benefit that niche use case.</li>\n</ul>\n</blockquote>\n<p>Yes this seems to be cleaner.</p>\n<blockquote>\n<ul>\n<li>I think it's ok to move some more things into <code>runtime</code> that are technically agnostic like <code>limits</code>, <code>resources</code>, and <code>stack</code>.</li>\n</ul>\n</blockquote>\n<p>I moved these three as well as <code>coredump</code> and <code>debug</code>.</p>\n<blockquote>\n<ul>\n<li>Can you add a builder to CI to build the wasmtime crate for the wasm32-wasi target with the <code>runtime</code> feature disabled?</li>\n</ul>\n</blockquote>\n<p>I added an extra build job in the CI (that runs on x86 linux). Hope this makes sense within the general CI setup of the project.</p>\n<blockquote>\n<ul>\n<li>Splitting <code>engine.rs</code> feels not great since it's now so spread out (and requires a large struct with a bunch of <code>pub(crate)</code> which never feels great. This might be something where it may be worth some more <code>#[cfg]</code>. Do you know if a design such as this would work?<br>\n<code>rust\n  impl Engine { /* common methods */ }\n  #[cfg(feature = \"runtime\")] \n  impl Engine { /* runtime methods */ }\n  #[cfg(feature = \"compile\")] \n  impl Engine { /* compilation methods */ }\n  </code><br>\n  that might help keep everything in a single file, albeit there'd probably be a lot of <code>#[cfg]</code> related to <code>use</code> directives at the top of the file perhaps.</li>\n</ul>\n</blockquote>\n<p>Yep this works fine, except I didn't add a <code>compile</code> feature. It would just be the same as <code>any(feature = \"cranelift\", feature = \"winch\")</code> so I just used that everywhere.</p>\n<blockquote>\n<ul>\n<li>Do you think it would make sense to have a top level <code>mod compile;</code> with all compilation-related bits under that? Right now it's sort of spread out at the root it seems.</li>\n</ul>\n</blockquote>\n<p>I put some things that were at the top-level under the <code>compile</code> module. But there's still a bunch of compilation specific stuff under <code>cfg</code> directives in the runtime module. Many of these seem like they wouldn't make sense to move over to the <code>compile</code> because they rely on types that wouldn't be used without the <code>runtime</code> feature. For example, <code>Func::new</code> requires compilation, but I don't see how it could be used without the <code>runtime</code> feature (there are similar examples for <code>Linker</code>, <code>Module</code>, and <code>Component</code>).</p>\n</blockquote>",
        "id": 418146148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706209510
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1910833500\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can you paste an example of buliding wasmtime like this? I checked out your repo and pointed it at this branch and this passed:</p>\n<p><code>\n$ wasm-tools validate ./target/wasm32-wasi/release/wasmtime-in-wasm.wasm\n</code></p>\n<p>but I expected that it might otherwise fail</p>\n</blockquote>\n<p>Ah yep, that's working for me as well. Doing the debug build hits the limit though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span>\n\n<span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span>: <span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"mi\">35030</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">too</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"n\">locals</span>: <span class=\"nc\">locals</span><span class=\"w\"> </span><span class=\"n\">exceed</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x111420c</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Would it make sense to add that code as an example along with a CI job do the compilation in Wasm and then execute on the host system? And would you want that job to run on all hosts in the matrix?</p>\n</blockquote>",
        "id": 418148529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706210347
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1846409750\">PR review</a>:</p>\n<blockquote>\n<p>Ok thanks again for you work on this, it's all looking great to me! I've got some minor nits and things but I think it's probably best to go ahead and land this and I can follow-up myself with anything else I'd like. I'd also like to get the <code>wasmtime</code> CLI itself compiling to wasm with just the cranelift/winch features enabled, but no need to do that here either! I think there's a rebase conflict but otherwise I'm happy to throw this at the merge queue.</p>\n<blockquote>\n<p>Would it make sense to add that code as an example along with a CI job do the compilation in Wasm and then execute on the host system? And would you want that job to run on all hosts in the matrix?</p>\n</blockquote>\n<p>I think so yeah, but I'll do that as part of a follow-up to get the <code>wasmtime</code> CLI itself compiling. I tried for a bit to figure out what function was causing issues unsuccessfully, but this is also ok to work on as a follow-up.</p>\n<p>My guess is that it's a function in cranelift-codegen for lowering since that's the main source of \"big generated code\". I have yet to confirm this though.</p>\n</blockquote>",
        "id": 418338531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706297197
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1912626430\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>Ah ok so I found the function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span>: <span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"mi\">39100</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">too</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"n\">locals</span>: <span class=\"nc\">locals</span><span class=\"w\"> </span><span class=\"n\">exceed</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x12ebabe</span><span class=\"p\">)</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">skeleton</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"mi\">39100</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN4core6option19Option$LT$$RF$T$GT$</span><span class=\"mi\">6</span><span class=\"n\">cloned17h3ad039100bcc27f6E</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">11910</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN17cranelift_codegen2ir7builder11InstBuilder8f64const17h4e1391004dd942baE</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">18861</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN17cranelift_codegen4opts14generated_code20constructor_simplify17h2e155f4b5f5d37f9E</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">39100</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustfilt</span><span class=\"w\"> </span><span class=\"n\">_ZN17cranelift_codegen4opts14generated_code20constructor_simplify17h2e155f4b5f5d37f9E</span>\n<span class=\"n\">cranelift_codegen</span>::<span class=\"n\">opts</span>::<span class=\"n\">generated_code</span>::<span class=\"n\">constructor_simplify</span>\n</code></pre></div>\n<p>That corresponds to the ISLE-generated code for optimizing CLIF. I'm not personally aware of any low-hanging fruit on optimizing the output of ISLE for debug builds, so this may be a case where <code>cranelift-codegen</code> the crate needs to be optimized, even in debug builds.</p>\n</blockquote>",
        "id": 418344223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706299649
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418588573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706518399
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1914236737\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok thanks again for you work on this, it's all looking great to me! I've got some minor nits and things but I think it's probably best to go ahead and land this and I can follow-up myself with anything else I'd like. I'd also like to get the <code>wasmtime</code> CLI itself compiling to wasm with just the cranelift/winch features enabled, but no need to do that here either! I think there's a rebase conflict but otherwise I'm happy to throw this at the merge queue.</p>\n</blockquote>\n<p>I resolved the conflicts. Happy to follow up with compiling the CLI to wasm as well.</p>\n</blockquote>",
        "id": 418589086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706518567
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#pullrequestreview-1849016517\">PR review</a>.</p>",
        "id": 418666752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706543499
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1914987730\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>Ok sounds good! I don't necessarily have a concrete use case in mind but it seems like a neat way to demo how Cranelift can be compiled to wasm. I'll poke a bit more at the internals of the <code>wasmtime</code> crate and leave the CLI bits to you. </p>\n</blockquote>",
        "id": 418666952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706543554
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>.</p>",
        "id": 418674571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706545673
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766#issuecomment-1915708898\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7766\">PR #7766</a>:</p>\n<blockquote>\n<p>I was curious to play around with this and went a bit far down the rabbit hole! I was able to hack things up and get things working though with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7842\">https://github.com/bytecodealliance/wasmtime/pull/7842</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7844\">https://github.com/bytecodealliance/wasmtime/pull/7844</a>, however. That's perhaps a bit of a taste of how cross-compilation, especially across pointer widths, is not the most well trodden path in Wasmtime so there may be a few other lingering bugs. Mostly just something to be aware of, and I'd hope that we can start adding regression tests in CI once we've got CLI support!</p>\n</blockquote>",
        "id": 418734503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706568448
    }
]