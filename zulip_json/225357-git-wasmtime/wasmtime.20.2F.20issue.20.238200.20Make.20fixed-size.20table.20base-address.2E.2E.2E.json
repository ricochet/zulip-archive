[
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the enhancement label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8200\">Issue #8200</a>.</p>",
        "id": 428028106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710975051
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8200\">Issue #8200</a>.</p>",
        "id": 428028107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710975051
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the wasmtime label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8200\">Issue #8200</a>.</p>",
        "id": 428028108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710975051
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8200\">issue #8200</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a WebAssembly table is declared with a maximum size that equals its minimum size, we should be able to GVN the table's base address, and also hoist loads of the base address out of loops.</p>\n<h4>Benefit</h4>\n<p>Any time there is a sequence of table accesses (<code>table.get</code>, <code>table.set</code>, <code>call_indirect</code>) or a loop of such, this would allow us to remove all the base-address loads after the first one, as well as subsequent address computations for instructions which access the same table element.</p>\n<h4>Implementation</h4>\n<p>The egraph pass will optimize this for us as long as we add the <code>readonly</code> flag to those loads, but that's only safe if we know that the storage for the table won't be reallocated. We can be sure of that if the table can't grow because its size is fixed.</p>\n<h4>Alternatives</h4>\n<p>No alternatives besides keeping things as they are.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 428028111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710975052
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8200\">issue #8200</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a WebAssembly table is declared with a maximum size that equals its minimum size, we should be able to GVN the table's base address, and also hoist loads of the base address out of loops.</p>\n<h4>Benefit</h4>\n<p>Any time there is a sequence of table accesses (<code>table.get</code>, <code>table.set</code>, <code>call_indirect</code>) or a loop of such, this would allow us to remove all the base-address loads after the first one, as well as subsequent address computations for instructions which access the same table element.</p>\n<h4>Implementation</h4>\n<p>The egraph pass will optimize this for us as long as we add the <code>readonly</code> flag to those loads, but that's only safe if we know that the storage for the table won't be reallocated. We can be sure of that if the table can't grow because its size is fixed.</p>\n<h4>Alternatives</h4>\n<p>No alternatives besides keeping things as they are.</p>\n<p>cc: @cfallin</p>\n</blockquote>",
        "id": 429541027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711418231
    }
]