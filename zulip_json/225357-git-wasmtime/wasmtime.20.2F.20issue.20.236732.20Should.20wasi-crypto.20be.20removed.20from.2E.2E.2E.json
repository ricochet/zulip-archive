[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>I have personally run into a number of issues over the past few years dealing with wasi-crypto in-tree and I've gotten to the point that I would like to pose the question of whether we should remove it from this repository. </p>\n<p>Support for wasi-crypto was added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2597\">early 2021</a> and it was updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3437\">later that year in October</a>, but since then it has received no updates in-tree. There was an <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4612\">abandoned update</a> from a year later which was followed up with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5271\">a currently open PR</a> which is blocked on vetting the dependency updates. In terms of vetting the dependency tree of <code>wasi-crypto</code> represents 1.5M lines of code to audit out of Wasmtime's total 5.5M lines to audit (minus v8). This is one of Wasmtime's heaviest dependencies at nearly 30% of the entire audit backlog (minus v8).</p>\n<p>Currently wasi-crypto is behind both a compile-time Cargo feature gate (<code>features = [\"wasi-crypto\"]</code>) as well as a runtime feature gate (<code>--wasi-modules=experimental-wasi-crypto</code>). The <code>wasi-crypto</code> crate compiles for some CI platforms but does not compile for AArch64 platforms or MinGW for example. This is handled by our <code>ci/run-tests.sh</code> script explicitly skipping <code>wasi-crypto</code> tests.</p>\n<p>I believe the original purpose for adding this to Wasmtime was to provide a testing ground for the APIs and enable users to more easily enable it and test with it. I'm not sure to what extent this has happened or to what degree the implementation here in Wasmtime has informed development of the upstream proposal. If others could help fill in info on this it'd be much appreciated.</p>\n<p>One thing I have noticed poking around historically in wasi-crypto is that it noticeably contains <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8cc38bbe638ce4043cebf1aa720da05c9bc76a3/crates/wasi-crypto/src/wiggle_interfaces/common.rs#L48-L55\">an transmute of guest-owned memory into a <code>&amp;'static mut [u8]</code> type</a>. This does not appear to cause any issues today since it appears that function either always bottoms out in an error or it's stored into an <code>Arc&lt;Mutex&lt;...&gt;&gt;</code> but never read. Despite this though it at least personally worries me not only because it's very easy to get <code>&amp;'static mut T</code> wrong but there are no comments indicating why this is done or what the purpose is (there are actually only 16 lines of comments in the 6kloc making up wasi-crypto and its hostcall implementation). Personally one concern I would have about this is that it seems much of the wasi-crypto code is largely un-reviewed and not necessarily up to the quality standards of the rest of Wasmtime.</p>\n<p>Personally I'm also not actually sure if there are any maintainers of the wasi-crypto code in Wasmtime. I don't believe any of the typical active Wasmtime contributors consider themselves maintainers, but I would otherwise assume that @jedisct1 is the maintainer as he's been the source of the major contributions so far. I'm not sure if it's ever been made official though (not that we have a great place to officially document this), but @jedisct1 do you want to be the official maintainer of wasi-crypto in Wasmtime? I haven't been able to tell historical as I haven't heard back from you on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">other changes</a> and the <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5271\">current issues with vetting</a> haven't had much further discussion as well.</p>\n<p>All that said, my current personal leaning is that these issues lead me to concluding we should remove wasi-crypto from the tree for now:</p>\n<ul>\n<li>So far there has not been an active maintainer for wasi-crypto. The wasi-crypto proposal <a href=\"https://github.com/webassembly/wasi-crypto\">had many updates in the past years</a> but the support in Wasmtime has stagnated. It feels like the code was added to Wasmtime but then effectively left in largely the original state so I'm not sure how much testing/experience has been gained.</li>\n<li>Personally I have reservations about the code quality of the implementation (e.g. the <code>transmute</code> above and lack of comments in general). I have not personally tested the code myself though or tried to run programs.</li>\n<li>The wasi-crypto crate brings in a very large tree of dependencies (1.5M+ lines of code) to audit, review, and ideally maintain. This makes it I think one of the larger of the WASI proposals, especially relative to the amount of review we're giving it.</li>\n</ul>\n<p>I also don't want to jump to any conclusions though. If an active maintainer comes on, we get active review of existing and new code, and the dependency tree is perhaps slimmed down then I think it's reasonable to continue to keep wasi-crypto in-tree. I still think there's a huge amount of value in having something built-in for testing, and if users have been actively evaluating Wasmtime's support for wasi-crypto to help development of the upstream proposal that would be great to know.</p>\n</blockquote>",
        "id": 375422850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689383557
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1636793923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>The <code>wasi-crypto</code> crate itself keeps being updated. The <code>wasmtime</code> integration, OTOH, is currently difficult to maintain and test.</p>\n<p>Having the entire implementation outside of <code>wasmtime</code> could indeed be better, especially to iterate quickly.</p>\n<p><code>wasmedge</code> supports plugins, that can be updated independently from the runtime. This includes a plugin for <code>wasi-crypto</code>. Having the ability for <code>wasmtime</code> to do the same may be the solution.</p>\n</blockquote>",
        "id": 375569658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689433173
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1636845995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p><code>wasi-crypto</code> itself <a href=\"https://github.com/WebAssembly/wasi-crypto/blob/61a48ae2f96c0499416d34ad12bb4b3e727cfed0/implementations/hostcalls/rust/Cargo.toml#L14-L38\">doesn't have a lot of dependencies</a>, and there's nothing uncommon here. Unfortunately, there's no crypto in the Rust standard library.</p>\n<p>Something we can do, though, is remove most of the Rust implementations, and replace them with calls to BoringSSL.</p>\n<p>That <code>wasi-crypto</code> implementation would just be an interface to a well-known library that is easy to vet. And the number of indirect dependencies would be drastically reduced. Would that help to keep it as an option in <code>wasmtime</code>?<br>\n</p>\n</blockquote>",
        "id": 375606605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689444409
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1636882482\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<blockquote>\n<p>The <code>wasi-crypto</code> crate itself keeps being updated. The <code>wasmtime</code> integration, OTOH, is currently difficult to maintain and test.</p>\n</blockquote>\n<p>Can you say more about what makes the integration difficult to maintain and test? Given that wasi-crypto is pretty self-contained, ISTM that those concerns should mostly be applicable to all APIs, so it'd be great to get more details on this.</p>\n<blockquote>\n<p>Having the entire implementation outside of <code>wasmtime</code> could indeed be better, especially to iterate quickly.</p>\n<p><code>wasmedge</code> supports plugins, that can be updated independently from the runtime. This includes a plugin for <code>wasi-crypto</code>. Having the ability for <code>wasmtime</code> to do the same may be the solution.</p>\n</blockquote>\n<p>Related to the above: how do you see a plugin API helping with maintaining the integration? Regardless of where the implementation lives, if it's hard to maintain, I'm not sure a plugin API would really change much about that.</p>\n</blockquote>",
        "id": 375623717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689453535
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1637042929\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Hi Till,</p>\n<p><code>wasi-crypto</code> is a larger API than other proposals, but it is simple to follow and implement, and is very stable. There have been no breaking changes since its original design, the design is still believed to be quite future proof, and it comes with extensive documentation to write compatible implementations and libraries. </p>\n<p>These APIs provide significant security and efficiency improvements for service providers.</p>\n<p>The Rust example implementation of the hostcalls, currently maintained along with the specification, has two parts:</p>\n<ol>\n<li>A library, that provides a safe and consistent interface for the algorithms recommended in the specification. The public interface looks like a conventional Rust API, but has exactly the same structure as the wasi-crypto specification. </li>\n<li>A glue layer, that wraps functions from the library into the API expected by <code>wiggle</code> so that the library is accessible from <code>wasmtime</code>.</li>\n</ol>\n<p>The library is not meant to be only used in wasmtime. Nor even by applications compiled to webassembly. It can be used like any other Rust crate, in native code.<br>\nThis is useful for multiple reasons:</p>\n<ul>\n<li>It makes développement easier and faster. All the native profiling, testing and debugging tools can be used.</li>\n<li>Portable applications written in Rust and willing to take advantage of <code>wasi-crypto</code> when compiled to WebAssembly can also used it when compiled to native code.</li>\n<li>This is also a good way to understand how the <code>wasi-crypto</code> API works, and experiment with it. No wasm file to compile and run, nothing wrapped inside functions and macros that can be hard to debug, just include it like any Rust dependency, and test it natively.</li>\n</ul>\n<p>All the code examples in the specification use the idiomatic Rust interface from the library. Because it’s so much easier to understand, follow and test than references to WITX/WIT/WAI definitions. Yet, it’s a 1-1 map with the specification. The automatically generated rustdoc of that library is also a useful way to navigate the API. </p>\n<p>When <code>wasi-crypto</code> support for <code>wasmtime</code> was initially proposed , both parts (the library and the wiggle glue) were in the same project.</p>\n<p>That was extremely convenient. And pretty much necessary to work on a fairly large API.<br>\nIf a change was made to the library, but not in the glue, there was instantaneously a compile error. If a function was not wrapped in the glue, there was instantaneously a “warning: unused function” warning. If the glue didn’t match the <code>witx</code> definitions, there was immediately a compile error.</p>\n<p>As the API was designed and implemented, working on three things simultaneously was required (<code>witx</code>, library, glue). Having them all in the same project, checked on save by VSCode, gave quick feedback and ensured that everything was consistent.</p>\n<p><code>wasmtime</code> integration was also simple: there was a single <code>wasi-crypto</code> dependency to add, no other code to include. Very minimal changes to <code>wasmtime</code> and no submodules to add (the <code>wasi-crypto</code> glue had a function to export its own <code>witx</code> interface).</p>\n<p>Then, it was requested to split the library and wasmtime glue into different crates, and add a copy of the specification only to access the <code>witx</code> definitions. This is what was done, and how optional support was merged to <code>wasmtime</code>.</p>\n<p>That instantaneously made maintenance far more complicated. Every change to the API now has to be done in different places. We need to make sure that the submodules with the <code>witx</code> definition is up to date in wasmtime. Changes have to be made in different projects. There’s no instant feedback any more when developing and testing the changes.</p>\n<p>It also requires working on a <code>wasmtime</code> fork, that has these changes. And until these changes are picked up upstream, it’s not possible to update the library. But because the library is meant to always be in sync with the specification, this is also blocking updates to the specification. And because <code>wasmtime</code> needs the specification as a submodules, there’s also kind of a cycle.</p>\n<p>Contributing, and, more importantly, updating and maintaining support of WASI proposals in <code>wasmtime</code> currently feels way more complicated than other runtimes.</p>\n<p>A plugin system would solve pretty much all these issues. Implementations and maintenance of WASI proposals would be way easier.</p>\n<p>With a plugin system:</p>\n<ul>\n<li>Proposals can be implemented without having to maintain <code>wasmtime</code> forks with uncommitted changes. A standard <code>wasmtime</code> release is enough.</li>\n<li>Implementations can keep all the moving parts that being are working on simultaneously at the same place, in the same project.</li>\n<li>No additional dependencies are added to <code>wasmtime</code>, so there won’t be version conflicts.</li>\n<li>Plug-ins can have different policies than the runtimes they are used with.</li>\n<li>Plug-ins can have their own release cycle.</li>\n<li>Plug-ins can be written in languages different than the runtime.</li>\n<li>Less compile-time flags in <code>wasmtime</code>, no need for multiple pre-compiled binaries.</li>\n<li>Applications can choose to use an older version of the plugin with a newer version of <code>wasmtime</code> or the other way round, if only for compliance reasons.</li>\n<li>Ideally, plug-ins could be used by other runtimes, which would help a lot with adoption</li>\n<li>Applications can chooose between multiple implementations or compilation options of a plug-in. For a large API such as <code>wasi-crypto</code>, some users may want to compile only a subset of it, or enable site-specific extensions. Such flexibility wouldn’t be easy to add as compilation flags in <code>wasmtime</code>.</li>\n</ul>\n</blockquote>",
        "id": 375716407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689502063
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1637046018\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Wasmedge plugins: <a href=\"https://wasmedge.org/docs/contribute/plugin/intro/\">https://wasmedge.org/docs/contribute/plugin/intro/</a></p>\n<p>They are shared libraries, distributed and developed independently from the runtime. </p>\n<p>For example, that allows them to ship support for <code>wasi-nn</code> with multiple backends. Users still download a single runtime and the plugin they need.</p>\n<p>In <code>wasmtime</code>, <code>wasi-nn</code> is limited to a single backend, and supporting other options would require more compilation flags, more dependencies, and more binaries to distribute. </p>\n</blockquote>",
        "id": 375720016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689502979
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1637120885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>(I think that last statement is slightly incorrect: since 2021, wasi-nn has supported multiple backends--https://github.com/bytecodealliance/wasmtime/pull/3174 --but the other backends have just not been upstreamed for one reason or another. But I don't think me saying this should change the general thrust of what you're saying, which I'm sympathetic to: making it easier to \"plugin\" new host functionality would be quite useful).</p>\n</blockquote>",
        "id": 375788808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689521533
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1637296967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Thank you for the very detailed explanation and context.</p>\n<p>I have some questions below that I hope will help get closer to a shared understanding of the situation.</p>\n<blockquote>\n<p>The library is not meant to be only used in wasmtime. Nor even by applications compiled to webassembly. It can be used like any other Rust crate, in native code.</p>\n</blockquote>\n<p>Based on this, it sounds like you're saying that it's actively useful for wasi-crypto to be split into two projects, instead of a single code base living inside the wasmtime project?</p>\n<blockquote>\n<p>All the code examples in the specification use the idiomatic Rust interface from the library. Because it’s so much easier to understand, follow and test than references to WITX/WIT/WAI definitions. Yet, it’s a 1-1 map with the specification. The automatically generated rustdoc of that library is also a useful way to navigate the API.</p>\n</blockquote>\n<p>That sounds really great!</p>\n<blockquote>\n<p>That instantaneously made maintenance far more complicated. Every change to the API now has to be done in different places. We need to make sure that the submodules with the <code>witx</code> definition is up to date in wasmtime. Changes have to be made in different projects. There’s no instant feedback any more when developing and testing the changes.</p>\n</blockquote>\n<p>Given the above, I'm not sure I understand what you're saying here. IIUC, development of changes to the wasi-crypto implementation should be possible without ever touching wasmtime at all, right? If so, shouldn't the integration into wasmtime boil down to</p>\n<ol>\n<li>update the submodule to the latest version of the <a href=\"https://github.com/WebAssembly/wasi-crypto\">wasi-crypto repository</a></li>\n<li>regenerate the bindings with wiggle</li>\n<li>make necessary changes to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-crypto/src/lib.rs\">crates/wasi-crypto/src/lib.rs</a>, if any</li>\n</ol>\n<p>Am I missing any steps? If yes, please let me know. If not, can you clarify what about this process would be fundamentally simpler with a plugin system?</p>\n<blockquote>\n<p>It also requires working on a <code>wasmtime</code> fork, that has these changes. And until these changes are picked up upstream, it’s not possible to update the library. But because the library is meant to always be in sync with the specification, this is also blocking updates to the specification. And because <code>wasmtime</code> needs the specification as a submodules, there’s also kind of a cycle.</p>\n</blockquote>\n<p>One thing that seems to make this a bit weirder than it otherwise would be is that the library implementation lives in the spec repo. I'm not sure that's the best setup, because it means that the spec proposal kind of assumes that this Rust implementation is _the_ implementation, and all other implementations are kind of second-class citizens. Wouldn't it be better for the spec repo to only contain the specification itself, such that all implementations are equal, and people are free to implement the spec in languages such as C/C++, Go, Zig, etc?</p>\n<p>Wasmtime would of course continue to use the Rust implementation, but it could just use it as a cargo dependency, and only use a submodule for the interface definitions. (And once the proposal is updated to wit, we can use <a href=\"https://github.com/bytecodealliance/wit-deps\">wit-deps</a> for that instead.</p>\n</blockquote>",
        "id": 375872050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689561104
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1638263347\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>One thing I think worth pointing out is that while having a plugin system would probably be nice for Wasmtime this doesn't exist today and I'm not aware of anyone working on implementing it. We have an <a href=\"https://github.com/bytecodealliance/rfcs\">RFC process</a> for anyone interested in proposing such a change, but in lieu of that I don't want to ignore the problems we're facing today in the issue description above. My guess is that a plugin system likely won't materialize for some time at the least and in the meantime I'd ideally like to resolve the maintenance issues before then.</p>\n</blockquote>",
        "id": 376044804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689604030
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1638436101\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>I've added this as an <a href=\"https://github.com/bytecodealliance/meetings/pull/119\">agenda item for Wasmtime's next meeting</a> in case there's more to talk about in the future too.</p>\n</blockquote>",
        "id": 376085153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689609764
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1638678929\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>FWIW, there is also <a href=\"https://sourcegraph.com/crates/rawbytes@v0.1.2/-/blob/src/lib.rs?L14-16\">https://sourcegraph.com/crates/rawbytes@v0.1.2/-/blob/src/lib.rs?L14-16</a> which is a dep of <code>xoodyak</code> which is a dep of <code>wasi-crytpo</code>. That function is fundamentally unsafe: it allows you to change a <code>NonZeroU32</code> into zero or make an <code>enum</code>'s discriminant value invalid, for example. That should probably be a RUSTSEC advisory. The crate's repo also no longer seems to exist, so it is unclear where to report this issue.</p>\n</blockquote>",
        "id": 376130746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689619298
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1638684003\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>While we don't support <code>.so</code> plugins at the moment, there is nothing stopping <code>wasi-crypto</code> from living in its own repo while still exposing its <code>add_to_linker</code> functionality. This allows anyone to depend on it and use it with Wasmtime without Wasmtime itself pulling it in and its dependency tree.</p>\n</blockquote>",
        "id": 376131605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689619517
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1638678929\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>FWIW, there is also <a href=\"https://sourcegraph.com/crates/rawbytes@v0.1.2/-/blob/src/lib.rs?L14-16\">https://sourcegraph.com/crates/rawbytes@v0.1.2/-/blob/src/lib.rs?L14-16</a> which is a dep of <code>xoodyak</code> which is a dep of <code>wasi-crytpo</code>. That function is fundamentally unsafe: it allows you to change a <code>NonZeroU32</code> into zero or make an <code>enum</code>'s discriminant value invalid, for example. That should probably be a RUSTSEC advisory. The crate's repo also no longer seems to exist, so it is unclear where to report this issue.</p>\n<p>Edit: luckily it doesn't seem like that unsoundness actually affects wasi-crypto or Wasmtime, and doesn't merit a Wasmtime CVE, but it is another example of the dep subtree not being up to Wasmtime's coding standards. That would never have passed review in Wasmtime.</p>\n</blockquote>",
        "id": 376132025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689619626
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1644444653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>This was discussed at today's Wasmtime meeting and I'm going to attempt to summarize the discussion and consensus here. If others have corrections please let me know!</p>\n<p>Overall the consenus was that wasi-crypto should be removed from the Wasmtime repository at this time due to issues with the size of the dependency tree and additionally the quality of the implementation (see the issues mentioned in the above comments to dep/in-tree issues). According to our <a href=\"https://docs.wasmtime.dev/stability-tiers.html\">tiers of support documentation</a> wasi-crypto is currently tier 3 which means that it can be removed at any time. Notably though wasi-crypto does not meet two key requirements of tier 3 any more which is the code quality and \"does not hinder Wasmtime's development\" requirements.</p>\n<p>We additionally discussed the implications of plugin systems and such at great length which I won't attempt to summarize in their entirety here. The main conclusion though was that irrespective of any future plans or possibilities for a plugin system there's a real problem to address today. While a plugin system might change the calculus involved here it depends on specifics, of which at this time there are none.</p>\n<p>It seemed like, however, @jedisct1 you unfortunately were not able to make the meeting. You clearly have a vested interest in wasi-crypto and the hindrance to Wasmtime's development is not of the utmost urgency, so the conclusion was to continue the discussion here for a bit as well. Pending other plans, however, the current plan would be to remove wasi-crypto from in-tree after August 5 which would mean that Wasmtime 12 would be the last release with wasi-crypto.</p>\n<hr>\n<p>We didn't talk about this specifically in the meeting today but in my opinion Wasmtime still wants to support wasi-crypto. I believe that the requirements of tier 3 need to be reestablished before reintroducing an implementation, but if those are met I'm at least personally interested in seeing the proposal re-integrated into Wasmtime.</p>\n</blockquote>",
        "id": 377083942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689879620
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1644588988\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Agreed, it would be most effective to keep the maintenance of runtime and general extensions separate.</p>\n<p>This would allow for runtimes not to be obligated to support code and APIs they're hesitant to commit to, and extensions could control their release cycles independently.</p>\n<p>Recently, we encountered a situation where the <code>rawbyte</code> indirect dependency from the <code>xoodyak</code> crate, which no longer exists in current versions of the crate nor in the current <code>wasi-crypto</code> release, posed issues due to the asynchronous nature of updates in multiple projects. The fact that updates in multiple projects can’t be atomic can create confusion and potential incompatibilities.</p>\n<p>In terms of Wasmtime support, we can merge the necessary 'glue' back into the Rust example implementation. This approach allows Rust projects to use the standard Wasmtime crate with <code>add_to_linker()</code> calls, as per existing documentation.</p>\n<p>However, this approach may not be a perfect fit for everyone using <code>libwasmtime</code> or the CLI.</p>\n<p>For <code>libwasmtime</code>, it could be viable for the <code>wasi-crypto </code>glue itself to export a function that receives a <code>wasmtime_linker_t</code> pointer and registers the crypto modules.</p>\n<p>As for the CLI, the optimal situation would be a minimal CLI app that relies solely on the public releases of the <code>wasmtime-cli</code> crate. However, since <code>wasmtime</code> version 0.10.0, the use of that crate outside of the Wasmtime workspace doesn’t appear to be supported any longer, if it ever was meant to be the case.</p>\n<p>This is not a major issue, as maintaining a Wasmtime fork and distributing binaries with enabled extensions are both feasible strategies.</p>\n</blockquote>",
        "id": 377108833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689886291
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1668336576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Wasmtime 13 has branched, so I've posted the removal of wasi-crypto to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6816\">https://github.com/bytecodealliance/wasmtime/pull/6816</a></p>\n</blockquote>",
        "id": 382716791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691430466
    },
    {
        "content": "<p>jedisct1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1668380858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Implementations from the spec repository have been moved to the <a href=\"http://wasm-crypto\">https://github.com/wasm-crypto</a> organization. Adapters for different runtimes and ABIs will now live there as well.</p>\n</blockquote>",
        "id": 382725311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691432527
    },
    {
        "content": "<p>jedisct1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732#issuecomment-1668380858\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>Implementations from the spec repository have been moved to the <a href=\"https://github.com/wasm-crypto\">wasm-crypto</a> organization. Adapters for different runtimes and ABIs will now live there as well.</p>\n</blockquote>",
        "id": 382725386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691432545
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6732\">issue #6732</a>:</p>\n<blockquote>\n<p>I have personally run into a number of issues over the past few years dealing with wasi-crypto in-tree and I've gotten to the point that I would like to pose the question of whether we should remove it from this repository. </p>\n<p>Support for wasi-crypto was added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2597\">early 2021</a> and it was updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3437\">later that year in October</a>, but since then it has received no updates in-tree. There was an <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4612\">abandoned update</a> from a year later which was followed up with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5271\">a currently open PR</a> which is blocked on vetting the dependency updates. In terms of vetting the dependency tree of <code>wasi-crypto</code> represents 1.5M lines of code to audit out of Wasmtime's total 5.5M lines to audit (minus v8). This is one of Wasmtime's heaviest dependencies at nearly 30% of the entire audit backlog (minus v8).</p>\n<p>Currently wasi-crypto is behind both a compile-time Cargo feature gate (<code>features = [\"wasi-crypto\"]</code>) as well as a runtime feature gate (<code>--wasi-modules=experimental-wasi-crypto</code>). The <code>wasi-crypto</code> crate compiles for some CI platforms but does not compile for AArch64 platforms or MinGW for example. This is handled by our <code>ci/run-tests.sh</code> script explicitly skipping <code>wasi-crypto</code> tests.</p>\n<p>I believe the original purpose for adding this to Wasmtime was to provide a testing ground for the APIs and enable users to more easily enable it and test with it. I'm not sure to what extent this has happened or to what degree the implementation here in Wasmtime has informed development of the upstream proposal. If others could help fill in info on this it'd be much appreciated.</p>\n<p>One thing I have noticed poking around historically in wasi-crypto is that it noticeably contains <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8cc38bbe638ce4043cebf1aa720da05c9bc76a3/crates/wasi-crypto/src/wiggle_interfaces/common.rs#L48-L55\">an transmute of guest-owned memory into a <code>&amp;'static mut [u8]</code> type</a>. This does not appear to cause any issues today since it appears that function either always bottoms out in an error or it's stored into an <code>Arc&lt;Mutex&lt;...&gt;&gt;</code> but never read. Despite this though it at least personally worries me not only because it's very easy to get <code>&amp;'static mut T</code> wrong but there are no comments indicating why this is done or what the purpose is (there are actually only 16 lines of comments in the 6kloc making up wasi-crypto and its hostcall implementation). Personally one concern I would have about this is that it seems much of the wasi-crypto code is largely un-reviewed and not necessarily up to the quality standards of the rest of Wasmtime.</p>\n<p>Personally I'm also not actually sure if there are any maintainers of the wasi-crypto code in Wasmtime. I don't believe any of the typical active Wasmtime contributors consider themselves maintainers, but I would otherwise assume that @jedisct1 is the maintainer as he's been the source of the major contributions so far. I'm not sure if it's ever been made official though (not that we have a great place to officially document this), but @jedisct1 do you want to be the official maintainer of wasi-crypto in Wasmtime? I haven't been able to tell historical as I haven't heard back from you on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3726\">other changes</a> and the <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5271\">current issues with vetting</a> haven't had much further discussion as well.</p>\n<p>All that said, my current personal leaning is that these issues lead me to concluding we should remove wasi-crypto from the tree for now:</p>\n<ul>\n<li>So far there has not been an active maintainer for wasi-crypto. The wasi-crypto proposal <a href=\"https://github.com/webassembly/wasi-crypto\">had many updates in the past years</a> but the support in Wasmtime has stagnated. It feels like the code was added to Wasmtime but then effectively left in largely the original state so I'm not sure how much testing/experience has been gained.</li>\n<li>Personally I have reservations about the code quality of the implementation (e.g. the <code>transmute</code> above and lack of comments in general). I have not personally tested the code myself though or tried to run programs.</li>\n<li>The wasi-crypto crate brings in a very large tree of dependencies (1.5M+ lines of code) to audit, review, and ideally maintain. This makes it I think one of the larger of the WASI proposals, especially relative to the amount of review we're giving it.</li>\n</ul>\n<p>I also don't want to jump to any conclusions though. If an active maintainer comes on, we get active review of existing and new code, and the dependency tree is perhaps slimmed down then I think it's reasonable to continue to keep wasi-crypto in-tree. I still think there's a huge amount of value in having something built-in for testing, and if users have been actively evaluating Wasmtime's support for wasi-crypto to help development of the upstream proposal that would be great to know.</p>\n</blockquote>",
        "id": 383019242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691512899
    }
]