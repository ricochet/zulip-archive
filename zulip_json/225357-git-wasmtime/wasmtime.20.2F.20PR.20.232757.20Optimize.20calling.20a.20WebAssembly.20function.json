[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2757\">PR #2757</a> from <code>fast-call</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit implements a few optimizations, mainly inlining, that should<br>\nimprove the performance of calling a WebAssembly function. This code<br>\npath can be quite hot depending on the embedding case and we hadn't<br>\nreally put much effort into optimizing the nitty gritty.</p>\n<p>The predominant optimization here is adding <code>#[inline]</code> to trivial<br>\nfunctions so performance is improved without having to compile with LTO.<br>\nAnother optimization is to call <code>lazy_per_thread_init</code> when traps are<br>\ninitialized per-thread (when a <code>Store</code> is created) rather than each time<br>\na function is called. The next optimization is to change the unwind<br>\nreason in the <code>CallThreadState</code> to <code>MaybeUninit</code> to avoid extra checks<br>\nin the default case about whether we need to drop its variants (since in<br>\nthe happy path we never need to drop it). The final optimization is to<br>\noptimize out a few checks when <code>async</code> support is disabled for a small<br>\nspeed boost.</p>\n<p>In a small benchmark where wasmtime calls a simple wasm function my<br>\nmacOS computer dropped from 110ns to 86ns overhead, a 20% decrease. The<br>\nmacOS overhead is still largely dominated by the global lock acquisition<br>\nand hash table management for traps right now, but I suspect the Linux<br>\noverhead is much better (should be on the order of ~30 or so ns).</p>\n<p>We still have a long way to go to compete with SpiderMonkey which, in<br>\ntesting, seem to have ~6ns overhead in calling the same wasm function on<br>\nmy computer.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 231521717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616524907
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2757#pullrequestreview-618954044\">PR Review</a>.</p>",
        "id": 231522856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616525349
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2757\">PR #2757</a> from <code>fast-call</code> to <code>main</code>.</p>",
        "id": 231526506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616526709
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2757\">PR #2757</a>.</p>",
        "id": 231537580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616530959
    }
]