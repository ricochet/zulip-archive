[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268\">issue #4268</a>:</p>\n<blockquote>\n<p>In the <code>differential_v8</code> fuzz target, the oracle retrieves the first exported memory and checks that the memory contents are the same between Wasmtime and V8. To properly enable shared memory in this fuzz target, we would need to check whether the first exported memory is shared and if so:</p>\n<ul>\n<li>use <code>get_shared_memory()</code> instead of <code>get_memory()</code> in the Wasmtime API</li>\n<li>use <code>SharedArrayBuffer</code> instead of <code>ArrayBuffer</code> in the V8 API </li>\n</ul>\n</blockquote>",
        "id": 285997384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655159175
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268#issuecomment-1154526417\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268\">issue #4268</a>:</p>\n<blockquote>\n<p>As a high-level question: how are we planning to do differential checking in the presence of nondeterminism if/when our generated fuzz tests include actual spawning of multiple threads?</p>\n<p>I can see a few possibilities:</p>\n<ul>\n<li>We only ever fuzz single-threaded programs that happen to use shared memory primitives. Definitely better than nothing, but not a super-strong claim to a robust implementation on its own, I guess?</li>\n<li>We somehow try to enforce the same interleavings (nondeterministic choices in the memory model) between differential oracle and execution-under-test. Also seems difficult, implies heavy instrumentation (Valgrind-style)...</li>\n<li>We generate test programs in a way that, by construction, ensures determinism. I'm not sure exactly what this would look like but it seems like the least bad of the options: basically we have some framework/skeleton of generated program into which wasm-smith plugs arbitrary code, but the overall framework is designed to not have data races, etc (parallel loop or somesuch).</li>\n<li>Something else?</li>\n</ul>\n</blockquote>",
        "id": 285999742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655160751
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268\">issue #4268</a>:</p>\n<blockquote>\n<p>In the <code>differential_v8</code> fuzz target, the oracle retrieves the first exported memory and checks that the memory contents are the same between Wasmtime and V8. To properly enable shared memory in this fuzz target, we would need to check whether the first exported memory is shared and if so:</p>\n<ul>\n<li>use <code>get_shared_memory()</code> instead of <code>get_memory()</code> in the Wasmtime API</li>\n<li>use <code>SharedArrayBuffer</code> instead of <code>ArrayBuffer</code> in the V8 API </li>\n</ul>\n</blockquote>",
        "id": 286013602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655174079
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268#issuecomment-1155260915\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268\">issue #4268</a>:</p>\n<blockquote>\n<p>Personally I have no ideas beyond your first bullet. I don't know how to fuzz a multithreaded system for correctness really other than custom one-off programs which we can verify that \"when compiled to wasm and run this should always work.</p>\n</blockquote>",
        "id": 286079128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655216500
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268#issuecomment-1155260915\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4268\">issue #4268</a>:</p>\n<blockquote>\n<p>Personally I have no ideas beyond your first bullet. I don't know how to fuzz a multithreaded system for correctness really other than custom one-off programs which we can verify that \"when compiled to wasm and run this should always work\".</p>\n</blockquote>",
        "id": 286079140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655216508
    }
]