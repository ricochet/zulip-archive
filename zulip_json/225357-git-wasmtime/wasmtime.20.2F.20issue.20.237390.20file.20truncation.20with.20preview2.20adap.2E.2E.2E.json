[
    {
        "content": "<p><a href=\"https://github.com/yamt\">yamt</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">Issue #7390</a>.</p>",
        "id": 398866840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698401141
    },
    {
        "content": "<p>yamt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>i have a rust program which uses the <a href=\"https://docs.rs/image/latest/image/\">image</a> crate (0.24.7 if it matters)<br>\nto write png/jpg files to filesystem.<br>\ni build it for the <code>wasm32-wasi</code> target, and adapt it with the preview2 adapter,<br>\nand run it on my wasmtime-based embedder.</p>\n<p>while small image files are generated fine, it seems larger files (&gt; 4096 bytes?) are somehow corrupted.</p>\n<p>i'm using wasmtime 14.0.2.</p>\n<h3>Test Case</h3>\n<p>unfortunately i can't share my programs.</p>\n<h3>Steps to Reproduce</h3>\n<p>see above.</p>\n<h3>Expected Results</h3>\n<p>see above.</p>\n<h3>Actual Results</h3>\n<p>see above.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 14.0.2</p>\n<p>Operating system: macOS</p>\n<p>Architecture: amd64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 398866842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698401142
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782742603\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>One thing I could imagine happening is that your code sends a <code>fd_write</code> that used to be executed in full, and with the adapter only the first 4KB are written. This is a bit of a common pitfall with POSIX streams in general (see the description of the <a href=\"https://man7.org/linux/man-pages/man2/write.2.html\"><code>write</code> syscall</a>), where there's implementation defined behavior for how much to write. To ensure that everything is written, you have to call <code>fd_write</code> (or e.g. <code>fwrite</code> in C) in a loop, checking how many bytes were actually written.</p>\n<p>If that's not the issue you're running into, we'd probably need a bit more information to debug, perhaps even a reduced test case.</p>\n</blockquote>",
        "id": 398878501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698405634
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782808382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>One thing I could imagine happening is that your code sends a <code>fd_write</code> that used to be executed in full, and with the adapter only the first 4KB are written. This is a bit of a common pitfall with POSIX streams in general (see the description of the <a href=\"https://man7.org/linux/man-pages/man2/write.2.html\"><code>write</code> syscall</a>), where there's implementation defined behavior for how much to write. To ensure that everything is written, you have to call <code>fd_write</code> (or e.g. <code>fwrite</code> in C) in a loop, checking how many bytes were actually written.</p>\n</blockquote>\n<p>this is a regular file. partial success should be really exceptional. (like ENOSPC)<br>\n</p>\n</blockquote>",
        "id": 398886197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698408630
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782816482\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>On Unix partial success can also happen because of a signal (even just SIGSTOP for ctrl-z). In case of the preview2 adapter partial success will always happen when attempting to write more than 4KB. It has an internal buffer of 4KB: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi/src/preview2/preview1.rs#L92-L93\">https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi/src/preview2/preview1.rs#L92-L93</a></p>\n</blockquote>",
        "id": 398887151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698408984
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782832388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>On Unix partial success can also happen because of a signal (even just SIGSTOP for ctrl-z).</p>\n</blockquote>\n<p>is there any real platform where regular file i/o is interruptible by signals?<br>\nonly things i'm aware of is some of NFS interruptible mount implementations.<br>\n(and of course NFS is not a posix-compatible filesystem.)</p>\n<blockquote>\n<p>In case of the preview2 adapter partial success will always happen when attempting to write more than 4KB. It has an internal buffer of 4KB:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi/src/preview2/preview1.rs#L92-L93\">https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi/src/preview2/preview1.rs#L92-L93</a></p>\n</blockquote>\n<p>it sounds like a bug in the adapter.<br>\n</p>\n</blockquote>",
        "id": 398888981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698409687
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782838472\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>Found this in the write(2) man page:</p>\n<blockquote>\n<p>On  Linux,  write() (and similar system calls) will transfer at most 0x7ffff000 (2,147,479,552) bytes, returning the number of bytes actually transferred.  (This is true on both 32-bit and 64-bit systems.)</p>\n</blockquote>\n</blockquote>",
        "id": 398889692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698409956
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782892979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>Found this in the write(2) man page:</p>\n<blockquote>\n<p>On  Linux,  write() (and similar system calls) will transfer at most 0x7ffff000 (2,147,479,552) bytes, returning the number of bytes actually transferred.  (This is true on both 32-bit and 64-bit systems.)</p>\n</blockquote>\n</blockquote>\n<p>i don't complain about 0x7ffff000 bytes. but i do about 4096 bytes.</p>\n<p>the point here is that many of apps written for unix assume partial success of i/o on regular files is exceptional.<br>\nwhile you might find a strict interpretation of posix allows the behavior (i dunno)<br>\nit breaks real programs out there.<br>\n</p>\n</blockquote>",
        "id": 398896170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698412268
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782972182\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>i don't complain about 0x7ffff000 bytes. but i do about 4096 bytes.</p>\n</blockquote>\n<p>It doesn't matter at which point the cutoff is. A program which doesn't correctly handle partial success can hit it. In rust we have <code>io::Write::write_all</code> for when you actually want to write everything and use of it over <code>io::Write::write</code> is encouraged.</p>\n<blockquote>\n<p>is there any real platform where regular file i/o is interruptible by signals?</p>\n</blockquote>\n<p>Linux if you disable <code>SA_RESTART</code> I believe.</p>\n</blockquote>",
        "id": 398904885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698415338
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1782998514\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>Looking at the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi-preview1-component-adapter/src/lib.rs#L2164-L2179\">adapter code</a>, it seems like for file descriptors without the nonblocking flag, the full contents should be written.</p>\n<p>@yamt can you confirm that you're not operating on an FD with <code>FDFLAGS_NONBLOCK</code> set for some reason?</p>\n</blockquote>",
        "id": 398908015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698416333
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1783597226\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>I have reproduced this and am working on a fix.</p>\n</blockquote>",
        "id": 398978918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698447770
    },
    {
        "content": "<p>pchickey assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a> to pchickey.</p>",
        "id": 398981704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698450177
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1784443860\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>i don't complain about 0x7ffff000 bytes. but i do about 4096 bytes.</p>\n</blockquote>\n<p>It doesn't matter at which point the cutoff is.</p>\n</blockquote>\n<p>in real world, it matters.</p>\n<blockquote>\n<p>A program which doesn't correctly handle partial success can hit it. In rust we have <code>io::Write::write_all</code> for when you actually want to write everything and use of it over <code>io::Write::write</code> is encouraged.</p>\n</blockquote>\n<p>for some file types like stream-type-socket, it's a common way to handle partial success.<br>\nfor other types including regular files, it depends on applications how partial success should be handled.<br>\nnote that posix somehow guarantees i/o atomicity among threads and there are applications relies on the behaviour.</p>\n<blockquote>\n<blockquote>\n<p>is there any real platform where regular file i/o is interruptible by signals?</p>\n</blockquote>\n<p>Linux if you disable <code>SA_RESTART</code> I believe.</p>\n</blockquote>\n<p>i'm sure it was not the case when i was working on linux. (more than a decade ago)<br>\ni can't believe things like this have been changed since then. but i don't know.</p>\n</blockquote>",
        "id": 399222160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698638720
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1784446716\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looking at the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fa6fcd946b8f6d60c2d191a1b14b9399e261a76d/crates/wasi-preview1-component-adapter/src/lib.rs#L2164-L2179\">adapter code</a>, it seems like for file descriptors without the nonblocking flag, the full contents should be written.</p>\n<p>@yamt can you confirm that you're not operating on an FD with <code>FDFLAGS_NONBLOCK</code> set for some reason?</p>\n</blockquote>\n<p>sorry, it isn't an easy task for me because i'm a rust newbie and the program in question is written in rust.<br>\nit basically calls this <a href=\"https://github.com/image-rs/image/blob/01c6c9975c320e95f36e708f0ab773b207f68ed5/src/buffer.rs#L995\">save function</a> to create a file.</p>\n</blockquote>",
        "id": 399222590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698638949
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1784446994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>I have reproduced this and am working on a fix.</p>\n</blockquote>\n<p>thank you!</p>\n</blockquote>",
        "id": 399222602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698638968
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>i have a rust program which uses the <a href=\"https://docs.rs/image/latest/image/\">image</a> crate (0.24.7 if it matters)<br>\nto write png/jpg files to filesystem.<br>\ni build it for the <code>wasm32-wasi</code> target, and adapt it with the preview2 adapter,<br>\nand run it on my wasmtime-based embedder.</p>\n<p>while small image files are generated fine, it seems larger files (&gt; 4096 bytes?) are somehow corrupted.</p>\n<p>i'm using wasmtime 14.0.2.</p>\n<h3>Test Case</h3>\n<p>unfortunately i can't share my programs.</p>\n<h3>Steps to Reproduce</h3>\n<p>see above.</p>\n<h3>Expected Results</h3>\n<p>see above.</p>\n<h3>Actual Results</h3>\n<p>see above.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 14.0.2</p>\n<p>Operating system: macOS</p>\n<p>Architecture: amd64</p>\n<h3>Extra Info</h3>\n</blockquote>",
        "id": 399567040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698772224
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1787691668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<p>Thank you @yamt for the bug report, I am sorry we didn't have coverage for this pretty basic problem in our test suite but we do now.</p>\n</blockquote>",
        "id": 399572737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698774302
    },
    {
        "content": "<p>yamt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390#issuecomment-1789949130\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7390\">issue #7390</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thank you @yamt for the bug report, I am sorry we didn't have coverage for this pretty basic problem in our test suite but we do now.</p>\n</blockquote>\n<p>thank you for the quick fix. my app is now working fine with wasmtime 14.0.4.</p>\n</blockquote>",
        "id": 399836746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698891014
    }
]