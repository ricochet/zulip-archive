[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623618289\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623618289\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>I am not married to this proposal: we could instead add a pretty-printer to wrap <code>Val</code>s and print the <code>Val::V128</code> variants as either hex or converted by <code>to_le_bytes()</code>. Even better would be to figure out what the lane types of the <code>V128</code> are supposed to be and print as that. I'll close this and try one of those approaches if someone has a strong opinion (or really any opinion <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>) but this at least makes it easier to troubleshoot why tests are failing.</p>\n</blockquote>",
        "id": 196217933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588615599
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623624514\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623624514\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 196219509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588616309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623641294\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-623641294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>Oh seeing this I remember now that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/689\" title=\"https://github.com/bytecodealliance/wasmtime/pull/689\">https://github.com/bytecodealliance/wasmtime/pull/689</a> shows that we're wavering back and forth on this. That was motivated by <a href=\"https://github.com/bytecodealliance/wasmtime/commit/3d69e04659a9dade78fa80a76e69e3f1b9d1af07#r36326017\" title=\"https://github.com/bytecodealliance/wasmtime/commit/3d69e04659a9dade78fa80a76e69e3f1b9d1af07#r36326017\">https://github.com/bytecodealliance/wasmtime/commit/3d69e04659a9dade78fa80a76e69e3f1b9d1af07#r36326017</a>, so @joshtriplett would you mind helping to weigh in here?</p>\n</blockquote>",
        "id": 196224192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588618336
    },
    {
        "content": "<p>joshtriplett <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>A few different considerations:</p>\n<ul>\n<li>Does the change here impact code generation? Do we get better assembly code by shifting values out of a u128 than we get by offsetting into a slice and extracting bytes?</li>\n<li>For debugging, can we improve the debugging prints of the V128 to make it easier to see the individual components? (For instance, showing it in hex, providing <code>_</code> between each 32-bit value, etc?)</li>\n<li>How would this interact with the actual use of full <code>u128</code> values in Rust and WebAssembly?</li>\n</ul>\n</blockquote>",
        "id": 196339071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588699470
    },
    {
        "content": "<p>joshtriplett edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>A few different considerations:</p>\n<ul>\n<li>Does the change here impact code generation? Do we get better assembly code by shifting values out of a u128 than we get by offsetting into a slice and extracting bytes?</li>\n<li>For debugging, can we improve the debugging prints of the V128 to make it easier to see the individual components? (For instance, showing it in hex, providing <code>_</code> between each 32-bit value, etc?) Because looking at a <code>[u8; 16]</code> doesn't necessarily make it easy to \"see\" a <code>u32</code> or <code>u64</code> either.</li>\n<li>How would this interact with the actual use of full <code>u128</code> values in Rust and WebAssembly?</li>\n</ul>\n</blockquote>",
        "id": 196339139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588699507
    },
    {
        "content": "<p>joshtriplett edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624195142\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>A few different considerations:</p>\n<ul>\n<li>Does the change here impact code generation? Do we get better assembly code by shifting values out of a u128 than we get by offsetting into a slice and extracting bytes?</li>\n<li>For debugging, can we improve the debugging prints of the V128 to make it easier to see the individual components? (For instance, showing it in hex, providing <code>_</code> between each 32-bit value, etc?) Looking at a <code>[u8; 16]</code> doesn't necessarily make it easy to \"see\" a <code>u32</code> or <code>u64</code> either.</li>\n<li>How would this interact with the actual use of full <code>u128</code> values in Rust and WebAssembly?</li>\n</ul>\n</blockquote>",
        "id": 196339155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588699514
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624218543\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624218543\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* Does the change here impact code generation? Do we get better assembly code by shifting values out of a u128 than we get by offsetting into a slice and extracting bytes?\n</code></pre></div>\n\n\n</blockquote>\n<p>This should not impact Cranelift codegen; this is an internal detail for the boxing of values used in Wasmtime (e.g. if a user passes in a V128 from the CLI somehow it would be stored internally as either <code>[u8; 16]</code> or <code>u128</code> (depending on what we decide) for the brief time before it is passed in to the compiled code.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* For debugging, can we improve the debugging prints of the V128 to make it easier to see the individual components? (For instance, showing it in hex, providing _ between each 32-bit value, etc?) Looking at a [u8; 16] doesn&#39;t necessarily make it easy to &quot;see&quot; a u32 or u64 either.\n</code></pre></div>\n\n\n</blockquote>\n<p>I think this is actually the better long-term solution. Lazily, I didn't really want to implement this but looking into it a bit it seems like we could coerce the V128 to look like whatever the <code>V128Pattern</code> from <code>wast</code> looks like. Let me try that instead of this approach.</p>\n<blockquote>\n<p>* How would this interact with the actual use of full u128 values in Rust and WebAssembly?</p>\n</blockquote>\n<p>I don't really see how it does. It seemed to me like a very internal detail to boxed values but I could be missing something.</p>\n</blockquote>",
        "id": 196344348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588702143
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624218543\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624218543\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Does the change here impact code generation? Do we get better assembly code by shifting values out of a u128 than we get by offsetting into a slice and extracting bytes?</li>\n</ul>\n</blockquote>\n<p>This should not impact Cranelift codegen; this is an internal detail for the boxing of values used in Wasmtime (e.g. if a user passes in a V128 from the CLI somehow it would be stored internally as either <code>[u8; 16]</code> or <code>u128</code> (depending on what we decide) for the brief time before it is passed in to the compiled code.</p>\n<blockquote>\n<ul>\n<li>For debugging, can we improve the debugging prints of the V128 to make it easier to see the individual components? (For instance, showing it in hex, providing _ between each 32-bit value, etc?) Looking at a [u8; 16] doesn't necessarily make it easy to \"see\" a u32 or u64 either.</li>\n</ul>\n</blockquote>\n<p>I think this is actually the better long-term solution. Lazily, I didn't really want to implement this but looking into it a bit it seems like we could coerce the V128 to look like whatever the <code>V128Pattern</code> from <code>wast</code> looks like. Let me try that instead of this approach.</p>\n<blockquote>\n<ul>\n<li>How would this interact with the actual use of full u128 values in Rust and WebAssembly?</li>\n</ul>\n</blockquote>\n<p>I don't really see how it does. It seemed to me like a very internal detail to boxed values but I could be missing something.</p>\n</blockquote>",
        "id": 196344388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588702167
    },
    {
        "content": "<p>joshtriplett <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624874749\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-624874749\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>If this doesn't have any performance impact, I have no objection. But if the primary concern is debugging, I think it's worth trying a simple change to our debugging prints first.</p>\n</blockquote>",
        "id": 196692965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588797105
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650#issuecomment-626952997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1650\">Issue #1650</a>:</p>\n<blockquote>\n<p>Closing, see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1681\">https://github.com/bytecodealliance/wasmtime/issues/1681</a>.</p>\n</blockquote>",
        "id": 197202456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589229953
    }
]