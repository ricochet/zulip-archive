[
    {
        "content": "<p>ShuP1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210\">PR #5210</a> from <code>c-api-stdio-pipe</code> to <code>main</code>:</p>\n<blockquote>\n<p>As discussed in issue #4372 and respective issues about python and go bindings.</p>\n<p>Can replace <code>wasi_config_inherit_stdout</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6d339b6ac343326c86d1d193cee6e2db96fa0bc/examples/wasi/main.c#L79\">examples/wasi/main.c:79</a></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">wasi_config_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_config_new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">wasi_config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_stdout_reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">wasi_write_pipe_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_stdout_writer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">wasi_pipe_new</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_config_set_stdout_pipe</span><span class=\"p\">(</span><span class=\"n\">wasi_config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_context_set_wasi</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// run and delete store</span>\n<span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_read_pipe_len</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">byte_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">filled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_read_pipe_read</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Pipe:</span><span class=\"se\">\\n</span><span class=\"s\">%.*s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">filled</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_delete</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>See <a href=\"https://github.com/ShuP1/wasmtime/commit/d818f6b8153c71f94283aa0e9c258e57e795e019\">https://github.com/ShuP1/wasmtime/commit/d818f6b8153c71f94283aa0e9c258e57e795e019</a></p>\n<p>This PR replaces #5189<br>\n(cc @alexcrichton)</p>\n</blockquote>",
        "id": 308135532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667652398
    },
    {
        "content": "<p>ShuP1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210\">PR #5210</a> from <code>c-api-stdio-pipe</code> to <code>main</code>:</p>\n<blockquote>\n<p>As discussed in issue #4372 and respective issues about python and go bindings.</p>\n<p>Can replace <code>wasi_config_inherit_stdout</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6d339b6ac343326c86d1d193cee6e2db96fa0bc/examples/wasi/main.c#L79\">examples/wasi/main.c:79</a></p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">wasi_config_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_config_new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">wasi_config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_stdout_reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">wasi_write_pipe_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasi_stdout_writer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">wasi_pipe_new</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_config_set_stdout_pipe</span><span class=\"p\">(</span><span class=\"n\">wasi_config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_stdout_writer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_context_set_wasi</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// run...</span>\n<span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_read_pipe_len</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">byte_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">filled</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_read_pipe_read</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Pipe:</span><span class=\"se\">\\n</span><span class=\"s\">%.*s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">filled</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_delete</span><span class=\"p\">(</span><span class=\"n\">wasi_stdout_reader</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>See <a href=\"https://github.com/ShuP1/wasmtime/commit/d818f6b8153c71f94283aa0e9c258e57e795e019\">https://github.com/ShuP1/wasmtime/commit/d818f6b8153c71f94283aa0e9c258e57e795e019</a></p>\n<p>This PR replaces #5189<br>\n(cc @alexcrichton)</p>\n</blockquote>",
        "id": 308136438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667652830
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015580654\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's ok to use <code>void*</code> instead of <code>byte_t*</code> to be more akin to <code>read</code>/<code>write</code></p>\n</blockquote>",
        "id": 308416212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836014
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015582652\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's ok to remove this \"However ...\" clause because pipes leading to deadlock aren't necessarily unique to WASI.</p>\n</blockquote>",
        "id": 308416213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015581075\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this can be <code>&amp;mut *mut wasi_write_pipe_t</code> which should remove the need for this function to be unsafe.</p>\n</blockquote>",
        "id": 308416214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015582139\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure what this is intending to communicate? Could you clarify what this is explaining?</p>\n</blockquote>",
        "id": 308416215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1170632028\">PR review</a>.</p>",
        "id": 308416216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015585274\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure that this read/write impl are the best for WASI. As modeled today I think it would be best to implement synchronous I/O here but this is sort of a form of nonblocking I/O without the ability to be notified  when bytes are ready.</p>\n<p>Specifically <code>Read</code> will not block when the deque is empty, instead returning <code>Ok(0)</code> which many libraries actually interpret as EOF. Additionally <code>Write</code> will not block when it's full, instead returning <code>Ok(0)</code> which I think libraries take various viewpoints on.</p>\n<p>I think it would be better for <code>Read</code> to block on writing and for writing to block on <code>Read</code>.</p>\n</blockquote>",
        "id": 308416217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1170632028\">PR review</a>.</p>",
        "id": 308416218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1015579817\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this can be omitted since it doesn't do anything</p>\n</blockquote>",
        "id": 308416219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667836015
    },
    {
        "content": "<p>ShuP1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1171488643\">PR review</a>.</p>",
        "id": 308524866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667888189
    },
    {
        "content": "<p>ShuP1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016182442\">PR review comment</a>:</p>\n<blockquote>\n<p><code>std::io::Write::flush</code> has not default body. IMO to force implementers to thinks about it.</p>\n</blockquote>",
        "id": 308524868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667888189
    },
    {
        "content": "<p>ShuP1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016186729\">PR review comment</a>:</p>\n<blockquote>\n<p>Wasi fd_read (like POSIX one), returns the number of byte read.<br>\nThen the queue is empty, the returned value is zero.<br>\nEffects on programs may varies.<br>\nFor example, a c program without checks will just ignore this.<br>\nWhile rust print macro unwraps <code>std::io::Read::read_exact</code> and so panic.</p>\n<p>If you have a good way to explain that I'm taking it…</p>\n</blockquote>",
        "id": 308525393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667888668
    },
    {
        "content": "<p>ShuP1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1171494991\">PR review</a>.</p>",
        "id": 308525394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667888668
    },
    {
        "content": "<p>ShuP1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016186729\">PR review comment</a>.</p>",
        "id": 308525438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667888718
    },
    {
        "content": "<p>ShuP1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1171504784\">PR review</a>.</p>",
        "id": 308526256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667889389
    },
    {
        "content": "<p>ShuP1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016193376\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it possible to \"null check\" a <code>&amp;mut</code> since it's expected to be a valid reference ?</p>\n<p>If not, want would append if the function is given a null pointer ? UB?</p>\n<p>Or, is a function documentation enough to be confident than the function is used properly ?</p>\n</blockquote>",
        "id": 308526257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667889389
    },
    {
        "content": "<p>ShuP1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1171517159\">PR review</a>.</p>",
        "id": 308527383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667890261
    },
    {
        "content": "<p>ShuP1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016202016\">PR review comment</a>:</p>\n<blockquote>\n<p>UNIX pipe returning 0 bytes read means not more data <strong>for now</strong></p>\n<p>Synchronous IO seems be more user friendly.<br>\nBut there if not way to read all of stdin for example.<br>\nIt would just be a deadlock after the last byte.</p>\n<p>Furthermore I don't see how we can't contact the runtime to suspend the execution and run the \"writer\" instance.</p>\n</blockquote>",
        "id": 308527384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667890261
    },
    {
        "content": "<p>ShuP1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016202016\">PR review comment</a>.</p>",
        "id": 308527875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667890618
    },
    {
        "content": "<p>ShuP1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016202016\">PR review comment</a>.</p>",
        "id": 308527898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667890639
    },
    {
        "content": "<p>ShuP1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210\">PR #5210</a> from <code>c-api-stdio-pipe</code> to <code>main</code>.</p>",
        "id": 308542344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667898053
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1172346610\">PR review</a>.</p>",
        "id": 308611231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921176
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016781202\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes that makes sense but <code>VecDeque::flush</code> is a noop.</p>\n</blockquote>",
        "id": 308611235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921176
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1172350506\">PR review</a>.</p>",
        "id": 308611720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921285
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016783781\">PR review comment</a>:</p>\n<blockquote>\n<p>My point is that the <code>&amp;mut</code> layer is part of the contract of the function, it must be valid. What it points to could be invalid, hence the next layer of raw pointers.</p>\n</blockquote>",
        "id": 308611722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921285
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#pullrequestreview-1172352568\">PR review</a>.</p>",
        "id": 308611902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921347
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5210#discussion_r1016785276\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think unix pipes return 0 when there's no more data, when the write pipe is still open then it blocks waiting for more data. I think the same thing should happen here, the reader blocks until the writer has written data or the writer has been dropped.</p>\n</blockquote>",
        "id": 308611906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667921348
    }
]