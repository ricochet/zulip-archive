[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a>.</p>",
        "id": 217951415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606347353
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217951418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606347353
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a>.</p>",
        "id": 217951419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606347353
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217951990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606347948
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217952756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606348695
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217953297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606349171
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 217953575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606349499
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-538916400\">PR Review</a>.</p>",
        "id": 217954125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-538916400\">PR Review</a>.</p>",
        "id": 217954126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r530704000\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This can be tightened up a bit with <code>let payload = payload.ok()?</code> and in a few other places too</p>\n</blockquote>",
        "id": 217954127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r530704676\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does wasmi not support larger memories? Or is this to just limit how much memory we're comparing?</p>\n</blockquote>",
        "id": 217954128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r530704454\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This function may actually be best done elsewhere perhaps? It might make more sense to create a <code>wasmtime::Config</code> and use wasmtime to compile the module first, and that can do a lot of the gating here. We can disable wasm features that wasmi hasn't implemented to prevent them getting past validation.</p>\n<p>Additionally once we've got <code>wasmtime::Module</code> we can inspect the exports for what to locate.</p>\n</blockquote>",
        "id": 217954129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r530705289\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Another alternative is to configure <code>wasm_smith::Config</code> to generate only appropriate modules for running in wasmi. We could presumably add configuration options for things like \"disable this proposal\", \"memories can be at most this big\", or \"there must be a <code>main</code> function which takes no arguments\"</p>\n</blockquote>",
        "id": 217954130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606350097
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-541150602\">PR Review</a>.</p>",
        "id": 218322169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r532790520\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    if wasmi_mem.current_size().0 != wasmtime_mem.size() {\n</code></pre></div>\n<p>We have a method to get the size in pages, so no need for the manual conversion here.</p>\n</blockquote>",
        "id": 218322170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r532788492\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Out of curiosity, why can't we handle start functions?</p>\n</blockquote>",
        "id": 218322171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-541150602\">PR Review</a>.</p>",
        "id": 218322172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r532785490\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, I think <code>wasm_smith::Config</code> is the way to go here.</p>\n</blockquote>",
        "id": 218322174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r532786588\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I assume this is to limit the size of memory, since we are comparing wasmtime and wasmi memories.</p>\n<p>Again, rather than filtering generated wasm modules, we can get better throughput by only generating Wasm modules that have the shape we're looking for (via <code>wasm_smith::Config</code>).</p>\n<p>Aside: it would be good to do this memory comparison with our other differential fuzz targets as well. I had assumed it would be too slow, but now that we have <code>wasm-smith</code> and can control memory sizes, that assumption doesn't necessarily hold anymore.</p>\n</blockquote>",
        "id": 218322175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759246
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218500022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606867817
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218500886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868633
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542405504\">PR Review</a>.</p>",
        "id": 218500958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868677
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r533811737\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 218500959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868677
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542406674\">PR Review</a>.</p>",
        "id": 218501134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868843
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r533812745\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is mostly just for simplicity -- instantiate module first on both sides, then execute and compare. Also <code>start()</code> can't return a value, and it seemed better to (i) only execute one function, to economize on fuzzing input bytes (more efficient search) and (ii) allow a return-value comparison. Since we have <code>allow_start_export()</code> in the <code>Config</code> now I think this is probably fine, as we aren't rejecting any modules because of it?</p>\n</blockquote>",
        "id": 218501135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868844
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542406901\">PR Review</a>.</p>",
        "id": 218501153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868875
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r533812918\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 218501154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868876
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542407295\">PR Review</a>.</p>",
        "id": 218501235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868933
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r533813259\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, this is both to limit the comparison time and to reduce memory usage; I was getting OOMs otherwise during fuzzing.</p>\n</blockquote>",
        "id": 218501237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868933
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542407439\">PR Review</a>.</p>",
        "id": 218501262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868954
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r533813376\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, neat, I didn't know that <code>Option</code> was question-mark-operator-friendly too; thanks!</p>\n</blockquote>",
        "id": 218501263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606868954
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218502661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606870091
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542918675\">PR Review</a>.</p>",
        "id": 218568169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-542918675\">PR Review</a>.</p>",
        "id": 218568170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534231549\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's ok to omit <code>default</code> here since it doesn't do anything.</p>\n</blockquote>",
        "id": 218568172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534232202\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In this crate you might be able to do this with <code>#[derive(Arbitrary)]</code> I think too</p>\n</blockquote>",
        "id": 218568173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534234188\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For <code>.ok()?</code> here, is that ignoring traps? Or are there other failure conditions? Ideally we'd also test that if wasmi trapped that wasmtime also traps (and the memories still look the same)</p>\n</blockquote>",
        "id": 218568174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534235043\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW this can also be <code>let mut wasmi_buf = vec![0; wasmtime_mem.data_size()];</code></p>\n</blockquote>",
        "id": 218568175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534235564\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It should be ok to remove <code>default</code> here too</p>\n</blockquote>",
        "id": 218568176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606921314
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a> from <code>differential-fuzz-interp</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a new fuzz target, <code>differential_wasmi</code>, that runs a<br>\nCranelift-based Wasm backend alongside a simple third-party Wasm<br>\ninterpeter crate (<code>wasmi</code>).  The fuzzing runs the first function in a<br>\ngiven module to completion on each side, and then diffs the return value<br>\nand linear memory contents.</p>\n<p>This strategy should provide end-to-end coverage including both the Wasm<br>\ntranslation to CLIF (which has seen some subtle and scary bugs at<br>\ntimes), the lowering from CLIF to VCode, the register allocation, and<br>\nthe final code emission.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 218631827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949574
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-543304947\">PR Review</a>.</p>",
        "id": 218631886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949617
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534536749\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, originally I had figured it would be the most useful to just compare successful runs on both sides, but I agree that allowing traps allows for more interesting coverage -- fixed (here and in value-matching below), thanks!</p>\n</blockquote>",
        "id": 218631887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949618
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-543305036\">PR Review</a>.</p>",
        "id": 218631902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949628
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534536829\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nice, thanks.</p>\n</blockquote>",
        "id": 218631903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949628
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-543305122\">PR Review</a>.</p>",
        "id": 218631911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949638
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534536892\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 218631912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949638
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-543305184\">PR Review</a>.</p>",
        "id": 218631965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949646
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534536959\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 218631967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949646
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#pullrequestreview-543305243\">PR Review</a>.</p>",
        "id": 218631978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949652
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453#discussion_r534537017\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 218631979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606949653
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2453\">PR #2453</a>.</p>",
        "id": 218636198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606952511
    }
]