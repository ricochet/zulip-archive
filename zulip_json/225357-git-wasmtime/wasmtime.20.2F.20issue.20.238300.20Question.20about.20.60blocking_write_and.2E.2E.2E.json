[
    {
        "content": "<p>karthik2804 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300\">issue #8300</a>:</p>\n<blockquote>\n<p>Given this rust code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Headers</span>::<span class=\"n\">from_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">\"content-type\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">b\"plain/text-stream\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">())]).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"hello world 1\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 2\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 3\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">out_stream</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">OutgoingBody</span>::<span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When running it through <code>wasmtime serve -S common blockingstream.wasm</code>, I get the behavior as described below.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>curl<span class=\"w\"> </span>-i<span class=\"w\"> </span>localhost:8080\nHTTP/1.1<span class=\"w\"> </span><span class=\"m\">200</span><span class=\"w\"> </span>OK\ncontent-type:<span class=\"w\"> </span>plain/text-stream\ntransfer-encoding:<span class=\"w\"> </span>chunked\ndate:<span class=\"w\"> </span>Thu,<span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span>Apr<span class=\"w\"> </span><span class=\"m\">2024</span><span class=\"w\"> </span><span class=\"m\">21</span>:44:46<span class=\"w\"> </span>GMT\n\n<span class=\"c1\"># 2 second pause</span>\nhello<span class=\"w\"> </span>world<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"c1\"># 2 second pause</span>\nline<span class=\"w\"> </span><span class=\"m\">2</span>\nline<span class=\"w\"> </span><span class=\"m\">3</span>%\n</code></pre></div>\n<p>To be clear (as shown in the above terminal) the previous write is not written until the next write  or <code>finish</code> is called on the response body. Is this expected behaviour or should the writes be flush as soon as written?</p>\n</blockquote>",
        "id": 431411468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712268876
    },
    {
        "content": "<p>karthik2804 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300\">issue #8300</a>:</p>\n<blockquote>\n<p>Given this rust code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Headers</span>::<span class=\"n\">from_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">\"content-type\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">b\"plain/text-stream\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">())]).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"hello world 1\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 2\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 3\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">out_stream</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">OutgoingBody</span>::<span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When running it through <code>wasmtime serve -S common blockingstream.wasm</code>, I get the behavior as described below.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>curl<span class=\"w\"> </span>-i<span class=\"w\"> </span>localhost:8080\nHTTP/1.1<span class=\"w\"> </span><span class=\"m\">200</span><span class=\"w\"> </span>OK\ncontent-type:<span class=\"w\"> </span>plain/text-stream\ntransfer-encoding:<span class=\"w\"> </span>chunked\ndate:<span class=\"w\"> </span>Thu,<span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span>Apr<span class=\"w\"> </span><span class=\"m\">2024</span><span class=\"w\"> </span><span class=\"m\">21</span>:44:46<span class=\"w\"> </span>GMT\n\n<span class=\"c1\"># 2 second pause</span>\nhello<span class=\"w\"> </span>world<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"c1\"># 2 second pause</span>\nline<span class=\"w\"> </span><span class=\"m\">2</span>\nline<span class=\"w\"> </span><span class=\"m\">3</span>%\n</code></pre></div>\n<p>To be clear (as shown in the above terminal) the previous write is not written until the next write  or <code>finish</code> is called on the response body. Is this expected behavior or should the writes be flush as soon as written?</p>\n</blockquote>",
        "id": 431411617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712268962
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300#issuecomment-2038679055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300\">issue #8300</a>:</p>\n<blockquote>\n<p>I'm able to reproduce this locally as well, but after some debugging I think you might accidentally be falling victim of curl's default buffering behavior. With the <code>--no-buffer</code> flag to <code>curl</code> (which I just now learned existed) the timing here looks to be as expected.  Changing the program to put <code>\\n</code> at the end of the lines in the sample instead of at the beginning also looks to have the expected behavior with <code>curl</code>'s default buffering mode too.</p>\n</blockquote>",
        "id": 431435020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712285013
    },
    {
        "content": "<p>karthik2804 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300\">issue #8300</a>:</p>\n<blockquote>\n<p>Given this rust code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">req</span>: <span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Headers</span>::<span class=\"n\">from_list</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[(</span><span class=\"s\">\"content-type\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">b\"plain/text-stream\"</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">())]).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"hello world 1\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 2\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">thread</span>::<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">Duration</span>::<span class=\"n\">from_secs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">out_stream</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">blocking_write_and_flush</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">line 3\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">out_stream</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">OutgoingBody</span>::<span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When running it through <code>wasmtime serve -S common blockingstream.wasm</code>, I get the behavior as described below.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>curl<span class=\"w\"> </span>-i<span class=\"w\"> </span>localhost:8080\nHTTP/1.1<span class=\"w\"> </span><span class=\"m\">200</span><span class=\"w\"> </span>OK\ncontent-type:<span class=\"w\"> </span>plain/text-stream\ntransfer-encoding:<span class=\"w\"> </span>chunked\ndate:<span class=\"w\"> </span>Thu,<span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span>Apr<span class=\"w\"> </span><span class=\"m\">2024</span><span class=\"w\"> </span><span class=\"m\">21</span>:44:46<span class=\"w\"> </span>GMT\n\n<span class=\"c1\"># 2 second pause</span>\nhello<span class=\"w\"> </span>world<span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"c1\"># 2 second pause</span>\nline<span class=\"w\"> </span><span class=\"m\">2</span>\nline<span class=\"w\"> </span><span class=\"m\">3</span>%\n</code></pre></div>\n<p>To be clear (as shown in the above terminal) the previous write is not written until the next write  or <code>finish</code> is called on the response body. Is this expected behavior or should the writes be flush as soon as written?</p>\n</blockquote>",
        "id": 431437608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712286868
    },
    {
        "content": "<p>karthik2804 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300#issuecomment-2038763421\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8300\">issue #8300</a>:</p>\n<blockquote>\n<p>Oh!  That is exactly what was happening and I can achieve the expected behavior with either of the options mentioned. </p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 431437609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712286868
    }
]