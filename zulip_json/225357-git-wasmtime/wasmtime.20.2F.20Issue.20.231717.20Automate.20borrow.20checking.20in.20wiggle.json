[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-629491166\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 197753577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589577449
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-629501681\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>Looking pretty good! As you mentioned on Zulip I agree the main thing missing here is how we expect the \"assert there are no active borrows\" to work.</p>\n<p>A possible idea I think is to remove the lifetime from <code>MemoryManager</code>. That way an application would create one instance of a <code>MemoryManager</code> as a global context. I think we'd have to make the constructor <code>unsafe</code> as well and document you can't create multiple of them. Afterwards each wiggle-generated call would take two parameters, one being the <code>MemoryManager</code> (a borrow) and one being the <code>GuestMemory</code> implementation. The <code>GuestPtr</code> type would then internally contain <code>&amp;(&amp;MemoryManager, &amp;GuestMemory)</code> (or some equivalent thereof).</p>\n<p>The main caveat would be documenting the unsafety of the constructor, which I think would amount to:</p>\n<ul>\n<li>You can only create one per wasm memory.</li>\n<li>You must call an \"assert no active borrows\" whenever wasm is called.</li>\n</ul>\n<p>I think with that the invariants we have are:</p>\n<ol>\n<li>Whenever you enter a wiggle-generated function, you provide proof of \"I have the one memory manager\". This means that structure is tracking all active borrows into guest memory.</li>\n<li>Whenever you go back to wasm, you've asserted you're calling the method to make sure there's no active borrows.</li>\n<li>Otherwise inside of the wiggle-generated function all wasm borrows are channeled through <code>MemoryManager</code>, which does normal management with RAII to ensure everything works out.</li>\n</ol>\n<p>I think that should cover our use case? We could even make 'assert no active borrows' a function that takes no parameters, updating some thread-local state, if it's too onerous to thread that around.</p>\n</blockquote>",
        "id": 197755119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589578421
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-629504876\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>I like @alexcrichton's take on this, although manually asserting sounds like a bit of a pain and I'm worried it might be easy to forget. But I'm usually a pessimist so perhaps this won't be that much of a problem after all.</p>\n</blockquote>",
        "id": 197755549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589578746
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-629552323\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>Thanks for taking a look, I like your ideas on how to restructure this. That boils <code>MemoryManager</code> down to just a <code>RefCell&lt;BorrowChecker&gt;</code>, so maybe we'll just call it the latter.  I'll implement this on Monday :)</p>\n</blockquote>",
        "id": 197764751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589586717
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-630137374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>It might actually be possible to just take <code>&amp;BorrowChecker</code> in that case and have the <code>RefCell</code> and/or mutability be interior to <code>BorrowChecker</code> too?</p>\n</blockquote>",
        "id": 197923612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589803586
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-630371964\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>Rewrote the changes with this redesign in mind. Still need to:</p>\n<ul>\n<li>go through and audit the safety story. I think for this to work correctly GuestPtr::{read, write} has to borrow, read/write, then unborrow; plus I'm not sure if the array borrows are done correctly.</li>\n<li>the BorrowChecker datastructure itself is probably nowhere near optimal - hashmap of a u32 key isnt the best, should reset the starting key to zero when the map is emptied so we don't have to deal with index overflow or finding unused keys</li>\n<li>string the changes throughout wasi-common and the wasmtime interface code</li>\n</ul>\n</blockquote>",
        "id": 197979846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589827827
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-630536628\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>I think by checking that the region is unborrowed in <code>GuestPtr::{read, write}</code>, we ensure that we don't read or write anything that may be aliased with a mutable ref. This does add a significant amount of overhead to each read and write operation. We should look into a more efficient datastructure at some point, but I'm not going to invest time in that now.</p>\n<p>Tomorrow I'll update the docs and thread it through the downstream libraries.</p>\n</blockquote>",
        "id": 198016324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589854596
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#issuecomment-632305117\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">Issue #1717</a>:</p>\n<blockquote>\n<p>I believe I addressed all code review, GuestMemory::borrow_checker() now gives the BorrowChecker, rather than passing it separately.</p>\n</blockquote>",
        "id": 198366724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590090101
    }
]