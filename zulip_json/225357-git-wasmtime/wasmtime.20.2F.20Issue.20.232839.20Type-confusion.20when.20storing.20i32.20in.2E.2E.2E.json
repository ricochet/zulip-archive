[
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/commit/95f86be431557253e41baaef0da68ccf0b3bc0fd\">95f86be</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n</blockquote>\n<p>That was indeed a suspicious comment. I am not sure exactly what the original intent was but I double-checked just now that this <code>store</code> helper is not being used to codegen stores; those directly produce correctly-sized instructions. I suspect this originally came from spill/reload helpers in which case \"always spill/reload the full reg\" is a reasonable conservative approach but even then we have the invariant that upper bits (beyond a type's width) in a register are undefined and extended when needed by an op so this should be fine I think. Thanks for calling it out!</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_\">https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_</a></p>\n<p>I guess I'm coming after the battle, but this particular change introduced a regression. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2277\">https://github.com/bytecodealliance/wasmtime/pull/2277</a> for context, which added an optimization for the following situation. Imagine we have the following CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thus v1 is 32-bits, and v2 is 64-bits. During lowering, we pattern-match this situation: in theory, the <code>iadd.i32</code> is compiled to an <code>addl</code>, which clears out the upper bits, so the zero-extension is spurious, and can be redefined as a plain copy of the input (a move!). So this might be lowered into the following vcode:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, from the point of view of register allocation, both vcode's values are using the <code>RegClass::i64</code>, so the two virtual registers can be coalesced and allocated to the same register. That's all right... unless the register is spilled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// say %v1 and %v2 are allocated to %r1</span>\n<span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// spill to a stack slot as an i32, since %v1 is an i32</span>\n<span class=\"c1\">// ... later</span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"c1\">// reload as an i64, since %v2 is an i64. The high 32-bits are undefined!</span>\n</code></pre></div>\n<p>The line ending with <code>spill to a stack slot as an i32</code> results from the change Alex made. Before this, the value would be stored as an i64, so the high bits from the iaddl would be stored in the stack slot and correctly reloaded. The comment's wording didn't quite help in describing this situation. Also, there should have been a test case, so that part is on me.</p>\n<p>So the issue is that register allocation kind of loses the precise type, and that a store to a stack slot should store the full width of the stack slot all the time, so there are no undefined bits when storing and reloading values within a given <code>RegClass</code> (here, <code>RegClass::I64</code>). Alternatively, we might remove the <code>uextend</code> elimination optimization, but that would increase register pressure and slow down the decoding pipeline a bit, so I'd rather go with the first solution.</p>\n</blockquote>",
        "id": 234500140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618407568
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/commit/95f86be431557253e41baaef0da68ccf0b3bc0fd\">95f86be</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n</blockquote>\n<p>That was indeed a suspicious comment. I am not sure exactly what the original intent was but I double-checked just now that this <code>store</code> helper is not being used to codegen stores; those directly produce correctly-sized instructions. I suspect this originally came from spill/reload helpers in which case \"always spill/reload the full reg\" is a reasonable conservative approach but even then we have the invariant that upper bits (beyond a type's width) in a register are undefined and extended when needed by an op so this should be fine I think. Thanks for calling it out!</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_\">https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_</a></p>\n<p>I guess I'm coming after the battle, but this particular change introduced a regression. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2277\">https://github.com/bytecodealliance/wasmtime/pull/2277</a> for context, which added an optimization for the following situation. Imagine we have the following CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thus v1 is 32-bits, and v2 is 64-bits. During lowering, we pattern-match this situation: in theory, the <code>iadd.i32</code> is compiled to an <code>addl</code>, which clears out the upper bits, so the zero-extension is spurious, and can be redefined as a plain copy of the input (a move!). So this might be lowered into the following vcode:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, from the point of view of register allocation, both vcode's values are using the <code>RegClass::i64</code>, so the two virtual registers can be coalesced and allocated to the same register. That's all right... unless the register is spilled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// say %v1 and %v2 are allocated to %r1</span>\n<span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// spill to a stack slot as an i32, since %v1 is an i32</span>\n<span class=\"c1\">// ... later</span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"c1\">// reload as an i64, since %v2 is an i64. The high 32-bits are undefined!</span>\n</code></pre></div>\n<p>The line ending with <code>spill to a stack slot as an i32</code> results from the change Alex made. Before this, the value would be stored as an i64, so the high bits from the iaddl would be stored in the stack slot and correctly reloaded. The comment's wording didn't quite help in describing this situation. Also, there should have been a test case, so that part is on me.</p>\n<p>So the issue is that register allocation kind of loses the precise type, and that a store to a stack slot should store the full width of the stack slot all the time, so there are no undefined bits when storing and reloading values within a given <code>RegClass</code> (here, <code>RegClass::I64</code>). Alternatively, we might remove the <code>uextend</code> elimination optimization, but that would increase register pressure and slow down the decoding pipeline a bit, so I'd rather go with the first solution.</p>\n</blockquote>",
        "id": 234500174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618407582
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/commit/95f86be431557253e41baaef0da68ccf0b3bc0fd\">95f86be</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n</blockquote>\n<p>That was indeed a suspicious comment. I am not sure exactly what the original intent was but I double-checked just now that this <code>store</code> helper is not being used to codegen stores; those directly produce correctly-sized instructions. I suspect this originally came from spill/reload helpers in which case \"always spill/reload the full reg\" is a reasonable conservative approach but even then we have the invariant that upper bits (beyond a type's width) in a register are undefined and extended when needed by an op so this should be fine I think. Thanks for calling it out!</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_\">https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_</a></p>\n<p>I guess I'm coming after the battle, but this particular change introduced a regression. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2277\">https://github.com/bytecodealliance/wasmtime/pull/2277</a> for context, which added an optimization for the following situation. Imagine we have the following CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thus v1 is 32-bits, and v2 is 64-bits. During lowering, we pattern-match this situation: in theory, the <code>iadd.i32</code> is compiled to an <code>addl</code>, which clears out the upper bits, so the zero-extension is spurious, and can be redefined as a plain copy of the input (a move!). So this might be lowered into the following vcode:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, from the point of view of register allocation, both vcode's values are using the <code>RegClass::i64</code>, so the two virtual registers can be coalesced and allocated to the same register. That's all right... unless the register is spilled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// say %v1 and %v2 are allocated to %r1</span>\n<span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// spill to a stack slot as an i32, since %v1 is an i32</span>\n<span class=\"c1\">// ... later</span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"c1\">// reload as an i64, since %v2 is an i64. The high 32-bits are undefined!</span>\n</code></pre></div>\n<p>The line ending with <code>spill to a stack slot as an i32</code> results from the change Alex made. Before this, the value would be stored as an i64, so the high bits from the iaddl would be stored in the stack slot and correctly reloaded. The comment's wording didn't quite help in describing this situation. Also, there should have been a test case, so that part is on me.</p>\n<p>So the issue is that register allocation kind of loses the precise type, and that a store to a stack slot should store the full width of the stack slot all the time, so there are no undefined bits when storing and reloading values within a given <code>RegClass</code> (here, <code>RegClass::I64</code>). Alternatively, we might remove the <code>uextend</code> elimination optimization, but that would increase register pressure and slow down the decoding pipeline a bit, so I'd rather go with the first solution.</p>\n</blockquote>",
        "id": 234500175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618407582
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-819635398\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Did my refactoring to stores in 6bdef48 (from #2833) make this worse or better or unrelated?</p>\n</blockquote>",
        "id": 234527042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618416349
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-819637345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Unrelated, I think. Really the matter was to not have a test for the explained behavior above. For what it's worth, I've got a test case now, which was a bit hard to handwrite, but that will make sure that we won't undo this later again.</p>\n</blockquote>",
        "id": 234527548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618416513
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-819637623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Fantastic find, @bnjbvr -- thank you for tracking this down!</p>\n</blockquote>",
        "id": 234527609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618416537
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok I think I got everything working now! Since it was a very recent change, @cfallin can you confirm you saw <a href=\"https://github.com/bytecodealliance/wasmtime/commit/95f86be431557253e41baaef0da68ccf0b3bc0fd\">95f86be</a>? That was necessary to fix some segfaults that were cropping up on windows since the 4-byte return values were getting stored as 8-byte results. The comment there makes me suspicious though...</p>\n</blockquote>\n<p>That was indeed a suspicious comment. I am not sure exactly what the original intent was but I double-checked just now that this <code>store</code> helper is not being used to codegen stores; those directly produce correctly-sized instructions. I suspect this originally came from spill/reload helpers in which case \"always spill/reload the full reg\" is a reasonable conservative approach but even then we have the invariant that upper bits (beyond a type's width) in a register are undefined and extended when needed by an op so this should be fine I think. Thanks for calling it out!</p>\n<p>_Originally posted by @cfallin in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_\">https://github.com/bytecodealliance/wasmtime/issues/2806#issuecomment-814437743_</a></p>\n<p>I guess I'm coming after the battle, but this particular change introduced a regression. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2277\">https://github.com/bytecodealliance/wasmtime/pull/2277</a> for context, which added an optimization for the following situation. Imagine we have the following CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thus v1 is 32-bits, and v2 is 64-bits. During lowering, we pattern-match this situation: in theory, the <code>iadd.i32</code> is compiled to an <code>addl</code>, which clears out the upper bits, so the zero-extension is spurious, and can be redefined as a plain copy of the input (a move!). So this might be lowered into the following vcode:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v2</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, from the point of view of register allocation, both vcode's values are using the <code>RegClass::i64</code>, so the two virtual registers can be coalesced and allocated to the same register. That's all right... unless the register is spilled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// say %v1 and %v2 are allocated to %r1</span>\n<span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addl</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">movl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// spill to a stack slot as an i32, since %v1 is an i32</span>\n<span class=\"c1\">// ... later</span>\n<span class=\"n\">movq</span><span class=\"w\"> </span><span class=\"mh\">0x20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"c1\">// reload as an i64, since %v2 is an i64. The high 32-bits are undefined!</span>\n</code></pre></div>\n<p>The line ending with <code>spill to a stack slot as an i32</code> results from the change Alex made. Before this, the value would be stored as an i64, so the high bits from the iaddl would be stored in the stack slot and correctly reloaded. The comment's wording didn't quite help in describing this situation. Also, there should have been a test case, so that part is on me.</p>\n<p>So the issue is that register allocation kind of loses the precise type, and that a store to a stack slot should store the full width of the stack slot all the time, so there are no undefined bits when storing and reloading values within a given <code>RegClass</code> (here, <code>RegClass::I64</code>). Alternatively, we might remove the <code>uextend</code> elimination optimization, but that would increase register pressure and slow down the decoding pipeline a bit, so I'd rather go with the first solution.</p>\n</blockquote>",
        "id": 234537744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618420308
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-820305937\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Looks like this patch now introduced a new regression on s390x.  The patch changes store_spillslot but not load_spillslot, which means that some values may now be stored as i64 and then loaded as i32 from the same address.  This does not work on big-endian platforms.</p>\n<p>Shouldn't load_spillslot be using the same type as store_spillslot?   If this is not possible or desirable for some reason, then we need to update the offset where the value is loaded from on big-endian systems in such cases.  (However, it is not immediately clear how we'd know the target endianness in load_spillsplot.  Seems this would require a new ABIMachineSpec callback.)</p>\n<p>I'd be happy to come up with a patch to fix this, just let me know which option you prefer.</p>\n</blockquote>",
        "id": 234649292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618481430
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-820426489\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Sorry about that! I agree that yeah, since the <code>store_spillslot</code> function is target-independent and this target-dependent constraint has leaked upwards, the <code>load_spillslot</code> function should explicitly behave the same way indeed. @cfallin thoughts?</p>\n</blockquote>",
        "id": 234675464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618493672
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-820598688\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<p>Hmm, yes, I think the straightforward fix is to do the same type-promotion logic in <code>load_spililslot()</code>, as you suggest.</p>\n<p>It might be worth documenting what invariants we're upholding, too, just to make this clearer for future readers: specifically, for integer registers, the lowering logic can always assume that the full register will be preserved across spills/reloads, while for floating-point and vector registers, only the used portion is preserved. The other side of this contract is that the lowering must be precise with types on floats/vecs, but is free to generate moves between integer registers holding types of different sizes.</p>\n</blockquote>",
        "id": 234717692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618507173
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839#issuecomment-820649916\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2839\">Issue #2839</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hmm, yes, I think the straightforward fix is to do the same type-promotion logic in <code>load_spililslot()</code>, as you suggest.</p>\n</blockquote>\n<p>OK, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2843\">https://github.com/bytecodealliance/wasmtime/pull/2843</a> implements this and fixes the regression for me.</p>\n</blockquote>",
        "id": 234730208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1618511980
    }
]