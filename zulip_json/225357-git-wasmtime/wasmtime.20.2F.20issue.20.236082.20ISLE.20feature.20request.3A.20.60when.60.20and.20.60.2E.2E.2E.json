[
    {
        "content": "<p>Kmeakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add <code>(when &lt;expr&gt;)</code> and <code>(unless &lt;expr&gt;)</code> syntax as shorthand for <code>(if-let $true &lt;expr&gt;)</code> and <code>(if-let $false &lt;expr&gt;)</code> respectively</p>\n<h4>Benefit</h4>\n<p>Less to type when adding boolean conditions to rules</p>\n<h4>Implementation</h4>\n<p>Should be simple to implement as a syntax sugar rewrite in the ISLE compiler </p>\n<h4>Alternatives</h4>\n<p>Leave ISLE unchanged<br>\n</p>\n</blockquote>",
        "id": 343515947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679431055
    },
    {
        "content": "<p>Kmeakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add <code>(when &lt;expr&gt;)</code> and <code>(unless &lt;expr&gt;)</code> syntax as shorthand for <code>(if-let $true &lt;expr&gt;)</code> and <code>(if-let $false &lt;expr&gt;)</code> respectively</p>\n<h4>Benefit</h4>\n<p>Less to type when adding boolean conditions to rules</p>\n<h4>Implementation</h4>\n<p>Should be simple to implement as a syntax sugar rewrite in the ISLE compiler. I would be happy to implement it myself. </p>\n<h4>Alternatives</h4>\n<p>Leave ISLE unchanged<br>\n</p>\n</blockquote>",
        "id": 343516147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679431092
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082#issuecomment-1478703550\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<p>We've definitely talked about this sort of thing before. I think the root issue is actually that we have ctors that communicate a predicate by their truthy return value <em>as well as</em> other ctors that communicate a predicate by matching or not matching. We should decide one way or another, and then make the existing <code>(if ...)</code> shorthand (which uses the RHS as a match/no-match predicate rather than a truthy predicate) fit that decision.</p>\n<p>@jameysharp, IIRC there were good reasons why we started returning values more frequently rather than using the matching status itself -- was it to allow for better islec codegen?</p>\n<p>If that's the case, one way forward would be to (i) audit all predicates and convert them from \"matchy\" to \"truthy\"; then (ii) make <code>(if x)</code> sugar for <code>(if-let $true x)</code>.</p>\n<p>This strikes me as more type-safe than the other way around: if we keep <code>(if x)</code> as <code>(if-let _ x)</code> any truthy predicate gets matched when it returns <code>$false</code> (the silent bug we had before), whereas with <code>(if-let $true x)</code> we are likely to get a type error if a matchy predicate (that e.g. returns Unit or passes through a value it took in) is used.</p>\n<p>It is a little odd to bake in <code>$true</code> and the bool type to the language (currently these are a <code>$</code>-passthrough symbol and a type defined in the prelude, respectively) but, eh... it's certainly more ergonomic.</p>\n</blockquote>",
        "id": 343536865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679439573
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082#issuecomment-1478712669\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<p>I like this idea. We currently have an <code>(if &lt;expr&gt;)</code> form which is also syntactic sugar for <code>if-let</code>, so you can model these new forms off of that.</p>\n<p>Separately, we should probably delete the <code>if</code> form since it doesn't do what you'd expect. It's used in quite a few places though and we'd need to think about how to fix the existing uses.</p>\n<p>Here's one thing that's surprising about <code>when</code> and <code>unless</code>, if implemented as syntactic sugar in the way you've described. If a constructor used anywhere in <code>&lt;expr&gt;</code> is declared <code>partial</code> and returns <code>None</code>, then the entire <code>if-let</code> doesn't match. So you could have a pair of rules which are identical except that one uses <code>when</code> and the other uses <code>unless</code>, and find that neither one matches. And you can't tell by looking at a rule if that's going to happen; you'd have to check every single term it references.</p>\n<p>In the interests of reducing surprises, I think the desugared <code>if-let</code> should have an internal <code>allow_partial</code> flag, set to <code>false</code> for <code>when</code>/<code>unless</code> and <code>true</code> for a real <code>if-let</code>. Then, in <code>sema.rs</code>, in <code>translate_iflet</code>, pass the <code>allow_partial</code> flag to <code>translate_expr</code> where it currently just passes <code>true</code> for the <code>on_lhs</code> parameter. That'll trigger the existing checks which prohibit partial terms in other circumstances.</p>\n<p>@cfallin, using boolean results allows us to write rules that the overlap checker can tell don't overlap without needing to set different priorities on the rules. That in turn sometimes helps generate better code, but the overlap checking was the main reason. As I recall, it was @elliottt who figured out the value of that pattern, when he started to fix overlapping rules.</p>\n<p>Because of the value for overlap checking, I think @Kmeakin is right that it's a good idea to have both the <code>when</code> and <code>unless</code> forms. We could quibble about whether <code>when</code> should instead be named <code>if</code>. The very distant memories I have of writing Perl make me feel like that's the \"right\" counterpart to <code>unless</code>, but in the interests of not having to change everything at once, I think we should preserve the current behavior of <code>if</code> and migrate away from it over time.</p>\n</blockquote>",
        "id": 343538200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679440274
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082#issuecomment-1478726615\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think we should preserve the current behavior of if and migrate away from it over time.</p>\n</blockquote>\n<p>I'm usually very much in favor of this sort of approach (see: ISLE!), but in this case I worry about the cognitive overhead and confusion to new users if <code>if</code>, <code>when</code> and <code>unless</code> all exist at the same time, with confusingly subtle semantic differences. I suspect that flipping the semantics of <code>if</code> (or renaming to <code>when</code>, I don't care much either) and doing one bulk-changeover in the backends would not be too bad -- a fairly mechanical change (find-replace <code>if-let $true</code> to <code>if</code>, and updating predicate definitions).</p>\n<p>I do agree that disallowing partial constructors in <code>if</code>/<code>when</code> and <code>unless</code> seems right!</p>\n</blockquote>",
        "id": 343540280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679441605
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082#issuecomment-1495151309\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<p>Removing <code>if</code> would also allow us to have an <code>(if &lt;cond&gt; &lt;then&gt; &lt;else&gt;)</code> expression</p>\n</blockquote>",
        "id": 346701135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680566782
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the isle label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">Issue #6082</a>.</p>",
        "id": 438216524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715552706
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082#issuecomment-2106394265\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6082\">issue #6082</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 438216544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715552741
    }
]