[
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1722189449\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<p>Looks like on the test <code>filetests/filetests/runtests/issue5569.clif</code> we have a single block that produces about 8KiB of code, and the branch that we use for these traps only has a range of +/-4KiB, so we run into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2ad057d735edc43f8ba89428d483f2b2430c1068/cranelift/codegen/src/machinst/buffer.rs#L1345\">this assert</a>.</p>\n<p>I thought we would emit islands in the middle of a block if we needed to, but that appears not to be the case. I'm also not sure what the best solution here is, checking if we need an island at every instruction seems quite heavy handed.</p>\n<p>This is also going to get worse when I introduced compressed conditional branches that only have +/- 256 bytes of range.</p>\n</blockquote>",
        "id": 391355243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694856977
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1722189449\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<p>Looks like on the test <code>filetests/filetests/runtests/issue5569.clif</code> we have a single block that produces about 8KiB of code, and the branch that we use for these traps only has a range of +/-4KiB, so we run into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2ad057d735edc43f8ba89428d483f2b2430c1068/cranelift/codegen/src/machinst/buffer.rs#L1345\">this assert</a>.</p>\n<p>I thought we would emit islands in the middle of a block if we needed to, but that appears not to be the case. I'm also not sure what the best solution here is, checking if we need an island at every instruction seems quite heavy handed.</p>\n<p>This is also going to get worse when I introduced compressed conditional branches that only have +/- 256 bytes of range.</p>\n<p>Is there an easy way around this, or should I keep using inline traps for now and fix deferred traps later?</p>\n</blockquote>",
        "id": 391666845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695032431
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1722189449\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<p>Looks like on the test <code>filetests/filetests/runtests/issue5569.clif</code> we have a single block that produces about 8KiB of code, and the branch that we use for these traps only has a range of +/-4KiB, so we run into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2ad057d735edc43f8ba89428d483f2b2430c1068/cranelift/codegen/src/machinst/buffer.rs#L1345\">this assert</a>.</p>\n<p>I thought we would emit islands in the middle of a block if we needed to, but that appears not to be the case. I'm also not sure what the best solution here is, checking if we need an island at every instruction seems quite heavy handed.</p>\n<p>This is also going to get worse when I introduced compressed conditional branches that only have +/- 256 bytes of range.</p>\n<p>Is there an easy way around this, or should I keep inline traps for now and fix deferred traps later?</p>\n</blockquote>",
        "id": 391666874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695032442
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1723618095\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<p>Ah yes you're right that islands are emitted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca702da264bce69c687de3d3ba37d9215d39a587/cranelift/codegen/src/machinst/vcode.rs#L1034-L1054\">once per block</a> which is based on <code>I::worst_case_size()</code>. Is  this perhaps a case where the <code>worse_case_size</code> for RISC-V isn't accurate? Or perhaps the block is so large that a jump in the middle of the block can't jump out of the block?</p>\n<blockquote>\n<p>This is also going to get worse when I introduced compressed conditional branches that only have +/- 256 bytes of range.</p>\n</blockquote>\n<p>This may not actually work well with Wasmtime today unfortunately. As I'm sure you've seen we aren't guaranteed to know the branch target at emission time meaning that we can't use the current scheme you have for compressed instructions. It's technically possible to do it sort of but it means that it could make things worse since a 256 byte jump would run the risk of often requiring a veneer to a larger jump which means that what could have been a single jump would be veneer'd to two jumps.</p>\n<p>When I was reading over the RISC-V documentation and intro and such I got the impression that the intention of the compressed instructions was to do what you've design today which is to emit everything and then compress it all after-the fact. The linker, however, seemed like it would be the one responsible for compressing RISC-V jumps which I'm not sure <code>MachBuffer</code> is positioned to do today. (e.g. <code>MachBuffer</code> isn't able to implement linker relaxation where all relocations are compressed to their smallest size). Not to say we couldn't ever implement it though, it's probably a chunk of work though.</p>\n</blockquote>",
        "id": 391718663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695049027
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1723650973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<p>Chiming in as well on branch ranges to say: two basic design tenets of MachBuffer's approach were:</p>\n<ul>\n<li>We only emit islands between blocks, where we don't need to munge control flow to jump around them (on some backends then, e.g. aarch64, we do it for inline <code>br_table</code> tables too, since they're unbounded-ish, but that's morally \"between blocks\" as well even though it's within a pseudoinst)</li>\n<li>We never backpatch code in a way that can expand size, because this requires a fixpoint loop in the limit and that could degrade to be very slow (imagine expanding a compressed jump to jump pushes a bunch of other branches out of range)</li>\n</ul>\n<p>The former should be possible to relax, since the do-we-need-an-island check is cheap (just a compare to a deadline). We'd need to generate a jump beforehand that jumps around the island (and <em>that</em> jump should be longer-range!) If it actually happens it could be pretty undesirable from a performance standpoint -- the extra jump and break in fetch bandwidth could hurt in an inner loop -- so we'd want to do it only rarely (i.e., not optimistically pick the 256-byte-range jumps).</p>\n<p>That should handle the long-basic-blocks problem re: 4K-range branches. It seems like the right way to handle the compressed-jump question is indeed a relaxation/shrinkage approach (which can't push other branches of out range, so you <em>can</em> do it without a fixpoint, but you might want to because other branches might become shrinkable too), but probably as a post-pass on the machine code. We'd need to keep all label fixups around to enable that as well. Maybe best to defer to a linker in e.g. Cranelift-as-AOT-rustc-backend cases, and omit this where compile times are more important (Cranelift-in-Wasmtime).</p>\n</blockquote>",
        "id": 391721122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695049725
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1724192143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah yes you're right that islands are emitted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca702da264bce69c687de3d3ba37d9215d39a587/cranelift/codegen/src/machinst/vcode.rs#L1034-L1054\">once per block</a> which is based on I::worst_case_size(). Is this perhaps a case where the worse_case_size for RISC-V isn't accurate? Or perhaps the block is so large that a jump in the middle of the block can't jump out of the block?</p>\n</blockquote>\n<p>As far as I can tell <code>worst_case_size</code> is fairly accurate, It's currently at 124 bytes. The test for it points to the maximum being 116, so it's not too far off.</p>\n<p>The block being too large seems to me the likely cause. The logs show that the full block is 8KiB, and we have a TrapIf about 1KiB into the block. That means that the closest island is 7KiB away, and the CondBr Instruction can't reach that.</p>\n<p>I think I'm going to back out of the <code>deferred_trap</code> portion of this PR and land that separately, since it looks like we might need to make some changes to island checking for that to work properly with our limited branch range.</p>\n<hr>\n<blockquote>\n<p>The linker, however, seemed like it would be the one responsible for compressing RISC-V jumps which I'm not sure MachBuffer is positioned to do today. </p>\n</blockquote>\n<blockquote>\n<p>Maybe best to defer to a linker in e.g. Cranelift-as-AOT-rustc-backend cases, and omit this where compile times are more important (Cranelift-in-Wasmtime).</p>\n</blockquote>\n<p>Yeah, I agree with that. I'm not sure I want to go full relaxation on MachBuffer yet, but a good middle ground would probably be expose all label usages as unresolved relocations, and let the external linker deal with it.</p>\n</blockquote>",
        "id": 391757644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695063120
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1724192143\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah yes you're right that islands are emitted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca702da264bce69c687de3d3ba37d9215d39a587/cranelift/codegen/src/machinst/vcode.rs#L1034-L1054\">once per block</a> which is based on I::worst_case_size(). Is this perhaps a case where the worse_case_size for RISC-V isn't accurate? Or perhaps the block is so large that a jump in the middle of the block can't jump out of the block?</p>\n</blockquote>\n<p>As far as I can tell <code>worst_case_size</code> is fairly accurate, It's currently at 124 bytes. The test for it points to the maximum being 116, so it's not too far off.</p>\n<p>The block being too large seems to me the likely cause. The logs show that the full block is 8KiB, and we have a TrapIf about 1KiB into the block. That means that the closest island is 7KiB away, and the CondBr Instruction can't reach that.</p>\n<p>I think I'm going to back out of the <code>deferred_trap</code> portion of this PR and land that separately, since it looks like we might need to make some changes to island checking for that to work properly with our limited branch range.</p>\n<hr>\n<blockquote>\n<p>The linker, however, seemed like it would be the one responsible for compressing RISC-V jumps which I'm not sure MachBuffer is positioned to do today. </p>\n</blockquote>\n<blockquote>\n<p>Maybe best to defer to a linker in e.g. Cranelift-as-AOT-rustc-backend cases, and omit this where compile times are more important (Cranelift-in-Wasmtime).</p>\n</blockquote>\n<p>Yeah, I agree with that. I'm not sure I want to go full relaxation on MachBuffer yet, but a good middle ground would probably be expose all label usages as unresolved relocations, and let the external linker deal with it. We could probably get some good relaxation gains that way.</p>\n</blockquote>",
        "id": 391757810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695063192
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#issuecomment-1724192143\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">issue #7047</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah yes you're right that islands are emitted <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca702da264bce69c687de3d3ba37d9215d39a587/cranelift/codegen/src/machinst/vcode.rs#L1034-L1054\">once per block</a> which is based on I::worst_case_size(). Is this perhaps a case where the worse_case_size for RISC-V isn't accurate? Or perhaps the block is so large that a jump in the middle of the block can't jump out of the block?</p>\n</blockquote>\n<p>As far as I can tell <code>worst_case_size</code> is fairly accurate, It's currently at 124 bytes. The test for it points to the maximum being 116, so it's not too far off.</p>\n<p>The block being too large seems to me the likely cause. The logs show that the full block is 8KiB, and we have a TrapIf about 1KiB into the block. That means that the closest island is 7KiB away, and the CondBr Instruction can't reach that.</p>\n<p>I think I'm going to back out of the <code>defer_trap</code> portion of this PR and land that separately, since it looks like we might need to make some changes to island checking for that to work properly with our limited branch range.</p>\n<hr>\n<blockquote>\n<p>The linker, however, seemed like it would be the one responsible for compressing RISC-V jumps which I'm not sure MachBuffer is positioned to do today. </p>\n</blockquote>\n<blockquote>\n<p>Maybe best to defer to a linker in e.g. Cranelift-as-AOT-rustc-backend cases, and omit this where compile times are more important (Cranelift-in-Wasmtime).</p>\n</blockquote>\n<p>Yeah, I agree with that. I'm not sure I want to go full relaxation on MachBuffer yet, but a good middle ground would probably be expose all label usages as unresolved relocations, and let the external linker deal with it. We could probably get some good relaxation gains that way.</p>\n</blockquote>",
        "id": 391758051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695063315
    }
]