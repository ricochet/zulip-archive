[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1516 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n</blockquote>",
        "id": 195298227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587841599
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n</blockquote>",
        "id": 195298228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587841613
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n</blockquote>",
        "id": 195303910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587850415
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n</blockquote>",
        "id": 195304798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587852118
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n</blockquote>",
        "id": 195323037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587888023
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 195323600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587888914
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 196241334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588627088
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 196243926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588628762
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 196671746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588787228
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p><strong>This PR builds upon #1561 and should only be merged after #1561 lands in upstream.</strong></p>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 196866815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588924179
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 196866915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588924252
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/pchickey\" title=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a>.</p>",
        "id": 196866927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588924268
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/pchickey\" title=\"https://github.com/pchickey\">pchickey</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a>.</p>",
        "id": 196866940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588924278
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 198359387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086438
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#pullrequestreview-416452427\">PR Review</a>.</p>",
        "id": 198369750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590091505
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#discussion_r428884239\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The C API currently only accepts paths to files for stdin/stdout/stderr, so these should probably be <code>OsFile::try_from</code>.</p>\n</blockquote>",
        "id": 198369751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590091505
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939 (hopefully!)</p>\n</blockquote>",
        "id": 200011256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591513035
    },
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939, #1636, #1735</p>\n</blockquote>",
        "id": 200012396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591515451
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#pullrequestreview-426557971\">PR Review</a>.</p>",
        "id": 200145397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591644873
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#pullrequestreview-426557971\">PR Review</a>.</p>",
        "id": 200145398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591644873
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#discussion_r436952273\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this function be merged with <code>create_preview1_instance</code> like <code>create_snapshot0_instance</code> is implemented?</p>\n</blockquote>",
        "id": 200145399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591644873
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939, #1636, #1735</p>\n</blockquote>",
        "id": 200211548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591702981
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939, #1636, #1735</p>\n</blockquote>",
        "id": 200216187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591705014
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a> from <code>vfs-stdio</code> to <code>master</code>:</p>\n<blockquote>\n<p>There have been requests to allow more than just raw OS handles to act as stdio in <code>wasi-common</code> (see #939). This PR makes this possible by loosening the requirement of the <code>WasiCtxBuilder</code> to accept any type <code>T: Handle + 'static</code> to act as any of the stdio handles.</p>\n<p>A couple words about correctness of this approach. Currently, since we only have a single <code>Handle</code> super-trait to represent all possible WASI handle types (files, dirs, stdio, pipes, virtual, etc.), it is possible to pass in any type to act as stdio which can be wrong. However, I envision this being a problem only in the near(est) future until we work out how to split <code>Handle</code> into several traits (FYI @sunfishcode and I have already started figuring this out), each representing a different type of WASI resource. In this particular case, this would be a resource which would implement the interface required for a handle to act as a stdio (with appropriate rights, etc.).</p>\n<p>@jeffcharles @pchickey The minimum this PR still needs is an audit of this approach for the time being (whether it's OK to go with it given the potential correctness problems I've outlined above). Docs around different now-public types are also a must if we decide to go with it. Oh, and I haven't really got to testing this approach, i.e., whether this is actually sufficient of a change to facilitate the requirements of #939. Any comments and feedback is thus most welcome!</p>\n<p>Closes #939, #1636, #1735</p>\n</blockquote>",
        "id": 200261861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591722930
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#pullrequestreview-427408031\">PR Review</a>.</p>",
        "id": 200267102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591725440
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">PR #1600</a>.</p>",
        "id": 200269706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591726762
    }
]