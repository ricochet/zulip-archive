[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a> from <code>alexcrichton:no-std-rebase</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is the final technical piece of #8341 which makes the <code>wasmtime</code> crate itself compatible with <code>#![no_std]</code>. This means that the crate can now be compiled on targets that don't have <code>std</code> when the activated features are a subset of <code>{runtime, gc, component-model}</code>. Support for Wasmtime requires an implementation of <code>wasmtime-platform.h</code> which is something I'd like to also start moving to release artifacts after this as well.</p>\n<p>This PR is split into a series of commits with the final one being the \"big one\" and the others are minor refactorings leading up to it. The major changes made here are:</p>\n<ul>\n<li>The \"custom\" platform of Wasmtime is now enabled by default if nothing else is applicable. This means that there's no opt-in required for no_std support.</li>\n<li>Embedders can now define a custom feature detection function, for example \"does this host support AVX\". This is because the default implementation uses the standard library while that's not available with <code>no_std</code>.</li>\n<li>Internal idioms in <code>wasmtime</code> have change to be similar to previous commits for <code>wasmtime-environ</code> and other crates, for example. For example imports come from <code>core</code> and <code>alloc</code> and there's a custom prelude for core + alloc bits and pieces.</li>\n<li>Wasmtime now unconditionally uses <code>hashbrown::HashMap</code> for some items such as <code>Linker</code> and GC sets.</li>\n<li>The <code>wasmtime</code> crate has a few \"custom synchronization primitives\" which have real implementations backed by other crates in <code>std</code> mode or \"dummy\" implementations in <code>no_std</code> mode that effectively assert for no contention. This might require updates to <code>wasmtime-platform.h</code> in the future instead.</li>\n<li>Libcall intrinsics for float-related functionality are implemented with the <code>libm</code> crate in <code>no_std</code> mode. In <code>std</code> mode they still use standard library methods.</li>\n</ul>\n<p>The main remaining piece I'd like to tackle after this is an update of the <code>no_std</code> documentation for Wasmtime. The page is outdated now and could use some updates. I'll also note that I still have yet to test all these changes beyond what CI is already doing. We don't actually test <code>no_std</code> mode in CI, only that it builds. If anything comes up though I'll work through that in follow-ups.</p>\n</blockquote>",
        "id": 436812792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708176
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436812793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708176
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436812794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708176
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436812795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708176
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436812923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708307
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436813310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714708634
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436816608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714711151
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#issuecomment-2092401732\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 436826403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714718692
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436912562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714751700
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436912810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714751773
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436914788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714752386
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2038641459\">PR review</a>.</p>",
        "id": 436923601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714755515
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1589465125\">PR review comment</a>:</p>\n<blockquote>\n<p>Undefined behavior... in Wasmtime? I thought we could be pretty sure we'd get a SIGILL or the like?</p>\n</blockquote>",
        "id": 436923603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714755515
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436929700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714757935
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 436930023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714758053
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2038738769\">PR review</a>.</p>",
        "id": 436932696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714759103
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1589553709\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll admit I don't necessarily fully understand this, but my reasoning here is derived from Rust's stance that executing intrinsics your CPU doesn't have support for is undefined behavior. There was a fair amount of discussion about this when first stabilizing SIMD in Rust and I believe the general rationale boils down to:</p>\n<ul>\n<li>There's not an ironclad guarantee that unsupported instructions raise a SIGILL for all unsupported instructions. (at least at the time what was considered was all possible extensions to all possible ISAs)</li>\n<li>There can be \"compiler weirdness\" where once a feature is enabled it has subtle changes in other parts like assemblers and other chosen instructions which can cause subtle incompatibilities on systems that don't support the instructions.</li>\n</ul>\n<p>Overall I don't think that there's a super simple \"this is why it's unsafe\" thing I can point to to justify this. I am relatively confident in saying, though, that we're probably not guaranteed a SIGILL for all possible encodings of all instructions we could use on all architectures. Coupling that with this is a niche method most won't use is mostly why I figured it'd be ok to mark this as <code>unsafe</code></p>\n</blockquote>",
        "id": 436932697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714759103
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#issuecomment-2093519389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>:</p>\n<blockquote>\n<p>(Taking a look, might be a little while to get through everything here)</p>\n</blockquote>",
        "id": 436934699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714759819
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2038889056\">PR review</a>.</p>",
        "id": 436947826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765084
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1589659195\">PR review comment</a>:</p>\n<blockquote>\n<p><code>lzcnt</code> is encoded as <code>rep bsr</code>, which has a redundant prefix. Redundant prefixes tend to be ignored, but are not guaranteed to be. As such <code>lzcnt</code> is interpreted by older cpu's as <code>bsr</code>. This bit me once in cg_clif: <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/pull/951#issuecomment-663855992\">https://github.com/rust-lang/rustc_codegen_cranelift/pull/951#issuecomment-663855992</a> See also <a href=\"https://stackoverflow.com/questions/25683690/confusion-about-bsr-and-lzcnt/43443701#43443701\">https://stackoverflow.com/questions/25683690/confusion-about-bsr-and-lzcnt/43443701#43443701</a></p>\n</blockquote>",
        "id": 436947830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765084
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039483801\">PR review</a>:</p>\n<blockquote>\n<p>ship it!</p>\n</blockquote>",
        "id": 437034253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039483801\">PR review</a>:</p>\n<blockquote>\n<p>ship it!</p>\n</blockquote>",
        "id": 437034254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590013155\">PR review comment</a>:</p>\n<blockquote>\n<p>conflict</p>\n</blockquote>",
        "id": 437034255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590014944\">PR review comment</a>:</p>\n<blockquote>\n<p>Why is <code>std</code> okay to use here? Shouldn't this use the <code>wasmtime_tls_{get,set}</code> stuff?</p>\n</blockquote>",
        "id": 437034256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590017226\">PR review comment</a>:</p>\n<blockquote>\n<p>We could also add hooks to the system interface header to help implement these and push the choice of panicking/aborting or actually doing synchronization out tot he embedder as well down the line. Again, might be worth a comment.</p>\n</blockquote>",
        "id": 437034257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590015017\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess if we are on <code>unix</code> then we know we have <code>std</code> available?</p>\n</blockquote>",
        "id": 437034258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590019025\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah okay, you got it in a later commit</p>\n</blockquote>",
        "id": 437034259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590013280\">PR review comment</a>:</p>\n<blockquote>\n<p><code>std</code>?</p>\n</blockquote>",
        "id": 437034260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590013512\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW, we could add another hook to the system interface header for this, if it is ever requested. Might be worth adding a comment about.</p>\n</blockquote>",
        "id": 437034261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590016329\">PR review comment</a>:</p>\n<blockquote>\n<p>This isn't going to accidentally bind <code>INITIALIZED</code> as a fresh variable, right? I always forget the details of when that can happen or not... Might be better to use an <code>if</code>/<code>else</code> here since there is just one checked-for case and one default case.</p>\n</blockquote>",
        "id": 437034262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714841111
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039551530\">PR review</a>.</p>",
        "id": 437053360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858232
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590161897\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that was my thinking as well in terms of moving it into the header, good point on leaving a comment though</p>\n</blockquote>",
        "id": 437053361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858232
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039551581\">PR review</a>.</p>",
        "id": 437053390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858266
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590162142\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah yeah we're ok to have the <code>match</code> here, I generally rely on the unused variables lint to catch mistakes like this. (I'll go ahead and switch it anyway to an <code>if</code>/<code>else</code> here)</p>\n</blockquote>",
        "id": 437053391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858266
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039551751\">PR review</a>.</p>",
        "id": 437053503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858382
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590163171\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I think that'd work out too, but my hope is that all std-using platforms can funnel into the first case with eprintln and most no_std platforms probably don't want unwinding anyway</p>\n</blockquote>",
        "id": 437053504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858382
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039551822\">PR review</a>.</p>",
        "id": 437053533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858430
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590163621\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah any modules which are gated on the <code>std</code> feature still import from <code>std</code> and don't need to get switched over. Here this module is only used for <code>async</code> which requires the <code>std</code> feature at this time, so we'll need to change this in the future to an import from <code>core</code> if we want the <code>async</code> feature to work on no_std for example.</p>\n</blockquote>",
        "id": 437053534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858430
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#pullrequestreview-2039551920\">PR review</a>.</p>",
        "id": 437053598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858480
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533#discussion_r1590164060\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that was my thinking, on platforms that are known to have the standard library we go ahead and just import from the standard library. Things will get a bit messier otherwise because it's not a great experience for Wasmtime to depend on <code>#[repr(C)]</code> symbols silently so I'm hoping to keep it to a minimum.</p>\n</blockquote>",
        "id": 437053599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858480
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 437053696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858564
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 437053703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858573
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 437053873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714858785
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8533\">PR #8533</a>.</p>",
        "id": 437056413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714861507
    }
]