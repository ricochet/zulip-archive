[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a> from <code>expose-raw</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is what is hopefully going to be my last installment within<br>\nthe saga of optimizing function calls in/out of WebAssembly modules in<br>\nthe C API. This is yet another alternative approach to #3345 (sorry) but<br>\nalso contains everything necessary to make the C API fast. As in #3345<br>\nthe general idea is just moving checks out of the call path in the same<br>\nstyle of <code>TypedFunc</code>.</p>\n<p>This new strategy takes inspiration from previously learned attempts<br>\neffectively \"just\" exposes how we previously passed <code>*mut u128</code> through<br>\ntrampolines for arguments/results. This storage format is formalized<br>\nthrough a new <code>ValRaw</code> union that is exposed from the <code>wasmtime</code> crate.<br>\nBy doing this it made it relatively easy to expose two new APIs:</p>\n<ul>\n<li><code>Func::new_unchecked</code></li>\n<li><code>Func::call_unchecked</code></li>\n</ul>\n<p>These are the same as their checked equivalents except that they're<br>\n<code>unsafe</code> and they work with <code>*mut ValRaw</code> rather than safe slices of<br>\n<code>Val</code>. Working with these eschews type checks and such and requires<br>\ncallers/embedders to do the right thing.</p>\n<p>These two new functions are then exposed via the C API with new<br>\nfunctions, enabling C to have a fast-path of calling/defining functions.<br>\nThis fast path is akin to <code>Func::wrap</code> in Rust, although that API can't<br>\nbe built in C due to C not having generics in the same way that Rust<br>\nhas.</p>\n<p>For some benchmarks, the benchmarks here are:</p>\n<ul>\n<li>\n<p><code>nop</code> - Call a wasm function from the host that does nothing and<br>\n  returns nothing.</p>\n</li>\n<li>\n<p><code>i64</code> - Call a wasm function from the host, the wasm function calls a<br>\n  host function, and the host function returns an <code>i64</code> all the way out to<br>\n  the original caller.</p>\n</li>\n<li>\n<p><code>many</code> - Call a wasm function from the host, the wasm calls<br>\n   host function with 5 <code>i32</code> parameters, and then an <code>i64</code> result is<br>\n   returned back to the original host</p>\n</li>\n<li>\n<p><code>i64</code> host - just the overhead of the wasm calling the host, so the<br>\n  wasm calls the host function in a loop.</p>\n</li>\n<li>\n<p><code>many</code> host - same as <code>i64</code> host, but calling the <code>many</code> host function.</p>\n</li>\n</ul>\n<p>All numbers in this table are in nanoseconds, and this is just one<br>\nmeasurement as well so there's bound to be some variation in the precise<br>\nnumbers here.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Rust</th>\n<th>C (before)</th>\n<th>C (after)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nop</td>\n<td>19</td>\n<td>112</td>\n<td>25</td>\n</tr>\n<tr>\n<td>i64</td>\n<td>22</td>\n<td>207</td>\n<td>32</td>\n</tr>\n<tr>\n<td>many</td>\n<td>27</td>\n<td>189</td>\n<td>34</td>\n</tr>\n<tr>\n<td>i64 host</td>\n<td>2</td>\n<td>38</td>\n<td>5</td>\n</tr>\n<tr>\n<td>many host</td>\n<td>7</td>\n<td>75</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>The main conclusion here is that the C API is significantly faster than<br>\nbefore when using the <code>*_unchecked</code> variants of APIs. The Rust<br>\nimplementation is still the ceiling (or floor I guess?) for performance<br>\nThe main reason that C is slower than Rust is that a little bit more has<br>\nto travel through memory where on the Rust side of things we can<br>\nmonomorphize and inline a bit more to get rid of that. Overall though<br>\nthe costs are way way down from where they were originally and I don't<br>\nplan on doing a whole lot more myself at this time. There's various<br>\nthings we theoretically could do I've considered but implementation-wise<br>\nI think they'll be much more weighty.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 253317035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631650648
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a> from <code>expose-raw</code> to <code>main</code>.</p>",
        "id": 253632309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631818626
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a> from <code>expose-raw</code> to <code>main</code>.</p>",
        "id": 253644249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631823468
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a>.</p>",
        "id": 254220295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632236022
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a> from <code>expose-raw</code> to <code>main</code>.</p>",
        "id": 254273239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632256296
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#pullrequestreview-763335282\">PR review</a>.</p>",
        "id": 254748248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632507217
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#pullrequestreview-763335282\">PR review</a>.</p>",
        "id": 254748249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632507217
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#discussion_r715800017\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we need a comment regarding the ownership of the returned value? Caller is responsible for calling <code>wasmtime_externref_delete</code>, right?</p>\n</blockquote>",
        "id": 254748250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632507217
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#discussion_r715802690\">PR review comment</a>:</p>\n<blockquote>\n<p>Should <code>ref</code> be <code>const</code> (seems like other functions in this file could use <code>const</code> for their parameters as well, e.g. <code>wasmtime_externref_clone</code>, <code>wasmtime_externref_data</code>, etc) so that there's no confusion regarding owernship?</p>\n</blockquote>",
        "id": 254748251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632507217
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#discussion_r715799604\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it more accurate to say that the returned raw value is not tracked by the garbage collector and the underlying <code>externref</code> _may_ be collected if a GC occurs, thereby leaving the raw value dangling?</p>\n<p>From this wording it sounds like the dangling is guaranteed, but if, for example, the <code>wasmtime_externref_t</code> given to this function hasn't been deleted yet, it should still have a strong reference even after a GC occurs and the raw value would still be valid, correct?</p>\n</blockquote>",
        "id": 254748252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632507217
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#pullrequestreview-763372486\">PR review</a>.</p>",
        "id": 254751367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632508476
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#discussion_r715827830\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 254751368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632508477
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a> from <code>expose-raw</code> to <code>main</code>.</p>",
        "id": 254751781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632508658
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#pullrequestreview-763374894\">PR review</a>.</p>",
        "id": 254751813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632508669
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#discussion_r715829648\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah yeah that makes sense, I've pushed some tweaks to the wording.</p>\n</blockquote>",
        "id": 254751814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632508669
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350#pullrequestreview-763390482\">PR review</a>.</p>",
        "id": 254754865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632509929
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3350\">PR #3350</a>.</p>",
        "id": 254755942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632510346
    }
]