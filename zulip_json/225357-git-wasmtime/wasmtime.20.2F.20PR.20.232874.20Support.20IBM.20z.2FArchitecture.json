[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> from <code>s390x-backend</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for the IBM z/Architecture (s390x-ibm-linux).</p>\n<p>The status of the s390x backend in its current form is:</p>\n<ul>\n<li>Wasmtime is fully functional and passes all tests on s390x.</li>\n<li>All back-end features supported, with the exception of SIMD.</li>\n<li>There is still a lot of potential for performance improvements.</li>\n<li>Currently the only supported processor type is z15.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 237194539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620061862
    },
    {
        "content": "<p>cfallin assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> to cfallin.</p>",
        "id": 237195017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620062096
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> (assigned to cfallin) from <code>s390x-backend</code> to <code>main</code>.</p>",
        "id": 237207460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620066778
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> (assigned to cfallin) from <code>s390x-backend</code> to <code>main</code>.</p>",
        "id": 237207945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620066936
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> (assigned to cfallin) from <code>s390x-backend</code> to <code>main</code>.</p>",
        "id": 237213839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620069457
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-654713713\">PR Review</a>.</p>",
        "id": 237865929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410642
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628393456\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It might be good to have a note here about the fact that no FP is used; this is slightly different than e.g. what the ASCII-art doc comment in <code>abi_impl.rs</code> describes for vanilla/common ABI details. Specifically, documenting how the SP is decremented once, including the maximum-needed outgoing args space, would be helpful, I think.</p>\n</blockquote>",
        "id": 237865930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410642
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628396851\">PR Review Comment</a>:</p>\n<blockquote>\n<p>AArch64-ism left in the comments here (but I think the same thing is true of this platform, namely that no addressing modes that modify registers are used?).</p>\n</blockquote>",
        "id": 237865932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-654713713\">PR Review</a>.</p>",
        "id": 237865933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628397642\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Same comment here as above -- assert our assumption re: register range.</p>\n</blockquote>",
        "id": 237865934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628397361\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we assert that this is only used in a way that is consistent with the regalloc metadata we generate (if I understand correctly, that would be <code>rt2 == rt + 1</code> or similar)?</p>\n</blockquote>",
        "id": 237865935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628402287\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It might be useful to factor out helpers for bit-manipulation like this (this is a sign-extend IIUC, so maybe <code>sign_extend_to_u64</code>?); I know we've been far from consistent about this in the rest of the backends, but there is no better time to start :-)</p>\n<p>Same comment to the masking below, too (<code>mask_to_bits</code> or similar).</p>\n</blockquote>",
        "id": 237865936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628400866\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this be <code>Load64SExt8</code>? (I'm not sure if a 1-to-64-bit extension is common -- perhaps this arises in <code>Bextend</code>? -- but this caught my eye, and deserves a comment if correct to note why it differs)</p>\n</blockquote>",
        "id": 237865937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628406298\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This and the below load-op fusion cases are <em>I think</em> similar to this bug we saw on x64: #2576.</p>\n<p>The fundamental issue was that we were lowering (and thus matching on the load and sinking it) a compare multiple times, whenever its flags output was used, because we do not handle flags the same way we handle other registers (and it looks like this backend is the same). The input-matching and sinking support in the core lowering logic assumes that one will only match and then sink once; in certain cases the repeats interact poorly with instruction ordering and cause undefined values to be used.</p>\n<p>We really should come up with an impossible-to-do-by-construction way of encoding this restriction in the <code>LowerCtx</code> API, but until then, <em>if</em> this is also the case here (again, I'm pattern-matching on the bug but am not certain everything is the same in this backend!), the simplest fix is just to avoid load-op merging with compares.</p>\n</blockquote>",
        "id": 237865940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620410643
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-654846900\">PR Review</a>.</p>",
        "id": 237886418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620419732
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r628501436\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I would assume that <code>Load64SExt8</code> is wrong here too. The loaded bool is likely stored as a zero extended byte, not sign extended byte and as such it would need to be a load + arithmetic shift left of 63 bits I think.</p>\n</blockquote>",
        "id": 237886419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620419732
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a> (assigned to cfallin) from <code>s390x-backend</code> to <code>main</code>.</p>",
        "id": 238146773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655293
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655682406\">PR Review</a>.</p>",
        "id": 238146990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655373
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629386893\">PR Review Comment</a>:</p>\n<blockquote>\n<p>OK, added comment.</p>\n</blockquote>",
        "id": 238146991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655373
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655683368\">PR Review</a>.</p>",
        "id": 238147145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655425
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629387566\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This comment is obsolete anyway (copied from a old version) - the current mapper design doesn't even distinguish between a pre- and post-map any more.  I've removed the comment.</p>\n</blockquote>",
        "id": 238147146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655425
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655684247\">PR Review</a>.</p>",
        "id": 238147290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655470
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629388123\">PR Review Comment</a>:</p>\n<blockquote>\n<p>No, it will actually be used with larger ranges.  I've now just implemented the correct semantics for all cases.</p>\n</blockquote>",
        "id": 238147291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655470
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655686032\">PR Review</a>.</p>",
        "id": 238147564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655567
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629389346\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Here, we cannot implement the correct semantics, because the remapper will not map one contiguous range to another contiguous range.  But here this really doesn't matter -- this code will never get called since these instructions are never present before register allocation.  (The only user of these instructions is the prologue/epilogue code.)</p>\n</blockquote>",
        "id": 238147565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655567
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655686651\">PR Review</a>.</p>",
        "id": 238147648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655603
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629389776\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is also moot.  There actually are no 1-bit memory access instructions in cranelift, so this can never happen.  I've removed all the 1-bit cases here.</p>\n</blockquote>",
        "id": 238147649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655603
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629389913\">PR Review Comment</a>:</p>\n<blockquote>\n<p>OK, done.</p>\n</blockquote>",
        "id": 238147673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655614
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655686846\">PR Review</a>.</p>",
        "id": 238147674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655614
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629392770\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point.   It actually depends on the caller -- if <code>lower_icmp_to_flags</code> is used to lower a plain <code>Icmp</code>, then it is actually correct to sink memory loads (just like for any other instruction where we're sinking memory accesses).  However, <code>lower_icmp_to_flags</code> is also used to combine longer instruction sequences, and in those cases, sinking memory loads is only legal if all intermediate instructions only have a single user (there is currently no obvious way to check for that condition in the back-end, unfortunately).  I've now added a <code>may_sink_memory</code> flag to the routine, which is set by the caller (somewhat conservatively at the moment, this can be improved once we have support for better checks).</p>\n</blockquote>",
        "id": 238148235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655821
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-655690812\">PR Review</a>.</p>",
        "id": 238148236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655822
    },
    {
        "content": "<p>uweigand edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629392770\">PR Review Comment</a>.</p>",
        "id": 238148293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620655847
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-656071096\">PR Review</a>.</p>",
        "id": 238209163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679613
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629672582\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Right, I agree -- the issue is precisely when <code>icmp</code>'s result is matched more than once as an operand of another instruction. The fix looks good -- thanks!</p>\n</blockquote>",
        "id": 238209164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679613
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-656072631\">PR Review</a>.</p>",
        "id": 238209474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679742
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629673735\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, yes, this makes sense -- thanks.</p>\n</blockquote>",
        "id": 238209475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679742
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-656073651\">PR Review</a>.</p>",
        "id": 238209735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679825
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#discussion_r629674541\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perfect, this is very helpful -- thank you!</p>\n</blockquote>",
        "id": 238209736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679826
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874#pullrequestreview-656075439\">PR Review</a>.</p>",
        "id": 238210068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620679975
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2874\">PR #2874</a>.</p>",
        "id": 238210133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620680004
    }
]