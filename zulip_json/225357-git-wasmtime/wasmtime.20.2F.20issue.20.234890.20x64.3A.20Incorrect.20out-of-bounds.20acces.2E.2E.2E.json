[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>This input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (param i32) (result f32)\n    f32.const 0\n    local.get 0\n    f32.load offset=1\n    f32.copysign\n  )\n  (memory 1)\n  (export \"\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x2e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but the trap reported here is incorrect because there is no out-of-bounds memory access in this module. Instead what's happening is that in the compile function:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">0000000000000000</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"nf\">_wasm_function_0</span><span class=\"err\">&gt;</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">0:</span><span class=\"w\">       </span><span class=\"err\">55</span><span class=\"w\">                      </span><span class=\"nf\">push</span><span class=\"w\">   </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">1:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">e5</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">4:</span><span class=\"w\">       </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">c2</span><span class=\"w\">                   </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%edx</span><span class=\"p\">,</span><span class=\"nv\">%eax</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">6:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"mi\">0x50</span><span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span><span class=\"nv\">%rcx</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"nf\">ba</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\">       </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">$0x80000000</span><span class=\"p\">,</span><span class=\"nv\">%r10d</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">10:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">45</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">e</span><span class=\"w\"> </span><span class=\"no\">da</span><span class=\"w\">          </span><span class=\"no\">movd</span><span class=\"w\">   </span><span class=\"nv\">%r10d</span><span class=\"p\">,</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">15:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">          </span><span class=\"no\">movdqa</span><span class=\"w\"> </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">1</span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">andnps</span><span class=\"w\"> </span><span class=\"mi\">0xf</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span><span class=\"nv\">%xmm0</span><span class=\"w\">        </span><span class=\"c1\"># 30 &lt;_wasm_function_0+0x30&gt;</span>\n<span class=\"w\">      </span><span class=\"err\">21:</span><span class=\"w\">       </span><span class=\"err\">44</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"no\">c</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">       </span><span class=\"no\">andps</span><span class=\"w\">  </span><span class=\"mi\">0x1</span><span class=\"p\">(</span><span class=\"nv\">%rcx</span><span class=\"p\">,</span><span class=\"nv\">%rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">27:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">             </span><span class=\"no\">orps</span><span class=\"w\">   </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">b:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">e:</span><span class=\"w\">       </span><span class=\"err\">5</span><span class=\"nf\">d</span><span class=\"w\">                      </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">f:</span><span class=\"w\">       </span><span class=\"nf\">c3</span><span class=\"w\">                      </span><span class=\"no\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The instruction at 0x21 is segfaulting due to a misaligned address. The segfault is also registered as a trap point in Wasmtime since I believe this is a folding of the <code>f32.load</code> into the <code>f32.copysign</code> and so this could also segfault due to an out-of-bounds memory access.</p>\n<p>Bisection reveals that this issue become a segfault in #4730 and then became a trap in #4790 (cc @elliottt). We'll want to be sure to backport the fix for this to the release-1.0.0 branch as well.</p>\n</blockquote>",
        "id": 298028845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662747219
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>This input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (param i32) (result f32)\n    f32.const 0\n    local.get 0\n    f32.load offset=1\n    f32.copysign\n  )\n  (memory 1)\n  (export \"\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x2e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but the trap reported here is incorrect because there is no out-of-bounds memory access in this module. Instead what's happening is that in the compile function:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">0000000000000000</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"nf\">_wasm_function_0</span><span class=\"err\">&gt;</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">0:</span><span class=\"w\">       </span><span class=\"err\">55</span><span class=\"w\">                      </span><span class=\"nf\">push</span><span class=\"w\">   </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">1:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">e5</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">4:</span><span class=\"w\">       </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">c2</span><span class=\"w\">                   </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%edx</span><span class=\"p\">,</span><span class=\"nv\">%eax</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">6:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"mi\">0x50</span><span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span><span class=\"nv\">%rcx</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"nf\">ba</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\">       </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">$0x80000000</span><span class=\"p\">,</span><span class=\"nv\">%r10d</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">10:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">45</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">e</span><span class=\"w\"> </span><span class=\"no\">da</span><span class=\"w\">          </span><span class=\"no\">movd</span><span class=\"w\">   </span><span class=\"nv\">%r10d</span><span class=\"p\">,</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">15:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">          </span><span class=\"no\">movdqa</span><span class=\"w\"> </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">1</span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">andnps</span><span class=\"w\"> </span><span class=\"mi\">0xf</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span><span class=\"nv\">%xmm0</span><span class=\"w\">        </span><span class=\"c1\"># 30 &lt;_wasm_function_0+0x30&gt;</span>\n<span class=\"w\">      </span><span class=\"err\">21:</span><span class=\"w\">       </span><span class=\"err\">44</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"no\">c</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">       </span><span class=\"no\">andps</span><span class=\"w\">  </span><span class=\"mi\">0x1</span><span class=\"p\">(</span><span class=\"nv\">%rcx</span><span class=\"p\">,</span><span class=\"nv\">%rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">27:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">             </span><span class=\"no\">orps</span><span class=\"w\">   </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">b:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">e:</span><span class=\"w\">       </span><span class=\"err\">5</span><span class=\"nf\">d</span><span class=\"w\">                      </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">f:</span><span class=\"w\">       </span><span class=\"nf\">c3</span><span class=\"w\">                      </span><span class=\"no\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The instruction at 0x21 is segfaulting due to a misaligned address. The segfault is also registered as a trap point in Wasmtime since I believe this is a folding of the <code>f32.load</code> into the <code>f32.copysign</code> and so this could also segfault due to an out-of-bounds memory access.</p>\n<p>Bisection reveals that this issue become a segfault in #4730 and then became a trap in #4790 (cc @elliottt). We'll want to be sure to backport the fix for this to the release-1.0.0 branch as well.</p>\n</blockquote>",
        "id": 298028847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662747219
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242353179\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>It seems like we want a stronger condition in <code>put_in_xmm_mem</code>, as we need to know that it's a mergeable load and 16-byte aligned to merge the load:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower/isle.rs#L169-L175\">https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower/isle.rs#L169-L175</a></p>\n</blockquote>",
        "id": 298035149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662749796
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242411294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>I sort of suspect that we will find most loads encountered by <code>put_in_xmm_mem</code> won't have any known alignment (greater than 1 byte); at least, in CLIF lowered from Wasm, that will be the case, since Wasm SIMD loads must work with unaligned addresses. The simplest fix here may just be to remove load-op merging in the XMM case, and always force to a register (i.e., delete exactly the lines you highlighted). Thoughts?</p>\n</blockquote>",
        "id": 298045723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662753988
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242420623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>I was just experimenting with that fix and was going to suggest it :) I'll make a PR!</p>\n</blockquote>",
        "id": 298047250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662754657
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242430471\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>In cg_clif we do almost always know an alignment bigger than 1.</p>\n</blockquote>",
        "id": 298048686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662755326
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242460964\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<blockquote>\n<p>In cg_clif we do almost always know an alignment bigger than 1.</p>\n</blockquote>\n<p>Fair enough; we can eventually look at adding this back, while respecting alignment, but IMHO we should fix the fuzzbug first in the most straightforward way, especially given we want to cherry-pick this to the 1.0 branch too :-)</p>\n</blockquote>",
        "id": 298051642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662756744
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242461113\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>Here's another option: in <code>is_mergable_load</code> we currently only require alignment of the load if the type being loaded is a vector type. Why don't we extend this to floating point types as well?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower.rs#L107-L111\">https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower.rs#L107-L111</a></p>\n</blockquote>",
        "id": 298051660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662756755
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242461113\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>Here's another option: in <code>is_mergable_load</code> we currently only require the address to be aligned if the type being loaded is a vector type. Why don't we extend this to floating point types as well?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower.rs#L107-L111\">https://github.com/bytecodealliance/wasmtime/blob/2986f6b0fffd576a2ba88a1fc6cb2db959a1f9e8/cranelift/codegen/src/isa/x64/lower.rs#L107-L111</a></p>\n</blockquote>",
        "id": 298051701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662756790
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242462886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>We could also pass a flag to <code>is_mergeable_load</code> that indicates if the destination would be an xmm register, and use that in place of the check for <code>load_ty.is_vector()</code>.</p>\n</blockquote>",
        "id": 298051973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662756915
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242463548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>Possibly, yeah, though it's less obviously clear to me that this covers all cases (e.g. what if some lowering were to somehow load an integer-typed value into an XMM register?). The proximate cause here is that loads into XMM registers merged into SSE instructions need to be aligned, so I'd prefer to take the more risk-averse option for the initial fix and turn that path off altogether, I think...</p>\n</blockquote>",
        "id": 298052097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662756966
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1242464892\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>For now, never merging the loads is obviously correct, and we can always revisit this later :)</p>\n</blockquote>",
        "id": 298052248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662757073
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>This input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (param i32) (result f32)\n    f32.const 0\n    local.get 0\n    f32.load offset=1\n    f32.copysign\n  )\n  (memory 1)\n  (export \"\" (func 0))\n)\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"o\">''</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">shrunken</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x2e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but the trap reported here is incorrect because there is no out-of-bounds memory access in this module. Instead what's happening is that in the compile function:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">0000000000000000</span><span class=\"w\"> </span><span class=\"err\">&lt;</span><span class=\"nf\">_wasm_function_0</span><span class=\"err\">&gt;</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">0:</span><span class=\"w\">       </span><span class=\"err\">55</span><span class=\"w\">                      </span><span class=\"nf\">push</span><span class=\"w\">   </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">1:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">e5</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">4:</span><span class=\"w\">       </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">c2</span><span class=\"w\">                   </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%edx</span><span class=\"p\">,</span><span class=\"nv\">%eax</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"err\">6:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">8</span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"mi\">0x50</span><span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span><span class=\"nv\">%rcx</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"nf\">ba</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\">       </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"no\">$0x80000000</span><span class=\"p\">,</span><span class=\"nv\">%r10d</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">10:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">45</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">e</span><span class=\"w\"> </span><span class=\"no\">da</span><span class=\"w\">          </span><span class=\"no\">movd</span><span class=\"w\">   </span><span class=\"nv\">%r10d</span><span class=\"p\">,</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">15:</span><span class=\"w\">       </span><span class=\"err\">66</span><span class=\"w\"> </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">          </span><span class=\"no\">movdqa</span><span class=\"w\"> </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">1</span><span class=\"nl\">a:</span><span class=\"w\">       </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"no\">f</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"no\">andnps</span><span class=\"w\"> </span><span class=\"mi\">0xf</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span><span class=\"nv\">%xmm0</span><span class=\"w\">        </span><span class=\"c1\"># 30 &lt;_wasm_function_0+0x30&gt;</span>\n<span class=\"w\">      </span><span class=\"err\">21:</span><span class=\"w\">       </span><span class=\"err\">44</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"no\">c</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">       </span><span class=\"no\">andps</span><span class=\"w\">  </span><span class=\"mi\">0x1</span><span class=\"p\">(</span><span class=\"nv\">%rcx</span><span class=\"p\">,</span><span class=\"nv\">%rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"nv\">%xmm11</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">27:</span><span class=\"w\">       </span><span class=\"err\">41</span><span class=\"w\"> </span><span class=\"err\">0</span><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"w\"> </span><span class=\"no\">c3</span><span class=\"w\">             </span><span class=\"no\">orps</span><span class=\"w\">   </span><span class=\"nv\">%xmm11</span><span class=\"p\">,</span><span class=\"nv\">%xmm0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">b:</span><span class=\"w\">       </span><span class=\"err\">48</span><span class=\"w\"> </span><span class=\"err\">89</span><span class=\"w\"> </span><span class=\"nf\">ec</span><span class=\"w\">                </span><span class=\"no\">mov</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">e:</span><span class=\"w\">       </span><span class=\"err\">5</span><span class=\"nf\">d</span><span class=\"w\">                      </span><span class=\"no\">pop</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"err\">2</span><span class=\"nl\">f:</span><span class=\"w\">       </span><span class=\"nf\">c3</span><span class=\"w\">                      </span><span class=\"no\">retq</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The instruction at 0x21 is segfaulting due to a misaligned address. The segfault is also registered as a trap point in Wasmtime since I believe this is a folding of the <code>f32.load</code> into the <code>f32.copysign</code> and so this could also segfault due to an out-of-bounds memory access.</p>\n<p>Bisection reveals that this issue become a segfault in #4730 and then became a trap in #4790 (cc @elliottt). We'll want to be sure to backport the fix for this to the release-1.0.0 branch as well.</p>\n</blockquote>",
        "id": 298425744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663002877
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1244054387\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>Perhaps there should be an issue to revisit this later? @elliottt brought up what seemed to me like good avenues for fixing this.</p>\n</blockquote>",
        "id": 298426570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663003173
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1244121445\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>@elliottt also would you be up for backporting this to the release-1.0.0 branch? If not no worries and I can do that as well.</p>\n</blockquote>",
        "id": 298437004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663006623
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890#issuecomment-1244125217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4890\">issue #4890</a>:</p>\n<blockquote>\n<p>Absolutely, I'll make a PR today and send it to you for review.</p>\n</blockquote>",
        "id": 298437664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663006843
    }
]