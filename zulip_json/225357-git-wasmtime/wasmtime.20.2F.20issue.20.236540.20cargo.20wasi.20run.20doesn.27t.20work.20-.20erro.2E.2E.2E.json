[
    {
        "content": "<p>thinkrapido opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>when I execute <code>cargo wasi run</code>, I get following error</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">error: failed to run custom build command for `cranelift-codegen v0.96.3`</span>\n\n<span class=\"go\">Caused by:</span>\n<span class=\"go\">  process didn't exit successfully: `&lt;home&gt;/Work/rust/wasm/wasm-in-wasm/target/debug/build/cranelift-codegen-ca47549c9dd955cf/build-script-build` (exit status: 101)</span>\n<span class=\"go\">  --- stderr</span>\n<span class=\"go\">  thread 'main' panicked at 'error when identifying target: \"no supported isa found for arch `wasm32`\"', &lt;home&gt;/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cranelift-codegen-0.96.3/build.rs:43:53</span>\n<span class=\"go\">  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n<span class=\"go\">warning: build failed, waiting for other jobs to finish...</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 364396731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686172548
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1581540063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>Wasmtime itself can't be compiled for webassembly. Wasmtime uses a jit compiler, which isn't supported by webassembly.</p>\n</blockquote>",
        "id": 364399235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686173560
    },
    {
        "content": "<p>thinkrapido <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1581640242\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>I think, I understood the problem space.</p>\n<p>I tried to compile the example itself as a wasm.</p>\n<p>This broke the compilation.</p>\n<p>cranelift relys on platform specific libraries.</p>\n<p>when I switched to wasmi, an pure rust implementation, the compilation went through.</p>\n<p>Please confirm my assumption of the problem space.</p>\n</blockquote>",
        "id": 364412412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686179917
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1581664485\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>Wasmtime is a WebAssembly engine which internally compiles the user's WebAssembly code to fast native code using the Cranelift code generator. Wasmtime cannot be compiled to WebAssembly because WebAssembly does not have the facilities for executing code generated from inside WebAssembly.</p>\n<p>If you're trying to compile Wasmtime for the WebAssembly target, that would be to run it inside another WebAssembly engine. This is not possible.</p>\n<p>If you want to execute WebAssembly using Wasmtime, you just need to compile Wasmtime for your computer's native architecture (i.e. do not pass cargo a <code>--target</code> flag).</p>\n<p>Wasmi is a WebAssembly engine which internally is just an interpreter, so it does not generate any native code as part of executing WebAssembly. This means it is indeed possible to compile it to WebAssembly. I don't know why you would do that, but if you really do need that, wasmi will work and wasmtime will not.</p>\n</blockquote>",
        "id": 364415144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686181919
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1581664485\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>Wasmtime is a WebAssembly engine which internally compiles the user's WebAssembly code to fast native code using the Cranelift code generator. Wasmtime cannot be compiled to WebAssembly because WebAssembly does not have the facilities for executing code generated from inside WebAssembly.</p>\n<p>If you're trying to compile Wasmtime for the WebAssembly target, that would be to run it inside another WebAssembly engine. This is not possible.</p>\n<p>If you want to execute WebAssembly using Wasmtime, you just need to compile Wasmtime for your computer's native architecture (i.e. do not pass cargo a <code>--target</code> flag). <code>cargo wasi</code> already contains a Wasmtime which is compiled for your native architecture. It doesn't make sense to run <code>cargo wasi run</code> for the the wasmtime (or wasmtime-cli) crate. Instead, you should find or write a Rust crate which is a WebAssembly program, and then you can use <code>cargo wasi run</code> to compile and execute it inside wasmtime.</p>\n<p>Wasmi is a WebAssembly engine which internally is just an interpreter, so it does not generate any native code as part of executing WebAssembly. This means it is indeed possible to compile it to WebAssembly, and run it inside Wasmtime using <code>cargo wasi run</code>. I don't know why you would do that, but it is possible.</p>\n</blockquote>",
        "id": 364415447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686182135
    },
    {
        "content": "<p>thinkrapido <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1583113278\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>the problem is, that I like to run webassembly within a webassembly and wasmtime setting up a runtime within a webassembly is not possible, because it depends on shared libraries defined in the host system, which are not contained with the webassembly environment itself. Therefore I need wasmi as an interpretter to run webassemblies within an webassembly. this is mentioned before by @bjorn3 </p>\n</blockquote>",
        "id": 364642268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686247665
    },
    {
        "content": "<p>thinkrapido <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540#issuecomment-1583115109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>I'm going to close this ticket, because for my specific use case it is not working and not possible at all.</p>\n</blockquote>",
        "id": 364642700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686247766
    },
    {
        "content": "<p>thinkrapido closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6540\">issue #6540</a>:</p>\n<blockquote>\n<p>when I execute <code>cargo wasi run</code>, I get following error</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">error: failed to run custom build command for `cranelift-codegen v0.96.3`</span>\n\n<span class=\"go\">Caused by:</span>\n<span class=\"go\">  process didn't exit successfully: `&lt;home&gt;/Work/rust/wasm/wasm-in-wasm/target/debug/build/cranelift-codegen-ca47549c9dd955cf/build-script-build` (exit status: 101)</span>\n<span class=\"go\">  --- stderr</span>\n<span class=\"go\">  thread 'main' panicked at 'error when identifying target: \"no supported isa found for arch `wasm32`\"', &lt;home&gt;/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cranelift-codegen-0.96.3/build.rs:43:53</span>\n<span class=\"go\">  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace</span>\n<span class=\"go\">warning: build failed, waiting for other jobs to finish...</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 364642702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686247766
    }
]