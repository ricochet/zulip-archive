[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1178370223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 288879854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657236853
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1181203460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>First, some quick things before the complicated notes:</p>\n<ul>\n<li>\n<p>Let's drop the <code>#[derive]</code> syntax from the macro. Instead, always derive both <code>Lift</code> and <code>Lower</code>. I checked with @alexcrichton that there's no reason to derive only one of them for flags. He mentioned someone might want to derive <code>Serialize</code> or something, but we can add support for that later if it comes up.</p>\n</li>\n<li>\n<p>I suspect the constants for individual flags are going to be a pain to use in practice, and inefficient for large numbers of flags. In particular, the only way I see to check if a flag is set is <code>flags &amp; Foo::C != Foo::default()</code>. I'm thinking I'd prefer a Rust <code>enum Foo</code>, plus a <code>FooSet</code> type that has methods like <code>get(&amp;self, bit: Foo) -&gt; bool</code> and <code>set(&amp;mut self, bit: Foo)</code>. But I'm open to other suggestions.</p>\n</li>\n</ul>\n<p>So a macro invocation might look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">flags</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FooSet</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"foo-bar-baz\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now: After a lot of thought, I suspect that implementing <code>flags</code> can be quite a bit simpler than this, given a slightly different perspective.</p>\n<p>The first observation is that WebAssembly specifies that multi-byte values are stored in linear memory in little-endian order. So even though the canonical ABI specifies flags using 8, 16, or 32-bit quantities, all flags types can be treated uniformly as byte-arrays in <code>load</code> and <code>store</code>. Flag indexing works out the same way regardless. That in turn means we can implement those methods as pure memory copies, as long as we define the Rust types as minimum-length byte arrays. (For anything more than 2 bytes, <code>store</code> also should write zeros in the last <code>-n&amp;3</code> bytes.)</p>\n<p>The next observation is that wasmtime's <code>ValRaw</code> type, used when values are <code>lower</code>ed to or <code>lift</code>ed from the wasm stack, doesn't distinguish types smaller than 32 bits. So if the Rust-side definition of a flags type is a byte array, then no matter how many flags there are, it's correct to use <code>u32::from_le_bytes</code> or <code>u32::to_le_bytes</code> to map every four-byte chunk into a <code>ValRaw</code>, padding the last chunk with zeros if necessary.</p>\n<p>I'm wondering if we could go as far as having a single <code>Flags</code> type provided in the <code>wasmtime</code> crate, with type parameters for the array of <code>ValRaw</code> used as its <code>ComponentType::Lower</code> type, and for the array of bytes used as its Rust representation. An additional type parameter could refer to a type with a type-level constant containing the list of flag names, for use during type-checking and in <code>Debug</code>. (It'd be nice to compute some type parameters from others, but as far as I can tell Rust can't currently do that. I'd list what I tried but this note is already too long.)</p>\n<p>Then all of <code>ComponentType</code>, <code>Lift</code>, <code>Lower</code>, <code>Eq</code>, <code>Debug</code>, <code>BitOr</code>, etc can be implemented once for the generic <code>Flags</code> type. The <code>flags</code> macro just needs to emit a type alias to <code>Flags</code> with the appropriate type parameters filled in. I think at that point it might be simple enough that we can write it as a <code>macro_rules</code> macro.</p>\n<p>Consistently using byte arrays means there's nothing special about the 1-byte or 2-byte encodings when deciding what mask to use for the last few flags. If number of flags <code>n</code> mod 8 is 0, then no mask is necessary; otherwise, the last byte should be masked with <code>!(0xFFu8 &lt;&lt; (n % 8))</code>. Any function that needs to know the number of flags can get it from the length of the list of names, available from the third type-parameter on <code>Flags</code>.</p>\n<p>I believe you can also write impls for specific instantiations of <code>Flags</code> to declare things like <code>{ const A: FlagType = ...; }</code> without running afoul of Rust's orphaned impl rules. That said, I think asking the user of the <code>flags!</code> macro to provide both an <code>enum Foo</code> type name and a <code>FooSet</code> type name will work out better.</p>\n<p>This was a lot, sorry. I hope it made some sense and I want to hear what you think of it; I'm not certain it's better, I just think it has good odds of working out well.</p>\n</blockquote>",
        "id": 289268276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657588331
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1181742977\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>Personally I don't feel the same way about <code>Foo</code> and <code>FooSet</code>. The <code>flags</code> type in the component model I see as basically analagous to the <code>FooSet</code> idea so I'm not sure if it also justifies the existence of <code>Foo</code>. That sort of feels like too much boilerplate to me. That being said I don't really feel too strongly.</p>\n<p>I'd also caution to avoid going too crazy with the representation just yet. I don't feel like we've got a real handle on what performance pitfalls are, how this will all be used, and how it all integrates into a final experience. In that sense I think it might be premature to sink too much design effort into a small niche of the component model when it's not clear if it'll pay off or be worth it in the end.</p>\n</blockquote>",
        "id": 289320892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657631495
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1181810213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>@jameysharp You've clearly put a lot more thought into this than I have, and I think you've got some great ideas. I don't use bit flags much in day-to-day application-level code, so it's not a topic I have any strong opinions about.</p>\n<p>My overall goal is to get the component model implemented in <code>wasmtime</code> and other key projects ASAP, so I'm biased in favor of going with what we have for now (possibly with some tweaks where appropriate, such as always deriving both <code>Lift</code> and <code>Lower</code>) and refining it later once we have some real world experience, like Alex suggests.</p>\n<p>I'll go ahead now and remove the <code>derive</code> syntax from the macro, since that's easy.</p>\n</blockquote>",
        "id": 289329405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657635065
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1182016233\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>Quick detail first: I don't think the mask trick I described works unless you guard against the case where <code>len%bits==0</code>. In that case you could avoid masking entirely, or there are several other ways to do it, but without bigger changes to code structure it's a little tricky. Perhaps there should be tests for exactly 8/16/32 flags, as I believe the current version will panic in debug builds for those cases. Feel free to go back to the loops if you don't want to think about it.</p>\n<p>Okay, I can see I dove into technical details without making my motivations clear. I was trying to address two high-level concerns: one is API design, and the other is ease of maintenance of the implementation.</p>\n<p>At the moment I'm mostly concerned about implementation complexity. Procedural macros are complicated. I don't see any way around using them for <code>#[deriving]</code>. But this PR adds half as much code to <code>component-macro</code> to support flags as that crate has for all the other cases put together. Since we aren't using <code>#[deriving]</code> for flags, I think we can put most of the complexity in library code instead, and either avoid proc-macros entirely or at least add very little code there.</p>\n<p>Even if we stick entirely with proc-macros, much of the new code is due to duplication around the size 1/2/4+ split, as well as trying to reuse the deriving implementation for records. My motivation for suggesting byte arrays is that it eliminates a bunch of special cases, as well as minimizing the amount of generated code since you can just loop over the flags instead.</p>\n<p>I also want to be clear that I hadn't come up with an alternative until I spent time understanding what you've done in this PR and why. I think the effort you put into this was important for moving component model implementation forward, regardless of whether we merge it as-is&mdash;which we may do.</p>\n<p>Finally, I don't mind dropping the API design questions. Yes, we should bias toward getting something merged. The syntax in the <code>flags!</code> macro isn't particularly important because we expect it to be auto-generated by <code>wit-bindgen</code>, not maintained by hand. I'm a little more concerned about API design for how the host can interact with these flag-sets, but sure, we're not promising any stable API here so we can futz with it later.</p>\n<p>So with all that said: @dicej, please fix the mask generation; and @alexcrichton, I'd appreciate your take on implementation complexity.</p>\n</blockquote>",
        "id": 289354896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657645206
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1182109207\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>Personally I agree that we don't want the implementation complexity too high right now in the abstract. The component model is still very early-days and we should be focusing primarily on correctness rather than speed for now (until we get to the point where we have a concrete thing to benchmark). Having skimmed this over this seems fine to me complexity-wise, but I'm also coming from the other 10k+ lines of code related to the component model elsewhere so my calibration is not always the same as others'</p>\n</blockquote>",
        "id": 289361230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657648040
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414#issuecomment-1182603299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4414\">issue #4414</a>:</p>\n<blockquote>\n<p>Yeah, you're both right: I'll go ahead and merge this. I might go try implementing my proposal afterward, but yes, it's better to merge this than not.</p>\n<p>Also, thanks for the comprehensive mask fix and additional tests, @dicej! This is all strong work, like your earlier PRs.</p>\n</blockquote>",
        "id": 289399989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657669604
    }
]