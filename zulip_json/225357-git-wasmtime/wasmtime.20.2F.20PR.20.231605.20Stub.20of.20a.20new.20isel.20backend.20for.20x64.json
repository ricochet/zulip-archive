[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">PR #1605</a> from <code>rebase-x64</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a draft-ish PR containing a rebase of Julian's x64 work on the new isel backend, including quite a few refactorings of mine. During today's Cranelift meeting, we agreed that it might make sense to add the incomplete backend here, allowing incremental development by more contributors.</p>\n<p>I've tried to split the files in a way that was similar to the aarch64 backend, but some things might still be wobbly; I might check this a bit further more tomorrow. Of course, that's also something we could do as follow-up PRs.</p>\n<p>The new x64 backend is controlled by a new Cargo feature <code>x64</code> (which also requires <code>x86</code>). Then, users of <code>clif-util</code> can use the <code>--target x86_64</code> argument, and:</p>\n<ul>\n<li>get the code generated by the current isel (with legalization, Recipes, Encodings, etc.) and regalloc if nothing more is provided.</li>\n<li>or add <code>--set use_new_backend</code> and this will use the new isel backend. (Expect panics, unimplemented errors, etc.)</li>\n</ul>\n<p>Second (small) commit is what allows passing ISA-specific flags to <code>--set</code>, which wasn't implemented yet.</p>\n</blockquote>",
        "id": 195444931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588006339
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401149846\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401149846\">PR Review</a>.</p>",
        "id": 195446508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588006935
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415988543\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415988543\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>fn xmm(num: u8) -&gt; Reg {\n    fpr(num, 14 + num)\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 195446509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588006935
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401151120\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401151120\">PR Review</a>.</p>",
        "id": 195446676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007031
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415989686\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415989686\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Please return the original triple as passed to <code>isa_builder</code>.</p>\n</blockquote>",
        "id": 195446677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007032
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401153007\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401153007\">PR Review</a>.</p>",
        "id": 195447024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007178
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415991358\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415991358\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    if isa_flags.use_new_backend() {\n        #[cfg(feature = &quot;x64&quot;)]\n        {\n            use super::x64;\n            return x64::isa_builder(triple).finish(shared_flags)\n        }\n        #[cfg(not(feature = &quot;x64&quot;))]\n        {\n            panic!(&quot;new backend x86 support not included by cargo features!&quot;);\n        }\n    } else {\n        Box::new(Isa {\n            triple,\n            isa_flags,\n            shared_flags,\n            cpumode: level1,\n        })\n    }\n</pre></div>\n\n\n</blockquote>",
        "id": 195447025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007178
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401154915\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401154915\">PR Review</a>.</p>",
        "id": 195447325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007323
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415992994\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415992994\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There is already a way to have target specific settings: <code>target riscv32 supports_m=1</code></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d6b158992697546dfda982495bfa7572668a9888/cranelift/filetests/filetests/isa/riscv/expand-i32.clif#L4\" title=\"https://github.com/bytecodealliance/wasmtime/blob/d6b158992697546dfda982495bfa7572668a9888/cranelift/filetests/filetests/isa/riscv/expand-i32.clif#L4\">https://github.com/bytecodealliance/wasmtime/blob/d6b158992697546dfda982495bfa7572668a9888/cranelift/filetests/filetests/isa/riscv/expand-i32.clif#L4</a></p>\n</blockquote>",
        "id": 195447326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007323
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995096\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995096\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// `simm32` is its sign-extension out to 64 bits.\n</pre></div>\n\n\n</blockquote>",
        "id": 195447660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007502
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401157261\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401157261\">PR Review</a>.</p>",
        "id": 195447661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007502
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401157866\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401157866\">PR Review</a>.</p>",
        "id": 195447781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007552
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995677\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995677\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    /// the signless, non-extending (N x N -&gt; N, for N in {32,64}) variant\n    Mul,\n</pre></div>\n\n\n</blockquote>",
        "id": 195447782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007552
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401158043\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401158043\">PR Review</a>.</p>",
        "id": 195447794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007564
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995826\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415995826\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// These indicate ways of extending (widening) a value, using the Intel\n/// naming: B(yte) = u8, W(ord) = u16, L(ong)word = u32, Q(uad)word = u64\n</pre></div>\n\n\n</blockquote>",
        "id": 195447796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007564
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401160373\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401160373\">PR Review</a>.</p>",
        "id": 195448151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007742
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415997847\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415997847\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    /// byte -&gt; long word\n    BL,\n    /// byte -&gt; quad word\n    BQ,\n    /// word -&gt; long word\n    WL,\n    /// word -&gt; quad word\n    WQ,\n    /// long -&gt; quad word\n    LQ,\n</pre></div>\n\n\n<p>Also is there no byte -&gt; word variant?</p>\n</blockquote>",
        "id": 195448152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007742
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162651\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162651\">PR Review</a>.</p>",
        "id": 195448539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007919
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415999992\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r415999992\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    /// overflow\n    O = 0,\n    /// no overflow\n    NO = 1,\n    /// &lt;u\n    B = 2,\n    /// &gt;= u\n    NB = 3,\n    /// zero\n    Z = 4,\n    /// not zero\n    NZ = 5,\n    /// &lt;=u\n    BE = 6,\n    /// &gt;u\n    NBE = 7,\n    /// negative\n    S = 8,\n    /// not negative\n    NS = 9,\n    /// &lt;s\n    L = 12,\n    /// &gt;=s\n    NL= 13,\n    /// &lt;=s\n    LE = 14,\n    /// &gt;s\n    NLE = 15,\n</pre></div>\n\n\n</blockquote>",
        "id": 195448540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007920
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162815\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162815\">PR Review</a>.</p>",
        "id": 195448568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007933
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000150\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000150\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>        self as u8\n</pre></div>\n\n\n</blockquote>",
        "id": 195448570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007933
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162947\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401162947\">PR Review</a>.</p>",
        "id": 195448593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007945
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000280\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000280\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>#[derive(Copy, Clone)]\n#[repr(u8)]\n</pre></div>\n\n\n</blockquote>",
        "id": 195448595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007945
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401163364\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401163364\">PR Review</a>.</p>",
        "id": 195448643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007978
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000652\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416000652\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>            CC::O =&gt; CC::NO,\n            CC::NO =&gt; CC::O,\n\n            CC::B =&gt; CC::NB,\n            CC::NB =&gt; CC::B,\n\n            CC::Z =&gt; CC::NZ,\n            CC::NZ =&gt; CC::Z,\n\n            CC::BE =&gt; CC::NBE,\n            CC::NBE =&gt; CC::BE,\n\n            CC::S =&gt; CC::NS,\n            CC::NS =&gt; CC::S,\n\n            CC::L =&gt; CC::NL,\n            CC::NL =&gt; CC::L,\n\n            CC::LE =&gt; CC::NLE,\n            CC::NLE =&gt; CC::LE,\n</pre></div>\n\n\n</blockquote>",
        "id": 195448644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588007978
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401164739\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401164739\">PR Review</a>.</p>",
        "id": 195448889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008089
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416001860\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416001860\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// Don&#39;t build these directly.  Instead use the `Inst::*` functions to create them.\n</pre></div>\n\n\n</blockquote>",
        "id": 195448890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008090
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401165127\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401165127\">PR Review</a>.</p>",
        "id": 195448938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008122
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416002197\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416002197\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    Ret,\n</pre></div>\n\n\n</blockquote>",
        "id": 195448939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008122
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401165558\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401165558\">PR Review</a>.</p>",
        "id": 195449045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008157
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416002583\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416002583\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Why? You can just emit multiple nop instructions, right?</p>\n</blockquote>",
        "id": 195449046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008157
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401168541\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401168541\">PR Review</a>.</p>",
        "id": 195449499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008380
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416005342\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416005342\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>                s + &amp;format!(&quot;{nil: &lt;width$}&quot;, nil = &quot;&quot;, width = need)\n</pre></div>\n\n\n</blockquote>",
        "id": 195449500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008380
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401169043\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401169043\">PR Review</a>.</p>",
        "id": 195449569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008415
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416005865\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416005865\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>                _ =&gt; panic!(&quot;Inst(x64).show.suffixBWLQ (size={})&quot;, size),\n</pre></div>\n\n\n</blockquote>",
        "id": 195449570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008415
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401169916\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401169916\">PR Review</a>.</p>",
        "id": 195449712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008480
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006659\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006659\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // For registers that appear in a read role, apply `pre_map`.  For those\n    // that appear in a write role, apply `post_map`.  For registers that\n</pre></div>\n\n\n</blockquote>",
        "id": 195449713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008480
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170090\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170090\">PR Review</a>.</p>",
        "id": 195449779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008493
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006817\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006817\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // Note that this function must be closely coordinated with `fn regs`, in\n    // the sense that each arm &quot;agrees&quot; with the one in `fn regs` about which\n</pre></div>\n\n\n</blockquote>",
        "id": 195449780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008493
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170228\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170228\">PR Review</a>.</p>",
        "id": 195449800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008504
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006951\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416006951\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>            apply_map(dst, pre_map); // yes, really `pre_map`\n</pre></div>\n\n\n</blockquote>",
        "id": 195449801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008505
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170377\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170377\">PR Review</a>.</p>",
        "id": 195449820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008516
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007087\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007087\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>        // conceivably use `movl %reg, %reg` to zero out the top 32 bits of\n</pre></div>\n\n\n</blockquote>",
        "id": 195449821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008516
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170875\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401170875\">PR Review</a>.</p>",
        "id": 195449896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008555
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007592\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007592\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>            collector.add_use(*dst); // yes, really `add_use`\n</pre></div>\n\n\n</blockquote>",
        "id": 195449898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008555
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401171099\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401171099\">PR Review</a>.</p>",
        "id": 195449934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008570
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007794\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416007794\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // serious error in the allocator or in our `get_regs` function.\n</pre></div>\n\n\n</blockquote>",
        "id": 195449935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008570
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401171923\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401171923\">PR Review</a>.</p>",
        "id": 195450101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008634
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416008583\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416008583\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// For an instruction that has as operands a register `encG` and a memory\n// address `memE`, create and emit, first the REX prefix, then caller-supplied\n// opcode byte(s) (`opcodes` and `numOpcodes`), then the MOD/RM byte, then\n// optionally, a SIB byte, and finally optionally an immediate that will be\n// derived from the `memE` operand.  For most instructions up to and including\n// SSE4.2, that will be the whole instruction.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008634
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172280\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172280\">PR Review</a>.</p>",
        "id": 195450150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008661
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416008914\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416008914\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Get the encoding number from something which we sincerely hope is a real\n/// register of class I64.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008661
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172587\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172587\">PR Review</a>.</p>",
        "id": 195450207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008682
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009270\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009270\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Emit the REX prefix byte even if it appears to be redundant (== 0x40).\n</pre></div>\n\n\n</blockquote>",
        "id": 195450208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008682
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172707\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172707\">PR Review</a>.</p>",
        "id": 195450221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008691
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009405\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009405\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Set the W bit in the REX prefix to zero.  By default it will be set to 1,\n/// indicating a 64-bit operation.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008691
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172861\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401172861\">PR Review</a>.</p>",
        "id": 195450256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008703
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009527\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009527\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Add an 0x66 (operand-size override) prefix.  This is necessary to indicate\n/// a 16-bit operation.  Normally this will be used together with F_CLEAR_REX_W.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008703
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173184\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173184\">PR Review</a>.</p>",
        "id": 195450326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008724
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009839\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416009839\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// then the caller should pass `opcodes` == 0xF3_0F_27 and `numOpcodes` == 3.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008724
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173483\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173483\">PR Review</a>.</p>",
        "id": 195450367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008747
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010100\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010100\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// The register operand is represented here not as a `Reg` but as its hardware\n// encoding, `encG`.  `flags` can specify special handling for the REX prefix.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008747
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173644\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173644\">PR Review</a>.</p>",
        "id": 195450384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008759
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010237\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010237\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This should all be a doc comment.</p>\n</blockquote>",
        "id": 195450386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008759
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173760\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173760\">PR Review</a>.</p>",
        "id": 195450398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008768
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010339\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010339\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // General comment for this function: the registers in `memE` must be\n</pre></div>\n\n\n</blockquote>",
        "id": 195450400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008768
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010456\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010456\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // expression.  But `encG` can be derived from a register of any class.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008779
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173890\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401173890\">PR Review</a>.</p>",
        "id": 195450415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008779
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174191\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174191\">PR Review</a>.</p>",
        "id": 195450458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008800
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010735\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010735\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// This is the core &#39;emit&#39; function for instructions that do not reference\n/// memory.\n///\n/// This is conceptually the same as\n/// emit_REX_OPCODES_MODRM_SIB_IMM_encG_memE, except it is for the case\n/// where the E operand is a register rather than memory.  Hence it is much\n/// simpler.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008800
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174442\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174442\">PR Review</a>.</p>",
        "id": 195450491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008817
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010958\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416010958\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// These are merely wrappers for the above two functions that facilitate passing\n/// actual `Reg`s rather than their encodings.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008817
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174627\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174627\">PR Review</a>.</p>",
        "id": 195450614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008831
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011154\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011154\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // JRS FIXME 2020Feb07: this should really just be `regEnc` not `iregEnc`\n</pre></div>\n\n\n</blockquote>",
        "id": 195450616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008831
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174859\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174859\">PR Review</a>.</p>",
        "id": 195450724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008849
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011385\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011385\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // JRS FIXME 2020Feb07: these should really just be `regEnc` not `iregEnc`\n</pre></div>\n\n\n</blockquote>",
        "id": 195450725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008849
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174989\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401174989\">PR Review</a>.</p>",
        "id": 195450742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008858
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011529\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416011529\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// Write a suitable number of bits from an imm64 to the sink.\n</pre></div>\n\n\n</blockquote>",
        "id": 195450743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008858
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401176867\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401176867\">PR Review</a>.</p>",
        "id": 195451047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008999
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416013296\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416013296\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>/// The top-level emit function.\n///\n/// Important!  Do not add improved (shortened) encoding cases to existing\n/// instructions without also adding tests for those improved encodings.  That\n/// is a dangerous game that leads to hard-to-track-down errors in the emitted\n/// code.\n///\n/// For all instructions, make sure to have test coverage for all of the\n/// following situations.  Do this by creating the cross product resulting from\n/// applying the following rules to each operand:\n///\n/// (1) for any insn that mentions a register: one test using a register from\n///     the group [rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi] and a second one\n///     using a register from the group [r8, r9, r10, r11, r12, r13, r14, r15].\n///     This helps detect incorrect REX prefix construction.\n///\n/// (2) for any insn that mentions a byte register: one test for each of the\n///     four encoding groups [al, cl, dl, bl], [spl, bpl, sil, dil],\n///     [r8b .. r11b] and [r12b .. r15b].  This checks that\n///     apparently-redundant REX prefixes are retained when required.\n///\n/// (3) for any insn that contains an immediate field, check the following\n///     cases: field is zero, field is in simm8 range (-128 .. 127), field is\n///     in simm32 range (-0x8000_0000 .. 0x7FFF_FFFF).  This is because some\n///     instructions that require a 32-bit immediate have a short-form encoding\n///     when the imm is in simm8 range.\n///\n/// Rules (1), (2) and (3) don&#39;t apply for registers within address expressions\n/// (`Addr`s).  Those are already pretty well tested, and the registers in them\n/// don&#39;t have any effect on the containing instruction (apart from possibly\n/// require REX prefix bits).\n///\n/// When choosing registers for a test, avoid using registers with the same\n/// offset within a given group.  For example, don&#39;t use rax and r8, since they\n/// both have the lowest 3 bits as 000, and so the test won&#39;t detect errors\n/// where those 3-bit register sub-fields are confused by the emitter.  Instead\n/// use (eg) rax (lo3 = 000) and r9 (lo3 = 001).  Similarly, don&#39;t use (eg) cl\n/// and bpl since they have the same offset in their group; use instead (eg) cl\n/// and sil.\n///\n/// For all instructions, also add a test that uses only low-half registers\n/// (rax .. rdi, xmm0 .. xmm7) etc, so as to check that any redundant REX\n/// prefixes are correctly omitted.  This low-half restriction must apply to\n/// _all_ registers in the insn, even those in address expressions.\n///\n/// Following these rules creates large numbers of test cases, but it&#39;s the\n/// only way to make the emitter reliable.\n///\n/// Known possible improvements:\n///\n/// * there&#39;s a shorter encoding for shl/shr/sar by a 1-bit immediate.  (Do we\n///   care?)\n</pre></div>\n\n\n</blockquote>",
        "id": 195451048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588008999
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401177895\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401177895\">PR Review</a>.</p>",
        "id": 195451220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009081
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014325\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014325\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// See comments at the top of `fn x64_emit` for advice on how to create\n</pre></div>\n\n\n</blockquote>",
        "id": 195451246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009081
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401178105\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401178105\">PR Review</a>.</p>",
        "id": 195451288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009096
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014537\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014537\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>// (cd cranelift/codegen &amp;&amp; \\\n</pre></div>\n\n\n</blockquote>",
        "id": 195451290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009096
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401178498\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401178498\">PR Review</a>.</p>",
        "id": 195451334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009125
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014904\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416014904\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>            // This insn is 6 bytes long.  Currently `offset` is relative to\n</pre></div>\n\n\n</blockquote>",
        "id": 195451335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588009125
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401212089\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401212089\">PR Review</a>.</p>",
        "id": 195456346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588011696
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416045396\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416045396\">PR Review Comment</a>:</p>\n<blockquote>\n<p>encoding-wise, <code>movzx</code> and <code>movsx</code> have such an encoding with <code>660f{b6,be}</code>. For example, <code>movzx ax, cl // 66 0f b6 c1</code>. I dunno if we're just not using them though.</p>\n</blockquote>",
        "id": 195456347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588011696
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401274940\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401274940\">PR Review</a>.</p>",
        "id": 195466388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588016992
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416101871\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416101871\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>            // Baldrdash expects the stack to take at least the number of words set in\n</pre></div>\n\n\n<p>Or maybe I'm misreading :)</p>\n</blockquote>",
        "id": 195466389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588016992
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416117868\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416117868\">PR Review Comment</a>:</p>\n<blockquote>\n<p>just making sure I'm following the intended direction: this will eventually have an <code>if call_conv.extends_windows_fastcall()</code> arm like the existing x86 abi code, correct?</p>\n</blockquote>",
        "id": 195469501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588018568
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401292826\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401292826\">PR Review</a>.</p>",
        "id": 195469502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588018569
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401397412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401397412\">PR Review</a>.</p>",
        "id": 195487278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588030168
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416218343\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416218343\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>                sink.put1(mkModRegRM(1, encG &amp; 7, 5)); // could/?should? be encE &amp; 7 for consistency\n                sink.put1(0x25);\n                sink.put1((simm32 &amp; 0xFF) as u8);\n</pre></div>\n\n\n<p>and similar for <code>!low8WillSXto32()</code> would encode the <code>RBP</code>/<code>R13</code> variants that are currently missing here right? is there a wider reason this is <code>panic!</code>, or just \"not gotten to it yet\"?</p>\n</blockquote>",
        "id": 195487279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588030169
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401414354\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401414354\">PR Review</a>.</p>",
        "id": 195490227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588033043
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416236407\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416236407\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This means we can't encode <code>SHR 0, %rax</code> (sure fine) but more importantly that attempting to emit a <code>SHR 0, %rax</code> gets you <code>SHR %cl, %rax</code> instead! My understanding is that this is a level below anything a user would see from building a function in Cranelift IR, so it's still unlikely to trip across this, correct?</p>\n</blockquote>",
        "id": 195490228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588033044
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401526350\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401526350\">PR Review</a>.</p>",
        "id": 195522610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588054657
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416355573\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416355573\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I propose not to generate 16 bit operations (addw, etc) to the extent that it's possible to avoid them.  They put us at risk of partial register stalls.  Instead I plan to do as much 16-bit work as possible at 32 bit width, hence avoiding the stalls and also the need for the 66 prefix.</p>\n</blockquote>",
        "id": 195522611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588054657
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401529250\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401529250\">PR Review</a>.</p>",
        "id": 195522882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588054996
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416358151\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416358151\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this really a win?  IMO it wastes a lot of vertical screen space for minimal gain.  Sure, we can rustdoc <code>CC</code> itself, but I think the benefit of documenting the meaning of each individual item is not worth the loss of screen space.</p>\n</blockquote>",
        "id": 195522883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588054996
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401530239\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401530239\">PR Review</a>.</p>",
        "id": 195522977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055125
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416359136\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416359136\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd prefer to retain the original. That makes it easy to figure out the encoding for each condition. With <code>self as u8</code> you have to count through the definition to find the encoding.</p>\n</blockquote>",
        "id": 195522978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055125
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401532847\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401532847\">PR Review</a>.</p>",
        "id": 195523247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055456
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416361525\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416361525\">PR Review Comment</a>:</p>\n<blockquote>\n<p>that sounds reasonable to me (pending if/when we might also optimize for size at least)</p>\n<p>Do you know if decode stalls from 66-prefixed instructions with immediates are still a concern? At the least it might be helpful to note what is _intentionally_ not implemented, for future readers.</p>\n</blockquote>",
        "id": 195523248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055456
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401533704\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401533704\">PR Review</a>.</p>",
        "id": 195523358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055562
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416362350\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416362350\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, I thought I had exhaustively tested this in the encoding test cases (there are 100+ amode encoding tests).  So I'm not convinced there's a missing case (am not convinced there isn't a missing case, either).  It's simple enough to shake out, by checking the encoding test cases.</p>\n</blockquote>",
        "id": 195523359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588055562
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401537837\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401537837\">PR Review</a>.</p>",
        "id": 195523923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588056063
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416366130\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416366130\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, you're right - the initial checks against <code>R{BP,13}</code> had me looking for an else mentioning them, but they're encoded through the <code>if low8willSXto32(*simm32) &amp;&amp; encE != regs::ENC_RSP &amp;&amp; encE != regs::ENC_R12</code> case. There are a few tests for these such as for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605/files/f44e562b0660ed38ec8f01c94bf07efe3d4fe5fc#diff-4543aa3149dc21a011981c094c49644bR987-R991\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605/files/f44e562b0660ed38ec8f01c94bf07efe3d4fe5fc#diff-4543aa3149dc21a011981c094c49644bR987-R991\"><code>127(%rbp)</code></a>.</p>\n<p>How do you feel about upgrading this to an <code>unreachable!</code>?</p>\n</blockquote>",
        "id": 195523924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588056063
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401541447\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401541447\">PR Review</a>.</p>",
        "id": 195524402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588056489
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416369320\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416369320\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, it's the instruction selector's responsibility not to try to produce <code>shr $0, %reg</code>, but that's fine -- it can just emit no-instruction if it needs to do that -- which would in itself reflect incomplete cleanup at the CLIR level.  I guess it would be conceptually cleaner and safer change this so that the shift amount is an <code>Option&lt;u8&gt;</code> though; maybe we should do that.</p>\n</blockquote>",
        "id": 195524403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588056489
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416369320\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416369320\">PR Review Comment</a>.</p>",
        "id": 195524428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588056521
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401591121\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401591121\">PR Review</a>.</p>",
        "id": 195530385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588060984
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416412014\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416412014\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Multiple single-byte nop insns, you mean?  Sure, you <em>can</em> do that, but that wastes front end resources.  Intel defines \"official\" no-ops with lengths at least 1 to 14 and maybe more (I forget).</p>\n</blockquote>",
        "id": 195530387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588060985
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401592341\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401592341\">PR Review</a>.</p>",
        "id": 195530525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061082
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416412983\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416412983\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't know the details (Benjamin surely will), but no doubt the intent exists to make it possible to support windows-specific ABIs as necessary.</p>\n</blockquote>",
        "id": 195530526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061083
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401593300\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401593300\">PR Review</a>.</p>",
        "id": 195530626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061159
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416413740\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416413740\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I would be the first to admit that the logic is pretty hard to follow there.  Er, if <code>unreachable!</code> is the right thing there, then use that.  Just so long as it really <em>is</em> unreachable.</p>\n</blockquote>",
        "id": 195530627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061159
    },
    {
        "content": "<p>julian-seward1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416413740\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416413740\">PR Review Comment</a>.</p>",
        "id": 195530683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061173
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401598697\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401598697\">PR Review</a>.</p>",
        "id": 195531278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061590
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416418231\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416418231\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't know about decode stalls offhand; we'd have to consult the latest incarnation of the Intel \"Optimisation Reference Manual\".  Note though that I was speaking above of dispatch stalls, not decode stalls -- I forgot there might also be decode limitations till you mentioned it.</p>\n<p>Yes, documenting the general intention to avoid generating 16-bit operations as much as possible would be a good thing to do.</p>\n</blockquote>",
        "id": 195531279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061591
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401600447\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401600447\">PR Review</a>.</p>",
        "id": 195531511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061730
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416419781\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416419781\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The previous suggestion explicitly assigns a discriminant to every variant. Otherwise this wouldn't even be correct, as 10 and 11 are skipped.</p>\n</blockquote>",
        "id": 195531512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061730
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401705637\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401705637\">PR Review</a>.</p>",
        "id": 195544422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588069901
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416506693\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416506693\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The function I'm modifying is called by the CLI flags parser, though; is there a way to pass target-specific flags through the CLI that I missed?</p>\n</blockquote>",
        "id": 195544423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588069901
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401706913\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401706913\">PR Review</a>.</p>",
        "id": 195544606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588070013
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416507759\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416507759\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed with Julian, there's an official selection of nop instructions for different sizes.</p>\n</blockquote>",
        "id": 195544607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588070013
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401708133\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-401708133\">PR Review</a>.</p>",
        "id": 195544791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588070123
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416508790\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r416508790\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, that's the idea! We'd pass the <code>CallConv</code>, or we'd select different impl in the caller according to the given <code>CallConv</code> here, as done in <code>x86/abi.rs</code>.</p>\n</blockquote>",
        "id": 195544792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588070123
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403608242\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403608242\">PR Review</a>.</p>",
        "id": 195851938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258942
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418077938\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418077938\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll punt on this one, it does break the symmetry with GPR, and it may require a bunch of changes all over the place.</p>\n</blockquote>",
        "id": 195851939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588258942
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403611243\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403611243\">PR Review</a>.</p>",
        "id": 195852527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588259140
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418080206\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418080206\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll assume no, then :)</p>\n</blockquote>",
        "id": 195852529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588259140
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403622962\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403622962\">PR Review</a>.</p>",
        "id": 195854691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588259886
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418089015\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418089015\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I heard screen space is free, so I'll take it!</p>\n</blockquote>",
        "id": 195854692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588259886
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403627543\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403627543\">PR Review</a>.</p>",
        "id": 195855484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588260182
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418092527\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418092527\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nice</p>\n</blockquote>",
        "id": 195855486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588260182
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">PR #1605</a> from <code>rebase-x64</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a draft-ish PR containing a rebase of Julian's x64 work on the new isel backend, including quite a few refactorings of mine. During today's Cranelift meeting, we agreed that it might make sense to add the incomplete backend here, allowing incremental development by more contributors.</p>\n<p>I've tried to split the files in a way that was similar to the aarch64 backend, but some things might still be wobbly; I might check this a bit further more tomorrow. Of course, that's also something we could do as follow-up PRs.</p>\n<p>The new x64 backend is controlled by a new Cargo feature <code>x64</code> (which also requires <code>x86</code>). Then, users of <code>clif-util</code> can use the <code>--target x86_64</code> argument, and:</p>\n<ul>\n<li>get the code generated by the current isel (with legalization, Recipes, Encodings, etc.) and regalloc if nothing more is provided.</li>\n<li>or add <code>--set use_new_backend</code> and this will use the new isel backend. (Expect panics, unimplemented errors, etc.)</li>\n</ul>\n<p>Second (small) commit is what allows passing ISA-specific flags to <code>--set</code>, which wasn't implemented yet.</p>\n</blockquote>",
        "id": 195857649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588261071
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403667877\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403667877\">PR Review</a>.</p>",
        "id": 195862409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588262911
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418123974\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418123974\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>it may require a bunch of changes all over the place.</p>\n</blockquote>\n<p>These functions are not exported from this module.</p>\n<blockquote>\n<p>I'll punt on this one, it does break the symmetry with GPR</p>\n</blockquote>\n<p>Fair enough</p>\n</blockquote>",
        "id": 195862410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588262911
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403669346\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403669346\">PR Review</a>.</p>",
        "id": 195862655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263019
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418125153\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418125153\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>/// Actually codegens an instruction&#39;s results into registers.\n</code></pre></div>\n\n\n</blockquote>",
        "id": 195862656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263019
    },
    {
        "content": "<p>bjorn3 deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418125153\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418125153\">PR Review Comment</a>.</p>",
        "id": 195862671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263028
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403674731\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403674731\">PR Review</a>.</p>",
        "id": 195863482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263401
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418129318\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418129318\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What about a <code>return</code> in the middle of a function? The current code would just fall through to the next instruction without ever inserting a <code>return</code>, right?</p>\n</blockquote>",
        "id": 195863484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263401
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403675427\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403675427\">PR Review</a>.</p>",
        "id": 195863574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263454
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418129852\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418129852\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                    // `VMContext` is `r14` in Baldrdash.\n</code></pre></div>\n\n\n</blockquote>",
        "id": 195863575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588263454
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403684920\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403684920\">PR Review</a>.</p>",
        "id": 195865132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588264159
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418137299\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418137299\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    pub(crate) fn get_enc(self) -&gt; u8 {\n        self as u8\n</code></pre></div>\n\n\n<p><code>CC</code> is copy</p>\n</blockquote>",
        "id": 195865133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588264159
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403779615\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-403779615\">PR Review</a>.</p>",
        "id": 195882903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588271847
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404094382\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404094382\">PR Review</a>.</p>",
        "id": 195946179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588326955
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418484325\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418484325\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm sure this is handled correctly, although I am not exactly sure how.  The new backend and register allocators are block-order invariant; they can be presented with the blocks in any order; they don't care.  After regalloc is done, a final block order is chosen, branches which would be fallthroughs are removed, empty blocks are removed, and the prologue/epilogue machinery identify the entry/exit blocks and add the relevant extra insns.</p>\n</blockquote>",
        "id": 195946180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588326955
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404094915\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404094915\">PR Review</a>.</p>",
        "id": 195946312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588327068
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418484764\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418484764\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I mean how does it know that this is an exit block if there is no <code>ret</code> emitted?</p>\n</blockquote>",
        "id": 195946313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588327068
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404101996\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-404101996\">PR Review</a>.</p>",
        "id": 195947838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588328503
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418490786\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r418490786\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You'd have to ask Chris or Benjamin for a definite answer, but .. I'm pretty sure it's because the higher level steering machinery in the new BE knows which CLIR-level blocks are exit blocks, so it knows which machine code blocks are exit blocks.</p>\n</blockquote>",
        "id": 195947839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588328503
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-405790900\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-405790900\">PR Review</a>.</p>",
        "id": 196307799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588685568
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r420111423\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r420111423\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ha, interesting. Indeed it lacks the emission of <code>Ret</code>. This bug wouldn't be observable in spidermonkey since it uses the FallthroughRet, which means wasm returns in the middle of a function are translated into a jump to a single return block at the end of the function.</p>\n</blockquote>",
        "id": 196307800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588685568
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-405815267\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#pullrequestreview-405815267\">PR Review</a>.</p>",
        "id": 196310848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588687130
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r420130750\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605#discussion_r420130750\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Taking this back: the actual <code>Ret</code> opcode for this is generated in <code>machinst/lower.rs</code>, in <code>gen_retval_setup</code>.</p>\n</blockquote>",
        "id": 196310849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588687130
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">PR #1605</a> from <code>rebase-x64</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a draft-ish PR containing a rebase of Julian's x64 work on the new isel backend, including quite a few refactorings of mine. During today's Cranelift meeting, we agreed that it might make sense to add the incomplete backend here, allowing incremental development by more contributors.</p>\n<p>I've tried to split the files in a way that was similar to the aarch64 backend, but some things might still be wobbly; I might check this a bit further more tomorrow. Of course, that's also something we could do as follow-up PRs.</p>\n<p>The new x64 backend is controlled by a new Cargo feature <code>x64</code> (which also requires <code>x86</code>). Then, users of <code>clif-util</code> can use the <code>--target x86_64</code> argument, and:</p>\n<ul>\n<li>get the code generated by the current isel (with legalization, Recipes, Encodings, etc.) and regalloc if nothing more is provided.</li>\n<li>or add <code>--set use_new_backend</code> and this will use the new isel backend. (Expect panics, unimplemented errors, etc.)</li>\n</ul>\n<p>Second (small) commit is what allows passing ISA-specific flags to <code>--set</code>, which wasn't implemented yet.</p>\n</blockquote>",
        "id": 196311120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588687251
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1605\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1605\">PR #1605</a>.</p>",
        "id": 196316233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588689344
    }
]