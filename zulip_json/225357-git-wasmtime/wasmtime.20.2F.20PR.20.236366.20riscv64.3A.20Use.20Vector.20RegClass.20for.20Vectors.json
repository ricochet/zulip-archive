[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a> from <code>afonso360:riscv-regclass-vec</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR changes the RISC-V backend to use the new Vector Regclass when dealing with vectors. It also implements the calling convention described in <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc#vector-register-convention\">this document</a>. Essentially all vector arguments are passed via stack.</p>\n<p>Additionally this also adds a test for the vconst pool, which was supposed to be merged in with #6324 but was failing due to some missing ABI stuff.</p>\n<p>I've also had to limit the maximum usable SIMD type down to 1024bits, it looks like regalloc2 does not support spills larger than 2040 bytes and it's not really worth fixing it. 1024bit vectors ought to be enough for anybody.</p>\n</blockquote>",
        "id": 357231130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713121
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>.</p>",
        "id": 357231133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713122
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>.</p>",
        "id": 357231134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713122
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1189680111\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not 100% sure about this. <code>v0</code> is a completely normal vector register, however it is also the only vector register that can be used as a mask with instructions. i.e. when instructions are masked they implicitly read <code>v0</code>.</p>\n<p>Should I mark v0 as non preferable to avoid unnecessary moves, or will regalloc figure it out once we start adding <code>fixed_def</code>'s?</p>\n<p>To be clear, masks can be computed in <em>any</em> vector register, they can only be used in <code>v0</code>.</p>\n</blockquote>",
        "id": 357232154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713304
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1189680111\">PR review comment</a>.</p>",
        "id": 357232256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713330
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1189680111\">PR review comment</a>.</p>",
        "id": 357232859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713479
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1189680111\">PR review comment</a>.</p>",
        "id": 357233394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713594
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1189680111\">PR review comment</a>.</p>",
        "id": 357233467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683713615
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR changes the RISC-V backend to use the new Vector Regclass when dealing with vectors. It also implements the calling convention described in <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc#vector-register-convention\">this document</a>. Essentially all vector arguments are passed via stack and all registers are caller saved.</p>\n<p>Additionally this also adds a test for the vconst pool, which was supposed to be merged in with #6324 but was failing due to some missing ABI stuff.</p>\n<p>I've also had to limit the maximum usable SIMD type down to 1024bits, it looks like regalloc2 does not support spills larger than 2040 bytes and it's not really worth fixing it. 1024bit vectors ought to be enough for anybody.</p>\n</blockquote>",
        "id": 357299423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1683726866
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#pullrequestreview-1427308248\">PR review</a>:</p>\n<blockquote>\n<p>Looks mostly good to me, thanks!</p>\n<p>Just one possible improvement below but if you'd rather merge as-is and tackle it in a followup or leave as a TODO, I think that's fine too.</p>\n</blockquote>",
        "id": 358564008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684182145
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#pullrequestreview-1427308248\">PR review</a>:</p>\n<blockquote>\n<p>Looks mostly good to me, thanks!</p>\n<p>Just one possible improvement below but if you'd rather merge as-is and tackle it in a followup or leave as a TODO, I think that's fine too.</p>\n</blockquote>",
        "id": 358564009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684182145
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1194322064\">PR review comment</a>:</p>\n<blockquote>\n<p>This implementation looks correct, but FWIW the <em>hope</em> at least with the <code>PRegSet</code> definition was to allow for constants (they're small bitsets, u128 or now u256) to be returned by backends. I realize the existing backend also doesn't do this, so in the worst case we can keep the status quo. But this might even be a small but visible performance issue for function bodies with frequent calls. Would it be possible to define a <code>const fn</code> that computes a <code>PRegSet</code> here (either from existing constants or with a straight-line \"add reg ...\" sequence)?</p>\n</blockquote>",
        "id": 358564010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684182145
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366#discussion_r1194324418\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's fine to have all vec-regs be equally preferred; if an instruction constrains an arg to require <code>v0</code> then RA2 will do the right thing and put other values in other registers as long as they're available (or split/spill otherwise). The preferred/non-preferred mechanism is mainly there to push allocations toward caller-saves (volatiles) and avoid prologue/epilogue instructions where possible.</p>\n</blockquote>",
        "id": 358564011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684182145
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>.</p>",
        "id": 358819785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684262304
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>.</p>",
        "id": 358820286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684262443
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6366\">PR #6366</a>.</p>",
        "id": 358833579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684266556
    }
]