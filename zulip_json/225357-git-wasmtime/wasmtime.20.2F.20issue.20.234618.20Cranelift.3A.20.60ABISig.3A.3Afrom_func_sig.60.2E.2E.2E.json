[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1205865317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 292081922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659654766
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1205872048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<p>Returning a <code>Cow</code> doesn't work because the signature gets stored in <code>ABICalle{e,r}Impl</code> and I tried threading a lifetime through those structs but then run into borrow errors where something wants unique access to the thing the signature is inside but the signature is shared borrowed by <code>ABICalle{e,r}Impl</code>s.</p>\n</blockquote>",
        "id": 292082934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659655453
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1205872499\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<p>That said, I am investigating moving this legalization out of the mach inst code and into the actual legalizer pass we have, which should just modify the signatures in place, instead of doing any <code>clone</code>s at all</p>\n</blockquote>",
        "id": 292082992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659655499
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1205873587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<p>Alternately: give <code>ABISig</code> an iterator-only interface, and an implementation that sneakily inserts the extra arg in the case where we're mutating now. That's the most efficient I think, at the cost of some refactoring at use-sites...</p>\n</blockquote>",
        "id": 292083129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659655595
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1206656512\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<p>I've rebased this on top of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4621\">https://github.com/bytecodealliance/wasmtime/pull/4621</a> and rewritten it to do this signature legalization in-place in the legalization pass. This gives a nice phase separation and puts responsibility for legalization in the expected place. It is also an even larger speed up (against the remove-unused-fields PR) than the original PR was (against main):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">181420458.93</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">26515667.61</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.93</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.95</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.08</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2819380338</span><span class=\"w\"> </span><span class=\"mf\">2928780796.54</span><span class=\"w\"> </span><span class=\"mi\">3289265318</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2417114451</span><span class=\"w\"> </span><span class=\"mf\">2747360337.61</span><span class=\"w\"> </span><span class=\"mi\">3380763132</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2749394.66</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">1902797.53</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.97</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.99</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">115751117</span><span class=\"w\"> </span><span class=\"mf\">134432921.19</span><span class=\"w\"> </span><span class=\"mi\">157572316</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">113527530</span><span class=\"w\"> </span><span class=\"mf\">131683526.53</span><span class=\"w\"> </span><span class=\"mi\">161295688</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">76366357</span><span class=\"w\"> </span><span class=\"mf\">86553210.56</span><span class=\"w\"> </span><span class=\"mi\">97936025</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">76233349</span><span class=\"w\"> </span><span class=\"mf\">85885027.75</span><span class=\"w\"> </span><span class=\"mi\">100047281</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">libwasmtime_bench_api</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>However, I starting looking into how <code>StructReturn</code> was actually used, and... it isn't? Originally, we used to legalize multi-value returns into <code>StructReturn</code> (I originally wrote that code way back when) but that hasn't happened for a while. So I'm wondering: why do we even have <code>StructReturn</code> anymore? Can we completely remove it? It does seem like <code>cg_clif</code> uses it, but it isn't clear to me that <code>cg_clif</code> can't move to regular multi-value returns and let the backends' normal calling convention code handle this? Or if it needs something custom, then it can legalize calls to use struct return pointers when generating the input CLIF. It really seems like <code>StructReturn</code> is useless since cranelift isn't loading return values out of the struct-return space after the call for embedders. Literally the only special handling of it that Cranelift does is to generate a move from the struct return argument to the struct return result. Doesn't seem like this is providing much value to embedders, and it is a maintenance/performance burden for Cranelift itself...</p>\n<p>Or if removing <code>StructReturn</code> is unworkable for some reason, we can probably just make it a CLIF error (and enforce this in the verifier) to have a <code>StructReturn</code> parameter but not a <code>StructReturn</code> result, so that we don't have to do this signature legalization anymore. Would prefer to completely remove <code>StructReturn</code> if possible, though.</p>\n<p>cc @bjorn3 </p>\n</blockquote>",
        "id": 292180413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659718397
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618#issuecomment-1206916340\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4618\">issue #4618</a>:</p>\n<blockquote>\n<p>Updating this PR to be about removing <code>ArgumentPurpose::StructReturn</code>.</p>\n<p>We used to legalize multi-value returns to using struct-return pointers where<br>\ncallees would store result values into the given struct-return buffer and<br>\ncallers would provide the struct-return buffer when calling and then load the<br>\nresults out of it. We haven't done that for a while and just rely on the calling<br>\nconvention's normal method of returning multiple values now. The only special<br>\ncasing that <code>ArgumentPurpose::StructReturn</code> has now is</p>\n<ol>\n<li>\n<p>We legalize signatures that have a <code>StructReturn</code> parameter but no<br>\n<code>StructReturn</code> result to add the missing <code>StructReturn</code> result</p>\n</li>\n<li>\n<p>We automatically insert a copy from a function's <code>StructReturn</code> argument to<br>\nits <code>StructReturn</code> result value</p>\n</li>\n</ol>\n<p>This isn't really useful for Cranelift embedders anymore since it doesn't even<br>\nhandle putting the return values into the struct-return buffer or getting them<br>\nout again, has maintenance and cruft overhead for Cranelift hackers, and the<br>\nabove signature legalization in (1) also imposes performance overhead on all<br>\nCranelift compiles regardless of whether they use struct returns or not. It's<br>\ntime we removed the vestigial <code>ArgumentPurpose::StructReturn</code>.</p>\n<p>Finally, here are the Sightglass benchmark wins we get from this removal:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">214956202.90</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">31700992.96</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.91</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.94</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.07</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.09</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2765571620</span><span class=\"w\"> </span><span class=\"mf\">2866580329.79</span><span class=\"w\"> </span><span class=\"mi\">3085702646</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">2396129997</span><span class=\"w\"> </span><span class=\"mf\">2651624126.89</span><span class=\"w\"> </span><span class=\"mi\">2923726602</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">4176509.17</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2835408.05</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">0.95</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">0.99</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">115737735</span><span class=\"w\"> </span><span class=\"mf\">133448206.82</span><span class=\"w\"> </span><span class=\"mi\">149712338</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">108735836</span><span class=\"w\"> </span><span class=\"mf\">129271697.65</span><span class=\"w\"> </span><span class=\"mi\">166386156</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">nanoseconds</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">difference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">77356671</span><span class=\"w\"> </span><span class=\"mf\">85735828.56</span><span class=\"w\"> </span><span class=\"mi\">96331117</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">75824588</span><span class=\"w\"> </span><span class=\"mf\">84176414.51</span><span class=\"w\"> </span><span class=\"mi\">94308652</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">sret</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292211279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659736037
    }
]