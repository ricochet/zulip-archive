[
    {
        "content": "<p>TerryGuo opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Hi there,<br>\nI built a wasm toolchain from the recent LLVM10 release and compile my C code to wasm with command :</p>\n<blockquote>\n<p>clang --target=wasm32 fib.c -nostdlib -Wl,-entry=fib -g -O0 -o fib.wasm</p>\n</blockquote>\n<p>Then debug it with the wasmtime built from the lastest master branch:</p>\n<blockquote>\n<p>lldb -- ./wasmtime/target/release/wasmtime  run fib.wasm --invoke fib 40</p>\n</blockquote>\n<p>The breakpoint to function fib works well, but the local variables in my C code can't be viewed. Maybe I am not doing things in the right way. Could some one please help me? Thanks in advance.</p>\n<blockquote>\n<p>Current executable set to './wasmtime/target/release/wasmtime' (x86_64).                                                                    [0/1836]<br>\n(lldb) settings set -- target.run-args  \"-g\" \"fib.wasm\" \"--invoke\" \"fib\" \"40\"<br>\n(lldb) b fib<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 26871 launched: '/data/home/terry/projects/wasmtime/wasmtime/target/release/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nwarning: using <code>--invoke</code> with a function that takes arguments is experimental and may break in the future<br>\nProcess 26871 stopped\n* thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff6209026 JIT(0x555555dccfb0)<code>fib(n=&lt;unavailable&gt;) at fib.c:2:13\n   1    int fib(int n) {\n-&gt; 2      int i, t, a = 0, b = 1;\n   3      for (i = 0; i &lt; n; i++) {\n   4        t = a;\n   5        a = b;\n   6        b += t;\n   7      }\n(lldb) n\nProcess 26871 stopped\n* thread #1, name = 'wasmtime', stop reason = step over\n    frame #0: 0x00007ffff6209030 JIT(0x555555dccfb0)</code>fib(n=&lt;unavailable&gt;) at fib.c:3:10<br>\n   1    int fib(int n) {<br>\n   2      int i, t, a = 0, b = 1;<br>\n-&gt; 3      for (i = 0; i &lt; n; i++) {<br>\n   4        t = a;<br>\n   5        a = b;<br>\n   6        b += t;<br>\n   7      }<br>\n(lldb) p t<br>\nerror: Couldn't materialize: couldn't get the value of variable t: Expression stack needs at least 1 item for DW_OP_plus_uconst.<br>\nerror: errored out in DoExecute, couldn't PrepareToExecuteJITExpression<br>\n(lldb)</p>\n</blockquote>\n<p>And my fib C code is as below:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n</blockquote>",
        "id": 195495890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588040497
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620453779\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620453779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>CC @yurydelendik </p>\n</blockquote>",
        "id": 195531523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061737
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620455616\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620455616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>You also need to pass <code>-g</code> to `wasmtime. Otherwise it won't generate debuginfo for the jitted code.</p>\n</blockquote>",
        "id": 195531871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588061968
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620456575\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620456575\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Oh, of course. I wonder if we could warn about this somehow. @yurydelendik could we do something like detect that a debugger is attached and warn if we don't have debug info for the JITted code?</p>\n</blockquote>",
        "id": 195532035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588062084
    },
    {
        "content": "<p>TerryGuo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620547296\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620547296\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>@bjorn3 Sorry that I pasted wrong command line. The -g option doesn't help.</p>\n<blockquote>\n<p>terry@wasm-test01:~/projects/wasmtime$ lldb -- ./wasmtime/target/release/wasmtime -g fib.wasm --invoke fib 40<br>\n(lldb) target create \"./wasmtime/target/release/wasmtime\"<br>\nCurrent executable set to './wasmtime/target/release/wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \"fib.wasm\" \"--invoke\" \"fib\" \"40\"<br>\n(lldb) b fib<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 5489 launched: '/data/home/terry/projects/wasmtime/wasmtime/target/release/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nwarning: using <code>--invoke</code> with a function that takes arguments is experimental and may break in the future<br>\nProcess 5489 stopped\n* thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff7fba026 JIT(0x555555dc5310)<code>fib(n=&lt;unavailable&gt;) at fib.c:2:13\n   1    int fib(int n) {\n-&gt; 2      int i, t, a = 0, b = 1;\n   3      for (i = 0; i &lt; n; i++) {\n   4        t = a;\n   5        a = b;\n   6        b += t;\n   7      }\n(lldb) n\nProcess 5489 stopped\n* thread #1, name = 'wasmtime', stop reason = step over\n    frame #0: 0x00007ffff7fba030 JIT(0x555555dc5310)</code>fib(n=&lt;unavailable&gt;) at fib.c:3:10<br>\n   1    int fib(int n) {<br>\n   2      int i, t, a = 0, b = 1;<br>\n-&gt; 3      for (i = 0; i &lt; n; i++) {<br>\n   4        t = a;<br>\n   5        a = b;<br>\n   6        b += t;<br>\n   7      }<br>\n(lldb) p t<br>\nerror: Couldn't materialize: couldn't get the value of variable t: Expression stack needs at least 1 item for DW_OP_plus_uconst.<br>\nerror: errored out in DoExecute, couldn't PrepareToExecuteJITExpression<br>\n(lldb)</p>\n</blockquote>\n</blockquote>",
        "id": 195549635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588073229
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620621271\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620621271\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>2 things might be happening here:</p>\n<ul>\n<li>DW_AT_frame_base patch for LLVM came late for v10 release so it might not be included (I'm building fib-wasm.wasm file with clang-11)</li>\n<li>There is big refactoring and bug fix at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1572\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1572\">https://github.com/bytecodealliance/wasmtime/pull/1572</a> -- it might be related here</li>\n</ul>\n</blockquote>",
        "id": 195566734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588081901
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 490) seem bogus. <code>local_range</code> is a Cranelift type <code>ValueLocRange</code>, which most probably don't contain Wasm bytecode offsets, but function-relative machine-code offsets. Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195605220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588097823
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 474) seem bogus. <code>local_range</code> is a Cranelift type <code>ValueLocRange</code>, which most probably don't contain Wasm bytecode offsets, but function-relative machine-code offsets. Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195605438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588097944
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 474) seem bogus. <code>local_range</code> has a Cranelift type <code>ValueLocRange</code>, which most probably don't contain Wasm bytecode offsets, but function-relative machine-code offsets. Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195605719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588098079
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 474) seem bogus. <code>local_range</code> has a Cranelift type <code>ValueLocRange</code>, which most probably don't contain Wasm bytecode offsets (<code>WasmAddress</code>?), but function-relative machine-code offsets (<code>GeneratedAddress</code>?). Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195606353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588098341
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Alert: below comment probably off-topic for this issue. I'll start a new one as soon as I have something more than a hunch. Sorry for spamming!</p>\n<hr>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 474) seem bogus. <code>local_range</code> has a Cranelift type <code>ValueLocRange</code>, which most probably don't contain Wasm bytecode offsets (<code>WasmAddress</code>?), but function-relative machine-code offsets (<code>GeneratedAddress</code>?). Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195606782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588098525
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620773378\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Alert: below comment probably off-topic for this issue. I'll start a new one as soon as I have something more than a hunch. Sorry for spamming!</p>\n<hr>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></pre></div>\n\n\n<p>(around line 474) seem bogus. <code>local_range</code> has a Cranelift type <code>ValueLocRange</code>, which most probably doesn't contain Wasm bytecode offsets (<code>WasmAddress</code>?), but function-relative machine-code offsets (<code>GeneratedAddress</code>?). Then doing <code>translate_ranges</code> with those won't make sense. Instead the machine offset ranges must be  iterated in the <code>FuncTransform</code> based on their <code>gen_start</code> and <code>gen_end</code>.</p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n<p>I keep working on this.</p>\n</blockquote>",
        "id": 195608241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588099172
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620797355\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-620797355\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<blockquote>\n<p>I _think_ I found something fishy. These lines in <code>expression.rs</code>:</p>\n<p><code>\n                let wasm_start = local_range.start;\n                let wasm_end = local_range.end;\n</code></p>\n<p>@yurydelendik can you confirm (some of) this?</p>\n</blockquote>\n<p>@ggreif Yes, it is fixed in #1572. Can you review entire PR? ;)</p>\n</blockquote>",
        "id": 195611152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588100657
    },
    {
        "content": "<p>TerryGuo <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-621590021\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-621590021\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>@yurydelendik @ggreif Thanks for your work. I can confirm that the variables in C code can be viewed with the latest llvm trunk and the fix in #1572.</p>\n</blockquote>",
        "id": 195794990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588217052
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-621771217\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-621771217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Fixed by #1572.</p>\n</blockquote>",
        "id": 195825244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588245573
    },
    {
        "content": "<p>yurydelendik closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Hi there,<br>\nI built a wasm toolchain from the recent LLVM10 release and compile my C code to wasm with command :</p>\n<blockquote>\n<p>clang --target=wasm32 fib.c -nostdlib -Wl,-entry=fib -g -O0 -o fib.wasm</p>\n</blockquote>\n<p>Then debug it with the wasmtime built from the lastest master branch:</p>\n<blockquote>\n<p>lldb -- ./wasmtime/target/release/wasmtime  run fib.wasm --invoke fib 40</p>\n</blockquote>\n<p>The breakpoint to function fib works well, but the local variables in my C code can't be viewed. Maybe I am not doing things in the right way. Could some one please help me? Thanks in advance.</p>\n<blockquote>\n<p>Current executable set to './wasmtime/target/release/wasmtime' (x86_64).                                                                    [0/1836]<br>\n(lldb) settings set -- target.run-args  \"-g\" \"fib.wasm\" \"--invoke\" \"fib\" \"40\"<br>\n(lldb) b fib<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 26871 launched: '/data/home/terry/projects/wasmtime/wasmtime/target/release/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nwarning: using <code>--invoke</code> with a function that takes arguments is experimental and may break in the future<br>\nProcess 26871 stopped\n* thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff6209026 JIT(0x555555dccfb0)<code>fib(n=&lt;unavailable&gt;) at fib.c:2:13\n   1    int fib(int n) {\n-&gt; 2      int i, t, a = 0, b = 1;\n   3      for (i = 0; i &lt; n; i++) {\n   4        t = a;\n   5        a = b;\n   6        b += t;\n   7      }\n(lldb) n\nProcess 26871 stopped\n* thread #1, name = 'wasmtime', stop reason = step over\n    frame #0: 0x00007ffff6209030 JIT(0x555555dccfb0)</code>fib(n=&lt;unavailable&gt;) at fib.c:3:10<br>\n   1    int fib(int n) {<br>\n   2      int i, t, a = 0, b = 1;<br>\n-&gt; 3      for (i = 0; i &lt; n; i++) {<br>\n   4        t = a;<br>\n   5        a = b;<br>\n   6        b += t;<br>\n   7      }<br>\n(lldb) p t<br>\nerror: Couldn't materialize: couldn't get the value of variable t: Expression stack needs at least 1 item for DW_OP_plus_uconst.<br>\nerror: errored out in DoExecute, couldn't PrepareToExecuteJITExpression<br>\n(lldb)</p>\n</blockquote>\n<p>And my fib C code is as below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 195835873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588252115
    },
    {
        "content": "<p>abbec <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-739538049\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Quick question @yurydelendik, do you have a link to the DW_AT_frame_base patch so I can confirm I have It because I see the same problem.</p>\n</blockquote>",
        "id": 218996616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607276983
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-739550702\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<blockquote>\n<p>do you have a link to the DW_AT_frame_base patch so I can confirm I have It because I see the same problem.</p>\n</blockquote>\n<p>AFAIK DW_AT_frame_base related patch, not my though, landed in LLVM (since version 10?)</p>\n</blockquote>",
        "id": 219000345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607282856
    },
    {
        "content": "<p>abbec <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613#issuecomment-739578519\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">Issue #1613</a>:</p>\n<blockquote>\n<p>Might very well be the case :) I just could Not find any info searching for that.</p>\n</blockquote>",
        "id": 219028031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607295004
    }
]