[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a> from <code>packed-shifts</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change first modifies <code>SyntheticAmode</code> to allow it to refer to constants: this is helpful because <code>SyntheticAmode</code> and <code>Amode</code> are used throughout the x64 backend to refer to memory locations so constants can now fit into that scheme. (In a future PR I will modify <code>vconst</code> to simply lower to a <code>Inst::XmmUnaryRmR</code>, which accepts a <code>SyntheticAmode</code>, instead of using the special <code>Inst::XmmLoadConst</code> variant).</p>\n<p>With that in place, I added all of the lowerings for the vector versions of <code>ishl</code>, <code>sshr</code>, and <code>ushr</code>. There are several interesting parts to this:</p>\n<ul>\n<li>vector shifts can accept an immediate shift amount, so this must be handled in each case; if the shift amount is dynamic, then it must be moved to an XMM register</li>\n<li>the x86 ISA does not provide  <code>i8x16</code> shifts, so these are lowered either using a mask table (<code>ishl</code> and <code>ushr</code>) or using packing/unpacking (<code>sshr</code>)</li>\n<li>the equivalent of <code>sshr.i64x2</code> is also missing in the x86 ISA so a \"extract, scalar shift, insert\" scheme is used (as it was in the old backend)<br>\nThe issues above are documented in detail in the code.</li>\n</ul>\n</blockquote>",
        "id": 216413327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605139926
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a>.</p>",
        "id": 216413328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605139926
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a>.</p>",
        "id": 216413329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605139926
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/jlb6740\">jlb6740</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a>.</p>",
        "id": 216413330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605139926
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a> from <code>packed-shifts</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change first modifies <code>SyntheticAmode</code> to allow it to refer to constants: this is helpful because <code>SyntheticAmode</code> and <code>Amode</code> are used throughout the x64 backend to refer to memory locations so constants can now fit into that scheme. (In a future PR I will modify <code>vconst</code> to simply lower to a <code>Inst::XmmUnaryRmR</code>, which accepts a <code>SyntheticAmode</code>, instead of using the special <code>Inst::XmmLoadConst</code> variant).</p>\n<p>With that in place, I added all of the lowerings for the vector versions of <code>ishl</code>, <code>sshr</code>, and <code>ushr</code>. There are several interesting parts to this:</p>\n<ul>\n<li>vector shifts can accept an immediate shift amount, so this must be handled in each case; if the shift amount is dynamic, then it must be moved to an XMM register</li>\n<li>the x86 ISA does not provide  <code>i8x16</code> shifts, so these are lowered either using a mask table (<code>ishl</code> and <code>ushr</code>) or using packing/unpacking (<code>sshr</code>)</li>\n<li>the equivalent of <code>sshr.i64x2</code> is also missing in the x86 ISA so a \"extract, scalar shift, insert\" scheme is used (as it was in the old backend)</li>\n</ul>\n<p>The issues above are documented in detail in the code.</p>\n</blockquote>",
        "id": 216413362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605139975
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-528665291\">PR Review</a>.</p>",
        "id": 216419763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-528665291\">PR Review</a>.</p>",
        "id": 216419764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r521756264\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps <code>assert!((ty == types::F32 &amp;&amp; lane &lt; 4) || (ty == types::F64 &amp;&amp; lane &lt; 1))</code> above to ensure this is the case?</p>\n</blockquote>",
        "id": 216419765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r521768593\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we add some documentation here describing how these tables were computed? I think I get the general idea -- for the \"low half\" 8 bits of each 16-bit shifted-right value, we need to mask out the bits that migrated from the high half to the low half -- but, e.g., why are the first three values of the shift-by-1 case (second row) 0xff, rather than the first, third, fifth, ...?</p>\n</blockquote>",
        "id": 216419766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r521768772\">PR Review Comment</a>:</p>\n<blockquote>\n<p>s/then/them/</p>\n</blockquote>",
        "id": 216419767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r521770650\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is somewhat surprising to me; I would have expected the definition of <code>ushr</code> to be that it masks the shift amount first, so e.g. a 33-bit shift of a 32-bit lane is the same as a 1-bit shift. The definition in <code>codegen/meta/src/shared/instructions.rs</code> seems to indicate this as well (shift-amount <code>s :=  y mod B</code>). Does this mean we need an explicit mask first?</p>\n</blockquote>",
        "id": 216419768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605146660
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-528760787\">PR Review</a>.</p>",
        "id": 216429682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605159123
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r521849572\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this is a good catch. ushr_i32x4 lowers to SHR (unsigned divide) which is masks the count to 5 bits .. meaning the shift is 1-bit and not 33-bit. @cfallin What do you mean by an explicit mask first .. is it just the file tests that needs updating?</p>\n</blockquote>",
        "id": 216429685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605159123
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-529443368\">PR Review</a>.</p>",
        "id": 216518841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605210840
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r522381748\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Added some documentation; to make things simpler, I mask both lanes though this is not strictly necessary and what you are seeing is <code>rustfmt</code> sending some of the mask on to the next line.</p>\n</blockquote>",
        "id": 216518842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605210840
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-529451948\">PR Review</a>.</p>",
        "id": 216520279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211537
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r522388407\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Huh, yeah. Good thing I added that test <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>; I think I remember adding it to the old backend to remind me of this issue. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L1582\"><code>code_translator.rs</code> already does this masking</a> so the extra masking was overkill, but the old backend was legalizing <code>ushr</code> to <code>x86_psrl</code> (and the like) so the test was correct for those ISA-specific instructions. When I refactored the test to use <code>ushr</code>, it doesn't match the Cranelift semantics, as you observe.</p>\n<p>I don't think we should mask twice,once in CLIF and again in the x64 backend, and I don't feel too strongly about which solution is best:</p>\n<ul>\n<li>avoid masking in <code>code_translator.rs</code> and mask instead in the backend, leaving the CLIF semantics as-is</li>\n<li>leave the masking in <code>code_translator.rs</code> and change the CLIF semantics</li>\n</ul>\n<p>Since either change might involve changes to other backends and since this currently passes the Wasm spec tests, I would be in favor of creating an issue and resolving it in a separate PR. What do you think?</p>\n</blockquote>",
        "id": 216520280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211537
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r522388407\">PR Review Comment</a>.</p>",
        "id": 216520383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211567
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a> from <code>packed-shifts</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change first modifies <code>SyntheticAmode</code> to allow it to refer to constants: this is helpful because <code>SyntheticAmode</code> and <code>Amode</code> are used throughout the x64 backend to refer to memory locations so constants can now fit into that scheme. (In a future PR I will modify <code>vconst</code> to simply lower to a <code>Inst::XmmUnaryRmR</code>, which accepts a <code>SyntheticAmode</code>, instead of using the special <code>Inst::XmmLoadConst</code> variant).</p>\n<p>With that in place, I added all of the lowerings for the vector versions of <code>ishl</code>, <code>sshr</code>, and <code>ushr</code>. There are several interesting parts to this:</p>\n<ul>\n<li>vector shifts can accept an immediate shift amount, so this must be handled in each case; if the shift amount is dynamic, then it must be moved to an XMM register</li>\n<li>the x86 ISA does not provide  <code>i8x16</code> shifts, so these are lowered either using a mask table (<code>ishl</code> and <code>ushr</code>) or using packing/unpacking (<code>sshr</code>)</li>\n<li>the equivalent of <code>sshr.i64x2</code> is also missing in the x86 ISA so a \"extract, scalar shift, insert\" scheme is used (as it was in the old backend)</li>\n</ul>\n<p>The issues above are documented in detail in the code.</p>\n</blockquote>",
        "id": 216520450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211610
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-529476775\">PR Review</a>.</p>",
        "id": 216524420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605213344
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r522410217\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, interesting; so this is mainly an issue for (i) CLIF compile tests and (ii) potentially other Cranelift embedders. For the latters' sake, I think we should err on the side of implementing the CLIF semantics as currently defined, i.e., doing the masking in the backends. Happy to have this become a followup issue/PR though. Thanks for digging into it!</p>\n</blockquote>",
        "id": 216524422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605213344
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-529477127\">PR Review</a>.</p>",
        "id": 216524519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605213376
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#pullrequestreview-529547183\">PR Review</a>.</p>",
        "id": 216537753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605219696
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397#discussion_r522467929\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sure, I opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2409\">https://github.com/bytecodealliance/wasmtime/issues/2409</a>.</p>\n</blockquote>",
        "id": 216537754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605219696
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2397\">PR #2397</a>.</p>",
        "id": 216537765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605219707
    }
]