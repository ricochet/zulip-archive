[
    {
        "content": "<p>guybedford <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569#issuecomment-1821926970\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569\">issue #7569</a>:</p>\n<blockquote>\n<p>Note that the underlying reason for this is the use of IEEE-754 floating point to represent these times in Node.js (some APIs have upgraded to BigInt, but not all).</p>\n</blockquote>",
        "id": 403490500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700614813
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569#issuecomment-1823086361\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569\">issue #7569</a>:</p>\n<blockquote>\n<p>Sorry I'm still pretty confused as to what's going on. </p>\n<blockquote>\n<p>2000 for u64 is 2000 * 100 nanoseconds is 200 microseconds</p>\n</blockquote>\n<p>I don't understand what this means in the context of the structures here. All timestamps in preview1 are in units of nanoseconds, not in units of 100 nanoseconds. That means that 2000 nanoseconds is 2 microseconds, so I don't understand where your 200 number is coming from. Is this perhaps a bug in the Node bits where Node is reporting timestamps in units of 100 nanoseconds? If that's the case then numbers should be multiplied by 100 when making their way into WASI.</p>\n<blockquote>\n<p>Could these assertions be left as-is with a larger adjustment above that isn't arounded?</p>\n</blockquote>\n<p>There's two axes here sort of I think. On one axis it should probably be mandated that some granularity is required to pass the test suite. The previous granularity was too small for Node so testing a higher granularity seems fine. That would be my suggestion of updating time in an increment of 200us for example as in theory that granularity should be supported. This could go as high as 2 seconds perhaps though.</p>\n<p>The other axis is a fine-grained update of time. That part of the test could be disabled on Node. I think that if the test is updated though then it shouldn't test one thing in Node and another everywhere else. Ideally only parts of it are disabled in Node if Node doesn't support finer-grained timestamps.</p>\n<hr>\n<p>I also don't understand why Node is testing equality using division. Shouldn't the exact values be equal in Node? For example if Node reports a timestamp is N and it's updated to N+200us, then shouldn't the resulting timestamp afterwards be exactly N+200us? I'm not sure why the division would be needed because N should already be at the maximal precision (or so I'm assuming) and the 200us would also be at the maximal precision too, neither is more precise than what the system supports.</p>\n</blockquote>",
        "id": 403626209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700670229
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569#issuecomment-1823087516\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569\">issue #7569</a>:</p>\n<blockquote>\n<p>Also sorry I don't mean to be pedantic about minor test changes. It's ok to land something that works since the cases here are relatively minor, but nevertheless I'd also like to understand this change more.</p>\n</blockquote>",
        "id": 403626365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700670272
    },
    {
        "content": "<p>guybedford deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569#issuecomment-1821926970\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569\">issue #7569</a>:</p>\n<blockquote>\n<p>Note that the underlying reason for this is the use of IEEE-754 floating point to represent these times in Node.js (some APIs have upgraded to BigInt, but not all).</p>\n</blockquote>",
        "id": 403647655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700678801
    },
    {
        "content": "<p>guybedford <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569#issuecomment-1823458944\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7569\">issue #7569</a>:</p>\n<blockquote>\n<p>@alexcrichton apologies for the confusion, I made an invalid assumption that the u64 mtime value was in units of 100 nanoseconds due to a misreading of the docs. I've updated the PR to now reference 1us accuracy.</p>\n<p>I've changed the configuration option name to <code>FS_TIME_PRECISION</code>.</p>\n<blockquote>\n<p>I also don't understand why Node is testing equality using division. Shouldn't the exact values be equal in Node? For example if Node reports a timestamp is N and it's updated to N+200us, then shouldn't the resulting timestamp afterwards be exactly N+200us?</p>\n</blockquote>\n<p>Because Node.js rounds to microseconds, if we set a timestamp N, the timestamp that actually gets set is a Node.js-rounded N.</p>\n<blockquote>\n<p>The other axis is a fine-grained update of time.</p>\n</blockquote>\n<p>For now I've treated both of these axes the same - the fs time precision. Where the unit of time we update is twice the precision, and the unit of time we check for is equality under that same precision. This makes sense I think because we are effectively observing this implementation-defined rounding function.</p>\n<p>Ready for review, further feedback welcome.</p>\n</blockquote>",
        "id": 403660309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700684542
    }
]