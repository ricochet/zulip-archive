[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1010403820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>This is a complex lowering due to not only the tree-matching of the CLIF IR but also the sequences required by x64. Because of this the PR will need to go through a few more changes:</p>\n<ul>\n<li>[ ] add a way to emit a sequence like the following for <code>FloatCC.Equal</code> and <code>FloatCC.NotEqual</code>: <code>UNORD* + MOV + JNP + MOV + JZ + MOV</code>--because this sequence must reuse the same flags (and avoid modifications to them, @cfallin suggested implementing a new <code>Inst::XmmCmoveOr</code> (but that also implies building a new <code>Inst::Cmove</code> as well)</li>\n<li>[ ] add a way to emit conditional moves for multiple register values</li>\n<li>[ ] implement the integer comparison side of these instructions (both the tree-matching version and the non-tree-matching versions)</li>\n</ul>\n<p>I'm putting this PR up as a draft to see if I can get some help with the above and early feedback on any suggested refactoring to the rules.<br>\n</p>\n</blockquote>",
        "id": 267653305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641939082
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1010403820\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>This is a complex lowering due to not only the tree-matching of the CLIF IR but also the sequences required by x64. Because of this the PR will need to go through a few more changes:</p>\n<ul>\n<li>[ ] add a way to emit a sequence like the following for <code>FloatCC.Equal</code> and <code>FloatCC.NotEqual</code>: <code>UNORD* + MOV + JNP + MOV + JZ + MOV</code>--because this sequence must reuse the same flags (and avoid modifications to them, @cfallin suggested implementing a new <code>Inst::XmmCmoveOr</code> (but that also implies building a new <code>Inst::CmoveOr</code> as well)</li>\n<li>[ ] add a way to emit conditional moves for multiple register values</li>\n<li>[ ] implement the integer comparison side of these instructions (both the tree-matching version and the non-tree-matching versions)</li>\n</ul>\n<p>I'm putting this PR up as a draft to see if I can get some help with the above and early feedback on any suggested refactoring to the rules.<br>\n</p>\n</blockquote>",
        "id": 267653441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641939107
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1010417722\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 267656101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641940320
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1013565814\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>@cfallin, @fitzgen: I am finding some very strange behavior with ISLE and I'm not sure what is going on. Take, e.g., the following runtest:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">select_le_i32</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_i32</span><span class=\"p\">(</span><span class=\"mh\">0x42</span><span class=\"p\">.</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_i32</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_i32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x42</span><span class=\"p\">.</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_i32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"mh\">0x42</span><span class=\"p\">.</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x42</span><span class=\"p\">.</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If we run that (<code>RUST_LOG=cranelift_codegen::machinst::compile=trace cargo run -p cranelift-tools -- test -dv scratch.clif</code>), the second set of tests fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">run</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">test</span>: <span class=\"nc\">run</span>: <span class=\"o\">%</span><span class=\"n\">select_le_f32</span><span class=\"p\">(</span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">090800</span><span class=\"n\">p6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span>: <span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">000000</span><span class=\"n\">p</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The reason for this is that <code>%xmm0</code> and <code>%xmm1</code> are magically \"flipped\" when passed to the comparison instruction, <code>ucomiss</code>. The first function, <code>select_le_i32</code>, has the correct order (<code>ucomiss %xmm0, %xmm1</code>) whereas the second does not (<code>ucomiss %xmm1, %xmm0</code>). This is visible in the log statements for each (in order):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">regalloc</span>: <span class=\"nc\">final</span><span class=\"w\"> </span><span class=\"n\">version</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">xorl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">ucomiss</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>:   <span class=\"nc\">cmovnbl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span>:   <span class=\"nc\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">9</span>:   <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">vcode</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">regalloc</span>: <span class=\"nc\">final</span><span class=\"w\"> </span><span class=\"n\">version</span>:\n<span class=\"nc\">VCode_ShowWithRRU</span><span class=\"w\"> </span><span class=\"p\">{{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n  <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>:   <span class=\"nc\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>:   <span class=\"nc\">xorps</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>:   <span class=\"nc\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">1065353216</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>:   <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>:   <span class=\"nc\">ucomiss</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>:   <span class=\"nc\">jb</span><span class=\"w\"> </span><span class=\"cp\">$next</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">movss</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$next</span>:\n  <span class=\"nc\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>:   <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">8</span>:   <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">9</span>:   <span class=\"nc\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">10</span>:   <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the code on this branch, both lowerings use the <code>fpcmp</code> helper for the comparison and the <code>cmove</code> helper to emit either a true <code>CMOV</code> in the first case or a jump version in the second. I would expect both to have the same <code>ucomiss</code> ordering but they do not.</p>\n<p>I then try to determine if in fact the \"less than or equal\" rule is firing in both cases. Using a well-placed <code>panic!</code> I now see that it is not firing in the first case but is in the second (this implies that I will have to rather unintuitively flip the operands in the rule to make the lowering come out right). </p>\n<p>But why is the rule not firing in the first case? After debugging through <code>generated_code.rs</code> for a while, it becomes clear that it is bailing out in the <code>fpcmp</code> helper. Ok, I guess the type being passed in to the helper should be the comparison type, not the select type. [...spends time trying to figure out how to grab that type]. I guess first that <code>has_type</code> wraps <code>def_inst</code>--nope. Does it wrap the <code>fcmp</code> itself? Nope. How about wrapping one of <code>fcmp</code>'s operands? That fails with an <code>Unknown variable 'a'</code>.</p>\n<p>Any help?</p>\n</blockquote>",
        "id": 268093855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642208186
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1015664438\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok, I guess the type being passed in to the helper should be the comparison type, not the select type. [...spends time trying to figure out how to grab that type].</p>\n</blockquote>\n<p>You can use <code>value_type</code> to get the type of a value, e.g. an operand to the instruction you are lowering:</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">select</span> <span class=\"nv\">val</span> <span class=\"nv\">@</span> <span class=\"p\">(</span><span class=\"nv\">value_type</span> <span class=\"nv\">val_ty</span><span class=\"p\">)</span> <span class=\"o\">...</span><span class=\"p\">))</span>\n      <span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 268430305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642528253
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1015664438\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ok, I guess the type being passed in to the helper should be the comparison type, not the select type. [...spends time trying to figure out how to grab that type].</p>\n</blockquote>\n<p>You can use <code>value_type</code> to extract the type of a value, e.g. an operand to the instruction you are lowering:</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">select</span> <span class=\"nv\">val</span> <span class=\"nv\">@</span> <span class=\"p\">(</span><span class=\"nv\">value_type</span> <span class=\"nv\">val_ty</span><span class=\"p\">)</span> <span class=\"o\">...</span><span class=\"p\">))</span>\n      <span class=\"o\">...</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 268430405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642528312
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1024803242\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>@fitzgen, @cfallin: this should be ready for review. The <code>lower.isle</code> code is a lot more readable now but I suspect there are better ways to do things; concretely, to somehow avoid the \"use values instead of regs\" pattern and the hard-coding in the <code>i128</code> versions of <code>cmove</code>.</p>\n<p>I've also opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3743\">https://github.com/bytecodealliance/wasmtime/issues/3743</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3744\">https://github.com/bytecodealliance/wasmtime/issues/3744</a> as a result of this work.</p>\n</blockquote>",
        "id": 269828807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643420818
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1024803242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>@fitzgen, @cfallin: this should be ready for review. The <code>lower.isle</code> code is a lot more readable now but I suspect there are better ways to do things; concretely, to somehow avoid the \"use values instead of regs\" pattern and the hard-coding in the <code>i128</code> versions of <code>cmove</code>.</p>\n<p>I've also opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3743\">https://github.com/bytecodealliance/wasmtime/issues/3743</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3744\">https://github.com/bytecodealliance/wasmtime/issues/3744</a> as a result of this work. Work that is still TODO but could probably go in separate PRs is to translate the other side of the <code>select</code>, the integer side, to ISLE and upgrade the CLIF fuzzer to generate these kinds of instructions (it only emits simple numerics now).</p>\n</blockquote>",
        "id": 269829048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643421119
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1010403820\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>This is a complex lowering due to not only the tree-matching of the CLIF IR but also the sequences required by x64. Because of this the PR will need to go through a few more changes:</p>\n<ul>\n<li>[x] add a way to emit a sequence like the following for <code>FloatCC.Equal</code> and <code>FloatCC.NotEqual</code>: <code>UNORD* + MOV + JNP + MOV + JZ + MOV</code>--because this sequence must reuse the same flags (and avoid modifications to them, @cfallin suggested implementing a new <code>Inst::XmmCmoveOr</code> (but that also implies building a new <code>Inst::CmoveOr</code> as well)</li>\n<li>[ ] add a way to emit conditional moves for multiple register values</li>\n<li>[ ] implement the integer comparison side of these instructions (both the tree-matching version and the non-tree-matching versions)</li>\n</ul>\n<p>I'm putting this PR up as a draft to see if I can get some help with the above and early feedback on any suggested refactoring to the rules.<br>\n</p>\n</blockquote>",
        "id": 270288685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750427
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1010403820\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>This is a complex lowering due to not only the tree-matching of the CLIF IR but also the sequences required by x64. Because of this the PR will need to go through a few more changes:</p>\n<ul>\n<li>[x] add a way to emit a sequence like the following for <code>FloatCC.Equal</code> and <code>FloatCC.NotEqual</code>: <code>UNORD* + MOV + JNP + MOV + JZ + MOV</code>--because this sequence must reuse the same flags (and avoid modifications to them, @cfallin suggested implementing a new <code>Inst::XmmCmoveOr</code> (but that also implies building a new <code>Inst::CmoveOr</code> as well)</li>\n<li>[x] add a way to emit conditional moves for multiple register values</li>\n<li>[ ] implement the integer comparison side of these instructions (both the tree-matching version and the non-tree-matching versions)</li>\n</ul>\n<p>I'm putting this PR up as a draft to see if I can get some help with the above and early feedback on any suggested refactoring to the rules.<br>\n</p>\n</blockquote>",
        "id": 270288694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643750429
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1027310911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<blockquote>\n<p>How confident are you in these lowerings? We talked before about getting the clif interpreter and fuzzer working for f32/f64 constants, fcmp, and select. Should we do that before landing these changes?</p>\n</blockquote>\n<p>I would vote \"no.\" ISLE basically creates a conflict for every rebased commit requiring an ISLE rebuild and Git twiddling to ensure things are right before moving on. For those of use who try to keep a clean history with atomic commits, this additional burden makes keeping a long-running PR like this pretty painful. As you can see, I'm now just committing review patches in hopes that I can do one final rebase before merging.</p>\n<p>Also, the CLIF interpreter has not been extended for any of the other ISLE lowerings so doing it here is extra work that no other PRs have had to do. I don't mind doing this kind of thing but the \"build up the infrastructure before merging\" tasks are starting to pile up: bringing <code>FloatCC</code> to ISLE (which turned into bringing all enums to ISLE), create a new machinst variant for <code>CmoveOr</code>, create ISLE helpers for various things (cmove, FP comparison, register class checks), create CLIF run tests for <code>select</code>, find and report bugs with extractors, and (just recently added) figure out a way to express that two instructions consume the same flags. So I was hoping to not have to build up a fuzz target to get this merged.</p>\n</blockquote>",
        "id": 270291250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643751358
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1027315030\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>@abrown @fitzgen from my own perspective at least, I think it's fair to merge this at its current state and take some followup PRs/tasks -- I agree with @abrown that this pretty much maintains our status-quo in the sense that it passes existing tests. Deferring to @fitzgen on the detailed review discussions above of course...</p>\n</blockquote>",
        "id": 270292179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643751710
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682#issuecomment-1045217873\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3682\">issue #3682</a>:</p>\n<blockquote>\n<p>Not sure why aarch64 and s390x <a href=\"https://github.com/bytecodealliance/wasmtime/runs/5253701479?check_suite_focus=true#step:12:651\">CLIF tests are failing</a>--they shouldn't be running!</p>\n</blockquote>",
        "id": 272460992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645220336
    }
]