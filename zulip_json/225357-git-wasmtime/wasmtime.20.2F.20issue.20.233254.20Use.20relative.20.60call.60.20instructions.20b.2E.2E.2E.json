[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906778987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>I'm not overly happy with the number of tests I have for this, but I don't know how to otherwise exercise it more. One test I'd like to add is a sort of binary search that tries to stress the logic around precise sizes and when veneers are inserted, but I couldn't figure out a good way to test the binary search, e.g. somehow read out whether a veneer was inserted or not. @cfallin if you've got ideas of how to more thoroughly test this I'd love to implement them.</p>\n</blockquote>",
        "id": 250848739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630016037
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906783785\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>@alexcrichton Thanks -- this looks like a bit of a monster and I will dive in a bit later, but on reading the PR description only, one thing strikes me: it should be possible to test the veneer insertion without generating tons of padding by forcing a \"always use veneers\" mode, no? I'm not sure if the plumbing is there to take Cranelift options in <code>wasmtime-cranelift::obj</code> but if not, perhaps this would be an appropriate reason to carry some options into that code (I can imagine other linker options might appear in the future).</p>\n</blockquote>",
        "id": 250850129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630016677
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906783785\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>@alexcrichton Thanks -- this looks like a bit of a monster and I will dive in a bit later, but on reading the PR description only, one thing strikes me: it should be possible to test the veneer insertion without generating tons of padding by forcing an \"always use veneers\" mode, no? I'm not sure if the plumbing is there to take Cranelift options in <code>wasmtime_cranelift::obj</code> but if not, perhaps this would be an appropriate reason to carry some options into that code (I can imagine other linker options might appear in the future).</p>\n</blockquote>",
        "id": 250850268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630016762
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906806036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @kubkon, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"fuzzing\", \"wasi\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>kubkon: wasi</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 250855798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630019876
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906822064\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<blockquote>\n<p>we could extend the calls to an 8 GB range</p>\n</blockquote>\n<p>Do you know if this is common in normal AArch64 compilers? (e.g. gcc or llvm). Do you know if this is better than our current strategy of load-a-literal-and-call-it? (which we could presumably change to being a relative literal if we wanted)</p>\n<blockquote>\n<p>have we ever thought about using code memory pages that are executable, but not readable, as additional security hardening?</p>\n</blockquote>\n<p>ooh interesting! I always thought the execute permission implied the read permission, but if we could prevent reading that'd be pretty nifty! I'm not sure how feasible it would be at the Cranelift-level but we could try to shove information like that into the VMContext, but that's pretty Wasmtime-specific.</p>\n<p>(I don't know if others have pondered this myself)</p>\n</blockquote>",
        "id": 250859377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630022621
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906832916\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>have we ever thought about using code memory pages that are executable, but not readable, as additional security hardening?</p>\n</blockquote>\n<p>ooh interesting! I always thought the execute permission implied the read permission, but if we could prevent reading that'd be pretty nifty! I'm not sure how feasible it would be at the Cranelift-level but we could try to shove information like that into the VMContext, but that's pretty Wasmtime-specific.</p>\n</blockquote>\n<p>It's definitely possible, but it would take some additional work with regard to linking: specifically we would need relocations that refer to <code>.rodata</code> and would need to fix those up to point to all constants in a pool at the end of the object.</p>\n<p>There's the additional complication that on RISC-ish architectures like aarch64 there are limits on distance to literal-constant loads (<code>LDR</code> supports +/- 1MiB if I'm not mistaken?) which would mean we'd need constant islands between functions, and to switch between execute-only and read-only pages.</p>\n<p>That said other platforms do W^X pretty successfully (OpenBSD by default at least) and it'd be a cool mitigation to say that we can do  too :-)</p>\n</blockquote>",
        "id": 250861180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630024191
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-906846765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you know if this is common in normal AArch64 compilers? (e.g. gcc or llvm).</p>\n</blockquote>\n<p>I honestly don't know - I just wanted to mention the possibility.</p>\n<blockquote>\n<p>Do you know if this is better than our current strategy of load-a-literal-and-call-it?</p>\n</blockquote>\n<p>I believe so - while the veneers avoid the worst aspect of that approach (the need to have a short jump over the literal, as we do for SIMD &amp; FP literals right now), <code>ADRP</code> and <code>ADD</code> are very fast arithmetic instructions, while a literal load is still a load. Also, unless several call sites manage to share the literal, the code size is worse - 12 bytes (literal load, i.e. 4 bytes + 8-byte literal) vs. 2 instructions, i.e. 8 bytes.</p>\n<blockquote>\n<p>I always thought the execute permission implied the read permission...</p>\n</blockquote>\n<p>If I am not mistaken, not in the 64-bit Arm architecture.</p>\n<blockquote>\n<p>There's the additional complication that on RISC-ish architectures like aarch64 there are limits on distance to literal-constant loads (<code>LDR</code> supports +/- 1MiB if I'm not mistaken?)...</p>\n</blockquote>\n<p>Yes, but in the AArch64 case we could apply a similar trick to get some extra breathing room, i.e. an <code>ADRP</code> + plain <code>LDR</code> combination - it is not an accident that <code>ADRP</code> forms 12-bit-aligned addresses, while <code>LDR</code> supports unsigned 12-bit offsets <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. In fact, that combination is treated in a special way by Cortex-A55, for example, effectively fusing it.</p>\n</blockquote>",
        "id": 250864090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630026653
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-907357136\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>Today the <code>X86PCRelRodata4</code> relocation type coming out of cranelift is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7b98be1beee19cb886cdd69d616fe0bd5548b2a5/crates/cranelift/src/obj.rs#L336-L338\">simply ignored</a>, but I don't know why it is ignored. I just added a commit to ignore it which fixes tests on the old backend, but if someone else knows of a better comment to add as to why it's ignored I'd be happy to write it in.</p>\n</blockquote>",
        "id": 250964904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630085068
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-907363415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p><code>X86PCRelRodata4</code> is a relocation pointing to read-only data directly after a function. It only exists so that it is possible to move this read-only data away from the function. If you don't do this, the emitted code is pre-relocated for the expected location of the trailing read-only data.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f399419c60c0306d13e39c2f955090f7da943f/cranelift/jit/src/backend.rs#L916-L919\">https://github.com/bytecodealliance/wasmtime/blob/e6f399419c60c0306d13e39c2f955090f7da943f/cranelift/jit/src/backend.rs#L916-L919</a></p>\n<p>It by the way isn't emitted by any new style backends.</p>\n</blockquote>",
        "id": 250966568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630085766
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-907385083\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>I don't know the current status of this, but at one point, the way Cranelift was embedded in SpiderMonkey, SpiderMonkey would prepend and append instructions to Cranelift's output, and we needed the ability to move the constant pool rodata around to make room.</p>\n</blockquote>",
        "id": 250971932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630088085
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254#issuecomment-909630357\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3254\">issue #3254</a>:</p>\n<blockquote>\n<p>Ok talked with @cfallin offline about merging all this into <code>MachBuffer</code> and after some fiddling I think it's going to work (got the test suite passing locally on arm64 at least). I'm gonna close this and I'll reopen with a cleaned up history, a rebase, and a new commit message.</p>\n</blockquote>",
        "id": 251458223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630443393
    }
]