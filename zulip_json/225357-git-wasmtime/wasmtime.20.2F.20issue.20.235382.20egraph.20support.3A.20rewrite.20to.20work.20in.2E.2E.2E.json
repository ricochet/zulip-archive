[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1338780560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<p>I'll see about splitting this into logical pieces in separate commits tomorrow; I wanted to get the rebased / cleaned-up state up first. I'll run some more benchmarks as well.</p>\n</blockquote>",
        "id": 314172190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670304145
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1339138333\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<p>How are alias values printed in the textual format of clif ir? And can it be read back?</p>\n</blockquote>",
        "id": 314211017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670323996
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1339748205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<blockquote>\n<p>How are alias values printed in the textual format of clif ir? And can it be read back?</p>\n</blockquote>\n<p>They currently aren't; because union values aren't present in the layout, the usual CLIF writer won't see them (it ignores all insts and values not \"in the function\" as per the layout). I agree it would be great to come up with a text format for egraph-stage CLIF; maybe as a followup to the initial PR?</p>\n</blockquote>",
        "id": 314288917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670348831
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1339954255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>How are alias values printed in the textual format of clif ir? And can it be read back?</p>\n</blockquote>\n<p>They currently aren't; because union values aren't present in the layout, the usual CLIF writer won't see them (it ignores all insts and values not \"in the function\" as per the layout). I agree it would be great to come up with a text format for egraph-stage CLIF; maybe as a followup to the initial PR?</p>\n</blockquote>\n<p>Sure.</p>\n</blockquote>",
        "id": 314318524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670357845
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1340057687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<p>Updated and addressed everything, I think! (Left the one thread about multi-result instructions open; that's something we'll want to address somehow eventually, but I think isn't a quick/easy thing to address in this PR.) Thanks for the review!</p>\n</blockquote>",
        "id": 314333227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670363534
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1340163640\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<p>Interesting benchmark discovery:</p>\n<ul>\n<li>This PR's work branched from main on Nov 19, which was between #5231 landing and #5335 landing, i.e., when we accidentally had turned on explicit bounds-checks unconditionally;</li>\n<li>On the <code>egraph-in-dfg</code> branch in my fork (this PR's original branch), I continue to see the speedups above;</li>\n<li>On the rebase (<code>egraph-in-dfg-rebase</code> in my fork), the speedups disappear into the noise.</li>\n</ul>\n<p>This seems to indicate to me that on worse code (explicit bounds checks), this approach is a little more efficient, while otherwise it's more-or-less equivalent.</p>\n<p>Given the two other benefits of flexibility (writing rewrite rules in a simple way) and verifiability, on balance I suspect this will still make sense to turn on by default once fuzz-clean. (I'm doing a followup PR to add it to fuzzing configs.) But I'm very open to discussion on that; one alternative is to keep adding rewrite rules until we see a very clear code-quality (runtime) win.</p>\n</blockquote>",
        "id": 314348631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670370146
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382#issuecomment-1351633105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5382\">issue #5382</a>:</p>\n<blockquote>\n<p>I just did some benchmarking of egraphs and the perf improvement is huge on the benchmark I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">8.553</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.010</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">8.539</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.014</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">8.543</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">8.568</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"></span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_egraph</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">6.068</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.017</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">6.057</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.011</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">6.047</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">6.108</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"></span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_release</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">6.450</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.021</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">6.439</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.012</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">6.410</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">6.482</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"></span>\n\n<span class=\"n\">Benchmark</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_release_egraph</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">5.853</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">  </span><span class=\"mf\">0.053</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">5.841</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">0.012</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">5.779</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">5.908</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\">    </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"></span>\n\n<span class=\"n\">Summary</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_release_egraph</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">ran</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">1.04</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_egraph</span><span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">1.10</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif_release</span><span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">1.46</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span><span class=\"o\">'</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(release uses cranelift's speed_and_size opt_level as well as mir inlining and other rustc mir optimizations)</p>\n</blockquote>",
        "id": 315845854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671031642
    }
]