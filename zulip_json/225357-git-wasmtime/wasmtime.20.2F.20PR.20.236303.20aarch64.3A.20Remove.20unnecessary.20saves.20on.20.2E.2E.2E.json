[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303\">PR #6303</a> from <code>alexcrichton:save-less</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>The AArch64 AAPCS calling convention, which all our backends use for register allocation, indicates that the low 64-bits of the v8-v15 registers are all caller-saved. Cranelift doesn't track precisely which registers are used, however, so it says the entire register is a caller-saved register. This currently interacts poorly where a call from one function to another where the ABIs differ forces the caller to save all of v8-v15 in the prologue and restore it in the epilogue.</p>\n<p>Currently in all cases, however, this isn't actually necessary. The AArch64 backend also has an optimization where if both the caller and the callee are using the same ABI then the clobbers of a <code>call</code> instruction are not counted in the clobber set for the function since nothing new can be clobbered. This way if <code>v8</code> is never used, for example, it's not considered clobbered and it's not saved. This logic, however, is comparing ABIs exactly which means that different names for the same ABI, which don't differ in register allocation, force saves to happen.</p>\n<p>This comes up with trampolines generated by Wasmtime where the calling convention of the trampoline is <code>WasmtimeSystemV</code>, for example, where the callee (a wasm function) is <code>Fast</code>. Because these differ it means that all trampolines are generating saves/restores of registers, despite the actual underlying calling convention being the same.</p>\n<p>This commit updates the optimization that skips including a <code>call</code> instruction in the clobber set by comparing the caller and callee's ABI clobber sets. If both clobber the same registers then for the purposes of clobbers it's as-if they were the same ABI, so the <code>call</code> can be skipped.</p>\n<p>Overall this removes unnecessary saves/restores in trampolines generated by Cranelift and shrinks the size of spidermonkey.wasm by 2% after #6262.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 353550151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682640557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303\">PR #6303</a>.</p>",
        "id": 353550159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682640558
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303\">PR #6303</a>.</p>",
        "id": 353550160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682640559
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303#pullrequestreview-1405066217\">PR review</a>:</p>\n<blockquote>\n<p>Looks good, thanks!</p>\n<p>Strictly speaking the check could be even looser, I think: all that's required is that the clobbers allowed by the caller's ABI <em>contain</em> the clobbers allowed by the callee's ABI. <code>PRegSet</code> is a bitset (<code>u128</code>) internally, so we could implement this with <code>caller_clobbers &amp; callee_clobbers == callee_clobbers</code> (which tests <code>callee_clobbers</code> âŠ‚ <code>caller_clobbers</code>). Unfortunately this is an opaque newtype wrapper and I didn't think to add <code>.into_bits()</code> at the time, and the definition is in regalloc2. If you feel super-motivated I'm happy to review a PR for that otherwise I think this is totally fine!</p>\n</blockquote>",
        "id": 353552601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682641039
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303\">PR #6303</a>.</p>",
        "id": 353942998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682696619
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303#pullrequestreview-1406361522\">PR review</a>.</p>",
        "id": 354002284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682703924
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6303\">PR #6303</a>.</p>",
        "id": 354019399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682706298
    }
]