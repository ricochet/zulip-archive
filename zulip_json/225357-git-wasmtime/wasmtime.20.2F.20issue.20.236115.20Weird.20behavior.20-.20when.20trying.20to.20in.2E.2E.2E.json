[
    {
        "content": "<p>NeoTech opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>Given this code - taken out of the example and slightly modified.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Ok</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasm-module/target/wasm32-wasi/debug/wasm-module.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span>: <span class=\"s\">\"Add one\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">count</span>: <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_one_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MyState</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Calling back...\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"&gt; {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">add_one_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()];</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">imports</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add_one\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And running a wasm32-wasi compiled binary created with this rust file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cm\">/*</span>\n<span class=\"cm\">    This compiles with wasm32-wasi.</span>\n<span class=\"cm\">    It will export a function named \"run\" that can be called from the host.</span>\n<span class=\"cm\">    It will fail to run in a wasm runtime that doesn't support the wasi target.</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"cp\">#![allow(dead_code)]</span>\n<span class=\"cp\">#![allow(unused_variables)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[export_name=</span><span class=\"s\">\"run\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[export_name=</span><span class=\"s\">\"add_one\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>using the command <code>cargo build --target wasm32-wasi</code></p>\n<p>I get this error:<br>\nError: expected 4 imports, found 1</p>\n<p>Looking in the code WAT, i find this:</p>\n<div class=\"codehilite\" data-code-language=\"wasm-wat\"><pre><span></span><code>  (import \"wasi_snapshot_preview1\" \"fd_write\" (func $_ZN4wasi13lib_generated22wasi_snapshot_preview18fd_write17h49bd8e13f92c4698E (type 7)))\n  (import \"wasi_snapshot_preview1\" \"environ_get\" (func $__imported_wasi_snapshot_preview1_environ_get (type 1)))\n  (import \"wasi_snapshot_preview1\" \"environ_sizes_get\" (func $__imported_wasi_snapshot_preview1_environ_sizes_get (type 1)))\n  (import \"wasi_snapshot_preview1\" \"proc_exit\" (func $__imported_wasi_snapshot_preview1_proc_exit (type 0)))\n</code></pre></div>\n<p>And i expect those to be there.. but wasmtime runtime - does not.. And i cannot really add the to the import either was they are system calls - they are supposed to be there. </p>\n<p>I don't understand if this is a expected behavior? Or if this is a bug.</p>\n</blockquote>",
        "id": 345261187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680046142
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1487828240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>Your application expects wasi (and will need it if you want to see your println work), but you didn't provide a wasi implementation to wasmtime. You can provide a wasi implementation via <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/sync/fn.add_to_linker.html\">https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/sync/fn.add_to_linker.html</a>, though you'll have to switch from manually providing the imports as a list to using a Linker <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html\">https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html</a>.</p>\n<p>Additionally: you are defining add_one inside your webassembly module, so nothing in there is going to call out to the add_one_func you defined for Wasmtime.</p>\n</blockquote>",
        "id": 345275619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680054054
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1487828240\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>Your application expects wasi (and will need it if you want to see your println work), but you didn't provide a wasi implementation to wasmtime. You can provide a wasi implementation via <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/sync/fn.add_to_linker.html\">https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/sync/fn.add_to_linker.html</a>, though you'll have to switch from manually providing the imports as a list to using a Linker <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html\">https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html</a>.</p>\n<p>Additionally: you are defining add_one inside your webassembly module, so nothing in there is going to call out to the add_one_func you defined for Wasmtime. If you want to call out to that host func you will need to define it like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 345275752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680054139
    },
    {
        "content": "<p>NeoTech <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1488036313\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>So this little tinker; #[export_name=\"add_one\"]<br>\nIs supposed to solve the extern \"C\" thingy for you.<br>\nAs it works with the wasmer commandline client just fine - not sure why this would reuireuiq the extern \"C\" mapping?!</p>\n<p>will dig into the linker instead. Bare in mind, this is example code copied from the wasmtime documentation in the first field.<br>\nAnd the second one is just a simple wasm32-wasi compiled file i used a testing ground in all the other wasi runtimes i tested out.</p>\n</blockquote>",
        "id": 345308367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680072719
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1488153180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p><code>#[export_name]</code> exports an item from the wasm module to the host. You need <code>extern \"C\" {}</code> to import an item from the host to the wasm module.</p>\n</blockquote>",
        "id": 345327376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680078354
    },
    {
        "content": "<p>NeoTech <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1488160736\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>So why does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Define the WASI functions globally on the `Config`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a WASI context and put it in a Store; all instances in the store</span>\n<span class=\"w\">    </span><span class=\"c1\">// share this context. `WasiCtxBuilder` provides a number of ways to</span>\n<span class=\"w\">    </span><span class=\"c1\">// configure what the target program will have access to.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate our module with the imports we've created, and run it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi-hello-wasm/target/wasm32-wasi/debug/wasi-hello.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With the wasm module compiled from this. - This does not have an export tho and just relies on main..<br>\nIf i wanted to export the add function, and execute it outside of main - how would you rewrite this example?!</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 345328774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680078686
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1488182849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>In your initial example it seemed like you were trying to import add_one, but the code you wrote exports add_one. If you actually wanted to export it, then your code is correct, but you need to switch from the bin to cdylib crate type. The bin crate type only exports the main function.</p>\n</blockquote>",
        "id": 345333253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680079624
    },
    {
        "content": "<p>NeoTech <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115#issuecomment-1488444530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>Thanks, that makes alot more sense now to me..  :)</p>\n</blockquote>",
        "id": 345373067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680090014
    },
    {
        "content": "<p>NeoTech closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6115\">issue #6115</a>:</p>\n<blockquote>\n<p>Given this code - taken out of the example and slightly modified.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Ok</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">count</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasm-module/target/wasm32-wasi/debug/wasm-module.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">name</span>: <span class=\"s\">\"Add one\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">count</span>: <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add_one_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MyState</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Calling back...\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"&gt; {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">add_one_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()];</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">imports</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"add_one\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And running a wasm32-wasi compiled binary created with this rust file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cm\">/*</span>\n<span class=\"cm\">    This compiles with wasm32-wasi.</span>\n<span class=\"cm\">    It will export a function named \"run\" that can be called from the host.</span>\n<span class=\"cm\">    It will fail to run in a wasm runtime that doesn't support the wasi target.</span>\n<span class=\"cm\">*/</span>\n\n<span class=\"cp\">#![allow(dead_code)]</span>\n<span class=\"cp\">#![allow(unused_variables)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[export_name=</span><span class=\"s\">\"run\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[export_name=</span><span class=\"s\">\"add_one\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>using the command <code>cargo build --target wasm32-wasi</code></p>\n<p>I get this error:<br>\nError: expected 4 imports, found 1</p>\n<p>Looking in the code WAT, i find this:</p>\n<div class=\"codehilite\" data-code-language=\"wasm-wat\"><pre><span></span><code>  (import \"wasi_snapshot_preview1\" \"fd_write\" (func $_ZN4wasi13lib_generated22wasi_snapshot_preview18fd_write17h49bd8e13f92c4698E (type 7)))\n  (import \"wasi_snapshot_preview1\" \"environ_get\" (func $__imported_wasi_snapshot_preview1_environ_get (type 1)))\n  (import \"wasi_snapshot_preview1\" \"environ_sizes_get\" (func $__imported_wasi_snapshot_preview1_environ_sizes_get (type 1)))\n  (import \"wasi_snapshot_preview1\" \"proc_exit\" (func $__imported_wasi_snapshot_preview1_proc_exit (type 0)))\n</code></pre></div>\n<p>And i expect those to be there.. but wasmtime runtime - does not.. And i cannot really add the to the import either was they are system calls - they are supposed to be there. </p>\n<p>I don't understand if this is a expected behavior? Or if this is a bug.</p>\n</blockquote>",
        "id": 345373071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680090014
    }
]