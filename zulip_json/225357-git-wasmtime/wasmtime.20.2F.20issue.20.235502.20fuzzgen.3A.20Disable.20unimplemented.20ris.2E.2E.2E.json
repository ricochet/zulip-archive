[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502#issuecomment-1380614267\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502\">issue #5502</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 320973959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673539293
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502#issuecomment-1380764785\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502\">issue #5502</a>:</p>\n<blockquote>\n<p>@uweigand, FYI: This PR illustrates what we need to start routinely fuzz-testing additional Cranelift backends. I'd love to start testing s390x on our OSS-Fuzz quota too. For non-x86, OSS-Fuzz can only test that codegen succeeds, not that the generated code runs correctly, but I expect that to be enough to catch many bugs. Of particular interest right now, this should help us catch non-SSA lowerings.</p>\n<p>The steps are:</p>\n<ol>\n<li>add the <code>s390x</code> feature to the <code>cranelift-codegen</code> dependency in <code>fuzz/Cargo.toml</code> (optionally, you can temporarily remove the other backends there to focus on that one)</li>\n<li>run <code>cargo +nightly fuzz run cranelift-icache</code> on any host, and/or <code>cargo +nightly fuzz run cranelift-fuzzgen</code> on an s390x hostâ€”whichever you have more CPU cycles available on</li>\n<li>as it finds bugs, add backend-specific exceptions for known issues with lowering particular instructions at particular types, as illustrated by this PR</li>\n</ol>\n<p>Once the fuzzer runs for an hour without finding new bugs it's probably ready.</p>\n<p>These fuzz targets don't yet generate all possible Cranelift instructions, so you won't have to write down exceptions for every unimplemented thing. It's currently limited to scalar types and arithmetic/load/store operations mostly, but we're incrementally expanding coverage.</p>\n</blockquote>",
        "id": 320994123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673544779
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502#issuecomment-1396920778\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5502\">issue #5502</a>:</p>\n<blockquote>\n<p>@jameysharp s390x support PR now posted here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5596\">https://github.com/bytecodealliance/wasmtime/pull/5596</a></p>\n<p>Thanks for pointing this out!</p>\n</blockquote>",
        "id": 322270807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674132301
    }
]