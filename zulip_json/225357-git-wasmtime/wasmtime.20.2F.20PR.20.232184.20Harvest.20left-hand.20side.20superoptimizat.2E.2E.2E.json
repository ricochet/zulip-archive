[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 208897302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599086234
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a>.</p>",
        "id": 208897304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599086235
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 208899006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599087469
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 208989086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599148583
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 209701749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599768128
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-486569322\">PR Review</a>.</p>",
        "id": 209752109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599812134
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r486850760\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        self.compute_cfg();\n        self.preopt(isa)?;\n</code></pre></div>\n\n\n<p>Otherwise <code>preopt</code> panics in some cases with <code>thread 'main' panicked at 'assertion failed: self.is_valid()', cranelift/codegen/src/flowgraph.rs:161:9</code>.</p>\n</blockquote>",
        "id": 209752121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599812142
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-486910690\">PR Review</a>.</p>",
        "id": 209795872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599838300
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487123823\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Interesting, I haven't seen this panic yet when harvesting LHSs. Can you share the stack trace? I wonder if it is just related to the basic block clean ups that preopt does, which are irrelevant for LHS harvesting. If so, we might want to consider some refactoring in preopt so we can run just the peepholes alone.</p>\n</blockquote>",
        "id": 209795873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599838300
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-486932561\">PR Review</a>.</p>",
        "id": 209799720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599840028
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487140840\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"na\">&#39;main</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">flowgraph</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">161</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n<span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">11</span>: <span class=\"nc\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">bjorn</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">rustup</span><span class=\"o\">/</span><span class=\"n\">toolchains</span><span class=\"o\">/</span><span class=\"n\">stable</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">rustlib</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">libstd</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">410</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">12</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">flowgraph</span>::<span class=\"n\">ControlFlowGraph</span>::<span class=\"n\">recompute_block</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">flowgraph</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">161</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">simple_preopt</span>::<span class=\"n\">branch_order</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">simple_preopt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">608</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">simple_preopt</span>::<span class=\"n\">do_preopt</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">simple_preopt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1102</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">15</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">context</span>::<span class=\"n\">Context</span>::<span class=\"n\">preopt</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">321</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">16</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">context</span>::<span class=\"n\">Context</span>::<span class=\"n\">souper_harvest</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">463</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">17</span>: <span class=\"nc\">clif_util</span>::<span class=\"n\">souper_harvest</span>::<span class=\"n\">run</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">souper_harvest</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">74</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">.]</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Clif ir:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">is_pic</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_simd</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"n\">haswell</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">_ZN21mini_core_hello_world4main17h4614255fce60abb6E</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">alloc29</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">alloc30</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">alloc32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">53</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">mini_core_hello_world</span><span class=\"p\">[</span><span class=\"mi\">317</span><span class=\"n\">d</span><span class=\"p\">]</span>::<span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nc\">None</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_ZN21mini_core_hello_world4main17h4614255fce60abb6E</span><span class=\"p\">)</span>: <span class=\"p\">[</span><span class=\"n\">corruption</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Diverging</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def</span>: <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">did</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">1</span>:<span class=\"mi\">228</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">mini_core</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">panic</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">const_param_did</span>: <span class=\"nc\">None</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">sig1</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">puts</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span>:\n                                    <span class=\"nc\">nop</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n                                    <span class=\"nc\">nop</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0002</span><span class=\"w\">                               </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0002</span><span class=\"w\">                               </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0002</span><span class=\"w\">                               </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0001</span><span class=\"w\">                               </span><span class=\"n\">stack_store</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0001</span><span class=\"w\">                               </span><span class=\"n\">stack_store</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0007</span><span class=\"w\">                               </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0007</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">000</span><span class=\"n\">a</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">000</span><span class=\"n\">a</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">urem</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">000</span><span class=\"n\">f</span><span class=\"w\">                               </span><span class=\"n\">brz</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">000</span><span class=\"n\">f</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block2</span>:\n<span class=\"o\">@</span><span class=\"mi\">000</span><span class=\"n\">f</span><span class=\"w\">                               </span><span class=\"n\">nop</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0010</span><span class=\"w\">                               </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0013</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block3</span>:\n<span class=\"o\">@</span><span class=\"mi\">0013</span><span class=\"w\">                               </span><span class=\"n\">nop</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0014</span><span class=\"w\">                               </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0014</span><span class=\"w\">                               </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv3</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn1</span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0015</span><span class=\"w\">                               </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Rust source:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">slice_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 209799721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599840028
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487140840\">PR Review Comment</a>.</p>",
        "id": 209801657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599840879
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-487245864\">PR Review</a>.</p>",
        "id": 209894678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-487245864\">PR Review</a>.</p>",
        "id": 209894679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487433785\">PR Review Comment</a>:</p>\n<blockquote>\n<p>also <code>// TODO: ir::Opcode::IaddCout</code>?</p>\n</blockquote>",
        "id": 209894680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487433395\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't remember how many clif instructions have &gt;1 result, but in the future this could be loosened potentially be loosened up to looking at all results and possibly materializing the results from different Souper-found optimizations, right?</p>\n</blockquote>",
        "id": 209894681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487435895\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If, indeed, there should be an <code>IaddCout</code> above, then this should be updated too</p>\n</blockquote>",
        "id": 209894682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r487435705\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Me not knowing Souper well: how is the size to truncate to inferred?</p>\n</blockquote>",
        "id": 209894683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599936635
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-487887935\">PR Review</a>.</p>",
        "id": 210021377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600097118
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r488020370\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There aren't a ton that have multiple results. The most common are multi-value calls, which aren't relevant here. But add-with-carry and combined div/mul are candidates.</p>\n<p>We would also need to extend peepmatic to work with operations that return multiple values, which it doesn't support right now. I expect this would require more effort than the harvester, which is relatively small and isolated.</p>\n</blockquote>",
        "id": 210021378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600097118
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-487893746\">PR Review</a>.</p>",
        "id": 210021943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600097364
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#discussion_r488024679\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>truncate</code> instructions require a type annotation on the result. When harvesting, we always add the type annotation to every result (see the <code>souper_type_of</code> call after this <code>match</code>). We could elide most of them, allowing souper to infer them, but it seems like extra work and maintenance for very little benefit.</p>\n</blockquote>",
        "id": 210021944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600097365
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 210023529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600098159
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 210023617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600098210
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 210024411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600098537
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a>.</p>",
        "id": 210067895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600120421
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-488213297\">PR Review</a>.</p>",
        "id": 210073107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600124604
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a> from <code>souper-harvest</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the <code>souper-harvest</code> subcommand to <code>clif-util</code>.</p>\n<p>Given a clif function, harvest all its integer subexpressions, so that they can be fed into <a href=\"https://github.com/google/souper\">Souper</a> as candidates for superoptimization. For some of these candidates, Souper will successfully synthesize a right-hand side that is equivalent but has lower cost than the left-hand side. Then, we can combine these left- and right-hand sides into a complete optimization, and add it to our peephole passes.</p>\n<p>To harvest the expression that produced a given value <code>x</code>, we do a post-order traversal of the dataflow graph starting from <code>x</code>. As we do this traversal, we maintain a map from clif values to their translated Souper values. We stop traversing when we reach anything that can't be translated into Souper IR: a memory load, a float-to-int conversion, a block parameter, etc. For values produced by these instructions, we create a Souper <code>var</code>, which is an input variable to the optimization. For instructions that have a direct mapping into Souper IR, we get the Souper version of each of its operands and then create the Souper version of the instruction itself. It should now be clear why we do a post-order traversal: we need an instruction's translated operands in order to translate the instruction itself. Once this instruction is translated, we update the clif-to-souper map with this new translation so that any other instruction that uses this result as an operand has access to the translated value. When the traversal is complete we return the translation of <code>x</code> as the root of left-hand side candidate.</p>\n<p>@iximeow, do you feel comfortable reviewing this? If so, please take a look. If not, I can find another reviewer, no worries.</p>\n<p>cc @jubitaneja @regehr</p>\n</blockquote>",
        "id": 210074925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600126081
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184#pullrequestreview-488222937\">PR Review</a>.</p>",
        "id": 210075157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600126220
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2184\">PR #2184</a>.</p>",
        "id": 210080931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600131673
    }
]