[
    {
        "content": "<p><a href=\"https://github.com/liutao-liu\">liutao-liu</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">Issue #7973</a>.</p>",
        "id": 422555266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498450
    },
    {
        "content": "<p>liutao-liu opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile and generate machine code to obtain test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571\">https://github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">native</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2\">https://github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2</a>)</p>\n<h4>System Call Times Statistics</h4>\n<p>As shown in the following figure, the number of wasmtime system call times is three times that of native. <br>\nIs it because wasmtime uses <strong>tokio</strong> for file IO operations, and the number of file I/O operations is three times that of native, resulting in poor performance?<br>\n ```</p>\n<h1>strace for wasmtime</h1>\n<p>strace -c wasmtime run --allow-precompiled --dir ./ test.aot</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447)</span>\n\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">ths</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wamr</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2\">https://github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2</a>)</p>\n</blockquote>",
        "id": 422555269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498451
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile and generate machine code to obtain test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:<code>__imported_wasi_snapshot_preview1_fd_read  __imported_wasi_snapshot_preview1_fd_seek  __imported_wasi_snapshot_preview1_fd_sync __imported_wasi_snapshot_preview1_fd_write </code></p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571\">https://github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">native</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2\">https://github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2</a>)</p>\n<h4>System Call Times Statistics</h4>\n<p>As shown in the following figure, the number of wasmtime system call times is three times that of native. <br>\nIs it because wasmtime uses <strong>tokio</strong> for file IO operations, and the number of file I/O operations is three times that of native, resulting in poor performance?<br>\n ```</p>\n<h1>strace for wasmtime</h1>\n<p>strace -c wasmtime run --allow-precompiled --dir ./ test.aot</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447)</span>\n\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">ths</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wamr</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2\">https://github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2</a>)</p>\n</blockquote>",
        "id": 422555522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498654
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile and generate machine code to obtain test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422555587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498686
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile and generate machine code to obtain test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422555698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498775
    }
]