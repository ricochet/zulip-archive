[
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">Issue #7481</a>.</p>",
        "id": 400290947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699097345
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:E-easy label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">Issue #7481</a>.</p>",
        "id": 400290948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699097345
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">Issue #7481</a>.</p>",
        "id": 400290949,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699097346
    },
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>The RISC-V vector backend has no <code>vsub.vi</code> instruction. That instruction would subtract a vector register with an immediate. It does have a <code>vrsub.vi</code> that computes <code>imm - vector</code>.</p>\n<p>Instead of emitting a <code>vsub.vi</code> we can negate the immediate and emit a <code>vadd.vi</code> that does exist.</p>\n<h4>Example testcase</h4>\n<p>Here's an example test case that currently does not compile to an optimal instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">isub_imm</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This emits:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">vle64</span><span class=\"p\">.</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,[</span><span class=\"k\">const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">vsub</span><span class=\"p\">.</span><span class=\"n\">vv</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"n\">v13</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>It loads the constant and then emits the <code>.vv</code> version of the instruction. But we could just emit <code>vadd.vi v13, v9, -1</code>.</p>\n<h4>Implementation</h4>\n<p>Recognizing constants is currently done using the <code>replicated_imm5</code> constructor. We probably need to build an equivalent constructor that matches with an equivalent negated Imm5</p>\n<p>Afterwards we should only need to add a rule that matches an isub with an imm5 on the right hand side. We should only need one since for <code>sub</code>s with constants in the left hand side, we already have a <code>vrsub</code> instruction.</p>\n<p>I've recently implemented a similar set of rules for scalar <code>sub</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7480/commits/6bc69c095a1ada4b4ee7190baaf45aaf7d85c5f2\">https://github.com/bytecodealliance/wasmtime/pull/7480/commits/6bc69c095a1ada4b4ee7190baaf45aaf7d85c5f2</a>.</p>\n</blockquote>",
        "id": 400290950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699097346
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the good first issue label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">Issue #7481</a>.</p>",
        "id": 400290959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699097355
    },
    {
        "content": "<p>BieVic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481#issuecomment-1793445099\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p>I would like to do it, but I can wait in case someone else wants to get started with Cranelift :)</p>\n</blockquote>",
        "id": 400298924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699104769
    },
    {
        "content": "<p>pyroMechanical <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481#issuecomment-1799809968\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p>I'd like to take this on as a first project! I have prior rust and compiler experience, but haven't worked with cranelift before.</p>\n</blockquote>",
        "id": 400808286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699387379
    },
    {
        "content": "<p>BieVic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481#issuecomment-1799967570\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p>Awesome! Let me or @afonso360 know if you need any help </p>\n</blockquote>",
        "id": 400811561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699388987
    },
    {
        "content": "<p>pyroMechanical <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481#issuecomment-1803008103\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p>I think i've gotten an okay start, but I'm not sure how to use the example test case to see if my changes are producing the desired result. I've also tried using cargo's testing but I'm not sure how to test for a different ISA.</p>\n</blockquote>",
        "id": 401050768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699492325
    },
    {
        "content": "<p>BieVic <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481#issuecomment-1803414841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p>For testing you can use clif-util (e.g. wasmtime/target/debug/clif-util), with which you can also target different ISAs. I'm also fairly new and this <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/testing.md\">doc</a> about testing helped me wrap my head around</p>\n</blockquote>",
        "id": 401108854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699520536
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7481\">issue #7481</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>The RISC-V vector backend has no <code>vsub.vi</code> instruction. That instruction would subtract a vector register with an immediate. It does have a <code>vrsub.vi</code> that computes <code>imm - vector</code>.</p>\n<p>Instead of emitting a <code>vsub.vi</code> we can negate the immediate and emit a <code>vadd.vi</code> that does exist.</p>\n<h4>Example testcase</h4>\n<p>Here's an example test case that currently does not compile to an optimal instruction sequence:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">isub_imm</span><span class=\"p\">(</span><span class=\"n\">i64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This emits:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">vle64</span><span class=\"p\">.</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,[</span><span class=\"k\">const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">vsub</span><span class=\"p\">.</span><span class=\"n\">vv</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"n\">v13</span><span class=\"w\"> </span>#<span class=\"n\">avl</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"n\">vtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">e64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ta</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ma</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>It loads the constant and then emits the <code>.vv</code> version of the instruction. But we could just emit <code>vadd.vi v13, v9, -1</code>.</p>\n<h4>Implementation</h4>\n<p>Recognizing constants is currently done using the <code>replicated_imm5</code> constructor. We probably need to build an equivalent constructor that matches with an equivalent negated Imm5</p>\n<p>Afterwards we should only need to add a rule that matches an isub with an imm5 on the right hand side. We should only need one since for <code>sub</code>s with constants in the left hand side, we already have a <code>vrsub</code> instruction.</p>\n<p>I've recently implemented a similar set of rules for scalar <code>sub</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7480/commits/6bc69c095a1ada4b4ee7190baaf45aaf7d85c5f2\">https://github.com/bytecodealliance/wasmtime/pull/7480/commits/6bc69c095a1ada4b4ee7190baaf45aaf7d85c5f2</a>.</p>\n</blockquote>",
        "id": 403805353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700751529
    }
]