[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a> from <code>aarch64-amode</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, our pattern-matching for generating load/store addresses was<br>\nsomewhat limited. For example, it could not use a register-extend<br>\naddress mode to handle the following CLIF:</p>\n<div class=\"codehilite\"><pre><span></span><code>   v2760 = uextend.i64 v985\n   v2761 = load.i64 notrap aligned readonly v1\n   v1018 = iadd v2761, v2760\n   store v1017, v1018\n</code></pre></div>\n\n\n<p>This PR adds more general support for address expressions made up of<br>\nadditions and extensions. In particular, it pattern-matches a tree of<br>\n64-bit <code>iadd</code>s, optionally with <code>uextend</code>/<code>sextend</code> from 32-bit values<br>\nat the leaves, to collect the list of all addends that form the address.<br>\nIt also collects all offsets at leaves, combining them.<br>\nIt applies a series of heuristics to make the best use of the<br>\navailable addressing modes, filling the load/store itself with as many<br>\n64-bit registers, zero/sign-extended 32-bit registers, and/or an offset,<br>\nthen computing the rest with add instructions as necessary. It attempts<br>\nto make use of immediate forms (add-immediate or subtract-immediate)<br>\nwhenever possible, and also uses the built-in extend operators on add<br>\ninstructions when possible. There are certainly cases where this is not<br>\noptimal (i.e., does not generate the strictly shortest sequence of<br>\ninstructions), but it should be good enough for most code.</p>\n<p>Using <code>perf stat</code> to measure instruction count (runtime only, on<br>\nwasmtime, after populating the cache to avoid measuring compilation),<br>\nthis impacts <code>bz2</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>pre:\n\n       1006.410425      task-clock (msec)         #    1.000 CPUs utilized\n               113      context-switches          #    0.112 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,036      page-faults               #    0.005 M/sec\n     3,221,547,476      cycles                    #    3.201 GHz\n     4,000,670,104      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,958,613      branch-misses\n\n       1.006071348 seconds time elapsed\n\npost:\n\n        963.499525      task-clock (msec)         #    0.997 CPUs utilized\n               117      context-switches          #    0.121 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,081      page-faults               #    0.005 M/sec\n     3,039,687,673      cycles                    #    3.155 GHz\n     3,837,761,690      instructions              #    1.26  insn per cycle\n   &lt;not supported&gt;      branches\n        28,254,585      branch-misses\n\n       0.966072682 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, this reduces instruction count by 4.1% on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204632608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595397267
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a>.</p>",
        "id": 204632609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595397267
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a>.</p>",
        "id": 204632610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595397267
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a> from <code>aarch64-amode</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, our pattern-matching for generating load/store addresses was<br>\nsomewhat limited. For example, it could not use a register-extend<br>\naddress mode to handle the following CLIF:</p>\n<div class=\"codehilite\"><pre><span></span><code>   v2760 = uextend.i64 v985\n   v2761 = load.i64 notrap aligned readonly v1\n   v1018 = iadd v2761, v2760\n   store v1017, v1018\n</code></pre></div>\n\n\n<p>This PR adds more general support for address expressions made up of<br>\nadditions and extensions. In particular, it pattern-matches a tree of<br>\n64-bit <code>iadd</code>s, optionally with <code>uextend</code>/<code>sextend</code> from 32-bit values<br>\nat the leaves, to collect the list of all addends that form the address.<br>\nIt also collects all offsets at leaves, combining them.<br>\nIt applies a series of heuristics to make the best use of the<br>\navailable addressing modes, filling the load/store itself with as many<br>\n64-bit registers, zero/sign-extended 32-bit registers, and/or an offset,<br>\nthen computing the rest with add instructions as necessary. It attempts<br>\nto make use of immediate forms (add-immediate or subtract-immediate)<br>\nwhenever possible, and also uses the built-in extend operators on add<br>\ninstructions when possible. There are certainly cases where this is not<br>\noptimal (i.e., does not generate the strictly shortest sequence of<br>\ninstructions), but it should be good enough for most code.</p>\n<p>Using <code>perf stat</code> to measure instruction count (runtime only, on<br>\nwasmtime, after populating the cache to avoid measuring compilation),<br>\nthis impacts <code>bz2</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>pre:\n\n       1006.410425      task-clock (msec)         #    1.000 CPUs utilized\n               113      context-switches          #    0.112 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,036      page-faults               #    0.005 M/sec\n     3,221,547,476      cycles                    #    3.201 GHz\n     4,000,670,104      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,958,613      branch-misses\n\n       1.006071348 seconds time elapsed\n\npost:\n\n        963.499525      task-clock (msec)         #    0.997 CPUs utilized\n               117      context-switches          #    0.121 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,081      page-faults               #    0.005 M/sec\n     3,039,687,673      cycles                    #    3.155 GHz\n     3,837,761,690      instructions              #    1.26  insn per cycle\n   &lt;not supported&gt;      branches\n        28,254,585      branch-misses\n\n       0.966072682 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, this reduces instruction count by 4.1% on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204632621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595397292
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a> from <code>aarch64-amode</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, our pattern-matching for generating load/store addresses was<br>\nsomewhat limited. For example, it could not use a register-extend<br>\naddress mode to handle the following CLIF:</p>\n<div class=\"codehilite\"><pre><span></span><code>   v2760 = uextend.i64 v985\n   v2761 = load.i64 notrap aligned readonly v1\n   v1018 = iadd v2761, v2760\n   store v1017, v1018\n</code></pre></div>\n\n\n<p>This PR adds more general support for address expressions made up of<br>\nadditions and extensions. In particular, it pattern-matches a tree of<br>\n64-bit <code>iadd</code>s, optionally with <code>uextend</code>/<code>sextend</code> from 32-bit values<br>\nat the leaves, to collect the list of all addends that form the address.<br>\nIt also collects all offsets at leaves, combining them.<br>\nIt applies a series of heuristics to make the best use of the<br>\navailable addressing modes, filling the load/store itself with as many<br>\n64-bit registers, zero/sign-extended 32-bit registers, and/or an offset,<br>\nthen computing the rest with add instructions as necessary. It attempts<br>\nto make use of immediate forms (add-immediate or subtract-immediate)<br>\nwhenever possible, and also uses the built-in extend operators on add<br>\ninstructions when possible. There are certainly cases where this is not<br>\noptimal (i.e., does not generate the strictly shortest sequence of<br>\ninstructions), but it should be good enough for most code.</p>\n<p>Using <code>perf stat</code> to measure instruction count (runtime only, on<br>\nwasmtime, after populating the cache to avoid measuring compilation),<br>\nthis impacts <code>bz2</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>pre:\n\n       1006.410425      task-clock (msec)         #    1.000 CPUs utilized\n               113      context-switches          #    0.112 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,036      page-faults               #    0.005 M/sec\n     3,221,547,476      cycles                    #    3.201 GHz\n     4,000,670,104      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,958,613      branch-misses\n\n       1.006071348 seconds time elapsed\n\npost:\n\n        963.499525      task-clock (msec)         #    0.997 CPUs utilized\n               117      context-switches          #    0.121 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,081      page-faults               #    0.005 M/sec\n     3,039,687,673      cycles                    #    3.155 GHz\n     3,837,761,690      instructions              #    1.26  insn per cycle\n   &lt;not supported&gt;      branches\n        28,254,585      branch-misses\n\n       0.966072682 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, this reduces instruction count by 4.1% on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204632651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595397359
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-454939904\">PR Review</a>.</p>",
        "id": 204923221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601403
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460093294\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes.  That sounds reasonable.</p>\n</blockquote>",
        "id": 204923222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601403
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-454943859\">PR Review</a>.</p>",
        "id": 204923848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601702
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460096275\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can this case, <code>addends64.len() == 0 &amp;&amp; &lt;whatever&gt;</code> actually happen?  Wouldn't it imply that whatever created this code knew that it would run in an environment where the max virtual address is 2^32 or some small multiple thereof ?<br>\nI guess that's implausible for the general 64-bit target case, but it's not <em>per se</em> invalid.</p>\n</blockquote>",
        "id": 204923850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601702
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-454944644\">PR Review</a>.</p>",
        "id": 204924017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601760
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460096859\">PR Review Comment</a>:</p>\n<blockquote>\n<p>And again here -- even more so.  The VA is formed only from an immediate ?<br>\nAgain, I guess that's OK.  But -- at least -- do we have tests for this?</p>\n</blockquote>",
        "id": 204924018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601760
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-454945221\">PR Review</a>.</p>",
        "id": 204924123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601802
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460097278\">PR Review Comment</a>:</p>\n<blockquote>\n<p>wrapping neg needed here?</p>\n</blockquote>",
        "id": 204924124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595601803
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455093789\">PR Review</a>.</p>",
        "id": 204949439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595614685
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a> from <code>aarch64-amode</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, our pattern-matching for generating load/store addresses was<br>\nsomewhat limited. For example, it could not use a register-extend<br>\naddress mode to handle the following CLIF:</p>\n<div class=\"codehilite\"><pre><span></span><code>   v2760 = uextend.i64 v985\n   v2761 = load.i64 notrap aligned readonly v1\n   v1018 = iadd v2761, v2760\n   store v1017, v1018\n</code></pre></div>\n\n\n<p>This PR adds more general support for address expressions made up of<br>\nadditions and extensions. In particular, it pattern-matches a tree of<br>\n64-bit <code>iadd</code>s, optionally with <code>uextend</code>/<code>sextend</code> from 32-bit values<br>\nat the leaves, to collect the list of all addends that form the address.<br>\nIt also collects all offsets at leaves, combining them.<br>\nIt applies a series of heuristics to make the best use of the<br>\navailable addressing modes, filling the load/store itself with as many<br>\n64-bit registers, zero/sign-extended 32-bit registers, and/or an offset,<br>\nthen computing the rest with add instructions as necessary. It attempts<br>\nto make use of immediate forms (add-immediate or subtract-immediate)<br>\nwhenever possible, and also uses the built-in extend operators on add<br>\ninstructions when possible. There are certainly cases where this is not<br>\noptimal (i.e., does not generate the strictly shortest sequence of<br>\ninstructions), but it should be good enough for most code.</p>\n<p>Using <code>perf stat</code> to measure instruction count (runtime only, on<br>\nwasmtime, after populating the cache to avoid measuring compilation),<br>\nthis impacts <code>bz2</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>pre:\n\n       1006.410425      task-clock (msec)         #    1.000 CPUs utilized\n               113      context-switches          #    0.112 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,036      page-faults               #    0.005 M/sec\n     3,221,547,476      cycles                    #    3.201 GHz\n     4,000,670,104      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,958,613      branch-misses\n\n       1.006071348 seconds time elapsed\n\npost:\n\n        963.499525      task-clock (msec)         #    0.997 CPUs utilized\n               117      context-switches          #    0.121 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,081      page-faults               #    0.005 M/sec\n     3,039,687,673      cycles                    #    3.155 GHz\n     3,837,761,690      instructions              #    1.26  insn per cycle\n   &lt;not supported&gt;      branches\n        28,254,585      branch-misses\n\n       0.966072682 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, this reduces instruction count by 4.1% on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204953441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595616950
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455115797\">PR Review</a>.</p>",
        "id": 204953495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595616963
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460232476\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 204953496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595616963
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455120741\">PR Review</a>.</p>",
        "id": 204954452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595617465
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460236322\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yup, there's a test (<code>f10</code> in <code>amodes.clif</code>). It's conceivable that at least in a JIT scenario, one might want to bake an address into the compiled code (e.g., access a global flag somewhere). In any case, it's valid CLIF, so we should support it, I think.</p>\n</blockquote>",
        "id": 204954454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595617465
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455121739\">PR Review</a>.</p>",
        "id": 204954694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595617570
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460237110\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, it's valid CLIF, so we need to either handle it here, or else define it as invalid and punt this problem to the CLIF verifier. It's conceivable that (as you say) the implementer might know better and use 32-bit pointers, so I don't think we can rule it out.</p>\n<p>(I actually asserted that this case did not happen at first, but caught myself with a test-case I had previously written that used only a zero-extended 32-bit value as an address... so if nothing else, at least mischevous unit-test authors are known to do this.)</p>\n</blockquote>",
        "id": 204954695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595617570
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455269358\">PR Review</a>.</p>",
        "id": 204993233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595663357
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455766566\">PR Review</a>.</p>",
        "id": 205116901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-455766566\">PR Review</a>.</p>",
        "id": 205116902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460879548\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: <code>while let Some(input) = workqueue.pop()</code></p>\n</blockquote>",
        "id": 205116903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460881386\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: i thought this was a bug at first, because only the 4 opcodes mentioned here should be caught, and then saw the extra condition on Uextend/Sextend. Instead, would it make sense to split this match into two:</p>\n<ul>\n<li>one for Uextend and Sextend that don't match the condition, so just <code>Opcode::Uextend | Opcode::Sextend</code> after the first arm</li>\n<li>one <code>_ =&gt; panic!(\"unexpected opcode\")</code></li>\n</ul>\n</blockquote>",
        "id": 205116904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460881890\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Fyi, the comment line size is 99 chars, so the previous wrapping seemed somewhat correct.</p>\n</blockquote>",
        "id": 205116905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460882162\">PR Review Comment</a>:</p>\n<blockquote>\n<p>maybe trace?</p>\n</blockquote>",
        "id": 205116906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r460890368\">PR Review Comment</a>:</p>\n<blockquote>\n<p>From just skimming this code, it's hard to believe that this last branch is hit when <code>addends64.len() &gt; 0</code>. Could the whole series be reorganized as <code>if addends64.len() &gt; 0 { /* subchecks, etc. */ } else /*other subchecks*/{}</code>?</p>\n</blockquote>",
        "id": 205116907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595856724
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a> from <code>aarch64-amode</code> to <code>main</code>:</p>\n<blockquote>\n<p>Previously, our pattern-matching for generating load/store addresses was<br>\nsomewhat limited. For example, it could not use a register-extend<br>\naddress mode to handle the following CLIF:</p>\n<div class=\"codehilite\"><pre><span></span><code>   v2760 = uextend.i64 v985\n   v2761 = load.i64 notrap aligned readonly v1\n   v1018 = iadd v2761, v2760\n   store v1017, v1018\n</code></pre></div>\n\n\n<p>This PR adds more general support for address expressions made up of<br>\nadditions and extensions. In particular, it pattern-matches a tree of<br>\n64-bit <code>iadd</code>s, optionally with <code>uextend</code>/<code>sextend</code> from 32-bit values<br>\nat the leaves, to collect the list of all addends that form the address.<br>\nIt also collects all offsets at leaves, combining them.<br>\nIt applies a series of heuristics to make the best use of the<br>\navailable addressing modes, filling the load/store itself with as many<br>\n64-bit registers, zero/sign-extended 32-bit registers, and/or an offset,<br>\nthen computing the rest with add instructions as necessary. It attempts<br>\nto make use of immediate forms (add-immediate or subtract-immediate)<br>\nwhenever possible, and also uses the built-in extend operators on add<br>\ninstructions when possible. There are certainly cases where this is not<br>\noptimal (i.e., does not generate the strictly shortest sequence of<br>\ninstructions), but it should be good enough for most code.</p>\n<p>Using <code>perf stat</code> to measure instruction count (runtime only, on<br>\nwasmtime, after populating the cache to avoid measuring compilation),<br>\nthis impacts <code>bz2</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>pre:\n\n       1006.410425      task-clock (msec)         #    1.000 CPUs utilized\n               113      context-switches          #    0.112 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,036      page-faults               #    0.005 M/sec\n     3,221,547,476      cycles                    #    3.201 GHz\n     4,000,670,104      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,958,613      branch-misses\n\n       1.006071348 seconds time elapsed\n\npost:\n\n        963.499525      task-clock (msec)         #    0.997 CPUs utilized\n               117      context-switches          #    0.121 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,081      page-faults               #    0.005 M/sec\n     3,039,687,673      cycles                    #    3.155 GHz\n     3,837,761,690      instructions              #    1.26  insn per cycle\n   &lt;not supported&gt;      branches\n        28,254,585      branch-misses\n\n       0.966072682 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, this reduces instruction count by 4.1% on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 205162612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880659
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-456099547\">PR Review</a>.</p>",
        "id": 205162666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880693
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r461141118\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, I had my editor set to 80 characters and probably just rewrapped this while nearby. Undid change, thanks.</p>\n</blockquote>",
        "id": 205162668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880693
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-456099635\">PR Review</a>.</p>",
        "id": 205162679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880701
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r461141179\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea, thanks!</p>\n</blockquote>",
        "id": 205162680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880701
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-456099717\">PR Review</a>.</p>",
        "id": 205162696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880709
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r461141268\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 205162697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880709
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-456099920\">PR Review</a>.</p>",
        "id": 205162764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880728
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r461141417\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah yes, it's much cleaner with that split -- thanks!</p>\n</blockquote>",
        "id": 205162765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880728
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#pullrequestreview-456099997\">PR Review</a>.</p>",
        "id": 205162780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880735
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061#discussion_r461141482\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 205162781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595880736
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2061\">PR #2061</a>.</p>",
        "id": 205166553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595882937
    }
]