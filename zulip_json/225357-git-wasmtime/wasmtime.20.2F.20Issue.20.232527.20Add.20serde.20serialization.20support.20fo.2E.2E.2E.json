[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-748527254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>@bjorn3 thanks for the PR; I think this is a reasonable thing to have and the automatic derivation certainly is easier to maintain than the separate \"serializable subset\" approach of <code>cranelift-serde</code>.</p>\n<p>That said, with any persistent format we should worry about backward/forward-compatibility to some degree. IIUC, there's no versioning of any sort with stock serde traits and bincode/json/whatever backends. This could lead to pernicious bugs (or at least footguns) where we have a blob of serialized IR data that became invalid after adding an instruction or instruction format, but we don't catch that.</p>\n<p>It's also somewhat unfortunate that with all the automation and effort saved by serde, we still have a manual parser!</p>\n<p>So I wonder about another possibility: could we generalize the parser to accept a binary format that's syntactically identical to textual CLIF, but with interned tokens/identifiers, so we could share the parsing code, get the backward/forward compatibility for free, and keep the same control / ability to customize parsing that we have today? This way we make use of the thinking we've already done about the \"external view\" of CLIF, without the potential unintended consequences of exposing internal data structures.</p>\n<p>Depending on the use-case, I'm not totally opposed to <code>serde</code>-all-the-things, by the way; if we put a version number on it (and are careful to bump that when appropriate) and declare it to be \"for use only by tools that know what they're doing\" (e.g. have a fallback path if the version number doesn't match), then maybe it's still OK. Just want to make sure we've thought about these issues first.</p>\n</blockquote>",
        "id": 220487903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608413011
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-748528853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>I can add a version number. I think it can directly use the cranelift version specified in <code>Cargo.toml</code>.</p>\n</blockquote>",
        "id": 220488431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608413823
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-775056012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>I have added a version marker.</p>\n</blockquote>",
        "id": 225527275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612781581
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-779942055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>@bjorn3 thanks for the update -- we're almost there I think (thanks for the patience!).</p>\n<p>Could you update to include the git hash of the build as a version ID rather than the crate version? It looks like <a href=\"https://stackoverflow.com/questions/43753491/include-git-commit-hash-as-string-into-rust-program/44407625#44407625\">this StackOverflow answer</a> shows a reasonable way to do so in <code>build.rs</code>. (We already have a <code>build.rs</code> for the generated IR data structures so this shouldn't be too much more overhead, I think.)</p>\n</blockquote>",
        "id": 226534541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613491991
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-779944451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>That won't work when published to <a href=\"http://crates.io\">crates.io</a>, as there is no git repo then.</p>\n</blockquote>",
        "id": 226535045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613492193
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-779962884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>Ah, that's a good point. I suppose we could add some logic to check for that? (Either check return value of the <code>git</code> invocation, or check for presence of <code>.git</code> directory first.) Then we could use <code>&lt;crate-version&gt;-&lt;git-hash&gt;</code> as an ID string, where <code>&lt;git-hash&gt;</code> may be empty.</p>\n<p>The reason I worry about this is that in <code>cg_clif</code>, IIRC, Cranelift is pulled in as a git dependency, so we can't necessarily rely on crate version number to disambiguate breaking changes to the IR. I don't want to have to think about backward compatibility-via-JSON when making individual changes to CLIF instructions; that potentially causes either very confusing errors, or silent breakage. Since it's a potential correctness issue, I want to Do It Right :-)</p>\n</blockquote>",
        "id": 226539549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613493854
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-780018208\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>I added the git rev. When either git is not found or it isn't inside a git, it should omit the git rev.</p>\n</blockquote>",
        "id": 226551615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613498660
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-781022196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>@bjorn3 I think that with a rebase on current <code>main</code> this should be good to merge.</p>\n</blockquote>",
        "id": 226760522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613618928
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-781350367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>Rebased and fixed <code>ensure_deterministic_build.sh</code>.</p>\n</blockquote>",
        "id": 226810436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613655583
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527#issuecomment-781471251\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2527\">Issue #2527</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 226839318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613666038
    }
]