[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584445680\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 364826196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686311102
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584446102\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 364826302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686311125
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584881818\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I think it might be important to make the <code>native_unwind_info</code> field be an <code>Option&lt;bool&gt;</code> or similar, so that if nobody calls <code>Config::native_unwind_info</code> then we know we can set it whichever way makes sense.</p>\n<p>Also, I think the existing error messages, about unwind info being necessary for profiling, might be misleading. On Linux, <code>perf</code> defaults to frame-pointer unwinding, which I believe is sufficient today on x86 since we always produce frame pointers. We also have a Cranelift setting to force frame pointers, which we could use when profiling instead of registering unwind info. I think Nick said we'll need more sophisticated unwinding once we have exception-handling support though.</p>\n<p>In short, I think we need to sort out exactly when native unwind info is actually necessary before reviewing this PR in detail, because I think the overall logic may not be right.</p>\n</blockquote>",
        "id": 364915548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686329482
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584885276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Yes I just mimicked the other unwind function, can we lift the conversation to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6541\">https://github.com/bytecodealliance/wasmtime/issues/6541</a>, or would you like a new issue, especially for this? I can make this PR a draft in the meantime. </p>\n</blockquote>",
        "id": 364916478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686329686
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584885276\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Yes I just mimicked the other unwind function, can we lift the conversation to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6541\">https://github.com/bytecodealliance/wasmtime/issues/6541</a>, or would you like a new issue, specifically for this? I can make this PR a draft in the meantime. </p>\n</blockquote>",
        "id": 364916519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686329698
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584885276\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Good points! I just mimicked the other unwind function, can we lift the conversation to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6541\">https://github.com/bytecodealliance/wasmtime/issues/6541</a>, or would you like a new issue, or continue here? I can make this PR a draft in the meantime. </p>\n</blockquote>",
        "id": 364916948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686329797
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584898322\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I think it makes sense to discuss when native unwind info is necessary separately from #6541, which is about native unwind info being slow. But I don't think we need to open a new issue for it; this PR is a fine place to sort out the details, in my opinion.</p>\n<p>I'm hoping both @bjorn3 and @fitzgen can give more context on what the native unwind info is actually used for.</p>\n</blockquote>",
        "id": 364919403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686330432
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584994436\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I tested locally, and we do indeed produce identical binaries, both with <code>.eh_frame</code> (I'm on Linux) regardless whether this option is set to <code>true</code> or <code>false</code>. Whoops! We should definitely fix this!</p>\n<hr>\n<blockquote>\n<p>Also, I think the existing error messages, about unwind info being necessary for profiling, might be misleading. On Linux, <code>perf</code> defaults to frame-pointer unwinding, which I believe is sufficient today on x86 since we always produce frame pointers. We also have a Cranelift setting to force frame pointers, which we could use when profiling instead of registering unwind info.</p>\n</blockquote>\n<p>A couple small corrections / refinements:</p>\n<ol>\n<li>\n<p><code>perf</code> defaults to frame pointers but doesn't always use them. In fact, there are <code>libc</code> asm functions that often end up in Wasmtime profiles that don't preserve frame pointers IIRC but do have CFI pragmas, and <code>perf</code> will only capture these correctly when you're using DWARF stack walking. (I may have this inverted, though). In any case, assuming that <code>perf</code> is always in frame pointers mode is a no go.</p>\n</li>\n<li>\n<p>Wasmtime always forces the compiler to emit frame pointers (to enable fast+simple stack walking) regardless of platform. (The Cranelift x86 backend will always emit frame pointers regardless of the Cranelift setting to preserve them or not.)</p>\n</li>\n</ol>\n<p>So with (1), the message saying native unwind info is <em>required</em> for profiling is probably a bit strong, but it also isn't <em>not</em> required. It is subtle, and emitting the unwind info in that case, even if it doesn't end up used by the profiler's exact configuration, doesn't hurt so I'd like to continue to emit native unwind info whenever profiling support is configured.</p>\n<hr>\n<p>Backing up a bit: the reason we enable native unwind info by default is to be good citizens of the platform and do our best to interoperate with external tooling (such as profilers or debuggers or whatever) that are usually expecting to see the platform's unwind info. We don't rely on it for correctness, which is why we can (modulo bugs) turn it off. I think the good-citizen angle is still well-motivated, so I don't want to change defaults here.</p>\n</blockquote>",
        "id": 364941281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686336018
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1584997819\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p><code>Option&lt;bool&gt;</code> and then reading it something like <code>self.native_unwind_info.unwrap_or(DEFAULT_NATIVE_UNWIND_INFO)</code> makes sense to me.</p>\n</blockquote>",
        "id": 364942068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686336245
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1587824205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I might have missed some context reading over this, but how come the profiling strategy is consulted when determining whether to enable this? I know that jitdump/perfmap/guest don't use native unwinding information (<code>perf</code> can't find it even if we emit it), although I don't know about vtune. Given that I don't think we should force enable the unwinding information if profiling is enabled, instead sticking to whatever the default was.</p>\n</blockquote>",
        "id": 365641249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686593131
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1589804659\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<blockquote>\n<p>I might have missed some context reading over this, but how come the profiling strategy is consulted when determining whether to enable this? I know that jitdump/perfmap/guest don't use native unwinding information (<code>perf</code> can't find it even if we emit it), although I don't know about vtune. Given that I don't think we should force enable the unwinding information if profiling is enabled, instead sticking to whatever the default was.</p>\n</blockquote>\n<p>Ah, I must be operating on outdated information (just like the configuration code itself must have been) because I was under the impression that <code>perf</code> used this information when configured to consume DWARF.</p>\n<p>If not, then yeah, we can probably decouple profiling and native unwind info.</p>\n</blockquote>",
        "id": 365954090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686679982
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1589926929\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Hey @fitzgen, the description of Cranelift's <code>unwind_info</code> setting says:</p>\n<blockquote>\n<p>This increases metadata size and compile time, but allows for the debugger to trace frames, is needed for GC tracing that relies on libunwind (such as in Wasmtime), and is unconditionally needed on certain platforms (such as Windows) that must always be able to unwind.</p>\n</blockquote>\n<p>Does Wasmtime GC still require libunwind? I assumed the fast stack walking is used there now.</p>\n<p>I'm wondering if we should make this Cranelift setting default to \"false\" at some point.</p>\n</blockquote>",
        "id": 365976962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686685951
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1590084217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm wondering if we should make this Cranelift setting default to \"false\" at some point.</p>\n</blockquote>\n<p>That would break panic backtraces. The only way wasmtime can influence panic backtrace printing is by registering unwindinfo. It can't hook unwinding.</p>\n</blockquote>",
        "id": 366002016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686693811
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1590142586\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm confused. Do you mean it would break backtraces for cg-clif?</p>\n<p>For Wasmtime, as far as I understand:</p>\n<ul>\n<li>It should be impossible to panic the host while executing guest code.</li>\n<li>If the guest calls back into Rust then that runs within a <code>panic::catch_unwind</code> block, and uses Wasmtime's own stack unwinding to tunnel the panic back out to the next Rust frame on the stack.</li>\n</ul>\n<p>If you mean that cg-clif requires this, I think it would be reasonable to require cg-clif to ensure that the unwind-info flag is enabled. As far as I understand I don't think this flag is required for handling panics in Wasmtime. Have I missed something?</p>\n</blockquote>",
        "id": 366007094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686695689
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1590509718\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I mean in wasmtime. And there not the unwinding, but the unwinding to get a backtrace as printed to the user. Backtrace printing is entirely unaffected by catch_unwind.</p>\n</blockquote>",
        "id": 366054674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686721563
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1590509718\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I mean in wasmtime. And there not the unwinding to propagate panics to the caller, but the unwinding to get a backtrace as printed to the user. Backtrace printing is entirely unaffected by catch_unwind.</p>\n</blockquote>",
        "id": 366099036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686732633
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1591512996\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<blockquote>\n<p>Does Wasmtime GC still require libunwind? I assumed the fast stack walking is used there now.</p>\n</blockquote>\n<p>That is correct, we no longer require libunwind since the fast stack walking patches. Those docs are just outdated.</p>\n</blockquote>",
        "id": 366228800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686757546
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1591577643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>CI says that this PR breaks fuzzing because <code>crates/fuzzing/src/generators/config.rs</code> may randomly try to disable unwind info even on Windows. So we need the config generator to not do that on Windows.</p>\n<p>I think these configs are never used for cross-compiling, so it should be good enough to use <code>cfg!(target_os = \"windows\")</code> rather than having to plumb the target through. But I'd appreciate if @fitzgen or @alexcrichton could check me on that.</p>\n<p>Assuming that's true, then the <code>to_wasmtime</code> method in <code>crates/fuzzing/src/generators/config.rs</code> can just replace</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">native_unwind_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">native_unwind_info</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>with</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">native_unwind_info</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"windows\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">native_unwind_info</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 366237327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686759203
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1591587220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>That looks like the right fix to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 366238239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686759396
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1690902069\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>@TimonPost would love to see this get merged, is there anything I can do to help?</p>\n</blockquote>",
        "id": 386977475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692844685
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1691197755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Good one, i'll patch it up, should be ready in a bit!</p>\n</blockquote>",
        "id": 387015713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692863957
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1691321302\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>Rebased and updated the PR. @fitzgen can you review this?</p>\n</blockquote>",
        "id": 387027995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692868747
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1691444755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 387043430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692873915
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547#issuecomment-1692184250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6547\">issue #6547</a>:</p>\n<blockquote>\n<p>I'm not sure about the CI failures, but just figured I'd popin to say I'm using this patch with #6896 and it fixed some issues with C++ exceptions and wasmtime used in conjunction (there is a lock in libgcc that was having some contention issues).</p>\n</blockquote>",
        "id": 387138032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692900484
    }
]