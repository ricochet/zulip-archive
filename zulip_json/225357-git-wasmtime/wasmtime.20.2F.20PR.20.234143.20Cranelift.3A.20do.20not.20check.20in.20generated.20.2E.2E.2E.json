[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a>.</p>",
        "id": 282043860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652313776
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a> from <code>isle-no-checked-in-code</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR fixes #4066: it modifies the Cranelift <code>build.rs</code> workflow to<br>\ninvoke the ISLE DSL compiler on every compilation, rather than only<br>\nwhen the user specifies a special \"rebuild ISLE\" feature.</p>\n<p>The main benefit of this change is that it vastly simplifies the mental<br>\nmodel required of developers, and removes a bunch of failure modes<br>\nwe have tried to work around in other ways. There is now just one<br>\n\"source of truth\", the ISLE source itself, in the repository, and so there<br>\nis no need to understand a special \"rebuild\" step and how to handle<br>\nmerge errors. There is no special process needed to develop the compiler<br>\nwhen modifying the DSL. And there is no \"noise\" in the git history produced<br>\nby constantly-regenerated files.</p>\n<p>The two main downsides we discussed in #4066 are:</p>\n<ul>\n<li>Compile time could increase, by adding a \"meta\" step before the main build;</li>\n<li>It becomes less obvious where the source definitions are (everything becomes<br>\n  more \"magic\"), which makes exploration and debugging harder.</li>\n</ul>\n<p>This PR addresses each of these concerns:</p>\n<ol>\n<li>\n<p>To maintain reasonable compile time, it includes work to cut down the<br>\n   dependencies of the <code>cranelift-isle</code> crate to <em>nothing</em> (only the Rust stdlib),<br>\n   in the default build. It does this by putting the error-reporting bits<br>\n   (<code>miette</code> crate) under an optional feature, and the logging (<code>log</code> crate) under<br>\n   a feature-controlled macro, and manually writing an <code>Error</code> impl rather than<br>\n   using <code>thiserror</code>. This completely avoids proc macros and the <code>syn</code> build slowness.</p>\n<p>The user can still get nice errors out of <code>miette</code>: this is enabled by specifying<br>\n a Cargo feature <code>--features isle-errors</code>.</p>\n</li>\n<li>\n<p>To allow the user to optionally inspect the generated source, which nominally<br>\n   lives in a hard-to-find path inside <code>target/</code> now, this PR adds a feature <code>isle-in-source-tree</code><br>\n   that, as implied by the name, moves the target for ISLE generated source into<br>\n   the source tree, at <code>cranelift/codegen/isle_generated_source/</code>. It seems reasonable<br>\n   to do this when an explicit feature (opt-in) is specified because this is how ISLE regeneration<br>\n   currently works as well. To prevent surprises, if the feature is <em>not</em> specified, the<br>\n   build fails if this directory exists.</p>\n</li>\n</ol>\n<p>The compile-time measures as follows on my system: a clean build (<code>cargo clean</code> first<br>\nthen <code>cargo build -p cranelift-codegen</code>) on a MacBook M1 Air (macOS/aarch64) gives:</p>\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 8.26s\ncargo build -p cranelift-codegen  22.29s user 2.05s system 291% cpu 8.348 total\n</code></pre></div>\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 9.96s\ncargo build -p cranelift-codegen  28.08s user 2.43s system 303% cpu 10.055 total\n</code></pre></div>\n\n<p>so about 1.7 seconds slower.</p>\n<p>With a default configuration, an ISLE error looks like this during build:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"w\"> </span><span class=\"n\">files</span>: <span class=\"nc\">ISLE</span><span class=\"w\"> </span><span class=\"n\">errors</span>:\n\n  <span class=\"nc\">parse</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">To</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">detailed</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span>:\n\n      <span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">codegen</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">isle</span><span class=\"o\">-</span><span class=\"n\">errors</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When specifying the feature, one instead gets</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"w\"> </span><span class=\"n\">files</span>:\n    <span class=\"err\">×</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">╭─</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"n\">asdf</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">·</span><span class=\"w\"> </span><span class=\"err\">┬</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">·</span><span class=\"w\"> </span><span class=\"err\">╰──</span><span class=\"w\"> </span><span class=\"n\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">╰────</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 282043861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652313776
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a>.</p>",
        "id": 282043862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652313776
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a>.</p>",
        "id": 282043863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652313776
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a> from <code>isle-no-checked-in-code</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR fixes #4066: it modifies the Cranelift <code>build.rs</code> workflow to<br>\ninvoke the ISLE DSL compiler on every compilation, rather than only<br>\nwhen the user specifies a special \"rebuild ISLE\" feature.</p>\n<p>The main benefit of this change is that it vastly simplifies the mental<br>\nmodel required of developers, and removes a bunch of failure modes<br>\nwe have tried to work around in other ways. There is now just one<br>\n\"source of truth\", the ISLE source itself, in the repository, and so there<br>\nis no need to understand a special \"rebuild\" step and how to handle<br>\nmerge errors. There is no special process needed to develop the compiler<br>\nwhen modifying the DSL. And there is no \"noise\" in the git history produced<br>\nby constantly-regenerated files.</p>\n<p>The two main downsides we discussed in #4066 are:</p>\n<ul>\n<li>Compile time could increase, by adding more to the \"meta\" step before the main build;</li>\n<li>It becomes less obvious where the source definitions are (everything becomes<br>\n  more \"magic\"), which makes exploration and debugging harder.</li>\n</ul>\n<p>This PR addresses each of these concerns:</p>\n<ol>\n<li>\n<p>To maintain reasonable compile time, it includes work to cut down the<br>\n   dependencies of the <code>cranelift-isle</code> crate to <em>nothing</em> (only the Rust stdlib),<br>\n   in the default build. It does this by putting the error-reporting bits<br>\n   (<code>miette</code> crate) under an optional feature, and the logging (<code>log</code> crate) under<br>\n   a feature-controlled macro, and manually writing an <code>Error</code> impl rather than<br>\n   using <code>thiserror</code>. This completely avoids proc macros and the <code>syn</code> build slowness.</p>\n<p>The user can still get nice errors out of <code>miette</code>: this is enabled by specifying<br>\n a Cargo feature <code>--features isle-errors</code>.</p>\n</li>\n<li>\n<p>To allow the user to optionally inspect the generated source, which nominally<br>\n   lives in a hard-to-find path inside <code>target/</code> now, this PR adds a feature <code>isle-in-source-tree</code><br>\n   that, as implied by the name, moves the target for ISLE generated source into<br>\n   the source tree, at <code>cranelift/codegen/isle_generated_source/</code>. It seems reasonable<br>\n   to do this when an explicit feature (opt-in) is specified because this is how ISLE regeneration<br>\n   currently works as well. To prevent surprises, if the feature is <em>not</em> specified, the<br>\n   build fails if this directory exists.</p>\n</li>\n</ol>\n<p>The compile-time measures as follows on my system: a clean build (<code>cargo clean</code> first<br>\nthen <code>cargo build -p cranelift-codegen</code>) on a MacBook M1 Air (macOS/aarch64) gives:</p>\n<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 8.26s\ncargo build -p cranelift-codegen  22.29s user 2.05s system 291% cpu 8.348 total\n</code></pre></div>\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><code>Finished dev [unoptimized + debuginfo] target(s) in 9.96s\ncargo build -p cranelift-codegen  28.08s user 2.43s system 303% cpu 10.055 total\n</code></pre></div>\n\n<p>so about 1.7 seconds slower.</p>\n<p>With a default configuration, an ISLE error looks like this during build:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"w\"> </span><span class=\"n\">files</span>: <span class=\"nc\">ISLE</span><span class=\"w\"> </span><span class=\"n\">errors</span>:\n\n  <span class=\"nc\">parse</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">To</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">detailed</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span>:\n\n      <span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">codegen</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">isle</span><span class=\"o\">-</span><span class=\"n\">errors</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When specifying the feature, one instead gets</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"w\"> </span><span class=\"n\">files</span>:\n    <span class=\"err\">×</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">╭─</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"> </span><span class=\"n\">asdf</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">·</span><span class=\"w\"> </span><span class=\"err\">┬</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">·</span><span class=\"w\"> </span><span class=\"err\">╰──</span><span class=\"w\"> </span><span class=\"n\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"asdf\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"err\">│</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"err\">╰────</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 282044028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652313936
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a> from <code>isle-no-checked-in-code</code> to <code>main</code>.</p>",
        "id": 282044123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652314007
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143#pullrequestreview-970210353\">PR review</a>.</p>",
        "id": 282054717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652326155
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143#pullrequestreview-970210353\">PR review</a>.</p>",
        "id": 282054718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652326155
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143#discussion_r870916248\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>logging = [\"log\"]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 282054719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652326155
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a> from <code>isle-no-checked-in-code</code> to <code>main</code>.</p>",
        "id": 282055622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652327528
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143#pullrequestreview-970220088\">PR review</a>.</p>",
        "id": 282055627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652327538
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143#discussion_r870924120\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed, thanks!</p>\n</blockquote>",
        "id": 282055628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652327538
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a> from <code>isle-no-checked-in-code</code> to <code>main</code>.</p>",
        "id": 282057198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652329606
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4143\">PR #4143</a>.</p>",
        "id": 282060026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652333125
    }
]