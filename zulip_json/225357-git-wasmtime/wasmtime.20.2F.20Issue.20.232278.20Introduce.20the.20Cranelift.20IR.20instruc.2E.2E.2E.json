[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-705171644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<blockquote>\n<p>@abrown, would you be willing to help with this (and then we can land it all at once)?</p>\n</blockquote>\n<p>Yes, but I might not get around to it until next week? If the delay is not a problem, I don't mind doing that so that the issue is resolved all at once. (I think I can push to this PR, right?)</p>\n</blockquote>",
        "id": 212614038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602101984
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-705204996\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>That sounds fine to me at least!</p>\n</blockquote>",
        "id": 212621871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602106249
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-705648274\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I don't mind a one week delay either.</p>\n</blockquote>",
        "id": 212707412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602171007
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-706173915\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I added the necessary legalization rule to the old x86 backend.</p>\n</blockquote>",
        "id": 212823704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602249307
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-706173915\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I added the necessary legalization rule to the old x86 backend. I also removed the temporary work-around in <code>cranelift-wasm</code>, so the lowering logic is no longer conditional.</p>\n</blockquote>",
        "id": 212823954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602249443
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-706173915\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I added the necessary legalization rule to the old x86 backend. I also removed the temporary work-around in <code>cranelift-wasm</code>, so the lowering logic is no longer target-specific.</p>\n</blockquote>",
        "id": 212824056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602249484
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-706283455\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@akirilov-arm, nice! So I'm tracking the only thing I need to do next week is lower <code>LoadSplat</code> in the x64 backend, right? (Unless you get to it first...).</p>\n</blockquote>",
        "id": 212848860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602261442
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-706294506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@abrown Yes, that's the only thing remaining, and no, I don't intend to do any other x86 changes (unless I am addressing review feedback, of course).</p>\n<p>However, I have noticed that the peephole optimizer tests are failing and according to the logs the reason seems unrelated to my changes...</p>\n</blockquote>",
        "id": 212851085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602262802
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-707888014\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@akirilov-arm, @cfallin: I committed an implementation of <code>LoadSplat</code> on x64--please take a look. Unfortunately I had to thread <code>SourceLoc</code>s through more <code>Inst</code> formats in c9c8de6 and I feel there may a better way to do this so I opened #2290.</p>\n</blockquote>",
        "id": 213187710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602609264
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-707900184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>Looking at the failures in the CI, I think something is behaving weirdly re: Git. The lines it claims need extra parameters should have those added by c9c8de6 and <code>ci/run-experimental-x64-ci.sh</code>. Perhaps we should rebase on <code>main</code> and re-push?</p>\n</blockquote>",
        "id": 213190450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602610550
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-707915327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@abrown I have just rebased, but the tests are still failing. Your changes look fine to me, but I am not particularly familiar with the x64 backend.</p>\n</blockquote>",
        "id": 213194085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612283
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-707915327\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@abrown I have just rebased, but the tests are still failing. Your changes look fine to me otherwise, but I am not particularly familiar with the x64 backend.</p>\n</blockquote>",
        "id": 213195396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602612887
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708377464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I am not sure why, but I have moved the new IR instruction definition to the end of the function defining all the operations in <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and now the peephole optimizer tests are no longer failing.</p>\n<p>cc @fitzgen</p>\n</blockquote>",
        "id": 213282422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602679514
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708390693\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@abrown It looks like you missed updating a couple of <code>Inst::xmm_rm_r</code> and <code>Inst::xmm_rm_r_imm</code> call sites, probably because my branch was outdated when you started working on it. I just rebased, so would you be able to fix it?</p>\n</blockquote>",
        "id": 213285372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602680937
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708487785\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>I apologise for getting to this so late in the day.</p>\n<p>I would like to request that this be reconsidered.  I believe the approach discussed so far works against the design goals of the new backend framework, and that an alternative approach would be preferable.</p>\n<p>A primary goal of CLIF, in the new backend framework, is to provide a way to conveniently do redundancy elimination.  One key aspect is to provide only a single way to represent any computation.  This change runs counter to those goals.  For example, consider GVN: with this change in place, there is no way to GVN a single <code>LoadSplat</code> CLIF with an equivalent two-CLIF load and splat sequence.</p>\n<p>Of course I want this to become a single instruction on AArch64.  The instruction selection framework in the new backend has been designed from the start to allow matching multiple CLIF nodes into a single machine instruction, and so we should use that here, and not add the proposed <code>LoadSplat</code> CLIF node.</p>\n<p>@akirilov-arm writes:</p>\n<blockquote>\n<p>In order to generate it, it is necessary to merge the Load and the Splat in the backend, which is not possible because the load may have side effects.</p>\n</blockquote>\n<p>I don't follow .. can you clarify this?  What instruction are you referring to?</p>\n</blockquote>",
        "id": 213309067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602690121
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708495967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<blockquote>\n<p>What instruction are you referring to?<br>\n<code>Opcode::Load</code> and <code>Opcode::Splat</code>. I actually tried what you are talking about and it didn't work - refer to the discussion in #1175.</p>\n</blockquote>\n</blockquote>",
        "id": 213311172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602690901
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708495967\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<blockquote>\n<p>What instruction are you referring to?</p>\n</blockquote>\n<p><code>Opcode::Load</code> and <code>Opcode::Splat</code>. I actually tried what you are talking about and it didn't work - refer to the discussion in #1175.</p>\n</blockquote>",
        "id": 213311200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602690913
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708505318\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>Ah, I see.  Yes, it's true; the new framework currently doesn't allow what you tried -- it only allows a load to be at the root of a pattern tree.  Whereas here, the splat would be at the root.</p>\n<p>Having said that, @cfallin was talking recently about lifting that restriction in the framework.  This isn't of much significance in the AArch64 case (apart from here, obviously) since AArch64 have very few load-op instructions.  But for x64, almost all instructions have a load-op form, and so it's important that the framework can support that idiom effectively.  Hence it might be the case that this limitation gets lifted sooner rather than later.</p>\n</blockquote>",
        "id": 213313638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602691831
    },
    {
        "content": "<p>julian-seward1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708505318\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>Ah, I see.  Yes, it's true; the new framework currently doesn't allow what you tried -- it only allows a load to be at the root of a pattern tree.  Whereas here, the splat would be at the root.</p>\n<p>Having said that, @cfallin was talking recently about lifting that restriction in the framework.  This isn't of much significance in the AArch64 case (apart from here, obviously) since AArch64 has very few load-op instructions.  But for x64, almost all instructions have a load-op form, and so it's important that the framework can support that idiom effectively.  Hence it might be the case that this limitation gets lifted sooner rather than later.</p>\n</blockquote>",
        "id": 213313751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602691874
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-708525523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@akirilov-arm: good call, now d990dd4 should have source locations in more places. @julian-seward1: regardless of what we decide to do with this PR, you should also take a look at #2290--we need a good way to trap at all of the places an x64 instruction could load (which could be quite a few) so I suggest a possible alternative in that issue.</p>\n</blockquote>",
        "id": 213318711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602693963
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-709208485\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>Thanks, @abrown!</p>\n<p>@cfallin @julian-seward1 How are we going to proceed with this? The implementation is now complete (covering all three major backends) and passes all tests. Based on the discussion in #1175, I believed that this would be an acceptable approach, but even if it is not, most of my code is actually independent of whether there is a new CLIF operation or not, and I think that's the case for @abrown's code as well. Are there plans to change the new framework soon, so that it supports the type of pattern matching that would be applicable to this case?</p>\n</blockquote>",
        "id": 213409270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602760477
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-709524620\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@akirilov-arm @julian-seward1 @abrown   so, I'm off for this week and next (but I'll try to keep up with this when I can).  At a high level, I am fine with the pragmatic approach here (and in #1175) of creating these merged opcodes for now, and then eventually removing them when we have the story for load-related code motion sorted out.</p>\n<p>In other words, I don't necessarily think that we are so close to having the \"right thing\" built that we should hold back true codegen improvements in the meantime and create a dependence on a to-be-built part of the framework; I think the cost of removing these opcodes later is minimal, and can be done as part of a PR that introduces the proper pattern-matching. It's not the ideal end-state, but it lets us move forward in the meantime.</p>\n<p>@julian-seward1, what do you think?</p>\n</blockquote>",
        "id": 213470870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602787875
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-717683213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>So, @julian-seward1 and I discussed this last week; apologies for taking so long to get back to it (I'm back to work again, albeit somewhat busy with onboarding stuff.)</p>\n<p>In general I agree with @julian-seward1 (and it seems others would be on board with) a better approach eventually that can actually handle pattern-matching load sources to instructions. This has been on my to-do list for a while; but in theory is possible if we loosen the load-motion conditions a bit.</p>\n<p>However, I think that having the better codegen as a starting point is valuable; if we take this as-is for now, then we have a baseline whose codegen output we should match when we do have the proper pattern-matching in place.</p>\n<p>Thus, I'm happy to take this, and I'll commit to removing the <code>LoadSplat</code> as part of my pattern-matching fixup later, as long as @julian-seward1 doesn't strongly object to this transitional state. Thoughts?</p>\n</blockquote>",
        "id": 214794695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603858193
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-718140685\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@cfallin Sounds good to me. It's always better to have a good test case before adding non-trivial functionality and, if I understand correctly, previously there were no actual use cases for the enhanced pattern matching.</p>\n</blockquote>",
        "id": 214882312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603911308
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-718156619\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>Well, I can't say I'm enthusiastic; I think it moves the design in the wrong direction.  But if it's only temporary, and since it's useful to land the rest of it anyway, I won't stand in the way.</p>\n<p>I should add .. Today I implemented the proposed wasm instructions <code>v128.load32_zero</code> and <code>v128.load64_zero</code>, although the patch isn't on any PR yet.  These are almost identical to the load-splat insns, except that all lanes other than lane zero are zeroed out, not made into clones of it.  I used a two-CLIF-insn scheme -- a scalar load, and a move-scalar-to-lowest-lane-and-zero-others.  Once the isel framework can do load-op merging, I'll add a matching rule so as to only generate a single insn.</p>\n<p>So .. if/when that lands, it'll create further CLIF-level inconsistency, at least in the short term :-/</p>\n</blockquote>",
        "id": 214885731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603913062
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#issuecomment-718171064\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">Issue #2278</a>:</p>\n<blockquote>\n<p>@julian-seward1 understood, and yes, not an ideal situation; but I think this should be a useful test case in the sense that if a new matching framework can handle this case (allow <code>LoadSplat</code> to be removed while retaining identical output), it will have succeeded. I definitely want to get to that point as soon as possible :-)</p>\n<p>I'll go ahead and approve and merge now; thanks for the discussion, all!</p>\n</blockquote>",
        "id": 214888754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603914709
    }
]