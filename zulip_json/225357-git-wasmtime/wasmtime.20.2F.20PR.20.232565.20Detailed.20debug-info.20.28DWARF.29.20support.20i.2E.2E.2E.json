[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 222189821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226325
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 222191206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610228690
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 222203057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610248885
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a>.</p>",
        "id": 223577556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611266813
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a>.</p>",
        "id": 223577557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611266813
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 223588188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611273715
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574296276\">PR Review</a>.</p>",
        "id": 223646142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611324956
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562659084\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ExpressionWriter</code> has <code>write_op_breg</code></p>\n</blockquote>",
        "id": 223646144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611324956
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574664264\">PR Review</a>.</p>",
        "id": 223713126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562946523\">PR Review Comment</a>:</p>\n<blockquote>\n<p>All of these methods could use a little, single-sentence doc comment describing what they're doing.</p>\n</blockquote>",
        "id": 223713127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574664264\">PR Review</a>.</p>",
        "id": 223713128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562954209\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is the worklist processing order important here (eg avoiding big O blow up)? If not, I suspect that <code>Vec</code> and <code>pop</code> would be faster than <code>VecDeque</code> and <code>pop_front</code>.</p>\n</blockquote>",
        "id": 223713129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562948083\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What is <code>remove</code> here? Can you add comments for this struct and its members?</p>\n</blockquote>",
        "id": 223713130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562957252\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah is this when a collection becomes empty and can be removed from its parent collection? Maybe <code>is_empty</code> is a better name, or maybe just having a comment that explains would be enough.</p>\n</blockquote>",
        "id": 223713131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562956147\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This will always search for <code>stack</code> even if <code>reg.is_some()</code>. This can be remedied by using <code>.or_else(inline_the_def_of_stack_here)</code>.</p>\n</blockquote>",
        "id": 223713132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562958244\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This could be a little tighter as</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">().</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">last</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 223713133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562952511\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What is this? I have no idea what <code>iix</code> means here.</p>\n</blockquote>",
        "id": 223713134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356429
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562948347\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>remove_keys.clear()</code> to reuse the previous allocation</p>\n</blockquote>",
        "id": 223713135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611356430
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 223718271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360178
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702694\">PR Review</a>.</p>",
        "id": 223718333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360220
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979154\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The <code>map_or(true, ...)</code> form is a little hard to read for me, so I did <code>list.last().map(...).unwrap_or(true)</code> to be a little more explicit, and added a comment too. Happy to make things more concise, just want to avoid Haskell-like terseness that takes too much brain (for me, anyway) to decode :-)</p>\n</blockquote>",
        "id": 223718335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360220
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702698\">PR Review</a>.</p>",
        "id": 223718338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360221
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979158\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nice improvement, thanks!</p>\n</blockquote>",
        "id": 223718339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360221
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702709\">PR Review</a>.</p>",
        "id": 223718349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360225
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979167\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done; no, it shouldn't be important.</p>\n</blockquote>",
        "id": 223718350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360225
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702863\">PR Review</a>.</p>",
        "id": 223718407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360254
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979274\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Changed to <code>index</code>; it's a regalloc.rs-ism but I should really just write it out.</p>\n</blockquote>",
        "id": 223718408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360254
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702872\">PR Review</a>.</p>",
        "id": 223718410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360257
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979293\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done, thanks!</p>\n</blockquote>",
        "id": 223718411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360257
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702887\">PR Review</a>.</p>",
        "id": 223718413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360259
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979299\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Added comment and renamed; agreed, that's more clear.</p>\n</blockquote>",
        "id": 223718414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360259
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574702903\">PR Review</a>.</p>",
        "id": 223718416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360261
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#discussion_r562979312\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done; sorry about the terseness!</p>\n</blockquote>",
        "id": 223718417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611360261
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a> from <code>debug-value-labels</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR propagates \"value labels\" all the way from CLIF to DWARF<br>\nmetadata on the emitted machine code. The key idea is as follows:</p>\n<ul>\n<li>\n<p>Translate value-label metadata on the input into \"value_label\"<br>\n  pseudo-instructions when lowering into VCode. These<br>\n  pseudo-instructions take a register as input, denote a value label,<br>\n  and semantically are like a \"move into value label\" -- i.e., they<br>\n  update the current value (as seen by debugging tools) of the given<br>\n  local. These pseudo-instructions emit no machine code.</p>\n</li>\n<li>\n<p>Perform a dataflow analysis <em>at the machine-code level</em>, tracking<br>\n  value-labels that propagate into registers and into [SP+constant]<br>\n  stack storage. This is a forward dataflow fixpoint analysis where each<br>\n  storage location can contain a <em>set</em> of value labels, and each value<br>\n  label can reside in a <em>set</em> of storage locations. (Meet function is<br>\n  pairwise intersection by storage location.)</p>\n<p>This analysis traces value labels symbolically through loads and<br>\nstores and reg-to-reg moves, so it will naturally handle spills and<br>\nreloads without knowing anything special about them.</p>\n</li>\n<li>\n<p>When this analysis converges, we have, at each machine-code offset, a<br>\n  mapping from value labels to some number of storage locations; for<br>\n  each offset for each label, we choose the best location (prefer<br>\n  registers). Note that we can choose any location, as the symbolic<br>\n  dataflow analysis is sound and guarantees that the value at the<br>\n  value_label instruction propagates to all of the named locations.</p>\n</li>\n<li>\n<p>Then we can convert this mapping into a format that the DWARF<br>\n  generation code (wasmtime's debug crate) can use.</p>\n</li>\n</ul>\n<p>This PR also adds the new-backend variant to the gdb tests on CI.</p>\n</blockquote>",
        "id": 223721331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611362704
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#pullrequestreview-574714720\">PR Review</a>.</p>",
        "id": 223722008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611363405
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">PR #2565</a>.</p>",
        "id": 223723609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611364934
    }
]