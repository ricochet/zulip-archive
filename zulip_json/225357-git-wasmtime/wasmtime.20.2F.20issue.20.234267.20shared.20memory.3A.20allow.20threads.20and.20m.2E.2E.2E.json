[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4267\">issue #4267</a>:</p>\n<blockquote>\n<p>Currently, threads and memory64 don't work together: not all memory64 memories will fit into 4GB so Wasmtime will classify them as dynamic to allow the OS to move them. Shared memories cannot be moved; their base pointer must remain the same throughout their lifetime, so Wasmtime only generates shared memories that are static. When memory64 is enabled, however, a memory could be created with a large enough size that its memory plan would be dynamic. If this happens to be a shared memory, Wasmtime returns an error.</p>\n<p>@alexcrichton's proposed fix is to create static memory plans for all shared memories and limit the static memory size to the engine's configuration. At runtime, a threads + memory64 program attempting to use above this limit will fail to <code>memory.grow</code> once the engine-enforced static memory limit is reached, regardless of the memory size specified by the Wasm module.</p>\n</blockquote>",
        "id": 285997162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655158986
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4267\">issue #4267</a>:</p>\n<blockquote>\n<p>Currently, threads and memory64 don't work together: not all memory64 memories will fit into 4GB so Wasmtime will classify them as dynamic to allow the OS to move them. Shared memories cannot be moved; their base pointer must remain the same throughout their lifetime, so Wasmtime only generates shared memories that are static. When memory64 is enabled, however, a memory could be created with a large enough size that its memory plan would be dynamic. If this happens to be a shared memory, Wasmtime returns an error.</p>\n<p>@alexcrichton's proposed fix is to create static memory plans for all shared memories and limit the static memory size to the engine's configuration. At runtime, a threads + memory64 program attempting to use above this limit will fail to <code>memory.grow</code> once the engine-enforced static memory limit is reached, regardless of the memory size specified by the Wasm module.</p>\n</blockquote>",
        "id": 286013605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655174088
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4267\">issue #4267</a>:</p>\n<blockquote>\n<p>Currently, threads and memory64 don't work together: not all memory64 memories will fit into 4GB so Wasmtime will classify them as dynamic to allow the OS to move them. Shared memories cannot be moved; their base pointer must remain the same throughout their lifetime, so Wasmtime only generates shared memories that are static. When memory64 is enabled, however, a memory could be created with a large enough size that its memory plan would be dynamic. If this happens to be a shared memory, Wasmtime returns an error.</p>\n<p>@alexcrichton's proposed fix is to create static memory plans for all shared memories and limit the static memory size to the engine's configuration. At runtime, a threads + memory64 program attempting to use above this limit will fail to <code>memory.grow</code> once the engine-enforced static memory limit is reached, regardless of the memory size specified by the Wasm module.</p>\n</blockquote>",
        "id": 480977900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730917728
    }
]