[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1679997481\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 385344875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692164690
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1681899860\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>@afonso360 The following two wasmtime spec tests are failing for the PR:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wast</span>::<span class=\"n\">Cranelift</span>::<span class=\"n\">spec</span>::<span class=\"n\">simd_splat</span>\n<span class=\"n\">wast</span>::<span class=\"n\">Cranelift</span>::<span class=\"n\">spec</span>::<span class=\"n\">simd_splat_pooling</span>\n</code></pre></div>\n<p>They are failing for the following operators: <code>sadd_sat</code>, <code>usub_sat</code> &amp; <code>sshr</code>. If I remove splat simplify opts for these operators the tests pass.</p>\n<p>Can you please help me find the root cause of this failure? Do I need to tweak the opts for the above mentioned operators somehow to make the tests pass?</p>\n</blockquote>",
        "id": 385629574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692262717
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>This ended up being quite a long reply, sorry! I just wanted to note down the steps that I use to debug these sort of stuff, it might be useful in the future! (There's a TLDR at the bottom)</p>\n<hr>\n<p>So, running the tests individually shows us what went wrong. These test suites contain a bunch of individual tests so there is more than one failure. Here's what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wast</span>::<span class=\"n\">Cranelift</span>::<span class=\"n\">spec</span>::<span class=\"n\">simd_splat_pooling</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">FAILED</span>\n\n<span class=\"n\">failures</span>:\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">wast</span>::<span class=\"n\">Cranelift</span>::<span class=\"n\">spec</span>::<span class=\"n\">simd_splat_pooling</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">550</span>:<span class=\"mi\">21</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sadd_sat</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sadd_sat</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I16</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usub_sat</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ISLE</span>: <span class=\"nc\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usub_sat</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I16</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">749</span>:<span class=\"mi\">21</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">550</span>:<span class=\"mi\">21</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">550</span>:<span class=\"mi\">21</span>\n</code></pre></div>\n<p>Starting with the easy ones: <code>sadd_sat.{i8,i16}</code> and <code>usub_sat.{i8,i16}</code> are not implemented in ISLE. That means that we haven't yet implemented a machine code lowering for them in the x64 backend (ISLE is just the framework that we use for this!). But more importantly when reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.sadd_sat\">docs</a> it looks like they aren't supported for scalars!</p>\n<p>This sometimes happens, we allow an operation for vectors but not for scalars. Usually because they don't make sense for scalars, I think in this case it's just that no one has felt the need to implement it yet.</p>\n<p>I think we should be able to remove the optimizations for both of these opcodes, and the rest of the <code>*_sat</code> ones as well since they look like they only support vectors.</p>\n<hr>\n<p>Now onto the hard one. I ran the testsuite individually with <code>RUST_LOG=trace cargo run -- wast --disable-cache tests/spec_testsuite/simd_splat.wast</code> and pulled one of the offending functions out of the log. Essentially I just looked for any function with <code>sshr</code> since I didn't expect there to be duplicates in these files.</p>\n<p>I got this function out (I've slightly cleaned it up): </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">(</span><span class=\"n\">i64</span> <span class=\"n\">vmctx</span><span class=\"p\">,</span> <span class=\"n\">i64</span><span class=\"p\">,</span> <span class=\"n\">i32</span><span class=\"p\">,</span> <span class=\"n\">i32</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i8x16</span> <span class=\"n\">fast</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">:</span> <span class=\"n\">i32</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">:</span> <span class=\"n\">i32</span><span class=\"p\">):</span>\n    <span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">ireduce</span><span class=\"o\">.</span><span class=\"n\">i8</span> <span class=\"n\">v2</span>\n    <span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">splat</span><span class=\"o\">.</span><span class=\"n\">i8x16</span> <span class=\"n\">v5</span>\n    <span class=\"n\">v7</span> <span class=\"o\">=</span> <span class=\"n\">sshr</span> <span class=\"n\">v6</span><span class=\"p\">,</span> <span class=\"n\">v3</span>\n    <span class=\"k\">return</span> <span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It's really neat that it matches our optimization pretty much exactly! After optimizations it looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">:</span> <span class=\"n\">i64</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">:</span> <span class=\"n\">i32</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">:</span> <span class=\"n\">i32</span><span class=\"p\">):</span>\n    <span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">ireduce</span><span class=\"o\">.</span><span class=\"n\">i8</span> <span class=\"n\">v2</span>\n    <span class=\"n\">v8</span> <span class=\"o\">=</span> <span class=\"n\">sshr</span> <span class=\"n\">v5</span><span class=\"p\">,</span> <span class=\"n\">v3</span>\n    <span class=\"n\">v9</span> <span class=\"o\">=</span> <span class=\"n\">splat</span><span class=\"o\">.</span><span class=\"n\">i8x16</span> <span class=\"n\">v8</span>\n    <span class=\"k\">return</span> <span class=\"n\">v9</span>\n</code></pre></div>\n<p>So, now that we have a small reproducible example of what is going wrong, lets debug it.  My first step was compiling both the pre-optimization function and the post optimization function. And something immediately went wrong!</p>\n<p>The optimized version compiles cleanly! Which is really weird, since I got that out of the optimizer from the first version. I haven't seen this before but I do have an idea of what might be going wrong.</p>\n<p>We don't print the type of the <code>sshr</code> in the CLIF code. What I think might be happening is that we are saying to CLIF: Build me an <code>sshr</code> that takes an <code>i8</code> and <code>i32</code> and produces an <code>i8x16</code> and things blow up later in the pipeline. </p>\n<p>Changing the  optimization source to explicitly request the <code>lane_type</code> fixes it! We are now requesting an i8 out of the <code>sshr</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lane_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>This is a really weird issue, and it probably should have been caught earlier in the pipeline instead of letting it propagate all the way to the backend which really just confuses things.</p>\n<p>This relied a lot on intuition and also knowledge of how cranelift works, so don't worry if it's hard to figure it out! We really should have had better error messages to help people out on these issues.</p>\n<hr>\n<p>TLDR:<br>\n* We should remove the <code>{u,s}{add,sub}_sat</code> optimizations since these opcodes only exist for vectors but not for scalars.<br>\n* We should pass in the <code>lane_type</code> into the <code>sshr</code> operation, otherwise the compiler gets really confused. (this also applies to <code>ushr</code>/<code>ishl</code>/<code>rotr</code>/<code>rotl</code>)<br>\n</p>\n</blockquote>",
        "id": 385648775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692269618
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682162150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>Thanks @afonso360 for the detailed explanation and showing how to debug such failures in the future <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>. </p>\n<p>I've made the suggested changes now. Let's hope the checks pass.<br>\n</p>\n</blockquote>",
        "id": 385659301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692273683
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682202714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>Checks passed. Please review.</p>\n</blockquote>",
        "id": 385664057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692275494
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1683160549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>I assume you'll merge this, @afonso360? This PR looks great to me, thank you @gurry!</p>\n<p>I feel like all these bugs should have been caught by the CLIF verifier, which I guess means that the verifier did not run after the egraph pass. Would that have helped more quickly pin down the causes of these bugs? Actually I'm confused about when the verifier runs and whether we already have a way to turn it on. Maybe we should enable it for all filetests?</p>\n</blockquote>",
        "id": 385777461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692319243
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1683161898\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851\">issue #6851</a>:</p>\n<blockquote>\n<p>And the very next thing in my queue of GitHub notifications was #6855 which says exactly that, thank you @afonso360 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n</blockquote>",
        "id": 385777935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692319352
    }
]