[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Using cranelift 0.76, the following results in this error message: \"'Unsupported type for imin instruction: i64', [...]\\cranelift-codegen-0.76.0\\src\\isa\\x64\\lower.rs:2353:17\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">windows_fastcall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_sint</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I using imin incorrectly?</p>\n</blockquote>",
        "id": 253909528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632017836
    },
    {
        "content": "<p>DGriffin91 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-922508399\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Thanks for the explanation! </p>\n<p>Sure! I would be interested in seeing where it would be implemented.</p>\n</blockquote>",
        "id": 253959212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632072392
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-922515023\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>That particular assert is being triggered when we try to lower the CLIF Opcode into a x86 machine instruction. That is done in the x64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L2353\">lower.rs file, specifically line 2343</a>.</p>\n<p>The first step would be figuring out what assembly we want to generate for each instruction. <a href=\"https://godbolt.org/z/9oxo8KKsx\"><code>rustc</code> lowers this</a> as a <code>cmp</code> and <code>cmovg</code>.</p>\n<p>Reading the x64 backend a bit, it looks like we have helpers for emitting those instructions. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L404\"><code>emit_cmp</code></a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L1386\"><code>emit_cmoves</code></a>. You can probably call those and generate the assembly sequence above.</p>\n<p>While doing all these changes an easy way to test them is to build a CLIF test file, and run it using <code>clif-util</code>. Looking at our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/filetests/filetests/runtests\">testsuite</a>, it looks like we don't have any test files for <code>imin</code>, so its also a good idea to commit the test file that you generate when you implement this!</p>\n<p>A simple testfile for <code>imin.i64</code> could be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although you'd probably want to add tests for whatever other types / instructions you are implementing. You can then run this test file using <code>cargo run test ./test-file.clif</code>, which compiles the function and runs the tests in the comments.</p>\n<p>If you want to view the disassembly of the code you are generating you can run <code> cargo run compile --target x86_64 -D ./test-file.clif</code></p>\n<p>Hope this helps, good luck!</p>\n</blockquote>",
        "id": 253962015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632075445
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-922515023\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>That particular assert is being triggered when we try to lower the CLIF Opcode into a x86 machine instruction. That is done in the x64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L2353\">lower.rs file, specifically line 2343</a>.</p>\n<p>The first step would be figuring out what assembly we want to generate for each instruction. <a href=\"https://godbolt.org/z/9oxo8KKsx\"><code>rustc</code> lowers this</a> as a <code>mov</code>, <code>cmp</code> and <code>cmovg</code>. I'm not sure if this is the best instruction sequence, but maybe someone can comment on that later.</p>\n<p>Reading the x64 backend a bit, it looks like we have helpers for emitting those instructions. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L404\"><code>emit_cmp</code></a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L1386\"><code>emit_cmoves</code></a>. For <code>mov</code>, you can call <code>Inst::gen_move</code> which should generate the right thing. Between those three functions you should be able to generate assembly sequence above.</p>\n<p>While doing all these changes an easy way to test them is to build a CLIF test file, and run it using <code>clif-util</code>. Looking at our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/filetests/filetests/runtests\">testsuite</a>, it looks like we don't have any test files for <code>imin</code>, so its also a good idea to commit the test file that you generate when you implement this!</p>\n<p>A simple testfile for <code>imin.i64</code> could be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although you'd probably want to add tests for whatever other types / instructions you are implementing. You can then run this test file using <code>cargo run test ./test-file.clif</code>, which compiles the function and runs the tests in the comments.</p>\n<p>If you want to view the disassembly of the code you are generating you can run <code> cargo run compile --target x86_64 -D ./test-file.clif</code></p>\n<p>Hope this helps, good luck!</p>\n</blockquote>",
        "id": 253962816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632076292
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-922515023\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>That particular assert is being triggered when we try to lower the CLIF Opcode into a x86 machine instruction. That is done in the x64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L2353\">lower.rs file, specifically line 2343</a>.</p>\n<p>The first step would be figuring out what assembly we want to generate for each instruction. <a href=\"https://godbolt.org/z/9oxo8KKsx\"><code>rustc</code> lowers this</a> as a <code>mov</code>, <code>cmp</code> and <code>cmovg</code>. I'm not too familiar with x86 to be sure if this is the best instruction sequence, but maybe someone can comment on that later.</p>\n<p>Reading the x64 backend a bit, it looks like we have helpers for emitting those instructions. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L404\"><code>emit_cmp</code></a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/47490b4383bf48cbde8b1c33301a7f7d326ee7cc/cranelift/codegen/src/isa/x64/lower.rs#L1386\"><code>emit_cmoves</code></a>. For <code>mov</code>, you can call <code>Inst::gen_move</code> which should generate the right thing. Between those three functions you should be able to generate assembly sequence above.</p>\n<p>While doing all these changes an easy way to test them is to build a CLIF test file, and run it using <code>clif-util</code>. Looking at our <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/filetests/filetests/runtests\">testsuite</a>, it looks like we don't have any test files for <code>imin</code>, so its also a good idea to commit the test file that you generate when you implement this!</p>\n<p>A simple testfile for <code>imin.i64</code> could be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">machinst</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">imin_i64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although you'd probably want to add tests for whatever other types / instructions you are implementing. You can then run this test file using <code>cargo run test ./test-file.clif</code>, which compiles the function and runs the tests in the comments.</p>\n<p>If you want to view the disassembly of the code you are generating you can run <code> cargo run compile --target x86_64 -D ./test-file.clif</code></p>\n<p>Hope this helps, good luck!</p>\n</blockquote>",
        "id": 253962826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632076310
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Using cranelift 0.76, the following results in this error message: \"'Unsupported type for imin instruction: i64', [...]\\cranelift-codegen-0.76.0\\src\\isa\\x64\\lower.rs:2353:17\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">windows_fastcall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_sint</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I using imin incorrectly?</p>\n</blockquote>",
        "id": 254065021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632150522
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Using cranelift 0.76, the following results in this error message: \"'Unsupported type for imin instruction: i64', [...]\\cranelift-codegen-0.76.0\\src\\isa\\x64\\lower.rs:2353:17\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">windows_fastcall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_sint</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I using imin incorrectly?</p>\n</blockquote>",
        "id": 254065022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632150522
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Using cranelift 0.76, the following results in this error message: \"'Unsupported type for imin instruction: i64', [...]\\cranelift-codegen-0.76.0\\src\\isa\\x64\\lower.rs:2353:17\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">windows_fastcall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_sint</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I using imin incorrectly?</p>\n</blockquote>",
        "id": 254065023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632150522
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-925692893\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>This issue also looks like a duplicate of #1505.</p>\n</blockquote>",
        "id": 254513565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632393259
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-1288927256\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>This seems to have been fixed in #3748 for types <code>i64</code> and smaller, we are still crashing on <code>i128</code>.</p>\n</blockquote>",
        "id": 305802110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666612805
    }
]