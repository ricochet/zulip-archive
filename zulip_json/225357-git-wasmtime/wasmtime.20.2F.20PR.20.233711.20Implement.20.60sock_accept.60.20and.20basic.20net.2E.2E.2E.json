[
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>TODO:</p>\n<ul>\n<li>[ ] Test cases</li>\n<li>[ ] Discussion of <code>SocketAddr</code> return value for <code>::accept()</code> in the <a href=\"https://github.com/rust-lang/rust/pull/93158\">rustsrc PR</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TcpStream</span>::<span class=\"n\">from_inner</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Socket</span>::<span class=\"n\">from_raw_fd</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// WASI has no concept of SocketAddr yet</span>\n<span class=\"w\">            </span><span class=\"c1\">// return an unspecified IPv4Addr</span>\n<span class=\"w\">            </span><span class=\"n\">SocketAddr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Ipv4Addr</span>::<span class=\"n\">UNSPECIFIED</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Followup Todo:\n* [ ] PR with CLI option to specify <code>ListenFd</code>s\n* [ ] Wasi definition of <code>Preopentype</code> for sockets (listener and stream, tcp and unix)\n* [ ] Non-busy polling on Windows<br>\n</p>\n</blockquote>",
        "id": 269561751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284511
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n<li>[ ] Discussion of <code>SocketAddr</code> return value for <code>::accept()</code> in the <a href=\"https://github.com/rust-lang/rust/pull/93158\">rustsrc PR</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TcpStream</span>::<span class=\"n\">from_inner</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Socket</span>::<span class=\"n\">from_raw_fd</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// WASI has no concept of SocketAddr yet</span>\n<span class=\"w\">            </span><span class=\"c1\">// return an unspecified IPv4Addr</span>\n<span class=\"w\">            </span><span class=\"n\">SocketAddr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Ipv4Addr</span>::<span class=\"n\">UNSPECIFIED</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Followup Todo</h3>\n<ul>\n<li>[ ] PR with CLI option to specify <code>ListenFd</code>s: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3729\">https://github.com/bytecodealliance/wasmtime/pull/3729</a></li>\n<li>[ ] Wasi definition of <code>Preopentype</code> for sockets (listener and stream, tcp and unix)</li>\n<li>[ ] Non-busy polling on Windows<br>\n</li>\n</ul>\n</blockquote>",
        "id": 269561768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284527
    },
    {
        "content": "<p>haraldh submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#pullrequestreview-864771612\">PR review</a>.</p>",
        "id": 269562351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284872
    },
    {
        "content": "<p>haraldh created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#discussion_r793537163\">PR review comment</a>:</p>\n<blockquote>\n<p>moved CLI PR to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3729\">https://github.com/bytecodealliance/wasmtime/pull/3729</a></p>\n</blockquote>",
        "id": 269562353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284873
    },
    {
        "content": "<p>haraldh submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#pullrequestreview-864771695\">PR review</a>.</p>",
        "id": 269562363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284877
    },
    {
        "content": "<p>haraldh created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#discussion_r793537215\">PR review comment</a>:</p>\n<blockquote>\n<p>moved CLI PR to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3729\">https://github.com/bytecodealliance/wasmtime/pull/3729</a></p>\n</blockquote>",
        "id": 269562364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284878
    },
    {
        "content": "<p><strong>haraldh</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> as ready for review.</p>",
        "id": 269562369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643284882
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n<li>[ ] Discussion of <code>SocketAddr</code> return value for <code>::accept()</code> in the <a href=\"https://github.com/rust-lang/rust/pull/93158\">rustsrc PR</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TcpStream</span>::<span class=\"n\">from_inner</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Socket</span>::<span class=\"n\">from_raw_fd</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// WASI has no concept of SocketAddr yet</span>\n<span class=\"w\">            </span><span class=\"c1\">// return an unspecified IPv4Addr</span>\n<span class=\"w\">            </span><span class=\"n\">SocketAddr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Ipv4Addr</span>::<span class=\"n\">UNSPECIFIED</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Followup Todo</h3>\n<ul>\n<li>[ ] PR with CLI option to specify <code>ListenFd</code>s: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3729\">https://github.com/bytecodealliance/wasmtime/pull/3729</a></li>\n<li>[ ] Wasi definition of <code>Preopentype</code> for sockets (listener and stream, tcp and unix)</li>\n<li>[ ] Non-busy polling on Windows<br>\n</li>\n</ul>\n</blockquote>",
        "id": 269563110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643285349
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n<h3>Followup Todo</h3>\n<ul>\n<li>[ ] PR with CLI option to specify <code>ListenFd</code>s: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3729\">https://github.com/bytecodealliance/wasmtime/pull/3729</a></li>\n<li>[ ] Wasi definition of <code>Preopentype</code> for sockets (listener and stream, tcp and unix)</li>\n<li>[ ] Non-busy polling on Windows<br>\n</li>\n</ul>\n</blockquote>",
        "id": 269563153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643285391
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269563161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643285401
    },
    {
        "content": "<p>haraldh updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>.</p>",
        "id": 269564803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643286419
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<p>With the addition of <code>sock_accept()</code> in <code>wasi-0.11.0</code>, wasmtime can now<br>\nimplement basic networking for pre-opened sockets.</p>\n<p>For Windows <code>AsHandle</code> was replaced with <code>AsRawHandleOrSocket</code> to cope<br>\nwith the duality of Handles and Sockets.</p>\n<p>For Unix a <code>wasi_cap_std_sync::net::Socket</code> enum was created to handle<br>\nthe {Tcp,Unix}{Listener,Stream} more efficiently in<br>\n<code>WasiCtxBuilder::preopened_socket()</code>.</p>\n<p>The addition of that many <code>WasiFile</code> implementors was mainly necessary,<br>\nbecause of the difference in the <code>num_ready_bytes()</code> function.</p>\n<p>A known issue is Windows now busy polling on sockets, because except<br>\nfor <code>stdin</code>, nothing is querying the status of windows handles/sockets.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269564852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643286462
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<p>With the addition of <code>sock_accept()</code> in <code>wasi-0.11.0</code>, wasmtime can now implement basic networking for pre-opened sockets.</p>\n<p>For Windows <code>AsHandle</code> was replaced with <code>AsRawHandleOrSocket</code> to cope with the duality of Handles and Sockets.</p>\n<p>For Unix a <code>wasi_cap_std_sync::net::Socket</code> enum was created to handle the {Tcp,Unix}{Listener,Stream} more efficiently in<br>\n<code>WasiCtxBuilder::preopened_socket()</code>.</p>\n<p>The addition of that many <code>WasiFile</code> implementors was mainly necessary, because of the difference in the <code>num_ready_bytes()</code> function.</p>\n<p>A known issue is Windows now busy polling on sockets, because except for <code>stdin</code>, nothing is querying the status of windows handles/sockets.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269564900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643286482
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#pullrequestreview-865463320\">PR review</a>.</p>",
        "id": 269646377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643321093
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#pullrequestreview-865463320\">PR review</a>.</p>",
        "id": 269646378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643321093
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#discussion_r794027912\">PR review comment</a>:</p>\n<blockquote>\n<p>Another option here would be to make <code>Socket</code> be a simple struct that holds an <code>OwnedFd</code>, and uses <code>rustix::net</code> calls to implement the functions rather than <code>cap_std::net</code>/<code>std::net</code>. Rustix even supports the socket APIs on Windows, so this ought to work. And you could probably unify the \"stream\" vs. \"listener\" implementations below. That said, either way seems fine for now, so feel free to make a judgement call here.</p>\n</blockquote>",
        "id": 269646379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643321093
    },
    {
        "content": "<p>haraldh updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>.</p>",
        "id": 269729534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643373818
    },
    {
        "content": "<p>haraldh submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#pullrequestreview-866098588\">PR review</a>.</p>",
        "id": 269729954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643374022
    },
    {
        "content": "<p>haraldh created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711#discussion_r794474371\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I didn't want to change all the other parts too much.</p>\n<p>What you are proposing can be done in a separate PR, which will change much more, I guess.</p>\n<p>With the <code>Socket</code> abstraction, I think I didn't make the \"user\" facing API incompatible with your proposal.</p>\n</blockquote>",
        "id": 269729956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643374022
    },
    {
        "content": "<p>haraldh updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>.</p>",
        "id": 269734068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643376007
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<p>With the addition of <code>sock_accept()</code> in <code>wasi-0.11.0</code>, wasmtime can now implement basic networking for pre-opened sockets.</p>\n<p>For Windows <code>AsHandle</code> was replaced with <code>AsRawHandleOrSocket</code> to cope with the duality of Handles and Sockets.</p>\n<p>For Unix a <code>wasi_cap_std_sync::net::Socket</code> enum was created to handle the {Tcp,Unix}{Listener,Stream} more efficiently in<br>\n<code>WasiCtxBuilder::preopened_socket()</code>.</p>\n<p>The addition of that many <code>WasiFile</code> implementors was mainly necessary, because of the difference in the <code>num_ready_bytes()</code> function.</p>\n<p>A known issue is Windows now busy polling on sockets, because except for <code>stdin</code>, nothing is querying the status of windows handles/sockets.</p>\n<p>Another know issue on Windows, is that there is no crate providing<br>\nsupport for <code>fcntl(fd, F_GETFL, 0)</code>.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269734247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643376112
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<p>With the addition of <code>sock_accept()</code> in <code>wasi-0.11.0</code>, wasmtime can now implement basic networking for pre-opened sockets.</p>\n<p>For Windows <code>AsHandle</code> was replaced with <code>AsRawHandleOrSocket</code> to cope with the duality of Handles and Sockets.</p>\n<p>For Unix a <code>wasi_cap_std_sync::net::Socket</code> enum was created to handle the {Tcp,Unix}{Listener,Stream} more efficiently in<br>\n<code>WasiCtxBuilder::preopened_socket()</code>.</p>\n<p>The addition of that many <code>WasiFile</code> implementors was mainly necessary, because of the difference in the <code>num_ready_bytes()</code> function.</p>\n<p>A known issue is Windows now busy polling on sockets, because except for <code>stdin</code>, nothing is querying the status of windows handles/sockets.</p>\n<p>Another know issue on Windows, is that there is no crate providing<br>\nsupport for <code>fcntl(fd, F_GETFL, 0)</code> for sockets.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269734310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643376126
    },
    {
        "content": "<p>haraldh updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>.</p>",
        "id": 269735376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643376609
    },
    {
        "content": "<p>haraldh updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>.</p>",
        "id": 269737241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643377490
    },
    {
        "content": "<p>haraldh edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a> from <code>wasmtime_sock_accept</code> to <code>main</code>:</p>\n<blockquote>\n<p>Together with <a href=\"https://github.com/rust-lang/rust/pull/93158\">https://github.com/rust-lang/rust/pull/93158</a> this enables basic networking in rust.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3730\">https://github.com/bytecodealliance/wasmtime/issues/3730</a> for the tracking issue.</p>\n<p>With the addition of <code>sock_accept()</code> in <code>wasi-0.11.0</code>, wasmtime can now implement basic networking for pre-opened sockets.</p>\n<p>For Windows <code>AsHandle</code> was replaced with <code>AsRawHandleOrSocket</code> to cope with the duality of Handles and Sockets.</p>\n<p>For Unix a <code>wasi_cap_std_sync::net::Socket</code> enum was created to handle the {Tcp,Unix}{Listener,Stream} more efficiently in<br>\n<code>WasiCtxBuilder::preopened_socket()</code>.</p>\n<p>The addition of that many <code>WasiFile</code> implementors was mainly necessary, because of the difference in the <code>num_ready_bytes()</code> function.</p>\n<p>A known issue is Windows now busy polling on sockets, because except for <code>stdin</code>, nothing is querying the status of windows handles/sockets.</p>\n<p>Another know issue on Windows, is that there is no crate providing support for <code>fcntl(fd, F_GETFL, 0)</code> for sockets, so <code>WasiFile::get_fdflags()</code> always returns 0.</p>\n<h3>Todo</h3>\n<ul>\n<li>[ ] Test cases</li>\n</ul>\n</blockquote>",
        "id": 269738849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643378127
    },
    {
        "content": "<p>sunfishcode merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3711\">PR #3711</a>.</p>",
        "id": 270130452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643675112
    }
]