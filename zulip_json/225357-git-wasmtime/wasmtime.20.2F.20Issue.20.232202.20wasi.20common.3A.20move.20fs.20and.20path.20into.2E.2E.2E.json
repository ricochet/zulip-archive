[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202#issuecomment-692404649\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202\">Issue #2202</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 210082133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600133108
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202#issuecomment-693685887\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202\">Issue #2202</a>:</p>\n<blockquote>\n<p>rebased on top of main after #2201 merged </p>\n</blockquote>",
        "id": 210325119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600293278
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202#issuecomment-693685887\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202\">Issue #2202</a>:</p>\n<blockquote>\n<p>This PR has been rebased on top of main after #2201 merged </p>\n</blockquote>",
        "id": 210325131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600293285
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202#issuecomment-698032121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202\">Issue #2202</a>:</p>\n<blockquote>\n<p>wrt the Rights flags: right now, the canonical definition of the rights type is in the witx snapshot, but if we evolve how rights work, I expect the first thing we'll do is make the canonical definition a type defined in wasi-common, and then define conversion functions for whenever we need to represent those to the guest via each snapshot we support.</p>\n<p>wrt separation of responsibilities: first off, theres a big overlap between <code>Handle</code> and <code>Entry</code> right now, which needs design work still. I'm not 100% sure how to resolve these yet. My goal is that the handle/entry concept will be responsible for exporting all types used in its interfaces. Whether those types are imported from a given snapshot's wiggle generated code, or defined canonically without wiggle, is an implementation detail.</p>\n<p>At the moment, snapshots manipulate the entry table (mostly <code>get_entry</code> but some <code>remove_entry</code> and <code>insert_entry_at</code>) and call <code>Entry</code> methods (though they do so with types exported by <code>crate::handle</code>... admittedly this is muddled). Since we want to define many snapshots that will usually look a lot alike, I tried to move as much complexity out of these bodies as possible, while exposing as few pointers (and, with them, assumptions about how guest programs represent things in memory) to the <code>Entry</code> methods as possible. Unfortunately, I haven't figured out how to do this with absolutely no pointers, unless we reintroduce mut vs const borrows to the wiggle api so that const borrows can overlap.</p>\n<p>Then, each snapshot will be responsible for calling the handle/entry concept, converting any of its interfaces's types to and from the ones expected by the <code>Entry</code> methods. Whichever snapshot's types get exported by <code>crate::handle</code> gets to skip this converting to/from code. For all of the types in snapshot 0, we'll have to define conversion functions, but the overwhelming majority of them should compile to a no-op because the representation is exactly the same.</p>\n<p>This PR leaves this work incomplete - #2205 is still a work in progress at completing that abstraction with the scheduler methods.</p>\n</blockquote>",
        "id": 211075882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600905341
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202#issuecomment-737503934\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2202\">Issue #2202</a>:</p>\n<blockquote>\n<p>Closing, I'm taking another tack on this work based on cap-std &amp; system-interface.</p>\n</blockquote>",
        "id": 218621665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606944192
    }
]