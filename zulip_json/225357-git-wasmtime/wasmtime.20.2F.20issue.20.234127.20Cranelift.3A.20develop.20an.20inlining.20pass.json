[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<p>In the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we described the need to add <a href=\"https://en.wikipedia.org/wiki/Inline_expansion\">inlining</a> to Cranelift. This need comes mainly from anticipated future workloads in some Cranelift applications. For example, when used as a Wasm backend, multi-module use-cases will become more common as the <a href=\"https://github.com/WebAssembly/component-model\">component model</a> becomes a reality. In such use-cases, no inlining would have been done by the Wasm toolchain; execution in Wasmtime/Cranelift is the first time that modules \"meet\" and can cross-inline calls, or at least interface-type adapter shim functions.</p>\n<p>We will likely want to be a little careful about the inlining heuristic and associated costs, in order to preserve our general \"fast compilation\" focus. Perhaps we want to only inline explicitly-marked-as-inlinable functions. Or perhaps a bottom-up-over-callgraph-SCCs approach (like LLVM) is still the right one, but with a low cutoff threshold for function size to inline.</p>\n</blockquote>",
        "id": 281895723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222411
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<p>In the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we described the need to add <a href=\"https://en.wikipedia.org/wiki/Inline_expansion\">inlining</a> to Cranelift. This need comes mainly from anticipated future workloads in some Cranelift applications. For example, when used as a Wasm backend, multi-module use-cases will become more common as the <a href=\"https://github.com/WebAssembly/component-model\">component model</a> becomes a reality. In such use-cases, no inlining would have been done by the Wasm toolchain; execution in Wasmtime/Cranelift is the first time that modules \"meet\" and can cross-inline calls, or at least interface-type adapter shim functions.</p>\n<p>We will likely want to be a little careful about the inlining heuristic and associated costs, in order to preserve our general \"fast compilation\" focus. Perhaps we want to only inline explicitly-marked-as-inlinable functions. Or perhaps a bottom-up-over-callgraph-SCCs approach (like LLVM) is still the right one, but with a low cutoff threshold for function size to inline.</p>\n</blockquote>",
        "id": 281895724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222411
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<p>In the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">2022 roadmap</a>, we described the need to add <a href=\"https://en.wikipedia.org/wiki/Inline_expansion\">inlining</a> to Cranelift. This need comes mainly from anticipated future workloads in some Cranelift applications. For example, when used as a Wasm backend, multi-module use-cases will become more common as the <a href=\"https://github.com/WebAssembly/component-model\">component model</a> becomes a reality. In such use-cases, no inlining would have been done by the Wasm toolchain; execution in Wasmtime/Cranelift is the first time that modules \"meet\" and can cross-inline calls, or at least interface-type adapter shim functions.</p>\n<p>We will likely want to be a little careful about the inlining heuristic and associated costs, in order to preserve our general \"fast compilation\" focus. Perhaps we want to only inline explicitly-marked-as-inlinable functions. Or perhaps a bottom-up-over-callgraph-SCCs approach (like LLVM) is still the right one, but with a low cutoff threshold for function size to inline.</p>\n</blockquote>",
        "id": 281895725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222411
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127#issuecomment-1124052557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<blockquote>\n<p>We will likely want to be a little careful about the inlining heuristic and associated costs, in order to preserve our general \"fast compilation\" focus.</p>\n</blockquote>\n<p>I think we will want to use information about the modules that functions come from when deciding whether to inline.</p>\n<p>For example, inlining a tiny function from module A into a function in module B makes a lot of sense.</p>\n<p>However inlining a tiny function from module A into another function in module A doesn't make sense. If that was profitable, the Wasm-producing toolchain (LLVM 99.99% of the time) would have presumably already done it, and because the toolchain didn't the function was most likely marked the equivalent of <code>#[inline(never)]</code>; we just don't have that attribute/metadata anymore by the time we are compiling the Wasm and therefore don't know why the decision not to inline was made.</p>\n<p>Note that this means that the <em>same</em> function could be considered a good candidate for inlining at one call site and a bad candidate for inlining at another call site.</p>\n<blockquote>\n<p>Perhaps we want to only inline explicitly-marked-as-inlinable functions.</p>\n</blockquote>\n<p>Who would do mark functions as inlinable? The Wasm won't have any such annotations and it isn't really something that the Wasm frontend can determine on its own in general (mayyyyyyyyybe by looking at Wasm branch hinting annotation and only inlining for hot call sites in hot blocks? Seems easy to get poor heuristics this way and I'd rather intoduce an inlining hint annotation Wasm proposal than seriously pursue this).</p>\n</blockquote>",
        "id": 282000455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652290231
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127#issuecomment-1124078388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<blockquote>\n<p>Who would do mark functions as inlinable? The Wasm won't have any such annotations and it isn't really something that the Wasm frontend can determine on its own in general (mayyyyyyyyybe by looking at Wasm branch hinting annotation and only inlining for hot call sites in hot blocks? Seems easy to get poor heuristics this way and I'd rather intoduce an inlining hint annotation Wasm proposal than seriously pursue this).</p>\n</blockquote>\n<p>For this use-case I'm mostly anticipating Interface Types-like applications: generated adapter functions/thunks/stubs can be explicitly marked as \"please inline\". This seems like some nice low-hanging fruit in that (i) the Cranelift user (here Wasmtime) might know that some functions are small, by construction, and (ii) there are relatively few of them and they are only one level deep, so this is not blowing up compile-time by inlining everywhere.</p>\n</blockquote>",
        "id": 282002310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652291106
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127#issuecomment-1124158041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4127\">issue #4127</a>:</p>\n<blockquote>\n<blockquote>\n<p>However inlining a tiny function from module A into another function in module A doesn't make sense.</p>\n</blockquote>\n<p>For wasm you are mostly right, although someone may have used <code>#[inline(never)]</code> for debuginfo reasons or to hide UB from the compiler, in which case inlining at clif ir level should be fine I think. For cg_clif inlining within the same module is absolutely necessary.</p>\n</blockquote>",
        "id": 282008766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652293854
    }
]