[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a> from <code>x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>I've implemented basic support for Baldrdash so as to be able to run the extensive Spidermonkey test suite, and then could get back to fix a few integer operators implemented before. Also implemented most of the integer opcodes required for wasm; I could start to run successfully a few large wasm integer-only programs with wasmtime too.</p>\n<p>I plan on enabling limited testing of wast files on CI soon, to catch future regressions in codegen.</p>\n<p>Sorry about the large PR!</p>\n</blockquote>",
        "id": 203294803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594228144
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a>.</p>",
        "id": 203294805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594228145
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a> from <code>x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>I've implemented basic support for Baldrdash so as to be able to run the extensive Spidermonkey test suite, and then could get back to fix a few integer operators implemented before. Also implemented most of the integer opcodes required for wasm; I could start to run successfully a few large wasm integer-only programs with wasmtime too.</p>\n<p>I plan on enabling limited testing of wast files on CI soon, to catch future regressions in codegen.</p>\n<p>Sorry about the large PR!</p>\n</blockquote>",
        "id": 203361726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594283480
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-446134861\">PR Review</a>.</p>",
        "id": 203471337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594359911
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r452633693\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Rotate in shift enum ... making the naming a little inconsistent from the first 3? Perhaps a more generic name (and comment update) for the Enum to show that Rotate is also housed. Also for consistency could prepend shift to Left, RightZ, and RightS, i.e. ShiftLeft, ShiftRightZ, ShiftRightS.</p>\n</blockquote>",
        "id": 203471338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594359912
    },
    {
        "content": "<p>jlb6740 deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r452633693\">PR Review Comment</a>.</p>",
        "id": 203471691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594360374
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-446137281\">PR Review</a>.</p>",
        "id": 203471700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594360396
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-446137281\">PR Review</a>.</p>",
        "id": 203471701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594360396
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r452635799\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Rotate in shift enum ... making the naming a little inconsistent from the first 3? Perhaps a more generic name (and comment update) for the Enum to show that Rotate is also housed. Also for consistency could prepend shift to Left, RightZ, and RightS, i.e. ShiftLeft, ShiftRightZ, ShiftRightS.</p>\n</blockquote>",
        "id": 203471702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594360396
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a>.</p>",
        "id": 203941559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594811501
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449151499\">PR Review</a>.</p>",
        "id": 203983722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832897
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455201984\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1 for that suggestion.</p>\n</blockquote>",
        "id": 203983723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832897
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449158603\">PR Review</a>.</p>",
        "id": 203984367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833228
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455205381\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could you clarify the register usage in this comment a bit?  Something like: <code>RDX:RAX &lt;- RAX * rhs</code>.</p>\n</blockquote>",
        "id": 203984369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833229
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449162732\">PR Review</a>.</p>",
        "id": 203984729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833404
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455207387\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, <code>gen_move</code> has its destination on the left?  That feels inconsistent with the rest of the x64 stuff, which I thought had destinations as the rightmost argument.  But maybe that's because <code>gen_move</code> is from the applies-to-all-targets <code>trait Inst</code>, right?  I guess the use of <code>Writable</code> guarantees we're safe here.</p>\n</blockquote>",
        "id": 203984730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833404
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455208772\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ReadOnlyGprRmR*</code> feels a bit cumbersome to me (and did when I looked at it some days ago).  Would you consider instead <code>UnaryRmR</code> (and consistent renaming for the derived-from-it names?)</p>\n</blockquote>",
        "id": 203984972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833538
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449165932\">PR Review</a>.</p>",
        "id": 203984973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833538
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449172926\">PR Review</a>.</p>",
        "id": 203985595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833840
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455212202\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit-level, at best, but .. (eg) <code>*Extend32</code> doesn't make it obvious to the casual reader whether the 32 is the source or dest width.  Would you consider adding <code>To</code> in front of the number?  eg <code>*ExtendTo32</code> ?</p>\n</blockquote>",
        "id": 203985596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833840
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449135814\">PR Review</a>.</p>",
        "id": 203987167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449135814\">PR Review</a>.</p>",
        "id": 203987169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455207356\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Add a comment giving the instruction this is emitting? <code>movq $imm64, %dst</code> or similar...</p>\n</blockquote>",
        "id": 203987170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455210992\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps for a future refactor, but IMHO we should move from <code>is_64</code> bools to a purpose-built enum.</p>\n</blockquote>",
        "id": 203987171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455191626\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just a stylistic preference, but I tend to prefer panics for things like this, e.g. <code>_ =&gt; panic!(\"Int args only supported for SysV calling conventions\")</code> or somesuch...</p>\n<p>(similar comment below)</p>\n</blockquote>",
        "id": 203987172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455208788\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Drive-by / pre-existing, but perhaps we could turn <code>is_div</code> and <code>is_signed</code> into their own (combined) enum -- SDiv, UDiv, SRem, URem?</p>\n</blockquote>",
        "id": 203987173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455212310\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I know this is just following the aarch64 backend (so it's OK for now!), but I'm wondering if we should make the pinned register a flags option, and then set it explicitly in Baldrdash, to avoid the hardcoded reference to SpiderMonkey here. Perhaps for a future refactor?</p>\n</blockquote>",
        "id": 203987175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594834487
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449556217\">PR Review</a>.</p>",
        "id": 204051505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594882789
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455552268\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm sure this works correctly, but it concerns me in two ways:</p>\n<ul>\n<li>\n<p>The text here is long and it's (almost) exactly a 6-way unrolled loop in the 64-bit case.  Would it be possible to do this by having a loop here (in <a href=\"http://lower.rs\">lower.rs</a>, not the generated code) which reads a table of constants?  In the style of <a href=\"https://sourceware.org/git/?p=valgrind.git;a=blob;f=VEX/priv/guest_amd64_toIR.c;h=fadf47d41d6ba6f63a5ca3800409b11da94c5f7e;hb=HEAD#l4948\">https://sourceware.org/git/?p=valgrind.git;a=blob;f=VEX/priv/guest_amd64_toIR.c;h=fadf47d41d6ba6f63a5ca3800409b11da94c5f7e;hb=HEAD#l4948</a></p>\n</li>\n<li>\n<p>I see an integer multiply at the end.  In the sequences I'm familiar with, that doesn't appear.  It's probably a 3-cycle latency, compared with the 1-cycle latency and parallelisable over #-available-basic-ALUs for a sequence using only and/or/add/sub/shifts.</p>\n</li>\n</ul>\n<p>Given that the current goal is to get correct x64 code generation landed, I'd be happy for these to be looked at in a followup.  They don't need to block landing.</p>\n</blockquote>",
        "id": 204051506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594882790
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449558202\">PR Review</a>.</p>",
        "id": 204051743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594882993
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455553887\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1 for that; please add comments always, indicating what insns are being emitted.  Inferring from the opcodes is nearly impossible.</p>\n</blockquote>",
        "id": 204051744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594882993
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449559466\">PR Review</a>.</p>",
        "id": 204051879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883127
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455554916\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also .. is there a typo in the commit message?  \"movaps\" isn't the insn you mean AFAIK; that's an aligned SSE load (move-aligned-packed-singleprecision).  Maybe you mean \"movabsq\" ?</p>\n</blockquote>",
        "id": 204051880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883127
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449561617\">PR Review</a>.</p>",
        "id": 204052093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883336
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455556594\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If it's an outright bug that should never happen, then +1 for panicing rather than continuing (returning <code>false</code> or whatever).  I'm not convinced that's the case here, though (can't infer)</p>\n</blockquote>",
        "id": 204052094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883336
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449563436\">PR Review</a>.</p>",
        "id": 204052230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883516
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455558095\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I just want to check here that these changes to the register numbering don't change the order at which they appear in the final <code>RealRegUniverse</code>.  (To be specific: you are not reordering registers within each reg-class, in the universe).  Is that true?  I ask because the ordering of regs within each reg class is relevant -- at least for RA/BT -- to whether caller- or callee-saved registers are used in preference, and that has an effect on the quality of the generated allocation.</p>\n</blockquote>",
        "id": 204052231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883516
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449564608\">PR Review</a>.</p>",
        "id": 204052351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883632
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455558979\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1; losing <code>r15</code> in configurations where that isn't necessary would be unfortunate, given that there are only circa 12 int regs available for allocation anyway.  And in the 32-bit x86 case (if we ever do that) it would be quite serious.</p>\n</blockquote>",
        "id": 204052352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883632
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449566068\">PR Review</a>.</p>",
        "id": 204052526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594883780
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449577252\">PR Review</a>.</p>",
        "id": 204053258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594884533
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455566742\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Please can this be upgraded to a release assert, or at least somehow be checked even in release builds?  If for whatever reason <code>ty</code> of <code>I16</code> or <code>I8</code> ever gets here, we will silently generate wrong code and it could be hard to track down.</p>\n</blockquote>",
        "id": 204053259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594884533
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449667561\">PR Review</a>.</p>",
        "id": 204061279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594890962
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455644149\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also .. for \"Make sure to zero %rdx right before this instruction!\" please add a line explaining why this is necessary and what will (or might) happen if you don't.</p>\n</blockquote>",
        "id": 204061281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594890962
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449695847\">PR Review</a>.</p>",
        "id": 204064281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893206
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455666944\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>CallConv::Fast</code> and <code>CallConv::Cold</code> can also reach this I think.</p>\n</blockquote>",
        "id": 204064282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893206
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449701281\">PR Review</a>.</p>",
        "id": 204064883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893656
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455671477\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If you implement <code>Display</code> instead, you get <code>ToString</code> for free.</p>\n</blockquote>",
        "id": 204064884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893656
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449703480\">PR Review</a>.</p>",
        "id": 204065095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893833
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455673176\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It is already conditionally used as pinned register: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995/files#diff-d4cd987e797b464cfda540d1f41fcfb3R200-R210\">https://github.com/bytecodealliance/wasmtime/pull/1995/files#diff-d4cd987e797b464cfda540d1f41fcfb3R200-R210</a></p>\n</blockquote>",
        "id": 204065096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594893833
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449808507\">PR Review</a>.</p>",
        "id": 204077156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594903373
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455756253\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, <code>gen_move</code> is on the target-independent trait. Maybe we can change this at some point, if the aarch64 backend agrees with the x64 convention?</p>\n</blockquote>",
        "id": 204077158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594903373
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449821591\">PR Review</a>.</p>",
        "id": 204079000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904367
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455766275\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes! Recent PRs with <code>OperandSize</code> enum have inspired me... Added to the backlog!</p>\n</blockquote>",
        "id": 204079001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904367
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449822229\">PR Review</a>.</p>",
        "id": 204079123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904416
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455766771\">PR Review Comment</a>:</p>\n<blockquote>\n<p>+1 to what @bjorn3 said, its usage is opt-in, disabled by default.</p>\n</blockquote>",
        "id": 204079124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904416
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449823259\">PR Review</a>.</p>",
        "id": 204079283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904490
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455767583\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've mostly ported what the old backend did, and I'm happy to revisit it later when this has landed. Thanks for the comments!</p>\n</blockquote>",
        "id": 204079286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904490
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449829126\">PR Review</a>.</p>",
        "id": 204080127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904917
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455772030\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's a long story, but... yes, this does put R15 at the end of the allocatable list.</p>\n<p>The reason is the following: regalloc has the concept of overall allocatable registers. So if in certain modes (i.e. when the use_pinned_reg flag is true), we want to mark one register as allocatable or not, then it must be at the edge of the \"allocatable\" list, so at the end of its register class (otherwise its register index changes when the pinned reg is in use).</p>\n<p>To keep BT happy with the order of caller or callee-saved registers, I guess we could have a different register index for r15, according to whether it's pinned or not. I think it might cause more churn for other registers (namely, those which will be placed after r15). So maybe this justifies a completely different <code>RegUniverse</code> of its own? If that's ok, i'd like to defer this. We may need having different RegUniverse for respecting the win64 calling convention.</p>\n</blockquote>",
        "id": 204080128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594904917
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-449835658\">PR Review</a>.</p>",
        "id": 204081301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594905380
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r455776959\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>If that's ok, i'd like to defer this.</p>\n</blockquote>\n<p>Oh, definitely defer.  Let's get this landed and running first, then we can come back and optimise later.  (Sorry .. I should have made this clearer in the comment)</p>\n</blockquote>",
        "id": 204081302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594905381
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a> from <code>x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>I've implemented basic support for Baldrdash so as to be able to run the extensive Spidermonkey test suite, and then could get back to fix a few integer operators implemented before. Also implemented most of the integer opcodes required for wasm; I could start to run successfully a few large wasm integer-only programs with wasmtime too.</p>\n<p>I plan on enabling limited testing of wast files on CI soon, to catch future regressions in codegen.</p>\n<p>Sorry about the large PR!</p>\n</blockquote>",
        "id": 204082410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594905880
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a> from <code>x64</code> to <code>main</code>:</p>\n<blockquote>\n<p>I've implemented basic support for Baldrdash so as to be able to run the extensive Spidermonkey test suite, and then could get back to fix a few integer operators implemented before. Also implemented most of the integer opcodes required for wasm; I could start to run successfully a few large wasm integer-only programs with wasmtime too.</p>\n<p>I plan on enabling limited testing of wast files on CI soon, to catch future regressions in codegen.</p>\n<p>Sorry about the large PR!</p>\n</blockquote>",
        "id": 204099872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594913376
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995\">PR #1995</a>.</p>",
        "id": 204107288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916469
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#pullrequestreview-450470308\">PR Review</a>.</p>",
        "id": 204182038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594974529
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1995#discussion_r456298279\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Well, aarch64 has destinations on the left.  So it's never going to agree with x64 (the AT&amp;T conventions, at least.).</p>\n</blockquote>",
        "id": 204182039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594974529
    }
]