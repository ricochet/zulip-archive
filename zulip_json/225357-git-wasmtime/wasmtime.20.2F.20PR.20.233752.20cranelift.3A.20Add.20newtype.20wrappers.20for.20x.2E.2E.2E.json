[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a>.</p>",
        "id": 270270155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643743505
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a> from <code>newtypes-for-register-classes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This primary motivation of this large commit (apologies for its size!) is to<br>\nintroduce <code>Gpr</code> and <code>Xmm</code> newtypes over <code>Reg</code>. This should help catch<br>\ndifficult-to-diagnose register class mixup bugs in x64 lowerings.</p>\n<p>But having a newtype for <code>Gpr</code> and <code>Xmm</code> themselves isn't enough to catch all of<br>\nour operand-with-wrong-register-class bugs, because about 50% of operands on x64<br>\naren't just a register, but a register or memory address or even an<br>\nimmediate! So we have <code>{Gpr,Xmm}Mem[Imm]</code> newtypes as well.</p>\n<p>Unfortunately, <code>GprMem</code> et al can't be <code>enum</code>s and are therefore a little bit<br>\nnoisier to work with from ISLE. They need to maintain the invariant that their<br>\nregisters really are of the claimed register class, so they need to encapsulate<br>\nthe inner data. If they exposed the underlying <code>enum</code> variants, then anyone<br>\ncould just change register classes or construct a <code>GprMem</code> that holds an XMM<br>\nregister, defeating the whole point of these newtypes. So when working with<br>\nthese newtypes from ISLE, we rely on external constructors like <code>(gpr_to_gpr_mem\nmy_gpr)</code> instead of <code>(GprMem.Gpr my_gpr)</code>.</p>\n<p>A bit of extra lines of code are included to add support for register mapping<br>\nfor all of these newtypes as well. Ultimately this is all a bit wordier than I'd<br>\nhoped it would be when I first started authoring this commit, but I think it is<br>\nall worth it nonetheless!</p>\n<p>In the process of adding these newtypes, I didn't want to have to update both<br>\nthe ISLE <code>extern</code> type definition of <code>MInst</code> and the Rust definition, so I move<br>\nthe definition fully into ISLE, similar as aarch64.</p>\n<p>Finally, this process isn't complete. I've introduced the newtypes here, and<br>\nI've made most XMM-using instructions switch from <code>Reg</code> to <code>Xmm</code>, as well as<br>\nregister class-converting instructions, but I haven't moved all of the GPR-using<br>\ninstructions over to the newtypes yet. I figured this commit was big enough as<br>\nit was, and I can continue the adoption of these newtypes in follow up commits.</p>\n<p>Part of #3685.<br>\n</p>\n</blockquote>",
        "id": 270270156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643743505
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#pullrequestreview-871241162\">PR review</a>.</p>",
        "id": 270480562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643847508
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#pullrequestreview-871241162\">PR review</a>.</p>",
        "id": 270480563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643847508
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#discussion_r798114168\">PR review comment</a>:</p>\n<blockquote>\n<p>Would these constructors be clearer without the <code>_new</code> suffix, I wonder? I'm mostly thinking in terms of symmetry with e.g. instruction constructors and the other utility types -- we have <code>(value_regs ...)</code>, not <code>(value_regs_new ...)</code>. (Or maybe there's a name conflict from elsewhere I'm missing?)</p>\n</blockquote>",
        "id": 270480564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643847508
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#pullrequestreview-872306134\">PR review</a>.</p>",
        "id": 270602818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643915921
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#discussion_r798892844\">PR review comment</a>:</p>\n<blockquote>\n<p>I can do <code>reg_mem_to_xmm_mem</code> which is more similar to the other constructors. Thoughts?</p>\n</blockquote>",
        "id": 270602820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643915922
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#pullrequestreview-872311594\">PR review</a>.</p>",
        "id": 270603510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643916248
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752#discussion_r798896736\">PR review comment</a>:</p>\n<blockquote>\n<p>That seems reasonable to me! I guess as a general principle the <code>x_to_y</code> explicitness is good and is a sort of direct indication that we can register all such constructors as implicit conversions later.</p>\n</blockquote>",
        "id": 270603511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643916248
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a> from <code>newtypes-for-register-classes</code> to <code>main</code>.</p>",
        "id": 270604893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643916842
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a> from <code>newtypes-for-register-classes</code> to <code>main</code>.</p>",
        "id": 270606719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643917584
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a> from <code>newtypes-for-register-classes</code> to <code>main</code>.</p>",
        "id": 270613390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643920388
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a> from <code>newtypes-for-register-classes</code> to <code>main</code>.</p>",
        "id": 270625713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643926096
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3752\">PR #3752</a>.</p>",
        "id": 270631174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643929018
    }
]