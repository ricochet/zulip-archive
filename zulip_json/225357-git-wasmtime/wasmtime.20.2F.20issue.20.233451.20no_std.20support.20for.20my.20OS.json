[
    {
        "content": "<p>ethindp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>I'm working on a hobby operating system and want to develop my drivers in something other than native code. I'd really like to go for web assembly but there are no good web assembly runtimes for no_std, and the only one I know of -- Wasmi -- appears very confusing to use and to work with. This is (possibly another) use-case for no_std support. Can this be done right now or do I have to try to figure out wasmi? (I'm not aware of any other Wasm runtimes, but if there's one I just don't know about, well...).</p>\n</blockquote>",
        "id": 257469585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634178218
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943136181\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>Cranelift could get no_std support, but wasmtime can't as it depends on the OS for example for mapping memory with the right priveleges.</p>\n</blockquote>",
        "id": 257498878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634200350
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943223441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>Our docs <a href=\"https://docs.wasmtime.dev/stability-platform-support.html#what-about-no_std\">contain</a> a fairly long explanation of our current stance on <code>no_std</code>, and suggestions for alternative approaches. I wonder if the answer to the first question in that section might be of interest to you?</p>\n</blockquote>",
        "id": 257512024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634207051
    },
    {
        "content": "<p>ethindp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943477164\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>@bjorn3 They could easily just use a trait for host operations. Then they could define operations for when libstd is included and just use that, and when your in <code>no_std</code>, you have to write that code yourself.</p>\n<p>@tschneidereit I don't consider the majority of arguments against <code>no_std</code> on that page valid arguments. The <em>only</em> one that is a legitimate concern and that would be hard to do is CI integration. But, the rest, one by one, can be countered thusly:</p>\n<ol>\n<li>For platforms that don't have std, use a trait for host operations and require the program to implement functionality for mmap themselves, as I explained above. Same for anything else that wasmtime depends on.</li>\n<li>This one is just an explanation to why including <code>libstd</code> increases binary sizes.</li>\n<li>This \"cost\" isn't much, and I'll explain why below. The CI no_std build environment is a bit of a problem, as I acknowledged above, but it can be resolved.</li>\n<li>The idioms in no_std can be made a lot similar using a crate like no-std-compat. For the majority of things you use <code>std</code> for, just keep on using them. The only things you'll miss are things like stdio, filesystem access, threading, etc., but that isn't necessary to run web assembly and so you could easily just exclude that. Using a crate like <code>no-std-compat</code> lowers the supposed \"cost\" to new developers (which doesn't really exist, given that a lot of things you import from <code>std</code> come from <code>core</code> and <code>alloc</code> anyway, and it'd just be a change from <code>std</code> to either <code>core</code> or <code>alloc</code> depending on whether what your importing uses memory allocation or not).</li>\n<li>You now do have a use-case for <code>no_std</code> -- this issue (and probably many others that I haven't dug around for). But I doubt I am the first to ask for this to be implemented.</li>\n<li><code>no_std</code> will always be necessary. Unless <code>libstd</code> suddenly stops reexporting things from <code>core</code> and <code>alloc</code> and the three get fully merged into one and I get the ability to tell <code>libstd</code> what my kernel supports (which does not include networking, threading, FS APIs, processes, consoles, etc.), you will always need to be able to turn this off when either (1) building for a target that <em>does not</em> implement all the required functionality for <code>libstd</code> to work; (2) writing code for a new operating system or environment that is not yet supported by <code>libstd</code>; or (3) developing for an environment that supports everything <code>libstd</code> supports but does not have a C library of some kind available yet. There are other places where <code>libstd</code> is not a viable option (e.g. embedded systems with very small amounts of memory) but where executing something like Wasm may be nice for security purposes.</li>\n</ol>\n<p>I know that getting <code>no_std</code> support in might be challenging, and figuring out CI will be difficult since you'd need to have some boilerplate to bring up the system into a state where it is ready and capable of executing Wasm (that is: MMU is active, paging is enabled and configured, etc.). But it is a doable, and the boilerplate I'm talking about is the kind of boilerplate where you can pretty much write it once, perfect it and then forget about it and only touch it when you absolutely have to. It doesn't even have to be fast or the best boilerplate ever written; all it has to do is prepare the system for wasmtime. Then your off to the races.</p>\n<p>Thoughts about all of this? (This was a pretty long reply, sorry!)</p>\n</blockquote>",
        "id": 257556237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634225874
    },
    {
        "content": "<p>ethindp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943482672\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>Update: yes, the first answer is a bit useful, but as noted in the issue, it doesn't yet support JSON targets, and that's what I'm using.</p>\n</blockquote>",
        "id": 257557218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634226254
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943487235\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<blockquote>\n<p>For platforms that don't have std, use a trait for host operations and require the program to implement functionality for mmap themselves, as I explained above. Same for anything else that wasmtime depends on.</p>\n</blockquote>\n<p>This has a non-trivial cost. I would love fixing the no_std support of Cranelift as it doesn't depend on an OS at all and shouldn't do so no matter what. For Wasmtime it is too much tied to the OS, with everything from mmap, files, locks, stack unwinding, ... It also has a lot of dependencies that don't support no_std which you will have to convince to add no_std support too. For most of them using traits will likely not be accepted at all due to being bad for api usability on platforms that support std.</p>\n</blockquote>",
        "id": 257558019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634226583
    },
    {
        "content": "<p>ethindp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-943500984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>@bjorn3 Oh okay, I understand now. I'm just trying to find a high performance interpreter with a (reasonably) good API that supports <code>no_std</code> but I can't seem to find one at all. I've found some written in other languages, but porting those to Rust would get pretty messy IMO.</p>\n</blockquote>",
        "id": 257560803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634227580
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-944012285\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>@ethindp I'll echo what others have said about the effort involved in porting Wasmtime due to its OS-specific use of memory mapping (mainly) facilities and all of the dependencies it pulls in that are also <code>std</code>; but I will also note that there are more than just the two extremes of \"full industrial-strength VM runtime with JIT\" and \"simple interpreter\". More specifically I think there is room for a barebones-simple Wasm-MVP-only <em>runtime</em> that still uses <em>compiled</em> code (from Cranelift). I can imagine designing things from scratch to rely only on a pre-allocated chunk of linear memory, and avoiding a lot of the complexity that Wasmtime-like VMs have in order to support demand-paging, asynchrony, and post-MVP Wasm features. I personally at least would find that really interesting, and it might be appealing for more embedded scenarios that still need high performance.</p>\n<p>Maye a starting point for that could be to use the data structures that one of the \"super-simple\" interpreters has defined -- wasmi perhaps -- and then start to generate function bodies with Cranelift that use the same data structures.</p>\n<p>Anyway, just a thought; best of luck with your project!</p>\n</blockquote>",
        "id": 257647782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634275356
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-944012285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>@ethindp I'll echo what others have said about the effort involved in porting Wasmtime due to its OS-specific use of memory mapping (mainly) facilities and all of the dependencies it pulls in that are also <code>std</code>; but I will also note that there are more than just the two extremes of \"full industrial-strength VM runtime with JIT\" and \"simple interpreter\". More specifically I think there is room for a barebones-simple Wasm-MVP-only <em>runtime</em> that still uses <em>compiled</em> code (from Cranelift). I can imagine designing things from scratch to rely only on a pre-allocated chunk of linear memory, and avoiding a lot of the complexity that Wasmtime-like VMs have in order to support demand-paging, asynchrony, and post-MVP Wasm features. I personally at least would find that really interesting, and it might be appealing for more embedded scenarios that still need high performance.</p>\n<p>Maybe a starting point for that could be to use the data structures that one of the \"super-simple\" interpreters has defined -- wasmi perhaps -- and then start to generate function bodies with Cranelift that use the same data structures.</p>\n<p>Anyway, just a thought; best of luck with your project!</p>\n</blockquote>",
        "id": 257647820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634275407
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-2050526229\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>I realize it's been years since this was originally opened, but in case anyone cc'd on this issue is still interested I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8341\">https://github.com/bytecodealliance/wasmtime/issues/8341</a> with a proposal to add no_std support for wasmtime which would address this issue as-stated.</p>\n</blockquote>",
        "id": 432786011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712868980
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>I'm working on a hobby operating system and want to develop my drivers in something other than native code. I'd really like to go for web assembly but there are no good web assembly runtimes for no_std, and the only one I know of -- Wasmi -- appears very confusing to use and to work with. This is (possibly another) use-case for no_std support. Can this be done right now or do I have to try to figure out wasmi? (I'm not aware of any other Wasm runtimes, but if there's one I just don't know about, well...).</p>\n</blockquote>",
        "id": 437913864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715307138
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451#issuecomment-2103723396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3451\">issue #3451</a>:</p>\n<blockquote>\n<p>This is done now with documentation <a href=\"https://docs.wasmtime.dev/stability-platform-support.html#support-for-no_std\">here</a> to be released with Wasmtime 21, so closing.</p>\n</blockquote>",
        "id": 437913865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715307138
    }
]