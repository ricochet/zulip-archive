[
    {
        "content": "<p>swlynch99 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210\">issue #9210</a>:</p>\n<blockquote>\n<p><strong>TLDR:</strong> The generated code creates a span and enters it by calling <code>span.enter()</code>. This works fine for sync functions but for async functions it results in the span still being entered even if the inner function has yielded. The end result is that the trace span will be shown on other unrelated tokio tasks that happen to run on the same thread at the same time.</p>\n<p>Now, in more detail. If we have a <code>component::bindgen!</code> call like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"imports\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">package test:example@1.0.0;</span>\n\n<span class=\"s\">interface test {</span>\n<span class=\"s\">  my-func: func();</span>\n<span class=\"s\">}</span>\n\n<span class=\"s\">world imports {</span>\n<span class=\"s\">  import test;</span>\n<span class=\"s\">}</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"n\">tracing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">include_generated_code_from_file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Then the generated code in <code>add_to_linker_get_host</code> will look something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">span</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"s\">\"wit-bindgen import\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_enter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"call\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">host_getter</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">::</span><span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">field</span><span class=\"p\">::</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"s\">\"return\"</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Note that it holds the <code>_enter</code> guard across an await point. This is wrong, since the span remains entered even when the resulting future is suspended.</p>\n<p>The correct thing to do here is to use tracing's <a href=\"https://docs.rs/tracing/latest/tracing/trait.Instrument.html\"><code>Instrument</code></a> trait, which takes care of entering/exiting the span when the future is polled.<br>\n</p>\n</blockquote>",
        "id": 468300646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725661160
    },
    {
        "content": "<p>swlynch99 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210\">issue #9210</a>:</p>\n<blockquote>\n<p><strong>TLDR:</strong> The generated code creates a span and enters it by calling <code>span.enter()</code>. This works fine for sync functions but for async functions it results in the span still being entered even if the inner function has yielded. The end result is that the trace span will be shown on other unrelated tokio tasks that happen to run on the same thread at the same time.</p>\n<p>Now, in more detail. If we have a <code>component::bindgen!</code> call like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"imports\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">package test:example@1.0.0;</span>\n\n<span class=\"s\">interface test {</span>\n<span class=\"s\">  my-func: func();</span>\n<span class=\"s\">}</span>\n\n<span class=\"s\">world imports {</span>\n<span class=\"s\">  import test;</span>\n<span class=\"s\">}</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"n\">tracing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">include_generated_code_from_file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Then the generated code in <code>add_to_linker_get_host</code> will look something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">span</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"s\">\"wit-bindgen import\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_enter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"call\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">host_getter</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">::</span><span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">field</span><span class=\"p\">::</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"s\">\"return\"</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Note that it holds the <code>_enter</code> guard across an await point. This is wrong, since the span remains entered even when the resulting future is suspended.</p>\n<p>The correct thing to do here is to use tracing's <a href=\"https://docs.rs/tracing/latest/tracing/trait.Instrument.html\"><code>Instrument</code></a> trait which takes care of entering/exiting the span when the future is polled.<br>\n</p>\n</blockquote>",
        "id": 468300839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725661255
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210#issuecomment-2338602480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210\">issue #9210</a>:</p>\n<blockquote>\n<p>Thanks for the report. This is my bad, I didn't understand that aspect of how tracing spans interact with async. Would you like to submit a fix?</p>\n</blockquote>",
        "id": 468859299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725900561
    },
    {
        "content": "<p>swlynch99 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210#issuecomment-2339081109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210\">issue #9210</a>:</p>\n<blockquote>\n<p>I've submitted a fix over in #9217</p>\n</blockquote>",
        "id": 468915275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725915630
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9210\">issue #9210</a>:</p>\n<blockquote>\n<p><strong>TLDR:</strong> The generated code creates a span and enters it by calling <code>span.enter()</code>. This works fine for sync functions but for async functions it results in the span still being entered even if the inner function has yielded. The end result is that the trace span will be shown on other unrelated tokio tasks that happen to run on the same thread at the same time.</p>\n<p>Now, in more detail. If we have a <code>component::bindgen!</code> call like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"imports\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">package test:example@1.0.0;</span>\n\n<span class=\"s\">interface test {</span>\n<span class=\"s\">  my-func: func();</span>\n<span class=\"s\">}</span>\n\n<span class=\"s\">world imports {</span>\n<span class=\"s\">  import test;</span>\n<span class=\"s\">}</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"n\">tracing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">include_generated_code_from_file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Then the generated code in <code>add_to_linker_get_host</code> will look something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">Box</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">span</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"s\">\"wit-bindgen import\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"my-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_enter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">enter</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"call\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">host_getter</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">::</span><span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">event</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">Level</span><span class=\"p\">::</span><span class=\"n\">TRACE</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"p\">::</span><span class=\"n\">field</span><span class=\"p\">::</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"s\">\"return\"</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Note that it holds the <code>_enter</code> guard across an await point. This is wrong, since the span remains entered even when the resulting future is suspended.</p>\n<p>The correct thing to do here is to use tracing's <a href=\"https://docs.rs/tracing/latest/tracing/trait.Instrument.html\"><code>Instrument</code></a> trait which takes care of entering/exiting the span when the future is polled.<br>\n</p>\n</blockquote>",
        "id": 468945793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725928707
    }
]