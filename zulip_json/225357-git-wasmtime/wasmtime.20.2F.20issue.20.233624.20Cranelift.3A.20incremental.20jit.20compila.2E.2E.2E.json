[
    {
        "content": "<p>jakubDoka opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>I would like to use the jit module, to compile and run language macros. It would be nice if there way a way so serialize the module and just load it next time and overwrite updated functions.</p>\n<p>I was thinking about saving the functions as bytes and then reusing these if nothing changed as JitModule does not offer any methods for this purpose. (Is this a good idea?)</p>\n<p>The main reason for this is a fact that compiler needs to just build a module tree and skip unchanged branches instead of rejitting everything to achieve incremental build. (building the module tree requires parsing only first item inside a file which is considerably cheaper the building Ast for all items)<br>\n</p>\n</blockquote>",
        "id": 265426698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639844703
    },
    {
        "content": "<p>jakubDoka edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>I would like to use the jit module, to compile and run language macros. It would be nice if there a way so serialize the module and just load it next time and overwrite updated functions.</p>\n<p>I was thinking about saving the functions as bytes and then reusing these if nothing changed as JitModule does not offer any methods for this purpose. (Is this a good idea?)</p>\n<p>The main reason for this is a fact that compiler needs to just build a module tree and skip unchanged branches instead of rejitting everything to achieve incremental build. (building the module tree requires parsing only first item inside a file which is considerably cheaper the building Ast for all items)<br>\n</p>\n</blockquote>",
        "id": 265426722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639844745
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624#issuecomment-997234350\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>Overwriting functions is already supported. First do <code>jit_builder.hotswap(true)</code> when creating the jit module. And then <code>jit_module.prepare_for_function_redefine(func_id)</code> just before calling <code>.define_function()</code> again. Serializing and deserializing jit modules is not currently supported. I would like support for it too, but I am not quite sure about the right api and I haven't had time to implement it yet. For now maybe you could manually call <code>.compile_and_emit()</code> on the <code>Context</code> for each function and then serialize this in whatever format and when deserializing use <code>.define_function_bytes()</code> with the deserialized result of <code>.compile_and_emit()</code>? You will also have to serialize function declarations.</p>\n</blockquote>",
        "id": 265429692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639848315
    },
    {
        "content": "<p>jakubDoka <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624#issuecomment-997271230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>Than you for the quick response. </p>\n<p>If it would be welcomed, I could look into jit crate study it a little and make a pr that adds this feature. Of course I already see several problems related to changing a signature of functions. Just to properly handle this, its important to assert that all functions that call the changed function were also reloaded. That, or give responsibility to frontend, since compiler should not even compile the code if you did not change all invocations properly.</p>\n<p>So this can be either really easy, or super hard. You can probably tell how much of understanding I need to properly implement this.</p>\n<p>When it comes to API I dare say simple <code>serialize</code> and static <code>from_serialized</code> or <code>deserialize</code>, but then again, I have no idea is hidden inside jit source (mostly).</p>\n</blockquote>",
        "id": 265436710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639854610
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>I would like to use the jit module, to compile and run language macros. It would be nice if there a way so serialize the module and just load it next time and overwrite updated functions.</p>\n<p>I was thinking about saving the functions as bytes and then reusing these if nothing changed as JitModule does not offer any methods for this purpose. (Is this a good idea?)</p>\n<p>The main reason for this is a fact that compiler needs to just build a module tree and skip unchanged branches instead of rejitting everything to achieve incremental build. (building the module tree requires parsing only first item inside a file which is considerably cheaper the building Ast for all items)<br>\n</p>\n</blockquote>",
        "id": 269470028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643226194
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3624\">issue #3624</a>:</p>\n<blockquote>\n<p>I would like to use the jit module, to compile and run language macros. It would be nice if there a way so serialize the module and just load it next time and overwrite updated functions.</p>\n<p>I was thinking about saving the functions as bytes and then reusing these if nothing changed as JitModule does not offer any methods for this purpose. (Is this a good idea?)</p>\n<p>The main reason for this is a fact that compiler needs to just build a module tree and skip unchanged branches instead of rejitting everything to achieve incremental build. (building the module tree requires parsing only first item inside a file which is considerably cheaper the building Ast for all items)<br>\n</p>\n</blockquote>",
        "id": 269470029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643226194
    }
]