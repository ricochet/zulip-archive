[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a> from <code>alexcrichton:x64-refactor-float</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently the <code>XmmCmpRmR</code> instruction variant has a <code>dst</code> and a <code>src</code> field. The instruction doesn't actually write to <code>dst</code>, however, and the constructor of <code>xmm_cmp_rm_r</code> takes the <code>src</code> first followed by the <code>dst</code>. This is inconsistent with most other xmm-related instructions where the \"src1\" comes first and the \"src2\", which is a memory operand, comes second. This memory-operand-second pattern also matches the Intel manuals more closely.</p>\n<p>This commit refactors the <code>XmmCmpRmR</code> instruction variant with the following changes:</p>\n<ul>\n<li><code>dst</code> is renamed to <code>src1</code></li>\n<li><code>src</code> is renamed to <code>src2</code></li>\n<li>The <code>xmm_cmp_rm_r</code> helpers, and callers, swapped their arguments to take <code>Xmm</code> first and <code>XmmMem</code> second.</li>\n<li>The <code>x64_ptest</code> instruction followed suit as it was modelled after the same.</li>\n<li>Callers of <code>x64_ucomis</code> swapped their arguments to preserve the operand orders.</li>\n<li>The <code>Inst::xmm_cmp_rm_r</code> helper swapped operand order and additionally callers were updated.</li>\n<li>The VCode rendering of <code>XmmCmpRmR</code> swapped order of its operands, explaining changes in rendering of filetests (although machine code is not changing here).</li>\n</ul>\n<p>The changes were then additionally propagated to Winch as well. In Winch the <code>src</code>/<code>dst</code> naming was inherited so it was renamed to <code>src1</code> and <code>src2</code> which swapped operands as well. In the case of Winch there was additionally an accident in <code>float_cmp_op</code> where values were popped in reverse order. This swapping-of-swapping all worked out prior, but to get all the names to align correctly I've swapped this to be more consistent. Sorry there's a lot of swaps-of-swaps here but the basic idea is that the low-level instruction constructor swapped arguments so to preserve the same (correct) output today something else needed to be swapped. In Winch's case it wasn't the immediate caller of the instruction constructor since that method looked correct, but it was instead a higher-level <code>float_cmp_op</code> which then called a helper which then called the low-level constructor which had operands swapped.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 433068257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713032967
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>.</p>",
        "id": 433068258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713032967
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>.</p>",
        "id": 433068259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713032967
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#issuecomment-2053728612\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 433069367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713033880
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#issuecomment-2053732326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>:</p>\n<blockquote>\n<p>A few quick thoughts (and thorough review later, work trip this week for some added latency but I should be able to review):</p>\n<ul>\n<li>\n<p>In general the x64 backend matches AT&amp;T argument order and syntax, not Intel order, so \"matching Intel manual more closely\" is moving in the wrong direction unfortunately (at least with respect to current design!). In #6461 @elliottt tried to transition everything to Intel syntax but it turned out to be a too-large undertaking with unexpected interactions...</p>\n</li>\n<li>\n<p>Given that, I am in general somewhat suspicious of changes like this because the current order is baked in <em>everywhere</em> and it will possibly leave a wake of subtle bugs to be discovered later.</p>\n<p>To be clear I am not saying this PR is not careful and carefully checked, just that the risk is high! And the \"double swaps\" you mention later only add to my caution...</p>\n<p>This doesn't mean we can't do it; it does mean that we need clear reasons to do it though, more than just \"matches the manuals\", something more along the lines of \"would have prevented these bugs\" or \"makes implementing future work X significantly easier\" to counterbalance the \"change an underlying assumption baked in everywhere\" cost. It's totally possible we could pass that threshold at some point. Could you say more about the context/reasoning/path that led to this?</p>\n</li>\n<li>\n<p>In any case, we should match the order and idioms of the integer comparison instructions; CmpRmiR is also src/dst; is there a plan to refactor that as well to match?</p>\n</li>\n</ul>\n</blockquote>",
        "id": 433070364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713034715
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#issuecomment-2057095781\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>:</p>\n<blockquote>\n<p>Ah ok, given what you're saying I should nix that bit of the motivation. Despite that I still think that this PR should land. Currently it appears that the backend does not consistently use either ordering operands (intel or att). Almost all simd-related instructions are <code>Xmm XmmMem</code> which is the intel ordering, and I see you're right that <code>x64_cmp</code> is <code>GprMemImm Gpr</code>. Personally I find that confusing because the flags are set comparing <code>src2</code> to <code>src1</code>, not the other way around, so understanding as-is is not easy. I did not have plans to change <code>CmpRmiR</code> but I can try to find time after this to make it more consistent.</p>\n<p>For links to why I think the current state of affairs is confusing and shouldn't be used as rationale to keep things the way they are:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/dac3bdb078e2e88e0c9275840d1a1d79aadfea8c/cranelift/codegen/src/isa/x64/inst.isle#L4763\">This comment</a> explicitly mentions the swapped order is confusing.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/dac3bdb078e2e88e0c9275840d1a1d79aadfea8c/cranelift/codegen/src/isa/x64/inst.isle#L4773\">This rule</a> swaps the conditional but doesn't swap the arguments (since the instruction swaps the arguments)</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/dac3bdb078e2e88e0c9275840d1a1d79aadfea8c/cranelift/codegen/src/isa/x64/inst.isle#L4829-L4837\">This rules</a> swap the arguments but don't explain why</li>\n</ul>\n<p>I also wouldn't say that the current approach today is exactly bullet-proof. For example the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/dac3bdb078e2e88e0c9275840d1a1d79aadfea8c/winch/codegen/src/isa/x64/asm.rs#L998-L1012\">existing Winch method</a>, which inherits the naming from the Cranelift instruction is actually comparing <code>dst &lt;&gt; src</code> which ended up hiding the issue in codegen where the operands to the instruction were accidentally swapped.</p>\n<p>I've tried to audit all usages of <code>x64_ucomis</code> (there aren't many), and it's definitely something I'm trying to cover as I realize these sorts of swap issues can be subtle.</p>\n</blockquote>",
        "id": 433316977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713193812
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#pullrequestreview-2004978035\">PR review</a>:</p>\n<blockquote>\n<p>OK, I agree a refactor seems reasonable here. Thanks for going through the history and finding examples of this biting us / being confusing!</p>\n<p>A note below on the pretty-printing -- that has slightly different tradeoffs IMHO (open to discussion).</p>\n<p>Finally: would you mind adding a sentence or two somewhere, maybe at the top of <code>inst.isle</code>, noting that we mostly follow AT&amp;T arg order in the core instruction set, Intel order in SIMD Instructions, and intend to harmonize this at some point?</p>\n</blockquote>",
        "id": 433646025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713327325
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#pullrequestreview-2004978035\">PR review</a>:</p>\n<blockquote>\n<p>OK, I agree a refactor seems reasonable here. Thanks for going through the history and finding examples of this biting us / being confusing!</p>\n<p>A note below on the pretty-printing -- that has slightly different tradeoffs IMHO (open to discussion).</p>\n<p>Finally: would you mind adding a sentence or two somewhere, maybe at the top of <code>inst.isle</code>, noting that we mostly follow AT&amp;T arg order in the core instruction set, Intel order in SIMD Instructions, and intend to harmonize this at some point?</p>\n</blockquote>",
        "id": 433646026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713327325
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#discussion_r1568190714\">PR review comment</a>:</p>\n<blockquote>\n<p>The changes to the disassembly order are a little confusing to me here since we're still retaining AT&amp;T-style percent-register names (and pretty-printing this alongside other AT&amp;T-syntax insts). At one point the text was even assemblable with GNU as (though that's almost certainly not the case anymore due to pseudoinsts!).</p>\n<p>So even though we're swapping the args in the Rust enum and the ISLE-level helper, I think we should probably keep unchanged pretty-printing output here?</p>\n</blockquote>",
        "id": 433646027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713327325
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#discussion_r1568189002\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add to the comment above a note about arg order here, e.g. \"compares with <code>src1</code> as LHS and <code>src2</code> as RHS, so that e.g. a less-than comparison tests <code>src1 &lt; src2</code>.\"</p>\n</blockquote>",
        "id": 433646028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713327325
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#pullrequestreview-2010242295\">PR review</a>.</p>",
        "id": 434259965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713486927
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#discussion_r1571557737\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure yeah, I'll note though that in my opinion there's not a ton of consistency right now. Most instructions are printed as a blend of att/intel syntax:</p>\n<ul>\n<li>Operands are left-to-right and ordered first. The left-to-right ness is Intel and the ordered first is att.</li>\n<li>Results are last, which is att-style</li>\n</ul>\n</blockquote>",
        "id": 434259966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713486927
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>.</p>",
        "id": 434260016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713486962
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#issuecomment-2065545913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>:</p>\n<blockquote>\n<blockquote>\n<p>would you mind adding a sentence or two somewhere, maybe at the top of inst.isle, noting that we mostly follow AT&amp;T arg order in the core instruction set, Intel order in SIMD Instructions, and intend to harmonize this at some point?</p>\n</blockquote>\n<p>After reviewing the instructions I've decided to omit this. By my read it's actually only comparison-related instructions that suffer from this. Everything we have is left-to-right argument order to the <code>x64_*</code> instruction helpers except <code>x64_{test,cmp,cmp_imm}</code> instructions. Given that I don't think a comment's going to do much good since it's probably not going to be read much anyway and most new instructions are going to be copied from existing instructions. I hope to have a follow-up PR to handle the comparison-related instructions.</p>\n<p>I also learned that the comparison-related instructions are also confusing because the instruction helpers name the operands <code>src1</code> and <code>src2</code> but the fields in the instruction are <code>dst</code> and <code>src</code>.</p>\n</blockquote>",
        "id": 434260468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713487207
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362#issuecomment-2065590927\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8408\">https://github.com/bytecodealliance/wasmtime/pull/8408</a> for the general-purpose version of this PR, so I'm going to go ahead and flag this for merge given the approval.</p>\n</blockquote>",
        "id": 434265294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713490625
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8362\">PR #8362</a>.</p>",
        "id": 434268507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713492924
    }
]