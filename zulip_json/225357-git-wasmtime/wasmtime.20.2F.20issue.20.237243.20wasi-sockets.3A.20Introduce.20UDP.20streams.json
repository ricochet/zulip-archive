[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1764850031\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>Thanks for this! I've got a few comments on some API design decisions as well as their implications on the implementation:</p>\n<ul>\n<li>\n<p>Primarily I think it would be best to avoid the usage of <code>Mutex&lt;T&gt;</code> in the implementation. I feel like it's best to reflect the concurrency of the underlying OS which is that mutexes aren't required and concurrent calls to various bits and pieces are ok. I realize that mutexes aren't held during blocking I/O operations as a part of this PR, but that effectively means that the lock is overhead and I'd prefer to do away with it. I tested this out locally and the main issue that I ran into was that the inbound/outbound streams need access to the <code>remote_address()</code> of the state of the socket. This is problematic because, theoretically, a <code>start_connect</code> can race with a <code>send</code> or <code>receive</code> call, meaning that a <code>Mutex</code> is basically required to arbitrate that race (or something atomic like that). Could this perhaps be altered at the API level where an inbound/outbound stream is returned from <code>finish-connect</code> in addition to <code>finish-bind</code>? That way the streams from <code>bind</code> are never connected and the streams from <code>connect</code> are always connected. That may have weird implications if all the streams are used, though, so I'm not 100% sure.</p>\n</li>\n<li>\n<p>Bikeshed-wise the name <code>inbound-*</code> and <code>outbound-*</code> are inconsistent with <code>wasi:io/streams</code> usage of <code>input-*</code> and <code>output-*</code>. Is it perhaps worth it to use the same terminology?</p>\n</li>\n<li>\n<p>Bikeshed-wise the <code>oubound-datagram-stream</code> type is similar to <code>output-stream</code> but has a different mechanism for receiving data. The <code>output-stream</code> type for example has a <code>check-write</code> method which returns how much can be written and only then can <code>write</code> be called. Additionally <code>write</code> traps if too much is given to it. The main rationale for this design decision is that it avoids the need for callees to receive a possibly unbounded amount of data forcibly within their module (since calling <code>send</code> will copy over all the data into the second module if there is one). This may best be solved with a <code>check-write</code> lookalike for <code>outbound-datagram-stream</code> as well perhaps? </p>\n</li>\n</ul>\n</blockquote>",
        "id": 396938447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697473691
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1764990878\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think it would be best to avoid the usage of Mutex&lt;T&gt; in the implementation.</p>\n</blockquote>\n<p>I agree, yet I couldn't figure out how to make it work.<br>\nMy initial version had <code>bind</code> and <code>connect</code> both return streams. (Also I allowed connect to be called multiple times, but I didn't want to pollute this PR too much).<br>\nIn that setup, calling <code>connect</code> has to invalidate the previously returned streams somehow. At which point I ended up at Mutex again. Allowing the previous streams to remain somehow usable might be easier to implement, but is arguably a worse API design.</p>\n<hr>\n<blockquote>\n<p>Bikeshed-wise the name inbound-* and outbound-* are inconsistent with wasi:io/streams usage of input-* and output-*. Is it perhaps worth it to use the same terminology?</p>\n</blockquote>\n<p>I (tried to) use the wasi-http naming scheme, as they feel more natural to the domain at hand (networking) as opposed to input&amp;output.<br>\nSidenote, I just noticed that wasi-http actually uses slightly different terminology (incoming&amp;outgoing) <span aria-label=\"no mouth\" class=\"emoji emoji-1f636\" role=\"img\" title=\"no mouth\">:no_mouth:</span> </p>\n<p>For the stream types, I'm fine with either naming scheme. They're temporary anyway.<br>\nFor the datagram types themselves I do prefer to keep calling them incoming&amp;outgoing-datagram rather than input&amp;output-datagram.</p>\n<hr>\n<blockquote>\n<p>The output-stream type for example has a check-write method which returns how much can be written and only then can write be called</p>\n</blockquote>\n<p>Good point. I'll look into it.</p>\n<blockquote>\n<p>The main rationale for this design decision is that it avoids the need for callees to receive a possibly unbounded amount of data forcibly within their module</p>\n</blockquote>\n<p>Even with a <code>check-write</code> method on <code>outbound-datagram-stream</code> that can still happen, right. I assume <code>check-write</code> will return the amount of datagrams that can be sent. But each datagram can still contain an unbounded number of bytes in the <code>data</code> field.</p>\n</blockquote>",
        "id": 396951333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697478948
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1765006653\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>One way to get invalidation working without <code>Mutex</code> is to have a generational counter stored in each incoming/outgoing stream which is compared to the \"current generation\", an atomic counter, stored within the <code>Arc</code>. That way invalidation would be \"increment the generation\" and that may work out?</p>\n<p>For naming ok sounds like we're already a bit inconsistent, so I think it's ok to keep the names here <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>For <code>check-write</code> you're correct that you can always still pass in more data, but implementations can trap when this happens vs being expected to work correctly. I also think that for datagrams the number returned from check-write should probably be \"size of all datagrams summed up\" since you're right that the size of an individual datagram can change. Unless we can place a hard cap on the size of the datagram though in which case implementations could trap if any individual datagram is too large.</p>\n</blockquote>",
        "id": 396952918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697479550
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1765011378\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>Potentially answering my own question:</p>\n<blockquote>\n<p>calling connect has to invalidate the previously returned streams somehow</p>\n</blockquote>\n<p>Rather than performing validation in the *-stream code, maybe we can require the consumer to have dropped all prior child streams before calling <code>connect</code> (again) and trap otherwise. That way it should be impossible to have multiple competing streams active at the same time. </p>\n</blockquote>",
        "id": 396953109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697479625
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1765020991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>Ah I think we raced there a bit, but I like your idea more of requiring the streams are dropped than my idea of a generation counter</p>\n</blockquote>",
        "id": 396953366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697479754
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1775977827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>This is ready for review again.</p>\n<p>I have:</p>\n<ul>\n<li>Updated the API to disallow multiple pairs of active streams.</li>\n<li>Updated the API to mostly match wasi-io's <code>input-stream</code> &amp; <code>output-stream</code>.</li>\n<li>Removed the mutex</li>\n<li>Renamed the resources to align with wasi-http.</li>\n</ul>\n</blockquote>",
        "id": 398151895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698093299
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243#issuecomment-1777946991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7243\">issue #7243</a>:</p>\n<blockquote>\n<p>Alright, looks like the MacOS issue is fixed now</p>\n</blockquote>",
        "id": 398352650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698177648
    }
]