[
    {
        "content": "<p>tiborvass opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225\">Issue #1225</a>:</p>\n<blockquote>\n<p>Out of curiosity I was wondering why the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/eb183d7ab36b9345e20e1c5be9e02295f69da628/crates/lightbeam/src/microwasm.rs#L478\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/eb183d7ab36b9345e20e1c5be9e02295f69da628/crates/lightbeam/src/microwasm.rs#L478\">BrIf instruction</a>  has an else_ target when the it could simply be moving on to the next instruction.</p>\n</blockquote>",
        "id": 189677713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583317677
    },
    {
        "content": "<p>Vurich <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225#issuecomment-594544274\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225#issuecomment-594544274\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225\">Issue #1225</a>:</p>\n<blockquote>\n<p>Great question! So basically, it's a way to make dealing with control flow easier. So basically in Wasm there are 2 kinds of intra-function control flow - conditional (you might jump or you might not) and unconditional (you always jump). However, since these are both control flow, all the same conditions apply. If you had a <code>br_table</code> with 1 target and 1 default, that's exactly the same as a <code>br_if</code> except that it jumps unconditionally, for example. So we make all control flow unconditional and we model conditional control flow by creating a new block directly after the current one and then emitting an unconditional jump where the \"then\" is the Wasm <code>br_if</code>'s target, and the \"else\" is that newly-created block. By unconditional I here mean that we _must_ jump, but _where_ we jump is defined at runtime. Doing it this way means that we don't have any special-cases, we handle both unconditional and conditional control flow the same, which has a few added benefits. For example, unconditional control flow where one of the targets is the location directly after the jump (for example, a <code>br</code> or <code>br_table</code> followed immediately by an <code>end</code>) can be compiled to \"fall through\" just as <code>br_if</code> is, which produces better code while only having a single code-path.</p>\n<p>Hope that helps, I'm actually writing up some documents describing some of the design decisions, constraints, and proposals for Lightbeam over at <a href=\"https://github.com/paritytech/lightbeam-stammtisch\" target=\"_blank\" title=\"https://github.com/paritytech/lightbeam-stammtisch\">https://github.com/paritytech/lightbeam-stammtisch</a>, but it's very unfinished and doesn't have a great deal of information on Microwasm itself right now.</p>\n</blockquote>",
        "id": 189693417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583330938
    },
    {
        "content": "<p>Vurich edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225#issuecomment-594544274\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225#issuecomment-594544274\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225\">Issue #1225</a>:</p>\n<blockquote>\n<p>Great question! So basically, it's a way to make dealing with control flow easier. So basically in Wasm there are 2 kinds of intra-function control flow - conditional (you might jump or you might not) and unconditional (you always jump). However, since these are both control flow, all the same conditions apply. If you had a <code>br_table</code> with 1 target and 1 default, that's exactly the same as a <code>br_if</code> except that it jumps unconditionally, for example. So we make all control flow unconditional and we model conditional control flow by creating a new block directly after the current one and then emitting an unconditional jump where the \"then\" is the Wasm <code>br_if</code>'s target, and the \"else\" is that newly-created block. By unconditional I here mean that we _must_ jump, but _where_ we jump is defined at runtime. Doing it this way means that we don't have any special-cases, we handle both unconditional and conditional control flow the same, which has a few added benefits. For example, unconditional control flow where one of the targets is the location directly after the jump (for example, a <code>br</code> or <code>br_table</code> followed immediately by an <code>end</code>) can be compiled to \"fall through\" just as <code>br_if</code> is, which produces better code while only having a single code-path.</p>\n<p>Hope that helps, I'm actually writing up some documents describing some of the design decisions, constraints, and proposals for Lightbeam over at <a href=\"https://github.com/paritytech/lightbeam-stammtisch\" target=\"_blank\" title=\"https://github.com/paritytech/lightbeam-stammtisch\">https://github.com/paritytech/lightbeam-stammtisch</a>, but it's very unfinished and doesn't have a great deal of information on Microwasm itself right now.</p>\n<p>Since this is a question and not an issue, I'm going to close it, but if you have further questions about Lightbeam's design I highly recommend that you post an issue over at <code>lightbeam-stammtisch</code> since it will help me learn what I haven't explained properly, or other holes that need to be filled.</p>\n</blockquote>",
        "id": 189693598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583331009
    },
    {
        "content": "<p>Vurich closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1225\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1225\">Issue #1225</a>:</p>\n<blockquote>\n<p>Out of curiosity I was wondering why the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/eb183d7ab36b9345e20e1c5be9e02295f69da628/crates/lightbeam/src/microwasm.rs#L478\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/eb183d7ab36b9345e20e1c5be9e02295f69da628/crates/lightbeam/src/microwasm.rs#L478\">BrIf instruction</a>  has an else_ target when the it could simply be moving on to the next instruction.</p>\n</blockquote>",
        "id": 189693767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583331105
    }
]