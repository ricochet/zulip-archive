[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-623742478\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-623742478\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 196247969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588631519
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-623997375\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-623997375\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<p>Nice, and looks useful.  This is definitely something we should have.  There are a couple of areas of concern tho:</p>\n<p>Please add a top level description of perhaps a paragraph, of roughly how the transformation works:</p>\n<ul>\n<li>\n<p>what the three passes do</p>\n</li>\n<li>\n<p>what the running state is (including the relationship between <code>remove</code>, <code>remove_list</code> and <code>insert</code>)</p>\n</li>\n<li>\n<p>what the big-O costs are</p>\n</li>\n</ul>\n<p>It wasn't obvious to me without some code reading, that there are three separate passes: one to collect up all constants, one to park them at their use points, and one to delete the sourcing instructions.  As a consequence I spent some minutes trying to figure out whether the effects of the module were dependent on the order in which the blocks are visited.  Which isn't the case, but that took some reading/inferring.</p>\n<p>Another area of not exactly concern, but interest, is how this interacts with my constant-phi-removal pass.  I can't guess; we'll have to try it out.</p>\n<p>There's also the issue that this might be a bit indiscriminate.  It would be trivial to not inline \"expensive\" constants (for whatever definition of \"expensive\") simply by not putting them into <code>insert</code>.  I don't think we want to do that right now, but you add a 1-liner comment to that effect, to make it easy for anyone in future who wants to try that?</p>\n</blockquote>",
        "id": 196294758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588677806
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624043255\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624043255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<blockquote>\n<p>and one to delete the sourcing instructions</p>\n</blockquote>\n<p>The MachInst backends just skip lowering of side-effect free instructions without any use of their result, right?</p>\n</blockquote>",
        "id": 196304423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588683955
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624056205\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624056205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<p>@cfallin I see the following (from <code>joey_big.clif</code>):<br>\nBefore:</p>\n<div class=\"codehilite\"><pre><span></span><code>block31:\n     jump block22(v236, v3, v3, v3, v3, v3, v3, v3,\n                  /* circa 290 more params, most of which are v3,\n                     which is &quot;iconst.i32 0&quot; */)\n</code></pre></div>\n\n\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><code>block31:\n     v53727 = iconst.i32 2\n     v53728 = iconst.i32 0\n     v53729 = iconst.i32 0\n     v53730 = iconst.i32 0\n     v53731 = iconst.i32 0\n     (290 more such lines)\n     jump block22(v53727, v53728, v53729, v53730, v53731, v53732, v53733, v53734, ..)\n</code></pre></div>\n\n\n<p>The effect is to generate 290+ moves of zero into a new virtual reg (I checked).  We then jump to the phi translation, where they are all copied into block22's argument vregs.  The post-allocation effect is naturally enough a tidal wave of spills in <code>block31</code> followed by a similar number of reloads and then re-spills in the phi translation.</p>\n<p>Would it be possible to ensure that the same constant is emitted only once per insn?  I think that would remove two out of the three tidal waves here.  Even special-casing zero would probably help; I suspect that the upstream LLVM (that produces the wasm) does SRA on a bunch of structs, and then is obliged to pass around <em>some</em> value even for initially uninitialised struct fields, because the wasm semantics require everything to be initialised.  And so it chooses zero.</p>\n<p>Since arbitrary de-duping is O(N^2), we could possibly get most of the win just by tracking the last (eg) 10 values emitted for the current insn, and emit a new <code>iconst</code> if it's not in those 10.</p>\n</blockquote>",
        "id": 196307509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588685420
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624057464\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624057464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<p>Let me just clarify: this transformation is clearly good.  I'm just saying, peering at the output and comparing it with the untransformed version, that it could be even more betterer without much effort.</p>\n</blockquote>",
        "id": 196307789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588685559
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624070859\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-624070859\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<p>I also tried to assess how this transformation interacts with constant-phi removal.  Here are some numbers.  Bear in mind these are static counts.  What I take from it is that the two transformations partly but not entirely overlap.  And the best sequence is: constant-phi removal first, then const sinking.</p>\n<div class=\"codehilite\"><pre><span></span><code>joey_small.clif\nnone        out: insns: 1996 total, 44 spills, 111 reloads, 20 nopzs\nphi only    out: insns: 1776 total, 6 spills, 77 reloads, 0 nopzs\nsink only   out: insns: 1881 total, 0 spills, 0 reloads, 0 nopzs\nphi,sink    out: insns: 1733 total, 0 spills, 0 reloads, 0 nopzs\nsink,phi    out: insns: 1733 total, 0 spills, 0 reloads, 0 nopzs\n\njoey_medium.clif\nnone        out: insns: 7061 total, 211 spills, 923 reloads, 302 nopzs\nphi only    out: insns: 5390 total, 66 spills, 439 reloads, 49 nopzs\nsink only   out: insns: 6911 total, 157 spills, 566 reloads, 214 nopzs\nphi,sink    out: insns: 5336 total, 57 spills, 133 reloads, 39 nopzs\nsink,phi    out: insns: 5336 total, 57 spills, 133 reloads, 39 nopzs\n\njoey_big.clif\nnone        out: insns: 126895 total, 13158 spills, 15417 reloads, 72954 nopzs\nphi only    out: insns: 111105 total, 10067 spills, 12242 reloads, 67247 nopzs\nsink only   out: insns: 124471 total, 12009 spills, 10458 reloads, 77428 nopzs\nphi,sink    out: insns: 107553 total, 8364 spills, 8940 reloads, 70251 nopzs\nsink,phi    out: insns: 118704 total, 10579 spills, 9029 reloads, 76691 nopzs\n</code></pre></div>\n\n\n</blockquote>",
        "id": 196310539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588686970
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656#issuecomment-630886171\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1656\">Issue #1656</a>:</p>\n<blockquote>\n<p>Closing this as the problem is solved now in a better way by #1718.</p>\n</blockquote>",
        "id": 198080822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589901131
    }
]