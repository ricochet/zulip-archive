[
    {
        "content": "<p>orangeC23 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6713\">issue #6713</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The rust file is :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">fd</span>::<span class=\"p\">{</span><span class=\"n\">AsRawFd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FromRawFd</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// let file = File::open(\"Data/hello.txt\").expect(\"Can not open.\");</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"Data/hello.txt\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open file\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">as_raw_fd</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"File descriptor {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span>:<span class=\"nc\">wasi</span>::<span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span>:<span class=\"nc\">wasi</span>::<span class=\"n\">Fdflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">FDFLAGS_SYNC</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Set:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">fd_fdstat_set_flags</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Get:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">fd_fdstat_get</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>Use <code>cargo build --target wasm32-wasi</code> to compile the rust file into WASM binaries allocate.wasm.</li>\n<li>execute command <code>wasmer run --dir=Data test.wasm</code><br>\nwasmer successfully execute the WASM binaries and print:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"n\">Set</span>:<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Get</span>:<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Fdstat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fs_filetype</span>: <span class=\"nc\">Filetype</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"REGULAR_FILE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"The file descriptor or file refers to a regular file inode.\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">fs_flags</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_base</span>: <span class=\"mi\">536870911</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_inheriting</span>: <span class=\"mi\">262651580</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>execute command <code>wasmtime run --dir=Data test.wasm</code><br>\nwasmtime fails and print:</li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"n\">Set</span>:<span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Errno</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"INVAL\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"Invalid argument.\"</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">Get</span>:<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Fdstat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fs_filetype</span>: <span class=\"nc\">Filetype</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"REGULAR_FILE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"The file descriptor or file refers to a regular file inode.\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">fs_flags</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_base</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_inheriting</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 374181566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689065106
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6713#issuecomment-1630774610\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6713\">issue #6713</a>:</p>\n<blockquote>\n<p>Thanks for the report, but this <a href=\"https://github.com/bytecodealliance/wasmtime/blob/731d9f1a513062befc4f75ecc9c7f41508eabb20/crates/wasi-common/cap-std-sync/src/file.rs#L54-L65\">is expected</a>. Newer <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/ef9fc87c07323a6827632edeb6a7388b31266c8e/wit/types.wit#L392-L399\">versions of this function</a> specify that the function can only set the nonblocking flag. I believe the reason for this is that it's not possible to implement this function for all flags on all platforms, which is why more recent versions of WASI specify that only one flag is supported.</p>\n</blockquote>",
        "id": 374255832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689079990
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6713\">issue #6713</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The rust file is :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">fd</span>::<span class=\"p\">{</span><span class=\"n\">AsRawFd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FromRawFd</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// let file = File::open(\"Data/hello.txt\").expect(\"Can not open.\");</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">OpenOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"Data/hello.txt\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to open file\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">as_raw_fd</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"File descriptor {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span>:<span class=\"nc\">wasi</span>::<span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span>:<span class=\"nc\">wasi</span>::<span class=\"n\">Fdflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">FDFLAGS_SYNC</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Set:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">fd_fdstat_set_flags</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Get:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">fd_fdstat_get</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>Use <code>cargo build --target wasm32-wasi</code> to compile the rust file into WASM binaries allocate.wasm.</li>\n<li>execute command <code>wasmer run --dir=Data test.wasm</code><br>\nwasmer successfully execute the WASM binaries and print:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"n\">Set</span>:<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"n\">Get</span>:<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Fdstat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fs_filetype</span>: <span class=\"nc\">Filetype</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"REGULAR_FILE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"The file descriptor or file refers to a regular file inode.\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">fs_flags</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_base</span>: <span class=\"mi\">536870911</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_inheriting</span>: <span class=\"mi\">262651580</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>execute command <code>wasmtime run --dir=Data test.wasm</code><br>\nwasmtime fails and print:</li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">descriptor</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"n\">Set</span>:<span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Errno</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"INVAL\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"Invalid argument.\"</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"n\">Get</span>:<span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Fdstat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fs_filetype</span>: <span class=\"nc\">Filetype</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"REGULAR_FILE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"The file descriptor or file refers to a regular file inode.\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">fs_flags</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_base</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fs_rights_inheriting</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 374255836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689079991
    }
]