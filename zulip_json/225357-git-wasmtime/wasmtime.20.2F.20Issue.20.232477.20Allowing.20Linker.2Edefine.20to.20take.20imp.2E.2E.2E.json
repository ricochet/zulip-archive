[
    {
        "content": "<p>bkolobara opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Currently the <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Linker.html#method.define\">Linker.define</a> function takes an item that implements <code>Into&lt;Extern&gt;</code> and <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/enum.Extern.html\"><code>Extern</code></a> takes a <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Memory.html\">Memory</a> struct.<br>\nI would like to define a structure that implements <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/trait.LinearMemory.html\"><code>LinearMemory</code></a> and pass it to the linker. Would this be possible?</p>\n</blockquote>",
        "id": 218856215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607099419
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-738941804\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Hi @bkolobara!  Currently the <code>LinearMemory</code> trait doesn't provide enough information to properly represent a WebAssembly linear memory for the importing; it's primarily missing the memory's \"type\" (i.e. <code>MemoryType</code>).</p>\n<p>The <code>LinearMemory</code> trait is only intended to be used from the <code>MemoryCreator</code> trait and, when configured with <code>Config::with_host_memory</code>, that's used whenever creating a linear memory, either from instantiating a module that defines one or when you create a <code>Memory</code> in the host.</p>\n<p>It would be possible to implement a <code>Memory::new_with_creator</code> (or similar) method that you could use to pass a <code>MemoryCreator</code> to use just for that specific <code>Memory</code>.</p>\n<p>Before implementing that, though, does <code>Config::with_host_memory</code> not suit your needs?  Do you need control over the way memory is allocated for a specific <code>Memory</code> and are okay with Wasmtime handling the allocation for any other linear memories?</p>\n</blockquote>",
        "id": 218872096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607106140
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-738941804\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Hi @bkolobara!  Currently the <code>LinearMemory</code> trait doesn't provide enough information to properly represent a WebAssembly linear memory for importing; it's primarily missing the memory's \"type\" (i.e. <code>MemoryType</code>).</p>\n<p>The <code>LinearMemory</code> trait is only intended to be used from the <code>MemoryCreator</code> trait and, when configured with <code>Config::with_host_memory</code>, that's used whenever creating a linear memory, either from instantiating a module that defines one or when you create a <code>Memory</code> in the host.</p>\n<p>It would be possible to implement a <code>Memory::new_with_creator</code> (or similar) method that you could use to pass a <code>MemoryCreator</code> to use just for that specific <code>Memory</code>.</p>\n<p>Before implementing that, though, does <code>Config::with_host_memory</code> not suit your needs?  Do you need control over the way memory is allocated for a specific <code>Memory</code> and are okay with Wasmtime handling the allocation for any other linear memories?</p>\n</blockquote>",
        "id": 218872126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607106154
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-738983305\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Thanks for the explanation. Maybe I should provided some more context, I wanted to create a memory that I could share between threads as <code>Memory</code> is not <code>Send</code> or <code>Sync</code>. I assume, this is something you will support in the future, but I was looking for a short term solution for testing.</p>\n</blockquote>",
        "id": 218882588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607111330
    },
    {
        "content": "<p>bkolobara edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-738983305\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Thanks for the explanation. Maybe I should provided more context, I wanted to create a memory that I could share between threads as <code>Memory</code> is not <code>Send</code> or <code>Sync</code>. I assume, this is something you will support in the future, but I was looking for a short term solution for testing.</p>\n</blockquote>",
        "id": 218882614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607111341
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-739033877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>A <code>Memory</code> isn't <code>Send</code> or <code>Sync</code> because of this <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">general issue for instances not being <code>Send</code> or <code>Sync</code></a> and currently <code>Memory</code> stores a representation of an instance internally (a module is defined to export the memory and then is instantiated to create it).</p>\n<p>Right now the Wasmtime API expects everything in a <code>Store</code> to be on the same thread.  A consequence of this is that the <code>memory.grow</code> operation is not synchronized as only a single <code>Instance</code> can interact with the imported memory at a time as <code>Instance</code> is not <code>Send</code>.  I can't think of any solutions to this problem that would be safe to do.</p>\n<p>This needs to change to fully support the Wasm threads proposal; for example, it should be possible to have multiple instances running on different threads import the same <em>shared linear memory</em> and synchronize any growth operations.  However, Wasmtime doesn't support shared linear memories today.</p>\n</blockquote>",
        "id": 218894232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607117776
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-739040572\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Thanks for the clarification, I will close this issue as there are others tracking the threading support.</p>\n</blockquote>",
        "id": 218895759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607118707
    },
    {
        "content": "<p>bkolobara closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>Currently the <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Linker.html#method.define\">Linker.define</a> function takes an item that implements <code>Into&lt;Extern&gt;</code> and <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/enum.Extern.html\"><code>Extern</code></a> takes a <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Memory.html\">Memory</a> struct.<br>\nI would like to define a structure that implements <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/trait.LinearMemory.html\"><code>LinearMemory</code></a> and pass it to the linker. Would this be possible?</p>\n</blockquote>",
        "id": 218895760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607118708
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477#issuecomment-739033877\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2477\">Issue #2477</a>:</p>\n<blockquote>\n<p>A <code>Memory</code> isn't <code>Send</code> or <code>Sync</code> because of this <a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">general issue for instances not being <code>Send</code> or <code>Sync</code></a> and currently <code>Memory</code> stores a representation of an instance internally (a module is defined to export the memory and then is instantiated to create it).</p>\n<p>Right now the Wasmtime API expects everything in a <code>Store</code> to be on the same thread.  A consequence of this is that the <code>memory.grow</code> operation is not synchronized as only a single <code>Instance</code> can interact with the imported memory at a time as <code>Instance</code> is not <code>Send</code>.  I can't think of any workaround solutions to this problem that would be safe to do.</p>\n<p>This needs to change to fully support the Wasm threads proposal; for example, it should be possible to have multiple instances running on different threads import the same <em>shared linear memory</em> and synchronize any growth operations.  However, Wasmtime doesn't support shared linear memories today.</p>\n</blockquote>",
        "id": 218896910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607119391
    }
]