[
    {
        "content": "<p>DGriffin91 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Using cranelift 0.76, the following results in this error message: \"'Unsupported type for imin instruction: i64', [...]\\cranelift-codegen-0.76.0\\src\\isa\\x64\\lower.rs:2353:17\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">windows_fastcall</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imin</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcvt_from_sint</span><span class=\"p\">.</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Am I using imin incorrectly?</p>\n</blockquote>",
        "id": 253901655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632008579
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370#issuecomment-922404431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3370\">issue #3370</a>:</p>\n<blockquote>\n<p>Currently the <code>imin</code> instruction is only supported for vector types, not scalars. It's a part of a larger issue in which our backends support the particular combinations of instructions and types that are generated by our Wasm frontend, but still have implementation gaps for the fully general opcode x type matrix. Sorry about that! I'd be happy to point out the place where this would be implemented if you're interested in possibly contributing a patch, and in the meantime I'll go ahead and rename this issue to track the missing impl.</p>\n<p>Thanks again for the report!</p>\n</blockquote>",
        "id": 253909516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632017819
    }
]