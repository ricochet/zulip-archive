[
    {
        "content": "<p>marmistrz labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>I'm not sure if I should report this issue here or in rust-lang/rust or even somewhere else. </p>\n<p>Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span>#[repr(align(64))]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheBucket([CacheEntry; 3]);\n\n#[repr(C)]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheEntry {\n    pub alpha: bool\n}\n\nfn main() {\n    let buckets = 4194304;\n    let xd = vec![CacheBucket::default(); buckets];\n    println!(&quot;{:?}&quot;, xd);\n}\n</pre></div>\n\n\n<p>compiled to wasm using <code>rustup run stable cargo build --target=wasm32-wasi</code> with <code>rustc 1.42.0 (b8cedc004 2020-03-09)</code></p>\n<p>Then run the wasm binary using wasmtime:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run --release -- run oob.wasm\n    Finished release [optimized] target(s) in 0.09s\n     Running `target/release/wasmtime run ../chess/oob/target/wasm32-wasi/debug/oob.wasm`\nError: failed to run main module `../chess/oob/target/wasm32-wasi/debug/oob.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @56bf\n       wasm backtrace:\n         0: &lt;unknown&gt;!core::ptr::write::h5550856a4b897d6d\n         1: &lt;unknown&gt;!alloc::vec::Vec&lt;T&gt;::extend_with::h42807d753bccf81d\n         2: &lt;unknown&gt;!&lt;T as alloc::vec::SpecFromElem&gt;::from_elem::h3a932571fd38db0f\n         3: &lt;unknown&gt;!alloc::vec::from_elem::ha55e830b1b839b10\n         4: &lt;unknown&gt;!oob::main::h5b4df0d7d93a566d\n         5: &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h4b37f8cbafc64616\n         6: &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::h09ce0967d7b1e05d\n         7: &lt;unknown&gt;!std::panicking::try::do_call::h9f56360d08e2b60c\n         8: &lt;unknown&gt;!__rust_maybe_catch_panic\n         9: &lt;unknown&gt;!std::rt::lang_start_internal::h1c0f367ef14e29b3\n         10: &lt;unknown&gt;!std::rt::lang_start::h81110b05d9ba24fa\n         11: &lt;unknown&gt;!__original_main\n         12: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The code runs correctly if <code>buckets</code> is small (e.g. 4) or if <code>#[repr(align(64))]</code> is removed. <br>\nwasmtime master, 78772cf5e1d019d060d2a5427aa7058604f924e5</p>\n</blockquote>",
        "id": 192297774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585592767
    },
    {
        "content": "<p>marmistrz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>I'm not sure if I should report this issue here or in rust-lang/rust or even somewhere else. </p>\n<p>Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span>#[repr(align(64))]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheBucket([CacheEntry; 3]);\n\n#[repr(C)]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheEntry {\n    pub alpha: bool\n}\n\nfn main() {\n    let buckets = 4194304;\n    let xd = vec![CacheBucket::default(); buckets];\n    println!(&quot;{:?}&quot;, xd);\n}\n</pre></div>\n\n\n<p>compiled to wasm using <code>rustup run stable cargo build --target=wasm32-wasi</code> with <code>rustc 1.42.0 (b8cedc004 2020-03-09)</code></p>\n<p>Then run the wasm binary using wasmtime:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run --release -- run oob.wasm\n    Finished release [optimized] target(s) in 0.09s\n     Running `target/release/wasmtime run ../chess/oob/target/wasm32-wasi/debug/oob.wasm`\nError: failed to run main module `../chess/oob/target/wasm32-wasi/debug/oob.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @56bf\n       wasm backtrace:\n         0: &lt;unknown&gt;!core::ptr::write::h5550856a4b897d6d\n         1: &lt;unknown&gt;!alloc::vec::Vec&lt;T&gt;::extend_with::h42807d753bccf81d\n         2: &lt;unknown&gt;!&lt;T as alloc::vec::SpecFromElem&gt;::from_elem::h3a932571fd38db0f\n         3: &lt;unknown&gt;!alloc::vec::from_elem::ha55e830b1b839b10\n         4: &lt;unknown&gt;!oob::main::h5b4df0d7d93a566d\n         5: &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h4b37f8cbafc64616\n         6: &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::h09ce0967d7b1e05d\n         7: &lt;unknown&gt;!std::panicking::try::do_call::h9f56360d08e2b60c\n         8: &lt;unknown&gt;!__rust_maybe_catch_panic\n         9: &lt;unknown&gt;!std::rt::lang_start_internal::h1c0f367ef14e29b3\n         10: &lt;unknown&gt;!std::rt::lang_start::h81110b05d9ba24fa\n         11: &lt;unknown&gt;!__original_main\n         12: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The code runs correctly if <code>buckets</code> is small (e.g. 4) or if <code>#[repr(align(64))]</code> is removed. <br>\nwasmtime master, 78772cf5e1d019d060d2a5427aa7058604f924e5</p>\n</blockquote>",
        "id": 192297776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585592767
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606187692\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606187692\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>How much memory is the wasm module allowed to use? The version with <code>#[repr(align(64))]</code> would need <code>256MiB</code> for <code>buckets</code> alone, while the version without would need just <code>16MiB</code>.</p>\n</blockquote>",
        "id": 192303773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585595569
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606189643\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606189643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>How should I check it? For reference, the original structure looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>pub struct CacheEntry {\n    pub alpha: bool,\n    pub beta: bool,\n    pub pv_node: bool,\n    pub depth: i8,\n    pub plies_played: u16,\n    pub score: i16,\n    pub upper_hash: u32,\n    pub lower_hash: u32,\n    pub mv: u16,\n    pub static_evaluation: i16,\n}\n</pre></div>\n\n\n<p>Switching to this defintion of <code>CacheEntry</code> doesn't change anything.</p>\n</blockquote>",
        "id": 192304226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585595836
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606191434\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606191434\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>FWIW: Lucet gets a HeapOutOfBounds fault running this module (as I compiled it locally with 1.40, we're still stuck on snapshot 0).</p>\n</blockquote>",
        "id": 192304634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585596056
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606201537\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606201537\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>Looks like this was a bug in the Rust standard library, <a href=\"https://github.com/rust-lang/rust/pull/70585\" title=\"https://github.com/rust-lang/rust/pull/70585\">fixed here</a>.</p>\n<p>As a local workaround while we wait for that to propagate you can <a href=\"https://github.com/alexcrichton/dlmalloc-rs/\" title=\"https://github.com/alexcrichton/dlmalloc-rs/\">depend directly on <code>dlmalloc</code></a> and use that as a global allocator:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># in Cargo.toml</span>\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">dlmalloc</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">version</span> <span class=\"o\">=</span><span class=\"s\">&quot;0.1&quot;</span><span class=\"p\">,</span> <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;global&#39;</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[global_allocator]</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">dlmalloc</span>::<span class=\"n\">GlobalDlmalloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dlmalloc</span>::<span class=\"n\">GlobalDlmalloc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(align(64))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone, Default, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CacheBucket</span><span class=\"p\">([</span><span class=\"n\">CacheEntry</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone, Default, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CacheEntry</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">alpha</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buckets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4194304</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">CacheBucket</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">buckets</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xd</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>",
        "id": 192306394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585596863
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606201537\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-606201537\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>Looks like this was a bug in the Rust standard library, <a href=\"https://github.com/rust-lang/rust/pull/70585\" title=\"https://github.com/rust-lang/rust/pull/70585\">fixed here</a>.</p>\n<p>As a local workaround while we wait for that to propagate you can <a href=\"https://github.com/alexcrichton/dlmalloc-rs/\" title=\"https://github.com/alexcrichton/dlmalloc-rs/\">depend directly on <code>dlmalloc</code></a> and use that as a global allocator:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># in Cargo.toml</span>\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">dlmalloc</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;0.1&quot;</span><span class=\"p\">,</span> <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;global&#39;</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[global_allocator]</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">dlmalloc</span>::<span class=\"n\">GlobalDlmalloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dlmalloc</span>::<span class=\"n\">GlobalDlmalloc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(align(64))]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone, Default, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CacheBucket</span><span class=\"p\">([</span><span class=\"n\">CacheEntry</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone, Default, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CacheEntry</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">alpha</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buckets</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4194304</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">CacheBucket</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">buckets</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xd</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>",
        "id": 192306480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585596902
    },
    {
        "content": "<p>marmistrz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-619908991\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435#issuecomment-619908991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>This works for me on nightly, so I guess we can close it.</p>\n</blockquote>",
        "id": 195401298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587985427
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1435\">Issue #1435</a>:</p>\n<blockquote>\n<p>I'm not sure if I should report this issue here or in rust-lang/rust or even somewhere else. </p>\n<p>Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span>#[repr(align(64))]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheBucket([CacheEntry; 3]);\n\n#[repr(C)]\n#[derive(Copy, Clone, Default, Debug)]\npub struct CacheEntry {\n    pub alpha: bool\n}\n\nfn main() {\n    let buckets = 4194304;\n    let xd = vec![CacheBucket::default(); buckets];\n    println!(&quot;{:?}&quot;, xd);\n}\n</pre></div>\n\n\n<p>compiled to wasm using <code>rustup run stable cargo build --target=wasm32-wasi</code> with <code>rustc 1.42.0 (b8cedc004 2020-03-09)</code></p>\n<p>Then run the wasm binary using wasmtime:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run --release -- run oob.wasm\n    Finished release [optimized] target(s) in 0.09s\n     Running `target/release/wasmtime run ../chess/oob/target/wasm32-wasi/debug/oob.wasm`\nError: failed to run main module `../chess/oob/target/wasm32-wasi/debug/oob.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @56bf\n       wasm backtrace:\n         0: &lt;unknown&gt;!core::ptr::write::h5550856a4b897d6d\n         1: &lt;unknown&gt;!alloc::vec::Vec&lt;T&gt;::extend_with::h42807d753bccf81d\n         2: &lt;unknown&gt;!&lt;T as alloc::vec::SpecFromElem&gt;::from_elem::h3a932571fd38db0f\n         3: &lt;unknown&gt;!alloc::vec::from_elem::ha55e830b1b839b10\n         4: &lt;unknown&gt;!oob::main::h5b4df0d7d93a566d\n         5: &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h4b37f8cbafc64616\n         6: &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::h09ce0967d7b1e05d\n         7: &lt;unknown&gt;!std::panicking::try::do_call::h9f56360d08e2b60c\n         8: &lt;unknown&gt;!__rust_maybe_catch_panic\n         9: &lt;unknown&gt;!std::rt::lang_start_internal::h1c0f367ef14e29b3\n         10: &lt;unknown&gt;!std::rt::lang_start::h81110b05d9ba24fa\n         11: &lt;unknown&gt;!__original_main\n         12: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>The code runs correctly if <code>buckets</code> is small (e.g. 4) or if <code>#[repr(align(64))]</code> is removed. <br>\nwasmtime master, 78772cf5e1d019d060d2a5427aa7058604f924e5</p>\n</blockquote>",
        "id": 195428650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587999159
    }
]