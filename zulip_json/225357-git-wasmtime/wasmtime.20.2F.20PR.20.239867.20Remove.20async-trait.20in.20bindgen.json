[
    {
        "content": "<p>ifsheldon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a> from <code>ifsheldon:remove-async-trait-in-bindgen</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Closes #9823 </p>\n<p>I ran <code>cargo test -p wasmtime-wasi</code> and all tests passed, so now I'd like to go through the whole CI.</p>\n<p>There are only 2 cases remaining unresolved due to the use of dyn objects, i.e., <code>wasmtime::runtime::store::CallHookHandler</code> and <code>wasmtime::runtime::limits::ResourceLimiterAsync</code>, but they are related to the runtime, so I don't think they are very relevant to the issue and I left them unchanged.<br>\n</p>\n</blockquote>",
        "id": 490016733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734629568
    },
    {
        "content": "<p><strong>ifsheldon</strong> requested <a href=\"https://github.com/dicej\">dicej</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490016737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734629568
    },
    {
        "content": "<p><strong>ifsheldon</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490016739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734629568
    },
    {
        "content": "<p><strong>ifsheldon</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490016740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734629569
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#pullrequestreview-2516101633\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this!</p>\n<p>LGTM overall, but see my inline comment about avoiding the <code>trait-variant</code> dependency, which would address the <code>cargo vet</code> CI failure.</p>\n<p>The other CI failure should be easy to fix: just run <code>BINDGEN_TEST_BLESS=1 cargo test -p wasmtime-component-macro --test expanded</code>.</p>\n</blockquote>",
        "id": 490043863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734639944
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#discussion_r1893089618\">PR review comment</a>:</p>\n<blockquote>\n<p>Per <a href=\"https://docs.wasmtime.dev/contributing-coding-guidelines.html?highlight=vet#cargo-vet-for-contributors\">this section</a> of the contributing docs, the bar for adding new dependencies to Wasmtime is a bit higher than for other projects (hence the <code>cargo vet</code> CI failure), so we need to make sure this one is worth including.</p>\n<p>From what I can tell, it's only being used to annotate <code>wasmtime-wit-bindgen</code>-generated traits.  Given that we're generating those traits anyway, I wonder if we should modify the generator to emit a <code>-&gt; impl Future&lt;Output = T&gt; + Send</code> return type directly rather than rely on <code>trait-variant</code> to transform the code it just generated.  That would avoid the extra dependency and remove a layer of abstraction.  What do you think?</p>\n</blockquote>",
        "id": 490043865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734639944
    },
    {
        "content": "<p>ifsheldon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#pullrequestreview-2516834702\">PR review</a>.</p>",
        "id": 490098693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734674346
    },
    {
        "content": "<p>ifsheldon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#discussion_r1893508384\">PR review comment</a>:</p>\n<blockquote>\n<p>I would strongly recommend adding <code>trait-variant</code> because:</p>\n<ol>\n<li>it is maintained officially by the Rust project, so the code quality is reassured.</li>\n<li>this is the recommended way to add <code>Send</code> bound by the <a href=\"https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html\">Rust announcement about async fn in traits</a></li>\n<li>in the announcement, it's said future version of <code>trait-variant</code> will support dyn trait object. Using <code>trait-variant</code> will enable dyn object support in the future without the need to modify <code>bindgen</code></li>\n<li>compared to writing <code>-&gt; impl Future&lt;Output = T&gt; + Send</code> ourselves, it's better to leave <code>async fn</code> signatures for users to debug when users have IDEs like RustRover that can expand proc_macro layer by layer. So when they want to debug, they actually see <code>#[trait_variant::make]</code> and <code>async fn</code> instead of  <code>fn ... -&gt; impl Future&lt;Output = T&gt; + Send</code></li>\n<li>from my perspective, the use of <code>#[trait_variant::make]</code> is sort of a marker indicating better support of async fn in traits is needed, which may benefit contributions.</li>\n</ol>\n<p>In general, I think <code>trait-variant</code> is a better solution than <code>async-trait</code> when we take the future evolution of Rust into account.</p>\n<p>PS: replacing <code>async-trait</code> with <code>trait-variant</code> is a breaking change because:</p>\n<ul>\n<li>traits by <code>async-trait</code> support dyn trait object while traits with <code>trait-variant</code> for now do not</li>\n<li>when implementing async traits, users need to remove <code>#[async_trait::async_trait]</code> on the impl blocks</li>\n</ul>\n</blockquote>",
        "id": 490098694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734674346
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#pullrequestreview-2517795677\">PR review</a>.</p>",
        "id": 490183539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734708674
    },
    {
        "content": "<p>dicej created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#discussion_r1894077336\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for explaining!  I hadn't realized <code>trait-variant</code> was a <code>rust-lang</code> project and that it has official status.  I'll add a commit to tell <code>cargo vet</code> to trust that crate.</p>\n<p>And yes, I realize the removal of <code>async-trait</code> will be a breaking change in any case.</p>\n</blockquote>",
        "id": 490183542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734708674
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490184551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734708978
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490187620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734710013
    },
    {
        "content": "<p>dicej submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867#pullrequestreview-2517873055\">PR review</a>.</p>",
        "id": 490191269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734711187
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9867\">PR #9867</a>.</p>",
        "id": 490200984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734714769
    }
]