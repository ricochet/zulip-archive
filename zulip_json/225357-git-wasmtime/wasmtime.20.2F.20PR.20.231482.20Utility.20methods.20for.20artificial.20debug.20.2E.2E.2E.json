[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To deference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[ ] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported</li>\n</ul>\n</blockquote>",
        "id": 193250540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586294735
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To deference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[ ] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193251601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586295396
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[ ] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193360777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586370914
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193371300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586376031
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193375276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586378150
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[ ] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193381201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586381571
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193381207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586381575
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193387188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586385442
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193463162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586444953
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193474023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586449437
    },
    {
        "content": "<p><strong>yurydelendik</strong> requested <a href=\"https://github.com/fitzgen\" title=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a>.</p>",
        "id": 193474123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586449475
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-390984818\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-390984818\">PR Review</a>.</p>",
        "id": 193484051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586453873
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-390984818\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-390984818\">PR Review</a>.</p>",
        "id": 193484052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586453873
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406359625\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406359625\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Want to create a tracking issue for multi-memory and add a checkbox for this there? That way we're less likely to forget about this when we actually implement multi-memory.</p>\n</blockquote>",
        "id": 193484053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586453873
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406356781\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406356781\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If this module is <code>pub</code> (can also be <code>#[doc(hidden)]</code> to avoid \"really\" making it public) then I _think_ we don't need this hack.</p>\n</blockquote>",
        "id": 193484055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586453873
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406366292\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406366292\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    assert!(!VMCTX_AND_MEMORY.0.is_null(), &quot;must call `__vmctx-&gt;set()` before resolving Wasm pointers&quot;);\n</pre></div>\n\n\n<p>So that users get a slightly better message if they get here.</p>\n</blockquote>",
        "id": 193484056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586453873
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193492721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586457874
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193493311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586458161
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391053091\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391053091\">PR Review</a>.</p>",
        "id": 193494443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586458752
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406413123\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406413123\">PR Review Comment</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1489\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1489\">https://github.com/bytecodealliance/wasmtime/issues/1489</a></p>\n</blockquote>",
        "id": 193494444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586458752
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391053939\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391053939\">PR Review</a>.</p>",
        "id": 193494640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586458828
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406413783\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406413783\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Or use <code>#[doc(hidden)] pub use crate::debug_builtins::{set_vmctx_memory, resolve_vmctx_memory_ptr};</code> in the crate root.</p>\n</blockquote>",
        "id": 193494642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586458828
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391091046\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#pullrequestreview-391091046\">PR Review</a>.</p>",
        "id": 193501645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586462327
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406443736\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482#discussion_r406443736\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If you are suggesting to remove <code>ensure_exported</code>, then it does not work. See <a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">rust-lang/rust#25057</a></p>\n</blockquote>",
        "id": 193501646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586462327
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a> from <code>unwrap-ptr</code> to <code>master</code>:</p>\n<blockquote>\n<p>Currently, artificial \"wrapper\" types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function's vmctx is needed. This PR is an attempt to provide overrides for artificial type for <code>operator*</code> and <code>operator-&gt;</code>.</p>\n<p>The runtime/host has to have <code>set_vmctx_memory</code> and <code>resolve_vmctx_memory_ptr</code> builtins. The former sets current context and the former derefernces the Wasm pointer using current context's memory base.</p>\n<p>During LLDB session, a user has to call <code>__vmctx.set()</code> to set the current context before calling any dereference operators. It can be automated via e.g. <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code>.</p>\n<p>Example of the LLDB session (see also <a href=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\" title=\"https://gist.github.com/yurydelendik/ba86fe491765bfd073c6e08d056c8012\">gist</a>):</p>\n<div class=\"codehilite\"><pre><span></span>Process 50041 stopped\n\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x00000001042ca05d JIT(0x105000600)`check(i=1) at t.c:13:3\n   10\n   11   int check(size_t i) {\n   12     struct Test *y = t + i;\n-&gt; 13     y-&gt;i++;\n   14     return y-&gt;j;\n   15   }\n   16\n(lldb) p y\n(WebAssemblyPtrWrapper&lt;Test&gt;) $0 = (__ptr = 1032)\n(lldb) pp *y\n(Test) $1 = (i = 3, j = 4)\n(lldb) pp y-&gt;j\n(int) $2 = 4\n(lldb) fr v\n(WasmtimeVMContext *) __vmctx = 0x0000000103503ba0\n(size_t) i = 1\n(WebAssemblyPtrWrapper&lt;Test&gt;) y = (__ptr = 1032)\n</pre></div>\n\n\n<p>TODO:</p>\n<ul>\n<li>[x] access to non-exported memory</li>\n<li>[x] find better way to keep <code>_set_vmctx_memory</code> / <code>_resolve_vmctx_memory_ptr</code> exported (<a href=\"https://github.com/rust-lang/rust/issues/25057\" title=\"https://github.com/rust-lang/rust/issues/25057\">https://github.com/rust-lang/rust/issues/25057</a> ?)</li>\n</ul>\n</blockquote>",
        "id": 193579437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586531606
    },
    {
        "content": "<p>yurydelendik merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">PR #1482</a>.</p>",
        "id": 193585229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586534412
    }
]