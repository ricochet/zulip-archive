[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2285\">Issue #2285</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Define a textual representation of a cranelift module that is like the current clir ir text form, but with added support for defining data objects, importing extern functions and data objects, defining linkage and giving everything a name that isn't limited to 16 characters ascii characters.</p>\n<h4>Benefit</h4>\n<p>This allows writing and reading a whole cranelift module as text file, making it easier to find problems with what you defined, making changes while debugging quicker and making cranelift easier to use from non-rust users. (<a href=\"#narrow/stream/217117-cranelift/topic/using.20cranelift.20as.20a.20backend.20for.20a.20non-rust.20compiler/near/212909451\">https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/using.20cranelift.20as.20a.20backend.20for.20a.20non-rust.20compiler/near/212909451</a>).</p>\n<h4>Implementation</h4>\n<p>Part of the serialization could be handled by <code>ModuleDeclarations</code> and the rest needs to be handled by a custom <code>Module</code> implementor. The deserialization needs to take an <code>&amp;mut impl Module</code> as argument.</p>\n<p>The textual representation could be like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">declare</span>: <span class=\"s\">\"puts\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">func0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">declare</span>: <span class=\"s\">\"print_hello\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">func1</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">declare</span>: <span class=\"s\">\"hello_str\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">data0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">ro</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">handled</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ModuleDeclarations</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"s\">\"hello_str\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello World!</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n</blockquote>",
        "id": 212913663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602332816
    }
]