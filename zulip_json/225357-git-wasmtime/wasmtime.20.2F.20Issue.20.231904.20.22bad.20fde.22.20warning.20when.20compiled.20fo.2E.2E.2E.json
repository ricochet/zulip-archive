[
    {
        "content": "<p>ueno opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>When wasmtime is compiled with <code>cargo build --target x86_64-unknown-linux-musl</code>, it produces a runtime warning as below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> ./target/x86_64-unknown-linux-musl/debug/wasmtime tests/wasm/hello_wasi_snapshot1.wat\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">Hello, world!</span>\n</code></pre></div>\n\n\n<ul>\n<li>\n<p>What are the steps to reproduce the issue?<br>\nSee above.</p>\n</li>\n<li>\n<p>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?<br>\nI am actually not sure about the impact, but it looks like the FDE record is corrupted in the generated code.</p>\n</li>\n<li>\n<p>Which Wasmtime version / commit hash / branch are you using?<br>\ngit master (f4e3e4efde28ac90be9fd68dcbda2943b3851155)</p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</p>\n<ul>\n<li>rustc 1.43.0 (4fb7144ed 2020-04-20)</li>\n<li>Fedora 32 (x86_64)</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 201393531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592575184
    },
    {
        "content": "<p>ueno labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>When wasmtime is compiled with <code>cargo build --target x86_64-unknown-linux-musl</code>, it produces a runtime warning as below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> ./target/x86_64-unknown-linux-musl/debug/wasmtime tests/wasm/hello_wasi_snapshot1.wat\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">Hello, world!</span>\n</code></pre></div>\n\n\n<ul>\n<li>\n<p>What are the steps to reproduce the issue?<br>\nSee above.</p>\n</li>\n<li>\n<p>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?<br>\nI am actually not sure about the impact, but it looks like the FDE record is corrupted in the generated code.</p>\n</li>\n<li>\n<p>Which Wasmtime version / commit hash / branch are you using?<br>\ngit master (f4e3e4efde28ac90be9fd68dcbda2943b3851155)</p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</p>\n<ul>\n<li>rustc 1.43.0 (4fb7144ed 2020-04-20)</li>\n<li>Fedora 32 (x86_64)</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 201393533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592575184
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>When wasmtime is compiled with <code>cargo build --target x86_64-unknown-linux-musl</code>, it produces a runtime warning as below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> ./target/x86_64-unknown-linux-musl/debug/wasmtime tests/wasm/hello_wasi_snapshot1.wat\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">Hello, world!</span>\n</code></pre></div>\n\n\n<ul>\n<li>\n<p>What are the steps to reproduce the issue?<br>\nSee above.</p>\n</li>\n<li>\n<p>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?<br>\nI am actually not sure about the impact, but it looks like the FDE record is corrupted in the generated code.</p>\n</li>\n<li>\n<p>Which Wasmtime version / commit hash / branch are you using?<br>\ngit master (f4e3e4efde28ac90be9fd68dcbda2943b3851155)</p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</p>\n<ul>\n<li>rustc 1.43.0 (4fb7144ed 2020-04-20)</li>\n<li>Fedora 32 (x86_64)</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 201765375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592937803
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648345935\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>I'm able to reproduce this and I'll investigate.</p>\n</blockquote>",
        "id": 201765405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592937814
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648377334\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>There are two warnings because two frame tables are being registered (each with two FDEs), one for the the wasm functions and one for the trampolines.</p>\n<p>Here's one of the decoded table being passed to <code>__unw_add_dynamic_fde</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    20,\n    0,\n    0,\n    0,      // CIE length: 20 bytes\n\n    0,\n    0,\n    0,\n    0,      // CIE ID: 0\n\n    1,      // Version: 1\n\n    0,      // Agumentation (none)\n\n    1,      // Code alignment factor\n\n    120,    // Data alignment factor (-8)\n\n    16,     // Return register: RAX\n\n    12,     // Start of initial instructions\n    7,\n    8,\n    144,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // End of initial instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    28,\n    0,\n    0,\n    0,      // CIE offset: 4 (FDE length) + 24 (CIE record + length) = 28\n\n    0,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007ffff7dd0000\n\n    28,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 28 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    86,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    68,\n    0,\n    0,\n    0,      // CIE offset: 4 (this FDE length) + 40 (first FDE record + length) +  24 (CIE record + length) = 68\n\n    28,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007FFFF7DD001C\n\n    11,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 11 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    69,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    0,\n    0,\n    0,\n    0,      // FDE with length 0 (end of records marker)\n]\n</code></pre></div>\n\n\n<p>This table appears correct.</p>\n<p>There appears to be a <a href=\"https://github.com/libunwind/libunwind/issues/138\">libunwind issue</a> unrelated to wasmtime that hasn't been investigated.</p>\n<p>I'll see if I can debug into libunwind and see what's tripping it up.</p>\n</blockquote>",
        "id": 201772347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592941210
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648377334\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>There are two warnings because two frame tables are being registered (each with two FDEs), one for the the wasm functions and one for the trampolines.</p>\n<p>Here's one of the decoded frame tables being passed to <code>__unw_add_dynamic_fde</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    20,\n    0,\n    0,\n    0,      // CIE length: 20 bytes\n\n    0,\n    0,\n    0,\n    0,      // CIE ID: 0\n\n    1,      // Version: 1\n\n    0,      // Agumentation (none)\n\n    1,      // Code alignment factor\n\n    120,    // Data alignment factor (-8)\n\n    16,     // Return register: RAX\n\n    12,     // Start of initial instructions\n    7,\n    8,\n    144,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // End of initial instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    28,\n    0,\n    0,\n    0,      // CIE offset: 4 (FDE length) + 24 (CIE record + length) = 28\n\n    0,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007ffff7dd0000\n\n    28,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 28 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    86,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    68,\n    0,\n    0,\n    0,      // CIE offset: 4 (this FDE length) + 40 (first FDE record + length) +  24 (CIE record + length) = 68\n\n    28,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007FFFF7DD001C\n\n    11,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 11 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    69,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    0,\n    0,\n    0,\n    0,      // FDE with length 0 (end of records marker)\n]\n</code></pre></div>\n\n\n<p>This table appears correct.</p>\n<p>There appears to be a <a href=\"https://github.com/libunwind/libunwind/issues/138\">libunwind issue</a> unrelated to wasmtime that hasn't been investigated.</p>\n<p>I'll see if I can debug into libunwind and see what's tripping it up.</p>\n</blockquote>",
        "id": 201772373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592941229
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648377334\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>There are two warnings because two frame tables are being registered (each with two FDEs), one for the the wasm functions and one for the trampolines.</p>\n<p>Here's one of the decoded frame tables being passed to <code>__unw_add_dynamic_fde</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    20,\n    0,\n    0,\n    0,      // CIE length: 20 bytes\n\n    0,\n    0,\n    0,\n    0,      // CIE ID: 0\n\n    1,      // Version: 1\n\n    0,      // Agumentation (none)\n\n    1,      // Code alignment factor\n\n    120,    // Data alignment factor (-8)\n\n    16,     // Return register: RAX\n\n    12,     // Start of initial instructions\n    7,\n    8,\n    144,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // End of initial instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    28,\n    0,\n    0,\n    0,      // CIE offset: 4 (FDE length) + 24 (CIE record + length) = 28\n\n    0,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007ffff7dd0000\n\n    28,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 28 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    86,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    68,\n    0,\n    0,\n    0,      // CIE offset: 4 (this FDE length) + 40 (first FDE record + length) + 24 (CIE record + length) = 68\n\n    28,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007FFFF7DD001C\n\n    11,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 11 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    69,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    0,\n    0,\n    0,\n    0,      // FDE with length 0 (end of records marker)\n]\n</code></pre></div>\n\n\n<p>This table appears correct.</p>\n<p>There appears to be a <a href=\"https://github.com/libunwind/libunwind/issues/138\">libunwind issue</a> unrelated to wasmtime that hasn't been investigated.</p>\n<p>I'll see if I can debug into libunwind and see what's tripping it up.</p>\n</blockquote>",
        "id": 201772669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592941370
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648377334\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>There are two warnings because two frame tables are being registered (each with two FDEs), one for the the wasm functions and one for the trampolines.</p>\n<p>Here's one of the decoded frame tables being passed to <code>__unw_add_dynamic_fde</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    20,\n    0,\n    0,\n    0,      // CIE length: 20 bytes\n\n    0,\n    0,\n    0,\n    0,      // CIE ID: 0\n\n    1,      // Version: 1\n\n    0,      // Agumentation (none)\n\n    1,      // Code alignment factor\n\n    120,    // Data alignment factor (-8)\n\n    16,     // Return register: RAX\n\n    12,     // Start of initial instructions\n    7,\n    8,\n    144,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // End of initial instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    28,\n    0,\n    0,\n    0,      // CIE offset: 4 (FDE length) + 24 (CIE record + length) = 28\n\n    0,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007ffff7dd0000\n\n    28,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 28 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    86,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    68,\n    0,\n    0,\n    0,      // CIE offset: 4 (this FDE length) + 40 (first FDE record + length) + 24 (CIE record + length) = 68\n\n    28,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007FFFF7DD001C\n\n    11,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 11 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    69,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    0,\n    0,\n    0,\n    0,      // FDE with length 0 (end of records marker)\n]\n</code></pre></div>\n\n\n<p>This table appears correct.</p>\n<p>There appears to be a <a href=\"https://github.com/libunwind/libunwind/issues/138\">libunwind issue</a> unrelated to wasmtime that hasn't been investigated, although I'm not sure if that one is musl-related or not.</p>\n<p>I'll see if I can debug into libunwind and see what's tripping it up.</p>\n</blockquote>",
        "id": 201774774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592942358
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648402231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>This bug is due to Wasmtime expecting <code>__register_frame</code> (aliased to <code>__unw_add_dynamic_fde</code> in libunwind) to take a whole table like it does with libgcc, but musl, like the macOS implementation, expects a single FDE.</p>\n<p>We need to update the <code>UnwindRegistry</code> to iterate the FDEs like we do for macOS.</p>\n</blockquote>",
        "id": 201778863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592944391
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-648377334\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>There are two warnings because two frame tables are being registered, one for the the wasm functions and one for the trampolines.</p>\n<p>Here's one of the decoded frame tables being passed to <code>__unw_add_dynamic_fde</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    20,\n    0,\n    0,\n    0,      // CIE length: 20 bytes\n\n    0,\n    0,\n    0,\n    0,      // CIE ID: 0\n\n    1,      // Version: 1\n\n    0,      // Agumentation (none)\n\n    1,      // Code alignment factor\n\n    120,    // Data alignment factor (-8)\n\n    16,     // Return register: RAX\n\n    12,     // Start of initial instructions\n    7,\n    8,\n    144,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // End of initial instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    28,\n    0,\n    0,\n    0,      // CIE offset: 4 (FDE length) + 24 (CIE record + length) = 28\n\n    0,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007ffff7dd0000\n\n    28,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 28 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    86,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    36,\n    0,\n    0,\n    0,      // FDE length: 36 bytes\n\n    68,\n    0,\n    0,\n    0,      // CIE offset: 4 (this FDE length) + 40 (first FDE record + length) + 24 (CIE record + length) = 68\n\n    28,\n    0,\n    221,\n    247,\n    255,\n    127,\n    0,\n    0,      // Function address: 0x00007FFFF7DD001C\n\n    11,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,      // Function length: 11 bytes\n\n    66,     // Start of call frame instructions\n    14,\n    16,\n    134,\n    2,\n    67,\n    13,\n    6,\n    69,\n    12,\n    7,\n    8,\n    0,\n    0,\n    0,\n    0,      // End of call frame instructions\n\n    0,\n    0,\n    0,\n    0,      // FDE with length 0 (end of records marker)\n]\n</code></pre></div>\n\n\n<p>This table appears correct.</p>\n<p>There appears to be a <a href=\"https://github.com/libunwind/libunwind/issues/138\">libunwind issue</a> unrelated to wasmtime that hasn't been investigated, although I'm not sure if that one is musl-related or not.</p>\n<p>I'll see if I can debug into libunwind and see what's tripping it up.</p>\n</blockquote>",
        "id": 201780757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592945314
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>When wasmtime is compiled with <code>cargo build --target x86_64-unknown-linux-musl</code>, it produces a runtime warning as below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> ./target/x86_64-unknown-linux-musl/debug/wasmtime tests/wasm/hello_wasi_snapshot1.wat\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">libunwind: __unw_add_dynamic_fde: bad fde: FDE is really a CIE</span>\n<span class=\"go\">Hello, world!</span>\n</code></pre></div>\n\n\n<ul>\n<li>\n<p>What are the steps to reproduce the issue?<br>\nSee above.</p>\n</li>\n<li>\n<p>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?<br>\nI am actually not sure about the impact, but it looks like the FDE record is corrupted in the generated code.</p>\n</li>\n<li>\n<p>Which Wasmtime version / commit hash / branch are you using?<br>\ngit master (f4e3e4efde28ac90be9fd68dcbda2943b3851155)</p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</p>\n<ul>\n<li>rustc 1.43.0 (4fb7144ed 2020-04-20)</li>\n<li>Fedora 32 (x86_64)</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 202017650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593115351
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904#issuecomment-649790718\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1904\">Issue #1904</a>:</p>\n<blockquote>\n<p>So #1914 fixes these warnings and Wasmtime now correctly registers the JIT unwind information for musl builds of Wasmtime.</p>\n<p>Unfortunately, we discovered that musl-targeted LLVM's libunwind is unable to walk stacks properly from signal handlers (see discussion in #1914), which is what Wasmtime needs to capture trap backtraces.  As a result, musl-targeted Wasmtime won't show any backtraces for traps.</p>\n<p>We have a related issue to this where foreign frames that don't have unwind information (#1845) also trip this up.  We may stop using the system-provided unwinder for walking the stack in the future and this will likely fix this issue for musl builds as well.</p>\n</blockquote>",
        "id": 202018199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593115628
    }
]