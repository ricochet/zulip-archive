[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962\">PR #1962</a> from <code>aarch64-lowering-condbr</code> to <code>main</code>:</p>\n<blockquote>\n<p>In discussions with @bnjbvr, it came up that generating <code>OneWayCondBr</code>s<br>\nwith explicit, hardcoded PC-offsets as part of lowered instruction<br>\nsequences is actually unsafe, because the register allocator <em>might</em><br>\ninsert a spill or reload into the middle of our sequence. We were<br>\ncareful about this in some cases but somehow missed that it was a<br>\ngeneral restriction. Conceptually, all inter-instruction references<br>\nshould be via labels at the VCode level; explicit offsets are only ever<br>\nknown at emission time, and resolved by the <code>MachBuffer</code>.</p>\n<p>To allow the simple single-in, single-out local control flow that e.g.<br>\ntrap checks require, without modifying the CFG (as seen by regalloc)<br>\nduring lowering, this PR instead adds a <code>CondSkip</code> pseudo-instruction<br>\nthat conditionally skips a single embedded instruction. This is used to<br>\nskip around trap instructions in various places. It lowers to the same<br>\n<code>condbr label ; trap ; label: ...</code> sequence, but without the hardcoded<br>\nbranch-target offset.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202635785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593646383
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962\">PR #1962</a>.</p>",
        "id": 202635787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593646383
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962\">PR #1962</a> from <code>aarch64-lowering-condbr</code> to <code>main</code>:</p>\n<blockquote>\n<p>In discussions with @bnjbvr, it came up that generating <code>OneWayCondBr</code>s<br>\nwith explicit, hardcoded PC-offsets as part of lowered instruction<br>\nsequences is actually unsafe, because the register allocator <em>might</em><br>\ninsert a spill or reload into the middle of our sequence. We were<br>\ncareful about this in some cases but somehow missed that it was a<br>\ngeneral restriction. Conceptually, all inter-instruction references<br>\nshould be via labels at the VCode level; explicit offsets are only ever<br>\nknown at emission time, and resolved by the <code>MachBuffer</code>.</p>\n<p>To allow the simple single-in, single-out local control flow that e.g.<br>\ntrap checks require, without modifying the CFG (as seen by regalloc)<br>\nduring lowering, this PR instead adds a <code>CondSkip</code> pseudo-instruction<br>\nthat conditionally skips a single embedded instruction. This is used to<br>\nskip around trap instructions in various places. It lowers to the same<br>\n<code>condbr label ; trap ; label: ...</code> sequence, but without the hardcoded<br>\nbranch-target offset.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202636348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593646892
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#pullrequestreview-441636166\">PR Review</a>.</p>",
        "id": 202682267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593693910
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#discussion_r448972902\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As suggested by @julian-seward1 on zulip, do you think it'd make sense to keep it simple and stupid, and only assume a trap instruction as the embedded instruction? Only tests use a Nop4 instead of a Udf here, as far as I can tell, and it seems it would avoid a few headaches (what if the embedded instruction is a synthetic instruction, what if we compose several CondSkip within each other, potential early clobber problem buried inside this instruction...), and the use of a Box here.</p>\n<p>If so, Julian's suggestion of <code>trapif</code> makes sense as a name, since it matches the CLIF IR instruction name, and real machine encodings on some other platforms.</p>\n</blockquote>",
        "id": 202682269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593693910
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#discussion_r448969640\">PR Review Comment</a>:</p>\n<blockquote>\n<p>uber nit, but this can be something else than 8 in the current form (say, if the embedded instruction requires generates many machine instructions). Maybe something like <code>cbz {}, $label ; { } ; $label:</code>?</p>\n<p>(same thing a few times below)</p>\n</blockquote>",
        "id": 202682270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593693910
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#pullrequestreview-441636166\">PR Review</a>.</p>",
        "id": 202682271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593693910
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962\">PR #1962</a> from <code>aarch64-lowering-condbr</code> to <code>main</code>:</p>\n<blockquote>\n<p>In discussions with @bnjbvr, it came up that generating <code>OneWayCondBr</code>s<br>\nwith explicit, hardcoded PC-offsets as part of lowered instruction<br>\nsequences is actually unsafe, because the register allocator <em>might</em><br>\ninsert a spill or reload into the middle of our sequence. We were<br>\ncareful about this in some cases but somehow missed that it was a<br>\ngeneral restriction. Conceptually, all inter-instruction references<br>\nshould be via labels at the VCode level; explicit offsets are only ever<br>\nknown at emission time, and resolved by the <code>MachBuffer</code>.</p>\n<p>To allow the simple single-in, single-out local control flow that e.g.<br>\ntrap checks require, without modifying the CFG (as seen by regalloc)<br>\nduring lowering, this PR instead adds a <code>CondSkip</code> pseudo-instruction<br>\nthat conditionally skips a single embedded instruction. This is used to<br>\nskip around trap instructions in various places. It lowers to the same<br>\n<code>condbr label ; trap ; label: ...</code> sequence, but without the hardcoded<br>\nbranch-target offset.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202723883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593713006
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#pullrequestreview-441916997\">PR Review</a>.</p>",
        "id": 202724083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593713094
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#discussion_r449186568\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, I like the idea of keeping this better-scoped -- changed to <code>Inst::TrapIf</code>. Thanks!</p>\n</blockquote>",
        "id": 202724085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593713094
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#pullrequestreview-441917231\">PR Review</a>.</p>",
        "id": 202724131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593713117
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962#discussion_r449186793\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Keeping this now that it is just <code>TrapIf</code>, as the offset is now truly always <code>8</code>.</p>\n</blockquote>",
        "id": 202724132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593713117
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1962\">PR #1962</a>.</p>",
        "id": 202744523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593723942
    }
]