[
    {
        "content": "<p>itowlson opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a> from <code>itowlson:closeable-async-write-stream</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><strong>Summary</strong></p>\n<p>This proposal adds an optional <code>Receiver&lt;()&gt;</code> field to <code>AsyncWriteStream</code>. When signalled, this gracefully closes the underlying <code>AsyncWrite</code>.</p>\n<p><strong>Context</strong></p>\n<p>This emerged from trying to implement <a href=\"https://github.com/WebAssembly/wasi-blobstore\">wasi-blobstore</a>.  I was passing the read end of a stream to a back-end provider, and the write end to the guest.  I was using <code>wasmtime_wasi</code> to store the write end in a resource table as a <code>HostOutputStream</code> because I didn't want to write a stream host interface myself!</p>\n<p>The API specifies that the guest calls a \"finish\" method (on a separate <code>outgoing-value</code> resource) to indicate that it has finished writing to the stream.  However, because I was using <code>AsyncWriteStream</code> and <code>wasmtime_wasi::HostOutputStream</code>, my host didn't have access to the underlying AsyncWrite's <code>shutdown</code> function to EOF the stream.  So the reader at the back end would continue waiting for input.</p>\n<p>My first plan was to add a <code>shutdown</code> function to <code>AsyncWriteStream</code>, but I couldn't downcast <code>HostOutputStream</code> to <code>AsyncWriteStream</code>, so that didn't work.  So what I ended up with was:</p>\n<ul>\n<li>Have AsyncWriteStream accept the receiver end of a sync channel.</li>\n<li>Have AsyncWriteStream run a background task which waited on the receiver.  When it received a message, it would enqueue a shutdown of the underlying <code>AsyncWrite</code>.</li>\n<li>Have the manager of the outbound connection (in wasi-blobstore, an <code>outgoing-value</code> resource) hold the sender end of the channel.</li>\n<li>When the guest called <code>outgoing-value::finish</code>, send a message via the sender.</li>\n</ul>\n<p>This seemed to work, although it's not been extensively tested.</p>\n<p>As an interface, it's awkward, because for most operations you interact with <code>AsyncWriteStream/HostOutputStream</code> via methods, but for this one special case you interact with it via a sync channel.  However, I don't see a way round that without adding a shutdown or close method to the WASI <code>output-stream</code> resource.  It's possible that WASI intends that shutdown be done by dropping the <code>output-stream</code> resource, but in my testing this seemed to result in an abort rather than an EOF.</p>\n<p>So after talking to @alexcrichton I'm putting this up for discussion and in the hope that WASI folks can come up with a better solution.  Please let me know if folks need clarifications around the problem I was trying to solve or the constraints that led me in this direction!<br>\n</p>\n</blockquote>",
        "id": 484394751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732571080
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680#issuecomment-2504737173\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a>:</p>\n<blockquote>\n<p>The prior art for shutdown is in the <code>wasi-sockets</code> implementation here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641</a></p>\n<p>Rather than shutdown be a method on a stream, its a method on the parent of the stream, in this case the <code>tcp-socket</code> <a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385\">https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385</a>.</p>\n<p>Can you restructure your blobstore interfaces to work in that manner, and then follow the architecture of wasmtime-wasi's  sockets in your implementation?</p>\n</blockquote>",
        "id": 484795738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732740062
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680#issuecomment-2504737173\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a>:</p>\n<blockquote>\n<p>The prior art for shutdown is in the <code>wasi-sockets</code> implementation here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641</a></p>\n<p>Rather than shutdown be a method on a stream, its a method on the parent of the stream, in this case the <code>tcp-socket</code> <a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385\">https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385</a>.</p>\n<p>It looks like this <code>finish</code> mechanism on the parent resource <code>outgoing-value</code> in wasi-blobstore follows the same approximate architecture. Can you follow the architecture used by wasmtime-wasi's  sockets in your implementation?</p>\n</blockquote>",
        "id": 484796078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732740208
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680#issuecomment-2504737173\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a>:</p>\n<blockquote>\n<p>The prior art for shutdown is in the <code>wasi-sockets</code> implementation here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641</a></p>\n<p>Rather than shutdown be a method on a stream, its a method on the parent of the stream, in this case the <code>tcp-socket</code> <a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385\">https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385</a>.</p>\n<p>It looks like this <code>finish</code> mechanism on the parent resource <code>outgoing-value</code> in wasi-blobstore follows an approximately similar architecture. Can you follow the architecture used by wasmtime-wasi's  sockets in your implementation?</p>\n</blockquote>",
        "id": 484796103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732740223
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680#issuecomment-2504737173\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a>:</p>\n<blockquote>\n<p>The prior art for shutdown is in the <code>wasi-sockets</code> implementation here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/tcp.rs#L641</a></p>\n<p>Rather than shutdown be a method on a stream, its a method on the parent of the stream, in this case the <code>tcp-socket</code> <a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385\">https://github.com/WebAssembly/wasi-sockets/blob/main/wit/tcp.wit#L361-L385</a>.</p>\n<p>It looks like this <code>finish</code> method consuming parent resource <code>outgoing-value</code> in wasi-blobstore follows an approximately similar architecture. It has the added advantage that the output-stream is already guaranteed to be dropped at that point. Cn you follow the architecture used by wasmtime-wasi's  sockets in your implementation?</p>\n</blockquote>",
        "id": 484796241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732740270
    },
    {
        "content": "<p>itowlson <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680#issuecomment-2504834776\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9680\">PR #9680</a>:</p>\n<blockquote>\n<p>Thanks for the pointers @pchickey.  I'll try to implement that pattern.</p>\n</blockquote>",
        "id": 484804133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732744115
    }
]