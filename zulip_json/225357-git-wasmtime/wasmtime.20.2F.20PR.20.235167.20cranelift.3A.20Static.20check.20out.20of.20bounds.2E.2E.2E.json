[
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167\">PR #5167</a> from <code>interp-heap-sat-sub</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I don't know if we should merge this or not!</p>\n<p>This PR started on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5155#discussion_r1009872167\">https://github.com/bytecodealliance/wasmtime/pull/5155#discussion_r1009872167</a> where @jameysharp pointed out that it was a bit weird that the interpreter used a <code>saturating_sub</code> when calculating <code>heap_addr</code> sizes.</p>\n<p>I added that because we do have some 0 sized <code>heap_addr</code>'s in runtests. However when fixing that, I added a verifier rule, and it turns out we have a <strong>lot</strong> of 0 sized <code>heap_addr</code>'s in our test suite. Are these legal?</p>\n<p>The <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.heap_addr\">instruction docs</a> state the following:</p>\n<blockquote>\n<p>Verify that the offset range <code>p .. p + Size - 1</code> is in bounds for the heap H, and generate an absolute address that is safe to dereference.</p>\n</blockquote>\n<p>So it sounds like <code>Size</code> must always be larger than 1?</p>\n<p>But it also says:</p>\n<blockquote>\n<p>If <code>p + Size</code> is not greater than the heap bound</p>\n</blockquote>\n<p>Which would allow 0 as a <code>Size</code>.</p>\n<p>So, lets make a decision about this! I don't have any preference for either, I'm just opening this as a PR because when I started fixing the interpreter I thought it would just be that one runtest that was wrong!</p>\n<hr>\n<p>Also, there are some regressions in the x64 codegen that probably shouldn't be there.</p>\n</blockquote>",
        "id": 307554324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667403554
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167\">PR #5167</a> from <code>interp-heap-sat-sub</code> to <code>main</code>.</p>",
        "id": 307554658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667403641
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167\">PR #5167</a> as ready for review.</p>",
        "id": 307556812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667404238
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167#pullrequestreview-1165587734\">PR review</a>.</p>",
        "id": 307571926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667408234
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167#discussion_r1012008463\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd lean toward explicitly listing the remaining opcodes, and having an <code>_ =&gt; unreachable!()</code> at the end. Someone who adds a new instruction that uses one of the <code>Load</code> or <code>Store</code> instruction formats may not realize they should update this <code>match</code> in the middle of the verifier.</p>\n</blockquote>",
        "id": 307571928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667408235
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167#discussion_r1012055719\">PR review comment</a>:</p>\n<blockquote>\n<p>This is algebraically equivalent to what you wrote, but makes more sense to me:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let needed_size = offset + access_size;\n        let oob_bytes = needed_size - valid_size;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 307571929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667408235
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167#pullrequestreview-1165587734\">PR review</a>.</p>",
        "id": 307571930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667408235
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167#discussion_r1012005047\">PR review comment</a>:</p>\n<blockquote>\n<p>In principle I suppose we could verify arithmetic where one operand is a <code>heap_addr</code> and the rest are all constants. I'm not suggesting that should be in this PR (unless you really want to), but maybe note it in this comment?</p>\n</blockquote>",
        "id": 307571931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667408235
    },
    {
        "content": "<p>afonso360 closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5167\">PR #5167</a>.</p>",
        "id": 312043453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669304878
    }
]