[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503\">PR #8503</a>.</p>",
        "id": 436107298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714413554
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503\">PR #8503</a>.</p>",
        "id": 436107299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714413554
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503\">PR #8503</a> from <code>jameysharp:vcode-split-preds</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This establishes the property that the VCode's various lists of ranges each fully cover the index range of another list. Previously, the block_succ_range list covered the first half of block_succs_preds, and the block_pred_range list covered the second half.</p>\n<p>While I was in the area, I replaced the O(n log n) sort in compute_preds_from_succs with a linear-time counting sort, which uses less temporary storage and directly computes the ranges we want as a byproduct.</p>\n</blockquote>",
        "id": 436107301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714413554
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503#pullrequestreview-2029235239\">PR review</a>:</p>\n<blockquote>\n<p>This is super-cool! IMHO this is the \"Book\" algorithm (in the <a href=\"https://en.wikipedia.org/w/index.php?title=Paul_Erd%C5%91s&amp;oldid=1220526564#:~:text=When%20he%20saw%20a%20particularly%20beautiful%20mathematical%20proof%20he%20would%20exclaim%2C%20%22This%20one%27s%20from%20The%20Book!%22%20This%20later%20inspired%20a%20book%20titled%20Proofs%20from%20the%20Book.\">Paul Erdos sense</a>) for finding preds from succs. Clean and direct.</p>\n<p>Out of curiosity have you measured the compile-time impact of this? I wonder if it'll show up in code with complex CFGs... we should take it in any case though.</p>\n</blockquote>",
        "id": 436111356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714414868
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503\">PR #8503</a>.</p>",
        "id": 436130246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714421437
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503#issuecomment-2083575293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8503\">PR #8503</a>:</p>\n<blockquote>\n<p>I hadn't measured, but according to Hyperfine, compiling the Spidermonkey benchmark from Sightglass is unchanged with this commit. I think that's unsurprising; the largest function has 2650 blocks and 6777 edges (before legalization and critical-edge splitting), and that's just not that many. But I'm still absurdly pleased with finding a situation where a linear-time sort is actually the best choice.</p>\n</blockquote>",
        "id": 436130285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714421449
    }
]