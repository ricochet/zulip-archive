[
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960#issuecomment-852989630\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960\">issue #2960</a>:</p>\n<blockquote>\n<p>@akirilov-arm I haven't looked into your patch in detail yet, but the s390x back-end already doesn't allocate any stack frame if it is not needed.   The <code>gen_prologue_frame_setup</code> routine always does nothing because I'm handling all frame setup in <code>gen_clobber_save</code>, and there I detect the case by simply noting that the required stack size is zero - computed as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stack_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">outgoing_args_size</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">clobber_size</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fixed_frame_storage_size</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(<code>outgoing_args_size</code> will be zero in a leaf function, <code>clobber_size</code> is zero if no call-saved register needs to be saved, and <code>fixed_frame_storage_size</code> is zero if there's no local stack variables or spill slots.)</p>\n</blockquote>",
        "id": 241141830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622637319
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960#issuecomment-903810165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960\">issue #2960</a>:</p>\n<blockquote>\n<p>I have enabled a couple of additional tests and made some minor changes, but I haven't checked how much work the x64 backend is going to require, which I am going to do next, so, please, do not merge yet.</p>\n<p>@cfallin It turns out that there are already tests that use the unwinding information in a suitable way - in particular, <code>traps::test_trap_trace</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b2bcdd13ecb87e9c7cdae9cead1e490bcd47e4fe/tests/all/traps.rs#L34\">mixes</a> both functions to which the optimization applies and to which it doesn't in the call stack.</p>\n<p>As for whether the defaults are sufficient in the AArch64 case - I checked the code that generated the DWARF Common Information Entry (CIE), and it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b2bcdd13ecb87e9c7cdae9cead1e490bcd47e4fe/cranelift/codegen/src/isa/aarch64/inst/unwind/systemv.rs#L9\">sets</a> the both the Canonical Frame Address (CFA) and the return address correctly (among other things), so an empty Frame Description Entry (FDE) should be fine. In fact, I compiled a simple C function and checked the unwinding information with <code>readelf -wf</code> - it was identical. Concerning Windows, AArch64 is currently unsupported on that platform anyway.</p>\n</blockquote>",
        "id": 250356955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629727883
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960#issuecomment-903810165\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2960\">issue #2960</a>:</p>\n<blockquote>\n<p>I have enabled a couple of additional tests and made some minor changes, but I haven't checked how much work the x64 backend is going to require, which I am going to do next, so, please, do not merge yet.</p>\n<p>@cfallin It turns out that there are already tests that use the unwinding information in a suitable way - in particular, <code>traps::test_trap_trace</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b2bcdd13ecb87e9c7cdae9cead1e490bcd47e4fe/tests/all/traps.rs#L34\">mixes</a> both functions to which the optimization applies and to which it doesn't in the call stack.</p>\n<p>As for whether the defaults are sufficient in the AArch64 case - I checked the code that generated the DWARF Common Information Entry (CIE), and it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b2bcdd13ecb87e9c7cdae9cead1e490bcd47e4fe/cranelift/codegen/src/isa/aarch64/inst/unwind/systemv.rs#L9\">sets</a> both the Canonical Frame Address (CFA) and the return address correctly (among other things), so an empty Frame Description Entry (FDE) should be fine. In fact, I compiled a simple C function and looked at the unwinding information with <code>readelf -wf</code> - it was identical. Concerning Windows, I believe AArch64 is currently unsupported by Cranelift on that platform anyway.</p>\n</blockquote>",
        "id": 250357515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629728122
    }
]