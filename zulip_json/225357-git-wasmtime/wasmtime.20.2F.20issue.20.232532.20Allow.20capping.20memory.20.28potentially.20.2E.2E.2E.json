[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2532#issuecomment-1117527051\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2532\">issue #2532</a>:</p>\n<blockquote>\n<p>I believe this can be done with <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.ResourceLimiter.html\"><code>ResourceLimiter</code></a> nowadays, so closing.</p>\n</blockquote>",
        "id": 281176378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651679947
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2532\">issue #2532</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<p>The ability to force-cap (exported) memories.</p>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<p>You can't cap at runtime the exported memories from emscripten. You can tell emscripten to import memory instead. WASI doesn't work with imported memory. (arguably this is an emscripten problem but WASI states memories are to be exported, not imported. so if the whole idea of importing memories goes against WASI anyway, why do it that way? being able to cap exported memories would be WASI-compliant on the other hand.)</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<p>Just let one be able to set the Memory max to a smaller value, as long as it's no smaller than the current Memory size.</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n<p>Alternatives:</p>\n<ul>\n<li>\n<p>Have WASI use a provided memory instead of automatically detecting exported memory.</p>\n<p>Breaking API change. Kind of a pain/unusable if WASI is needed by initializers.</p>\n</li>\n<li>\n<p>Have WASI use a provided module name instead of automatically detecting exported memory.</p>\n<p>Breaking API change, but would work with initializers.</p>\n</li>\n<li>\n<p>Make emscripten re-export the memory.</p>\n<p>While it should probably do this... eh, this isn't the emscripten repo.</p>\n</li>\n<li>\n<p>Allow fudging modules' exports.</p>\n<p>Being able to inject exports into a module and have those exports available through the Caller thing feels more like a gross hack than anything...</p>\n</li>\n</ul>\n<p>The only general-purpose solution is this proposal. Whether you have memory imports or exports, this proposal is always guaranteed to work, whereas the alternatives require a lot more cooperation from the wasm module (as they'd have to import memory instead of following WASI spec and exporting it).</p>\n</blockquote>",
        "id": 281176379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651679947
    }
]