[
    {
        "content": "<p>sezna opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Hello, thank you very much for all of the incredible software y'all are writing. I'm currently using Cranelift to generate native binaries for my project, and I'm continually impressed at the level of detail and effort that goes into these things. Not to mention the super helpful Zulip chat.</p>\n<p>In the aforementioned chat, I was receiving help from @bjorn3 and @cfallin on generating executables for an Apple silicon Mac. The following code does not successfully execute on an M-series processor Mac: <a href=\"https://gist.github.com/sezna/e358a9167d4ef3063f6cfe4ce4c2ad37\">https://gist.github.com/sezna/e358a9167d4ef3063f6cfe4ce4c2ad37</a></p>\n<p>Using the legacy linker, that is, adding <code>-Wl -ld_classic</code> to the clang invocation, _does_ work. However, as the legacy linker will likely be going away someday, I'm filing this issue in the hopes that we can figure out why it doesn't work with the current linker. Note that <code>cg_clif</code> also uses <code>-Wl -ld_classic</code>, so when the legacy linker is dropped, <code>cg_clif</code> could also have issues.</p>\n</blockquote>",
        "id": 441919793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717255525
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2143671958\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>I've reproduced the issue with arm64. If I change to use x86_64 it works with either linker.</p>\n<p>The linker error is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x100fa2f2c</span><span class=\"w\">  </span><span class=\"n\">__assert_rtn</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">72</span>\n<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x100ee9ec4</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">InputFiles</span><span class=\"p\">::</span><span class=\"n\">SliceParser</span><span class=\"p\">::</span><span class=\"n\">parseObjectFile</span><span class=\"p\">(</span><span class=\"n\">mach_o</span><span class=\"p\">::</span><span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">22976</span>\n<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x100ef6404</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">InputFiles</span><span class=\"p\">::</span><span class=\"n\">parseAllFiles</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">AtomFile</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">block_pointer</span><span class=\"p\">)::</span><span class=\"cp\">$_7</span><span class=\"p\">::</span><span class=\"n\">operator</span><span class=\"p\">()(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">FileInfo</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">420</span>\n<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x1975dc440</span><span class=\"w\">  </span><span class=\"n\">_dispatch_client_callout2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x1975f1544</span><span class=\"w\">  </span><span class=\"n\">_dispatch_apply_invoke_and_wait</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">224</span>\n<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x1975f084c</span><span class=\"w\">  </span><span class=\"n\">_dispatch_apply_with_attr_f</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1180</span>\n<span class=\"mi\">6</span><span class=\"w\">  </span><span class=\"mh\">0x1975f0a38</span><span class=\"w\">  </span><span class=\"n\">dispatch_apply</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">96</span>\n<span class=\"mi\">7</span><span class=\"w\">  </span><span class=\"mh\">0x100f741e0</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">AtomFileConsolidator</span><span class=\"p\">::</span><span class=\"n\">parseFiles</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">292</span>\n<span class=\"mi\">8</span><span class=\"w\">  </span><span class=\"mh\">0x100f12b08</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">9252</span>\n<span class=\"n\">ld</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">addrMode</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">addr_other</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">addFixupFromRelocations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">Relocations</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mf\">700.</span>\n<span class=\"n\">clang</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">linker</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">invocation</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>clang generates relocations like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">+</span><span class=\"mh\">0x18</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000018</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGE21</span><span class=\"w\">   </span><span class=\"n\">l_</span><span class=\"p\">.</span><span class=\"kt\">str</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">91000000</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"mi\">000000000000001</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGEOFF12</span><span class=\"w\">    </span><span class=\"n\">l_</span><span class=\"p\">.</span><span class=\"kt\">str</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">94000000</span><span class=\"w\">      </span><span class=\"n\">bl</span><span class=\"w\">  </span><span class=\"mh\">0x20</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">+</span><span class=\"mh\">0x20</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000020</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_BRANCH26</span><span class=\"w\"> </span><span class=\"n\">_puts</span>\n</code></pre></div>\n<p>cranelift generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0xc</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">000000000000001</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400000</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000020</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000002</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0x14</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000024</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_puts</span>\n<span class=\"w\">      </span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400042</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000028</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"n\">_puts</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">d63f0040</span><span class=\"w\">      </span><span class=\"n\">blr</span><span class=\"w\"> </span><span class=\"n\">x2</span>\n</code></pre></div>\n<p>If I hack cranelift to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0xc</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">000000000000001</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGE21</span><span class=\"w\">   </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">91000000</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000020</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGEOFF12</span><span class=\"w\">    </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000002</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0x14</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000024</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGE21</span><span class=\"w\">   </span><span class=\"n\">_puts</span>\n<span class=\"w\">      </span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">91000042</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000028</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGEOFF12</span><span class=\"w\">    </span><span class=\"n\">_puts</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">d63f0040</span><span class=\"w\">      </span><span class=\"n\">blr</span><span class=\"w\"> </span><span class=\"n\">x2</span>\n</code></pre></div>\n<p>then the linker error changes to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ld</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">invalid</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">ADRP</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"na\">puts</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>If I hack cranelift to generate this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0xc</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">000000000000001</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGE21</span><span class=\"w\">   </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">91000000</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000020</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_PAGEOFF12</span><span class=\"w\">    </span><span class=\"n\">_hello_world</span>\n<span class=\"w\">      </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">94000000</span><span class=\"w\">      </span><span class=\"n\">bl</span><span class=\"w\">  </span><span class=\"mh\">0x24</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_main</span><span class=\"o\">+</span><span class=\"mh\">0x14</span><span class=\"o\">&gt;</span>\n<span class=\"w\">        </span><span class=\"mi\">0000000000000024</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_BRANCH26</span><span class=\"w\"> </span><span class=\"n\">_puts</span>\n</code></pre></div>\n<p>then it links and runs successfully.</p>\n<p>Complete hack:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/abi.rs b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gh\">index 922e4ebfc..ea0bc22f3 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gu\">@@ -1027,7 +1027,8 @@ impl ABIMachineSpec for AArch64MachineDeps {</span>\n<span class=\"w\"> </span>    ) -&gt; SmallVec&lt;[Inst; 2]&gt; {\n<span class=\"w\"> </span>        let mut insts = SmallVec::new();\n<span class=\"w\"> </span>        match &amp;dest {\n<span class=\"gd\">-            &amp;CallDest::ExtName(ref name, RelocDistance::Near) =&gt; insts.push(Inst::Call {</span>\n<span class=\"gi\">+            //&amp;CallDest::ExtName(ref name, RelocDistance::Near) =&gt; insts.push(Inst::Call {</span>\n<span class=\"gi\">+            &amp;CallDest::ExtName(ref name, _) =&gt; insts.push(Inst::Call {</span>\n<span class=\"w\"> </span>                info: Box::new(CallInfo {\n<span class=\"w\"> </span>                    dest: name.clone(),\n<span class=\"w\"> </span>                    uses,\n<span class=\"gu\">@@ -1039,6 +1040,7 @@ impl ABIMachineSpec for AArch64MachineDeps {</span>\n<span class=\"w\"> </span>                    callee_pop_size,\n<span class=\"w\"> </span>                }),\n<span class=\"w\"> </span>            }),\n<span class=\"gi\">+/*</span>\n<span class=\"w\"> </span>            &amp;CallDest::ExtName(ref name, RelocDistance::Far) =&gt; {\n<span class=\"w\"> </span>                insts.push(Inst::LoadExtName {\n<span class=\"w\"> </span>                    rd: tmp,\n<span class=\"gu\">@@ -1058,6 +1060,7 @@ impl ABIMachineSpec for AArch64MachineDeps {</span>\n<span class=\"w\"> </span>                    }),\n<span class=\"w\"> </span>                });\n<span class=\"w\"> </span>            }\n<span class=\"gi\">+*/</span>\n<span class=\"w\"> </span>            &amp;CallDest::Reg(reg) =&gt; insts.push(Inst::CallInd {\n<span class=\"w\"> </span>                info: Box::new(CallIndInfo {\n<span class=\"w\"> </span>                    rn: *reg,\n<span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/inst/emit.rs b/cranelift/codegen/src/isa/aarch64/inst/emit.rs</span>\n<span class=\"gh\">index f9df1a8d2..0f89903a4 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/inst/emit.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/inst/emit.rs</span>\n<span class=\"gu\">@@ -3177,6 +3177,7 @@ impl MachInstEmit for Inst {</span>\n<span class=\"w\"> </span>                    let inst = Inst::Adrp { rd, off: 0 };\n<span class=\"w\"> </span>                    inst.emit(sink, emit_info, state);\n\n<span class=\"gi\">+/*</span>\n<span class=\"w\"> </span>                    // ldr rd, [rd, :got_lo12:X]\n<span class=\"w\"> </span>                    sink.add_reloc(Reloc::Aarch64Ld64GotLo12Nc, &amp;**name, 0);\n<span class=\"w\"> </span>                    let inst = Inst::ULoad64 {\n<span class=\"gu\">@@ -3185,6 +3186,17 @@ impl MachInstEmit for Inst {</span>\n<span class=\"w\"> </span>                        flags: MemFlags::trusted(),\n<span class=\"w\"> </span>                    };\n<span class=\"w\"> </span>                    inst.emit(sink, emit_info, state);\n<span class=\"gi\">+*/</span>\n<span class=\"gi\">+                    // add rd, rd, :lo12:X</span>\n<span class=\"gi\">+                    sink.add_reloc(Reloc::Aarch64Ld64GotLo12Nc, &amp;**name, 0);</span>\n<span class=\"gi\">+                    Inst::AluRRImm12 {</span>\n<span class=\"gi\">+                        alu_op: ALUOp::Add,</span>\n<span class=\"gi\">+                        size: OperandSize::Size64,</span>\n<span class=\"gi\">+                        rd,</span>\n<span class=\"gi\">+                        rn: rd.to_reg(),</span>\n<span class=\"gi\">+                        imm12: Imm12::maybe_from_u64(0).unwrap(),</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"gi\">+                    .emit(sink, emit_info, state);</span>\n<span class=\"w\"> </span>                } else {\n<span class=\"w\"> </span>                    // With absolute offsets we set up a load from a preallocated space, and then jump\n<span class=\"w\"> </span>                    // over it.\n<span class=\"gh\">diff --git a/cranelift/object/src/backend.rs b/cranelift/object/src/backend.rs</span>\n<span class=\"gh\">index 2d48e9b61..921c5273e 100644</span>\n<span class=\"gd\">--- a/cranelift/object/src/backend.rs</span>\n<span class=\"gi\">+++ b/cranelift/object/src/backend.rs</span>\n<span class=\"gu\">@@ -764,7 +764,8 @@ impl ObjectModule {</span>\n<span class=\"w\"> </span>                    r_type: object::elf::R_AARCH64_ADR_GOT_PAGE,\n<span class=\"w\"> </span>                },\n<span class=\"w\"> </span>                object::BinaryFormat::MachO =&gt; RelocationFlags::MachO {\n<span class=\"gd\">-                    r_type: object::macho::ARM64_RELOC_GOT_LOAD_PAGE21,</span>\n<span class=\"gi\">+                    //r_type: object::macho::ARM64_RELOC_GOT_LOAD_PAGE21,</span>\n<span class=\"gi\">+                    r_type: object::macho::ARM64_RELOC_PAGE21,</span>\n<span class=\"w\"> </span>                    r_pcrel: true,\n<span class=\"w\"> </span>                    r_length: 2,\n<span class=\"w\"> </span>                },\n<span class=\"gu\">@@ -775,7 +776,8 @@ impl ObjectModule {</span>\n<span class=\"w\"> </span>                    r_type: object::elf::R_AARCH64_LD64_GOT_LO12_NC,\n<span class=\"w\"> </span>                },\n<span class=\"w\"> </span>                object::BinaryFormat::MachO =&gt; RelocationFlags::MachO {\n<span class=\"gd\">-                    r_type: object::macho::ARM64_RELOC_GOT_LOAD_PAGEOFF12,</span>\n<span class=\"gi\">+                    //r_type: object::macho::ARM64_RELOC_GOT_LOAD_PAGEOFF12,</span>\n<span class=\"gi\">+                    r_type: object::macho::ARM64_RELOC_PAGEOFF12,</span>\n<span class=\"w\"> </span>                    r_pcrel: false,\n<span class=\"w\"> </span>                    r_length: 2,\n<span class=\"w\"> </span>                },\n</code></pre></div>\n<p>So it appears that cranelift isn't generating the correct relocations for ARM64 on macOS. I'll let those who know more about this stuff fix it properly.</p>\n</blockquote>",
        "id": 441996496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717295281
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194596360\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>A simple</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">FOO</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">bar</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rust_out</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">mach</span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">arm64</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"n\">__TEXT</span><span class=\"p\">,</span><span class=\"n\">__text</span><span class=\"p\">:</span>\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">       </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a9bf7bfd</span><span class=\"w\">      </span><span class=\"n\">stp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">!</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">910003</span><span class=\"n\">fd</span><span class=\"w\">      </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">94000000</span><span class=\"w\">      </span><span class=\"n\">bl</span><span class=\"w\">      </span><span class=\"mh\">0x8</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">+</span><span class=\"mh\">0x8</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000008</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_BRANCH26</span><span class=\"w\"> </span><span class=\"n\">_bar</span>\n<span class=\"w\">       </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">+</span><span class=\"mh\">0xc</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">000000000000000</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_bar</span>\n<span class=\"w\">      </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400000</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000010</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">       </span><span class=\"n\">_bar</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000001</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ltmp0</span><span class=\"o\">+</span><span class=\"mh\">0x14</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000014</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_FOO</span>\n<span class=\"w\">      </span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400021</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000018</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">       </span><span class=\"n\">_FOO</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a8c17bfd</span><span class=\"w\">      </span><span class=\"n\">ldp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">16</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">d65f03c0</span><span class=\"w\">      </span><span class=\"n\">ret</span>\n</code></pre></div>\n<p>with the LLVM backend. If I try to link it I get a linker error as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Undefined</span><span class=\"w\"> </span><span class=\"n\">symbols</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">architecture</span><span class=\"w\"> </span><span class=\"n\">arm64</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"_FOO\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nc\">rust_out</span><span class=\"p\">::</span><span class=\"n\">foo</span><span class=\"p\">::</span><span class=\"n\">he5a9b1ed9cb33bc0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust_out</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"w\">  </span><span class=\"s\">\"_bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nc\">rust_out</span><span class=\"p\">::</span><span class=\"n\">foo</span><span class=\"p\">::</span><span class=\"n\">he5a9b1ed9cb33bc0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust_out</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"w\">      </span><span class=\"n\">rust_out</span><span class=\"p\">::</span><span class=\"n\">foo</span><span class=\"p\">::</span><span class=\"n\">he5a9b1ed9cb33bc0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust_out</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"w\">  </span><span class=\"s\">\"_main\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"o\">&lt;</span><span class=\"n\">initial</span><span class=\"o\">-</span><span class=\"n\">undefines</span><span class=\"o\">&gt;</span>\n<span class=\"n\">ld</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">symbol</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">architecture</span><span class=\"w\"> </span><span class=\"n\">arm64</span>\n</code></pre></div>\n<p>If I apply the following patch to Cranelift:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/abi.rs b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gh\">index 922e4ebfc..6d43c1db6 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gu\">@@ -1027,7 +1027,7 @@ impl ABIMachineSpec for AArch64MachineDeps {</span>\n<span class=\"w\"> </span>    ) -&gt; SmallVec&lt;[Inst; 2]&gt; {\n<span class=\"w\"> </span>        let mut insts = SmallVec::new();\n<span class=\"w\"> </span>        match &amp;dest {\n<span class=\"gd\">-            &amp;CallDest::ExtName(ref name, RelocDistance::Near) =&gt; insts.push(Inst::Call {</span>\n<span class=\"gi\">+            &amp;CallDest::ExtName(ref name, _/*RelocDistance::Near*/) =&gt; insts.push(Inst::Call {</span>\n<span class=\"w\"> </span>                info: Box::new(CallInfo {\n<span class=\"w\"> </span>                    dest: name.clone(),\n<span class=\"w\"> </span>                    uses,\n</code></pre></div>\n<p>Relocations that print identical by <code>objdump -dr</code> are generated by Cranelift:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rust_out</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">mach</span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">arm64</span>\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"n\">__TEXT</span><span class=\"p\">,</span><span class=\"n\">__text</span><span class=\"p\">:</span>\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">__ZN8rust_out3foo17he5a9b1ed9cb33bc0E</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">       </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a9bf7bfd</span><span class=\"w\">      </span><span class=\"n\">stp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">!</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">910003</span><span class=\"n\">fd</span><span class=\"w\">      </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">d10043ff</span><span class=\"w\">      </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">16</span>\n<span class=\"w\">       </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">94000000</span><span class=\"w\">      </span><span class=\"n\">bl</span><span class=\"w\">      </span><span class=\"mh\">0xc</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">__ZN8rust_out3foo17he5a9b1ed9cb33bc0E</span><span class=\"o\">+</span><span class=\"mh\">0xc</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">000000000000000</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_BRANCH26</span><span class=\"w\"> </span><span class=\"n\">_bar</span>\n<span class=\"w\">      </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000000</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">__ZN8rust_out3foo17he5a9b1ed9cb33bc0E</span><span class=\"o\">+</span><span class=\"mh\">0x10</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000010</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_bar</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400000</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x0</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000014</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">       </span><span class=\"n\">_bar</span>\n<span class=\"w\">      </span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">90000007</span><span class=\"w\">      </span><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">__ZN8rust_out3foo17he5a9b1ed9cb33bc0E</span><span class=\"o\">+</span><span class=\"mh\">0x18</span><span class=\"o\">&gt;</span>\n<span class=\"w\">                </span><span class=\"mi\">0000000000000018</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">  </span><span class=\"n\">_FOO</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f94000e7</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x7</span><span class=\"p\">]</span>\n<span class=\"w\">                </span><span class=\"mi\">000000000000001</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"nc\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">       </span><span class=\"n\">_FOO</span>\n<span class=\"w\">      </span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">910003e8</span><span class=\"w\">      </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"w\">      </span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9000107</span><span class=\"w\">      </span><span class=\"kt\">str</span><span class=\"w\">     </span><span class=\"n\">x7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x8</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">910003e8</span><span class=\"w\">      </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f9400101</span><span class=\"w\">      </span><span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x8</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"mi\">30</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">910043</span><span class=\"n\">ff</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">16</span>\n<span class=\"w\">      </span><span class=\"mi\">34</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a8c17bfd</span><span class=\"w\">      </span><span class=\"n\">ldp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">16</span>\n<span class=\"w\">      </span><span class=\"mi\">38</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">d65f03c0</span><span class=\"w\">      </span><span class=\"n\">ret</span>\n</code></pre></div>\n<p>Yet the object file produced by LLVM gives a regular linker error due to undefined symbols, while the one produced by Cranelift crashes the linker:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x100e02074</span><span class=\"w\">  </span><span class=\"n\">__assert_rtn</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">72</span>\n<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x100d3edb8</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">InputFiles</span><span class=\"p\">::</span><span class=\"n\">SliceParser</span><span class=\"p\">::</span><span class=\"n\">parseObjectFile</span><span class=\"p\">(</span><span class=\"n\">mach_o</span><span class=\"p\">::</span><span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">22712</span>\n<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x100d4b830</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">InputFiles</span><span class=\"p\">::</span><span class=\"n\">parseAllFiles</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">AtomFile</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">block_pointer</span><span class=\"p\">)::</span><span class=\"cp\">$_8</span><span class=\"p\">::</span><span class=\"n\">operator</span><span class=\"p\">()(</span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">FileInfo</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">440</span>\n<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x189fa6428</span><span class=\"w\">  </span><span class=\"n\">_dispatch_client_callout2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x189fba850</span><span class=\"w\">  </span><span class=\"n\">_dispatch_apply_invoke3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">336</span>\n<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x189fa63e8</span><span class=\"w\">  </span><span class=\"n\">_dispatch_client_callout</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"mi\">6</span><span class=\"w\">  </span><span class=\"mh\">0x189fa7c68</span><span class=\"w\">  </span><span class=\"n\">_dispatch_once_callout</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">32</span>\n<span class=\"mi\">7</span><span class=\"w\">  </span><span class=\"mh\">0x189fbaeec</span><span class=\"w\">  </span><span class=\"n\">_dispatch_apply_invoke_and_wait</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">372</span>\n<span class=\"mi\">8</span><span class=\"w\">  </span><span class=\"mh\">0x189fb9e9c</span><span class=\"w\">  </span><span class=\"n\">_dispatch_apply_with_attr_f</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1212</span>\n<span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"mh\">0x189fba08c</span><span class=\"w\">  </span><span class=\"n\">dispatch_apply</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">96</span>\n<span class=\"mi\">10</span><span class=\"w\">  </span><span class=\"mh\">0x100dd0564</span><span class=\"w\">  </span><span class=\"n\">ld</span><span class=\"p\">::</span><span class=\"n\">AtomFileConsolidator</span><span class=\"p\">::</span><span class=\"n\">parseFiles</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">292</span>\n<span class=\"mi\">11</span><span class=\"w\">  </span><span class=\"mh\">0x100d6bee8</span><span class=\"w\">  </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">9532</span>\n<span class=\"n\">ld</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">addrMode</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">addr_other</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">addFixupFromRelocations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">Relocations</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mf\">701.</span>\n</code></pre></div>\n<p>This means there has to be a difference somewhere. If I run bingrep on both binaries, the relocations are shown in opposite order for both executable. For LLVM:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Relocations</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">Segment</span><span class=\"w\">   </span><span class=\"n\">Section</span><span class=\"w\">   </span><span class=\"n\">Count</span>\n<span class=\"w\">  </span><span class=\"n\">__TEXT</span><span class=\"w\">    </span><span class=\"n\">__text</span><span class=\"w\">    </span><span class=\"mi\">5</span>\n<span class=\"w\">         </span><span class=\"n\">Type</span><span class=\"w\">                             </span><span class=\"n\">Offset</span><span class=\"w\">   </span><span class=\"n\">Length</span><span class=\"w\">   </span><span class=\"n\">PIC</span><span class=\"w\">      </span><span class=\"n\">Extern</span><span class=\"w\">   </span><span class=\"n\">SymbolNum</span><span class=\"w\">   </span><span class=\"n\">Symbol</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"mh\">0x18</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x2</span><span class=\"w\">         </span><span class=\"n\">_FOO</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">      </span><span class=\"mh\">0x14</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x2</span><span class=\"w\">         </span><span class=\"n\">_FOO</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"mh\">0x10</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x3</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">      </span><span class=\"mh\">0xc</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x3</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_BRANCH26</span><span class=\"w\">             </span><span class=\"mh\">0x8</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x3</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n</code></pre></div>\n<p>and for Cranelift:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Relocations</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">Segment</span><span class=\"w\">   </span><span class=\"n\">Section</span><span class=\"w\">   </span><span class=\"n\">Count</span>\n<span class=\"w\">  </span><span class=\"n\">__TEXT</span><span class=\"w\">    </span><span class=\"n\">__text</span><span class=\"w\">    </span><span class=\"mi\">5</span>\n<span class=\"w\">         </span><span class=\"n\">Type</span><span class=\"w\">                             </span><span class=\"n\">Offset</span><span class=\"w\">   </span><span class=\"n\">Length</span><span class=\"w\">   </span><span class=\"n\">PIC</span><span class=\"w\">      </span><span class=\"n\">Extern</span><span class=\"w\">   </span><span class=\"n\">SymbolNum</span><span class=\"w\">   </span><span class=\"n\">Symbol</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_BRANCH26</span><span class=\"w\">             </span><span class=\"mh\">0xc</span><span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x2</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">      </span><span class=\"mh\">0x10</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x2</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"mh\">0x14</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x2</span><span class=\"w\">         </span><span class=\"n\">_bar</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGE21</span><span class=\"w\">      </span><span class=\"mh\">0x18</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x1</span><span class=\"w\">         </span><span class=\"n\">_FOO</span>\n<span class=\"w\">         </span><span class=\"n\">ARM64_RELOC_GOT_LOAD_PAGEOFF12</span><span class=\"w\">   </span><span class=\"mh\">0x1c</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\">     </span><span class=\"mh\">0x1</span><span class=\"w\">         </span><span class=\"n\">_FOO</span>\n</code></pre></div>\n<p>As hack I tried to reverse the order of relocations emitted by Cranelift too, which worked.</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/cranelift/codegen/src/isa/aarch64/abi.rs b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gh\">index 922e4ebfc..6d43c1db6 100644</span>\n<span class=\"gd\">--- a/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/src/isa/aarch64/abi.rs</span>\n<span class=\"gu\">@@ -1027,7 +1027,7 @@ impl ABIMachineSpec for AArch64MachineDeps {</span>\n<span class=\"w\"> </span>    ) -&gt; SmallVec&lt;[Inst; 2]&gt; {\n<span class=\"w\"> </span>        let mut insts = SmallVec::new();\n<span class=\"w\"> </span>        match &amp;dest {\n<span class=\"gd\">-            &amp;CallDest::ExtName(ref name, RelocDistance::Near) =&gt; insts.push(Inst::Call {</span>\n<span class=\"gi\">+            &amp;CallDest::ExtName(ref name, _/*RelocDistance::Near*/) =&gt; insts.push(Inst::Call {</span>\n<span class=\"w\"> </span>                info: Box::new(CallInfo {\n<span class=\"w\"> </span>                    dest: name.clone(),\n<span class=\"w\"> </span>                    uses,\n<span class=\"gh\">diff --git a/cranelift/object/src/backend.rs b/cranelift/object/src/backend.rs</span>\n<span class=\"gh\">index 2d48e9b61..c5a84f14c 100644</span>\n<span class=\"gd\">--- a/cranelift/object/src/backend.rs</span>\n<span class=\"gi\">+++ b/cranelift/object/src/backend.rs</span>\n<span class=\"gu\">@@ -501,7 +501,7 @@ impl ObjectModule {</span>\n<span class=\"w\"> </span>                ref name,\n<span class=\"w\"> </span>                flags,\n<span class=\"w\"> </span>                addend,\n<span class=\"gd\">-            } in &amp;symbol.relocs</span>\n<span class=\"gi\">+            } in symbol.relocs.iter().rev()</span>\n<span class=\"w\"> </span>            {\n<span class=\"w\"> </span>                let target_symbol = self.get_symbol(name);\n<span class=\"w\"> </span>                self.object\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 447470130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719492669
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194626549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Looks like the change to cranelift/codegen/src/isa/aarch64/abi.rs isn't even necessary at all. Only the relocation order reversing is required.</p>\n</blockquote>",
        "id": 447471945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719493131
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194649788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>That sounds better. I was comparing clang output instead of looking at what rustc with llvm backend did, so you can probably ignore my results.</p>\n</blockquote>",
        "id": 447473791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719493628
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194669348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>What would be the best place to add this relocation reversing code? object or cranelift-object? On the one hand it is something that would affect other projects too, so object makes more sense, on the other hand reversing the relocation order right before writing would require anyone who wants to round trip an object file through the object crate to reverse relocation order again before the <code>add_relocation</code> calls to produce a working object file.</p>\n</blockquote>",
        "id": 447475499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719494170
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194725714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>LLVM does the reverse in its <a href=\"https://github.com/llvm/llvm-project/blob/9e7defccdab8c21d70d8227c356a46db489dec2a/llvm/lib/MC/MachObjectWriter.cpp#L1004\">object writer</a>. I'm not certain which place is best, for the same reasons you give, but I'm inclined to fix it in <code>object</code>, since its primary use is for generating objects, not for round trips. It already does at least one other change that round trips need to account for (symbol name decorations).</p>\n</blockquote>",
        "id": 447481179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719495781
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2194749827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Opened <a href=\"https://github.com/gimli-rs/object/pull/702\">https://github.com/gimli-rs/object/pull/702</a></p>\n</blockquote>",
        "id": 447484788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719496449
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198190160\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>This has been fixed in object 0.36.1.</p>\n</blockquote>",
        "id": 447975655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719667092
    },
    {
        "content": "<p>sezna <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198201744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Thank you all who helped! </p>\n</blockquote>",
        "id": 447979028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719669115
    },
    {
        "content": "<p>sezna edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198201744\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Thank you all who looked into this! </p>\n</blockquote>",
        "id": 447979079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719669125
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198253590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>This issue can be closed now, right?</p>\n</blockquote>",
        "id": 447997734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719678548
    },
    {
        "content": "<p>camelid <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198275263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>I'm now getting <code>ld: warning: no platform load command found in '/path/to/cranelift/output.o', assuming: macOS</code>. This happens only with the default modern linker, but not the legacy linker. The executable still works, but it's unfortunate to get this warning. It seems like Julia encountered a similar issue and fixed it by including the macOS version number in the OS segment of the triple: <a href=\"https://github.com/julialang/julia/issues/51830\">julialang/julia#51830</a>. I'm using <code>target_lexicon::Triple::host</code>, so it could be an issue with that crate rather than cranelift?</p>\n</blockquote>",
        "id": 448007968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719683462
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198293580\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>We will need to call <a href=\"https://docs.rs/object/latest/object/write/struct.Object.html#method.set_macho_build_version\">set_macho_build_version</a> in cranelift-object to emit the LC_BUILD_VERSION load command.</p>\n</blockquote>",
        "id": 448013319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719686566
    },
    {
        "content": "<p>camelid <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198448744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>It seems like rustc has implemented a fix for the same issue: <a href=\"https://github.com/rust-lang/rust/issues/111384\">rust-lang/rust#111384</a>.</p>\n</blockquote>",
        "id": 448076806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719728070
    },
    {
        "content": "<p>camelid <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2198793563\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>It's unclear to me if cranelift-object should be exposing some function to set the macho build version or if it should handle it automatically. Do we have enough information in cranelift-object to target the exact version?</p>\n</blockquote>",
        "id": 448186251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719788714
    },
    {
        "content": "<p>madsmtm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380653926\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>I've looked into this recently, see <a href=\"https://github.com/rust-lang/rust/issues/129432\">https://github.com/rust-lang/rust/issues/129432</a> for the broader issue of deployment targets and SDKs.</p>\n<p>I'm pretty sure the correct behaviour for Cranelift would be to set the values on <code>MachOBuildVersion</code> as follows:</p>\n<ul>\n<li><code>platform</code>, depending on the target triple's <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.OperatingSystem.html\"><code>OperatingSystem</code></a> and <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.Environment.html\"><code>Environment</code></a>.</li>\n<li><code>minos</code> (deployment target), extracted from <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.OperatingSystem.html\">target_lexicon::OperatingSystem::MacOSX</a>.<ul>\n<li>Will need some work in <code>target_lexicon</code> to better support iOS/tvOS/watchOS/visionOS here too.</li>\n<li>I think you might need to error if the version isn't present in the given triple?<ul>\n<li>The system tooling (linker, assembler, <code>otool</code> etc.) requires a version here.</li>\n<li>At the very least don't emit the <code>LC_BUILD_VERSION</code> command in this case, and warn very strongly.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>sdk</code> (SDK version) to <code>0</code>. This is also what LLVM does by default if no SDK version is given, and the tooling shows <code>n/a</code> in that case.</li>\n</ul>\n<p>Note that this will not support older tooling that uses <code>LC_VERSION_MIN_IPHONEOS</code>, <code>LC_VERSION_MIN_MACOSX</code> etc. (we're talking somewhere around Xcode 9 or 10), but that's probably _fine_, we still support older OS versions the linker is going to patch it up such that you can still run the binaries on older OS versions.</p>\n</blockquote>",
        "id": 473352212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727532746
    },
    {
        "content": "<p>madsmtm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380653926\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>I've looked into this recently, see <a href=\"https://github.com/rust-lang/rust/issues/129432\">https://github.com/rust-lang/rust/issues/129432</a> for the broader Rust issue of deployment targets and SDKs.</p>\n<p>I'm pretty sure the correct behaviour for Cranelift would be to set the values on <code>MachOBuildVersion</code> as follows:</p>\n<ul>\n<li><code>platform</code>, depending on the target triple's <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.OperatingSystem.html\"><code>OperatingSystem</code></a> and <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.Environment.html\"><code>Environment</code></a>.</li>\n<li><code>minos</code> (deployment target), extracted from <a href=\"https://docs.rs/target-lexicon/0.12.16/target_lexicon/enum.OperatingSystem.html\">target_lexicon::OperatingSystem::MacOSX</a>.<ul>\n<li>Will need some work in <code>target_lexicon</code> to better support iOS/tvOS/watchOS/visionOS here too.</li>\n<li>I think you might need to error if the version isn't present in the given triple?<ul>\n<li>The system tooling (linker, assembler, <code>otool</code> etc.) requires a version here.</li>\n<li>At the very least don't emit the <code>LC_BUILD_VERSION</code> command in this case, and warn very strongly.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>sdk</code> (SDK version) to <code>0</code>. This is also what LLVM does by default if no SDK version is given, and the tooling shows <code>n/a</code> in that case.</li>\n</ul>\n<p>Note that this will not support older tooling that uses <code>LC_VERSION_MIN_IPHONEOS</code>, <code>LC_VERSION_MIN_MACOSX</code> etc. (we're talking somewhere around Xcode 9 or 10), but that's probably _fine_, we still support older OS versions the linker is going to patch it up such that you can still run the binaries on older OS versions.</p>\n</blockquote>",
        "id": 473352221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727532752
    },
    {
        "content": "<p>madsmtm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380654524\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<blockquote>\n<p>It's unclear to me if cranelift-object should be exposing some function to set the macho build version or if it should handle it automatically. Do we have enough information in cranelift-object to target the exact version?</p>\n</blockquote>\n<p>So to answer this directly, Cranelift should have enough information to set this _if_ it requires the deployment target / minimum OS version to be set in the target triple (e.g. that users pass <code>aarch64-apple-macosx12.0.0</code>, and not just <code>aarch64-apple-macosx</code>).</p>\n</blockquote>",
        "id": 473352360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727532877
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380725262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Cranelift uses target-lexicon for target triples, which aims to math rustc. Rustc target triples do not allow passing in the OS version. Instead rustc has a default for each target and additionally allows setting the same env vars that clang reads. There is no way currently to pass this information to Cranelift.</p>\n</blockquote>",
        "id": 473362667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727540499
    },
    {
        "content": "<p>madsmtm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380834366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<blockquote>\n<p>Cranelift uses target-lexicon for target triples, which aims to math rustc. Rustc target triples do not allow passing in the OS version. Instead rustc has a default for each target and additionally allows setting the same env vars that clang reads. There is no way currently to pass this information to Cranelift.</p>\n</blockquote>\n<p>Hmm, isn't <code>rustc</code> passing the LLVM target to Cranelift? <a href=\"https://github.com/rust-lang/rust/blob/612796c42077605fdd3c6f7dda05745d8f4dc4d8/compiler/rustc_codegen_cranelift/src/lib.rs#L262\">https://github.com/rust-lang/rust/blob/612796c42077605fdd3c6f7dda05745d8f4dc4d8/compiler/rustc_codegen_cranelift/src/lib.rs#L262</a></p>\n</blockquote>",
        "id": 473365531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727542741
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2380882328\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>Yes, but as it turns out target-lexicon is just lenient with parsing to parse most LLVM triples fine too. I'm pretty sure it would parse aarch64-apple-macosx12.0.0 as having the OS field set to macosx12.0.1, which is not an OS known to rustc or target-lexicon and thus would fail parsing.</p>\n</blockquote>",
        "id": 473381479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727554073
    },
    {
        "content": "<p>madsmtm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2381259341\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yes, but as it turns out target-lexicon is just lenient with parsing to parse most LLVM triples fine too. I'm pretty sure it would parse aarch64-apple-macosx12.0.0 as having the OS field set to macosx12.0.1, which is not an OS known to rustc or target-lexicon and thus would fail parsing.</p>\n</blockquote>\n<p>Nope, they do parse the version number, see <a href=\"https://github.com/bytecodealliance/target-lexicon/blob/7c80d459a9fdd121e9f23feb680c3db13c1baa39/src/targets.rs#L1393-L1421\">https://github.com/bytecodealliance/target-lexicon/blob/7c80d459a9fdd121e9f23feb680c3db13c1baa39/src/targets.rs#L1393-L1421</a>.</p>\n<p>In any case, I have opened <a href=\"https://github.com/bytecodealliance/target-lexicon/issues/111\">https://github.com/bytecodealliance/target-lexicon/issues/111</a> for figuring out how to resolve the <code>rustc</code>/LLVM discrepancy in <code>target-lexicon</code>.</p>\n<hr>\n<p>But if it is as you say, that Cranelift wants to accept <code>rustc</code> target triples, then it needs _some_ way to specify the deployment target on Apple platforms too.</p>\n<p>A simple way to do this would be to add <code>ObjectBuilder::apple_deployment_target(&amp;mut self, major: u16, minor: u8, patch: u8) -&gt; &amp;mut Self</code>, but I'd argue that it might be worthwhile to add such a setter to the <code>Triple</code> itself directly? At least, if Cranelift wants to at some point do an optimization based on the deployment target (which LLVM does all the time, though mostly for Objective-C code), then it'd be nice to have available earlier in the compilation pipeline.</p>\n</blockquote>",
        "id": 473426421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727598250
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2536552413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>We are using target-lexicon 0.13 now so we should now be able to call <code>set_macho_build_version</code> in cranelift-object and update <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/3ebaf047071afae07229ff8fb5e05527fa6d9645/src/lib.rs#L247\">https://github.com/rust-lang/rustc_codegen_cranelift/blob/3ebaf047071afae07229ff8fb5e05527fa6d9645/src/lib.rs#L247</a> to fix this issue.</p>\n</blockquote>",
        "id": 488144520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733936263
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730#issuecomment-2536552413\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8730\">issue #8730</a>:</p>\n<blockquote>\n<p>We are using target-lexicon 0.13 so we should now be able to call <code>set_macho_build_version</code> in cranelift-object and update <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/3ebaf047071afae07229ff8fb5e05527fa6d9645/src/lib.rs#L247\">https://github.com/rust-lang/rustc_codegen_cranelift/blob/3ebaf047071afae07229ff8fb5e05527fa6d9645/src/lib.rs#L247</a> to fix this issue.</p>\n</blockquote>",
        "id": 488144565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733936274
    }
]