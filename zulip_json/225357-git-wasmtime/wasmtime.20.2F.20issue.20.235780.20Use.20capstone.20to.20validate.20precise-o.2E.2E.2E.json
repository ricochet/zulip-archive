[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780#issuecomment-1430632616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780\">issue #5780</a>:</p>\n<blockquote>\n<blockquote>\n<p>The only additional feature I'd like to suggest is that I think we can get the blockN: labels back, and maybe add a comment with their byte offsets so we can more easily see where jumps refer to. MachBuffer::label_offsets is, if I'm reading this correctly, an array indexed by block number and holding the code offset of the first instruction of that block. Since branches may have been removed there can be multiple labels at the same offset, so before each instruction you can scan that array for all blocks at that offset.</p>\n</blockquote>\n<p>As we were discussing, we don't have access to <code>label_offsets</code> in <code>MachBufferFinalized</code>, which is unfortunate. Perhaps we can plumb that through in a future PR, as it would be really nice to get the block labels back.</p>\n</blockquote>",
        "id": 327908062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676425390
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780#issuecomment-1431343872\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780\">issue #5780</a>:</p>\n<blockquote>\n<p>I've been going through the remaining s390x changes.  Looking at broad categories I see:</p>\n<ul>\n<li>One actual encoding bug in cranelift: the last byte of <code>ahy</code> is 0x7a, not 0x4a!  This is wrong code-gen, I'll work on a fix.</li>\n<li>A few places where the cranelift disassembly output doesn't match the official format (operands swapped etc.).  Does not affect code-gen, but should still be fixed as long as we have our own disassembler.</li>\n<li><code>capstone</code> apparently does not support any z15 or later instructions right now - this will need to be fixed there.  </li>\n<li>Even with all the wrong and missing encodings fixed, we still have inline constants.  I think it would be better to use an out-of-line constant pool.  This used not to be possible, but I think now we have the required infrastructure.  The one thing I'm not certain is whether we can put constants <em>with relocations</em> in the pool right now.</li>\n<li>As mentioned above already, branch targets are now shown as plain offsets, but it is basically impossible to find out which instruction this refers to.</li>\n<li><code>capstore</code> seems to print all immediates in hex, while the current disassembler uses decimal ...</li>\n<li>We are no longer seeing any of cranelift-specific \"virtual\" instructions like <code>virtual_sp_offset_adjust</code>.  Not sure if this is problem.</li>\n<li>For some of the jump sequences, the new disassembler appears to display an optimized form, where the old one would show an intermediate form, e.g.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">clgr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r3</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">jge</span><span class=\"w\"> </span><span class=\"n\">label1</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">jg</span><span class=\"w\"> </span><span class=\"n\">label2</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block1</span>:\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">jg</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block2</span>:\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">jg</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"o\">-</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block3</span>:\n <span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lghi</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">br</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14</span>\n</code></pre></div>\n<p>I guess my primary question would be to what extent we're willing to rely on the quality of the <code>capstone</code> library here.  I'm not sure exactly who is writing / maintaining this -- looking at the web site, the last official release is as of nearly three years ago, and even in the github repo (assuming I'm looking at the correct one?) the last significant change to the <code>SystemZ</code> directory is five years old, which presumably explains why it doesn't support <code>z15</code> yet.  Even <code>X86</code> doesn't appear to be much more recent.</p>\n<p>The actual disassembly implementation in <code>capstone</code> seems to be done primarily via files copied from LLVM, so that should likely be correct as far as it goes.  But if this isn't regularly updated, we could run into issues with using recent instructions on other architectures as well ...<br>\n</p>\n</blockquote>",
        "id": 328004205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676466513
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780#issuecomment-1431370081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780\">issue #5780</a>:</p>\n<blockquote>\n<p>Zydis is a disassembler for x86 with a focus on correctness (even knows the difference between how Intel and AMD cpus decode insts) and performance. It has official rust bindings: <a href=\"https://github.com/zyantific/zydis-rs\">https://github.com/zyantific/zydis-rs</a> (licensed under MIT)</p>\n<p>BinaryNinja has an AArch64 disassembler generated from the actual ISA manual: <a href=\"https://binary.ninja/2021/04/05/groundup-aarch64.html\">https://binary.ninja/2021/04/05/groundup-aarch64.html</a>, <a href=\"https://github.com/Vector35/arch-arm64/tree/master/disassembler\">https://github.com/Vector35/arch-arm64/tree/master/disassembler</a> (licensed under Apache-2.0) Not sure how easy it is reusable outside of BinaryNinja though.</p>\n</blockquote>",
        "id": 328008203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676467684
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780#issuecomment-1432245054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5780\">issue #5780</a>:</p>\n<blockquote>\n<p>After the discussion today, I've added a section to each test output that also includes the printed vcode. This will help spot differences between what we're assuming we're producing and what we're actually producing, as well as help identify where <code>capstone</code> is falling short.</p>\n</blockquote>",
        "id": 328130613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676505232
    }
]