[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1232183938\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<p>Nice, that's surprisingly painless.</p>\n<p>Is 16-byte alignment always best? Could we get the maximum alignment of anything in the vcode constant pool instead, and if so, is that extra complexity worth-while?</p>\n<p>I suspect we don't care about wasting up to 15 extra bytes in the text section per function, and I know there are sometimes performance advantages to aligning x86 labels to 16-byte boundaries. So I imagine just picking a constant 16-byte alignment is not only good enough, but occasionally helpful. But I'm still curious if there are effects we care about.</p>\n</blockquote>",
        "id": 296223561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661894639
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1232199032\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<blockquote>\n<p>Nice, that's surprisingly painless.</p>\n<p>Is 16-byte alignment always best? Could we get the maximum alignment of anything in the vcode constant pool instead, and if so, is that extra complexity worth-while?</p>\n<p>I suspect we don't care about wasting up to 15 extra bytes in the text section per function, and I know there are sometimes performance advantages to aligning x86 labels to 16-byte boundaries. So I imagine just picking a constant 16-byte alignment is not only good enough, but occasionally helpful. But I'm still curious if there are effects we care about.</p>\n</blockquote>\n<p>That's what I thought about doing initially, but @alexcrichton pointed out that llvm always aligns functions to 16-byte boundaries, so it seemed easier to do that and potentially waste some bytes.</p>\n</blockquote>",
        "id": 296225820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661895718
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1232275787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<p>Before we merge this:</p>\n<ul>\n<li>@bjorn3 how do the changes to <code>cranelift-object</code> and <code>cranelift-jit</code> look?</li>\n<li>@uweigand is the default function alignment of 4 bytes for s390x correct?</li>\n</ul>\n</blockquote>",
        "id": 296236475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661902394
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1232560697\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<p>For the jit all references to EXECUTABLE_DATA_ALIGNMENT should use this new method. For object there is a reference at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/186c7c3b89c0e172ff39c0126ca71bf9e995dc8c/cranelift/object/src/backend.rs#L351\">https://github.com/bytecodealliance/wasmtime/blob/186c7c3b89c0e172ff39c0126ca71bf9e995dc8c/cranelift/object/src/backend.rs#L351</a> and equivalent for <code>define_function</code>. It needs another <code>std::cmp::min</code> wrapper.</p>\n</blockquote>",
        "id": 296269010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661930586
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1232684261\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<blockquote>\n<p>Before we merge this:<br>\n    * @uweigand is the default function alignment of 4 bytes for s390x correct?</p>\n</blockquote>\n<p>The minimum alignment required for <em>correctness</em> is just 2 bytes, and this should already come from <code>isa.symbol_alignment()</code> as @bjorn3 points out.   That said, having a default alignment of 4 bytes seems reasonable for performance reasons.  (Maybe even higher, but we should do performance measurements first to make sure it's an overall win.  So 4 is good for now.)</p>\n</blockquote>",
        "id": 296285276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661937368
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1233166501\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<blockquote>\n<p>For the jit all references to EXECUTABLE_DATA_ALIGNMENT should use this new method. For object there is a reference at</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/186c7c3b89c0e172ff39c0126ca71bf9e995dc8c/cranelift/object/src/backend.rs#L351\">https://github.com/bytecodealliance/wasmtime/blob/186c7c3b89c0e172ff39c0126ca71bf9e995dc8c/cranelift/object/src/backend.rs#L351</a></p>\n<p>and equivalent for <code>define_function</code>. It needs another <code>std::cmp::min</code> wrapper.</p>\n</blockquote>\n<p>I removed all uses of <code>EXECUTABLE_DATA_ALIGNMENT</code>, falling back on the max of the ISA's function alignment, symbol alignment, and the compiled function's required alignment. For follow-on work, would it be reasonable to remove the <code>function_alignment</code> field of the <code>ObjectBuilder</code> in <code>cranelift-object</code>?</p>\n</blockquote>",
        "id": 296402677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661963601
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826#issuecomment-1233862511\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4826\">issue #4826</a>:</p>\n<blockquote>\n<blockquote>\n<p>For follow-on work, would it be reasonable to remove the function_alignment field of the ObjectBuilder in cranelift-object?</p>\n</blockquote>\n<p>I do think so. All it seems to be used for is lucet to set function alignment to 16 bytes, which is exactly what this PR did.</p>\n</blockquote>",
        "id": 296530828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662017335
    }
]