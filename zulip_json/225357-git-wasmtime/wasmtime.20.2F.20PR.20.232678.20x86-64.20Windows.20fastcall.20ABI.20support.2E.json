[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a>.</p>",
        "id": 227381222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614054672
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a>.</p>",
        "id": 227381223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614054672
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds support for the \"fastcall\" ABI, which is the native C/C++ ABI<br>\non Windows platforms on x86-64. It is similar to but not exactly like<br>\nSystem V; primarily, its argument register assignments are different,<br>\nand it requires stack shadow space.</p>\n<p>Note that this also adjusts the handling of multi-register values in the<br>\nshared ABI implementation, and with this change, adjusts handling of<br>\n<code>i128</code>s on <em>both</em> Fastcall/x64 <em>and</em> SysV/x64 platforms. This was done<br>\nto align with actual behavior by the \"rustc ABI\" on both platforms, as<br>\nmapped out experimentally (Compiler Explorer link in comments).</p>\n<p>Note also that this does <em>not</em> add x64 unwind info on Windows. That will<br>\ncome in a future PR (but is planned!).</p>\n<p>Finally, note that this does not add any tests that actually <em>execute</em><br>\nwith the fastcall ABI on Windows, because we are not testing the new<br>\nbackend on Windows on our CI setup; test coverage is via filetests for<br>\nnow. We could possibly Windows-with-new-backend CI if we wanted to,<br>\nthough I don't think the Wasmtime-internal use cases will make use of<br>\nFastcall.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 227381224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614054672
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 227381343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614054796
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 227381428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614054892
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-596039528\">PR Review</a>.</p>",
        "id": 227389994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614063887
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r580806613\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This feature doesn't exist.</p>\n</blockquote>",
        "id": 227389995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614063887
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 227393537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614067108
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-596068673\">PR Review</a>.</p>",
        "id": 227393619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614067184
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r580829859\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, the changes in <code>parser.rs</code> were unintended, sorry about that -- part of my experiments in removing the old backend altogether. (I'll put together a draft PR for that soon-ish.) Reverted this file.</p>\n</blockquote>",
        "id": 227393620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614067184
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 227484243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614106600
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 227487102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614107663
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-599956053\">PR Review</a>.</p>",
        "id": 228005108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-599956053\">PR Review</a>.</p>",
        "id": 228005109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583929385\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Weird... this _is_ used by <code>SseOpcode</code>, right?</p>\n</blockquote>",
        "id": 228005110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583935758\">PR Review Comment</a>:</p>\n<blockquote>\n<p>documentation: not immediately obvious why this is needed.</p>\n</blockquote>",
        "id": 228005111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583932519\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we add an issue URL here?</p>\n</blockquote>",
        "id": 228005112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583934987\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not sure I understand why these should change... The default ABI should still be System V and that hasn't really changed, right?</p>\n</blockquote>",
        "id": 228005113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583939820\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It seems like we should be throwing/panicking before an <code>ABIArgPart::None</code> is ever allowed.</p>\n</blockquote>",
        "id": 228005114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378320
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583936844\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It sort of feels like the <code>Type</code> should be attached to <code>ABIArg</code>, not <code>ABIArgPart</code>--how do we know what <code>ABIArg</code>'s original type is?</p>\n</blockquote>",
        "id": 228005115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583941591\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wouldn't mind including links like <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention\">this one</a> in some of the docs.</p>\n</blockquote>",
        "id": 228005116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583945005\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps we should <code>debug_assert</code> or something here that we are still aligned?</p>\n</blockquote>",
        "id": 228005117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583947916\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think we need to reconcile this with <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-160#example-of-return-value-2---128-bit-result\">the example</a> from the Microsoft docs; their <code>__m128</code> is being returned in XMM0.</p>\n</blockquote>",
        "id": 228005118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583949056\">PR Review Comment</a>:</p>\n<blockquote>\n<p>BTW, what is happening with multi-return? Is some code somewhere else panicking to avoid this case or should we be panicking here?</p>\n</blockquote>",
        "id": 228005119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583944523\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We don't have a \"store on the stack\" <code>Inst</code>?</p>\n</blockquote>",
        "id": 228005120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583953277\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've seen this type of thing enough that we may want to create an inline function <code>align</code> somewhere.</p>\n</blockquote>",
        "id": 228005121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583951477\">PR Review Comment</a>:</p>\n<blockquote>\n<p>More detail? <code>panic!(\"unable to save fastcall callee register for the register class: {}\", r.get_class())</code></p>\n</blockquote>",
        "id": 228005122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583937515\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I guess the same applies to <code>purpose</code>: what happens if <code>self.parts()[1]</code> has a different purpose than <code>self.parts()[0]</code>?</p>\n</blockquote>",
        "id": 228005123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378321
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600002998\">PR Review</a>.</p>",
        "id": 228006141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583961539\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is used by <code>ValueRegs</code>'s packed encoding -- it doesn't have a length field, instead using \"invalid\" sentinels for parts beyond the needed part-count. Perhaps my reuse of <code>ValueRegs</code> rather than something simpler like <code>Vec&lt;ABIArgPart&gt;</code> is the real issue -- in hindsight it's probably better to just do that!</p>\n</blockquote>",
        "id": 228006143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378802
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600003453\">PR Review</a>.</p>",
        "id": 228006311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378872
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583961919\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The latter case violates an intended invariant (if that's not asserted I'll add it -- will check). The <code>Type</code> is actually specific to the <code>ABIArgPart</code> -- we use it to generate loads/stores just for that part.</p>\n</blockquote>",
        "id": 228006312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378872
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583962558\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Our prior <code>i128</code> impl for SysV ABI was actually wrong w.r.t. Rust's ABI; this PR aligns them for SysV as well. (I'm actually surprised we didn't catch this earlier, but I suppose all of the cg_clif tests so far haven't had an <code>i128</code> arg that straddles the 6th and 7th machine words, i.e. the half-reg-and-half-stack case, which is what causes the difference.)</p>\n</blockquote>",
        "id": 228006563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378968
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600004195\">PR Review</a>.</p>",
        "id": 228006564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614378968
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r583963786\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So this is actually the most interesting unresolved question here, I think. It appears that <code>rustc</code> behaves for ABI purposes as if <code>i128</code> is just two <code>i64</code>s; this affects returns (rax/rdx) and also the way that args are assigned (lower half can be in reg and upper half on stack).</p>\n<p>This raises the question whether cg_clif needs to change or whether we need to document that our <code>i128</code>s are basically lowered to <code>i64</code> pairs for ABI purposes and are not treated as true 128-bit values. The former is possible (and then we can just punt on <code>i128</code>s in fastcall) but requires changes on @bjorn3's end -- thoughts?</p>\n</blockquote>",
        "id": 228007012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614379176
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600005640\">PR Review</a>.</p>",
        "id": 228007013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614379176
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600113790\">PR Review</a>.</p>",
        "id": 228039728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614409654
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584070011\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Rustc forces all scalars &gt; 8 bytes to be passed by reference: <a href=\"https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler/rustc_target/src/abi/call/x86_win64.rs#L23\">https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler/rustc_target/src/abi/call/x86_win64.rs#L23</a> This means that i128 is never used as argument type by rustc for WindowsFastcall.</p>\n</blockquote>",
        "id": 228039729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614409654
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600212541\">PR Review</a>.</p>",
        "id": 228100694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614481858
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584223216\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Interesting -- that seems to be inconsistent with what the actual compiler output shows (or at least, I may be misunderstanding in which cases the \"scalars &gt; 8 bytes\" by-ref rule applies): in <a href=\"https://godbolt.org/z/PhG3ob\">this example</a>, the <code>i128</code> args are being passed as two <code>i64</code>s, by value. Does cg_clif perform this decomposition as well (i.e. use <code>i64</code>s in the CLIF)?</p>\n</blockquote>",
        "id": 228100695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614481858
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600330850\">PR Review</a>.</p>",
        "id": 228169408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614559869
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584392180\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@bjorn3 reading a bit more on the cg_clif side: I see at least <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/86c594426f247ae34ef12f5e4dfd97f5ffe093c8/src/codegen_i128.rs#L47\">here</a> a libcall invocation that uses <code>I128</code> types directly, and <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/src/abi/mod.rs\">in the general ABI mapping</a> I see some stuff related to \"spread\" args (used for tuples it seems?) but no explicit handling for <code>i128</code>s. (Does rustc's front/middle-end say that <code>i128</code>s are \"spread\" across <code>i64</code>s?)</p>\n<p>A possible solution: we could invent an ABI variant, essentially, that adds \"rustc-compatible <code>i128</code> handling\" on top of SysV or Fastcall. Perhaps <code>CallConv::SystemVRust</code> and <code>CallConv::WindowsFastcallRust</code>. Then we can keep the <code>i128</code>-becomes-two-<code>i64</code>s handling on the Cranelift side, and everything should basically work. When in vanilla <code>SystemV</code> or <code>WindowsFastcall</code>, I would then propose that we actually panic if we see an <code>i128</code>, unless/until we later implement this in a strictly spec-compliant way.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 228169409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614559869
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600440667\">PR Review</a>.</p>",
        "id": 228189899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614583007
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584488448\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I see at least here a libcall invocation that uses I128 types directly</p>\n</blockquote>\n<p>In the Windows support PR these arguments are passed by reference when comliling for Windows: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/1145/files#diff-0c7a9de394376b33448baed91218bb8167a6d7cac581590442cfb81b9f6e63f7R39\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/1145/files#diff-0c7a9de394376b33448baed91218bb8167a6d7cac581590442cfb81b9f6e63f7R39</a></p>\n<blockquote>\n<p>Does rustc's front/middle-end say that i128s are \"spread\" across i64s?</p>\n</blockquote>\n<p>No, it just directly passes it to LLVM for SystemV and forces it to be passed Indirect on Windows.</p>\n<blockquote>\n<p>A possible solution: we could invent an ABI variant, essentially, that adds \"rustc-compatible i128 handling\" on top of SysV or Fastcall.</p>\n</blockquote>\n<p>The SystemV abi defines how <code>__int128</code> needs to be passed.</p>\n</blockquote>",
        "id": 228189900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614583007
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600696824\">PR Review</a>.</p>",
        "id": 228224149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614603026
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584685857\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Interesting -- that seems to be inconsistent with what the actual compiler output shows (or at least, I may be misunderstanding in which cases the \"scalars &gt; 8 bytes\" by-ref rule applies): in this example, the i128 args are being passed as two i64s, by value. Does cg_clif perform this decomposition as well (i.e. use i64s in the CLIF)?</p>\n</blockquote>\n<p>In that example the \"Rust\" abi is used instead of the \"C\" abi. The \"Rust\" abi has the extra rule that any value that fits into two registers is given the <code>Cast(CastTarget::from(Reg { kind: RegKind::Integer, size: 128 }))</code> pass mode. This is independent of the real type of the value. It even works for structs. <a href=\"https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/compiler/rustc_middle/src/ty/layout.rs#L2894-L2897\">https://github.com/rust-lang/rust/blob/d2731d8e9338d8fe844e19d3fbb39617753e65f4/compiler/rustc_middle/src/ty/layout.rs#L2894-L2897</a></p>\n</blockquote>",
        "id": 228224150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614603027
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600962330\">PR Review</a>.</p>",
        "id": 228266851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614618201
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584889631\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, indeed. I hadn't realized that the Rust ABI would differ here (my naive understanding was that it had mostly to do with struct layout details, eg allowing fields to be reordered, but I see that's not the only thing!).</p>\n<p>So, my earlier thoughts stemmed from that Compiler Explorer example and my resulting assumption that rustc was doing something weird and not-quite-standards-compliant with <code>i128</code>s, but that we would have to handle this in Cranelift in a function that specifies standard ABI. But, indeed, if I add <code>extern \"C\"</code> to the signature, I see that rustc does the Fastcall-compliant thing with by-ref args.</p>\n<p>I see now that (correct me if I am wrong here) it appears that cg_clif will do the appropriate translation to SysV/Fastcall-compliant details for a Rust ABI signature; so we don't need to special-case this, and instead just need to implement the standard and nothing more.</p>\n<p>The part I was hoping to avoid (\"panic if we see an i128\") was having to implement the by-ref semantics as well for <code>i128</code>, as this adds extra complexity and another case. The only time that we would see this would be when interfacing with a C-ABI function that uses <code>i128</code>; either as an <code>extern \"C\"</code> in rustc + cg_clif, or with an <code>__int128</code> in a hypothetical future C/C++ frontend to Cranelift (or some other language that has 128-bit types). But, at least the first case (<code>extern \"C\" with i128 with with cg_clif</code>) is possible to trigger, so we should handle it.</p>\n<p>I'll (i) implement by-ref for i128s, (ii) rip out the Rust ABI-specific details on Fastcall, and then (iii) add a whole bunch of tests for these dark corners.</p>\n</blockquote>",
        "id": 228266852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614618201
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584889631\">PR Review Comment</a>.</p>",
        "id": 228267382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614618379
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584889631\">PR Review Comment</a>.</p>",
        "id": 228267512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614618436
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600977836\">PR Review</a>.</p>",
        "id": 228269269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619092
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584901934\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>rip out the Rust ABI-specific details on Fastcall</p>\n</blockquote>\n<p>If you are talking about passing i128 in two registers, that is still necessary for <code>extern \"Rust\"</code> as the abi of cg_clif and cg_llvm should match.</p>\n</blockquote>",
        "id": 228269270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619093
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600982978\">PR Review</a>.</p>",
        "id": 228270129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619422
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584905915\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hmm, now I am confused again. I had meant the code that implements \"<code>i128</code> at CLIF level becomes two <code>i64</code>s in fastcall signature\", because that is not Fastcall-compliant. If a frontend (cg_clif or any other) does this split, though, then that would still work as any other <code>i64</code> args would.</p>\n<p>So to clarify: are you saying that <code>cg_clif</code> will pass <code>i128</code> args for <code>extern \"Rust\"</code> functions? (My understanding is no...)</p>\n</blockquote>",
        "id": 228270130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619423
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600984504\">PR Review</a>.</p>",
        "id": 228270414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619521
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584907125\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For <code>extern \"C\"</code> functions it will pass it by reference. For <code>extern \"Rust\"</code> functions it will pass <code>i128</code> args.</p>\n</blockquote>",
        "id": 228270415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619522
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-600988953\">PR Review</a>.</p>",
        "id": 228271196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619800
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584910863\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>For extern \"Rust\" functions it will pass i128 args.</p>\n</blockquote>\n<p>OK, so then for Rust ABI compatibility, this requires functionality in Cranelift that goes beyond standard Fastcall, right? If we implement fastcall-compliant handling of <code>i128</code>s, then Cranelift will generate by-ref arg passing code, and this will not be compatible with other Rust code (which splits into two <code>i64</code> registers), as shown in the Compiler Explorer example. This was the reason I had suggested Rust-specific variants of <code>CallConv</code> above. Does that make sense?</p>\n</blockquote>",
        "id": 228271197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614619800
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-601000290\">PR Review</a>.</p>",
        "id": 228273525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614620551
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r584919604\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Makes sense, though I think it is more of an LLVM-specific variant, as it is an LLVM extension to support i128 passed in two registers. LLVM also for example supports passing three return values in registers, unlike SystemV which only allows two. This extension is supported by the old x86 backend already, but not in the new backend. cg_clif doesn't use more than two return registers, so that extension doesn't matter.</p>\n</blockquote>",
        "id": 228273527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614620551
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603679260\">PR Review</a>.</p>",
        "id": 228711583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829522
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587055993\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The <code>BMI2</code> variant is never constructed and was triggering a warning, so I've moved the pragma there, though I can remove this drive-by warning fixup and we can do a separate warning cleanup (the new backend build isn't fully warning-clean yet) if you'd prefer!</p>\n</blockquote>",
        "id": 228711584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829523
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228711592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829536
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603679369\">PR Review</a>.</p>",
        "id": 228711593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829538
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587056259\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 228711594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829538
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603679711\">PR Review</a>.</p>",
        "id": 228711671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829586
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587056865\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Changed -- this has now been refactored so that we have a <code>Vec</code> of <code>ABIArgSlot</code>s (old \"parts\") and don't overload <code>ValueRegs</code>.</p>\n</blockquote>",
        "id": 228711672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829586
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603679951\">PR Review</a>.</p>",
        "id": 228711697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829625
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587057372\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Fixed this in refactor -- <code>purpose</code> is part of toplevel <code>ABIArg::Slots</code> variant which contains vec of slot descriptions, so there is no duplication.</p>\n</blockquote>",
        "id": 228711698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829625
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228711751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829681
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603680328\">PR Review</a>.</p>",
        "id": 228711758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829683
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587058119\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 228711760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829683
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603680467\">PR Review</a>.</p>",
        "id": 228711815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829702
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587058379\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Fixed via refactor; not using <code>ValueRegs</code> anymore so no <code>None</code> sentinel variant is needed.</p>\n</blockquote>",
        "id": 228711816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829702
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603680576\">PR Review</a>.</p>",
        "id": 228711830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829726
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587058695\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Did one better; just used alignment helper.</p>\n</blockquote>",
        "id": 228711831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829726
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603680796\">PR Review</a>.</p>",
        "id": 228711860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829760
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587059165\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Resolved in latest update -- this behavior is now under the <code>enable_llvm_abi_extensions</code> flag as discussed in the comments below.</p>\n</blockquote>",
        "id": 228711861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829761
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603680975\">PR Review</a>.</p>",
        "id": 228711885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829794
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587059538\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done! <code>align_to()</code> now used throughout this ABI code (and corresponding aarch64 code too).</p>\n</blockquote>",
        "id": 228711886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829794
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603681028\">PR Review</a>.</p>",
        "id": 228711899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829803
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587059675\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 228711900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829803
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603681416\">PR Review</a>.</p>",
        "id": 228712034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829875
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587060446\">PR Review Comment</a>:</p>\n<blockquote>\n<p>With more return values, we use the return-area pointer, similar to what happens under SysV. This is, properly speaking, an extension (for both ABIs); but it's necessary for e.g. Wasm multi-value support.</p>\n</blockquote>",
        "id": 228712035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614829875
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228712164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614830006
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603682438\">PR Review</a>.</p>",
        "id": 228712254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614830071
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#discussion_r587062734\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Switched to the usual <code>store</code> helper; not sure why the old code didn't use this.</p>\n</blockquote>",
        "id": 228712255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614830071
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-603683182\">PR Review</a>.</p>",
        "id": 228712421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614830208
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228714736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614831948
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228721882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614837346
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228722002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614837459
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228722783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614838116
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228816480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614879390
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678#pullrequestreview-605441521\">PR Review</a>.</p>",
        "id": 228991188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614965001
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a> from <code>x64-fastcall</code> to <code>main</code>.</p>",
        "id": 228996636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614967143
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2678\">PR #2678</a>.</p>",
        "id": 229004210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614970008
    }
]