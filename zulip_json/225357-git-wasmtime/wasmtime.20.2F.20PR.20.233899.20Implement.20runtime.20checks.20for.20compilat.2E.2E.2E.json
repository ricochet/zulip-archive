[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">PR #3899</a> from <code>validate-flags</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit fills out a few FIXME annotations by implementing run-time<br>\nchecks that when a <code>Module</code> is created it has compatible codegen<br>\nsettings for the current host (as <code>Module</code> is proof of \"this code can<br>\nrun\"). This is done by implementing new <code>Engine</code>-level methods which<br>\nvalidate compiler settings. These settings are validated on<br>\n<code>Module::new</code> as well as when loading serialized modules.</p>\n<p>Settings are split into two categories, one for \"shared\" top-level<br>\nsettings and one for ISA-specific settings. Both categories now have<br>\nallow-lists hardcoded into <code>Engine</code> which indicate the acceptable values<br>\nfor each setting (if applicable). ISA-specific settings are checked with<br>\nthe Rust standard library's <code>std::is_x86_feature_detected!</code> macro. Other<br>\nmacros for other platforms are not stable at this time but can be added<br>\nhere if necessary.</p>\n<p>Closes #3897</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 274597141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646769294
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#pullrequestreview-903518339\">PR review</a>.</p>",
        "id": 274599785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646770349
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#pullrequestreview-903518339\">PR review</a>.</p>",
        "id": 274599786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646770349
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#discussion_r822024450\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we use a <code>OnceCell</code> to implement the lazy computation here? Effectively we're computing either a boolean (\"are we compatible\") or a <code>Result</code>, depending on how you want to look at it; maybe a <code>OnceCell&lt;Result&gt;</code> to cache our return value?</p>\n</blockquote>",
        "id": 274599790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646770349
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#discussion_r822029912\">PR review comment</a>:</p>\n<blockquote>\n<p>This is also a duplication of code from Cranelift and ideally we should be able to (i) get the native flags from <code>cranelift-native</code>, then (ii) use a \"compatibility\" or \"subtyping\" predicate, I think. The toplevel <code>Engine</code> for <code>wasmtime</code> feels like the wrong spot to be defining specific CPU flags and detecting them if we also have the same code elsewhere...</p>\n</blockquote>",
        "id": 274599791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646770349
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#discussion_r822027205\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm -- I definitely understand the convenience of putting this compatibility-table here, but it feels like it should either be part of the <code>wasmtime-cranelift</code> crate or, maybe, something in Cranelift (or some combination). Basically there are two sources of truth we really need to query:</p>\n<ul>\n<li>Does a given flag change codegen, such that if flipped, the generated code will be incompatible (this covers e.g. the calling-convention-related stuff);</li>\n<li>Is a given flag required to be on in order for some Wasm feature to work (this covers e.g. reftypes requiring safepoints).</li>\n</ul>\n<p>Maybe the former in <code>cranelift-codegen</code> -- <code>are_flags_abi_compatible</code> perhaps? -- and the latter in <code>wasmtime-cranelift</code>?</p>\n<p>Seen another way, this is kind of a subtyping relationship. Cranelift should be able to tell us if one set of flags are a \"subtype\" of another (are compatible); and we get the minimum flags from Wasmtime's Cranelift glue, given the features it needs, then check if actual flags are a subtype of that. Does that make sense?</p>\n<p>To be concrete, the downside of the current approach that I worry about is just that this creates some unfortunate tight coupling and distributed definition of truth in the source. It's manageable here in any case because we're all in one big repo, but it's sort of an indication for me that we should have better compatibility abstractions in the API in general.</p>\n</blockquote>",
        "id": 274599792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646770349
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">PR #3899</a> from <code>validate-flags</code> to <code>main</code>.</p>",
        "id": 274602048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646771403
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">PR #3899</a> from <code>validate-flags</code> to <code>main</code>.</p>",
        "id": 274603520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646772050
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#pullrequestreview-903560852\">PR review</a>.</p>",
        "id": 274603801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646772198
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#discussion_r822054636\">PR review comment</a>:</p>\n<blockquote>\n<p>That makes sense to me but the difficulty here I think is that we need this check to work even if cranelift is not compiled into Wasmtime. When we're loading precompiled modules from disk into a Wasmtime without Cranelift we still want to check that all the various features are compatible.</p>\n<p>I do agree that this is a tight coupling, but it was sort of the best I could come up with for now. I figured this was small enough it'd be ok to punt to some future state as the settings haven't changed that much in awhile I think. I also don't know of a better way to do this...</p>\n</blockquote>",
        "id": 274603802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646772199
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#pullrequestreview-903562157\">PR review</a>.</p>",
        "id": 274603972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646772282
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#discussion_r822055583\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I was wondering originally if we may want to drop Wasmtime's usage of <code>cranelift-native</code>, but the tests here are all subtly different where here we're enumerating based on what was enabled and checking whether the feature is available, whereas cranelift-native is the reverse where it's based on what's available it enables features. I could maybe export something like a fancy macro which iterates over the feature/name pairs but that didn't seem really all that better (and additionally doesn't solve the issue of Wasmtime-not-depending-on-Cranelift still needs to check this)</p>\n</blockquote>",
        "id": 274603973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646772283
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899#pullrequestreview-903613927\">PR review</a>.</p>",
        "id": 274610876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646775481
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3899\">PR #3899</a>.</p>",
        "id": 274706361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646840787
    }
]