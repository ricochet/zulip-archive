[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-768855331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>Sorry, in this case the doc-comment is inaccurate (my fault for the ambiguity!) -- the requirement imposed by the emission code, and what should be documented, is that <code>gen_nop()</code> returns a nonzero-sized NOP if the requested size is nonzero. An infinite loop could arise only if that is violated.</p>\n<p>I don't think it makes sense to otherwise artificially limit the interface with an assert -- a zero-sized NOP is a legitimate need in some cases (e.g. when one must return an instruction but no machine code is needed).</p>\n<p>Would you mind changing the PR to update the doc-comment on the <code>MachInst</code> interface instead? Thanks!</p>\n</blockquote>",
        "id": 224291646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611818631
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-768858795\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>Ah, actually, there is one thing that this change fixes: <code>gen_nop(x)</code> with <code>x == 16*n</code> would produce a zero-sized NOP. That won't arise with current alignment constants, but it's a potential future issue. I think what we actually want is <code>std::cmp::min(x, 16)</code> (i.e., clamp to an upper bound of 16 bytes). Thanks for the scrutiny here!</p>\n</blockquote>",
        "id": 224291974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611818997
    },
    {
        "content": "<p>kaseyc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-768872513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>Thanks! Updated the condition and the machinst comment.</p>\n<p>Given that the 16*x edge case is currently not possible to generate, I imagine that writing a test for it is not possible.</p>\n<p>Both the aarch64 and arm32 backends have asserted minimum sizes. Should they also be updated to allow a zero-sized return (in a follow up commit)?</p>\n</blockquote>",
        "id": 224294004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611820789
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-769067481\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>Is it possible it's actually <code>min(x, 15)</code>, note the 15 and not 16, since we want something meaningful modulo 16? A 16-sized nop would be the same as 0 (mod 16), and there's no preferred encoding for such a nop.</p>\n</blockquote>",
        "id": 224327905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611841973
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-769277635\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>So I'm paging this back in more now: I note that we also had <code>gen_zero_len_nop()</code>. We could eliminate that and just do a <code>gen_nop(0)</code>; I'm not sure why we had the separation in the first place.</p>\n<p>Re: x86 max nop size -- yes, 15, not 16, agreed.</p>\n</blockquote>",
        "id": 224368946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611857675
    },
    {
        "content": "<p>kaseyc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-769407429\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>Re 15 vs 16, the nop constructor also seems to think 16 is a valid value:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/d1c1cb6a25c7256c82811d6b9ddc60c2a60da075/cranelift/codegen/src/isa/x64/inst/mod.rs#L569\">https://github.com/bytecodealliance/wasmtime/blob/d1c1cb6a25c7256c82811d6b9ddc60c2a60da075/cranelift/codegen/src/isa/x64/inst/mod.rs#L569</a></p>\n<p>Although the actual emitter only handles up to 9 bytes in a single instruction <a href=\"https://github.com/bytecodealliance/wasmtime/blob/95822a54f2d31c6bb02f1519059eb2a6b4c163ce/cranelift/codegen/src/isa/x64/inst/emit.rs#L2907\">src</a></p>\n<p>Going above 9 seems to require more special casing. AMD provides a table for up to 15, and newer Intel processors may also be able to handle it:<br>\n<a href=\"https://developer.amd.com/wordpress/media/2013/12/55723_SOG_Fam_17h_Processors_3.00.pdf\">AMD Manual</a><br>\n<a href=\"https://reviews.llvm.org/D75945\">LLVM #1</a><br>\n<a href=\"https://reviews.llvm.org/D42616\">LLVM #2</a></p>\n<p>This is getting slightly off topic . But it seems like 15 is a reasonable max size.</p>\n<p>It also looks like there are no actual uses of gen_zero_len_nop, so if you prefer I could fold that into gen_nop everywhere.</p>\n</blockquote>",
        "id": 224394638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611869042
    },
    {
        "content": "<p>kaseyc <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614#issuecomment-769582145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2614\">Issue #2614</a>:</p>\n<blockquote>\n<p>I've updated the code to change the max size to 15.</p>\n<p>gen_zero_len_nop can't be entirely removed, as it is part of the regalloc crate's Function trait. Though the MachInst implementations could dropped in favor of gen_nop(0).</p>\n</blockquote>",
        "id": 224432030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611897649
    }
]