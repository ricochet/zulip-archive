[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8783\">issue #8783</a>:</p>\n<blockquote>\n<p>Currently, Cranelift with regalloc2 supports a maximum of <code>2^21</code> (2097152, a little over two million) virtual registers in VCode; in turn this limits the number of SSA values we support. This implementation limit is generally not an issue (we've lived with it for two years at least!) but sometimes does come up with giant functions produced by tooling -- for example, long initialization sequences, or giant state machines, or overeager inlining.</p>\n<p>The origin of this limit is the <a href=\"https://github.com/bytecodealliance/regalloc2/blob/f4812a23efc82466ed8377c6e11113134e13f425/src/lib.rs#L529-L544\">dense packing of a <code>regalloc2::Operand</code> into 32 bits</a>. The dense packing in turn is extremely important for performance: earlier performance experiments with regalloc2 showed in the neighborhood of 5-10% degradations from moving to a 64-bit Operand. It turns out to be very important for cache locality to have the vreg, its kind and location of mention (early/late use/def), and any constraint (physical reg, stack, reuse, ...) all in one place and in a dense list in each liverange.</p>\n<p>That said, if the alternative is to fail allocation entirely, a little slowdown doesn't seem like such a bad alternative: so this issue proposes a <em>hybrid</em> solution where we instantiate regalloc2 twice, with a trait parameter that can plug in two implementations of <code>Operand</code>, and choose which of these to use at the Cranelift level. At the point that we are creating <code>Operand</code>s, in a pass after lowering to build a linear array of them, we know how many vregs have been used; and earlier stages use full <code>u32</code>s to store vreg numbers, so we can support large counts up to that pass. The idea would be to include two <code>Vec</code>s in VCode -- <code>Vec&lt;Operand&gt;</code> and <code>Vec&lt;BigOperand&gt;</code> or similar -- and fill one or the other in the collection pass, then invoke a statically-monomorphized entry point to regalloc2 with a <code>regalloc2::Function</code> implementation on one or the other operand kind. (This may require a little trickery to \"specialize\" to reading from one vec or the other, maybe via an adapter struct, I'm not sure; but seems doable.)</p>\n<p>This way, we would retain exactly the same behavior and performance as today for all functions that successfully compile today (except for an extra 24 bytes in <code>VCode</code> for that empty <code>Vec</code>); and we could support a full 32-bit range for vregs as well.</p>\n</blockquote>",
        "id": 444288630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718212260
    }
]