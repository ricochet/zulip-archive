[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a> from <code>fitzgen:stack-to-pop-in-ret</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is necessary for implementing callee-pops calling conventions, as is required for tail calls. This is just a small part of tail calls, and doesn't implement everything, but is a good piece to land on its own so that eventual PR isn't so huge.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 362309908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485180
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362309911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485180
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362309912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485181
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>:</p>\n<blockquote>\n<p>This is necessary for implementing callee-pops calling conventions, as is required for tail calls. This is just a small part of tail calls, and doesn't implement everything, but is a good piece to land on its own so that eventual PR isn't so huge. Just trying to shrink the yak stack.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 362309932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485196
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#pullrequestreview-1451917241\">PR review</a>:</p>\n<blockquote>\n<p>Looks great; thanks for splitting this out!</p>\n<p>One thought on the pseudo-assembly printing in VCode (for aarch64 but similar thoughts on riscv64); and one request for a bit more in a doc-comment; but otherwise LGTM.</p>\n</blockquote>",
        "id": 362311269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485802
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#pullrequestreview-1451917241\">PR review</a>:</p>\n<blockquote>\n<p>Looks great; thanks for splitting this out!</p>\n<p>One thought on the pseudo-assembly printing in VCode (for aarch64 but similar thoughts on riscv64); and one request for a bit more in a doc-comment; but otherwise LGTM.</p>\n</blockquote>",
        "id": 362311274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485802
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1210884589\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than print a pseudo-inst here, could we print e.g. `add sp, sp, #imm ; ret\" or similar?</p>\n</blockquote>",
        "id": 362311284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485803
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1210885834\">PR review comment</a>:</p>\n<blockquote>\n<p>\"At the same time as returning\" is slightly ambiguous: does the pop happen logically just before popping the return address, or just after? (I think after?) A diagram of the stack before-and-after might be helpful actually, if it's not too much trouble to draw one quickly!</p>\n</blockquote>",
        "id": 362311286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685485803
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1210973695\">PR review comment</a>:</p>\n<blockquote>\n<p>The exact sequence of events is target-specific. The return address may not be on the stack at all by the time we get to the return instruction; x86 is the only target we support where <code>ret</code> pops an address off the stack for you. So yes, on x86 this emits an instruction which first pops the return address, and then removes the arguments from the caller's frame. Everywhere else, the return address is in a register by that point. So we can emit separate instructions to adjust the stack pointer and then branch through the appropriate register.</p>\n</blockquote>",
        "id": 362324472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685494374
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362508722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685550334
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362514448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685551700
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362514490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685551712
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1212021003\">PR review comment</a>:</p>\n<blockquote>\n<p>Unresolving -- this could still use a diagram or better description in the comment, I think.</p>\n<p>The sequencing question is really about the order of items on the stack: are the additionally-popped items <em>before</em> (below) the return address or <em>after</em> (above)? I think the latter, but I have to think about it to come to that conclusion by reasoning through it; I'd prefer for it to be clear in the comment here.</p>\n</blockquote>",
        "id": 362514887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685551810
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1212023096\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see the just-pushed commit does resolve the ambiguity, so I'm happy now!</p>\n</blockquote>",
        "id": 362515316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685551916
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362544765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685559031
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362796041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685633447
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213394863\">PR review comment</a>:</p>\n<blockquote>\n<p>Less commonly used instructions from the 16bit x86 era can be slower than writing multiple simpler instructions. Does this also apply to <code>retn</code> or is it just as fast as <code>add rsp, n</code> + <code>ret</code>?</p>\n</blockquote>",
        "id": 362811022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685636270
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213406464\">PR review comment</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://www.agner.org/optimize/instruction_tables.pdf\">Agner Fog's instruction tables</a>, and picking a random semi-recent microarchitecture (Skylake), <code>ret</code> and <code>ret imm</code> are both 2 µops; the latter has a throughput of 0.5 per cycle, the former 1 per cycle. So it looks like there's a tiny penalty but it's no worse than rearranging the stack manually. (And keep in mind that the popped data is <em>above</em> the return address, so one would need to load that, store it higher up, move rsp, and <code>ret</code>; the store alone in that sequence would kill the perf advantage.)</p>\n</blockquote>",
        "id": 362813989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685636862
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213407189\">PR review comment</a>:</p>\n<blockquote>\n<p><code>add rsp, n; ret</code> isn't equivalent because the return address must be on top of the stack in both cases. That is, <code>ret n</code> pops the RA and <em>then</em> pops <code>n</code> bytes.</p>\n<p>So I don't know if it is actually slower or not, but it is not semantically equivalent, so the point is moot to some degree.</p>\n<p>The actual alternative would be something like</p>\n<div class=\"codehilite\"><pre><span></span><code>mov tmp, [rsp]\nadd rsp, n\nmov [rsp], tmp\nret\n</code></pre></div>\n\n<p>I kind of doubt that is any better than <code>ret n</code>, but it is certainly possible. Would be interesting to see what LLVM does here.</p>\n</blockquote>",
        "id": 362814179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685636900
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213406464\">PR review comment</a>.</p>",
        "id": 362814394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685636944
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478\">PR #6478</a>.</p>",
        "id": 362817780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685637572
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213421553\">PR review comment</a>:</p>\n<blockquote>\n<p>I did a fun little <a href=\"https://gist.github.com/cfallin/7721bdd36975232c65611569c2f333d0\">experiment</a> with a <code>ret imm</code> implementation, a \"move the return address and <code>ret</code>\" implementation, and a \"load the return address, manually pop, and jump-indirect\" implementation.</p>\n<p>On my system (Zen 2 core, Ryzen 3900X) the first two have identical performance, and the last is 25% faster. Huh!</p>\n<p>I sort of suspect what's happening here is:</p>\n<ul>\n<li>With enough spare pipeline capacity, the store of the return address in the new location is \"free\", and the memory-renaming that Zen is known to do (tracking constant offsets of rsp stored from registers and using that register directly) eliminate a critical path on re-loading the RA as part of <code>ret</code>.</li>\n<li>With only one returned-to address in this microbenchmark, the <code>jmp rdi</code> is trivial for the indirect predictor to get right; but this example will overflow the return-stack predictor and so in a real program it would do poorly.</li>\n<li>In other words, this is kind of hard to test without having a \"real program\" surrounding it.</li>\n</ul>\n<p>Anyway it's sort of getting into the weeds and <code>ret imm</code> isn't obviously worse so I think we should keep this until/unless we discover it becoming a bottleneck.</p>\n</blockquote>",
        "id": 362818266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685637673
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6478#discussion_r1213686672\">PR review comment</a>:</p>\n<blockquote>\n<p>Makes sense. I didn't know that <code>ret imm</code> would move the stack pointer after reading the return address.</p>\n</blockquote>",
        "id": 362882558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685654013
    }
]