[
    {
        "content": "<p>rahulksnv opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Our rust code(substrate executor in this case which embeds wasmtime) currently calls into <code>wasmtime::TypedFunc::call()</code> to execute some WASM code. And the WASM code calls back (via the host functions/ABI) to <code>get()/put()</code> storage on the substrate side (these APIs always succeed right now). What we want to achieve is this: when the storage use during execution exceeds a threshold, stop execution. Just like out of gas scenario, except for other reasons.</p>\n<ol>\n<li>One approach could be for the <code>put()</code> APIs to return failure, and the caller WASM code checks the return value and exits with error. This has the downside that we have to change all the call sites, which is not easy or not feasible in some cases (where we don't have the source)</li>\n<li>Cleaner approach would be for wasmtime to trap on return from the host function, changes being confined to few places. </li>\n</ol>\n<p>It is not clear how (2) could be implemented, assuming we maintain a fork of wasmtime for now. Some mechanisms might be:</p>\n<ol>\n<li>Have the called host function signal wasmtime (via a flag, set by a callback from host function -&gt; wasmtime) that it should stop executing.</li>\n<li>Associate a cost with the called host function, which can be queried by wasmtime on return from host function</li>\n</ol>\n<p>May be there are other ways to add this support, please let me know.</p>\n<p>Thanks</p>\n</blockquote>",
        "id": 402511373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700152753
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1814832650\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>It should be the case that all host function definitions are allowed to return a <code>Result&lt;T&gt;</code> where <code>Err</code> becomes a trap, would that work for your use case? I'm not sure if you've tried that and it didn't work for your use case though</p>\n</blockquote>",
        "id": 402512842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700153220
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1814859832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Thanks, guess that would be approach 1 mentioned above? May be I am missing it - if the host function returns <code>Result&lt;T&gt;</code>, would this automatically result in a trap? Or does the caller need to check for error and exit?</p>\n<p>The latter would be a problem unfortunately, as it may not be possible/feasible to change all call sites</p>\n</blockquote>",
        "id": 402515899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700154141
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1814871626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>No I think it would be the (2) above you mentioned, where if a host function returns <code>Result&lt;T&gt;</code> then all <code>Err</code> payloads are interpreted as a traps and it'l lbe made availble to the original <code>call()</code> invocation. WebAssembly doesn't get to run once the host returns a trap</p>\n</blockquote>",
        "id": 402517116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700154491
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1814918389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Great, I am going to try the changes for 2 and will update here, thanks</p>\n</blockquote>",
        "id": 402522099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700156030
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837253143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>I was able to get it working. This needed a fix on substrate side (the issue: <code>Result&lt;&gt;</code> from a host function gets ABI encoded into a <code>Result&lt;u64, String&gt;</code>, which is always <code>Ok()</code> and thus not resulting in a trap)</p>\n<p>But have since discovered this alone is not sufficient for our use case. We would need some way to catch exceptions. An example call stack when trap happens (frame 0 causes the trap):<br>\n  ```<br>\n    0: 0x171846 - &lt;unknown&gt;!sp_io::storage::extern_host_function_impls::get_with_limit_check::h068fc620f18bf7e4<br>\n    1: 0xfcedd - &lt;unknown&gt;!frame_support::storage::unhashed::get::hb4c6c9ed6b10008c<br>\n    2: 0x11570f - &lt;unknown&gt;!evm_runtime::eval::system::sload::he1390a565d392c58<br>\n    3: 0xf0f8e - &lt;unknown&gt;!evm_runtime::eval::eval::h903150f53b82662b<br>\n    4: 0x11c30c - &lt;unknown&gt;!evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::execute_with_call_stack::h281d1dec751deb4a<br>\n    5: 0x11aea0 - &lt;unknown&gt;!evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::transact_call::h101f1e2ecb66bb30<br>\n    6: 0x9f55c - &lt;unknown&gt;!&lt;pallet_evm:<span aria-label=\"runner\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"runner\">:runner:</span>:stack::Runner&lt;T&gt; as pallet_evm:<span aria-label=\"runner\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"runner\">:runner:</span>:Runner&lt;T&gt;&gt;::call::h75d468b40e2d2cf5<br>\n    7: 0x87697 - &lt;unknown&gt;!pallet_ethereum::&lt;impl pallet_ethereum::pallet::Pallet&lt;T&gt;&gt;::apply_validated_transaction::hbddf3dce60009c61<br>\n    8: 0xe58cd - &lt;unknown&gt;!frame_support::storage::transactional::with_transaction::hc324dea241f9d919<br>\n    9: 0xf9f0c - &lt;unknown&gt;!environmental::local_key::LocalKey&lt;T&gt;::with::hbe7945445f325907<br>\n   10: 0x106a87 - &lt;unknown&gt;!&lt;evm_domain_runtime::RuntimeCall as frame_support::traits::dispatch::UnfilteredDispatchable&gt;::dispatch_bypass_filter::hef04c77190b8d67e<br>\n   11: 0x10633f - &lt;unknown&gt;!&lt;evm_domain_runtime::RuntimeCall as fp_self_contained::SelfContainedCall&gt;::apply_self_contained::h037bf4d32120f73a<br>\n   12: 0xea80e - &lt;unknown&gt;!&lt;fp_self_contained::checked_extrinsic::CheckedExtrinsic&lt;AccountId,Call,Extra,SelfContainedSignedInfo&gt; as sp_runtime::traits::Applyable&gt;::apply::heeb43ab468d6407d<br>\n   13: 0x9bb0f - &lt;unknown&gt;!domain_pallet_executive::Executive&lt;&gt;::apply_extrinsic::h4b45100c1f9650db &lt;-- Catch<br>\n   15: 0xa5bfe - &lt;unknown&gt;!BlockBuilder_apply_extrinsic</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Currently</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">raised</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">failing</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">unwinds</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">way</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">exits</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">leaves</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">incomplete</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">progress</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Instead</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">back</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">cleanups</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"n\">exiting</span><span class=\"p\">.</span>\n\n<span class=\"n\">Question</span>: <span class=\"nc\">is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">possible</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">allow</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">under</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">eqiuvalent</span><span class=\"w\"> </span><span class=\"n\">mechanism</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Thanks</span>\n\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/blob/v8.0.1/crates/wasmtime/src/func.rs#L1955</span>\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 405566757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701551117
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837257757\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>A trap is fatal. Once a trap happens it is no longer safe to enter the wasm module. What you may be looking for are wasm exceptions, which are not yet stable and currently unimplemented in wasmtime.</p>\n</blockquote>",
        "id": 405568106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701552457
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837273047\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>yes, throw/catch exception would be what I am looking for, which looks like unavailable unfortunately.</p>\n<p>As a work around, is there some way to start a nested/sandboxed runtime from within wasm code? (the sandbox would run the part that could possibly trap). There may be performance implications with nested execution, but wanted to check</p>\n</blockquote>",
        "id": 405573772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701557426
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837565792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Wasm can technically call the host to call back into wasm which could catch a trap, but in general I would not recommend catching traps and resuming wasm. That's ripe for things like memory leaks because no destructors are ever run so nothing on the stack would get cleaned up.</p>\n<p>I would otherwise agree with @bjorn3 that your use case seems tailor-made for wasm exceptions.</p>\n</blockquote>",
        "id": 405688611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701629265
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837568356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<blockquote>\n<p>That's ripe for things like memory leaks because no destructors are ever run so nothing on the stack would get cleaned up.</p>\n</blockquote>\n<p>And UB for the wasm guest! LLVM assumes that traps will cause execution to stop and optimizes accordingly.</p>\n</blockquote>",
        "id": 405689369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701629901
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837571474\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Thanks for the inputs. Any idea on this:</p>\n<blockquote>\n<p>As a work around, is there some way to start a nested/sandboxed runtime from within wasm code? (the sandbox would run the part that could possibly trap). There may be performance implications with nested execution, but wanted to check</p>\n</blockquote>\n</blockquote>",
        "id": 405690346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701630624
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837624557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>I was also wondering if the Wasm instance/engine can be signaled to stop in some scenarios (e.g) host function returns an error code indicating limit reached, etc around [1]. That sounds like a cleaner solution, than having to deal with traps/exceptions.</p>\n<p>Found this related thread: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/860\">https://github.com/bytecodealliance/wasmtime/issues/860</a>. From the thread I couldn't tell if this is already supported or not (also, substrate currently uses wasmtime version 8.0.1)</p>\n<p>[1] <a href=\"https://github.com/bytecodealliance/wasmtime/blob/v8.0.1/crates/wasmtime/src/func.rs#L1955\">https://github.com/bytecodealliance/wasmtime/blob/v8.0.1/crates/wasmtime/src/func.rs#L1955</a></p>\n</blockquote>",
        "id": 405705012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701643428
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1838890440\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>My <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1837565792\">first paragraph above</a> is addressing your idea. It's theoretically possible, but not recommended.</p>\n<p>I'm not sure what you mean in your latest comment though because that trap-raising function is what you're already experimenting with above and you're saying it's not suitable above but may be suitable in your latest comment? Host functions can halt the execution of wasm at any time through returning an error which is translated to a WebAssembly trap.</p>\n</blockquote>",
        "id": 405849670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701703859
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1838920116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>I was thinking of 4th option upon return from host function: stop the engine (now we have Ok/Err/Panic). On more thought, this also won't work even if feasible, as stack won't be unwound</p>\n<p>So yeah, looks like exceptions is the only way to go unfortunately</p>\n</blockquote>",
        "id": 405853091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701704727
    },
    {
        "content": "<p>rahulksnv <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550#issuecomment-1838924254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Just to close the loop on this, please let me know about this question from above as well:</p>\n<blockquote>\n<p>As a work around, is there some way to start a nested/sandboxed runtime from within wasm code? (the sandbox would run the part that could possibly trap). There may be performance implications with nested execution, but wanted to check</p>\n</blockquote>\n</blockquote>",
        "id": 405853633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701704846
    },
    {
        "content": "<p>rahulksnv closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7550\">issue #7550</a>:</p>\n<blockquote>\n<p>Our rust code(substrate executor in this case which embeds wasmtime) currently calls into <code>wasmtime::TypedFunc::call()</code> to execute some WASM code. And the WASM code calls back (via the host functions/ABI) to <code>get()/put()</code> storage on the substrate side (these APIs always succeed right now). What we want to achieve is this: when the storage use during execution exceeds a threshold, stop execution. Just like out of gas scenario, except for other reasons.</p>\n<ol>\n<li>One approach could be for the <code>put()</code> APIs to return failure, and the caller WASM code checks the return value and exits with error. This has the downside that we have to change all the call sites, which is not easy or not feasible in some cases (where we don't have the source)</li>\n<li>Cleaner approach would be for wasmtime to trap on return from the host function, changes being confined to few places. </li>\n</ol>\n<p>It is not clear how (2) could be implemented, assuming we maintain a fork of wasmtime for now. Some mechanisms might be:</p>\n<ol>\n<li>Have the called host function signal wasmtime (via a flag, set by a callback from host function -&gt; wasmtime) that it should stop executing.</li>\n<li>Associate a cost with the called host function, which can be queried by wasmtime on return from host function</li>\n</ol>\n<p>May be there are other ways to add this support, please let me know.</p>\n<p>Thanks</p>\n</blockquote>",
        "id": 432022824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712594737
    }
]