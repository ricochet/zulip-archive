[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421558182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707957040
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421558184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707957041
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a> from <code>fitzgen:canonicalize-typed-function-references</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>While we supported the function references proposal inside Wasm, we didn't support it on the \"outside\" in the Wasmtime embedder APIs. So much of the work here is exposing typed function references, and their type system updates, in the embedder API. These changes include:</p>\n<ul>\n<li>\n<p><code>ValType::FuncRef</code> and <code>ValType::ExternRef</code> are gone, replaced with the introduction of the <code>RefType</code> and <code>HeapType</code> types and a <code>ValType::Ref(RefType)</code> variant.</p>\n</li>\n<li>\n<p><code>ValType</code> and <code>FuncType</code> no longer implement <code>Eq</code> and <code>PartialEq</code>. Instead there are <code>ValType::matches</code> and <code>FuncType::matches</code> methods which check directional subtyping. I also added <code>ValType::eq</code> and <code>FuncType::eq</code> static methods for the rare case where someone needs to check precise equality, but that is almost never actually the case, 99.99% of the time you want to check subtyping.</p>\n</li>\n<li>\n<p>There are also public <code>Val::matches_ty</code> predicates for checking if a value is an instance of a type, as well as internal helpers like <code>Val::ensure_matches_ty</code> that return a formatted error if the value does not match the given type. These helpers are used throughout Wasmtime internals now.</p>\n</li>\n<li>\n<p>There is now a dedicated <code>wasmtime::Ref</code> type that represents reference values. Table operations have been updated to take and return <code>Ref</code>s rather than <code>Val</code>s.</p>\n</li>\n</ul>\n<p>Furthermore, this commit also includes type registry changes to correctly manage lifetimes of types that reference other types. This wasn't previously an issue because the only thing that could reference types that reference other types was a Wasm module that added all the types that could reference each other at the same time and removed them all at the same time. But now that the previously discussed work to expose these things in the embedder API is done, type lifetime management in the registry becomes a little trickier because the embedder might grab a reference to a type that references another type, and then unload the Wasm module that originally defined that type, but then the user should still be able use that type and the other types it transtively references. Before, we were refcounting individual registry entries. Now, we still are refcounting individual entries, but now we are also accounting for type-to-type references and adding a new type to the registry will increment the refcounts of each of the types that it references, and removing a type from the registry will decrement the refcounts of each of the types it references, and then recursively (logically, not literally) remove any types whose refcount has now reached zero.</p>\n<p>Additionally, this PR adds support for subtyping to <code>Func::typed</code>- and <code>Func::wrap</code>-style APIs. For result types, you can always use a supertype of the WebAssembly function's actual declared return type in <code>Func::typed</code>. And for param types, you can always use a subtype of the Wasm function's actual declared param type. Doing these things essentially erases information but is always correct. But additionally, for functions which take a reference to a concrete type as a parameter, you can also use the concrete type's supertype. Consider a WebAssembly function that takes a reference to a function with a concrete type: <code>(ref null &lt;func type index&gt;)</code>. In this scenario, there is no static <code>wasmtime::Foo</code> Rust type that corresponds to that particular Wasm-defined concrete reference type because Wasm modules are loaded dynamically at runtime. You <em>could</em> do <code>f.typed::&lt;Option&lt;NoFunc&gt;, ()&gt;()</code>, and while that is correctly typed and valid, it is often overly restrictive. The only value you could call the resulting typed function with is the null function reference, but we'd like to call it with non-null function references that happen to be of the correct type. Therefore, <code>f.typed&lt;Option&lt;Func&gt;, ()&gt;()</code> is also allowed in this case, even though <code>Option&lt;Func&gt;</code> represents <code>(ref null func)</code> which is the supertype, not subtype, of <code>(ref null &lt;func type index&gt;)</code>. This does imply some minimal dynamic type checks in this case, but it is supported for better ergonomics, to enable passing non-null references into the function.</p>\n<p>We can investigate whether it is possible to use generic type parameters and combinators to define Rust types that precisely match concrete reference types in future, follow-up pull requests. But for now, we've made things usable, at least.</p>\n<p>Finally, this also takes the first baby step towards adding support for the Wasm GC proposal. Right now the only thing that is supported is <code>nofunc</code> references, and this was mainly to make testing function reference subtyping easier. But that does mean that supporting <code>nofunc</code> references entailed also adding a <code>wasmtime::NoFunc</code> type as well as the <code>Config::wasm_gc(enabled)</code> knob. So we officially have an in-progress implementation of Wasm GC in Wasmtime after this PR lands!</p>\n<p>Fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">https://github.com/bytecodealliance/wasmtime/issues/6455</a></p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 421558185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707957041
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#issuecomment-1945242413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\", \"wasmtime:api\", \"wasmtime:c-api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>peterhuene: wasmtime:api, wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 421564883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707962234
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#issuecomment-1945242581\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 421564895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707962249
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421741233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708031363
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421745081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708033009
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421751327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708035902
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1883523346\">PR review</a>:</p>\n<blockquote>\n<p>This all looks great to me, thanks again for putting all this together! I think it all shaped up really well in the end <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>I do still have wishy-washy perf concerns but I don't know how to bottom them out. Failing all that I think it would be good to at least ensure that <code>wasmtime serve</code> doesn't regress performance, but I do think this highlights a blind spot we have for perf where I have a hunch this is going to regress an important use case but I don't know how to discover said use case...</p>\n</blockquote>",
        "id": 421763504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1883523346\">PR review</a>:</p>\n<blockquote>\n<p>This all looks great to me, thanks again for putting all this together! I think it all shaped up really well in the end <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>I do still have wishy-washy perf concerns but I don't know how to bottom them out. Failing all that I think it would be good to at least ensure that <code>wasmtime serve</code> doesn't regress performance, but I do think this highlights a blind spot we have for perf where I have a hunch this is going to regress an important use case but I don't know how to discover said use case...</p>\n</blockquote>",
        "id": 421763505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491436338\">PR review comment</a>:</p>\n<blockquote>\n<p>Given the relative cost of this to malloc in the guest I think it would be best to memoize this somehow to avoid reconstructing this on each time realloc is called</p>\n</blockquote>",
        "id": 421763506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491446663\">PR review comment</a>:</p>\n<blockquote>\n<p>How come this rendering changed in this PR? I personally like to ideally have exhaustive matches here because it's nice to see diffs in PRs, but I do realize that they're a pain to update</p>\n</blockquote>",
        "id": 421763507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491442316\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you be sure we've got some tests to ensure that the direction of the test here is the same? For example you can store a nofunc val into a funcref global but you can't store a funcref into a nofunc global</p>\n</blockquote>",
        "id": 421763508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491449418\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm actually a bit confused by this, how come this fails?</p>\n</blockquote>",
        "id": 421763509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491803463\">PR review comment</a>:</p>\n<blockquote>\n<p>These <code>unreachable!</code>s can be replaced with <code>match self.inner {}</code> I think to statically prove this isn't reachable</p>\n</blockquote>",
        "id": 421763510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491805062\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm a bit worried about this for a few reasons, but I don't realistically have a way to measure the impact of this change.</p>\n<p>The loss of <code>Copy</code> is unfortunate for one but the part I'm more worried about is that this represents \"more <code>Arc</code> stuff\" on the hot path of calling functions.</p>\n<p>Perhaps as at least a small gut-check, could you measure the rps locally of <code>wasmtime serve</code> for a component before/after this change? If it's like 20% slower that's probably something to investigate, but something like 5% may just be noise.</p>\n</blockquote>",
        "id": 421763511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491809095\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be worth adding a special case here to test if <code>expected == actual</code> and short-circuit everything else?</p>\n</blockquote>",
        "id": 421763512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491802215\">PR review comment</a>:</p>\n<blockquote>\n<p>To confirm, did you add tests asserting success and failure in both these directions for results and params?</p>\n</blockquote>",
        "id": 421763513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491443895\">PR review comment</a>:</p>\n<blockquote>\n<p>I was a bit surprised by this in that I thought the directionality of the check would need to go the other direction. I'm not actually sure which way is correct, but can you add a test like the global one above where we assert that a nofunc table can be copied into a funcref table but not the other way around?</p>\n</blockquote>",
        "id": 421763514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491807227\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind adding <code>is_v128</code>? It feels left out</p>\n</blockquote>",
        "id": 421763515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491447113\">PR review comment</a>:</p>\n<blockquote>\n<p>(same for a number of the errors above this as well)</p>\n</blockquote>",
        "id": 421763516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491805716\">PR review comment</a>:</p>\n<blockquote>\n<p>Also to be clear I understand there's no semantic alternative here, we _must_ have type information as part of the call and there's no avoiding that any more. I'm mostly trying to frontload any issues related to perf so we can refactor things early on.</p>\n<p>I also think it's ok to refactor things in future PRs if a slowdown is found, mostly just want to be aware.</p>\n</blockquote>",
        "id": 421763517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491450102\">PR review comment</a>:</p>\n<blockquote>\n<p>(or is this a copy/paste typo from the global test above?)</p>\n</blockquote>",
        "id": 421763518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491809935\">PR review comment</a>:</p>\n<blockquote>\n<p>This might actually be good docs to include on <code>Val</code> itself?</p>\n</blockquote>",
        "id": 421763519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042051
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884111862\">PR review</a>.</p>",
        "id": 421764510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042651
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491816590\">PR review comment</a>:</p>\n<blockquote>\n<p>I was going to try do that initially, but then I noticed that <code>Options</code> is <code>Copy</code>, and I didn't feel like going down the rabbit hole of seeing how much work it would be to undo that. Do you have a sense? Or a suggested place to cache it somewhere else?</p>\n</blockquote>",
        "id": 421764511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042651
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884113207\">PR review</a>.</p>",
        "id": 421764670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042752
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491817518\">PR review comment</a>:</p>\n<blockquote>\n<p>Could always just throw it somewhere in the store I guess... Is that the best approach?</p>\n</blockquote>",
        "id": 421764671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042752
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884116221\">PR review</a>.</p>",
        "id": 421764942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042922
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491819368\">PR review comment</a>:</p>\n<blockquote>\n<p>Global types are invariant with their content type if they are mutable, ie must match precisely and can't be a subtype or supertype. If the global isn't mutable, then you can instantiate a module that needs a <code>g</code> with any <code>g' &lt;: g</code>. I did write tests for these cases.</p>\n</blockquote>",
        "id": 421764943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708042922
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884117192\">PR review</a>.</p>",
        "id": 421765073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043001
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491820072\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah but I only wrote tests for instantiating wasm modules with existing globals, not the global value initializer in the embedder API. Will do that.</p>\n</blockquote>",
        "id": 421765074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043001
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884118734\">PR review</a>.</p>",
        "id": 421765258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043119
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491821180\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly, I only wrote linker tests here, and the embedder API does indeed have bugs. Will add some more tests.</p>\n</blockquote>",
        "id": 421765260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043119
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884120128\">PR review</a>.</p>",
        "id": 421765452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043223
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491822251\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I forgot to talk about this in the commit message. I got annoyed that the <code>traps.rs</code> tests don't pass if you have <code>RUST_BACKTRACE=1</code> set, so I loosened the assertions from being exact to <code>contains(..)</code> calls about the relevant parts.</p>\n</blockquote>",
        "id": 421765454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043223
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884122172\">PR review</a>.</p>",
        "id": 421765749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043376
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491823799\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah this part is a copy-paste from the global test above, yeah.</p>\n</blockquote>",
        "id": 421765751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043376
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884123707\">PR review</a>.</p>",
        "id": 421765997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043492
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491825033\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep! See <code>typed_concrete_{param,result}</code> in <code>tests/all/func.rs</code>.</p>\n</blockquote>",
        "id": 421765998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708043492
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884134359\">PR review</a>.</p>",
        "id": 421767375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044338
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491832668\">PR review comment</a>:</p>\n<blockquote>\n<p>We could remove the dynamic downcasting checks from the typed function API and instead explore (in a follow up PR) implementing <code>WasmTy</code> for <code>TypedFunc&lt;P, R&gt;</code> such that you could do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// succeeds if typeof(f) &lt;: (func (param i64) (result (ref $t)))</span>\n<span class=\"c1\">// where $t = (type (func (param funcref) (result (ref null $u))))</span>\n<span class=\"c1\">// and $u = (type (func (result i32)))</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span>\n<span class=\"w\">    </span><span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">TypedFunc</span><span class=\"o\">&lt;</span>\n<span class=\"w\">        </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Func</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Chris was suggesting this to me yesterday, and I think it should be doable. It would allow us to completely remove dynamic checks for calling concrete function references, the way <code>Func::typed</code> works today.</p>\n<p>What do you think of that?</p>\n</blockquote>",
        "id": 421767377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044338
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884136179\">PR review</a>.</p>",
        "id": 421767648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044486
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491833955\">PR review comment</a>:</p>\n<blockquote>\n<p>At a high level what I'd expect is:</p>\n<ul>\n<li>At <code>Component</code> compilation time the <code>ModuleTypesBuilder</code> gets the realloc signature added, no matter whether it was already there or not. This is saved in the component compilation artifacts.</li>\n<li>At <code>Component</code> creation time this local interned index is turned into a engine-interned index and saved in a <code>Component</code></li>\n<li>Upon instantiation this engine-interned index makes its way into <code>Instance</code> which I think is referenced from functions, either that or the index is copied into functions/options/etc</li>\n<li>The <code>call_raw</code> function is updated to take an index instead of an object, ... somehow ... (unsure about this) ... and then avoids reifying the type each time. Either that or I suppose the <code>FuncType</code> could be stored somewhere in <code>Component</code> and make its way into <code>Instance</code>/<code>FuncData</code>.</li>\n</ul>\n<p>Or something like that. </p>\n</blockquote>",
        "id": 421767649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044486
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884137218\">PR review</a>.</p>",
        "id": 421767747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044570
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491834715\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll move that into the <code>matches</code> method so every caller bebnefits from it.</p>\n</blockquote>",
        "id": 421767748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044570
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884137827\">PR review</a>.</p>",
        "id": 421767832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044617
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491835134\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I mean more the <code>val</code> and <code>ty</code> here, e.g. the initial value to the global. Not globals-into-instances but values-into-globals, and basically testing the matrix of \"I can pass a supertype\" or \"I can't pass a supertype\" depending on the direction</p>\n</blockquote>",
        "id": 421767833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044617
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884138799\">PR review</a>.</p>",
        "id": 421767914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044689
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491835795\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind splitting this part out to a separate PR?</p>\n<p>Also, you're on nightly, right? I think that's a feature of <code>anyhow</code> where it auto-captures on nightly using unstable APIs but it's all turned off on stable/beta (e.g. I don't remember running into this before).</p>\n<p>Either way agreed we should fix, but if you're ok I'd like to split out</p>\n</blockquote>",
        "id": 421767915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708044689
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421768467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708045037
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884161875\">PR review</a>.</p>",
        "id": 421770035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708046121
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491848049\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7950\">https://github.com/bytecodealliance/wasmtime/pull/7950</a></p>\n</blockquote>",
        "id": 421770036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708046121
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421770740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708046582
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491854845\">PR review comment</a>:</p>\n<blockquote>\n<p>(will rebase this PR after that merges)</p>\n</blockquote>",
        "id": 421770773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708046606
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1884170013\">PR review</a>.</p>",
        "id": 421770774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708046606
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421894291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708100706
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1885585971\">PR review</a>.</p>",
        "id": 421899448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708102346
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1492740673\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm so not all <code>realloc</code> callers have a full <code>wasmtime::component::Instance</code>, a bunch just have a pointer to a <code>wasmtime_runtime::ComponentInstance</code>, and the latter can't (directly) hold a <code>wasmtime::FuncType</code> because of the artificial crate boundary between <code>wasmtime</code> and <code>wasmtime_runtime</code>. We could stuff it in a <code>Box&lt;Any&gt;</code> inside <code>wasmtime_runtime::ComponentInstance</code> but that is pretty unsatisfactory.</p>\n<p>Alternatively, if we remove the dynamic type checks style of <code>Func::typed</code> that I added in this PR, then we don't need a <code>FuncType</code> for <code>TypedFunc::call_raw</code> anymore, which means we don't need realloc's <code>FuncType</code> here anymore, and <code>TypedFunc</code> and <code>Options</code> can even remain <code>Copy</code>. That does, however, mean we need an alternative way of doing typed function calls for functions that use concrete reference types, and the only alternative that I can think of at the moment (other than just not suppporting them, which is super unsatisfactory) is making <code>TypedFunc</code> implement <code>WasmTy</code>, as discussed below.</p>\n</blockquote>",
        "id": 421899449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708102347
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1491832668\">PR review comment</a>.</p>",
        "id": 421900247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708102646
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1885611245\">PR review</a>.</p>",
        "id": 421901838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708103164
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1492756225\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh now that's clever, I really like that!</p>\n<p>Would that remove the need for this field though? I thought that this was used additionally as part of <code>call_raw</code> where the type is needed to know what the params/results are?</p>\n</blockquote>",
        "id": 421901842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708103164
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1885691248\">PR review</a>.</p>",
        "id": 421909775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708105786
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#discussion_r1492804140\">PR review comment</a>:</p>\n<blockquote>\n<p>To close the loop here Nick and I talked more about this <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421902333\">here</a></p>\n</blockquote>",
        "id": 421909777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708105787
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421915609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708107938
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421917208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708108534
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421917759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708108743
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#issuecomment-1949440677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>:</p>\n<blockquote>\n<p>I talked a bunch with @fitzgen this afternoon about this PR where we were investigating perf related to this as well. We had a reproducible 3% slowdown in rps in the 17.0.1 release vs this PR and ~5% (to be confirmed in a second bit Nick) in the call microbenchmarks. In the rps perf we couldn't find anything related to this PR that was significantly worrisome and the delta included more than just this PR as it was the 17.0.1 release vs this PR.</p>\n<p>Given all that while there may still be some perf issues lurking here that we need to improve on we aren't really in a position to articulate what they are  and actually take action on them. With that in mind I'm ok landing this and we can continue to investigate after-the-fact and refactor as necessary if anything crops up. </p>\n</blockquote>",
        "id": 421950544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708123576
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#issuecomment-1949462000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>:</p>\n<blockquote>\n<blockquote>\n<p>We had a reproducible ... ~5% [slowdown] in the call microbenchmarks.</p>\n</blockquote>\n<p>Actually, it seems like with a handful of tweaks related to this PR and a bunch that are not related to this PR, the call benchmark is actually even better than it used to be now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sync</span><span class=\"o\">/</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">hook</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">typed</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">nop</span><span class=\"o\">-</span><span class=\"n\">params</span><span class=\"o\">-</span><span class=\"n\">and</span><span class=\"o\">-</span><span class=\"n\">results</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">25.909</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">26.294</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">26.952</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">19.268</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">17.214</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">14.973</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">9.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n</code></pre></div>\n<p>I'm going to split out the perf improvements that are unrelated to this PR into their own PR. Once that's done, I think this will be good to go!</p>\n</blockquote>",
        "id": 421952523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708124782
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#issuecomment-1949471197\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm going to split out the perf improvements that are unrelated to this PR into their own PR.</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7953\">https://github.com/bytecodealliance/wasmtime/pull/7953</a></p>\n</blockquote>",
        "id": 421953643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708125524
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421955846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708127093
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 421955847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708127094
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943#pullrequestreview-1890820241\">PR review</a>.</p>",
        "id": 422447929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708444524
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 422472477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452020
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 422491742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708459085
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">PR #7943</a>.</p>",
        "id": 422502550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708463670
    }
]