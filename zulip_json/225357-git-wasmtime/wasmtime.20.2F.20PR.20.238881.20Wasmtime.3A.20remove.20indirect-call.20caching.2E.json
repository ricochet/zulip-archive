[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447512803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719503486
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447512804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719503486
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a> from <code>cfallin:remove-indirect-call-cache</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In the original development of this feature, guided by JS AOT compilation to Wasm of a microbenchmark heavily focused on IC sites, I was seeing a ~20% speedup. However, in more recent measurements, on full programs (e.g., the Octane benchmark suite), the benefit is more like 5%.</p>\n<p>Moreover, in #8870, I attempted to switch over to a direct-mapped cache, to address a current shortcoming of the design, namely that it has a hard-capped number of callsites it can apply to (50k) to limit impact on VMContext struct size. With all of the needed checks for correctness, though, that change results in a 2.5% slowdown relative to no caching at all, so it was dropped.</p>\n<p>In the process of thinking through that, I discovered the current design on <code>main</code> incorrectly handles null funcrefs: it invokes a null code pointer, rather than loading a field from a null struct pointer. The latter was specifically designed to cause the necessary Wasm trap in #8159, but I had missed that the call to a null code pointer would not have the same effect. As a result, we actually can crash the VM (safely at least, but still no good vs. a proper Wasm trap!) with the feature enabled. (It's off by default still.) That could be fixed too, but at this point with the small benefit on real programs, together with the limitation on module size for full benefit, I think I'd rather opt for simplicity and remove the cache entirely.</p>\n<p>Thus, this PR removes call-indirect caching. It's not a direct revert because the original PR refactored the call-indirect generation into smaller helpers and IMHO it's a bit nicer to keep that. But otherwise all traces of the setting, code pre-scan during compilation and special conditions tracked on tables, and codegen changes are gone.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 447512808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719503486
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>:</p>\n<blockquote>\n<p>In the original development of this feature, guided by JS AOT compilation to Wasm of a microbenchmark heavily focused on IC sites, I was seeing a ~20% speedup. However, in more recent measurements, on full programs (e.g., the Octane benchmark suite), the benefit is more like 5%.</p>\n<p>Moreover, in #8870, I attempted to switch over to a direct-mapped cache, to address a current shortcoming of the design, namely that it has a hard-capped number of callsites it can apply to (50k) to limit impact on VMContext struct size. With all of the needed checks for correctness, though, that change results in a 2.5% slowdown relative to no caching at all, so it was dropped.</p>\n<p>In the process of thinking through that, I discovered the current design on <code>main</code> incorrectly handles null funcrefs (EDIT: thanks @alexcrichton for finding the actual bug): it invokes a null code pointer, rather than loading a field from a null struct pointer. The latter was specifically designed to cause the necessary Wasm trap in #8159, but I had missed that the call to a null code pointer would not have the same effect. As a result, we actually can crash the VM (safely at least, but still no good vs. a proper Wasm trap!) with the feature enabled. (It's off by default still.) That could be fixed too, but at this point with the small benefit on real programs, together with the limitation on module size for full benefit, I think I'd rather opt for simplicity and remove the cache entirely.</p>\n<p>Thus, this PR removes call-indirect caching. It's not a direct revert because the original PR refactored the call-indirect generation into smaller helpers and IMHO it's a bit nicer to keep that. But otherwise all traces of the setting, code pre-scan during compilation and special conditions tracked on tables, and codegen changes are gone.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 447512973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719503523
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447514309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719503901
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881#pullrequestreview-2145998963\">PR review</a>.</p>",
        "id": 447531189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508220
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881#issuecomment-2195241701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>:</p>\n<blockquote>\n<p>Looks like the fuzzer is still setting the flag, but otherwise this looks good!</p>\n</blockquote>",
        "id": 447531375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508264
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447531742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508350
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447531743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508350
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447531744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508350
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447531833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719508376
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>.</p>",
        "id": 447537276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719509797
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881#pullrequestreview-2146163099\">PR review</a>.</p>",
        "id": 447547434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719512036
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881#issuecomment-2195390090\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8881\">PR #8881</a>:</p>\n<blockquote>\n<p>(Whoops, I guess I'm late to the party!)</p>\n</blockquote>",
        "id": 447547580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719512059
    }
]