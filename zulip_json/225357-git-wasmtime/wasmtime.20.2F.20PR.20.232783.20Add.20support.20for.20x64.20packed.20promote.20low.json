[
    {
        "content": "<p>jlb6740 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 232041956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616798800
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 232048659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616804292
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a>.</p>",
        "id": 232048710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616804377
    },
    {
        "content": "<p><strong>jlb6740</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a>.</p>",
        "id": 232048728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616804400
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-622611396\">PR Review</a>.</p>",
        "id": 232056424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616812639
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r602657091\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For this one, I think it does make sense to keep the <code>_low</code> since it indicates which lanes get promoted, but I would drop the <code>v</code> since the <code>_low</code> already implies lanes.</p>\n</blockquote>",
        "id": 232056425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616812639
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r602656959\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I would suggest trying to fit this under <code>fdemote</code>: the semantics are very close and we could document on <code>fdemote</code> that, when used on vector types, it's conversions are placed in the lowest lanes. E.g., when demoting lanes 0 and 1 of an <code>f64x2</code>, the results are placed in lanes 0 and 1 of the <code>f32x4</code>). We will also want to document that lanes 2 and 3 are zeroed out.</p>\n</blockquote>",
        "id": 232056426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616812639
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-622611396\">PR Review</a>.</p>",
        "id": 232056427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616812639
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r602657368\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This allows <code>fpromote.f64x2</code> and <code>fpromote_low.f64x2</code> to compile to the same x64 instruction, which I don't think is intended. Perhaps assert that the vectors have <code>op == Opcode::FpromoteLow</code> and the scalars have <code>op == Opcode::Fpromote</code>. (This comment also applies below if you don't do the \"fvdemote -&gt; fdemote\" renaming).</p>\n</blockquote>",
        "id": 232056428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616812639
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 238676101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1620937701
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 239695844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621572200
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 240376405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622056584
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 240385144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622060335
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-622692020\">PR review</a>.</p>",
        "id": 240387542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622061385
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r602776385\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, I don't disagree about combining fdemote and fvdemote feeling like the natural thing to do. In fact I tried that first as but doing that failed due to the constraint requiring the lane sizes remain the same. Trying to support both  both f32.demote and f32x4.demote_f64x2_zero with fdemote would require us to make this instruction definition less specific. In that case comments about zeroing lanes would not apply to the general instruction here as it only applies when lowering f32x4.demote_f64x2_zero? If not combined then certainly adding that zeroing part makes sense. Even though the language is there and seemly necessary in <a href=\"http://instruction.rs\">instruction.rs</a>, frankly I don't really see the concept of lanes with the definition of f32.demote. But that's a different subject. What do you think about the implication of making the fdemote instruction comments less specific if we are trying to cover the two different lowerings?</p>\n</blockquote>",
        "id": 240387543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622061385
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-622692020\">PR review</a>.</p>",
        "id": 240387544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622061386
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-669525921\">PR review</a>.</p>",
        "id": 240391128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062963
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r640111103\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        Considering only the lower half of the register, the low lanes in `x` are interpreted as\n        single precision floats that are then converted to double precision floats.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 240391130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062964
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-669525921\">PR review</a>.</p>",
        "id": 240391131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062964
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r640118700\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we still need to think about this comment...</p>\n</blockquote>",
        "id": 240391132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062964
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r640117614\">PR review comment</a>:</p>\n<blockquote>\n<p>I also see <code>.constraints(vec![WiderOrEq(Float.clone(), FloatTo.clone())]),</code> used in a few places, which might be a more generic approach.</p>\n</blockquote>",
        "id": 240391135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062964
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r640116051\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    let FxN = &amp;TypeVar::new(\n        \"FxN\",\n        \"A vector floating point number\",\n        TypeSetBuilder::new()\n            .floats(Interval::All)\n            .simd_lanes(Interval::All)\n            .includes_scalars(false)\n            .build(),\n    );\n    let x = &amp;Operand::new(\"x\", FxN);\n    let a = &amp;Operand::new(\"a\", FxN.merge_lanes());\n</code></pre></div>\n<p>I think if we want to be more precise with the types here we should use a \"vector float\" type (e.g. build a new <code>FxN</code>) and tell the type system using <code>.merge_lanes()</code> that the result will have the same number of bits, just half the number of lanes, like we do in the documentation.</p>\n</blockquote>",
        "id": 240391137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622062964
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 241301092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622658998
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 241305652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622661157
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 241306106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622661367
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-674633092\">PR review</a>.</p>",
        "id": 241312323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622664301
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r644283078\">PR review comment</a>:</p>\n<blockquote>\n<p>Reverted back to having a separate lowering for fvdemote after some offline discussion with @abrown. The impact of adding a constraint was not clear. For example, I thought if adding the constraint:</p>\n<p>.constraints(vec![WiderOrEq(Float.clone(), FloatTo.clone())]),</p>\n<p>this meant that x needed to be wider or equal to a. When I did this the spec test passed as expected. However, when I reversed the constraint to say</p>\n<p>.constraints(vec![WiderOrEq(FloatTo.clone(), Float.clone())]),</p>\n<p>This also passed. For this reason I just left it out which is what the original patch submission did (as written in the notes). <br>\n</p>\n</blockquote>",
        "id": 241312324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622664301
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-674635141\">PR review</a>.</p>",
        "id": 241312619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622664452
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r644284581\">PR review comment</a>:</p>\n<blockquote>\n<p>Note the original patch used fvpromote_low. This was to be consistent with fvdemote. However there was a desire to rename fvpromote_low to fpromote_low and also git rid of fvdemote (combine with fdemote). Now that fvdemote is back, the naming is inconsistent here but that may be OK. </p>\n</blockquote>",
        "id": 241312620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622664452
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r644284581\">PR review comment</a>.</p>",
        "id": 241312655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622664470
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-675768078\">PR review</a>.</p>",
        "id": 241463407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758557
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-675768078\">PR review</a>.</p>",
        "id": 241463408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758558
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r645165006\">PR review comment</a>:</p>\n<blockquote>\n<p>Same type comments apply here.</p>\n</blockquote>",
        "id": 241463409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758558
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r645156598\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            \"fvpromote_low\",\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 241463410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758558
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r645164687\">PR review comment</a>:</p>\n<blockquote>\n<p>We need to make sure that we constrain this so that the following is not possible:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fvdemote</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Right now this looks possible, but we shouldn't be able to demote from a vector to a scalar (doesn't make sense). If we add the <code>WiderOrEq(x, a)</code> constraint, though, the types allowed should be, e.g., <code>f64x2</code> -&gt; <code>f32x2</code>, but <code>f32x2</code> isn't really a valid type in WebAssembly (it is in CLIF).</p>\n<p>I think we should use the <code>.merge_lanes()</code> approach here so that the types are  <code>f64x2</code> -&gt; <code>f32x4</code> and then in the instruction description <strong>we have to specify that the top two lanes are zeroed out</strong>. Or alternately, just explicitly put the types in.<br>\n</p>\n</blockquote>",
        "id": 241463411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758558
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r645164431\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                With Fvdemote there is no constraint on having the result type have the same\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 241463412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622758558
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 241495474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622788037
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-676621726\">PR review</a>.</p>",
        "id": 241585566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622836594
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#discussion_r645817225\">PR review comment</a>:</p>\n<blockquote>\n<p>I've created new types with explicit lanes. Interesting enough after doing this I had to update the state push call in <a href=\"http://code_translator.rs\">code_translator.rs</a>. I also could have used split_lanes here though that would have been less constrained and semantically speaking just sounds vague on what that implies. </p>\n</blockquote>",
        "id": 241585567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622836594
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a> from <code>implement_64_packed_promotelow_demote</code> to <code>main</code>.</p>",
        "id": 241589048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622838518
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-676710100\">PR review</a>.</p>",
        "id": 241601489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622847020
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783#pullrequestreview-676712245\">PR review</a>.</p>",
        "id": 241601886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622847462
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2783\">PR #2783</a>.</p>",
        "id": 241601998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622847561
    }
]