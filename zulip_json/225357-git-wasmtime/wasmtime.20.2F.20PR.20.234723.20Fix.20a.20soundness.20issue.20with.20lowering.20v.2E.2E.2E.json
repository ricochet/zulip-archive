[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723\">PR #4723</a> from <code>fix-host-leakage</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit fixes a soundness issue lowering variants in the component<br>\nmodel where host memory could be leaked to the guest module by accident.<br>\nIn reviewing code recently for <code>Val::lower</code> I noticed that the variant<br>\nlowering was extending the payload with <code>ValRaw::u32(0)</code> to<br>\nappropriately fit the size of the variant. In reading this it appeared<br>\nincorrect to me due to the fact that it should be <code>ValRaw::u64(0)</code> since<br>\nup to 64-bits can be read. Additionally this implementation was also<br>\nincorrect because the lowered representation of the payload itself was<br>\nnot possibly zero-extended to 64-bits to accommodate other variants.</p>\n<p>It turned out these issues were benign because with the dynamic<br>\nsurface area to the component model the arguments were all initialized<br>\nto 0 anyway. The static version of the API, however, does not initialize<br>\narguments to 0 and I wanted to initially align these two implementations<br>\nso I updated the variant implementation of lowering for dynamic values<br>\nand removed the zero-ing of arguments.</p>\n<p>To test this change I updated the <code>debug</code> mode of adapter module<br>\ngeneration to assert that the upper bits of values in wasm are always<br>\nzero when the value is casted down (during <code>stack_get</code> which only<br>\nhappens with variants). I then threaded through the <code>debug</code> boolean<br>\nconfiguration parameter into the dynamic and static fuzzers.</p>\n<p>To my surprise this new assertion tripped even after the fix was<br>\napplied. It turns out, though, that there was other leakage of bits<br>\nthrough other means that I was previously unaware of. At the primitive<br>\nlevel lowerings of types like <code>u32</code> will have a <code>Lower</code> representation<br>\nof <code>ValRaw</code> and the lowering is simply <code>dst.write(ValRaw::i32(self))</code>,<br>\nor the equivalent thereof. The problem, that the fuzzers detected, with<br>\nthis pattern is that the <code>ValRaw</code> type is 16-bytes, and<br>\n<code>ValRaw::i32(X)</code> only initializes the first 4. This meant that all the<br>\nlowerings for all primitives were writing up to 12 bytes of garbage from<br>\nthe host for the wasm module to read.</p>\n<p>It turned out that this write of a <code>ValRaw</code> was sometimes 16 bytes and<br>\nsometimes the appropriate size depending on the number of optimizations<br>\nin play. With enough inlining for example <code>dst.write(ValRaw::i32(self))</code><br>\nwould only write 4 bytes, as expected. In debug mode though without<br>\ninlining 16 bytes would be written, including the garbage from the upper<br>\nbits.</p>\n<p>To solve this issue I ended up taking a somewhat different approach. I<br>\nprimarily updated the <code>ValRaw</code> constructors to simply always extend the<br>\nvalues internally to 64-bits, meaning that the low 8 bytes of a <code>ValRaw</code><br>\nis always initialized. This prevents any undefined data from leaking<br>\nfrom the host into a wasm module, and means that values are also<br>\nzero-extended even if they're only used in 32-bit contexts outside of a<br>\nvariant. This felt like the best fix for now, though, in terms of<br>\nnot really having a performance impact while additionally not requiring<br>\na rewrite of all lowerings.</p>\n<p>This solution ended up also neatly removing the \"zero out the entire<br>\npayload\" logic that was previously require. Now after a payload is<br>\nlowered only the tail end of the payload, up to the size of the variant,<br>\nis zeroed out. This means that each lowered argument is written to at<br>\nmost once which should hopefully be a small performance boost for<br>\ncalling into functions as well.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 293790968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660680273
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723\">PR #4723</a>.</p>",
        "id": 293790969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660680273
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723\">PR #4723</a> from <code>fix-host-leakage</code> to <code>main</code>.</p>",
        "id": 293797675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660682780
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723#pullrequestreview-1074813793\">PR review</a>.</p>",
        "id": 293806028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660686420
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723\">PR #4723</a>.</p>",
        "id": 293807161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660687004
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4723\">PR #4723</a>.</p>",
        "id": 293811670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660689205
    }
]