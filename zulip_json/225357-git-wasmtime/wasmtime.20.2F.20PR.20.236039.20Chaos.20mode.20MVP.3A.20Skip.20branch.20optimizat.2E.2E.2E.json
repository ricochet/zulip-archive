[
    {
        "content": "<p>remlse opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>:</p>\n<blockquote>\n<p>This is a draft of the MVP for chaos mode (#4134).</p>\n<p>It extends the fuzz target <code>cranelift-icache</code> for now, by allowing it to run with the feature <code>chaos</code> enabled. This will pseudo-randomly toggle branch optimization in <code>MachBuffer</code> via the new chaos mode control plane in the crate <code>cranelift-chaos</code>.</p>\n<p>Quick command for the documentation:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>doc<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-chaos<span class=\"w\"> </span>--document-private-items<span class=\"w\"> </span>--open\n</code></pre></div>\n<p>Running the fuzz target with chaos mode enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>fuzz<span class=\"w\"> </span>run<span class=\"w\"> </span>--no-default-features<span class=\"w\"> </span>--features<span class=\"w\"> </span>chaos<span class=\"w\"> </span>cranelift-icache\n</code></pre></div>\n<p>Passing a reference counted chaos engine around is not that bad, the diff is less noisy than I would've expected. I'm still planning to make an equivalent POC with private, global, mutable state in the <code>cranelift-chaos</code> crate to get a better idea of the trade-offs.</p>\n<p>Note that because of this <a href=\"#narrow/stream/217117-cranelift/topic/fuzz.20target.20-.20cranelift-fuzzgen\">zulip topic</a>, I didn't bump the version of <code>arbitrary</code> in this PR to keep those issues isolated. Once that's resolved, we think it's probably a good idea to update <code>arbitrary</code> while we're working with it.</p>\n<p>I've added a couple print statements during development, and it seems the branch optimization is more often carried out than skipped. I guess this is consistent with libfuzzer's goal of generating data in a way that code coverage is maximized.</p>\n<p>I also ran into a crash while running this fuzz target. The crash happens at <code>cranelift-icache.rs:220</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expect_cache_hit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icache</span>::<span class=\"n\">try_finish_recompile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">serialized</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"recompilation should always work for identity\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">after_mutation_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- this assert fails</span>\n</code></pre></div>\n<p>Maybe someone has an intuition along the lines of: \"Oh yes, of course that will fail when branch optimization is randomly skipped\", or similar? In any case, I'll investigate to see if the panic is caused by my changes or something different.</p>\n<h2>Questions</h2>\n<ul>\n<li>[ ] I needed to use <code>Arc</code> and <code>Mutex</code> instead of <code>Rc</code> and <code>RefCell</code> in the control plane, because the compiler was complaining about the <code>Send</code> trait not being implemented. So if Cranelift runs in parallel, won't that interfere with our plans with the fuel parameter? If fuel from the chaos engine is requested in a different order every time, we won't be able to deterministically reproduce bugs and pinpoint their origin.</li>\n<li>[ ] Did I get the \"paperwork\" right?<br>\n    - version 0.95.0 like other cranelift crates<br>\n    - license<br>\n    - Cargo.toml<br>\n    - ... etc. ?</li>\n<li>[ ] There are a several <code>ChaosEngine::todo()</code>s in the wild. Is it ok to merge these in principle or should we find a different solution for adding the chaos engine everywhere incrementally?</li>\n</ul>\n<h2>Todos</h2>\n<ul>\n<li>[ ] Add appropriate explanations to the commit messages</li>\n<li>[ ] Investigate crash (<code>Base64: Av////////8AAAIAAAAAAAD5jIyMjAAKAAAAAPHx8fERDgcAAAAAAJkBAAAAAAAAKwBp/5r//wAAAAAAAAAHbS45azEAAAAACF0=</code>)</li>\n<li>[ ] Exend existing fuzzing documentation with an overview of chaos mode as well as how to run a target with chaos mode enabled (<code>cargo fuzz run --features chaos $TARGET</code>)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 342469009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679027465
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347101121\">PR review</a>.</p>",
        "id": 342822116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679162517
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141081213\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// # Panics\n</code></pre></div>\n<p>(hi, i was interested in the Unstructured conversation and noticed this)</p>\n</blockquote>",
        "id": 342822117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679162517
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347104871\">PR review</a>.</p>",
        "id": 342824116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679163516
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141084460\">PR review comment</a>:</p>\n<blockquote>\n<p>from a safety perspective, the other extremely important detail of this trick is that <code>ChaosEngineData</code> must also never move once references to <code>engine.data</code> are taken. so the \"this must not move\"-ness of <code>data</code> kind of percolates through to any enclosing type until it's somewhere that won't move (which works out here because <code>ChaosEngineData</code> ends up owned by an <code>Arc</code> where it oughtn't be moved out of.</p>\n<p>as an example that certainly won't come up here but would be Technically Possible, <code>Arc::new(some_chaos_engine.data.try_unwrap())</code> would yield a <code>ChaosEngineData</code> whose <code>unstructured</code> points to somewhere else, and would (hopefully! :D) fault on use.</p>\n</blockquote>",
        "id": 342824117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679163516
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141084460\">PR review comment</a>.</p>",
        "id": 342824227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679163588
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347287031\">PR review</a>.</p>",
        "id": 342847450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679179387
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141194452\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for pointing that out! Does it also apply if some type is heap allocated? I think the article I got this from used a <code>Box</code> to create a level of indirection. The idea being that if the <code>Box</code> itself is moved, the values on the heap won't. So any existing references into that heap allocation would still be valid. In this case, the <code>Vec</code> is supposed to serves the same purpose as the <code>Box</code> in the article.</p>\n<p>That being said, I just noticed that I got the order of the fields wrong, which the article warns against. <code>data</code> will be dropped before <code>unstructured</code>, which creates a dangling pointer and UB.(?) <em>oops</em> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I definitely prefer a safe solution as well.</p>\n</blockquote>",
        "id": 342847451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679179387
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347293785\">PR review</a>.</p>",
        "id": 342848828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679180180
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141198181\">PR review comment</a>:</p>\n<blockquote>\n<p>Aaand reading a bit further, I also forgot the thing about <code>AliasableBox</code> so you're definitely right, moving <code>data</code> would also be UB.</p>\n</blockquote>",
        "id": 342848829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679180180
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>.</p>",
        "id": 342851574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679182109
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>.</p>",
        "id": 342851663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679182181
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347310480\">PR review</a>.</p>",
        "id": 342851755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679182237
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141208715\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks! fixed it.</p>\n</blockquote>",
        "id": 342851756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679182238
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1347320521\">PR review</a>.</p>",
        "id": 342853561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679183582
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1141215589\">PR review comment</a>:</p>\n<blockquote>\n<p>yeah that's the part that makes the blog post's solution a little more robust to <code>move</code>s - a <code>&amp;AliasableBox&lt;ZipArchive&lt;File&gt;&gt;</code> could be made to dangle,  but with private internals you can ensure that wouldn't happen. anyway, hopefully threading a <code>&amp;mut ControlPlane</code> through the compiler as appropriate lets you avoid the whole construction, and double-hopefully the extra arguments don't affect compile time all that much :)</p>\n</blockquote>",
        "id": 342853562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679183583
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>.</p>",
        "id": 342903225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679218692
    },
    {
        "content": "<p>remlse edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>:</p>\n<blockquote>\n<p>This is a draft of the MVP for chaos mode (#4134).</p>\n<p>It extends the fuzz target <code>cranelift-icache</code> for now, by allowing it to run with the feature <code>chaos</code> enabled. This will pseudo-randomly toggle branch optimization in <code>MachBuffer</code> via the new chaos mode control plane in the crate <code>cranelift-chaos</code>.</p>\n<p>Quick command for the documentation:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>doc<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-chaos<span class=\"w\"> </span>--document-private-items<span class=\"w\"> </span>--open\n</code></pre></div>\n<p>Running the fuzz target with chaos mode enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>fuzz<span class=\"w\"> </span>run<span class=\"w\"> </span>--no-default-features<span class=\"w\"> </span>--features<span class=\"w\"> </span>chaos<span class=\"w\"> </span>cranelift-icache\n</code></pre></div>\n<p>Passing a reference counted chaos engine around is not that bad, the diff is less noisy than I would've expected. I'm still planning to make an equivalent POC with private, global, mutable state in the <code>cranelift-chaos</code> crate to get a better idea of the trade-offs.</p>\n<p>Note that because of this <a href=\"#narrow/stream/217117-cranelift/topic/fuzz.20target.20-.20cranelift-fuzzgen\">zulip topic</a>, I didn't bump the version of <code>arbitrary</code> in this PR to keep those issues isolated. Once that's resolved, we think it's probably a good idea to update <code>arbitrary</code> while we're working with it.</p>\n<p>I've added a couple print statements during development, and it seems the branch optimization is more often carried out than skipped. I guess this is consistent with libfuzzer's goal of generating data in a way that code coverage is maximized.</p>\n<p>I also ran into a crash while running this fuzz target. The crash happens at <code>cranelift-icache.rs:220</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expect_cache_hit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icache</span>::<span class=\"n\">try_finish_recompile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">serialized</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"recompilation should always work for identity\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">after_mutation_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- this assert fails</span>\n</code></pre></div>\n<p>Maybe someone has an intuition along the lines of: \"Oh yes, of course that will fail when branch optimization is randomly skipped\", or similar? In any case, I'll investigate to see if the panic is caused by my changes or something different.</p>\n<h2>Questions</h2>\n<ul>\n<li>[x] I needed to use <code>Arc</code> and <code>Mutex</code> instead of <code>Rc</code> and <code>RefCell</code> in the control plane, because the compiler was complaining about the <code>Send</code> trait not being implemented. So if Cranelift runs in parallel, won't that interfere with our plans with the fuel parameter? If fuel from the chaos engine is requested in a different order every time, we won't be able to deterministically reproduce bugs and pinpoint their origin.<br>\n      -&gt; answer: <code>Arc</code> and <code>Mutex</code> must not be used.</li>\n<li>[ ] Did I get the \"paperwork\" right?<br>\n    - version 0.95.0 like other cranelift crates<br>\n    - license<br>\n    - Cargo.toml<br>\n    - ... etc. ?</li>\n<li>[ ] There are a several <code>ChaosEngine::todo()</code>s in the wild. Is it ok to merge these in principle or should we find a different solution for adding the chaos engine everywhere incrementally?</li>\n</ul>\n<h2>Todos</h2>\n<ul>\n<li>[ ] Add appropriate explanations to the commit messages</li>\n<li>[x] Investigate crash (<code>Base64: Av////////8AAAIAAAAAAAD5jIyMjAAKAAAAAPHx8fERDgcAAAAAAJkBAAAAAAAAKwBp/5r//wAAAAAAAAAHbS45azEAAAAACF0=</code>)<br>\n      -&gt; most likely due to usage of <code>Arc</code> and <code>Mutex</code></li>\n<li>[ ] Extend existing fuzzing documentation with an overview of chaos mode as well as how to run a target with chaos mode enabled (<code>cargo fuzz run --features chaos $TARGET</code>)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 342913425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679223667
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>.</p>",
        "id": 343689558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679494274
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> from <code>fuzz-skip-branch-opt</code> to <code>main</code>.</p>",
        "id": 344032794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679588636
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1367246592\">PR review</a>.</p>",
        "id": 346008284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281452
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1367246592\">PR review</a>.</p>",
        "id": 346008285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281452
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154674380\">PR review comment</a>:</p>\n<blockquote>\n<p><code>ctrl_plane</code> can probably go inside the <code>state</code> (<code>EmitState</code>)?</p>\n<p>The issue with lifetimes that this would otherwise create (<code>&amp;mut ControlPlane</code> inside of the struct) can be resolved I think by <code>std::mem::move</code> to take ownership of the control plane temporarily in places where we emit.</p>\n</blockquote>",
        "id": 346008287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154681680\">PR review comment</a>:</p>\n<blockquote>\n<p>(remove debugging printlns before merging)</p>\n</blockquote>",
        "id": 346008289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154683300\">PR review comment</a>:</p>\n<blockquote>\n<p>outdated comment?</p>\n</blockquote>",
        "id": 346008290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154678617\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it's probably better to pass in the control-plane state with each call to <code>compile</code>; the <code>CompilerContext</code> is otherwise not that semantically meaningful (meant to enable reuse).</p>\n</blockquote>",
        "id": 346008291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154685071\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's remove this <code>is_noop</code> mechanism before merging.</p>\n</blockquote>",
        "id": 346008293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154686502\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this body makes sense as the <code>Default</code> impl (an empty <code>ControlPlane</code> should have no affect on Cranelift's behavior as it is today -- this also implies how to use bools, i.e. <code>false</code> should make no change).</p>\n</blockquote>",
        "id": 346008294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1154689359\">PR review comment</a>:</p>\n<blockquote>\n<p>I would return just <code>bool</code> (<code>use .unwrap_or(false)</code> on the <code>pop</code>).</p>\n</blockquote>",
        "id": 346008295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680281453
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346586211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680532050
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346596649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680534036
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346615261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538058
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1369362703\">PR review</a>.</p>",
        "id": 346616112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538258
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1156171681\">PR review comment</a>:</p>\n<blockquote>\n<p>Not sure if it's OK to export <code>MachInstEmitState</code>.</p>\n<p>I needed it <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039/files#diff-1d5a6cd7768a5e084e45059cb8cb76f3f18d279925918a68f169bb269b9ec84bR102\">here</a>.</p>\n</blockquote>",
        "id": 346616117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538258
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1369366562\">PR review</a>.</p>",
        "id": 346616755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538402
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1156174279\">PR review comment</a>:</p>\n<blockquote>\n<p>I didn't combine these in a <code>Vec&lt;(Function, ControlPlane)&gt;</code>, because it makes the diff a little cleaner and in the manual arbitrary implementation it can still be controlled that the two vectors have the same size.</p>\n</blockquote>",
        "id": 346616758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538402
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1369375853\">PR review</a>.</p>",
        "id": 346618273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538758
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1156180663\">PR review comment</a>:</p>\n<blockquote>\n<p>If this is forgotten, the control plane would just silently be the default one for the rest of the compilation. I guess it should be fine, (for now) it seems like this is the only place where one has to remember to move the control plane back out of the emit state.</p>\n</blockquote>",
        "id": 346618274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680538758
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346636784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680543067
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346645160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680545323
    },
    {
        "content": "<p>remlse edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>:</p>\n<blockquote>\n<p>This is a draft of the MVP for chaos mode (#4134).</p>\n<p>Edit: The implemented fuzz target changed to <code>cranelift-fuzzgen</code>.</p>\n<p>It extends the fuzz target <code>cranelift-icache</code> for now, by allowing it to run with the feature <code>chaos</code> enabled. This will pseudo-randomly toggle branch optimization in <code>MachBuffer</code> via the new chaos mode control plane in the crate <code>cranelift-chaos</code>.</p>\n<p>Quick command for the documentation:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>doc<span class=\"w\"> </span>-p<span class=\"w\"> </span>cranelift-chaos<span class=\"w\"> </span>--document-private-items<span class=\"w\"> </span>--open\n</code></pre></div>\n<p>Running the fuzz target with chaos mode enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>fuzz<span class=\"w\"> </span>run<span class=\"w\"> </span>--no-default-features<span class=\"w\"> </span>--features<span class=\"w\"> </span>chaos<span class=\"w\"> </span>cranelift-icache\n</code></pre></div>\n<p>Passing a reference counted chaos engine around is not that bad, the diff is less noisy than I would've expected. I'm still planning to make an equivalent POC with private, global, mutable state in the <code>cranelift-chaos</code> crate to get a better idea of the trade-offs.</p>\n<p>Note that because of this <a href=\"#narrow/stream/217117-cranelift/topic/fuzz.20target.20-.20cranelift-fuzzgen\">zulip topic</a>, I didn't bump the version of <code>arbitrary</code> in this PR to keep those issues isolated. Once that's resolved, we think it's probably a good idea to update <code>arbitrary</code> while we're working with it.</p>\n<p>I've added a couple print statements during development, and it seems the branch optimization is more often carried out than skipped. I guess this is consistent with libfuzzer's goal of generating data in a way that code coverage is maximized.</p>\n<p>I also ran into a crash while running this fuzz target. The crash happens at <code>cranelift-icache.rs:220</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">expect_cache_hit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icache</span>::<span class=\"n\">try_finish_recompile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">serialized</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"recompilation should always work for identity\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">after_mutation_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after_mutation_result_from_cache</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- this assert fails</span>\n</code></pre></div>\n<p>Maybe someone has an intuition along the lines of: \"Oh yes, of course that will fail when branch optimization is randomly skipped\", or similar? In any case, I'll investigate to see if the panic is caused by my changes or something different.</p>\n<h2>Questions</h2>\n<ul>\n<li>[x] I needed to use <code>Arc</code> and <code>Mutex</code> instead of <code>Rc</code> and <code>RefCell</code> in the control plane, because the compiler was complaining about the <code>Send</code> trait not being implemented. So if Cranelift runs in parallel, won't that interfere with our plans with the fuel parameter? If fuel from the chaos engine is requested in a different order every time, we won't be able to deterministically reproduce bugs and pinpoint their origin.<br>\n      -&gt; answer: <code>Arc</code> and <code>Mutex</code> must not be used.</li>\n<li>[ ] Did I get the \"paperwork\" right?<br>\n    - version 0.95.0 like other cranelift crates<br>\n    - license<br>\n    - Cargo.toml<br>\n    - ... etc. ?</li>\n<li>[x] There are a several <code>ChaosEngine::todo()</code>s in the wild. Is it ok to merge these in principle or should we find a different solution for adding the chaos engine everywhere incrementally? -&gt; these have been removed</li>\n</ul>\n<h2>Todos</h2>\n<ul>\n<li>[ ] Add appropriate explanations to the commit messages</li>\n<li>[x] Investigate crash (<code>Base64: Av////////8AAAIAAAAAAAD5jIyMjAAKAAAAAPHx8fERDgcAAAAAAJkBAAAAAAAAKwBp/5r//wAAAAAAAAAHbS45azEAAAAACF0=</code>)<br>\n      -&gt; most likely due to usage of <code>Arc</code> and <code>Mutex</code></li>\n<li>[ ] Extend existing fuzzing documentation with an overview of chaos mode as well as how to run a target with chaos mode enabled (<code>cargo fuzz run --features chaos $TARGET</code>)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 346645731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680545501
    },
    {
        "content": "<p><strong>remlse</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a> as ready for review.</p>",
        "id": 346647550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546010
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546011
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546012
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546012
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546013
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546013
    },
    {
        "content": "<p><strong>remlse</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346647562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680546013
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371487783\">PR review</a>.</p>",
        "id": 346931805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680630692
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371487783\">PR review</a>.</p>",
        "id": 346931806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680630692
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157583020\">PR review comment</a>:</p>\n<blockquote>\n<p>One small tweak to the conditional-compilation strategy: I had been thinking that we could have the methods that produce decisions, like <code>get_decision</code> here, return a default value (<code>false</code> here) as a constant in the non-<code>chaos</code>-feature case; then the sites where we use these decisions, like in <code>MachBuffer</code>, don't require annotation with conditional compilation. What do you think?</p>\n</blockquote>",
        "id": 346931807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680630692
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157579077\">PR review comment</a>:</p>\n<blockquote>\n<p>A few things:</p>\n<ul>\n<li>Usually a mut-accessor will be named like <code>fn ctrl_plane_mut(&amp;mut self) -&gt; ...</code></li>\n<li>Let's have a different one too, <code>fn take_ctrl_plane(self)</code>, that consumes the emit-state and gives us back the control-plane state</li>\n</ul>\n</blockquote>",
        "id": 346931808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680630692
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157579833\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, we may be able to find a better way here eventually, but I think this strikes a good balance for now.</p>\n</blockquote>",
        "id": 346931810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680630692
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371550058\">PR review</a>.</p>",
        "id": 346938910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680632774
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157618462\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm thinking about the potential performance impact in release builds, but I guess it's safe to assume the compiler inlines a constant <code>false</code> and removes the resulting <code>if false {}</code>.</p>\n<p>In my view, it would be a nice aspect of the control plane that there is no way to (mis-)use it in regular builds. But I guess that every control plane API needs to have some default output value anyway... and that can probably always be inlined as well? And we can annotate these default-returning functions with <code>#[inline]</code>.</p>\n<p>What is the downside of conditional compilation at the call sites? It seemed like an easy way to be <em>really, really sure</em> nothing bad happens in release builds, but on second thought, it doesn't seem necessary.</p>\n</blockquote>",
        "id": 346938912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680632775
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371568530\">PR review</a>.</p>",
        "id": 346941515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680633476
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157629801\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, we should be able to trust the branch-folding here.</p>\n<blockquote>\n<p>What is the downside of conditional compilation at the call sites? </p>\n</blockquote>\n<p>The main downside is that it spreads the implementation of a conditional decision across distributed points -- the alternative, where everything is wired to a single module where all conditional-compilation logic lies, makes it easier to make changes in the future. (Another example of this principle in action is the <code>memfd</code> pooling-allocator mechanism in Wasmtime: when I implemented this in #3697 last year I originally had feature-conditional code in many places, but Alex convinced me to centralize everything into two versions of one module and remove conditionals everywhere else. The result is far cleaner!)</p>\n</blockquote>",
        "id": 346941516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680633476
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346942537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680633761
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371576278\">PR review</a>.</p>",
        "id": 346942560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680633770
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157634313\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>fn take_ctrl_plane(self)</code></p>\n</blockquote>\n<p>I think that actually caught a mistake. I was taking the control plane out of the emission state inside a loop, where later loop iterations would use the state with a now-empty control plane.</p>\n</blockquote>",
        "id": 346942561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680633770
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 346955557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680637858
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371680714\">PR review</a>.</p>",
        "id": 346956383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680638141
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1157698019\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm assuming this goes for the <code>Arbitrary</code> implementation as well, so I removed the conditional compilation <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039/files#diff-7e77f700326e887cf8ef8327df2692daeb869db9116fb0c44eb80e3f18f1c987R221\">here</a> too.</p>\n<p>The shim control plane's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039/files#diff-39db0fd3f924e4c55e0925a710768bec6cca5922b2ea4d0a842dd2d057e670a9R15-R19\"><code>Arbitrary</code> implementation</a> now returns the default without consuming any bytes.</p>\n</blockquote>",
        "id": 346956384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680638141
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1371817265\">PR review</a>.</p>",
        "id": 346972785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680643680
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 347198500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680711808
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373307537\">PR review</a>.</p>",
        "id": 347202938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680712882
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158767443\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think <code>define_function</code> should get this argument. If you need this fine control you should probably use <code>define_function_bytes</code> instead. This doesn't work with a module that serializes functions rather than immediately compiles them and it is confusing for most users of cranelift.</p>\n</blockquote>",
        "id": 347202940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680712882
    },
    {
        "content": "<p>remlse submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373351794\">PR review</a>.</p>",
        "id": 347210655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680714690
    },
    {
        "content": "<p>remlse created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158797519\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039/files#diff-17f3fdc5172c9af53a3856f528d285db460761da8ab7be6a512bb01631cd6879R238\">this is the place</a> we actually needed that argument. So that would have to be rewritten with <code>define_function_bytes</code>. The module there is a <code>JITModule</code> and its <code>define_function</code> and <code>define_function_bytes</code> methods are not trivial, so it's not obvious to me how to do that.</p>\n</blockquote>",
        "id": 347210656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680714690
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373358807\">PR review</a>.</p>",
        "id": 347211928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680714985
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158802321\">PR review comment</a>:</p>\n<blockquote>\n<p>cranelift-object implements <code>define_function</code> as <code> ctx.compile_and_emit(self.isa(), &amp;mut code, ctrl_plane)</code> followed by <code>define_function_bytes</code>. You could do the same in <code>TestFileCompiler</code>.</p>\n</blockquote>",
        "id": 347211930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680714985
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373361682\">PR review</a>.</p>",
        "id": 347212384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680715106
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158804271\">PR review comment</a>:</p>\n<blockquote>\n<p>@bjorn3 in general the approach we've been taking is to thread through the control-plane everywhere compilation can be invoked; conceptually it's now another input along with the CLIF. (It does have a <code>Default</code> implementation.) If there's a way to rename this variant to a third option, and then have a variant that uses a default control plane, we can perhaps do that. Would you be willing to do that in a followup PR?</p>\n</blockquote>",
        "id": 347212385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680715107
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 347217834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680716647
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 347222507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680717978
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158853417\">PR review comment</a>:</p>\n<blockquote>\n<p>From a usability perspective having another method would work. But when serializing rather than compiling, a <code>ControlPlane</code> argument doesn't really make any sense as you can't serialize <code>ControlPlane</code>. (I have local changes to make a serializing <code>Module</code> which I want to upstream. I'm using it to allow using cranelift-interpreter in cg_clif with minimal changes to cg_clif.)</p>\n</blockquote>",
        "id": 347223312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680718226
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373438086\">PR review</a>.</p>",
        "id": 347223313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680718227
    },
    {
        "content": "<p>remlse updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 347227601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680719474
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373551532\">PR review</a>.</p>",
        "id": 347238051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680722920
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158929694\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure I understand why serialization of modules implies the need to serialize a <code>ControlPlane</code> -- it is given as an argument, it isn't stored -- but please do create an issue or PR with a fix if you have one in mind. In the meantime I'll go ahead and merge this PR (which has been under review for a while and we have general consensus on).</p>\n</blockquote>",
        "id": 347238053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680722921
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#pullrequestreview-1373557269\">PR review</a>.</p>",
        "id": 347238885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680723199
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039#discussion_r1158933401\">PR review comment</a>:</p>\n<blockquote>\n<p>If the passed in <code>ControlPlane</code> should affect the eventual compilation of the function, it did need to be serialized. If not, there it doesn't really make much sense to pass in <code>ControlPlane</code>.</p>\n<blockquote>\n<p>In the meantime I'll go ahead and merge this PR (which has been under review for a while and we have general consensus on).</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 347238887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680723200
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6039\">PR #6039</a>.</p>",
        "id": 347244108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680724971
    }
]