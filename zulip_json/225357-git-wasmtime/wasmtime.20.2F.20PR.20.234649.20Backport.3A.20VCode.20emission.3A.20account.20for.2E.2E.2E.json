[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4649\">PR #4649</a> from <code>backport-pr4644-0.40.0</code> to <code>release-0.40.0</code>:</p>\n<blockquote>\n<p>This is a backport of #4644. The issue is a compiler panic reachable<br>\nvia a Wasm module input, so merits a backport to the (pending)<br>\nrelease branch.</p>\n<p>To determine whether we need to insert a \"veneer island\" of<br>\nbranch-range extension veneers, we need to know ahead of emitting a<br>\nbasic block the worst-case size of that block. This is because veneers<br>\nonly go between blocks (we could plop one in the middle of a block but<br>\nthat would require another jump around it and would probably pessimize<br>\nsome code significantly), and we can't back up once we emit a block.</p>\n<p>To compute this worst-case size, we take the number of instructions<br>\nand multiply by the largest possible size of one pseudoinst (e.g., on<br>\naarch64, this is 44 bytes; it explicitly excludes the <code>EmitIsland</code><br>\npseudo-op which is used before large jumptable inline offset tables<br>\nare emitted). This is conservative, but it always works, and veneers<br>\nare somewhat rare in practice (function body &gt;1MiB on aarch64 for<br>\nexample).</p>\n<p>Unfortunately this logic didn't account for the spill/reload/move<br>\ninstructions inserted by the register allocator, and in one example in<br>\nissue #4629, a block had only one instruction but 482<br>\nedge-moves (!). This came at just the wrong time as we were<br>\napproaching the 1MiB limit on aarch64.</p>\n<p>This PR fixes that issue, and fixes the logic to actually look at the<br>\ncorrect next block (next in <code>final_order</code> rather than numerically<br>\nnext), as a bonus correctness fix.</p>\n<p>Fixes #4629.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 292499976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659994634
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4649\">PR #4649</a>.</p>",
        "id": 292499977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659994634
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4649#pullrequestreview-1066826531\">PR review</a>.</p>",
        "id": 292588673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660055179
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4649\">PR #4649</a>.</p>",
        "id": 292588681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660055184
    }
]