[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 200912742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592238372
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a>.</p>",
        "id": 200912743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592238372
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> and <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a>.</p>",
        "id": 200912744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592238372
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-430813326\">PR Review</a>.</p>",
        "id": 200914209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592239119
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-431046003\">PR Review</a>.</p>",
        "id": 200955413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592261576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#discussion_r440490049\">PR Review Comment</a>:</p>\n<blockquote>\n<p>My understanding of this is that adding <code>haswell</code> here means that only hosts compatible with the <code>haswell</code> flags will run this test (that's what we documented in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/docs/testing.md#test-run\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/docs/testing.md#test-run</a>). Is that the intent? Or do we want to try to run on <code>nehalem</code> and above since that has the SSE flags needed? (It's probably hard to find hardware to trigger this error...).</p>\n</blockquote>",
        "id": 200955414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592261576
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-431046538\">PR Review</a>.</p>",
        "id": 200955523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592261663
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#discussion_r440490514\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We could fix #1558 while we're at it: we probably want to print something to tell the user we ignored a run test because of hardware issues.</p>\n</blockquote>",
        "id": 200955524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592261663
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-431315607\">PR Review</a>.</p>",
        "id": 200990155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592299055
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#discussion_r440707901\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is actually reflecting a reality that's implicit at the moment: the host machine <em>must</em> match some SSE level to be able to effectively run the tests. I think this was implicit because the native host ISA would parse the CPUID, and all the machines running this would have the SSE SSE prerequisites. But this means that somebody who'd try to run the test on a very old machine might not be able to, and run into illegal instructions exceptions there.</p>\n<p>This was uncovered by the change in this patch that uses the target ISA to compile, as defined in the test file, rather than the host's one built and configured from within the Rust code. (To answer your question in another comment, this was required to make it possible to pass the <code>use_new_backend</code> flag to the test.)</p>\n<p>I'll identify what the precise SSE flags are, and will try to mitigate the potential SSE flags mismatch issue.</p>\n</blockquote>",
        "id": 200990156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592299055
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-431320876\">PR Review</a>.</p>",
        "id": 200990784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592299467
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#discussion_r440711887\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The reason for which it was \"commented out\" here is that this test doesn't pass yet with the new x64 backend: we need enough IR lowering for creating the trampolines (and iconst/icmp).</p>\n</blockquote>",
        "id": 200990785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592299467
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#pullrequestreview-431535096\">PR Review</a>.</p>",
        "id": 201018711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592315947
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880#discussion_r440873057\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's actually quite complicated, because the target specific flags are not to be queried outside the TargetIsa impl. I tried a lot of different things and lost a lot of time, so I went back to something simpler (this is testing only, after all): ensure the host is Nehalem at least, and by policy ensure that no one will add run tests that require more than that. We'll need to find a more long-term solution that does the right thing, probably with a full refactoring of the flags system.</p>\n</blockquote>",
        "id": 201018712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592315947
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a>.</p>",
        "id": 201018826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592315986
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 201019068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592316062
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 201034940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592322454
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 201044527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592326676
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 201147278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592403557
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a> from <code>x64-testing</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>First commit adds capabilities in wasmtime to allow trying the new x64 backing (see commit message for a complete command line example of how to do it). @fitzgen can you have a look, please?</li>\n<li>Second commit makes it possible to run x64 tests in the <code>test run</code> mode. It uncovered one issue I'm not quite sure how to handle, but that's preexisting and it's not been a problem so far. @abrown, can you have a look, please?</li>\n</ul>\n<p>This should make it much easier to hack on and try the new work-in-progress x64 backend. Eventually we can delete the Cargo feature for wasmtime once the transition to the new backend is over.</p>\n</blockquote>",
        "id": 201150205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592404764
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1880\">PR #1880</a>.</p>",
        "id": 201156401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592407128
    }
]