[
    {
        "content": "<p>philpax opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124\">issue #6124</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>wit-bindgen</code> recently updated its code generation to generate owned-only types by default:</p>\n<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/547\">https://github.com/bytecodealliance/wit-bindgen/pull/547</a><br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/552\">https://github.com/bytecodealliance/wit-bindgen/pull/552</a></p>\n<p>I would like <code>wasmtime</code> to match this.</p>\n<h4>Benefit</h4>\n<p>As mentioned in <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/535\">https://github.com/bytecodealliance/wit-bindgen/issues/535</a>, binding generation of borrowed types can be tedious with nested types. Owned types simplify this.</p>\n<h4>Implementation</h4>\n<p>Porting over the changes from <code>wit-bindgen</code> should be sufficient.<br>\n</p>\n</blockquote>",
        "id": 345624571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680171314
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124#issuecomment-1497625958\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124\">issue #6124</a>:</p>\n<blockquote>\n<p>I think that this is already done, but have you found differently when using the <code>wasmtime::component::bindgen!</code> macro?</p>\n</blockquote>",
        "id": 347172215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680706356
    },
    {
        "content": "<p>philpax <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124#issuecomment-1497871374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124\">issue #6124</a>:</p>\n<blockquote>\n<p>We've actually refactored our code to make it less necessary now, but</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wit-bindgen-borrow-bug-repro\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"c1\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wasmtime.git\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"51e8eafff2b0bb2a10efb1452a23c4c9feff4261\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"component-model\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world bindings {\n    export exp: self.exp\n    import imp: self.imp\n}\n\ninterface common {\n    type value = list&lt;tuple&lt;&gt;&gt;\n    type entity = list&lt;tuple&lt;u32, value&gt;&gt;\n}\n\ninterface exp {\n    use self.common.{entity}\n    exp: func(a: entity) -&gt; entity\n}\n\ninterface imp {\n    use self.common.{entity}\n    imp: func(a: entity) -&gt; entity\n}\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"main.bindings\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The bindgen generates <code>Param</code> and <code>Result</code> types:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(clippy::all)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">common</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">anyhow</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">ValueParam</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[()];</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ValueParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ValueParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">ValueResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ValueResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">ValueResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ValueParam</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)];</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EntityResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ValueResult</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">linker</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">get</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">U</span>: <span class=\"nc\">Host</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"common\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[allow(clippy::all)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">imp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">anyhow</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Entity</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">common</span>::<span class=\"n\">EntityResult</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">imp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">Entity</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">linker</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">get</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">U</span>: <span class=\"nc\">Host</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"imp\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"imp\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,)</span>: <span class=\"p\">(</span><span class=\"n\">Entity</span><span class=\"p\">,)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">());</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">imp</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">r</span><span class=\"o\">?</span><span class=\"p\">,))</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[allow(clippy::all)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">exp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">__internal</span>::<span class=\"n\">anyhow</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">common</span>::<span class=\"n\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityParam</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EntityResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">common</span>::<span class=\"n\">EntityResult</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">SIZE32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">EntityResult</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ComponentType</span><span class=\"o\">&gt;</span>::<span class=\"n\">ALIGN32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$crate</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"explicit panic\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Exp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">exp</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Func</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Exp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">__exports</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">ExportInstance</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Exp</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">__exports</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">EntityResult</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"exp\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Exp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_exp</span><span class=\"o\">&lt;</span><span class=\"n\">S</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">AsContextMut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"nc\">S</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">arg0</span>: <span class=\"nc\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EntityResult</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">TypedFunc</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">EntityParam</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">EntityResult</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span>::<span class=\"n\">new_unchecked</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">exp</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret0</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">callee</span><span class=\"p\">.</span><span class=\"n\">post_return</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ret0</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 347216033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680716142
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124#issuecomment-1501903164\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124\">issue #6124</a>:</p>\n<blockquote>\n<p>Ah ok, thanks for the example!</p>\n</blockquote>",
        "id": 348234742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681137864
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6124\">issue #6124</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>wit-bindgen</code> recently updated its code generation to generate owned-only types by default:</p>\n<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/547\">https://github.com/bytecodealliance/wit-bindgen/pull/547</a><br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/552\">https://github.com/bytecodealliance/wit-bindgen/pull/552</a></p>\n<p>I would like <code>wasmtime</code> to match this.</p>\n<h4>Benefit</h4>\n<p>As mentioned in <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/535\">https://github.com/bytecodealliance/wit-bindgen/issues/535</a>, binding generation of borrowed types can be tedious with nested types. Owned types simplify this.</p>\n<h4>Implementation</h4>\n<p>Porting over the changes from <code>wit-bindgen</code> should be sufficient.<br>\n</p>\n</blockquote>",
        "id": 348263334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681146046
    }
]