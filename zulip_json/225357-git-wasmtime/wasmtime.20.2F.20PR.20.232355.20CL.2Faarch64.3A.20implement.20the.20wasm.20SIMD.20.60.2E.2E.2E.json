[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a> from <code>arm64-simd-loadzero</code> to <code>main</code>:</p>\n<blockquote>\n<p>…ons.</p>\n<p>This patch implements, for aarch64, the following wasm SIMD extensions.</p>\n<p>v128.load32_zero and v128.load64_zero instructions<br>\n<a href=\"https://github.com/WebAssembly/simd/pull/237\">https://github.com/WebAssembly/simd/pull/237</a></p>\n<p>The changes are straightforward:</p>\n<ul>\n<li>\n<p>no new CLIF instructions.  They are translated into an existing CLIF scalar<br>\n  load followed by a CLIF <code>scalar_to_vector</code>.</p>\n</li>\n<li>\n<p>the comment/specification for CLIF <code>scalar_to_vector</code> has been changed to<br>\n  match the actual intended semantics, per consulation with Andrew Brown.</p>\n</li>\n<li>\n<p>translation from <code>scalar_to_vector</code> to the obvious aarch64 insns.</p>\n</li>\n<li>\n<p>special-case zero in <code>lower_constant_f128</code> in order to avoid a<br>\n  potentially slow call to <code>Inst::load_fp_constant128</code>.</p>\n</li>\n<li>\n<p>Once \"Allow loads to merge into other operations during instruction<br>\n  selection in MachInst backends\"<br>\n  (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/2340\">https://github.com/bytecodealliance/wasmtime/issues/2340</a>) lands,<br>\n  we can use that functionality to pattern match the two-CLIF pair and<br>\n  emit a single AArch64 instruction.</p>\n</li>\n</ul>\n<p>There is no testcase in this commit, because that is a separate repo.  The<br>\nimplementation has been tested, nevertheless.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215478072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604421325
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a> from <code>arm64-simd-loadzero</code> to <code>main</code>:</p>\n<blockquote>\n<p>…ons.</p>\n<p>This patch implements, for aarch64, the following wasm SIMD extensions.</p>\n<p>v128.load32_zero and v128.load64_zero instructions<br>\n<a href=\"https://github.com/WebAssembly/simd/pull/237\">https://github.com/WebAssembly/simd/pull/237</a></p>\n<p>The changes are straightforward:</p>\n<ul>\n<li>\n<p>no new CLIF instructions.  They are translated into an existing CLIF scalar<br>\n  load followed by a CLIF <code>scalar_to_vector</code>.</p>\n</li>\n<li>\n<p>the comment/specification for CLIF <code>scalar_to_vector</code> has been changed to<br>\n  match the actual intended semantics, per consulation with Andrew Brown.</p>\n</li>\n<li>\n<p>translation from <code>scalar_to_vector</code> to the obvious aarch64 insns.</p>\n</li>\n<li>\n<p>special-case zero in <code>lower_constant_f128</code> in order to avoid a<br>\n  potentially slow call to <code>Inst::load_fp_constant128</code>.</p>\n</li>\n<li>\n<p>Once \"Allow loads to merge into other operations during instruction<br>\n  selection in MachInst backends\"<br>\n  (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/2340\">https://github.com/bytecodealliance/wasmtime/issues/2340</a>) lands,<br>\n  we can use that functionality to pattern match the two-CLIF pair and<br>\n  emit a single AArch64 instruction.</p>\n</li>\n</ul>\n<p>There is no testcase in this commit, because that is a separate repo.  The<br>\nimplementation has been tested, nevertheless.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215478746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604421629
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-522707271\">PR Review</a>.</p>",
        "id": 215482520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604423212
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a>.</p>",
        "id": 215483332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604423588
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-522717213\">PR Review</a>.</p>",
        "id": 215484034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604423934
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-522779227\">PR Review</a>.</p>",
        "id": 215495919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604429574
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-522779227\">PR Review</a>.</p>",
        "id": 215495920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604429574
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r516879471\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This should simply be <code>Inst::MovToFpu</code>, and then there is no need for <code>lower_constant_f128()</code>.</p>\n<p>BTW if the original load is a FP load, then this could be a move.</p>\n</blockquote>",
        "id": 215495921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604429574
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523231811\">PR Review</a>.</p>",
        "id": 215563804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604485906
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r517245624\">PR Review Comment</a>:</p>\n<blockquote>\n<p>From reading of <code>FMOV (general)</code>, I don't see anything that implies that lanes 1 and above of the destination register are zeroed.  I may well have missed it though; can you clarify?</p>\n</blockquote>",
        "id": 215563805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604485907
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523336289\">PR Review</a>.</p>",
        "id": 215576359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604494800
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r517325318\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The <a href=\"https://developer.arm.com/docs/ddi0596/latest/simd-and-floating-point-instructions-alphabetic-order/fmov-general-floating-point-move-to-or-from-general-purpose-register-without-conversion\">pseudocode</a> for <code>FMOV (general)</code> uses the <a href=\"https://developer.arm.com/docs/ddi0596/latest/shared-pseudocode-functions/aarch64-functionsregisters-pseudocode#impl-aarch64.V.write.1\">assignment form</a> of <code>Vpart[]</code>, which zero-extends the written value if <code>part</code> is <code>0</code>, as the comments in the pseudocode state.</p>\n</blockquote>",
        "id": 215576360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604494800
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a> from <code>arm64-simd-loadzero</code> to <code>main</code>:</p>\n<blockquote>\n<p>…ons.</p>\n<p>This patch implements, for aarch64, the following wasm SIMD extensions.</p>\n<p>v128.load32_zero and v128.load64_zero instructions<br>\n<a href=\"https://github.com/WebAssembly/simd/pull/237\">https://github.com/WebAssembly/simd/pull/237</a></p>\n<p>The changes are straightforward:</p>\n<ul>\n<li>\n<p>no new CLIF instructions.  They are translated into an existing CLIF scalar<br>\n  load followed by a CLIF <code>scalar_to_vector</code>.</p>\n</li>\n<li>\n<p>the comment/specification for CLIF <code>scalar_to_vector</code> has been changed to<br>\n  match the actual intended semantics, per consulation with Andrew Brown.</p>\n</li>\n<li>\n<p>translation from <code>scalar_to_vector</code> to the obvious aarch64 insns.</p>\n</li>\n<li>\n<p>special-case zero in <code>lower_constant_f128</code> in order to avoid a<br>\n  potentially slow call to <code>Inst::load_fp_constant128</code>.</p>\n</li>\n<li>\n<p>Once \"Allow loads to merge into other operations during instruction<br>\n  selection in MachInst backends\"<br>\n  (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/2340\">https://github.com/bytecodealliance/wasmtime/issues/2340</a>) lands,<br>\n  we can use that functionality to pattern match the two-CLIF pair and<br>\n  emit a single AArch64 instruction.</p>\n</li>\n</ul>\n<p>There is no testcase in this commit, because that is a separate repo.  The<br>\nimplementation has been tested, nevertheless.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215620881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604513790
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523620834\">PR Review</a>.</p>",
        "id": 215621149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604513917
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r517541593\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I rewrote it to generate <code>FMOV</code> only.</p>\n</blockquote>",
        "id": 215621150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604513917
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523636310\">PR Review</a>.</p>",
        "id": 215623598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604515199
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523641798\">PR Review</a>.</p>",
        "id": 215624531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604515642
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r517557941\">PR Review Comment</a>:</p>\n<blockquote>\n<p>BTW I don't mind the comment at al, but this operation is not special - virtually any instruction that operates on <code>S</code> or <code>D</code> registers (e.g. <code>Inst::FpuRR</code>) has exactly the same behaviour.</p>\n</blockquote>",
        "id": 215624532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604515642
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a>.</p>",
        "id": 215624931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604515809
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#pullrequestreview-523645897\">PR Review</a>.</p>",
        "id": 215625313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604515983
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355#discussion_r517557941\">PR Review Comment</a>.</p>",
        "id": 215625521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604516065
    },
    {
        "content": "<p>julian-seward1 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2355\">PR #2355</a>.</p>",
        "id": 215626306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604516407
    }
]