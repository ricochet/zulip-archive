[
    {
        "content": "<p>ggreif opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4995252/sumsX.wasm.zip\">sumsX.wasm.zip</a><br>\nCompile <code>sumsX.wasm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Now inspect the DWARF in <code>sumsX.o</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">less</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Search for <code>dayX</code>.<br>\nYou'll find 2 occurrences:</p>\n<ul>\n<li>as a parameter to subprogram <code>spell</code> (this is good), with a bogus type: <code>WebAssemblyRefWrapper&lt;??&gt;</code></li>\n<li>as a parameter to subprogram <code>Text.compare_eq</code> (this is bogus).</li>\n</ul>\n<p>My suspicion is that the output-side DIEs are wrongly linked. Maybe an off-by-many error, or an iterator invalidation problem?</p>\n</blockquote>",
        "id": 205360749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596031543
    },
    {
        "content": "<p>ggreif labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4995252/sumsX.wasm.zip\">sumsX.wasm.zip</a><br>\nCompile <code>sumsX.wasm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Now inspect the DWARF in <code>sumsX.o</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">less</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Search for <code>dayX</code>.<br>\nYou'll find 2 occurrences:</p>\n<ul>\n<li>as a parameter to subprogram <code>spell</code> (this is good), with a bogus type: <code>WebAssemblyRefWrapper&lt;??&gt;</code></li>\n<li>as a parameter to subprogram <code>Text.compare_eq</code> (this is bogus).</li>\n</ul>\n<p>My suspicion is that the output-side DIEs are wrongly linked. Maybe an off-by-many error, or an iterator invalidation problem?</p>\n</blockquote>",
        "id": 205360750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596031543
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Here is the file for the reproduction:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4995252/sumsX.wasm.zip\">sumsX.wasm.zip</a></p>\n<p>Compile <code>sumsX.wasm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Now inspect the DWARF in <code>sumsX.o</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">less</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Search for <code>dayX</code>.<br>\nYou'll find 2 occurrences:</p>\n<ul>\n<li>as a parameter to subprogram <code>spell</code> (this is good), with a bogus type: <code>WebAssemblyRefWrapper&lt;??&gt;</code></li>\n<li>as a parameter to subprogram <code>Text.compare_eq</code> (this is bogus).</li>\n</ul>\n<p>My suspicion is that the output-side DIEs are wrongly linked. Maybe an off-by-many error, or an iterator invalidation problem?</p>\n</blockquote>",
        "id": 205360893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596031601
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-665687159\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>CC @yurydelendik </p>\n</blockquote>",
        "id": 205361270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596031774
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-665854952\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Yuri explained to me the <code>WebAssemblyRefWrapper&lt;??&gt;</code> issue, it appears to be by design. The second is not a priority for me, though certainly concerning.</p>\n</blockquote>",
        "id": 205401852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596050585
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-665854952\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Yuri explained to me the <code>WebAssemblyRefWrapper&lt;??&gt;</code> issue offline, it appears to be by design. The second is not a priority for me, though certainly concerning.</p>\n</blockquote>",
        "id": 205401891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596050612
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-665956017\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Just to reiterate the above conversation, a native debugger cannot directly access pointer/reference data, so currently JIT code transform such types into WebAssemblyPtrWrapper/WebAssemblyRefWrapper. These types contain only 32-bits <code>__ptr</code> field (and have some utility methods to unwrap into original types). While it is incontinent the local <code>__vmctx</code> has to be used to \"unwrap\" the referenced data, e.g. via <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a></p>\n<p>The approach documented at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/debug/src/transform/unit.rs#L90-L106\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/debug/src/transform/unit.rs#L90-L106</a></p>\n</blockquote>",
        "id": 205419563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596060565
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-665956017\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Just to reiterate the above conversation, a native debugger cannot directly access pointer/reference data, so currently JIT code transform such types into WebAssemblyPtrWrapper/WebAssemblyRefWrapper. These types contain only 32-bits <code>__ptr</code> field (and have some utility methods to unwrap into original types). While it is inconvenient, the local <code>__vmctx</code> has to be used to \"unwrap\" the referenced data, e.g. via <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a></p>\n<p>The approach documented at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/debug/src/transform/unit.rs#L90-L106\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/debug/src/transform/unit.rs#L90-L106</a></p>\n</blockquote>",
        "id": 205419645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596060606
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>Here is the file for the reproduction:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/4995252/sumsX.wasm.zip\">sumsX.wasm.zip</a></p>\n<p>Compile <code>sumsX.wasm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">wasm2obj</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Now inspect the DWARF in <code>sumsX.o</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">dwarfdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">sumsX</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">less</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Search for <code>dayX</code>.<br>\nYou'll find 2 occurrences:</p>\n<ul>\n<li>as a parameter to subprogram <code>spell</code> (this is good), <del>with a bogus type: <code>WebAssemblyRefWrapper&lt;??&gt;</code></del></li>\n<li>as a parameter to subprogram <code>Text.compare_eq</code> (this is bogus).</li>\n</ul>\n<p>My suspicion is that the output-side DIEs are wrongly linked. Maybe an off-by-many error, or an iterator invalidation problem?</p>\n</blockquote>",
        "id": 206342125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596882406
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-670881153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>@yurydelendik it turns out that <code>wasmtime</code> already correctly translates <code>DW_OP_deref</code> into an addition with the memory base followed by a dereferencing. So I am refraining from declaring the parameter type as a <code>DW_TAG_reference_type</code>, instead doing the dereferencing in the location expression and returning the C-style <code>enum</code> as <code>DW_OP_stack_value</code>. </p>\n</blockquote>",
        "id": 206343069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596884173
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-670881153\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>@yurydelendik it turns out that <code>wasmtime</code> already correctly translates <code>DW_OP_deref</code> into an addition with the memory base followed by a dereferencing. So I am refraining from declaring the parameter type as a <code>DW_TAG_reference_type</code>, instead doing the dereferencing in the location expression and returning the C-style <code>enum</code> as <code>DW_OP_stack_value</code>.  This pretty much reduces my pain about item 1. Item 2 persists, but <code>wasm2obj</code> generation seems to exhibit many bugs, I also can't make sense of the <code>.debug_line</code> section generated by it. The offsets seem totally off.</p>\n</blockquote>",
        "id": 206343241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596884510
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078#issuecomment-670881153\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2078\">Issue #2078</a>:</p>\n<blockquote>\n<p>@yurydelendik it turns out that <code>wasmtime</code> already correctly translates <code>DW_OP_deref</code> into an addition with the memory base followed by a dereferencing. So I am refraining from declaring the parameter type as a <code>DW_TAG_reference_type</code>, instead doing the dereferencing in the location expression and returning the C-style <code>enum</code> as <code>DW_OP_stack_value</code>.  This pretty much reduces my pain about item 1. Item 2 persists, but <code>wasm2obj</code> generation seems to exhibit many bugs, I also can't make sense of the <code>.debug_line</code> section generated by it. The x86 code offsets seem totally off.</p>\n</blockquote>",
        "id": 206343286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596884533
    }
]