[
    {
        "content": "<p>avanhatt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049148317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>FWIW, I tried merging this with our verification branch to try it on the iadd example (full test case <a href=\"https://github.com/avanhatt/wasmtime/blob/veri-isle-conversions/cranelift/isle/veri/veri_engine/src/main.rs#L145\">here</a>), and I'm seeing this newly added error from <code>isle::sema</code> in using a constructor. Am I messing up the syntax here? Also, should I be seeing the name of the term that's unknown?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">TypeError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"s\">\"Unknown term for converter\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"nc\">Source</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"s\">\"fuzz-input.isle\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"s\">\"&lt;redacted&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">SourceSpan</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">SourceOffset</span><span class=\"p\">(</span><span class=\"mi\">362</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"nc\">SourceOffset</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"o\">/</span><span class=\"n\">veri</span><span class=\"o\">/</span><span class=\"n\">veri_engine</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">26</span>:<span class=\"mi\">58</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Example snippet (full snippet linked above):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">Inst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">Reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">ValueRegs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">ValueRegs</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">NEW</span>: <span class=\"nc\">IMPLICIT</span><span class=\"w\"> </span><span class=\"n\">CONVERTERS</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">ValueRegs</span><span class=\"w\"> </span><span class=\"n\">value_reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">put_in_reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 273001315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645645432
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049160750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>@avanhatt that's odd; that's a fairly basic error indicating that the lookup of the term name itself (<code>value_reg</code> or <code>put_in_reg</code> in your snippet) failed. The syntax looks right, and this feature is definitely working correctly otherwise in tests and in my exploratory use of it, so I might check if the merge introduced some issue?</p>\n</blockquote>",
        "id": 273003384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645646375
    },
    {
        "content": "<p>avanhatt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049168977\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>@cfallin ah, it was a silly mistake, I misinterpreted the <code>convert</code> statement as _replacing_ the <code>decl</code>/<code>extern ...</code> statements for the term rather than being in addition to them. Looks like it works now adding those back! </p>\n<p>I might add to the section of the docs that the converter must already be defined? This part is what I misunderstood:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Now</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">conversion</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"err\">```</span><span class=\"n\">lisp</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">ValueRegs</span><span class=\"w\"> </span><span class=\"n\">value_reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 273004584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645646936
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049175116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>OK, great -- added a note in the language reference highlighting the explicit decl, and in the Cranelift-ISLE integration doc. Thanks!</p>\n</blockquote>",
        "id": 273005441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645647351
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049175143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>Either way, that should be a nicely reported error, not an <code>unwrap</code> panic.</p>\n</blockquote>",
        "id": 273005448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645647353
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049175947\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<blockquote>\n<p>Either way, that should be a nicely reported error, not an unwrap panic.</p>\n</blockquote>\n<p>Yep, it was already a properly reported error (the unwrap was in the unit-test wrapper), but I added type and term names in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807/commits/90e6f72d3e5f9b83ee0b12eaecf27a34d881fee0\">this</a> commit.</p>\n</blockquote>",
        "id": 273005602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645647413
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049176104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>Oh I see it is your code that is doing the <code>unwrap</code> not the ISLE compiler itself, nvm!</p>\n</blockquote>",
        "id": 273005632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645647424
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049179460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>@avanhatt FWIW, you should be able to get better error messages with source context snippets and stuff (like how <code>rustc</code> provides) if you crib from this code a bit:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/build.rs#L325\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/build.rs#L325</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/build.rs#L417-L444\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/build.rs#L417-L444</a></li>\n</ul>\n<p>(It is annoying that it requires this song and dance, and we should improve that at some point, but that's what is needed for the moment.)</p>\n</blockquote>",
        "id": 273006171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645647680
    },
    {
        "content": "<p>avanhatt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049186139\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<p>Great, thanks for the edits + source debugging tip! And sorry for the <code>unwrap</code> confusion. </p>\n<p>One other small observation about implicit conversions: one thing you might lose when these are done implicitly is seeing why a special case rewrite is beneficial at a first glance. </p>\n<p>For example, in the add-to-sub rule, it's not as obvious anymore that the RHS avoids an extra register use, because visually <code>x</code> and <code>y</code> look the same:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm12_from_negated_value</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">sub_imm</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Definitely less important than the convenience this adds, especially with motivating comments, but thought I'd point it out.</p>\n</blockquote>",
        "id": 273007148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645648169
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807#issuecomment-1049231395\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3807\">issue #3807</a>:</p>\n<blockquote>\n<blockquote>\n<p>For example, in the add-to-sub rule, it's not as obvious anymore that the RHS avoids an extra register use, because visually <code>x</code> and <code>y</code> look the same:</p>\n</blockquote>\n<p>Yeah there is certainly a balance to be struck here. For example, with x64's <code>RegMemImm</code>, it may make sense to only have conversions for <code>Reg</code> to <code>RegMemImm</code> and not from memory operands and immediates. This would let us highlight the interesting operands while cutting out noise for the uninteresting common case of registers.</p>\n</blockquote>",
        "id": 273013576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645651620
    }
]