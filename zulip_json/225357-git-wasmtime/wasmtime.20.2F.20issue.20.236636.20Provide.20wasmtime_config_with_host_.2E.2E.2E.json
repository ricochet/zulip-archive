[
    {
        "content": "<p>basvandijk opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We're working on a Haskell binding to wasmtime called <a href=\"https://github.com/dfinity/wasmtime-hs\">wasmtime-hs</a>.</p>\n<p>In our project we would like to have access to the <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Config.html#method.with_host_memory\">Config::with_host_memory(...)</a> functionality. <br>\nCould this function be provided in the <a href=\"https://docs.wasmtime.dev/c-api/config_8h.html\">C API</a>? </p>\n<h4>Benefit</h4>\n<p>At the moment this functionality is only available in the Rust library. It would be nice if other languages have access to the same functionality.</p>\n<h4>Implementation</h4>\n<blockquote>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use?</p>\n</blockquote>\n<p>Not yet, it probably has to look something like this but I haven't thought about it too much yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_config_with_host_memory</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_config_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mem_creator_callback</span>: <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">with_host_memory</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasm_memorytype_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">minimum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">guard_size_in_bytes</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n</blockquote>",
        "id": 368961042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687538639
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We're working on a Haskell binding to wasmtime called <a href=\"https://github.com/dfinity/wasmtime-hs\">wasmtime-hs</a>.</p>\n<p>In our project we would like to have access to the <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Config.html#method.with_host_memory\">Config::with_host_memory(...)</a> functionality. <br>\nCould this function be provided in the <a href=\"https://docs.wasmtime.dev/c-api/config_8h.html\">C API</a>? </p>\n<h4>Benefit</h4>\n<p>At the moment this functionality is only available in the Rust library. It would be nice if other languages have access to the same functionality.</p>\n<h4>Implementation</h4>\n<blockquote>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use?</p>\n</blockquote>\n<p>Not yet, it probably has to look something like this but I haven't thought about it too much yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_config_with_host_memory</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_config_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mem_creator_callback</span>: <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">with_host_memory</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasm_memorytype_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">minimum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">guard_size_in_bytes</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n</blockquote>",
        "id": 368974718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687541579
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We're working on a Haskell binding to wasmtime called <a href=\"https://github.com/dfinity/wasmtime-hs\">wasmtime-hs</a>.</p>\n<p>In our project we would like to have access to the <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Config.html#method.with_host_memory\">Config::with_host_memory(...)</a> functionality. <br>\nCould this function be provided in the <a href=\"https://docs.wasmtime.dev/c-api/config_8h.html\">C API</a>? </p>\n<h4>Benefit</h4>\n<p>At the moment this functionality is only available in the Rust library. It would be nice if other languages have access to the same functionality.</p>\n<h4>Implementation</h4>\n<blockquote>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use?</p>\n</blockquote>\n<p>Not yet, it probably has to look something like this but I haven't thought about it too much yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_config_with_host_memory</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_config_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mem_creator_callback</span>: <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">with_host_memory</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasm_memorytype_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">minimum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">guard_size_in_bytes</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n</blockquote>",
        "id": 368974719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687541579
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636#issuecomment-1604605616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 368974873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687541620
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636#issuecomment-1604611200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<p>This sounds reasonable to me but I'm not sure what design principles we're following for Wasmtime's C API, so I'd like to get opinions from @alexcrichton or @fitzgen on what this should look like.</p>\n<p>Huh, maybe I shouldn't have used the <code>wasmtime:config</code> label. I wasn't expecting that particular auto-reply.</p>\n</blockquote>",
        "id": 368976243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687541927
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636#issuecomment-1604617997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<p>This was <a href=\"#narrow/stream/206238-general/topic/MemoryCreator.20C.20API\">discussed a bit on Zulip</a> as well and my strawman there was:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"n\">wasmtime_error_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">wasmtime_new_memory_t</span><span class=\"p\">)(</span>\n<span class=\"w\">    </span><span class=\"n\">wasm_memorytype_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ty</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">reserved_size_in_bytes</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">guard_size_in_bytes</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">ret</span><span class=\"p\">);</span>\n\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">wasmtime_memory_get_t</span><span class=\"p\">)(</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">byte_size</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">maximum_byte_size</span><span class=\"p\">);</span>\n\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"n\">wasmtime_error_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">wasmtime_memory_grow_t</span><span class=\"p\">)(</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">new_size</span><span class=\"p\">);</span>\n\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_new_memory_t</span><span class=\"w\"> </span><span class=\"n\">new_memory</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_memory_get_t</span><span class=\"w\"> </span><span class=\"n\">get_memory</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">wasmtime_memory_grow_t</span><span class=\"w\"> </span><span class=\"n\">grow_memory</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">wasmtime_memory_creator_t</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasmtime_config_memory_creator_set</span><span class=\"p\">(</span><span class=\"n\">wasmtime_config_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime_memory_creator_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">creator</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Personally I don't think the details matter too too much so long as it all works for your use case, we can always iterate over time as necessary.</p>\n<p>Note though that in the original suggestion an <code>extern \"C\" fn</code> can't return <code>Box&lt;dyn LinearMemory&gt;</code> because that's a Rust-defined structure which C can't mirror, so you'll need to package up those callbacks in addition to the <code>wasmtime_new_memory_callback_t</code> type</p>\n</blockquote>",
        "id": 368977292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687542171
    },
    {
        "content": "<p>basvandijk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636#issuecomment-1605109489\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<p>@alexcrichton thanks, I wasn't aware of that chat by my colleague :). But your strawman looks like a great start!</p>\n</blockquote>",
        "id": 369040046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687561975
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6636\">issue #6636</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>We're working on a Haskell binding to wasmtime called <a href=\"https://github.com/dfinity/wasmtime-hs\">wasmtime-hs</a>.</p>\n<p>In our project we would like to have access to the <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Config.html#method.with_host_memory\">Config::with_host_memory(...)</a> functionality. <br>\nCould this function be provided in the <a href=\"https://docs.wasmtime.dev/c-api/config_8h.html\">C API</a>? </p>\n<h4>Benefit</h4>\n<p>At the moment this functionality is only available in the Rust library. It would be nice if other languages have access to the same functionality.</p>\n<h4>Implementation</h4>\n<blockquote>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use?</p>\n</blockquote>\n<p>Not yet, it probably has to look something like this but I haven't thought about it too much yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wasmtime_config_with_host_memory</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_config_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mem_creator_callback</span>: <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">with_host_memory</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">wasmtime_new_memory_callback_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">wasm_memorytype_t</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">minimum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">maximum</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes_specified</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">reserved_size_in_bytes</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">guard_size_in_bytes</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">LinearMemory</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n</blockquote>",
        "id": 394478390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696266786
    }
]