[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4126\">issue #4126</a>:</p>\n<blockquote>\n<p>Currently, adding a new backend to Cranelift entails at least the following:</p>\n<ul>\n<li>Defining an \"assembler library\" centered on a new <code>MachInst</code> type, with all the tedious and error-prone work around that (see #4125);</li>\n<li>Defining the register set;</li>\n<li>Defining glue constructors in ISLE to generate these instructions;</li>\n<li>Defining lowering rules in ISLE;</li>\n<li>Implementing top-level driver logic for the ISLE backend;</li>\n<li>Implementing a bunch of miscellaneous traits and types, such as the <code>LabelUse</code> relocation framework;</li>\n<li>Implementing an ABI binding;</li>\n<li>Implementing unwind info and debuginfo specifics for this platform;</li>\n<li>implementing whatever is necessary in the Cranelift embedder (e.g. for wasmtime, at least the fiber support, trap handling details, and object-file details like relocations).</li>\n</ul>\n<p>While some of this is unavoidable, we should strive as much as possible to factor out the commonalities, and centralize things otherwise, and write documentation walking through the whole process.</p>\n<p>In particular:</p>\n<ul>\n<li>Solving #4125 would allow the backend author to follow a declarative approach to sketch the instruction format, then \"chase the type errors\" to fill out the emission details, without too much fear of mistakes in the glue;</li>\n<li>Generating ISLE constructors for the machine instructions automatically would help a lot;</li>\n<li>Providing \"default implementations\" for a lot of the <code>MachBackend</code> trait, and factoring out the rest into smaller traits, would eliminate a lot of the duplication that currently exists.</li>\n</ul>\n</blockquote>",
        "id": 281895136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222000
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4126\">issue #4126</a>:</p>\n<blockquote>\n<p>Currently, adding a new backend to Cranelift entails at least the following:</p>\n<ul>\n<li>Defining an \"assembler library\" centered on a new <code>MachInst</code> type, with all the tedious and error-prone work around that (see #4125);</li>\n<li>Defining the register set;</li>\n<li>Defining glue constructors in ISLE to generate these instructions;</li>\n<li>Defining lowering rules in ISLE;</li>\n<li>Implementing top-level driver logic for the ISLE backend;</li>\n<li>Implementing a bunch of miscellaneous traits and types, such as the <code>LabelUse</code> relocation framework;</li>\n<li>Implementing an ABI binding;</li>\n<li>Implementing unwind info and debuginfo specifics for this platform;</li>\n<li>implementing whatever is necessary in the Cranelift embedder (e.g. for wasmtime, at least the fiber support, trap handling details, and object-file details like relocations).</li>\n</ul>\n<p>While some of this is unavoidable, we should strive as much as possible to factor out the commonalities, and centralize things otherwise, and write documentation walking through the whole process.</p>\n<p>In particular:</p>\n<ul>\n<li>Solving #4125 would allow the backend author to follow a declarative approach to sketch the instruction format, then \"chase the type errors\" to fill out the emission details, without too much fear of mistakes in the glue;</li>\n<li>Generating ISLE constructors for the machine instructions automatically would help a lot;</li>\n<li>Providing \"default implementations\" for a lot of the <code>MachBackend</code> trait, and factoring out the rest into smaller traits, would eliminate a lot of the duplication that currently exists.</li>\n</ul>\n</blockquote>",
        "id": 281895138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222001
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4126\">issue #4126</a>:</p>\n<blockquote>\n<p>Currently, adding a new backend to Cranelift entails at least the following:</p>\n<ul>\n<li>Defining an \"assembler library\" centered on a new <code>MachInst</code> type, with all the tedious and error-prone work around that (see #4125);</li>\n<li>Defining the register set;</li>\n<li>Defining glue constructors in ISLE to generate these instructions;</li>\n<li>Defining lowering rules in ISLE;</li>\n<li>Implementing top-level driver logic for the ISLE backend;</li>\n<li>Implementing a bunch of miscellaneous traits and types, such as the <code>LabelUse</code> relocation framework;</li>\n<li>Implementing an ABI binding;</li>\n<li>Implementing unwind info and debuginfo specifics for this platform;</li>\n<li>implementing whatever is necessary in the Cranelift embedder (e.g. for wasmtime, at least the fiber support, trap handling details, and object-file details like relocations).</li>\n</ul>\n<p>While some of this is unavoidable, we should strive as much as possible to factor out the commonalities, and centralize things otherwise, and write documentation walking through the whole process.</p>\n<p>In particular:</p>\n<ul>\n<li>Solving #4125 would allow the backend author to follow a declarative approach to sketch the instruction format, then \"chase the type errors\" to fill out the emission details, without too much fear of mistakes in the glue;</li>\n<li>Generating ISLE constructors for the machine instructions automatically would help a lot;</li>\n<li>Providing \"default implementations\" for a lot of the <code>MachBackend</code> trait, and factoring out the rest into smaller traits, would eliminate a lot of the duplication that currently exists.</li>\n</ul>\n</blockquote>",
        "id": 281895139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222001
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4126\">issue #4126</a>:</p>\n<blockquote>\n<p>Currently, adding a new backend to Cranelift entails at least the following:</p>\n<ul>\n<li>Defining an \"assembler library\" centered on a new <code>MachInst</code> type, with all the tedious and error-prone work around that (see #4125);</li>\n<li>Defining the register set;</li>\n<li>Defining glue constructors in ISLE to generate these instructions;</li>\n<li>Defining lowering rules in ISLE;</li>\n<li>Implementing top-level driver logic for the ISLE backend;</li>\n<li>Implementing a bunch of miscellaneous traits and types, such as the <code>LabelUse</code> relocation framework;</li>\n<li>Implementing an ABI binding;</li>\n<li>Implementing unwind info and debuginfo specifics for this platform;</li>\n<li>implementing whatever is necessary in the Cranelift embedder (e.g. for wasmtime, at least the fiber support, trap handling details, and object-file details like relocations).</li>\n</ul>\n<p>While some of this is unavoidable, we should strive as much as possible to factor out the commonalities, and centralize things otherwise, and write documentation walking through the whole process.</p>\n<p>In particular:</p>\n<ul>\n<li>Solving #4125 would allow the backend author to follow a declarative approach to sketch the instruction format, then \"chase the type errors\" to fill out the emission details, without too much fear of mistakes in the glue;</li>\n<li>Generating ISLE constructors for the machine instructions automatically would help a lot;</li>\n<li>Providing \"default implementations\" for a lot of the <code>MachBackend</code> trait, and factoring out the rest into smaller traits, would eliminate a lot of the duplication that currently exists.</li>\n</ul>\n</blockquote>",
        "id": 281895140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652222001
    }
]