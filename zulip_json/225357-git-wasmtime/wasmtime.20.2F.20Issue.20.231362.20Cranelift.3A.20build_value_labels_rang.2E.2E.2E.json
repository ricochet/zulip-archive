[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<ul>\n<li>It assumes only one new <code>ValueLabel</code> introduced at each <code>SourceLoc</code>. (<code>build_value_labels_index</code>)</li>\n<li>It assumes <code>SourceLoc</code> is strictly ascending. (Checking for <code>last_srcloc.unwrap() &gt; srcloc</code> instead of <code>last_srcloc.unwrap() != srcloc</code>)</li>\n<li>It assumes that a <code>ValueLabel</code> is only alive for a continuous range of <code>SourceLoc</code>. (<code>values_labels.range(range)</code>)</li>\n</ul>\n<p>All of those assumptions are broken by cg_clif, meaning that <code>build_value_labels_ranges</code> often misses  values in the output.</p>\n</blockquote>",
        "id": 191114307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584625486
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<ul>\n<li>It assumes only one new <code>ValueLabel</code> introduced at each <code>SourceLoc</code>. (<code>build_value_labels_index</code>)</li>\n<li>It assumes <code>SourceLoc</code> is strictly ascending. (Checking for <code>last_srcloc.unwrap() &gt; srcloc</code> instead of <code>last_srcloc.unwrap() != srcloc</code>)</li>\n<li>It assumes that a <code>ValueLabel</code> is only alive for a continuous range of <code>SourceLoc</code>. (<code>values_labels.range(range)</code>)</li>\n</ul>\n<p>All of those assumptions are broken by cg_clif, meaning that <code>build_value_labels_ranges</code> often misses  values in the output.</p>\n</blockquote>",
        "id": 191114308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584625486
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<ul>\n<li>It assumes only one new <code>ValueLabel</code> introduced at each <code>SourceLoc</code>. (<code>build_value_labels_index</code>)</li>\n<li>It assumes <code>SourceLoc</code> is strictly ascending. (Checking for <code>last_srcloc.unwrap() &gt; srcloc</code> instead of <code>last_srcloc.unwrap() != srcloc</code>)</li>\n<li>It assumes that a <code>ValueLabel</code> is only alive for a continuous range of <code>SourceLoc</code>. (<code>values_labels.range(range)</code>)</li>\n</ul>\n<p>All of those assumptions are broken by cg_clif, meaning that <code>build_value_labels_ranges</code> often misses  values in the output.</p>\n</blockquote>",
        "id": 191114309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584625486
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601186589\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601186589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled: \"cranelift\"</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"cranelift\"&lt;/summary&gt;</p>\n<ul>\n<li>@bnjbvr</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" target=\"_blank\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 191114332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584625499
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601235242\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601235242\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<p>I started working on this at <a href=\"https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes\" target=\"_blank\" title=\"https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes\">https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes</a>, but I am stuck ATM. Associated cg_clif branch: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements\">https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements</a>. In the following case <code>val0</code>, <code>val1</code>, <code>val2</code>, <code>val3</code>, <code>val4</code> and <code>val5</code> should get one or more <code>ValueLocRange</code>'s. However only <code>val2</code> and <code>val4</code> get one.</p>\n<p>&lt;details&gt;&lt;summary&gt;Debug println&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>{\n    ComparableSourceLoc(SourceLoc(1)): [\n        (v3, val2),\n        (v3, val5),\n    ],\n    ComparableSourceLoc(SourceLoc(2)): [\n        (v3, val5),\n        (v6, val4),\n    ],\n    ComparableSourceLoc(SourceLoc(3)): [\n        (v3, val5),\n    ],\n    ComparableSourceLoc(SourceLoc(4)): [\n        (v6, val4),\n    ],\n    ComparableSourceLoc(SourceLoc(5)): [\n        (v7, val0),\n    ],\n    ComparableSourceLoc(SourceLoc(6)): [\n        (v7, val0),\n    ],\n    ComparableSourceLoc(SourceLoc(4294967294)): [\n        (v1, val2),\n        (v2, val3),\n        (v0, val1),\n    ],\n}\nInstance { def: Item(DefId(0:34 ~ mini_core_hello_world[317d]::start[0])), substs: [()] }\n{\n    val2: [ValueLocRange { loc: Reg(22), start: 5, end: 21 }],\n    val4: [ValueLocRange { loc: Reg(16), start: 21, end: 27 }],\n}\nSome({\n    v0: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val1 }]),\n    v1: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val2 }]),\n    v2: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val3 }]),\n    v3: Starts([ValueLabelStart { from: SourceLoc(1), label: val2 }, ValueLabelStart { from: SourceLoc(1), label: val5 }, ValueLabelStart { from: SourceLoc(2), label: val5 }, ValueLabelStart { from: SourceLoc(3), label: val5 }]),\n    v6: Starts([ValueLabelStart { from: SourceLoc(2), label: val4 }, ValueLabelStart { from: SourceLoc(4), label: val4 }]),\n    v7: Starts([ValueLabelStart { from: SourceLoc(5), label: val0 }, ValueLabelStart { from: SourceLoc(6), label: val0 }])\n})\nVarDebugInfo { name: &quot;main&quot;, place: _1 }\nVarDebugInfo { name: &quot;argc&quot;, place: _2 }\nVarDebugInfo { name: &quot;argv&quot;, place: _3 }\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Cranelift ir&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\ntarget x86_64-unknown-linux-gnu\n\nfunction u0:0(i64 [%rdi], i64 [%rsi], i64 [%rdx], i64 fp [%rbp]) -&gt; i64 [%rax], i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world5start17hec55b7ca64fc434eE\n; instance Instance { def: Item(DefId(0:34 ~ mini_core_hello_world[317d]::start[0])), substs: [()] }\n; sig ([fn(), isize, *const *const u8]; c_variadic: false)-&gt;isize\n\n; kind  loc.idx   param    pass mode                            ty\n; ssa   _0    isize                             8b 8, 8\n; ret   _0      -          ByVal(types::I64)                    isize\n; arg   _1      = v0       ByVal(types::I64)                    fn()\n; arg   _2      = v1       ByVal(types::I64)                    isize\n; arg   _3      = v2       ByVal(types::I64)                    *const *const u8\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    fn()                              8b 8, 8\n; ssa   _2    isize                             8b 8, 8\n; ssa   _3    *const *const u8                  8b 8, 8\n; ssa   _4    bool                              1b 1, 1\n; ssa   _5    isize                             8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n\n                                block0(v0: i64 [%rdi], v1: i64 [%rsi], v2: i64 [%rdx], v8: i64 [%rbp]):\n                                    v3 -&gt; v1\n[RexOp1pushq#50]                    x86_push v8\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n;                                                            ;  val2@%rsi\n@fffffffe [-]                       nop\n; write_cvalue: Var(_1) &lt;- ByVal(v0)\n; write_cvalue: Var(_2) &lt;- ByVal(v1)\n; write_cvalue: Var(_3) &lt;- ByVal(v2)\n@fffffffe [-]                       fallthrough block1\n\n                                block1:\n@fffffffe [-]                       nop\n; StorageLive(_4)\n; StorageLive(_5)\n; _5 = _2\n; write_cvalue: Var(_5) &lt;- ByVal(v3)\n; _4 = Eq(move _5, const 3isize)\n@0002 [RexOp1pu_id#b8,%rax]         v4 = iconst.i64 3\n@0002 [DynRexOp1icscc#8039,%rax]    v5 = icmp.i64 eq v1, v4\n@0002 [RexOp2urm_noflags#4b6,%rax]  v6 = bint.i8 v5\n; write_cvalue: Var(_4) &lt;- ByVal(v6)\n; StorageDead(_5)\n;                                                            ;  val4@%rax val2â˜ \n@0003 [ghost_use_gpr#00]            ghost_use.i64 v1\n; StorageDead(_4)\n@0004 [ghost_use_gpr#00]            ghost_use v6\n; _0 = const 0isize\n@0005 [RexOp1pu_id#b8,%rax]         v7 = iconst.i64 0\n; write_cvalue: Var(_0) &lt;- ByVal(v7)\n;\n; return\n;                                                            ;  val4â˜ \n[RexOp1popq#58,%rbp]                v9 = x86_pop.i64\n@0006 [Op1ret#c3]                   return v7, v9\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 191127346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584630791
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601235242\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601235242\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<p>I started working on this at <a href=\"https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes\" target=\"_blank\" title=\"https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes\">https://github.com/bjorn3/wasmtime/tree/value_debuginfo_fixes</a>, but I am stuck ATM. Associated cg_clif branch: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements\">https://github.com/bjorn3/rustc_codegen_cranelift/tree/wip_debuginfo_improvements</a> (bjorn3/rustc_codegen_cranelift@12b6e83a489180ff52a9376c6674202c6cd1ecda). In the following case <code>val0</code>, <code>val1</code>, <code>val2</code>, <code>val3</code>, <code>val4</code> and <code>val5</code> should get one or more <code>ValueLocRange</code>'s. However only <code>val2</code> and <code>val4</code> get one.</p>\n<p>&lt;details&gt;&lt;summary&gt;Debug println&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>{\n    ComparableSourceLoc(SourceLoc(1)): [\n        (v3, val2),\n        (v3, val5),\n    ],\n    ComparableSourceLoc(SourceLoc(2)): [\n        (v3, val5),\n        (v6, val4),\n    ],\n    ComparableSourceLoc(SourceLoc(3)): [\n        (v3, val5),\n    ],\n    ComparableSourceLoc(SourceLoc(4)): [\n        (v6, val4),\n    ],\n    ComparableSourceLoc(SourceLoc(5)): [\n        (v7, val0),\n    ],\n    ComparableSourceLoc(SourceLoc(6)): [\n        (v7, val0),\n    ],\n    ComparableSourceLoc(SourceLoc(4294967294)): [\n        (v1, val2),\n        (v2, val3),\n        (v0, val1),\n    ],\n}\nInstance { def: Item(DefId(0:34 ~ mini_core_hello_world[317d]::start[0])), substs: [()] }\n{\n    val2: [ValueLocRange { loc: Reg(22), start: 5, end: 21 }],\n    val4: [ValueLocRange { loc: Reg(16), start: 21, end: 27 }],\n}\nSome({\n    v0: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val1 }]),\n    v1: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val2 }]),\n    v2: Starts([ValueLabelStart { from: SourceLoc(4294967294), label: val3 }]),\n    v3: Starts([ValueLabelStart { from: SourceLoc(1), label: val2 }, ValueLabelStart { from: SourceLoc(1), label: val5 }, ValueLabelStart { from: SourceLoc(2), label: val5 }, ValueLabelStart { from: SourceLoc(3), label: val5 }]),\n    v6: Starts([ValueLabelStart { from: SourceLoc(2), label: val4 }, ValueLabelStart { from: SourceLoc(4), label: val4 }]),\n    v7: Starts([ValueLabelStart { from: SourceLoc(5), label: val0 }, ValueLabelStart { from: SourceLoc(6), label: val0 }])\n})\nVarDebugInfo { name: &quot;main&quot;, place: _1 }\nVarDebugInfo { name: &quot;argc&quot;, place: _2 }\nVarDebugInfo { name: &quot;argv&quot;, place: _3 }\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Cranelift ir&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\ntarget x86_64-unknown-linux-gnu\n\nfunction u0:0(i64 [%rdi], i64 [%rsi], i64 [%rdx], i64 fp [%rbp]) -&gt; i64 [%rax], i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world5start17hec55b7ca64fc434eE\n; instance Instance { def: Item(DefId(0:34 ~ mini_core_hello_world[317d]::start[0])), substs: [()] }\n; sig ([fn(), isize, *const *const u8]; c_variadic: false)-&gt;isize\n\n; kind  loc.idx   param    pass mode                            ty\n; ssa   _0    isize                             8b 8, 8\n; ret   _0      -          ByVal(types::I64)                    isize\n; arg   _1      = v0       ByVal(types::I64)                    fn()\n; arg   _2      = v1       ByVal(types::I64)                    isize\n; arg   _3      = v2       ByVal(types::I64)                    *const *const u8\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    fn()                              8b 8, 8\n; ssa   _2    isize                             8b 8, 8\n; ssa   _3    *const *const u8                  8b 8, 8\n; ssa   _4    bool                              1b 1, 1\n; ssa   _5    isize                             8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n\n                                block0(v0: i64 [%rdi], v1: i64 [%rsi], v2: i64 [%rdx], v8: i64 [%rbp]):\n                                    v3 -&gt; v1\n[RexOp1pushq#50]                    x86_push v8\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n;                                                            ;  val2@%rsi\n@fffffffe [-]                       nop\n; write_cvalue: Var(_1) &lt;- ByVal(v0)\n; write_cvalue: Var(_2) &lt;- ByVal(v1)\n; write_cvalue: Var(_3) &lt;- ByVal(v2)\n@fffffffe [-]                       fallthrough block1\n\n                                block1:\n@fffffffe [-]                       nop\n; StorageLive(_4)\n; StorageLive(_5)\n; _5 = _2\n; write_cvalue: Var(_5) &lt;- ByVal(v3)\n; _4 = Eq(move _5, const 3isize)\n@0002 [RexOp1pu_id#b8,%rax]         v4 = iconst.i64 3\n@0002 [DynRexOp1icscc#8039,%rax]    v5 = icmp.i64 eq v1, v4\n@0002 [RexOp2urm_noflags#4b6,%rax]  v6 = bint.i8 v5\n; write_cvalue: Var(_4) &lt;- ByVal(v6)\n; StorageDead(_5)\n;                                                            ;  val4@%rax val2â˜ \n@0003 [ghost_use_gpr#00]            ghost_use.i64 v1\n; StorageDead(_4)\n@0004 [ghost_use_gpr#00]            ghost_use v6\n; _0 = const 0isize\n@0005 [RexOp1pu_id#b8,%rax]         v7 = iconst.i64 0\n; write_cvalue: Var(_0) &lt;- ByVal(v7)\n;\n; return\n;                                                            ;  val4â˜ \n[RexOp1popq#58,%rbp]                v9 = x86_pop.i64\n@0006 [Op1ret#c3]                   return v7, v9\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 191129858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584631828
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601306565\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-601306565\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>[\n    LiveRange { value: v0, affinity: Reg(RegClassIndex(0)), def_begin: ProgramPoint(block0), def_end: ProgramPoint(inst1), liveind: [Interval { begin: block1, end: inst6 }] },\n    LiveRange { value: v2, affinity: Reg(RegClassIndex(0)), def_begin: ProgramPoint(inst3), def_end: ProgramPoint(inst4), liveind: [] },\n    LiveRange { value: v3, affinity: Reg(RegClassIndex(4)), def_begin: ProgramPoint(inst4), def_end: ProgramPoint(inst5), liveind: [] },\n    LiveRange { value: v4, affinity: Reg(RegClassIndex(0)), def_begin: ProgramPoint(inst5), def_end: ProgramPoint(inst7), liveind: [] },\n]\n</pre></div>\n\n\n<p>It seems that <code>v1</code> doesn't have liveness information despite the <code>ghost_use.i64 v1</code>.</p>\n</blockquote>",
        "id": 191145278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584638097
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-603248459\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362#issuecomment-603248459\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1362\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1362\">Issue #1362</a>:</p>\n<blockquote>\n<blockquote>\n<p>It assumes SourceLoc is strictly ascending. (Checking for last_srcloc.unwrap() &gt; srcloc instead of last_srcloc.unwrap() != srcloc)</p>\n</blockquote>\n<p>This property might be essential track ranges transformation (e.g. during DWARF translation). Though it is possible to expose that indirectly via some context.</p>\n</blockquote>",
        "id": 191611103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585057624
    }
]