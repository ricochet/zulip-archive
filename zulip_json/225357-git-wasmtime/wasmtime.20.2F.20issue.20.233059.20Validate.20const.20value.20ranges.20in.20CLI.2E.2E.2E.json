[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114\">https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114</a> we allow const instructions with values that are way too large for their type (i.e. <code>0xff00</code> for an <code>i8</code>).  We should reject these modules in the CLIF validator.</p>\n<h4>Benefit</h4>\n<p>Rejecting these modules is a good way to prevent bugs in code generators using cranelift as a backend. As well as preventing issues where backends are not expecting constant values larger than the instruction type. Similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056\">https://github.com/bytecodealliance/wasmtime/pull/3056</a> (although this one is \"legal\") but with even more surprising values.</p>\n<h4>Implementation</h4>\n<p>The ideal place to implement this is in the CLIF validator, so that we can reject these CLIF modules.</p>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case). </p>\n<h4>Alternatives</h4>\n<p>We can keep ignoring the issue (as we do now), or we can define some other behavior, such as masking the bottom bits depending on the type. But this has all the hallmarks of a bug in whatever code generator is producing this code, so we should probably not silently allow these modules.<br>\n</p>\n</blockquote>",
        "id": 244828228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625352962
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114\">https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114</a> we allow const instructions with values that are way too large for their type (i.e. <code>0xff00</code> for an <code>i8</code>).  We should reject these modules in the CLIF validator.</p>\n<h4>Benefit</h4>\n<p>Rejecting these modules is a good way to prevent bugs in code generators using cranelift as a backend. As well as preventing issues where backends are not expecting constant values larger than the instruction type. Similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056\">https://github.com/bytecodealliance/wasmtime/pull/3056</a> (although this one is \"legal\") but with even more surprising values.</p>\n<h4>Implementation</h4>\n<p>The ideal place to implement this is in the CLIF validator, so that we can reject these CLIF modules.</p>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case). </p>\n<h4>Alternatives</h4>\n<p>We can keep ignoring the issue (as we do now), or we can define some other behavior, such as masking the bottom bits depending on the type. But this has all the hallmarks of a bug in whatever code generator is producing this code, so we should probably not silently allow these modules.<br>\n</p>\n</blockquote>",
        "id": 255809410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633123353
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1416295153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>I think we do need this verifier pass. I'm finding it's difficult to reason about high bits in mid-end optimization passes, so we're getting them wrong frequently.</p>\n</blockquote>",
        "id": 325707003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675451817
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1416348276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<blockquote>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case).</p>\n</blockquote>\n<p>If we switch from Imm64 to a new Uimm64, it should be possible to limit it to just 0..255 and always zero-extend when creating the iconst from whichever frontend creates the clif ir. That would also remove a considerable amount of casts from cg_clif as rustc uses unsigned integers for immediates rather than signed integers.</p>\n</blockquote>",
        "id": 325715189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675454834
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114\">https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114</a> we allow const instructions with values that are way too large for their type (i.e. <code>0xff00</code> for an <code>i8</code>).  We should reject these modules in the CLIF validator.</p>\n<h4>Benefit</h4>\n<p>Rejecting these modules is a good way to prevent bugs in code generators using cranelift as a backend. As well as preventing issues where backends are not expecting constant values larger than the instruction type. Similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056\">https://github.com/bytecodealliance/wasmtime/pull/3056</a> (although this one is \"legal\") but with even more surprising values.</p>\n<h4>Implementation</h4>\n<p>The ideal place to implement this is in the CLIF validator, so that we can reject these CLIF modules.</p>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case). </p>\n<h4>Alternatives</h4>\n<p>We can keep ignoring the issue (as we do now), or we can define some other behavior, such as masking the bottom bits depending on the type. But this has all the hallmarks of a bug in whatever code generator is producing this code, so we should probably not silently allow these modules.<br>\n</p>\n</blockquote>",
        "id": 338916774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677694012
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114\">https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114</a> we allow const instructions with values that are way too large for their type (i.e. <code>0xff00</code> for an <code>i8</code>).  We should reject these modules in the CLIF validator.</p>\n<h4>Benefit</h4>\n<p>Rejecting these modules is a good way to prevent bugs in code generators using cranelift as a backend. As well as preventing issues where backends are not expecting constant values larger than the instruction type. Similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056\">https://github.com/bytecodealliance/wasmtime/pull/3056</a> (although this one is \"legal\") but with even more surprising values.</p>\n<h4>Implementation</h4>\n<p>The ideal place to implement this is in the CLIF validator, so that we can reject these CLIF modules.</p>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case). </p>\n<h4>Alternatives</h4>\n<p>We can keep ignoring the issue (as we do now), or we can define some other behavior, such as masking the bottom bits depending on the type. But this has all the hallmarks of a bug in whatever code generator is producing this code, so we should probably not silently allow these modules.<br>\n</p>\n</blockquote>",
        "id": 338916776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677694012
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1450698060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>Fixing this issue doesn't need us to replace <code>Imm64</code> with <code>Uimm64</code>. We can certainly discuss doing that too—it's probably a good idea—but for this purpose, we can mask off the high bits even though the type is technically signed.</p>\n<p>We also don't need to allow e.g. -128..127. I think the conclusion we've recently come to in #5700 is that the upper bits should all be zero, which means an i8 can only be 0..255. If it's used in a signed way, those 8 bits will be sign-extended as needed to reinterpret them as -128..127.</p>\n<p>So fixing this issue only requires that <code>cranelift/codegen/src/verifier/mod.rs</code> check that, for example, an <code>iconst.i8</code> only has bits set within a mask of 0xFF. If somebody wants to pick this up I'm happy to go into more detail about how to do that.</p>\n</blockquote>",
        "id": 338928982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677697162
    },
    {
        "content": "<p>timjrd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1678248842\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>Hi! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> If these checks are still needed I'd like to contribute!</p>\n</blockquote>",
        "id": 384932109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692057797
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1678261503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>Yes please, that would be great! Let us know if you have any questions.</p>\n</blockquote>",
        "id": 384935055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692058952
    },
    {
        "content": "<p>timjrd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1679041815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>@jameysharp in addition to <code>Opcode::Iconst</code>, should I also cover <code>Opcode::Vconst</code>? Also maybe <code>Opcode::F32const</code> and <code>Opcode::F64const</code>?</p>\n</blockquote>",
        "id": 385143159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692110218
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1679337685\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>Good question! I don't think any of those have range limits outside of their representation. For example, the operand to <code>f32const</code> is represented as an <code>Ieee32</code>, which is just a 32-bit value that preserves exactly the provided bits. There are no values for <code>Ieee32</code> that are not valid for use with <code>f32const</code>, so we don't need to check anything about that instruction in the verifier. The trouble with <code>iconst</code> is that we always store the value in a 64-bit integer but, depending on the type attached to the instruction, not all of the bits are valid, so that's why we need special checks for that instruction in particular.</p>\n</blockquote>",
        "id": 385262185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692122643
    },
    {
        "content": "<p>timjrd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059#issuecomment-1679405036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<p>Got it! Thanks for the explanation. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> SIMD consts and their variable length representations were a bit scary. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I have a patch that adds checks for <code>iconst</code>, now I need to add some tests and that should be good. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 385270351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692126103
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">issue #3059</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>As discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114\">https://github.com/bytecodealliance/wasmtime/pull/3056#discussion_r663408114</a> we allow const instructions with values that are way too large for their type (i.e. <code>0xff00</code> for an <code>i8</code>).  We should reject these modules in the CLIF validator.</p>\n<h4>Benefit</h4>\n<p>Rejecting these modules is a good way to prevent bugs in code generators using cranelift as a backend. As well as preventing issues where backends are not expecting constant values larger than the instruction type. Similar to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3056\">https://github.com/bytecodealliance/wasmtime/pull/3056</a> (although this one is \"legal\") but with even more surprising values.</p>\n<h4>Implementation</h4>\n<p>The ideal place to implement this is in the CLIF validator, so that we can reject these CLIF modules.</p>\n<p>Because CLIF values do not have signedness until time of use, we must allow both signed and unsigned ranges of values (-128..127 or 0..255 in the i8 case). </p>\n<h4>Alternatives</h4>\n<p>We can keep ignoring the issue (as we do now), or we can define some other behavior, such as masking the bottom bits depending on the type. But this has all the hallmarks of a bug in whatever code generator is producing this code, so we should probably not silently allow these modules.<br>\n</p>\n</blockquote>",
        "id": 388423407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693526224
    }
]