[
    {
        "content": "<p>havarnov opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I've added two tests for out of bounds memory access to WasmTime.Net. See: <a href=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\" title=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\">https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3</a>.</p>\n<p>The problem is that one of the test (\"ItThrowsOnOutOfBoundsMemoryAccess\") is __not__ consistently passing on my machine. Some times it's passing and sometimes the dotnet runtime crashes.</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os</td>\n<td>macOS Catalina</td>\n</tr>\n<tr>\n<td>cargo</td>\n<td>cargo 1.42.0 (86334295e 2020-01-31)</td>\n</tr>\n<tr>\n<td>rustc</td>\n<td>rustc 1.42.0 (b8cedc004 2020-03-09)</td>\n</tr>\n<tr>\n<td>commit sha</td>\n<td>08e5484cdb158b7795587ff7ad0cb04beef6dcd3</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 192146344,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585437417
    },
    {
        "content": "<p>havarnov labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I've added two tests for out of bounds memory access to WasmTime.Net. See: <a href=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\" title=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\">https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3</a>.</p>\n<p>The problem is that one of the test (\"ItThrowsOnOutOfBoundsMemoryAccess\") is __not__ consistently passing on my machine. Some times it's passing and sometimes the dotnet runtime crashes.</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os</td>\n<td>macOS Catalina</td>\n</tr>\n<tr>\n<td>cargo</td>\n<td>cargo 1.42.0 (86334295e 2020-01-31)</td>\n</tr>\n<tr>\n<td>rustc</td>\n<td>rustc 1.42.0 (b8cedc004 2020-03-09)</td>\n</tr>\n<tr>\n<td>commit sha</td>\n<td>08e5484cdb158b7795587ff7ad0cb04beef6dcd3</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 192146345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585437417
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-605533149\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-605533149\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Here's the full \"Problem Report\" from macOS:</p>\n<div class=\"codehilite\"><pre><span></span>Process:               dotnet [93220]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        dotnet [93219]\nResponsible:           Terminal [33844]\nUser ID:               501\n\nDate/Time:             2020-03-29 00:25:25.461 +0100\nOS Version:            Mac OS X 10.15.3 (19D76)\nReport Version:        12\nBridge OS Version:     3.0 (14Y908)\nAnonymous UUID:        3B4958C5-558D-E815-DF8E-FEE76D437CA5\n\nSleep/Wake UUID:       52F01052-1AE1-48B2-8278-1EE38E1A0CF4\n\nTime Awake Since Boot: 510000 seconds\nTime Since Wake:       6800 seconds\n\nSystem Integrity Protection: enabled\n\nCrashed Thread:        20\n\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000002\nException Note:        EXC_CORPSE_NOTIFY\n\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   exc handler [93220]\n\nVM Regions Near 0x2:\n--&gt;\n    __TEXT                 0000000105324000-0000000105331000 [   52K] r-x/rwx SM=COW  /usr/local/share/dotnet/dotnet\n\nThread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x00000001055d76cb Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) + 1243\n7   libcoreclr.dylib                0x00000001055d23c0 Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*) + 48\n8   libcoreclr.dylib                0x0000000105706560 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 64\n9   libcoreclr.dylib                0x00000001055d85e0 Thread::Block(int, PendingSync*) + 32\n10  libcoreclr.dylib                0x00000001055d00a0 SyncBlock::Wait(int, int) + 544\n11  libcoreclr.dylib                0x00000001058325b0 ObjectNative::WaitTimeout(bool, int, Object*) + 192\n12  ???                             0x000000010bd80854 0 + 4493674580\n13  ???                             0x000000010bd95100 0 + 4493758720\n14  ???                             0x000000010bd94fa4 0 + 4493758372\n15  ???                             0x000000010bd94d17 0 + 4493757719\n16  ???                             0x000000010bd94c32 0 + 4493757490\n17  ???                             0x000000010c266e3c 0 + 4498812476\n18  ???                             0x000000010c2603e5 0 + 4498785253\n19  libcoreclr.dylib                0x00000001057cdc3b CallDescrWorkerInternal + 124\n20  libcoreclr.dylib                0x000000010561a029 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1657\n21  libcoreclr.dylib                0x00000001054e1ef6 RunMain(MethodDesc*, short, int*, PtrArray**) + 726\n22  libcoreclr.dylib                0x00000001054e2268 Assembly::ExecuteMainMethod(PtrArray**, int) + 408\n23  libcoreclr.dylib                0x0000000105522678 CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 504\n24  libcoreclr.dylib                0x000000010545a052 coreclr_execute_assembly + 226\n25  libhostpolicy.dylib             0x00000001053b35d7 0x1053a2000 + 71127\n26  libhostpolicy.dylib             0x00000001053b4438 0x1053a2000 + 74808\n27  libhostfxr.dylib                0x0000000105370a9f 0x105347000 + 170655\n28  libhostfxr.dylib                0x000000010536fd92 0x105347000 + 167314\n29  libhostfxr.dylib                0x000000010536bd9a 0x105347000 + 150938\n30  dotnet                          0x000000010532e55f 0x105324000 + 42335\n31  dotnet                          0x000000010532e7df 0x105324000 + 42975\n32  libdyld.dylib                   0x00007fff7003a7fd start + 1\n\nThread 1:\n0   libsystem_kernel.dylib          0x00007fff7017b25a mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff7017b5d0 mach_msg + 60\n2   libcoreclr.dylib                0x0000000105456b18 MachMessage::Receive(unsigned int) + 72\n3   libcoreclr.dylib                0x0000000105455a5e SEHExceptionThread(void*) + 94\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff7017fbce kevent + 10\n1   libcoreclr.dylib                0x000000010544a320 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) + 448\n2   libcoreclr.dylib                0x0000000105449993 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 131\n3   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 3:\n0   libsystem_kernel.dylib          0x00007fff7017bb02 __open + 10\n1   libcoreclr.dylib                0x00000001054ca97f TwoWayPipe::WaitForConnection() + 31\n2   libcoreclr.dylib                0x00000001054c1c57 DbgTransportSession::TransportWorker() + 167\n3   libcoreclr.dylib                0x00000001054c06b9 DbgTransportSession::TransportWorkerStatic(void*) + 9\n4   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n5   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n6   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 4:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x00000001054be948 DebuggerRCThread::MainLoop() + 248\n7   libcoreclr.dylib                0x00000001054be7ec DebuggerRCThread::ThreadProc() + 284\n8   libcoreclr.dylib                0x00000001054be503 DebuggerRCThread::ThreadProcStatic(void*) + 131\n9   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n10  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n11  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 5:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c69d WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057065e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\n7   libcoreclr.dylib                0x000000010566ccbf FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31\n8   libcoreclr.dylib                0x000000010566ce22 FinalizerThread::FinalizerThreadWorker(void*) + 98\n9   libcoreclr.dylib                0x00000001055dafa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323\n10  libcoreclr.dylib                0x00000001055db5f0 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\n11  libcoreclr.dylib                0x000000010566d0f8 FinalizerThread::FinalizerThreadStart(void*) + 504\n12  libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n13  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n14  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 6:\n0   libsystem_kernel.dylib          0x00007fff7018187e __accept + 10\n1   libcoreclr.dylib                0x00000001054ca6de IpcStream::DiagnosticsIpc::Accept(void (*)(char const*, unsigned int)) const + 62\n2   libcoreclr.dylib                0x0000000105647d20 DiagnosticsServerThread(void*) + 288\n3   libcoreclr.dylib                0x0000\n[message truncated]\n</pre></div>\n\n\n</blockquote>",
        "id": 192146684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585438069
    },
    {
        "content": "<p>havarnov edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I've added two tests for out of bounds memory access to WasmTime.Net. See: <a href=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\" title=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\">https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3</a>.</p>\n<p>The problem is that one of the test (\"ItThrowsOnOutOfBoundsMemoryAccess\") is __not__ consistently passing on my machine. Some times it's passing, sometimes the dotnet runtime crashes and sometimes the process hangs.</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os</td>\n<td>macOS Catalina</td>\n</tr>\n<tr>\n<td>cargo</td>\n<td>cargo 1.42.0 (86334295e 2020-01-31)</td>\n</tr>\n<tr>\n<td>rustc</td>\n<td>rustc 1.42.0 (b8cedc004 2020-03-09)</td>\n</tr>\n<tr>\n<td>commit sha</td>\n<td>08e5484cdb158b7795587ff7ad0cb04beef6dcd3</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 192146738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585438117
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-605533149\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-605533149\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Here's the full \"Problem Report\" from macOS:</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>Process:               dotnet [93220]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        dotnet [93219]\nResponsible:           Terminal [33844]\nUser ID:               501\n\nDate/Time:             2020-03-29 00:25:25.461 +0100\nOS Version:            Mac OS X 10.15.3 (19D76)\nReport Version:        12\nBridge OS Version:     3.0 (14Y908)\nAnonymous UUID:        3B4958C5-558D-E815-DF8E-FEE76D437CA5\n\nSleep/Wake UUID:       52F01052-1AE1-48B2-8278-1EE38E1A0CF4\n\nTime Awake Since Boot: 510000 seconds\nTime Since Wake:       6800 seconds\n\nSystem Integrity Protection: enabled\n\nCrashed Thread:        20\n\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000002\nException Note:        EXC_CORPSE_NOTIFY\n\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   exc handler [93220]\n\nVM Regions Near 0x2:\n--&gt;\n    __TEXT                 0000000105324000-0000000105331000 [   52K] r-x/rwx SM=COW  /usr/local/share/dotnet/dotnet\n\nThread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x00000001055d76cb Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) + 1243\n7   libcoreclr.dylib                0x00000001055d23c0 Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*) + 48\n8   libcoreclr.dylib                0x0000000105706560 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 64\n9   libcoreclr.dylib                0x00000001055d85e0 Thread::Block(int, PendingSync*) + 32\n10  libcoreclr.dylib                0x00000001055d00a0 SyncBlock::Wait(int, int) + 544\n11  libcoreclr.dylib                0x00000001058325b0 ObjectNative::WaitTimeout(bool, int, Object*) + 192\n12  ???                             0x000000010bd80854 0 + 4493674580\n13  ???                             0x000000010bd95100 0 + 4493758720\n14  ???                             0x000000010bd94fa4 0 + 4493758372\n15  ???                             0x000000010bd94d17 0 + 4493757719\n16  ???                             0x000000010bd94c32 0 + 4493757490\n17  ???                             0x000000010c266e3c 0 + 4498812476\n18  ???                             0x000000010c2603e5 0 + 4498785253\n19  libcoreclr.dylib                0x00000001057cdc3b CallDescrWorkerInternal + 124\n20  libcoreclr.dylib                0x000000010561a029 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1657\n21  libcoreclr.dylib                0x00000001054e1ef6 RunMain(MethodDesc*, short, int*, PtrArray**) + 726\n22  libcoreclr.dylib                0x00000001054e2268 Assembly::ExecuteMainMethod(PtrArray**, int) + 408\n23  libcoreclr.dylib                0x0000000105522678 CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 504\n24  libcoreclr.dylib                0x000000010545a052 coreclr_execute_assembly + 226\n25  libhostpolicy.dylib             0x00000001053b35d7 0x1053a2000 + 71127\n26  libhostpolicy.dylib             0x00000001053b4438 0x1053a2000 + 74808\n27  libhostfxr.dylib                0x0000000105370a9f 0x105347000 + 170655\n28  libhostfxr.dylib                0x000000010536fd92 0x105347000 + 167314\n29  libhostfxr.dylib                0x000000010536bd9a 0x105347000 + 150938\n30  dotnet                          0x000000010532e55f 0x105324000 + 42335\n31  dotnet                          0x000000010532e7df 0x105324000 + 42975\n32  libdyld.dylib                   0x00007fff7003a7fd start + 1\n\nThread 1:\n0   libsystem_kernel.dylib          0x00007fff7017b25a mach_msg_trap + 10\n1   libsystem_kernel.dylib          0x00007fff7017b5d0 mach_msg + 60\n2   libcoreclr.dylib                0x0000000105456b18 MachMessage::Receive(unsigned int) + 72\n3   libcoreclr.dylib                0x0000000105455a5e SEHExceptionThread(void*) + 94\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff7017fbce kevent + 10\n1   libcoreclr.dylib                0x000000010544a320 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) + 448\n2   libcoreclr.dylib                0x0000000105449993 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 131\n3   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 3:\n0   libsystem_kernel.dylib          0x00007fff7017bb02 __open + 10\n1   libcoreclr.dylib                0x00000001054ca97f TwoWayPipe::WaitForConnection() + 31\n2   libcoreclr.dylib                0x00000001054c1c57 DbgTransportSession::TransportWorker() + 167\n3   libcoreclr.dylib                0x00000001054c06b9 DbgTransportSession::TransportWorkerStatic(void*) + 9\n4   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n5   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n6   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 4:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x00000001054be948 DebuggerRCThread::MainLoop() + 248\n7   libcoreclr.dylib                0x00000001054be7ec DebuggerRCThread::ThreadProc() + 284\n8   libcoreclr.dylib                0x00000001054be503 DebuggerRCThread::ThreadProcStatic(void*) + 131\n9   libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n10  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n11  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 5:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x0000000105447dde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\n3   libcoreclr.dylib                0x0000000105447a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010544c47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010544c69d WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x00000001057065e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\n7   libcoreclr.dylib                0x000000010566ccbf FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31\n8   libcoreclr.dylib                0x000000010566ce22 FinalizerThread::FinalizerThreadWorker(void*) + 98\n9   libcoreclr.dylib                0x00000001055dafa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323\n10  libcoreclr.dylib                0x00000001055db5f0 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\n11  libcoreclr.dylib                0x000000010566d0f8 FinalizerThread::FinalizerThreadStart(void*) + 504\n12  libcoreclr.dylib                0x0000000105453384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n13  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n14  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 6:\n0   libsystem_kernel.dylib          0x00007fff7018187e __accept + 10\n1   libcoreclr.dylib                0x00000001054ca6de IpcStream::DiagnosticsIpc::Accept(void (*)(char const*, unsigned int)) const + 62\n2   libcoreclr.dylib                0x0000000105647d20 DiagnosticsServerThread(void*) + 288\n3   libcoreclr.dy\n[message truncated]\n</pre></div>\n\n\n</blockquote>",
        "id": 192268911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585580750
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606056695\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606056695\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Thanks for the report! </p>\n<p>Given your crash logs it says thread 20 crashed which has a stack trace of:</p>\n<div class=\"codehilite\"><pre><span></span>0   libwasmtime.dylib               0x0000000108cdb1a9 __rbt_macho_add_symtab + 1353\n1   libwasmtime.dylib               0x0000000108cda230 __rbt_macho_add + 1920\n2   libwasmtime.dylib               0x0000000108cd9921 __rbt_backtrace_initialize + 337\n3   libwasmtime.dylib               0x0000000108cd8fdf fileline_initialize + 735\n4   libwasmtime.dylib               0x0000000108cd90dd __rbt_backtrace_syminfo + 45\n5   libwasmtime.dylib               0x0000000108cc4fcf backtrace::symbolize::libbacktrace::resolve::h719e8a9f1adb8fe1 + 159 (libbacktrace.rs:469)\n6   libwasmtime.dylib               0x0000000108cc85a8 backtrace::symbolize::resolve_frame_unsynchronized::h7ca357de7ff98157 + 56 (mod.rs:178)\n7   libwasmtime.dylib               0x0000000108cc83e0 backtrace::symbolize::resolve_frame::h75c5abc2a861fa2d + 80 (mod.rs:105)\n8   libwasmtime.dylib               0x0000000108cc0c2c backtrace::capture::Backtrace::resolve::he887e05906dda0c3 + 348 (capture.rs:219)\n9   libwasmtime.dylib               0x0000000108cc077c backtrace::capture::Backtrace::new::hde48dbbe07c85c38 + 60 (capture.rs:129)\n10  libwasmtime.dylib               0x0000000108c6e4d0 wasmtime_runtime::traphandlers::Trap::wasm::hc86ae73cea48b813 + 64 (traphandlers.rs:363)\n11  libwasmtime.dylib               0x0000000108c8bfa2 wasmtime_runtime::instance::initialize_memories::hffd4acb5f389bdf5 + 514 (instance.rs:1326)\n12  libwasmtime.dylib               0x0000000108c89801 wasmtime_runtime::instance::InstanceHandle::new::h7769a621032ef434 + 6369 (instance.rs:978)\n13  libwasmtime.dylib               0x00000001089ee425 wasmtime_jit::instantiate::CompiledModule::instantiate::h2f2ec277d7cd7968 + 1237 (instantiate.rs:216)\n14  libwasmtime.dylib               0x00000001088d3286 wasmtime::instance::instantiate::hde8bac425f17f01c + 150 (instance.rs:29)\n15  libwasmtime.dylib               0x00000001088d363a wasmtime::instance::Instance::new::hfb0a2766f04e3a70 + 586 (instance.rs:127)\n16  libwasmtime.dylib               0x00000001088d11ee wasmtime::linker::Linker::instantiate::h4aa0fd178eec2ddd + 2878 (linker.rs:395)\n17  libwasmtime.dylib               0x0000000108659214 wasmtime_linker_instantiate + 132 (linker.rs:85)\n</pre></div>\n\n\n<p>which looks like this is running into <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1295\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1295\">https://github.com/bytecodealliance/wasmtime/issues/1295</a> as an issue which is in turn slated to be fixed by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1315\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1315\">https://github.com/bytecodealliance/wasmtime/pull/1315</a></p>\n</blockquote>",
        "id": 192269087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585580814
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606113131\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606113131\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>NP, happy to help! Good that it's allready is on track to be fixed.</p>\n<p>A couple of things:</p>\n<ol>\n<li>Would you'ld like me to create a PR, so these tests are part of the Wasmtime.Net test suite?</li>\n<li>Could you help me to understand how the memory stuf works? If I have the set bot max &amp; min number of pages to 2 as in:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>var memory = new Memory(Store, 2, 2);\n</pre></div>\n\n\n<p>And I have a wasm module as follows:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;mem&quot; (memory $m 1 1))\n)\n</pre></div>\n\n\n<p>Is there any way to grow the memory to 2 pages? I've tried to understand the <a href=\"https://webassembly.github.io/spec/core/bikeshed/index.html#memory-instructions%E2%91%A0\" title=\"https://webassembly.github.io/spec/core/bikeshed/index.html#memory-instructions%E2%91%A0\">spec</a>, but haven't figured out how to use the <code>memory.grow</code> instruction.</p>\n</blockquote>",
        "id": 192283301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585586783
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606116455\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606116455\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>In the wasm module you defined the maximum size to be 1 page. This means that you can't grow it to 2 pages. If you use <code>(memory $m 1)</code> instead, there is no limit on the memory size other than the standard limit of 4GB.</p>\n</blockquote>",
        "id": 192284338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585587138
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606116455\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606116455\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>In the wasm module you defined the maximum size to be 1 page. This means that you can't grow it to 2 pages. If you use <code>(memory $m 1)</code> instead, there is no limit on the size the memory can grow to other than the standard limit of 4GB.</p>\n</blockquote>",
        "id": 192284416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585587167
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606126921\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606126921\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@bjorn3 if you use <code>(memory $m 1)</code> I guess you can't grow it more than what the host has defined? And how exactly do I use <code>memory.grow</code>?</p>\n</blockquote>",
        "id": 192287346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585588355
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606139771\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-606139771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I believe you can use <code>memory.grow</code> by first pushing a 32bit integer representing the new size in pages to the stack and the calling <code>memory.grow</code>.</p>\n</blockquote>",
        "id": 192290840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585589826
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-608695829\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-608695829\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Ok I think this should be fixed with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1315\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1315\">https://github.com/bytecodealliance/wasmtime/pull/1315</a> now </p>\n</blockquote>",
        "id": 192866981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585949813
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I've added two tests for out of bounds memory access to WasmTime.Net. See: <a href=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\" title=\"https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3\">https://github.com/havarnov/wasmtime/commit/1b199cf63ed218094271020c34c89c2aea347dc3</a>.</p>\n<p>The problem is that one of the test (\"ItThrowsOnOutOfBoundsMemoryAccess\") is __not__ consistently passing on my machine. Some times it's passing, sometimes the dotnet runtime crashes and sometimes the process hangs.</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>os</td>\n<td>macOS Catalina</td>\n</tr>\n<tr>\n<td>cargo</td>\n<td>cargo 1.42.0 (86334295e 2020-01-31)</td>\n</tr>\n<tr>\n<td>rustc</td>\n<td>rustc 1.42.0 (b8cedc004 2020-03-09)</td>\n</tr>\n<tr>\n<td>commit sha</td>\n<td>08e5484cdb158b7795587ff7ad0cb04beef6dcd3</td>\n</tr>\n</tbody>\n</table>\n</blockquote>",
        "id": 192866985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585949813
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609084435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609084435\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Still getting the same error after merging in master. Atleast for me it seems like it's the same stack trace (in thread 1 this time).</p>\n<p>&lt;details&gt;<br>\nProcess:               dotnet [56275]<br>\nPath:                  /usr/local/share/dotnet/dotnet<br>\nIdentifier:            dotnet<br>\nVersion:               0<br>\nCode Type:             X86-64 (Native)<br>\nParent Process:        mono-sgen [54559]<br>\nResponsible:           rider [53391]<br>\nUser ID:               501</p>\n<p>Date/Time:             2020-04-04 22:18:49.598 +0200<br>\nOS Version:            Mac OS X 10.15.3 (19D76)<br>\nReport Version:        12<br>\nBridge OS Version:     3.0 (14Y908)<br>\nAnonymous UUID:        3B4958C5-558D-E815-DF8E-FEE76D437CA5</p>\n<p>Sleep/Wake UUID:       20124844-BA37-4C58-8ED2-83ADCDC394D1</p>\n<p>Time Awake Since Boot: 680000 seconds<br>\nTime Since Wake:       750 seconds</p>\n<p>System Integrity Protection: enabled</p>\n<p>Crashed Thread:        1</p>\n<p>Exception Type:        EXC_CRASH (SIGABRT)<br>\nException Codes:       0x0000000000000000, 0x0000000000000000<br>\nException Note:        EXC_CORPSE_NOTIFY</p>\n<p>Application Specific Information:<br>\nabort() called</p>\n<p>Thread 0:: Dispatch queue: com.apple.main-thread<br>\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10<br>\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701<br>\n2   libcoreclr.dylib                0x000000010ce59dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData<em>, unsigned int, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 347<br>\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread<em>, unsigned int, bool, bool, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 464<br>\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread<em>, unsigned int, void</em> const*, int, unsigned int, int, int) + 2028<br>\n5   libcoreclr.dylib                0x000000010ce5e762 WaitForMultipleObjectsEx + 82<br>\n6   libcoreclr.dylib                0x000000010cfe96cb Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) + 1243<br>\n7   libcoreclr.dylib                0x000000010cfe43c0 Thread::DoAppropriateWait(int, void*<em>, int, unsigned int, WaitMode, PendingSync</em>) + 48<br>\n8   libcoreclr.dylib                0x000000010d118560 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 64<br>\n9   libcoreclr.dylib                0x000000010cfea5e0 Thread::Block(int, PendingSync*) + 32<br>\n10  libcoreclr.dylib                0x000000010cfe20a0 SyncBlock::Wait(int, int) + 544<br>\n11  libcoreclr.dylib                0x000000010d2445b0 ObjectNative::WaitTimeout(bool, int, Object*) + 192<br>\n12  ???                             0x000000011b770854 0 + 4755753044<br>\n13  ???                             0x000000011b785100 0 + 4755837184<br>\n14  ???                             0x000000011b784fa4 0 + 4755836836<br>\n15  ???                             0x000000011b784d17 0 + 4755836183<br>\n16  ???                             0x000000011b784c32 0 + 4755835954<br>\n17  ???                             0x000000011bc56e3c 0 + 4760890940<br>\n18  ???                             0x000000011bc503e5 0 + 4760863717<br>\n19  libcoreclr.dylib                0x000000010d1dfc3b CallDescrWorkerInternal + 124<br>\n20  libcoreclr.dylib                0x000000010d02c029 MethodDescCallSite::CallTargetWorker(unsigned long const<em>, unsigned long</em>, int) + 1657<br>\n21  libcoreclr.dylib                0x000000010cef3ef6 RunMain(MethodDesc<em>, short, int</em>, PtrArray**) + 726<br>\n22  libcoreclr.dylib                0x000000010cef4268 Assembly::ExecuteMainMethod(PtrArray**, int) + 408<br>\n23  libcoreclr.dylib                0x000000010cf34678 CorHost2::ExecuteAssembly(unsigned int, char16_t const<em>, int, char16_t const</em><em>, unsigned int</em>) + 504<br>\n24  libcoreclr.dylib                0x000000010ce6c052 coreclr_execute_assembly + 226<br>\n25  libhostpolicy.dylib             0x000000010cdc55d7 0x10cdb4000 + 71127<br>\n26  libhostpolicy.dylib             0x000000010cdc6438 0x10cdb4000 + 74808<br>\n27  libhostfxr.dylib                0x000000010cd82a9f 0x10cd59000 + 170655<br>\n28  libhostfxr.dylib                0x000000010cd81d92 0x10cd59000 + 167314<br>\n29  libhostfxr.dylib                0x000000010cd7dd9a 0x10cd59000 + 150938<br>\n30  dotnet                          0x000000010cd4055f 0x10cd36000 + 42335<br>\n31  dotnet                          0x000000010cd407df 0x10cd36000 + 42975<br>\n32  libdyld.dylib                   0x00007fff7003a7fd start + 1</p>\n<p>Thread 1 Crashed:<br>\n0   libsystem_kernel.dylib          0x00007fff701817fa __pthread_kill + 10<br>\n1   libsystem_pthread.dylib         0x00007fff7023ebc1 pthread_kill + 432<br>\n2   libsystem_c.dylib               0x00007fff70108a1c abort + 120<br>\n3   libcoreclr.dylib                0x000000010ce6815c SEHExceptionThread(void*) + 1884<br>\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15</p>\n<p>Thread 2:<br>\n0   libsystem_kernel.dylib          0x00007fff7017fbce kevent + 10<br>\n1   libcoreclr.dylib                0x000000010ce5c320 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) + 448<br>\n2   libcoreclr.dylib                0x000000010ce5b993 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 131<br>\n3   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436<br>\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15</p>\n<p>Thread 3:<br>\n0   libsystem_kernel.dylib          0x00007fff7017bb02 __open + 10<br>\n1   libcoreclr.dylib                0x000000010cedc97f TwoWayPipe::WaitForConnection() + 31<br>\n2   libcoreclr.dylib                0x000000010ced3c57 DbgTransportSession::TransportWorker() + 167<br>\n3   libcoreclr.dylib                0x000000010ced26b9 DbgTransportSession::TransportWorkerStatic(void*) + 9<br>\n4   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436<br>\n5   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n6   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15</p>\n<p>Thread 4:<br>\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10<br>\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701<br>\n2   libcoreclr.dylib                0x000000010ce59dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData<em>, unsigned int, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 347<br>\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread<em>, unsigned int, bool, bool, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 464<br>\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread<em>, unsigned int, void</em> const*, int, unsigned int, int, int) + 2028<br>\n5   libcoreclr.dylib                0x000000010ce5e762 WaitForMultipleObjectsEx + 82<br>\n6   libcoreclr.dylib                0x000000010ced0948 DebuggerRCThread::MainLoop() + 248<br>\n7   libcoreclr.dylib                0x000000010ced07ec DebuggerRCThread::ThreadProc() + 284<br>\n8   libcoreclr.dylib                0x000000010ced0503 DebuggerRCThread::ThreadProcStatic(void*) + 131<br>\n9   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436<br>\n10  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n11  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15</p>\n<p>Thread 5:<br>\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10<br>\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701<br>\n2   libcoreclr.dylib                0x000000010ce59dde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData<em>, unsigned int, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 318<br>\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread<em>, unsigned int, bool, bool, CorUnix::ThreadWakeupReason</em>, unsigned int*) + 464<br>\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread<em>, unsigned int, void</em> const*, int, unsigned int, int, int) + 2028<br>\n5   libcoreclr.dylib                0x000000010ce5e69d WaitForSingleObjectEx + 77<br>\n6   libcoreclr.dylib                0x000000010d1185e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201<br>\n7   libcoreclr.dylib                0x000000010d07ecbf FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31<br>\n8   libcoreclr.dylib                0x000000010d07ee22 FinalizerThread::FinalizerThreadWorker(void*) + 98<br>\n9   libcoreclr.dylib                0x000000010cfecfa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323<br>\n10  libcoreclr.dylib                0x000000010cfed5f0 ManagedThreadBase::FinalizerBase(void (<em>)(void</em>)) + 32<br>\n11  libcoreclr.dylib                0x000000010d07f0f8 FinalizerThread::FinalizerThreadStart(void*) + 504<br>\n12  libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436<br>\n13  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n14  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15</p>\n<p>Thread 6:<br>\n0   libsystem_kernel.dylib          0x00007fff7018187e __accept + 10<br>\n1   libcoreclr.dylib                0x000000010cedc6de IpcStream::DiagnosticsIpc::Accept(void (<em>)(char const</em>, unsigned int)) const + 62<br>\n2   libcoreclr.dylib                0x000000010d059d20 DiagnosticsServerThread(void*) + 288<br>\n3   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436<br>\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148<br>\n5   libsystem_pthread.dylib    <br>\n[message truncated]</p>\n</blockquote>",
        "id": 192925437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586031900
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609084435\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609084435\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Still getting the same error after merging in master. Atleast for me it seems like it's the same stack trace (in thread 1 this time).</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>Process:               dotnet [56275]\nPath:                  /usr/local/share/dotnet/dotnet\nIdentifier:            dotnet\nVersion:               0\nCode Type:             X86-64 (Native)\nParent Process:        mono-sgen [54559]\nResponsible:           rider [53391]\nUser ID:               501\n\nDate/Time:             2020-04-04 22:18:49.598 +0200\nOS Version:            Mac OS X 10.15.3 (19D76)\nReport Version:        12\nBridge OS Version:     3.0 (14Y908)\nAnonymous UUID:        3B4958C5-558D-E815-DF8E-FEE76D437CA5\n\nSleep/Wake UUID:       20124844-BA37-4C58-8ED2-83ADCDC394D1\n\nTime Awake Since Boot: 680000 seconds\nTime Since Wake:       750 seconds\n\nSystem Integrity Protection: enabled\n\nCrashed Thread:        1\n\nException Type:        EXC_CRASH (SIGABRT)\nException Codes:       0x0000000000000000, 0x0000000000000000\nException Note:        EXC_CORPSE_NOTIFY\n\nApplication Specific Information:\nabort() called\n\nThread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x000000010ce59dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010ce5e762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x000000010cfe96cb Thread::DoAppropriateWaitWorker(int, void**, int, unsigned int, WaitMode) + 1243\n7   libcoreclr.dylib                0x000000010cfe43c0 Thread::DoAppropriateWait(int, void**, int, unsigned int, WaitMode, PendingSync*) + 48\n8   libcoreclr.dylib                0x000000010d118560 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 64\n9   libcoreclr.dylib                0x000000010cfea5e0 Thread::Block(int, PendingSync*) + 32\n10  libcoreclr.dylib                0x000000010cfe20a0 SyncBlock::Wait(int, int) + 544\n11  libcoreclr.dylib                0x000000010d2445b0 ObjectNative::WaitTimeout(bool, int, Object*) + 192\n12  ???                             0x000000011b770854 0 + 4755753044\n13  ???                             0x000000011b785100 0 + 4755837184\n14  ???                             0x000000011b784fa4 0 + 4755836836\n15  ???                             0x000000011b784d17 0 + 4755836183\n16  ???                             0x000000011b784c32 0 + 4755835954\n17  ???                             0x000000011bc56e3c 0 + 4760890940\n18  ???                             0x000000011bc503e5 0 + 4760863717\n19  libcoreclr.dylib                0x000000010d1dfc3b CallDescrWorkerInternal + 124\n20  libcoreclr.dylib                0x000000010d02c029 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1657\n21  libcoreclr.dylib                0x000000010cef3ef6 RunMain(MethodDesc*, short, int*, PtrArray**) + 726\n22  libcoreclr.dylib                0x000000010cef4268 Assembly::ExecuteMainMethod(PtrArray**, int) + 408\n23  libcoreclr.dylib                0x000000010cf34678 CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 504\n24  libcoreclr.dylib                0x000000010ce6c052 coreclr_execute_assembly + 226\n25  libhostpolicy.dylib             0x000000010cdc55d7 0x10cdb4000 + 71127\n26  libhostpolicy.dylib             0x000000010cdc6438 0x10cdb4000 + 74808\n27  libhostfxr.dylib                0x000000010cd82a9f 0x10cd59000 + 170655\n28  libhostfxr.dylib                0x000000010cd81d92 0x10cd59000 + 167314\n29  libhostfxr.dylib                0x000000010cd7dd9a 0x10cd59000 + 150938\n30  dotnet                          0x000000010cd4055f 0x10cd36000 + 42335\n31  dotnet                          0x000000010cd407df 0x10cd36000 + 42975\n32  libdyld.dylib                   0x00007fff7003a7fd start + 1\n\nThread 1 Crashed:\n0   libsystem_kernel.dylib          0x00007fff701817fa __pthread_kill + 10\n1   libsystem_pthread.dylib         0x00007fff7023ebc1 pthread_kill + 432\n2   libsystem_c.dylib               0x00007fff70108a1c abort + 120\n3   libcoreclr.dylib                0x000000010ce6815c SEHExceptionThread(void*) + 1884\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 2:\n0   libsystem_kernel.dylib          0x00007fff7017fbce kevent + 10\n1   libcoreclr.dylib                0x000000010ce5c320 CorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) + 448\n2   libcoreclr.dylib                0x000000010ce5b993 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 131\n3   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 3:\n0   libsystem_kernel.dylib          0x00007fff7017bb02 __open + 10\n1   libcoreclr.dylib                0x000000010cedc97f TwoWayPipe::WaitForConnection() + 31\n2   libcoreclr.dylib                0x000000010ced3c57 DbgTransportSession::TransportWorker() + 167\n3   libcoreclr.dylib                0x000000010ced26b9 DbgTransportSession::TransportWorkerStatic(void*) + 9\n4   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n5   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n6   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 4:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x000000010ce59dfb CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 347\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010ce5e762 WaitForMultipleObjectsEx + 82\n6   libcoreclr.dylib                0x000000010ced0948 DebuggerRCThread::MainLoop() + 248\n7   libcoreclr.dylib                0x000000010ced07ec DebuggerRCThread::ThreadProc() + 284\n8   libcoreclr.dylib                0x000000010ced0503 DebuggerRCThread::ThreadProcStatic(void*) + 131\n9   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n10  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n11  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 5:\n0   libsystem_kernel.dylib          0x00007fff7017dce6 __psynch_cvwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023f185 _pthread_cond_wait + 701\n2   libcoreclr.dylib                0x000000010ce59dde CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 318\n3   libcoreclr.dylib                0x000000010ce59a90 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 464\n4   libcoreclr.dylib                0x000000010ce5e47c CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int, int) + 2028\n5   libcoreclr.dylib                0x000000010ce5e69d WaitForSingleObjectEx + 77\n6   libcoreclr.dylib                0x000000010d1185e9 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 201\n7   libcoreclr.dylib                0x000000010d07ecbf FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31\n8   libcoreclr.dylib                0x000000010d07ee22 FinalizerThread::FinalizerThreadWorker(void*) + 98\n9   libcoreclr.dylib                0x000000010cfecfa3 ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 323\n10  libcoreclr.dylib                0x000000010cfed5f0 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 32\n11  libcoreclr.dylib                0x000000010d07f0f8 FinalizerThread::FinalizerThreadStart(void*) + 504\n12  libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n13  libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n14  libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n\nThread 6:\n0   libsystem_kernel.dylib          0x00007fff7018187e __accept + 10\n1   libcoreclr.dylib                0x000000010cedc6de IpcStream::DiagnosticsIpc::Accept(void (*)(char const*, unsigned int)) const + 62\n2   libcoreclr.dylib                0x000000010d059d20 DiagnosticsServerThread(void*) + 288\n3   libcoreclr.dylib                0x000000010ce65384 CorUnix::CPalThread::ThreadEntry(void*) + 436\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem\n[message truncated]\n</pre></div>\n\n\n</blockquote>",
        "id": 193052973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586184598
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609842332\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-609842332\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@havarnov that says that thread 1 crashed with a stack tha tlooks like:</p>\n<div class=\"codehilite\"><pre><span></span>Thread 1 Crashed:\n0   libsystem_kernel.dylib          0x00007fff701817fa __pthread_kill + 10\n1   libsystem_pthread.dylib         0x00007fff7023ebc1 pthread_kill + 432\n2   libsystem_c.dylib               0x00007fff70108a1c abort + 120\n3   libcoreclr.dylib                0x000000010ce6815c SEHExceptionThread(void*) + 1884\n4   libsystem_pthread.dylib         0x00007fff7023ee65 _pthread_start + 148\n5   libsystem_pthread.dylib         0x00007fff7023a83b thread_start + 15\n</pre></div>\n\n\n<p>are you sure that's related to segfaults? That looks like the application explicitly killed itself?</p>\n</blockquote>",
        "id": 193053137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586184654
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610774523\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610774523\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Now I'm both confused and unsure about what a commented 2 days ago. Seems like a posted the wrong stack trace?</p>\n<p>Anyways, I'm sure the test is failing/passign inconsistently. Here's a new stack trace after running <code>dotnet test</code> on <a href=\"https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19\" title=\"https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19\">https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19</a>.</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>Thread 18:\n0   libsystem_kernel.dylib          0x00007fff7017d4c2 __psynch_mutexwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023c62a _pthread_mutex_firstfit_lock_wait + 96\n2   libsystem_pthread.dylib         0x00007fff7023a5e5 _pthread_mutex_firstfit_lock_slow + 222\n3   libwasmtime.dylib               0x000000010fc16b35 std::sys::unix::mutex::Mutex::lock::h1dbae44fb498794c + 37 (mutex.rs:57)\n4   libwasmtime.dylib               0x000000010fc166a8 std::sys_common::mutex::Mutex::raw_lock::h0320f6f2d66d3b9a + 24 (mutex.rs:42)\n5   libwasmtime.dylib               0x000000010fc0f8c6 std::sync::mutex::Mutex$LT$T$GT$::lock::h3ff867185c94d556 + 38 (mutex.rs:219)\n6   libwasmtime.dylib               0x000000010fc1759c backtrace::lock::lock::h8fc4afef87bf4cdd + 108\n7   libwasmtime.dylib               0x000000010fc190a9 backtrace::backtrace::trace::h2c442a445ec5d23c + 25 (mod.rs:52)\n8   libwasmtime.dylib               0x000000010fc0ad67 backtrace::capture::Backtrace::create::h6478de780a3e1ffe + 103 (capture.rs:164)\n9   libwasmtime.dylib               0x000000010fc0aceb backtrace::capture::Backtrace::new_unresolved::h6faba8f13d41d24f + 27\n10  libwasmtime.dylib               0x000000010f53fbb5 wasmtime::trap::Trap::new::h1a9eabfc567a0830 + 85 (trap.rs:32)\n11  libwasmtime.dylib               0x000000010f5a8cd5 wasm_trap_new + 357 (trap.rs:43)\n12  ???                             0x00000001200ffd7d 0 + 4832886141\n13  ???                             0x00000001200ff9c4 0 + 4832885188\n14  ???                             0x00000001200ff516 0 + 4832883990\n15  libcoreclr.dylib                0x000000010c6eaca9 UMThunkStub + 273\n16  libwasmtime.dylib               0x000000010f58d7fd wasmtime::func::wasm_func_new::_$u7b$$u7b$closure$u7d$$u7d$::h04b26d3696b68533 + 45 (func.rs:113)\n17  libwasmtime.dylib               0x000000010f58d38d wasmtime::func::create_function::_$u7b$$u7b$closure$u7d$$u7d$::habe73ec684983f10 + 461 (func.rs:90)\n18  libwasmtime.dylib               0x000000010f5af954 wasmtime::func::Func::new::_$u7b$$u7b$closure$u7d$$u7d$::heef410f7add1b585 + 948 (func.rs:246)\n19  libwasmtime.dylib               0x000000010f7c0420 _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..Fn$LT$A$GT$$GT$::call::h99249d428e1cf153 + 48 (boxed.rs:1029)\n20  libwasmtime.dylib               0x000000010f7ba438 wasmtime::trampoline::func::stub_fn::call_stub::h3340fb5f082687a0 + 184 (func.rs:79)\n21  libwasmtime.dylib               0x000000010f7d5cc1 wasmtime::trampoline::func::stub_fn::_$u7b$$u7b$closure$u7d$$u7d$::h5226b3d450958191 + 49 (func.rs:50)\n22  libwasmtime.dylib               0x000000010f7ab91d core::ops::function::FnOnce::call_once::h39eca28141925286 + 13\n23  libwasmtime.dylib               0x000000010f798ae8 _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::hac4b47668d95477a + 40 (panic.rs:318)\n24  libwasmtime.dylib               0x000000010f80638d std::panicking::try::do_call::h6e790f5863cd1626 + 77 (panicking.rs:305)\n25  libwasmtime.dylib               0x00000001103e340b __rust_maybe_catch_panic + 27 (lib.rs:94)\n26  libwasmtime.dylib               0x000000010f80627b std::panicking::try::he4c645adab2154a6 + 187 (panicking.rs:281)\n27  libwasmtime.dylib               0x000000010f798b2f std::panic::catch_unwind::ha8510c644ad9f868 + 47\n28  libwasmtime.dylib               0x000000010f7ba206 wasmtime::trampoline::func::stub_fn::hadd0620c40df928e + 118 (func.rs:49)\n29  ???                             0x000000011198301d 0 + 4590153757\n30  ???                             0x00000001119630ee 0 + 4590022894\n31  ???                             0x00000001119632e4 0 + 4590023396\n32  libwasmtime.dylib               0x000000010f7e68fa wasmtime::func::Func::call::_$u7b$$u7b$closure$u7d$$u7d$::hf0de02914dcebcf0 + 106 (func.rs:537)\n33  libwasmtime.dylib               0x000000010f7be618 wasmtime_runtime::traphandlers::catch_traps::call_closure::ha8fe22ead980de5c + 24 (traphandlers.rs:397)\n34  libwasmtime.dylib               0x000000010fc071b6 RegisterSetjmp + 118 (helpers.c:13)\n35  libwasmtime.dylib               0x000000010f7be88d wasmtime_runtime::traphandlers::catch_traps::_$u7b$$u7b$closure$u7d$$u7d$::hd670f25e8930dd8e + 61 (traphandlers.rs:385)\n36  libwasmtime.dylib               0x000000010f7bf678 wasmtime_runtime::traphandlers::CallThreadState::with::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::he43f22d21542f808 + 40 (traphandlers.rs:434)\n37  libwasmtime.dylib               0x000000010f7fffa9 wasmtime_runtime::traphandlers::tls::set::_$u7b$$u7b$closure$u7d$$u7d$::h33448bea1c38356f + 89 (traphandlers.rs:592)\n38  libwasmtime.dylib               0x000000010f7d20dd std::thread::local::LocalKey$LT$T$GT$::try_with::h5afbe2ebf53cd09f + 253 (local.rs:262)\n39  libwasmtime.dylib               0x000000010f7d1e60 std::thread::local::LocalKey$LT$T$GT$::with::had9e0ec9e0efdafb + 48 (local.rs:239)\n40  libwasmtime.dylib               0x000000010f7fff3c wasmtime_runtime::traphandlers::tls::set::h05ba0b7054f32ba0 + 60 (traphandlers.rs:590)\n41  libwasmtime.dylib               0x000000010f7be9d3 wasmtime_runtime::traphandlers::CallThreadState::with::_$u7b$$u7b$closure$u7d$$u7d$::hd71ca41e35a2e24b + 195 (traphandlers.rs:434)\n42  libwasmtime.dylib               0x000000010f8000fa wasmtime_runtime::traphandlers::tls::with::_$u7b$$u7b$closure$u7d$$u7d$::h7d32ba2acb06c7fe + 170 (traphandlers.rs:601)\n43  libwasmtime.dylib               0x000000010f7d1f9b std::thread::local::LocalKey$LT$T$GT$::try_with::h527a0121f2d2ff09 + 251 (local.rs:262)\n44  libwasmtime.dylib               0x000000010f7d1df7 std::thread::local::LocalKey$LT$T$GT$::with::h9ea0df510202099a + 55\n45  libwasmtime.dylib               0x000000010f80003b wasmtime_runtime::traphandlers::tls::with::h50577ff01f6a129e + 59\n46  libwasmtime.dylib               0x000000010f7be8d3 wasmtime_runtime::traphandlers::CallThreadState::with::h9708523a0125e9dd + 51 (traphandlers.rs:432)\n47  libwasmtime.dylib               0x000000010f7be809 wasmtime_runtime::traphandlers::catch_traps::h03f0d10c4a1eecaa + 489 (traphandlers.rs:384)\n48  libwasmtime.dylib               0x000000010f805259 wasmtime::func::Func::call::hf98f9e53dcf28bd1 + 1161 (func.rs:530)\n49  libwasmtime.dylib               0x000000010f58d964 wasmtime::func::wasm_func_call::_$u7b$$u7b$closure$u7d$$u7d$::h35e240458febc54e + 84\n50  libwasmtime.dylib               0x000000010f5411f0 core::ops::function::FnOnce::call_once::h6eac9b799daddc95 + 32 (function.rs:232)\n51  libwasmtime.dylib               0x000000010f534934 _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::hbe2a7711d183cc27 + 36\n52  libwasmtime.dylib               0x000000010f55b8be std::panicking::try::do_call::h0a237ef0c1d957b0 + 62 (panicking.rs:305)\n53  libwasmtime.dylib               0x00000001103e340b __rust_maybe_catch_panic + 27 (lib.rs:94)\n54  libwasmtime.dylib               0x000000010f55b78c std::panicking::try::h9e9a49438d44ff4b + 188 (panicking.rs:281)\n55  libwasmtime.dylib               0x000000010f534964 std::panic::catch_unwind::habc0197a0168034f + 36\n56  libwasmtime.dylib               0x000000010f59ca4d wasm_func_call + 477 (func.rs:178)\n57  ???                             0x00000001200ff23b 0 + 4832883259\n58  ???                             0x00000001200fee0b 0 + 4832882187\n59  ???                             0x00000001200fea42 0 + 4832881218\n60  ???                             0x000000011ce137ae 0 + 4779489198\n61  ???                             0x000000011bd463eb 0 + 4761871339\n62  ???                             0x00000001200fd6d2 0 + 4832876242\n63  ???                             0x00000001200f8c50 0 + 4832857168\n64  ???                             0x00000001200f8bc4 0 + 4832857028\n65  ???                             0x00000001200f88a4 0 + 4832856228\n66  ???                             0x00000001200fc81a 0 + 4832872474\n67  libcoreclr.dylib                0x000000010c6e9c3b CallDescrWorkerInternal + 124\n68  libcoreclr.dylib                0x000000010c5352a8 CallDescrWorkerWithHandler(CallDescrData*, int) + 104\n69  libcoreclr.dylib                0x000000010c5f96df CallDescrWorkerReflectionWrapper(CallDescrData*, Frame*) + 127\n70  libcoreclr.dylib                0x000000010c5fa667 RuntimeMethodHandle::InvokeMethod(Object*, PtrArray*, SignatureNative*, bool, bool) + 3143\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 193279286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586326993
    },
    {
        "content": "<p>havarnov edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610774523\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610774523\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Now I'm both confused and unsure about what a commented 2 days ago. Seems like a posted the wrong stack trace?</p>\n<p>Anyways, I'm sure the test is failing/passing inconsistently. Here's a new stack trace after running <code>dotnet test</code> on <a href=\"https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19\" title=\"https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19\">https://github.com/havarnov/wasmtime/commit/30e0655493c67cadf4099029e38fa726f896ea19</a>.</p>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>Thread 18:\n0   libsystem_kernel.dylib          0x00007fff7017d4c2 __psynch_mutexwait + 10\n1   libsystem_pthread.dylib         0x00007fff7023c62a _pthread_mutex_firstfit_lock_wait + 96\n2   libsystem_pthread.dylib         0x00007fff7023a5e5 _pthread_mutex_firstfit_lock_slow + 222\n3   libwasmtime.dylib               0x000000010fc16b35 std::sys::unix::mutex::Mutex::lock::h1dbae44fb498794c + 37 (mutex.rs:57)\n4   libwasmtime.dylib               0x000000010fc166a8 std::sys_common::mutex::Mutex::raw_lock::h0320f6f2d66d3b9a + 24 (mutex.rs:42)\n5   libwasmtime.dylib               0x000000010fc0f8c6 std::sync::mutex::Mutex$LT$T$GT$::lock::h3ff867185c94d556 + 38 (mutex.rs:219)\n6   libwasmtime.dylib               0x000000010fc1759c backtrace::lock::lock::h8fc4afef87bf4cdd + 108\n7   libwasmtime.dylib               0x000000010fc190a9 backtrace::backtrace::trace::h2c442a445ec5d23c + 25 (mod.rs:52)\n8   libwasmtime.dylib               0x000000010fc0ad67 backtrace::capture::Backtrace::create::h6478de780a3e1ffe + 103 (capture.rs:164)\n9   libwasmtime.dylib               0x000000010fc0aceb backtrace::capture::Backtrace::new_unresolved::h6faba8f13d41d24f + 27\n10  libwasmtime.dylib               0x000000010f53fbb5 wasmtime::trap::Trap::new::h1a9eabfc567a0830 + 85 (trap.rs:32)\n11  libwasmtime.dylib               0x000000010f5a8cd5 wasm_trap_new + 357 (trap.rs:43)\n12  ???                             0x00000001200ffd7d 0 + 4832886141\n13  ???                             0x00000001200ff9c4 0 + 4832885188\n14  ???                             0x00000001200ff516 0 + 4832883990\n15  libcoreclr.dylib                0x000000010c6eaca9 UMThunkStub + 273\n16  libwasmtime.dylib               0x000000010f58d7fd wasmtime::func::wasm_func_new::_$u7b$$u7b$closure$u7d$$u7d$::h04b26d3696b68533 + 45 (func.rs:113)\n17  libwasmtime.dylib               0x000000010f58d38d wasmtime::func::create_function::_$u7b$$u7b$closure$u7d$$u7d$::habe73ec684983f10 + 461 (func.rs:90)\n18  libwasmtime.dylib               0x000000010f5af954 wasmtime::func::Func::new::_$u7b$$u7b$closure$u7d$$u7d$::heef410f7add1b585 + 948 (func.rs:246)\n19  libwasmtime.dylib               0x000000010f7c0420 _$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..Fn$LT$A$GT$$GT$::call::h99249d428e1cf153 + 48 (boxed.rs:1029)\n20  libwasmtime.dylib               0x000000010f7ba438 wasmtime::trampoline::func::stub_fn::call_stub::h3340fb5f082687a0 + 184 (func.rs:79)\n21  libwasmtime.dylib               0x000000010f7d5cc1 wasmtime::trampoline::func::stub_fn::_$u7b$$u7b$closure$u7d$$u7d$::h5226b3d450958191 + 49 (func.rs:50)\n22  libwasmtime.dylib               0x000000010f7ab91d core::ops::function::FnOnce::call_once::h39eca28141925286 + 13\n23  libwasmtime.dylib               0x000000010f798ae8 _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::hac4b47668d95477a + 40 (panic.rs:318)\n24  libwasmtime.dylib               0x000000010f80638d std::panicking::try::do_call::h6e790f5863cd1626 + 77 (panicking.rs:305)\n25  libwasmtime.dylib               0x00000001103e340b __rust_maybe_catch_panic + 27 (lib.rs:94)\n26  libwasmtime.dylib               0x000000010f80627b std::panicking::try::he4c645adab2154a6 + 187 (panicking.rs:281)\n27  libwasmtime.dylib               0x000000010f798b2f std::panic::catch_unwind::ha8510c644ad9f868 + 47\n28  libwasmtime.dylib               0x000000010f7ba206 wasmtime::trampoline::func::stub_fn::hadd0620c40df928e + 118 (func.rs:49)\n29  ???                             0x000000011198301d 0 + 4590153757\n30  ???                             0x00000001119630ee 0 + 4590022894\n31  ???                             0x00000001119632e4 0 + 4590023396\n32  libwasmtime.dylib               0x000000010f7e68fa wasmtime::func::Func::call::_$u7b$$u7b$closure$u7d$$u7d$::hf0de02914dcebcf0 + 106 (func.rs:537)\n33  libwasmtime.dylib               0x000000010f7be618 wasmtime_runtime::traphandlers::catch_traps::call_closure::ha8fe22ead980de5c + 24 (traphandlers.rs:397)\n34  libwasmtime.dylib               0x000000010fc071b6 RegisterSetjmp + 118 (helpers.c:13)\n35  libwasmtime.dylib               0x000000010f7be88d wasmtime_runtime::traphandlers::catch_traps::_$u7b$$u7b$closure$u7d$$u7d$::hd670f25e8930dd8e + 61 (traphandlers.rs:385)\n36  libwasmtime.dylib               0x000000010f7bf678 wasmtime_runtime::traphandlers::CallThreadState::with::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::he43f22d21542f808 + 40 (traphandlers.rs:434)\n37  libwasmtime.dylib               0x000000010f7fffa9 wasmtime_runtime::traphandlers::tls::set::_$u7b$$u7b$closure$u7d$$u7d$::h33448bea1c38356f + 89 (traphandlers.rs:592)\n38  libwasmtime.dylib               0x000000010f7d20dd std::thread::local::LocalKey$LT$T$GT$::try_with::h5afbe2ebf53cd09f + 253 (local.rs:262)\n39  libwasmtime.dylib               0x000000010f7d1e60 std::thread::local::LocalKey$LT$T$GT$::with::had9e0ec9e0efdafb + 48 (local.rs:239)\n40  libwasmtime.dylib               0x000000010f7fff3c wasmtime_runtime::traphandlers::tls::set::h05ba0b7054f32ba0 + 60 (traphandlers.rs:590)\n41  libwasmtime.dylib               0x000000010f7be9d3 wasmtime_runtime::traphandlers::CallThreadState::with::_$u7b$$u7b$closure$u7d$$u7d$::hd71ca41e35a2e24b + 195 (traphandlers.rs:434)\n42  libwasmtime.dylib               0x000000010f8000fa wasmtime_runtime::traphandlers::tls::with::_$u7b$$u7b$closure$u7d$$u7d$::h7d32ba2acb06c7fe + 170 (traphandlers.rs:601)\n43  libwasmtime.dylib               0x000000010f7d1f9b std::thread::local::LocalKey$LT$T$GT$::try_with::h527a0121f2d2ff09 + 251 (local.rs:262)\n44  libwasmtime.dylib               0x000000010f7d1df7 std::thread::local::LocalKey$LT$T$GT$::with::h9ea0df510202099a + 55\n45  libwasmtime.dylib               0x000000010f80003b wasmtime_runtime::traphandlers::tls::with::h50577ff01f6a129e + 59\n46  libwasmtime.dylib               0x000000010f7be8d3 wasmtime_runtime::traphandlers::CallThreadState::with::h9708523a0125e9dd + 51 (traphandlers.rs:432)\n47  libwasmtime.dylib               0x000000010f7be809 wasmtime_runtime::traphandlers::catch_traps::h03f0d10c4a1eecaa + 489 (traphandlers.rs:384)\n48  libwasmtime.dylib               0x000000010f805259 wasmtime::func::Func::call::hf98f9e53dcf28bd1 + 1161 (func.rs:530)\n49  libwasmtime.dylib               0x000000010f58d964 wasmtime::func::wasm_func_call::_$u7b$$u7b$closure$u7d$$u7d$::h35e240458febc54e + 84\n50  libwasmtime.dylib               0x000000010f5411f0 core::ops::function::FnOnce::call_once::h6eac9b799daddc95 + 32 (function.rs:232)\n51  libwasmtime.dylib               0x000000010f534934 _$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::hbe2a7711d183cc27 + 36\n52  libwasmtime.dylib               0x000000010f55b8be std::panicking::try::do_call::h0a237ef0c1d957b0 + 62 (panicking.rs:305)\n53  libwasmtime.dylib               0x00000001103e340b __rust_maybe_catch_panic + 27 (lib.rs:94)\n54  libwasmtime.dylib               0x000000010f55b78c std::panicking::try::h9e9a49438d44ff4b + 188 (panicking.rs:281)\n55  libwasmtime.dylib               0x000000010f534964 std::panic::catch_unwind::habc0197a0168034f + 36\n56  libwasmtime.dylib               0x000000010f59ca4d wasm_func_call + 477 (func.rs:178)\n57  ???                             0x00000001200ff23b 0 + 4832883259\n58  ???                             0x00000001200fee0b 0 + 4832882187\n59  ???                             0x00000001200fea42 0 + 4832881218\n60  ???                             0x000000011ce137ae 0 + 4779489198\n61  ???                             0x000000011bd463eb 0 + 4761871339\n62  ???                             0x00000001200fd6d2 0 + 4832876242\n63  ???                             0x00000001200f8c50 0 + 4832857168\n64  ???                             0x00000001200f8bc4 0 + 4832857028\n65  ???                             0x00000001200f88a4 0 + 4832856228\n66  ???                             0x00000001200fc81a 0 + 4832872474\n67  libcoreclr.dylib                0x000000010c6e9c3b CallDescrWorkerInternal + 124\n68  libcoreclr.dylib                0x000000010c5352a8 CallDescrWorkerWithHandler(CallDescrData*, int) + 104\n69  libcoreclr.dylib                0x000000010c5f96df CallDescrWorkerReflectionWrapper(CallDescrData*, Frame*) + 127\n70  libcoreclr.dylib                0x000000010c5fa667 RuntimeMethodHandle::InvokeMethod(Object*, PtrArray*, SignatureNative*, bool, bool) + 3143\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 193279291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586327006
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610790935\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-610790935\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Hm that also looks pretty normal, are you sure that was the thread which crashed?</p>\n</blockquote>",
        "id": 193281836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586329799
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611102261\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611102261\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I don't know how I manage to mess this up every time :/</p>\n<p>I run <code>dotnet test --filter ItThrowsOnOutOfBoundsMemoryAccess</code>.</p>\n<p>It has three different outcomes:</p>\n<ol>\n<li>test pass</li>\n<li>test process hangs</li>\n<li>test process crashes (with the provided report)</li>\n</ol>\n<p>Crashed thread stack trace:<br>\n&lt;details&gt;</p>\n<div class=\"codehilite\"><pre><span></span>Thread 18 Crashed:\n0   libwasmtime.dylib               0x0000000113b856b9 __rbt_macho_add_symtab + 1353\n1   libwasmtime.dylib               0x0000000113b84740 __rbt_macho_add + 1920\n2   libwasmtime.dylib               0x0000000113b83e31 __rbt_backtrace_initialize + 337\n3   libwasmtime.dylib               0x0000000113b834ef fileline_initialize + 735\n4   libwasmtime.dylib               0x0000000113b835ed __rbt_backtrace_syminfo + 45\n5   libwasmtime.dylib               0x0000000113b6f4df backtrace::symbolize::libbacktrace::resolve::h719e8a9f1adb8fe1 + 159 (libbacktrace.rs:469)\n6   libwasmtime.dylib               0x0000000113b72ab8 backtrace::symbolize::resolve_frame_unsynchronized::h7ca357de7ff98157 + 56 (mod.rs:178)\n7   libwasmtime.dylib               0x0000000113b728f0 backtrace::symbolize::resolve_frame::h75c5abc2a861fa2d + 80 (mod.rs:105)\n8   libwasmtime.dylib               0x0000000113b6b13c backtrace::capture::Backtrace::resolve::he887e05906dda0c3 + 348 (capture.rs:219)\n9   libwasmtime.dylib               0x0000000113b6ac8c backtrace::capture::Backtrace::new::hde48dbbe07c85c38 + 60 (capture.rs:129)\n10  libwasmtime.dylib               0x0000000113b3cfd0 wasmtime_runtime::traphandlers::Trap::wasm::h1cad6bcb8cc876a1 + 64 (traphandlers.rs:360)\n11  libwasmtime.dylib               0x0000000113b55532 wasmtime_runtime::instance::initialize_memories::hd1e791bdc211efcb + 514 (instance.rs:1326)\n12  libwasmtime.dylib               0x0000000113b52d91 wasmtime_runtime::instance::InstanceHandle::new::h7ed6837db8af70f4 + 6369 (instance.rs:978)\n13  libwasmtime.dylib               0x00000001138b2895 wasmtime_jit::instantiate::CompiledModule::instantiate::h4ab8e22914e45208 + 1237 (instantiate.rs:216)\n14  libwasmtime.dylib               0x00000001136feed6 wasmtime::instance::instantiate::hf4f7fd3334ac0a8b + 150 (instance.rs:29)\n15  libwasmtime.dylib               0x00000001136ff296 wasmtime::instance::Instance::new::h724eb3a5b0218b1a + 598 (instance.rs:128)\n16  libwasmtime.dylib               0x00000001136f755e wasmtime::linker::Linker::instantiate::h55a563d6e112071b + 2878 (linker.rs:395)\n17  libwasmtime.dylib               0x00000001134ff6c4 wasmtime_linker_instantiate + 132 (linker.rs:85)\n18  ???                             0x000000011be0093e 0 + 4762634558\n19  ???                             0x000000011be003b2 0 + 4762633138\n20  ???                             0x000000011be002ef 0 + 4762632943\n21  ???                             0x000000011be00143 0 + 4762632515\n22  ???                             0x000000011be00070 0 + 4762632304\n23  ???                             0x000000011bdfffe4 0 + 4762632164\n24  ???                             0x000000011bdff3f4 0 + 4762629108\n25  ???                             0x000000011bdfdcc3 0 + 4762623171\n26  libcoreclr.dylib                0x0000000110429c3b CallDescrWorkerInternal + 124\n27  libcoreclr.dylib                0x00000001102752a8 CallDescrWorkerWithHandler(CallDescrData*, int) + 104\n28  libcoreclr.dylib                0x00000001103396df CallDescrWorkerReflectionWrapper(CallDescrData*, Frame*) + 127\n29  libcoreclr.dylib                0x000000011033a667 RuntimeMethodHandle::InvokeMethod(Object*, PtrArray*, SignatureNative*, bool, bool) + 3143\n30  ???                             0x0000000116a6750a 0 + 4674974986\n31  ???                             0x0000000116a618a9 0 + 4674951337\n32  ???                             0x000000011bdfdb89 0 + 4762622857\n33  ???                             0x000000011bdfd799 0 + 4762621849\n34  ???                             0x000000011bdfcd46 0 + 4762619206\n35  ???                             0x000000011bdfcc65 0 + 4762618981\n36  ???                             0x000000011bdfcbe0 0 + 4762618848\n37  ???                             0x000000011bdfc999 0 + 4762618265\n38  ???                             0x000000011bdfc863 0 + 4762617955\n39  ???                             0x000000011bdfc7bb 0 + 4762617787\n40  ???                             0x000000011bdfc76c 0 + 4762617708\n41  ???                             0x000000011bdfc6d5 0 + 4762617557\n42  ???                             0x000000011bdfc47d 0 + 4762616957\n43  ???                             0x000000011bdfc363 0 + 4762616675\n44  ???                             0x000000011bdfc2bb 0 + 4762616507\n45  ???                             0x000000011bdfc26c 0 + 4762616428\n46  ???                             0x000000011bdfbd16 0 + 4762615062\n47  ???                             0x000000011bdfb5e6 0 + 4762613222\n48  ???                             0x000000011bdfb505 0 + 4762612997\n49  ???                             0x000000011bdfb480 0 + 4762612864\n50  ???                             0x000000011bdfb292 0 + 4762612370\n51  ???                             0x000000011bdf9c39 0 + 4762606649\n52  ???                             0x000000011bdf9356 0 + 4762604374\n53  ???                             0x000000011bdf9275 0 + 4762604149\n54  ???                             0x000000011bdf91f0 0 + 4762604016\n55  ???                             0x000000011bdf8f85 0 + 4762603397\n56  ???                             0x000000011bdf8e53 0 + 4762603091\n57  ???                             0x000000011bdf8dab 0 + 4762602923\n58  ???                             0x000000011bdf8d1c 0 + 4762602780\n59  ???                             0x000000011bdf8c5e 0 + 4762602590\n60  ???                             0x000000011bdf85ae 0 + 4762600878\n61  ???                             0x000000011bdf82a5 0 + 4762600101\n62  ???                             0x000000011bdf8103 0 + 4762599683\n63  ???                             0x000000011bdf805f 0 + 4762599519\n64  ???                             0x000000011bdf8000 0 + 4762599424\n65  ???                             0x000000011bdf7b5a 0 + 4762598234\n66  ???                             0x000000011bdf781e 0 + 4762597406\n67  ???                             0x000000011bdf7506 0 + 4762596614\n68  ???                             0x000000011bdf7425 0 + 4762596389\n69  ???                             0x000000011bdf7368 0 + 4762596200\n70  ???                             0x000000011bdf6b02 0 + 4762594050\n71  ???                             0x000000011bdf6276 0 + 4762591862\n72  ???                             0x000000011bdf6195 0 + 4762591637\n73  ???                             0x000000011bdf60fa 0 + 4762591482\n74  ???                             0x000000011bdf49d1 0 + 4762585553\n75  ???                             0x000000011bdf404c 0 + 4762583116\n76  ???                             0x000000011bdf3d16 0 + 4762582294\n77  ???                             0x000000011bdf3c35 0 + 4762582069\n78  ???                             0x000000011bdf3b9a 0 + 4762581914\n79  ???                             0x000000011bdf3783 0 + 4762580867\n80  ???                             0x000000011bdf3636 0 + 4762580534\n81  ???                             0x000000011bdf327a 0 + 4762579578\n82  ???                             0x000000011bdf2c66 0 + 4762578022\n83  ???                             0x000000011bdf2b85 0 + 4762577797\n84  ???                             0x000000011bdf2aea 0 + 4762577642\n85  ???                             0x000000011bdf244d 0 + 4762575949\n86  ???                             0x000000011bdf21e6 0 + 4762575334\n87  ???                             0x000000011bdf2105 0 + 4762575109\n88  ???                             0x000000011bdf206a 0 + 4762574954\n89  ???                             0x000000011bdf1c2e 0 + 4762573870\n90  ???                             0x000000011bdf028c 0 + 4762567308\n91  ???                             0x000000011bdefec6 0 + 4762566342\n92  ???                             0x000000011bdefde5 0 + 4762566117\n93  ???                             0x000000011bdefd4a 0 + 4762565962\n94  ???                             0x000000011bde90ef 0 + 4762538223\n95  ???                             0x000000011bde8976 0 + 4762536310\n96  ???                             0x000000011bde8895 0 + 4762536085\n97  ???                             0x000000011bde87fa 0 + 4762535930\n98  ???                             0x000000011bde82c7 0 + 4762534599\n99  ???                             0x000000011bde7c4b 0 + 4762532939\n100 ???                             0x000000011bde78f6 0 + 4762532086\n101 ???                             0x000000011bde7815 0 + 4762531861\n102 ???                             0x000000011bde737a 0 + 4762530682\n103 ???                             0x000000011bde5ba0 0 + 4762524576\n104 ???                             0x000000011bde5836 0 + 4762523702\n105 ???                             0x000000011bde5755 0 + 4762523477\n106 ???                             0x000000011bde52ba 0 + 4762522298\n107 ???                             0x000000011bde4dfc 0 + 4762521084\n108 ???                             0x000000011bde4d10 0 + 4762520848\n109 ???                             0x00000001169ed4f1 0 + 4674475249\n110 ???                             0x00000001169fa1e2 0 + 4674527714\n111 ???                             0x00000001169deba1 0 + 4674415521\n112 ???                             0x00000001169f4642 0 + 4674504258\n113 ???                             0x00000001169f43de 0 + 4674503646\n114 ???                             0x0000000116a00c19 0 + 4674554905\n115 ???                             0x000000011bde4be3 0 + 4762520547\n116 ???                             0x00000001169deba1 0 + 4674415521\n117 ???                             0x000000011bde4b62 0 + 4762520418\n118 ???                             0x000000011bde1faa 0 + 4762509226\n119 ???\n[message truncated]\n</pre></div>\n\n\n</blockquote>",
        "id": 193355628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586368510
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611150356\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611150356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@havarnov ok that definitely looks like a bug! I don't think it's the same issue as before though because it doesn't look like there's any wasm code on the stack. This may perhaps mean there's a bug in the <code>backtrace</code> crate or we're generating invalid debuginfo or something like that.</p>\n<p>Would it be possible to reduce this to a small thing that can be reproduced locally?</p>\n</blockquote>",
        "id": 193368123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586374412
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611334606\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611334606\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@alexcrichton not sure what you mean about a \"small thing\"? Isn't the <a href=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs#L37-L48\" title=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs#L37-L48\">test I provided ok for testing</a>? Or were you thinking of a small console application?</p>\n</blockquote>",
        "id": 193408337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586409763
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612158669\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612158669\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>Hm so ideally we could get a reproduction with just the Rust API. Failing that a reproduction with just the C API would be great. Failing that a reproduction with a small example in the dotnet API would be great too. The dotnet extension has moved around a bit and it looks like the test <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611102261\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-611102261\">mentioned here</a> has either been renamed or no longer exists. Would it be possible to help reduce this to something standalone which can be reproduced today?</p>\n</blockquote>",
        "id": 193601647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586543364
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612381818\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612381818\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@alexcrichton I'll look into reproducing this bug in rust or the c api. The test I refered to was one I created in my fork of this repo, <a href=\"https://github.com/havarnov/wasmtime/tree/outofboundsmemoryaccess\" title=\"https://github.com/havarnov/wasmtime/tree/outofboundsmemoryaccess\">https://github.com/havarnov/wasmtime/tree/outofboundsmemoryaccess</a>. That's why I asked if you wanted a PR with the new test.</p>\n<p>I'll come back when I have something more to show, or I need more help. Ok?</p>\n</blockquote>",
        "id": 193652248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586598790
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612510175\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612510175\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@alexcrichton I need some help on this one. I'm trying to reproduce this by using the wasmtime api directly as follows, which to the best of my knowledge mimics the test I've written from the dotnet side.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">outofbounds_memory</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Limits</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;mem&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Should be able to define memory item.&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">&quot;</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">            (import &quot;&quot; &quot;</span><span class=\"n\">mem</span><span class=\"s\">&quot; (memory $m 1 2))</span>\n<span class=\"s\">            (data (i32.const 65535) &quot;</span><span class=\"err\">\\</span><span class=\"mi\">01</span><span class=\"s\">&quot;)</span>\n<span class=\"s\">            (data (i32.const 65536) &quot;</span><span class=\"err\">\\</span><span class=\"mi\">02</span><span class=\"s\">&quot;)</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    &quot;</span><span class=\"err\">#</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">downcast</span>::<span class=\"o\">&lt;</span><span class=\"n\">Trap</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">trap</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;wasm trap: out of bounds memory access, source location: @-&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>As you can see I'm expecting this to be \"trapped\" with the \"out of bounds memory access\" message. This is after all what I'm seeing from the dotnet side of things when the test _does_ pass. But what I'm getting is a linker error from <code>linker.instantiate</code>:</p>\n<div class=\"codehilite\"><pre><span></span>Failed to link module\n\nCaused by:\n    Link error: memory out of bounds: data segment does not fit\n</pre></div>\n\n\n</blockquote>",
        "id": 193678713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586637921
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612927714\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-612927714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I believe that's the expected error from that test. I don't really know much about C# testing, but you've got <a href=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs\" title=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs\">two tests defined in that file</a>, is it possible that they're sharing access to the same linker by accident?</p>\n</blockquote>",
        "id": 193778552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586788931
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>The <code>ClearDefinitions</code> call should instantiate a new linker between the different test executions, I believe (iirc my xUnit semantics correctly, at least). </p>\n</blockquote>",
        "id": 193803547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586802434
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>The <code>ClearDefinitions</code> call should instantiate a new linker between the different test executions, I believe (iirc xUnit semantics correctly, at least). </p>\n<p>Although, reusing the definitions seems like the probable cause of the failure.</p>\n</blockquote>",
        "id": 193803703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586802513
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613028410\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>The <code>ClearDefinitions</code> call should instantiate a new linker between the different test executions, I believe (iirc xUnit semantics correctly, at least). </p>\n<p>Although, reusing the definitions seems like the probable cause of the failure.  I can look into this.</p>\n</blockquote>",
        "id": 193803719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586802528
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613047081\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613047081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I'm not able to reproduce the failure of either of those two tests (both pass as-is).</p>\n<p>I verified that <code>ClearDefinitions</code> is called for each test run, so a linker should not be shared between the runs.</p>\n</blockquote>",
        "id": 193808509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586804921
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613580688\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613580688\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@peterhuene interesting that it does fail on your machine. Just so there's no misunderstandings, it's the test name <code>ItThrowsOnOutOfBoundsMemoryAccess</code> that's inconsistently passes.</p>\n<p>I will try to get the <code>\"wasm trap: out of bounds memory access, source location: @-\"</code> trap message from my rust test aswell, and see if that's working consistently.</p>\n</blockquote>",
        "id": 193932230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586885913
    },
    {
        "content": "<p>havarnov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613605396\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613605396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I think I have pinpointed this a bit more. The <code>ModuleFixture</code> in the dotnet test builds the Host as follows:</p>\n<div class=\"codehilite\"><pre><span></span>        public ModuleFixture()\n        {\n            Host = new HostBuilder()\n                .WithMultiValue(true)\n                .WithReferenceTypes(true)\n                .Build();\n\n            Module = Host.LoadModuleText(Path.Combine(&quot;Modules&quot;, ModuleFileName));\n        }\n</pre></div>\n\n\n<p>If I comment out <code>.WithReferenceTypes(true)</code> the test now fails consistently with the following error message:</p>\n<div class=\"codehilite\"><pre><span></span>Error Message:\n   Expected exception message to match the equivalent of\n&quot;wasm trap: out of bounds memory access, source location: @-&quot;, but\n&quot;Failed to link module\n\nCaused by:\n    Link error: memory out of bounds: data segment does not fit&quot; does not.\n</pre></div>\n\n\n</blockquote>",
        "id": 193938228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586888781
    },
    {
        "content": "<p>havarnov edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613605396\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613605396\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>I think I have pinpointed this a bit more. The <code>ModuleFixture</code> in the dotnet test builds the Host as follows:</p>\n<div class=\"codehilite\"><pre><span></span>        public ModuleFixture()\n        {\n            Host = new HostBuilder()\n                .WithMultiValue(true)\n                .WithReferenceTypes(true)\n                .Build();\n\n            Module = Host.LoadModuleText(Path.Combine(&quot;Modules&quot;, ModuleFileName));\n        }\n</pre></div>\n\n\n<p>EDIT: but to investigate this further I need some help from you guys; @alexcrichton @peterhuene </p>\n<p>If I comment out <code>.WithReferenceTypes(true)</code> the test now fails consistently with the following error message:</p>\n<div class=\"codehilite\"><pre><span></span>Error Message:\n   Expected exception message to match the equivalent of\n&quot;wasm trap: out of bounds memory access, source location: @-&quot;, but\n&quot;Failed to link module\n\nCaused by:\n    Link error: memory out of bounds: data segment does not fit&quot; does not.\n</pre></div>\n\n\n</blockquote>",
        "id": 193938507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586888936
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613679403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613679403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>@havarnov that's correct, the <code>ItThrowsOnOutOfBoundsMemoryAccess</code> test consistently <em>passes</em> for me.  I reran the tests 100 times and they all succeeded.</p>\n<p>My steps to reproduce:</p>\n<ol>\n<li><code>git clone git@github.com:bytecodealliance/wasmtime-dotnet.git</code></li>\n<li><code>cd wasmtime-dotnet</code></li>\n<li>I created <code>tests/OutOfBoundsMemoryAccessTests.cs</code> with the contents of <a href=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs\" title=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/OutOfBoundsMemoryAccessTests.cs\">this file</a>.</li>\n<li>I created <code>tests/Modules/OutOfBoundsMemoryAccess.wat</code> with the contents of <a href=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/Modules/OutOfBoundsMemoryAccess.wat\" title=\"https://github.com/havarnov/wasmtime/blob/30e0655493c67cadf4099029e38fa726f896ea19/crates/misc/dotnet/tests/Modules/OutOfBoundsMemoryAccess.wat\">this file</a>.</li>\n<li><code>dotnet test</code> in a loop 100 times, breaking if failure.</li>\n</ol>\n<p>All test runs were successful.</p>\n<p>I'll see if I can reproduce it with your older <code>wasmtime</code>-based branch.</p>\n</blockquote>",
        "id": 193956703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898091
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613680536\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613680536\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>However, I <em>was able to reproduce</em> the link error if support for reference types is disabled.</p>\n<div class=\"codehilite\"><pre><span></span>   Expected a &lt;Wasmtime.TrapException&gt; to be thrown, but found &lt;Wasmtime.WasmtimeException&gt;: &quot;\n&quot;Wasmtime.WasmtimeException with message &quot;Failed to link module\n\nCaused by:\n    Link error: memory out of bounds: data segment does not fit\n</pre></div>\n\n\n</blockquote>",
        "id": 193956976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898244
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613681644\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613681644\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>It appears to be a link-time error without reference types enabled <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7eea5d8d438bf0d65710410c0acc58e5b27018d7/crates/runtime/src/instance.rs#L973-L976\" title=\"https://github.com/bytecodealliance/wasmtime/blob/7eea5d8d438bf0d65710410c0acc58e5b27018d7/crates/runtime/src/instance.rs#L973-L976\">by design</a>.</p>\n</blockquote>",
        "id": 193957248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898400
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613681644\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431#issuecomment-613681644\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1431\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1431\">Issue #1431</a>:</p>\n<blockquote>\n<p>It appears to be a link-time error without reference types enabled <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7eea5d8d438bf0d65710410c0acc58e5b27018d7/crates/runtime/src/instance.rs#L973-L976\" title=\"https://github.com/bytecodealliance/wasmtime/blob/7eea5d8d438bf0d65710410c0acc58e5b27018d7/crates/runtime/src/instance.rs#L973-L976\">by design</a>.</p>\n<p>This is because the reference types feature implicitly enables the bulk-memory feature.  Without it, you'll get the linker error.</p>\n</blockquote>",
        "id": 193957636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586898629
    }
]