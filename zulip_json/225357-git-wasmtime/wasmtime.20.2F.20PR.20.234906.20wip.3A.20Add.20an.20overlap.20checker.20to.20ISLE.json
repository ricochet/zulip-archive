[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> from <code>trevor/isle-overlap-checker</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 298620462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663085802
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> from <code>trevor/isle-overlap-checker</code> to <code>main</code>.</p>",
        "id": 298628493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663088577
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> from <code>trevor/isle-overlap-checker</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce overlap checking for ISLE as the start of addressing #4717.</p>\n<p>The overlap checker detects cases where ISLE rules could fire for the same input. Consider the following example from the x64 lowerings (line numbers added for clarity):</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F32X4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorps</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F64X2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorpd</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">multi_lane</span><span class=\"w\"> </span><span class=\"nv\">_bits</span><span class=\"w\"> </span><span class=\"nv\">_lanes</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Pxor</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Rule 3 overlaps separately with rules 1 and 2, but rules 1 and 2 don't overlap with each other. With overlap checking enabled this will be reported as an overlap of all three rules, where the rule on line 3 will be identified as the source of the overlap (error messages could definitely be improved here). In this case the overlap can be resolved by setting a lower priority for rule 3.</p>\n<p>For another example, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F64</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In this case, only the rules on lines 1 and 2 overlap, as we don't know that the fallible extractor won't fire successfully on the input <code>25</code>. As the rule on line 3 has a different leading pattern (<code>$F64</code>) it won't be part of  the overlap group generated.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 298630033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089131
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> from <code>trevor/isle-overlap-checker</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce overlap checking for ISLE as the start of addressing #4717.</p>\n<p>The overlap checker detects cases where ISLE rules could fire for the same input. Consider the following example from the x64 lowerings (line numbers added for clarity):</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F32X4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorps</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F64X2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorpd</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">multi_lane</span><span class=\"w\"> </span><span class=\"nv\">_bits</span><span class=\"w\"> </span><span class=\"nv\">_lanes</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Pxor</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Rule 3 overlaps separately with rules 1 and 2, but rules 1 and 2 don't overlap with each other. With overlap checking enabled this will be reported as an overlap of all three rules, where the rule on line 3 will be identified as the source of the overlap (error messages could definitely be improved here). In this case the overlap can be resolved by setting a lower priority for rule 3.</p>\n<p>For another example, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F64</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In this case, only the rules on lines 1 and 2 overlap, as we don't know that the fallible extractor won't fire successfully on the input <code>25</code>. As the rule on line 3 has a different leading pattern (<code>$F64</code>) it won't be part of  the overlap group generated.</p>\n<p>However, if the example looks instead like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F64</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We consider there to be no overlap in the rules as fallible extractors are expected to be pure.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 298630348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089248
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a>.</p>",
        "id": 298630419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089278
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> as ready for review.</p>",
        "id": 298630427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089280
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906#discussion_r969890958\">PR review comment</a>:</p>\n<blockquote>\n<p>This is not the most helpful error output, but I'm assuming that as we start burning down the list of overlaps we'll figure out what's most useful to identify.</p>\n</blockquote>",
        "id": 298630534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089326
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906#pullrequestreview-1106176827\">PR review</a>.</p>",
        "id": 298630536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089327
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4906\">PR #4906</a> from <code>trevor/isle-overlap-checker</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce overlap checking for ISLE as the start of addressing #4717.</p>\n<p>The overlap checker detects cases where ISLE rules could fire for the same input. Consider the following example from the x64 lowerings (line numbers added for clarity):</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">13:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F32X4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorps</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">14:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"nv\">$F64X2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Xorpd</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"nv\">15:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sse_xor_op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">multi_lane</span><span class=\"w\"> </span><span class=\"nv\">_bits</span><span class=\"w\"> </span><span class=\"nv\">_lanes</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">SseOpcode.Pxor</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Rule 15 overlaps separately with rules 13 and 14, but rules 13 and 14 don't overlap with each other. With overlap checking enabled this will be reported as an overlap of all three rules, where the rule on line 15 will be identified as the source of the overlap (error messages could definitely be improved here). In this case the overlap can be resolved by setting a lower priority for rule 3.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>:\n  <span class=\"err\">×</span><span class=\"w\"> </span><span class=\"n\">overlap</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">rules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">overlapping</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"err\">│</span><span class=\"w\">   </span><span class=\"o\">../</span><span class=\"n\">x64</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">15</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"err\">│</span><span class=\"w\">   </span><span class=\"o\">../</span><span class=\"n\">x64</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">13</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"err\">│</span><span class=\"w\">   </span><span class=\"o\">../</span><span class=\"n\">x64</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">14</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For another example, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F64</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In this case, only the rules on lines 1 and 2 overlap, as we don't know that the fallible extractor won't fire successfully on the input <code>25</code>. As the rule on line 3 has a different leading pattern (<code>$F64</code>) it won't be part of  the overlap group generated.</p>\n<p>However, if the example looks instead like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">1:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">2:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fallible_extractor</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nv\">3:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">$F64</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We consider there to be no overlap in the rules as fallible extractors are expected to be pure.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 298630938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663089471
    }
]