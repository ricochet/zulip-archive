[
    {
        "content": "<p><a href=\"https://github.com/candymate\">candymate</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">Issue #8216</a>.</p>",
        "id": 428273266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711092404
    },
    {
        "content": "<p><a href=\"https://github.com/candymate\">candymate</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">Issue #8216</a>.</p>",
        "id": 428273267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711092404
    },
    {
        "content": "<p>candymate opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">issue #8216</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">strategy</span><span class=\"p\">(</span><span class=\"n\">Strategy</span>::<span class=\"n\">Cranelift</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span>::<span class=\"nb\">None</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">    (module</span>\n<span class=\"s\">        (type (;0;) (func (param) (result)))</span>\n<span class=\"s\">        (import \"mem\" \"mem\" (memory (;0;) 1))</span>\n<span class=\"s\">        (func (;0;) (type 0) (param) (result)</span>\n<span class=\"s\">          i32.const 65521</span>\n<span class=\"s\">          v128.const i32x4 0xffffffff 0xffffffff 0xffffffff 0xffffffff</span>\n<span class=\"s\">          v128.store align=1)</span>\n<span class=\"s\">        (export \"main\" (func 0)))</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`main` was not an exported function\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Opt level None: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>\n<span class=\"w\">    </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">65521</span><span class=\"o\">..</span><span class=\"mi\">65536</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"{} \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-wrapper\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n#<span class=\"w\"> </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"19.0.0\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../wasmtime/crates/wasmtime\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">commit</span>: <span class=\"mi\">6</span><span class=\"n\">c5184809db3a92de4ee0c718c403bedc9a9ff4f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">latest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Date</span>:   <span class=\"nc\">Thu</span><span class=\"w\"> </span><span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">18</span>:<span class=\"mi\">24</span>:<span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">0700</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to reproduce</h3>\n<p>Compare the following executions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<p>QEMU run options (riscv64) I'm currently using is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"n\">rv64</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">vlen</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"n\">vext_spec</span><span class=\"o\">=</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">zba</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbc</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbkb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zcb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zicond</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>RISC-V result should not leave side-effect when trapping. By looking at the <a href=\"https://webassembly.github.io/spec/core/exec/instructions.html#t-mathsf-xref-syntax-instructions-syntax-instr-memory-mathsf-store-xref-syntax-instructions-syntax-memarg-mathit-memarg-and-t-mathsf-xref-syntax-instructions-syntax-instr-memory-mathsf-store-n-xref-syntax-instructions-syntax-memarg-mathit-memarg\">spec</a>, we can know that <code>store</code> instruction should check first if the memory address (offset + byte-width) is valid, then perform the memory operation.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x45</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<p>RISC-V leaves memory side-effects when the program traps due to invalid memory address. The PoC code posted above leaves 15 bytes of 255 at the end of the memory. (indices from 65521 to 65535)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x45</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"p\">)</span>\n<span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li>wasmtime version<ul>\n<li>commit: 6c5184809db3a92de4ee0c718c403bedc9a9ff4f(current latest, Date: Thu Mar 21 18:24:49 2024 -0700)</li>\n<li>However, also checked on v19.0.0</li>\n</ul>\n</li>\n<li>Operating system &amp; architecture: Ubuntu 22.04.3 LTS, Arch: x86_64</li>\n<li>QEMU version: <code>qemu-riscv64 version 8.2.1 (v8.2.1)</code></li>\n</ul>\n<h3>Extra Info</h3>\n<ul>\n<li>Works fine on other architectures (x86_64, aarch64, s390x)</li>\n<li>RISC-V is not the tier 1 platform, so releasing this bug as public (not a security bug)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 428273269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711092404
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216#issuecomment-2015005347\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">issue #8216</a>:</p>\n<blockquote>\n<p>If I'm not mistaken this is the same as <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">https://github.com/bytecodealliance/wasmtime/issues/7237</a>, right? We are writing to an unaligned address, crossing a page boundary and one of the pages triggers a fault.</p>\n</blockquote>",
        "id": 428320951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711111083
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216#issuecomment-2015005347\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">issue #8216</a>:</p>\n<blockquote>\n<p>If I'm not mistaken this is the same as <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7237\">https://github.com/bytecodealliance/wasmtime/issues/7237</a>, right? We are writing to an unaligned address, crossing a page boundary and one of the pages triggers a fault.</p>\n<p>I'm surprised that it works on AArch64 since that one is also supposed to be affected by this.</p>\n</blockquote>",
        "id": 428321331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711111216
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">issue #8216</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">strategy</span><span class=\"p\">(</span><span class=\"n\">Strategy</span>::<span class=\"n\">Cranelift</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span>::<span class=\"nb\">None</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">    (module</span>\n<span class=\"s\">        (type (;0;) (func (param) (result)))</span>\n<span class=\"s\">        (import \"mem\" \"mem\" (memory (;0;) 1))</span>\n<span class=\"s\">        (func (;0;) (type 0) (param) (result)</span>\n<span class=\"s\">          i32.const 65521</span>\n<span class=\"s\">          v128.const i32x4 0xffffffff 0xffffffff 0xffffffff 0xffffffff</span>\n<span class=\"s\">          v128.store align=1)</span>\n<span class=\"s\">        (export \"main\" (func 0)))</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemoryType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Memory</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory_ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`main` was not an exported function\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Opt level None: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>\n<span class=\"w\">    </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">65521</span><span class=\"o\">..</span><span class=\"mi\">65536</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"{} \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasmtime-wrapper\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n#<span class=\"w\"> </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">keys</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"19.0.0\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../wasmtime/crates/wasmtime\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>#<span class=\"w\"> </span><span class=\"n\">commit</span>: <span class=\"mi\">6</span><span class=\"n\">c5184809db3a92de4ee0c718c403bedc9a9ff4f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">latest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Date</span>:   <span class=\"nc\">Thu</span><span class=\"w\"> </span><span class=\"n\">Mar</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">18</span>:<span class=\"mi\">24</span>:<span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">0700</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to reproduce</h3>\n<p>Compare the following executions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<p>QEMU run options (riscv64) I'm currently using is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">qemu</span><span class=\"o\">-</span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"n\">rv64</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">vlen</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"n\">vext_spec</span><span class=\"o\">=</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">zba</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbc</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zbkb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zcb</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"n\">zicond</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">LD_LIBRARY_PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">riscv64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_TEST_NO_HOG_MEMORY</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">riscv64gc</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">wrapper</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>RISC-V result should not leave side-effect when trapping. By looking at the <a href=\"https://webassembly.github.io/spec/core/exec/instructions.html#t-mathsf-xref-syntax-instructions-syntax-instr-memory-mathsf-store-xref-syntax-instructions-syntax-memarg-mathit-memarg-and-t-mathsf-xref-syntax-instructions-syntax-instr-memory-mathsf-store-n-xref-syntax-instructions-syntax-memarg-mathit-memarg\">spec</a>, we can know that <code>store</code> instruction should check first if the memory address (offset + byte-width) is valid, then perform the memory operation.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x45</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<p>RISC-V leaves memory side-effects when the program traps due to invalid memory address. The PoC code posted above leaves 15 bytes of 255 at the end of the memory. (indices from 65521 to 65535)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Opt</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"nb\">None</span>: <span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x45</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x10000</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"p\">)</span>\n<span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"mi\">255</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li>wasmtime version<ul>\n<li>commit: 6c5184809db3a92de4ee0c718c403bedc9a9ff4f(current latest, Date: Thu Mar 21 18:24:49 2024 -0700)</li>\n<li>However, also checked on v19.0.0</li>\n</ul>\n</li>\n<li>Operating system &amp; architecture: Ubuntu 22.04.3 LTS, Arch: x86_64</li>\n<li>QEMU version: <code>qemu-riscv64 version 8.2.1 (v8.2.1)</code></li>\n</ul>\n<h3>Extra Info</h3>\n<ul>\n<li>Works fine on other architectures (x86_64, aarch64, s390x)</li>\n<li>RISC-V is not the tier 1 platform, so releasing this bug as public (not a security bug)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 428344959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711118521
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216#issuecomment-2015253662\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8216\">issue #8216</a>:</p>\n<blockquote>\n<p>I would agree with @afonso360, but thanks regardless @candymate!</p>\n<p>I'm going to close this in favor of that issue, and I'll also drop a link to <a href=\"https://github.com/WebAssembly/design/issues/1490\">https://github.com/WebAssembly/design/issues/1490</a> which is upstream spec discussion on this topic too.</p>\n</blockquote>",
        "id": 428344962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711118521
    }
]