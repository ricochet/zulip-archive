[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a> from <code>fitzgen:serializable-core-dumps</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit makes it so that the library type for core dumps is serializable into the standard binary format for core dumps.</p>\n<p>Additionally, this commit makes it so that we use the library type for generating core dumps in the CLI. We previously were using a one-off implementation of core dump generation that only had backtrace information and no instances, modules, globals, or memories included. The library type has all that information, so the core dumps produced by our CLI will both be more featureful and be generated by shared code paths going forward.</p>\n<p>Along the way, implementing all this required some new helper methods sprinkled throughout <code>wasmtime</code> and <code>wasmtime-runtime</code>:</p>\n<ul>\n<li>\n<p><code>wasmtime::Instance::module</code>: get the module that a <code>wasmtime::Instance</code> is an instance of. This is public, since it seems generally useful. This involved adding a new return value from <code>ModuleRegistry::register_module</code> that is an identifier that can be used to recover a reference to the registered module.</p>\n</li>\n<li>\n<p><code>wasmtime::Instance::all_{globals,memories}</code>: get the full global/memory index space. I made these <code>pub(crate)</code> out of caution. I don't think we want to commit to exposing non-exported things in the public API, even if we internally need them for debugging-related features like core dumps. These also needed corresponding methods inside <code>wasmtime-runtime</code>.</p>\n</li>\n<li>\n<p><code>wasmtime::{Global,Memory}::hash_key</code>: this was needed to work around the fact that each time you call <code>{Global,Memory}::from_wasmtime</code>, it creates a new entry in the <code>StoreData</code> and so you can get duplicates. But we need to key some hash maps on globals and memories when constructing core dumps, so we can't treat the underlying <code>Stored&lt;T&gt;</code> as a hash key because it isn't stable across duplicate <code>StoreData</code> entries. So we have these new methods. They are only <code>pub(crate)</code>, are definitely implementation details, and aren't exposed in the public API.</p>\n</li>\n<li>\n<p><code>wasmtime::FrameInfo::module</code>: Each frame in a backtrace now keeps a handle to its associated module instead of just the name. This is publicly exposed because it seems generally useful. This means I also deprecated <code>wasmtime::FrameInfo::module_name</code> since you can now instead do <code>frame.module().name()</code> to get that exact same info. I updated callers inside the repo.</p>\n</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 392574336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695405232
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 392574338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695405232
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 392574339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695405232
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 392576384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695406101
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#pullrequestreview-1642356269\">PR review</a>:</p>\n<blockquote>\n<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Mind adding a <code>hash_key</code> to <code>Table</code> for consistency, even though it's not used here? Also mind adding some API tests that <code>hash_key</code> is the same value if, for example, a global is extracted twice?</p>\n<p>Hm as I say this <code>Func</code> doesn't implement <code>hash_key</code> either, so the \"inconsistency\" of tables not implementing it may be ok. Could <code>Func</code> implement it too though?</p>\n</blockquote>",
        "id": 393037981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654251
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#pullrequestreview-1642356269\">PR review</a>:</p>\n<blockquote>\n<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Mind adding a <code>hash_key</code> to <code>Table</code> for consistency, even though it's not used here? Also mind adding some API tests that <code>hash_key</code> is the same value if, for example, a global is extracted twice?</p>\n<p>Hm as I say this <code>Func</code> doesn't implement <code>hash_key</code> either, so the \"inconsistency\" of tables not implementing it may be ok. Could <code>Func</code> implement it too though?</p>\n</blockquote>",
        "id": 393037982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336004003\">PR review comment</a>:</p>\n<blockquote>\n<p>stray change?</p>\n</blockquote>",
        "id": 393037983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336006400\">PR review comment</a>:</p>\n<blockquote>\n<p>I think you should be able to <code>s/&amp;'a self/&amp;self/</code> here</p>\n</blockquote>",
        "id": 393037984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336010961\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW we haven't done this much in the past with <code>#[deprecated]</code> methods so I think it'd be ok to remove this as well.</p>\n</blockquote>",
        "id": 393037985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336021323\">PR review comment</a>:</p>\n<blockquote>\n<p>If you're feeling sufficiently motivated I think the <code>T</code> here could be dropped in theory  but would require some internal refactoring as it seems like it's required or calling public APIs which don't have private equivalents working with <code>StoreOpaque</code></p>\n</blockquote>",
        "id": 393037986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336014635\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this add documentation for what <code>name</code> is?</p>\n</blockquote>",
        "id": 393037987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654252
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#pullrequestreview-1642393006\">PR review</a>.</p>",
        "id": 393038033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695654262
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#pullrequestreview-1642639183\">PR review</a>.</p>",
        "id": 393065997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336168435\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>it seems like it's required or calling public APIs which don't have private equivalents working with <code>StoreOpaque</code></p>\n</blockquote>\n<p>Yeah, this is why the <code>T</code> is propagated. A bit unfortunate, but also something I don't want to deal with at this very moment. I can file a follow up issue.</p>\n</blockquote>",
        "id": 393066002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661332
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#pullrequestreview-1642645129\">PR review</a>.</p>",
        "id": 393066823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661562
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078#discussion_r1336172060\">PR review comment</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7083\">https://github.com/bytecodealliance/wasmtime/issues/7083</a></p>\n</blockquote>",
        "id": 393066828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661562
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393066916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661579
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393066937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661587
    },
    {
        "content": "<p>fitzgen has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393067780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695661841
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393074055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695663830
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393074057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695663830
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393074149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695663850
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393085904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695667798
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393086093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695667852
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393093360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695670203
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393093446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695670226
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393095441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695670943
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7078\">PR #7078</a>.</p>",
        "id": 393110232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695675683
    }
]