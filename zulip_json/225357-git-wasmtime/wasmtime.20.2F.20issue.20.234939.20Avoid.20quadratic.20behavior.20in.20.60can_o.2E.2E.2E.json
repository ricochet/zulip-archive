[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1254070082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>Also, I haven't tested the performance impact of this patch yet, just its correctness. We should try both the cranelift-fuzzgen input from #4931 and @adambratschikaye's example wasm program from #4923. I can't do that until later though.</p>\n<p>Also, we have this new benchmarking infrastructure that we're supposed to be able to trigger from a GitHub comment, right? I don't know how that works yet.</p>\n</blockquote>",
        "id": 300014657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663784571
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1254228925\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>I've been running this in the fuzzer for the past 2 hours, and it hasn't complained so far.</p>\n</blockquote>",
        "id": 300039699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663794446
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1254243131\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>Awesome, thank you @afonso360! I've just pushed some changes to the comments and an additional <code>debug_assert</code> but I don't think that invalidates your fuzzing results.</p>\n<p>I don't know how to explain this more clearly than with these updated comments, so I'm marking this ready for review. I still need to evaluate its performance impact though.</p>\n</blockquote>",
        "id": 300041687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663795451
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1254298891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>Running wasmtime-cli from <code>main</code> on @adambratschikaye's example with <code>cargo build --release --no-default-features --features wasmtime/wat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"mf\">4923.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"mf\">1.55</span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">0</span>:<span class=\"mf\">01.57</span><span class=\"n\">elapsed</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"o\">%</span><span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span><span class=\"w\"> </span><span class=\"mi\">39532</span><span class=\"n\">maxresident</span><span class=\"p\">)</span><span class=\"n\">k</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"n\">inputs</span><span class=\"o\">+</span><span class=\"mi\">24</span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">major</span><span class=\"o\">+</span><span class=\"mi\">13706</span><span class=\"n\">minor</span><span class=\"p\">)</span><span class=\"n\">pagefaults</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">swaps</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Under <code>valgrind --tool=callgrind</code> that executes 25,270,685,419 instructions, with about 98% of the time in <code>use_var</code>, and three-quarters of that hashing keys for the <code>visited</code> hash-map.</p>\n<p>Same test on this branch:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"mf\">4923.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"mf\">0.39</span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">0</span>:<span class=\"mf\">00.41</span><span class=\"n\">elapsed</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"o\">%</span><span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span><span class=\"w\"> </span><span class=\"mi\">39744</span><span class=\"n\">maxresident</span><span class=\"p\">)</span><span class=\"n\">k</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"n\">inputs</span><span class=\"o\">+</span><span class=\"mi\">24</span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"n\">major</span><span class=\"o\">+</span><span class=\"mi\">13731</span><span class=\"n\">minor</span><span class=\"p\">)</span><span class=\"n\">pagefaults</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">swaps</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Only 2,803,649,669 instructions according to callgrind, but about 80% of that is in the new <code>update_predecessor_cycle</code> function.</p>\n<p>So this branch takes 11% as many instructions and 25% of the user time on that example.</p>\n</blockquote>",
        "id": 300049240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663799451
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1254873211\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>Thanks for handling this @jameysharp!</p>\n</blockquote>",
        "id": 300122739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663844927
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1255601291\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>Sure thing, @adambratschikaye; thanks for pointing out the issue!</p>\n<p>Okay, I think it was not a coincidence that 75% of the time on <code>main</code> was spent in hash-table operations, and my changes cut compile time by 75%. On the test case from #4923, both <code>use_var</code> and <code>declare_block_predecessor</code> are called the same number of times, and in some sense all I did was move the graph traversal from one to the other. So the entire difference is that on <code>main</code> this uses a <code>HashSet</code>, but with my PR it's indexing directly into a vector. Replacing the <code>HashSet</code> with a <code>SecondaryMap</code>, without adding any memoization, should have the same effect for this particular test case.</p>\n<p>I suspect real programs average more than one call to <code>use_var</code> per block, so I think this is still a good idea, but yesterday @cfallin suggested there might be a way to speed this check up for blocks that are sealed, so I've been playing with that. Turns out, it was a good idea.</p>\n<p>When compiling our <code>pulldown-cmark</code> benchmark from Sightglass, this saves about 50 million instructions, or about 3% of the total, according to callgrind. So I think this is a measurable improvement to real-world performance.</p>\n<p>As for the original test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"mf\">4923.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"mf\">0.03</span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.03</span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">0</span>:<span class=\"mf\">00.06</span><span class=\"n\">elapsed</span><span class=\"w\"> </span><span class=\"mi\">104</span><span class=\"o\">%</span><span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">avgtext</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">avgdata</span><span class=\"w\"> </span><span class=\"mi\">39644</span><span class=\"n\">maxresident</span><span class=\"p\">)</span><span class=\"n\">k</span><span class=\"w\"></span>\n<span class=\"mi\">0</span><span class=\"n\">inputs</span><span class=\"o\">+</span><span class=\"mi\">24</span><span class=\"n\">outputs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">major</span><span class=\"o\">+</span><span class=\"mi\">13739</span><span class=\"n\">minor</span><span class=\"p\">)</span><span class=\"n\">pagefaults</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">swaps</span><span class=\"w\"></span>\n</code></pre></div>\n<p>According to callgrind, this took 554,072,900 instructions.</p>\n<p>Taking sealed blocks into account eliminates 98% of the compile time on this test case, both in terms of user time and instruction count, compared with <code>main</code>. And at this point <code>use_var_nonlocal</code> plus <code>update_predecessor_cycle</code> take 0.29% of total runtime, so on this test there probably isn't any more performance to extract here.</p>\n<p>Let's see if this works this time:<br>\n/bench_x64</p>\n</blockquote>",
        "id": 300252470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663884186
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939#issuecomment-1256399923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4939\">issue #4939</a>:</p>\n<blockquote>\n<p>I finally ran Sightglass myself and this is a measurable improvement on real programs:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">49281270.08</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">21356907.03</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.09</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.22</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">233253012</span><span class=\"w\"> </span><span class=\"mf\">368287922.00</span><span class=\"w\"> </span><span class=\"mi\">470539364</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">226078864</span><span class=\"w\"> </span><span class=\"mf\">319006651.92</span><span class=\"w\"> </span><span class=\"mi\">393048464</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">995084992.10</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">398195457.23</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.07</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.17</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8794947694</span><span class=\"w\"> </span><span class=\"mf\">8985953112.82</span><span class=\"w\"> </span><span class=\"mi\">9227174380</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">5097575234</span><span class=\"w\"> </span><span class=\"mf\">7990868120.72</span><span class=\"w\"> </span><span class=\"mi\">9268837322</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n\n<span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7813047.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">7010542.19</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.09</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">161067634</span><span class=\"w\"> </span><span class=\"mf\">176419598.60</span><span class=\"w\"> </span><span class=\"mi\">253954244</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">b2d13ebd4</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">122513560</span><span class=\"w\"> </span><span class=\"mf\">168606551.20</span><span class=\"w\"> </span><span class=\"mi\">271954282</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">quadratic</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">c0a6c74f</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 300400956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663949234
    }
]