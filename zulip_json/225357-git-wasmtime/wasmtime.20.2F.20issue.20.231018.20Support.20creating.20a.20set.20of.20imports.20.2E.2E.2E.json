[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1018#issuecomment-859159257\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1018\">issue #1018</a>:</p>\n<blockquote>\n<p>This was fixed in the <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">recently redesigned API</a></p>\n</blockquote>",
        "id": 242285754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623368930
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1018\">issue #1018</a>:</p>\n<blockquote>\n<p>One thing the current <code>wasmtime::Func</code> API isn't great at is sometimes (for example with WASI) you want to create a set of functions that all share the same piece of state. Sort of like a trait that has a bunch of functions on it. This is possible today but it involves manually creating a lot of <code>Func</code> instances and explicitly using <code>Rc</code> to share state between each import. </p>\n<p>It'd be nicer if we could explore possibly alternative ways of doing this. For example if we had like a <code>FuncBuilder&lt;T&gt;</code> where you passed it <code>Fn(&amp;T, Args...) -&gt; R</code> and it handed back a <code>Func</code>. That might make it easier to have shared state amongst a set of functions without having to manually deal with all the clunky <code>Rc</code> allocations.</p>\n<p>To be clear I think this is basically about expressiveness, I believe everything should already be possible that needs to get done today. This may be more optimizable by the API as well, but we'd have to measure!</p>\n</blockquote>",
        "id": 242285755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623368930
    }
]