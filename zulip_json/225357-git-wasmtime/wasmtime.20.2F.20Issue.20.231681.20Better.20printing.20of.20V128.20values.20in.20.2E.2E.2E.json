[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1681\">Issue #1681</a>:</p>\n<blockquote>\n<p>When troubleshooting WAST test failures, it is difficult to determine what is different between the expected V128 pattern (e.g. <code>[0, 1, 2...]</code>) and the giant integer contained in <code>Val::V128</code>. I attempted a solution to this in #1650 that changed the internal Rust representation of V128 values from <code>u128</code> to <code>[u8; 16]</code>. Though this worked and all tests passed, it was only a partial solution: with <code>[u8; 16]</code> it was visually easier to troubleshoot which lanes were incorrect but it didn't exactly match the output of, e.g., an i32x4 vector.</p>\n<p>To fully resolve this, we need to either manually implement <code>Debug</code> for <code>Val</code> or add a <code>ValDisplay</code> struct to:</p>\n<ul>\n<li>print V128 values as hexadecimal (and do the same with the expected side in <code>wast.rs</code>)</li>\n<li>or use the variants of <code>V128Pattern</code> to parse and display the <code>Val::V128</code> to match the <code>V128Pattern</code> lanes/types.</li>\n</ul>\n</blockquote>",
        "id": 197202438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589229938
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1681\">Issue #1681</a>:</p>\n<blockquote>\n<p>When troubleshooting WAST test failures, it is difficult to determine what is different between the expected V128 pattern (e.g. <code>[0, 1, 2...]</code>) and the giant integer contained in <code>Val::V128</code>. I attempted a solution to this in #1650 that changed the internal Rust representation of V128 values from <code>u128</code> to <code>[u8; 16]</code>. Though this worked and all tests passed, it was only a partial solution: with <code>[u8; 16]</code> it was visually easier to troubleshoot which lanes were incorrect but it didn't exactly match the output of, e.g., an i32x4 vector.</p>\n<p>To fully resolve this, we need to either manually implement <code>Debug</code> for <code>Val</code> or add a <code>ValDisplay</code> struct to:</p>\n<ul>\n<li>print V128 values as hexadecimal (and do the same with the expected side in <code>wast.rs</code>)</li>\n<li>or use the variants of <code>V128Pattern</code> to parse and display the <code>Val::V128</code> to match the <code>V128Pattern</code> lanes/types.</li>\n</ul>\n</blockquote>",
        "id": 218900718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607121887
    }
]