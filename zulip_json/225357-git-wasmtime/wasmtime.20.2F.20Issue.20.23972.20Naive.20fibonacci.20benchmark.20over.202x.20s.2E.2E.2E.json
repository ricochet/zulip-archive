[
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603854000\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603854000\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>@alexcrichton @rene-fonseca did you guys manage to work out what the cause of the overhead is?</p>\n</blockquote>",
        "id": 191748110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585144646
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603857476\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603857476\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>No there hasn't been any discussion about the generated code itself. Using <code>--jitdump</code>, though, I've extracted both the rustc version of the compiled <code>fib</code> function as well as the cranelift-compiled version:</p>\n<p><a href=\"https://gist.github.com/alexcrichton/6d80d25ee6f64857c3388e130dad22ed\" title=\"https://gist.github.com/alexcrichton/6d80d25ee6f64857c3388e130dad22ed\">https://gist.github.com/alexcrichton/6d80d25ee6f64857c3388e130dad22ed</a></p>\n</blockquote>",
        "id": 191749132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585145037
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603868359\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-603868359\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>There seems to be more spilling and more register-register moves in the Cranelift version. The work on a new regalloc may help with this.</p>\n</blockquote>",
        "id": 191752243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585146265
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-605103237\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-605103237\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\" title=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>Not sure how useful this will be but I've done some more benchmarks including re-running fibonacci stripped of all recursion (sources and some numbers available at <a href=\"https://github.com/kubkon/wasmtime-bench\" title=\"https://github.com/kubkon/wasmtime-bench\">github.com/kubkon/wasmtime-bench</a>). In that particular case, there is a massive speedup. Nonetheless, Cranelift still incurs 2x overhead as seen in a more complicated mandelbrot example.</p>\n</blockquote>",
        "id": 192046218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585327473
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-772809587\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>How is the performance with the new x64 backend?</p>\n</blockquote>",
        "id": 225078363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612384985
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972#issuecomment-772814406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>This is somewhat outdated; closing in favor of our upcoming more general perf-tracking efforts (<a href=\"https://github.com/bytecodealliance/rfcs/issues/3\">bytecodealliance/rfcs#3</a> and <a href=\"https://github.com/bytecodealliance/rfcs/issues/4\">bytecodealliance/rfcs#4</a>).</p>\n</blockquote>",
        "id": 225079476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385479
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/972\">Issue #972</a>:</p>\n<blockquote>\n<p>While a pretty awful benchmark \"in the large\" I was surprised playing around locally how the naive fibonacci program was so slow relative to native performance. Especially because fibonacci benchmarks don't touch linear memory much, this may at least be a decent benchmark of cranelift and/or the code generator in use.</p>\n<p>Given an input file like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>native execution looks like (for me at least)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"w\">  </span><span class=\"mf\">0.90</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.902</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Whereas the wasm execution looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"k\">crate</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"nc\">cdylib</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">701408733</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\">  </span><span class=\"mf\">2.20</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.02</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">104</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">2.123</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the wasm is over 2x slower than native, which was a bit surprising to me!</p>\n<p>Some other reference information below is...</p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;Native assembly for the <code>fib</code> function&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000004</span><span class=\"n\">d40</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_ZN3fib3fib17h2bacf53cb3845acfE</span><span class=\"o\">&gt;</span>:\n    <span class=\"mi\">4</span><span class=\"n\">d40</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d41</span>:   <span class=\"mi\">53</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d42</span>:   <span class=\"mi\">50</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d43</span>:   <span class=\"nc\">bd</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d48</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\">                </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x2</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d4b</span>:   <span class=\"mi\">72</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"w\">                   </span><span class=\"n\">jb</span><span class=\"w\">     </span><span class=\"mi\">4</span><span class=\"n\">d72</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_ZN3fib3fib17h2bacf53cb3845acfE</span><span class=\"o\">+</span><span class=\"mh\">0x32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d4d</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">fb</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d4f</span>:   <span class=\"nc\">bd</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d54</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">nopw</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">cs</span>:<span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d5b</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d5e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">90</span><span class=\"w\">                   </span><span class=\"n\">xchg</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">ax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d60</span>:   <span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">lea</span><span class=\"w\">    </span><span class=\"o\">-</span><span class=\"mh\">0x1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d63</span>:   <span class=\"nc\">e8</span><span class=\"w\"> </span><span class=\"n\">d8</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">          </span><span class=\"n\">callq</span><span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"n\">d40</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_ZN3fib3fib17h2bacf53cb3845acfE</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d68</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\"> </span><span class=\"n\">fe</span><span class=\"w\">                </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0xfffffffe</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d6b</span>:   <span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"n\">c5</span><span class=\"w\">                   </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d6d</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">fb</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">                </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ebx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d70</span>:   <span class=\"mi\">77</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">                   </span><span class=\"n\">ja</span><span class=\"w\">     </span><span class=\"mi\">4</span><span class=\"n\">d60</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_ZN3fib3fib17h2bacf53cb3845acfE</span><span class=\"o\">+</span><span class=\"mh\">0x20</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d72</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e8</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">ebp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d74</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">08</span><span class=\"w\">             </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d78</span>:   <span class=\"mi\">5</span><span class=\"n\">b</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d79</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d7a</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"n\">d7b</span>:   <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">nopl</span><span class=\"w\">   </span><span class=\"mh\">0x0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;</p>\n<p>&lt;summary&gt;WebAssembly of the <code>fib</code> function&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN3fib3fib17hedcc9d2af68c6e00E</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">block</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">lt_u</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">br_if</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">loop</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$_ZN3fib3fib17hedcc9d2af68c6e00E</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">tee</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">gt_u</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">br_if</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>At this time I don't know of a great way to get out the assembly generated by cranelift unfortunately, but I'm hoping others may know of an easy way to do so!<br>\n</p>\n</blockquote>",
        "id": 225079477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385479
    }
]