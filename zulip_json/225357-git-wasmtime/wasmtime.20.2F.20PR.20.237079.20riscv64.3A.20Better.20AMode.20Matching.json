[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079\">PR #7079</a> from <code>afonso360:riscv-sp-load-store</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR improves our AMode matching logic. In RISC-V we don't have very fancy addressing modes, it's pretty much Reg + Offset. </p>\n<p>One of the issues with the current lowerings is that we never feed the <code>sp</code> register into a load or store, even if it is based on a <code>stack_addr</code>. This is because the regular <code>stack_addr</code> lowering moves the address into a normal register. We now directly match the <code>stack_addr</code> as part of the amode computation so that we can perform those loads directly from the stack pointer and without an intermediary register.</p>\n<p>Another improvement that this PR makes is that we now match an <code>iadd+iconst</code> and move that into the offset field for the load or store.</p>\n<p>The main motivation for this is that we have some stack pointer based load and store instructions in the C extension that very rarely match because we never do loads or stores directly based on the stack pointer.</p>\n</blockquote>",
        "id": 392723138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695488969
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079\">PR #7079</a>.</p>",
        "id": 392723140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695488970
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079\">PR #7079</a>.</p>",
        "id": 392723141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695488970
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079#pullrequestreview-1641003483\">PR review</a>:</p>\n<blockquote>\n<p>Looks good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>One suggestion I might have, orthogonal to this PR, is to move towards pushing the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4ba8b6c0d99d258aa0a4ed4ee7c687fcddae6c8e/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L1377-L1437\"><code>LoadAddr</code> emit logic</a> into ISLE itself. In theory it should be possible to push most of that into the <code>amode_inner</code> constructor you've added here and, ideally, remove <code>LoadAddr</code> entirely. Personally I've found pushing logic into ISLE as \"here's all the tricky architecture-specific bits\" works pretty well, although I realize much of this code here likely predates ISLE so this is mostly just a suggestion on a possible direction for the future.</p>\n</blockquote>",
        "id": 392785131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695535234
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079\">PR #7079</a>.</p>",
        "id": 392789074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695538215
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7079#pullrequestreview-1642871062\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 393095005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695670777
    }
]