[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992\">PR #1992</a> from <code>InstSize</code> to <code>main</code>:</p>\n<blockquote>\n<p>As discussed in #1748, the main issue with the <code>InstSize</code> enum was that it was used both for GPR and SIMD &amp; FP operands, even though machine instructions do not mix them in general (as in a destination register is either a GPR or not). As a result it had methods such as <code>sf_bit()</code> that made sense only for one type of operand.</p>\n<p>Another issue was that the enum name was not reflecting its purpose accurately - it was meant to represent an instruction operand size, not an instruction size, which is fixed in A64 (always 4 bytes).</p>\n<p>Now the enum is split into one for GPR operands and another for scalar SIMD &amp; FP operands.</p>\n</blockquote>",
        "id": 203255193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594206816
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992\">PR #1992</a> from <code>InstSize</code> to <code>main</code>:</p>\n<blockquote>\n<p>As discussed in #1748, the main issue with the <code>InstSize</code> enum was that it was used both for GPR and SIMD &amp; FP operands, even though machine instructions do not mix them in general (as in a destination register is either a GPR or not). As a result it had methods such as <code>sf_bit()</code> that made sense only for one type of operand.</p>\n<p>Another issue was that the enum name was not reflecting its purpose accurately - it was meant to represent an instruction operand size, not an instruction size, which is fixed in A64 (always 4 bytes).</p>\n<p>Now the enum is split into one for GPR operands and another for scalar SIMD &amp; FP operands.</p>\n</blockquote>",
        "id": 203257705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594208748
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#pullrequestreview-447411680\">PR Review</a>.</p>",
        "id": 203746988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594662729
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#pullrequestreview-447411680\">PR Review</a>.</p>",
        "id": 203746989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594662729
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#discussion_r453776742\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps use a <code>match</code> here, and panic if <code>bits</code> isn't exactly 8 / 16 / 32 / 64 / 128? I'm not sure what it would mean to have (e.g.) a 24-bit scalar...</p>\n</blockquote>",
        "id": 203746991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594662729
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#discussion_r453777139\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Doc-comment here indicating that it returns encoding bits</p>\n</blockquote>",
        "id": 203746992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594662729
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992\">PR #1992</a> from <code>InstSize</code> to <code>main</code>:</p>\n<blockquote>\n<p>As discussed in #1748, the main issue with the <code>InstSize</code> enum was that it was used both for GPR and SIMD &amp; FP operands, even though machine instructions do not mix them in general (as in a destination register is either a GPR or not). As a result it had methods such as <code>sf_bit()</code> that made sense only for one type of operand.</p>\n<p>Another issue was that the enum name was not reflecting its purpose accurately - it was meant to represent an instruction operand size, not an instruction size, which is fixed in A64 (always 4 bytes).</p>\n<p>Now the enum is split into one for GPR operands and another for scalar SIMD &amp; FP operands.</p>\n</blockquote>",
        "id": 203838478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594736285
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#pullrequestreview-448153195\">PR Review</a>.</p>",
        "id": 203838733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594736439
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992#discussion_r454392256\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This just mirrors the original logic in <code>InstSize</code>. Anyway, I figured out a way to express it succinctly.</p>\n</blockquote>",
        "id": 203838734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594736439
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1992\">PR #1992</a>.</p>",
        "id": 203851307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594742330
    }
]