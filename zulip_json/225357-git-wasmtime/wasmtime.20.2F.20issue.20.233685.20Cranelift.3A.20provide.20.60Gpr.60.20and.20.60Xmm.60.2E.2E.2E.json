[
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>We've talked a bit</p>\n<ul>\n<li>about leveraging types better during lowering to make it easier to statically catch bugs (and help verification efforts) and</li>\n<li>differentiating between plain ol' moves and register-class-converting moves.</li>\n</ul>\n<p>I think adding newtype wrappers around <code>Reg</code> for general purpose registers vs XMM registers, etc... would help both these things a lot. Basically every register class should have its own newtype wrapper.</p>\n<p>I'm spending too much time debugging dynamic errors where I'm accidentally implicitly moving between register classes (either via mov mitosis or otherwise) and it would be way easier to fix this kind of thing if it was a compile time type error that specified exactly where in the sources I'm doing the wrong thing.</p>\n</blockquote>",
        "id": 267797938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642027581
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>We've talked a bit</p>\n<ul>\n<li>about leveraging types better during lowering to make it easier to statically catch bugs (and help verification efforts) and</li>\n<li>differentiating between plain ol' moves and register-class-converting moves.</li>\n</ul>\n<p>I think adding newtype wrappers around <code>Reg</code> for general purpose registers vs XMM registers, etc... would help both these things a lot. Basically every register class should have its own newtype wrapper.</p>\n<p>I'm spending too much time debugging dynamic errors where I'm accidentally implicitly moving between register classes (either via mov mitosis or otherwise) and it would be way easier to fix this kind of thing if it was a compile time type error that specified exactly where in the sources I'm doing the wrong thing.</p>\n</blockquote>",
        "id": 267797939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642027581
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685#issuecomment-1034076560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>I believe this was implemented in #3752, so closing.</p>\n</blockquote>",
        "id": 271327118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644431948
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>We've talked a bit</p>\n<ul>\n<li>about leveraging types better during lowering to make it easier to statically catch bugs (and help verification efforts) and</li>\n<li>differentiating between plain ol' moves and register-class-converting moves.</li>\n</ul>\n<p>I think adding newtype wrappers around <code>Reg</code> for general purpose registers vs XMM registers, etc... would help both these things a lot. Basically every register class should have its own newtype wrapper.</p>\n<p>I'm spending too much time debugging dynamic errors where I'm accidentally implicitly moving between register classes (either via mov mitosis or otherwise) and it would be way easier to fix this kind of thing if it was a compile time type error that specified exactly where in the sources I'm doing the wrong thing.</p>\n</blockquote>",
        "id": 271327119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644431949
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685#issuecomment-1034146993\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>This isn't complete yet, #3752 was just the first half. I'll have a PR up for the other half sometime soon ish.</p>\n</blockquote>",
        "id": 271339853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644437191
    },
    {
        "content": "<p>fitzgen reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>We've talked a bit</p>\n<ul>\n<li>about leveraging types better during lowering to make it easier to statically catch bugs (and help verification efforts) and</li>\n<li>differentiating between plain ol' moves and register-class-converting moves.</li>\n</ul>\n<p>I think adding newtype wrappers around <code>Reg</code> for general purpose registers vs XMM registers, etc... would help both these things a lot. Basically every register class should have its own newtype wrapper.</p>\n<p>I'm spending too much time debugging dynamic errors where I'm accidentally implicitly moving between register classes (either via mov mitosis or otherwise) and it would be way easier to fix this kind of thing if it was a compile time type error that specified exactly where in the sources I'm doing the wrong thing.</p>\n</blockquote>",
        "id": 271339862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644437196
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3685\">issue #3685</a>:</p>\n<blockquote>\n<p>We've talked a bit</p>\n<ul>\n<li>about leveraging types better during lowering to make it easier to statically catch bugs (and help verification efforts) and</li>\n<li>differentiating between plain ol' moves and register-class-converting moves.</li>\n</ul>\n<p>I think adding newtype wrappers around <code>Reg</code> for general purpose registers vs XMM registers, etc... would help both these things a lot. Basically every register class should have its own newtype wrapper.</p>\n<p>I'm spending too much time debugging dynamic errors where I'm accidentally implicitly moving between register classes (either via mov mitosis or otherwise) and it would be way easier to fix this kind of thing if it was a compile time type error that specified exactly where in the sources I'm doing the wrong thing.</p>\n</blockquote>",
        "id": 271886851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644872082
    }
]