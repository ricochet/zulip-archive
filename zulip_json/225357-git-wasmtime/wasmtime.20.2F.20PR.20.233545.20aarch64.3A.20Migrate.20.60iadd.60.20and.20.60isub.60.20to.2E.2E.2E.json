[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">PR #3545</a> from <code>arm64-iadd-isub-isle</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is the first \"meaty\" instruction added to ISLE for the<br>\nAArch64 backend. I chose to pick the first two in the current lowering's<br>\n<code>match</code> statement, <code>isub</code> and <code>iadd</code>. These two turned out to be<br>\nparticularly interesting for a few reasons:</p>\n<ul>\n<li>\n<p>Both had clearly migratable-to-ISLE behavior along the lines of<br>\n  special-casing per type. For example 128-bit and vector arithmetic<br>\n  were both easily translateable.</p>\n</li>\n<li>\n<p>The <code>iadd</code> instruction has special cases for fusing with a<br>\n  multiplication to generate <code>madd</code> which is expressed pretty easily in<br>\n  ISLE.</p>\n</li>\n<li>\n<p>Otherwise both instructions had a number of forms where they attempted<br>\n  to interpret the RHS as various forms of constants, extends, or<br>\n  shifts. There's a bit of a design space of how best to represent this<br>\n  in ISLE and what I settled on was to have a special case for each form<br>\n  of instruction, and the special cases are somewhat duplicated between<br>\n<code>iadd</code> and <code>isub</code>. There's custom \"extractors\" for the special cases<br>\n  and instructions that support these special cases will have an<br>\n<code>rule</code>-per-case.</p>\n</li>\n</ul>\n<p>Overall I think the ISLE transitioned pretty well. I don't think that<br>\nthe aarch64 backend is going to follow the x64 backend super closely,<br>\nthough. For example the x64 backend is having a helper-per-instruction<br>\nat the moment but with AArch64 it seems to make more sense to only have<br>\na helper-per-enum-variant-of-<code>MInst</code>. This is because the same<br>\ninstruction (e.g. <code>ALUOp::Sub32</code>) can be expressed with multiple<br>\ndifferent forms depending on the payload.</p>\n<p>It's worth noting that the ISLE looks like it's a good deal larger than<br>\nthe code actually being removed from lowering as part of this commit. I<br>\nthink this is deceptive though because a lot of the logic in<br>\n<code>put_input_in_rse_imm12_maybe_negated</code> and <code>alu_inst_imm12</code> is being<br>\ninlined into the ISLE definitions for each instruction instead of having<br>\nit all packed into the helper functions. Some of the \"boilerplate\" here<br>\nis the addition of various ISLE utilities as well.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 261953938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637253874
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">PR #3545</a> from <code>arm64-iadd-isub-isle</code> to <code>main</code>.</p>",
        "id": 261961366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637256752
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#pullrequestreview-810311699\">PR review</a>.</p>",
        "id": 261975593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#pullrequestreview-810311699\">PR review</a>.</p>",
        "id": 261975595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r752546876\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this using flags to pass the carried bit from the <code>add</code> to the <code>adc</code>? If so, then we should have something similar to <code>WithFlags</code> in the x86 ISLE to use the type system to ensure that flags-producing instructions and flags-consuming instructions are always paired together, and can't accidentally be divided by another instruction that clobbers the flags.</p>\n</blockquote>",
        "id": 261975596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r752543021\">PR review comment</a>:</p>\n<blockquote>\n<p>Not adding the commutative cases yet? I don't think we need to port only exactly the existing lowerings, and then add new lowerings at some indeterminate time in the future. I think it is fine to add new optimizations/rules as we port things to ISLE.</p>\n</blockquote>",
        "id": 261975598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r752521011\">PR review comment</a>:</p>\n<blockquote>\n<p>Capitalization and punctuation? Sorry! </p>\n</blockquote>",
        "id": 261975599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r752547494\">PR review comment</a>:</p>\n<blockquote>\n<p>Ditto here.</p>\n</blockquote>",
        "id": 261975600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r752544289\">PR review comment</a>:</p>\n<blockquote>\n<p>Although I see you did handle commutativity here. Might as well do it for the rest of the <code>iadd</code> lowerings too.</p>\n</blockquote>",
        "id": 261975602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637262859
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">PR #3545</a> from <code>arm64-iadd-isub-isle</code> to <code>main</code>.</p>",
        "id": 262078254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637334519
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#pullrequestreview-811519222\">PR review</a>.</p>",
        "id": 262105418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637345293
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545\">PR #3545</a>.</p>",
        "id": 262105430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637345300
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#pullrequestreview-815194492\">PR review</a>.</p>",
        "id": 262616804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637774031
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r756284757\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry for not catching this earlier -- I just noticed this while reading through the ISLE while having the language semantics in mind: this combination of rules depends on the more-specific-before-less behavior, and will give incorrect codegen if the latter rule is used when the former could apply, no?</p>\n<p>The intention in the language design at least was that the order of rule selection is a heuristic that <em>should</em> go more-specific-first, for better perf/isel results, but doesn't <em>have to</em>. Specifically (i) it's somewhat brittle to depend on a subtle heuristic when patterns only have a partial ordering (here one of them is clearly more specific than the other, but it's possible to write two patterns with \"unordered specific-ness\" wrt each other), and (ii) we have some testing ideas related to randomly permuting the rewrite path we take to test if the generated code is still valid.</p>\n<p>Another way of seeing the problem is that when we get to verifying lowerings formally, the rule here for the 64-bit case basically says \"<code>iadd_op</code> for any type can always give <code>Add64</code>\". Each rule standing on its own should have verifiable semantics; we shouldn't have to implicitly depend on this rule not firing in some cases because of other rules.</p>\n<p>The priority mechanism on the other hand <em>is</em> solid load-bearing core-language-semantics stuff, so I think one solution here is to use explicit priorities. I'd actually prefer a slightly different solution though, which is to have another extractor <code>(larger_than_32 ty)</code>; that makes the intent super-clear. Thoughts?</p>\n</blockquote>",
        "id": 262616805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637774031
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#pullrequestreview-815202723\">PR review</a>.</p>",
        "id": 262617628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637774474
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3545#discussion_r756290988\">PR review comment</a>:</p>\n<blockquote>\n<p>(I also recognize this is a bit of a footgun that didn't come with sharp warnings, so apologies for that! In a future where we have formal verification of lowerings, or where we have rule-order fuzzing, this would've been caught fairly quickly at least...)</p>\n</blockquote>",
        "id": 262617629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637774474
    }
]