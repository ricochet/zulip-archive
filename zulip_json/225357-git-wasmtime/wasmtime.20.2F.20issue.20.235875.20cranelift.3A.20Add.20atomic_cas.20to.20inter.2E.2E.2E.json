[
    {
        "content": "<p>jan-justin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1443811030\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>Happy to help <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>Sure thing. I shall add it to the relevant test files.</p>\n<p>As for further help on the interpreter, I am still learning to walk with Rust and grokking the project as a whole. I am, however, very keen to contribute so point me in the right direction and I will help out anyway I can <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>.</p>\n</blockquote>",
        "id": 336505518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677250934
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1443867979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>Awesome! <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> </p>\n<p>I'm not 100% sure exactly what we are missing as far as SIMD goes since I haven't worked on that part in a while. </p>\n<ul>\n<li>We have some special instructions that load SIMD values from memory and build a vector such as <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.sload32x2\"><code>sload32x2</code></a>. I know those are missing an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7d790fcdfeff4566678c56e5072e37bbc061a6c3/cranelift/interpreter/src/step.rs#L428-L433\">implementation in the interpreter</a>.</li>\n<li>I just noticed we don't implement <code>is_null</code>/<code>is_invalid</code>/<code>null</code>, those are fairly easy scalar instructions, with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/ref64-invalid-null.clif\">pre existing tests</a>.</li>\n<li>A good exercise would be to go through the <code>simd-*</code> runtests and see which ones are missing the <code>test interpret</code> annotation, I'm betting a lot of those are already working but we forgot to enable the tests!<ul>\n<li>And if they are broken we can fix them!</li>\n</ul>\n</li>\n<li>And finally a while ago I did a roundup of what was <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4889\">missing in the interpreter</a>, It a bit out of date, but it might help!</li>\n</ul>\n</blockquote>",
        "id": 336515743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677253276
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1443867979\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>Awesome! <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> </p>\n<p>I'm not 100% sure exactly what we are missing as far as SIMD goes since I haven't worked on that part in a while. </p>\n<ul>\n<li>We have some special instructions that load SIMD values from memory and build a vector such as <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.sload32x2\"><code>sload32x2</code></a>. I know those are missing an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7d790fcdfeff4566678c56e5072e37bbc061a6c3/cranelift/interpreter/src/step.rs#L428-L433\">implementation in the interpreter</a>.</li>\n<li>I just noticed we don't implement <code>is_null</code>/<code>is_invalid</code>/<code>null</code>, those are fairly easy scalar instructions, with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/ref64-invalid-null.clif\">pre existing tests</a>.</li>\n<li>A good exercise would be to go through the <code>simd-*</code> runtests and see which ones are missing the <code>test interpret</code> annotation, I'm betting a lot of those are already working but we forgot to enable the tests!<ul>\n<li>And if they are broken we can fix them!</li>\n</ul>\n</li>\n<li>And finally a while ago I did a roundup of what was <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4889\">missing in the interpreter</a>, It's a bit out of date, but it might help!</li>\n</ul>\n</blockquote>",
        "id": 336515876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677253314
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1445063853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>It looks like <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/4263877447/jobs/7421191891#step:15:900\">CI failed on s390x</a> that's our only big-endian architecture, that's probably why its difficult to reproduce this issue locally.</p>\n<p>I looked into this and it looks like that the way those tests are written, they <em>depend</em> on the interpreter being able to recognize the <code>little</code> &amp; <code>big</code> flags on stores and loads to pass.</p>\n<p>That is an issue because the interpreter just understands <code>native</code> endianness, so <code>little</code> is okay on <code>x86</code> but <code>big</code> isn't. And vice versa on <code>s390x</code> <code>big</code> is okay, but <code>little</code> isn't.</p>\n<p>I think for now It's okay to revert that change and make those tests not run on the interpreter. I didn't expect this would be a big issue for the little endian tests, but it makes sense that they would fail too!</p>\n</blockquote>",
        "id": 337985719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677325865
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1445063853\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>It looks like <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/4263877447/jobs/7421191891#step:15:900\">CI failed on s390x</a> that's our only big-endian architecture, that's probably why its difficult to reproduce this issue locally.</p>\n<p>I looked into this and it looks like that the way those tests are written, they <em>depend</em> on the interpreter being able to recognize the <code>little</code> &amp; <code>big</code> flags on stores and loads to pass.</p>\n<p>That is an issue because the interpreter just understands <code>native</code> endianness, so <code>little</code> is okay on <code>x86</code> but <code>big</code> isn't. And vice versa on <code>s390x</code> <code>big</code> is okay, but <code>little</code> isn't.</p>\n<p>I think for now It's okay to revert that change and make the <code>subword</code> tests not run on the interpreter. I didn't expect this would be a big issue for the little endian tests, but it makes sense that they would fail too!</p>\n</blockquote>",
        "id": 337985786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677325895
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1445063853\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>It looks like <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/4263877447/jobs/7421191891#step:15:900\">CI failed on s390x</a> that's our only big-endian architecture, that's probably why its difficult to reproduce this issue locally.</p>\n<p>I looked into this and it looks like that the way those tests are written, they <em>depend</em> on the interpreter being able to recognize the <code>little</code> &amp; <code>big</code> flags on stores and loads to pass.</p>\n<p>That is an issue because the interpreter just understands <code>native</code> endianness, so <code>little</code> is okay on <code>x86</code> but <code>big</code> isn't. And vice versa on <code>s390x</code> <code>big</code> is okay, but <code>little</code> isn't.</p>\n<p>I think for now It's okay to revert that change and make the <code>subword</code> tests not run on the interpreter. I didn't expect this would be a big issue for the little endian tests, but it makes sense that they would fail too!</p>\n<p>Edit: Just opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5881\">https://github.com/bytecodealliance/wasmtime/issues/5881</a> which addresses this ^</p>\n</blockquote>",
        "id": 337987426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677326515
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1445063853\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>It looks like <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/4263877447/jobs/7421191891#step:15:900\">CI failed on s390x</a> that's our only big-endian architecture, that's probably why its difficult to reproduce this issue locally.</p>\n<p>I looked into this and it looks like that the way those tests are written, they <em>depend</em> on the interpreter being able to recognize the <code>little</code> &amp; <code>big</code> flags on stores and loads to pass.</p>\n<p>That is an issue because the interpreter just understands <code>native</code> endianness, so <code>little</code> is okay on <code>x86</code> but <code>big</code> isn't. And vice versa on <code>s390x</code> <code>big</code> is okay, but <code>little</code> isn't.</p>\n<p>I think for now It's okay to revert that change and make the <code>subword</code> tests not run on the interpreter. I didn't expect this would be a big issue for the little endian tests, but it makes sense that they would fail too!</p>\n<hr>\n<p>Edit: Just opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5881\">https://github.com/bytecodealliance/wasmtime/issues/5881</a> which addresses this ^</p>\n</blockquote>",
        "id": 337987489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677326528
    },
    {
        "content": "<p>jan-justin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875#issuecomment-1445125030\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5875\">issue #5875</a>:</p>\n<blockquote>\n<p>I see, thanks for the explanation.</p>\n<p>I will revert the changes and look into the issue you opened separately.</p>\n<p>As for the remaining work on the interpreter, I shall reach out to you when the time is right.</p>\n</blockquote>",
        "id": 338005315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677333231
    }
]