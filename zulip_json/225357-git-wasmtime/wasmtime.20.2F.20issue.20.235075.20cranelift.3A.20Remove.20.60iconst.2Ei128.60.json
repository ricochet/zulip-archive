[
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1284129886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>Hmm, I think something is still not quite right with bugpoint, it produces the correct results, but it does a bunch of passes before getting there.</p>\n</blockquote>",
        "id": 304970818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666190578
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1284394760\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>I found some issues with egraphs after applying this patch where rematerialization is still inserting an <code>iconst.i128</code>, I want to chase that down before merging this:</p>\n<p>Here's the current test case:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed_and_size</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 305014182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666203124
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1284394760\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>I found some issues with egraphs after applying this patch where rematerialization is still inserting an <code>iconst.i128</code>, I want to chase that down before merging this:</p>\n<p>Here's the current test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed_and_size</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm also worried that <code>simple_preopt</code> might do something similar and we don't have any tests that trigger it.</p>\n</blockquote>",
        "id": 305014366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666203190
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1284394760\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>I found some issues while fuzzing with egraphs after applying this patch where rematerialization is still inserting an <code>iconst.i128</code>, I want to chase that down before merging this:</p>\n<p>Here's the current test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed_and_size</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">use_egraphs</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bxor</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm also worried that <code>simple_preopt</code> might do something similar and we don't have any tests that trigger it.</p>\n</blockquote>",
        "id": 305014442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666203221
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1284405538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>Ah, that's almost certainly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c392e461a3458a011f79dca7ec22773b873006cd/cranelift/codegen/src/opts/algebraic.isle#L110\">this</a> rewrite rule:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bxor</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">subsume</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imm64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think a <code>(fits_in_64 ty)</code> extractor in place of <code>ty</code> in the LHS should fix it -- and there are a few cases below (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/c392e461a3458a011f79dca7ec22773b873006cd/cranelift/codegen/src/opts/algebraic.isle#L127-L128\">here</a> for <code>band</code>) as well.</p>\n</blockquote>",
        "id": 305015868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666203727
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075#issuecomment-1287835959\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5075\">issue #5075</a>:</p>\n<blockquote>\n<p>So, the <code>bxor</code> was a simple fix.</p>\n<p>I don't think we ever trigger that issue with the <code>band</code> rules, because if I'm reading them correctly they depend on one of the sides being a <code>iconst.i128</code> to trigger, and we no longer have those so I don't think those rules ever fire in this situation. (I also haven't seen the fuzzer complain about those yet!)</p>\n<p>We had some <code>simple_preopt</code> optimizations building <code>iconst.i128</code>, notably <code>band_imm 0</code> and <code>bor_imm -1</code>, I've decided to disable those for I128's.<br>\nThey have the same issue that we have with <code>iconst.i128</code> where their operand is 64 bits but its a 128 bit operation and some sort of implicit extension is required. They are also on their way out with #4721.</p>\n<p>Otherwise the fuzzer has stopped complaining about inserting <code>iconst.i128</code>'s and we should be able to merge this!</p>\n</blockquote>",
        "id": 305555960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666454706
    }
]