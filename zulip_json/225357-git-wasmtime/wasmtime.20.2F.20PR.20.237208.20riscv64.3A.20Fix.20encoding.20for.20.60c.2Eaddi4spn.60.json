[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208\">PR #7208</a> from <code>afonso360:riscv-fix-addi4spn-encoding</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I was running fuzzgen on riscv when it crashed with an illegal instruction. When generating large stack offsets, we can use the compressed instruction <code>c.addi4spn</code>, It has a range of <code>{4,1020}</code> bytes. However we were accidentally not encoding the MSB on the immediate field.</p>\n<p>This meant that the instruction would be encoded with an offset of 0, which is illegal for this instruction.  The fix here is to ensure that the MSB bit is encoded correctly.</p>\n</blockquote>",
        "id": 395902308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696949828
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208\">PR #7208</a>.</p>",
        "id": 395902312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696949828
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208\">PR #7208</a>.</p>",
        "id": 395902313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696949828
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1668412982\">PR review</a>.</p>",
        "id": 395925130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696957557
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1668412982\">PR review</a>.</p>",
        "id": 395925131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696957557
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1353009110\">PR review comment</a>:</p>\n<blockquote>\n<p>Do we have <code>emit_tests.rs</code> for riscv64? I would kind of expect some updated tests in there that exercise this, rather than just the checked in fuzz test.</p>\n</blockquote>",
        "id": 395925133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696957557
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1668474493\">PR review</a>.</p>",
        "id": 395929515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696959428
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1353049147\">PR review comment</a>:</p>\n<blockquote>\n<p>I've been using the disassembled section in the compile tests as a check that the encodings are correct. However, we don't have many compile tests specifically for C instructions. Most of them test only with the Base ISA and don't enable the other extensions so they won't be emitting this instruction.</p>\n</blockquote>",
        "id": 395929517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696959428
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1353049147\">PR review comment</a>.</p>",
        "id": 395929706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696959508
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1353049147\">PR review comment</a>.</p>",
        "id": 395931055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696960082
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1668734640\">PR review</a>.</p>",
        "id": 395948672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696966248
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1353228038\">PR review comment</a>:</p>\n<blockquote>\n<p>Right, I guess before merging this I would like to have either a test in <code>emit_tests.rs</code> that does some loop over min/max/etc values for this type of immediate and encodes each of them or something else like that in spirit (e.g. a series of <code>c.addi4spn</code> instructions with various min/max/etc values in a filetest).</p>\n</blockquote>",
        "id": 395948674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696966249
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208\">PR #7208</a>.</p>",
        "id": 396142529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697047984
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1672186909\">PR review</a>.</p>",
        "id": 396142977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697048173
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#discussion_r1355548559\">PR review comment</a>:</p>\n<blockquote>\n<p>I've added a test for both min and max values as well as one that sets a bit in each subfield in the immediate of the instruction. I've also added tests for out of bound values.</p>\n<p>I added them into <code>zca.clif</code> instead of <code>emit_tests.rs</code>, since its slightly awkward to add these there because they are encoding only changes we don't actually know the name of the instruction in cranelift. So the test would look something like <code>addi a1, sp, 4</code> but the result is a 2 byte <code>c.addisp4n</code>.</p>\n</blockquote>",
        "id": 396142978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697048173
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208#pullrequestreview-1672431699\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 396155807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697053909
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7208\">PR #7208</a>.</p>",
        "id": 396161351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697056616
    }
]