[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a> from <code>improve-vec-bitcasting</code> to <code>main</code>:</p>\n<blockquote>\n<p>â€¦ck formal parameters.</p>\n<p>In the current translation of wasm (128-bit) SIMD into CLIF, we work around differences in the<br>\ntype system models of wasm vs CLIF by inserting <code>bitcast</code> (no-op casts) CLIF instructions before<br>\nmore or less every use of a SIMD value.  Unfortunately this was not being done consistently and<br>\neven small examples with a single if-then-else diamond that produces a SIMD value, could cause a<br>\nverification failure downstream.  In this case, the jump out of the \"else\" block needed a<br>\nbitcast, but didn't have one.</p>\n<p>This patch wraps creation of CLIF jumps and conditional branches up into a pair of functions,<br>\n<code>canonicalise_then_jump</code> and <code>canonicalise_then_br_z_or_nz</code>, and uses them consistently.  They<br>\nfirst cast the relevant block formal parameters, then generate the relevant kind of branch/jump.<br>\nHence, provided they are also used consistently in future to generate branches/jumps in this<br>\nfile, we are protected against such failures.</p>\n<p>The patch also adds a large(ish) comment at the top explaining this in more detail.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 213923083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603202514
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512944091\">PR Review</a>.</p>",
        "id": 213948386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213212
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508689723\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">any_non_canonical</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">is_non_canonical_v128</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">)));</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"err\">``</span><span class=\"w\"></span>\n<span class=\"o\">~~~</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 213948388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213212
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512944091\">PR Review</a>.</p>",
        "id": 213948389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213212
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508691386\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If we return <code>Option&lt;SmallVec::&lt;[ir::Value; 16]&gt;&gt;</code> here, we don't have to do <code>SmallVec::&lt;[ir::Value; 16]&gt;::new()</code> logic in the <code>canonicalise_then_</code></p>\n</blockquote>",
        "id": 213948390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213212
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508692547\">PR Review Comment</a>:</p>\n<blockquote>\n<p>let's split that into two functions: <code>canonicalise_then_br_z</code> and <code>canonicalise_then_br_nz</code></p>\n</blockquote>",
        "id": 213948392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213212
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512953347\">PR Review</a>.</p>",
        "id": 213949233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213616
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508696870\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The reason for taking a <code>&amp;mut SmallVec&lt;[ir::Value; 16]&gt;</code> rather than returning a <code>Option&lt;SmallVec::&lt;[ir::Value; 16]&gt;&gt;</code> is to avoid copying <code>Option&lt;SmallVec::&lt;[ir::Value; 16]&gt;&gt;</code> in the return at each call.  In the way I had it, <code>canonicalise_v128_values</code> never has to copy the vector (at return), because the caller owns it, and it very rarely even has to put anything in the vector, because most <code>values</code> are all non-vector.</p>\n</blockquote>",
        "id": 213949235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213616
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512957412\">PR Review</a>.</p>",
        "id": 213949936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213923
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508699980\">PR Review Comment</a>:</p>\n<blockquote>\n<p>One simplification that could also make this more convenient to call would be the signature:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">canonicalize_v128_values</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">canonicalized</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">SmallVec</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">ir</span>::<span class=\"n\">Value</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span>: <span class=\"o\">..</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">values</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">[</span><span class=\"n\">ir</span>::<span class=\"n\">Value</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">[</span><span class=\"n\">ir</span>::<span class=\"n\">Value</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>which either returns the original <code>values</code> argument or returns a slice of the <code>canonicalised</code> argument.</p>\n</blockquote>",
        "id": 213949937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603213923
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512966920\">PR Review</a>.</p>",
        "id": 213951598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603214600
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508707407\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@alexcrichton Ah, that's neat.  I'll do that.</p>\n</blockquote>",
        "id": 213951599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603214601
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512997608\">PR Review</a>.</p>",
        "id": 213957416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603216936
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508731349\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you link to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">https://github.com/bytecodealliance/wasmtime/issues/1147</a> and optionally add these comments there, or vice-versa? In that issue I discuss other alternatives as well.</p>\n</blockquote>",
        "id": 213957417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603216936
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-512999630\">PR Review</a>.</p>",
        "id": 213957768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603217098
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#discussion_r508732928\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, you may want to reference prior work:</p>\n<ul>\n<li>I already tried the single <code>v128</code> type approach: <a href=\"https://github.com/bytecodealliance/cranelift/pull/1251\">https://github.com/bytecodealliance/cranelift/pull/1251</a></li>\n<li>I half-heartedly tried just relaxing the verification: <a href=\"https://github.com/bytecodealliance/cranelift/pull/1236\">https://github.com/bytecodealliance/cranelift/pull/1236</a></li>\n</ul>\n</blockquote>",
        "id": 213957769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603217098
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-513002976\">PR Review</a>.</p>",
        "id": 213958370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603217359
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a> from <code>improve-vec-bitcasting</code> to <code>main</code>:</p>\n<blockquote>\n<p>â€¦ck formal parameters.</p>\n<p>In the current translation of wasm (128-bit) SIMD into CLIF, we work around differences in the<br>\ntype system models of wasm vs CLIF by inserting <code>bitcast</code> (no-op casts) CLIF instructions before<br>\nmore or less every use of a SIMD value.  Unfortunately this was not being done consistently and<br>\neven small examples with a single if-then-else diamond that produces a SIMD value, could cause a<br>\nverification failure downstream.  In this case, the jump out of the \"else\" block needed a<br>\nbitcast, but didn't have one.</p>\n<p>This patch wraps creation of CLIF jumps and conditional branches up into a pair of functions,<br>\n<code>canonicalise_then_jump</code> and <code>canonicalise_then_br_z_or_nz</code>, and uses them consistently.  They<br>\nfirst cast the relevant block formal parameters, then generate the relevant kind of branch/jump.<br>\nHence, provided they are also used consistently in future to generate branches/jumps in this<br>\nfile, we are protected against such failures.</p>\n<p>The patch also adds a large(ish) comment at the top explaining this in more detail.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214026588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603272045
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a> from <code>improve-vec-bitcasting</code> to <code>main</code>:</p>\n<blockquote>\n<p>â€¦ck formal parameters.</p>\n<p>In the current translation of wasm (128-bit) SIMD into CLIF, we work around differences in the<br>\ntype system models of wasm vs CLIF by inserting <code>bitcast</code> (no-op casts) CLIF instructions before<br>\nmore or less every use of a SIMD value.  Unfortunately this was not being done consistently and<br>\neven small examples with a single if-then-else diamond that produces a SIMD value, could cause a<br>\nverification failure downstream.  In this case, the jump out of the \"else\" block needed a<br>\nbitcast, but didn't have one.</p>\n<p>This patch wraps creation of CLIF jumps and conditional branches up into a pair of functions,<br>\n<code>canonicalise_then_jump</code> and <code>canonicalise_then_br_z_or_nz</code>, and uses them consistently.  They<br>\nfirst cast the relevant block formal parameters, then generate the relevant kind of branch/jump.<br>\nHence, provided they are also used consistently in future to generate branches/jumps in this<br>\nfile, we are protected against such failures.</p>\n<p>The patch also adds a large(ish) comment at the top explaining this in more detail.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214026991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603272300
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a> from <code>improve-vec-bitcasting</code> to <code>main</code>:</p>\n<blockquote>\n<p>â€¦ck formal parameters.</p>\n<p>In the current translation of wasm (128-bit) SIMD into CLIF, we work around differences in the<br>\ntype system models of wasm vs CLIF by inserting <code>bitcast</code> (no-op casts) CLIF instructions before<br>\nmore or less every use of a SIMD value.  Unfortunately this was not being done consistently and<br>\neven small examples with a single if-then-else diamond that produces a SIMD value, could cause a<br>\nverification failure downstream.  In this case, the jump out of the \"else\" block needed a<br>\nbitcast, but didn't have one.</p>\n<p>This patch wraps creation of CLIF jumps and conditional branches up into a pair of functions,<br>\n<code>canonicalise_then_jump</code> and <code>canonicalise_then_br_z_or_nz</code>, and uses them consistently.  They<br>\nfirst cast the relevant block formal parameters, then generate the relevant kind of branch/jump.<br>\nHence, provided they are also used consistently in future to generate branches/jumps in this<br>\nfile, we are protected against such failures.</p>\n<p>The patch also adds a large(ish) comment at the top explaining this in more detail.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214027369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603272519
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a>.</p>",
        "id": 214032935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603276344
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303#pullrequestreview-513773343\">PR Review</a>.</p>",
        "id": 214060273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603291713
    },
    {
        "content": "<p>julian-seward1 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2303\">PR #2303</a>.</p>",
        "id": 214069552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603295031
    }
]