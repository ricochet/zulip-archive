[
    {
        "content": "<p>chc4 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922574641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<p>I'm not sure if this issues should be re-opened or I should make a new one, but <code>iadd_carry</code> and <code>iadd_ifcarry</code> are still definitely broken on x86_64.</p>\n<p>Example Cranelift IR that doesn't compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"n\">block1</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isub_ifbout</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_ifcarry</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(Ignore the weird block0)</p>\n<p>Changing it to use <code>isub_bout</code> and <code>iadd_carry</code> doesn't work either.</p>\n<p>There was a comment asking about what contexts would need this: I'm writing an x86_64 recompilation/partial application engine using Cranelift as a lifting target. That Cranelift snippet is what I am generating for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span>: <span class=\"kt\">usize</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"mh\">0x5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or the compiled assembly function of</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">----</span> <span class=\"nf\">cmp</span> <span class=\"no\">rsi</span><span class=\"p\">,</span> <span class=\"mi\">-0</span><span class=\"no\">x5</span>\n<span class=\"err\">----</span> <span class=\"nf\">mov</span> <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"mi\">0x2</span>\n<span class=\"err\">----</span> <span class=\"nf\">adc</span> <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"mi\">-0</span><span class=\"no\">x1</span>\n<span class=\"err\">----</span> <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>Notably, I don't have access to the un-optimized assembly code that is more \"natural\" and doesn't depend on the CF behavior. I've had several other issues with Cranelift IFLAGS (and the assumption that all ALU operations clobber all flags means this project is probably dead in the water), but this issue (or a similar one) should probably be re-opened to let future users know.</p>\n</blockquote>",
        "id": 253984813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632099572
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922610879\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<p>Hi @chc4 -- we can definitely talk about how to support this use-case; I'll re-open the issue. (As a general principle, we want Cranelift to be as generally applicable as is practical; so \"here's my use-case and I can't figure out how to express it in CLIF\" is always a valid issue!)</p>\n<p>We've been discussing recently how to clean up the IR (see e.g. #3205 for discussion of booleans, which overlaps somewhat with the discussion of <code>iflags</code> values here, and <a href=\"https://github.com/bytecodealliance/rfcs/issues/12\">bytecodealliance/rfcs#12</a> which is proposing to remove the old x86 backend that introduced a lot of these lower-level concepts) so these flags-related ops are sort of in a transition period. The application that most commonly used them before -- wide arithmetic with carries/borrows -- is now lowered directly, so we just have sort of skeletal support for any other use-cases that crop up, until we work out the best long-term design. The general approach that I think is best is to represent specific flags as bools and provide ops as needed, so e.g. <code>iadd_carry</code> is a completely reasonable operator to have available. If you or someone else has the bandwidth to add this lowering, it's probably ~10 lines of code; I can point out the right spot. Sorry for the incomplete/in-transition nature of things here!</p>\n</blockquote>",
        "id": 253992431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632107691
    },
    {
        "content": "<p>cfallin reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<p>Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would be helpful.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v1465</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1467</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1468</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1469</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_carry</span><span class=\"w\"> </span><span class=\"n\">v1465</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1468</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1467</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1476</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v1470</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1356</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1391</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1423</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1447</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1464</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1494</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1516</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1544</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v1356</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v1476</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1356</span><span class=\"o\">+</span><span class=\"mi\">274</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -p cranelift-tools -- compile test.clif --target x86_64</code></p>\n<h3>Expected Results</h3>\n<p>Code successfully generates without a panic.</p>\n<h3>Actual Results</h3>\n<p>Panic: <code>thread 'main' panicked at 'ALU+imm and ALU+carry ops should not appear here!', cranelift/codegen/src/isa/x64/lower.rs:5740:13</code></p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main HEAD (4a830b at time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 253992436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632107698
    },
    {
        "content": "<p>chc4 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922987812\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<p>I'm still not sure it would fit my use-case, since I need correct implementation of all other processor flags, not just CF. Using a B1 and codegen'ing it back to iflags at instruction selection would work for CF, but I'd probably also need code motion and disjoint flag tracking on the selection backend so that e.g. <code>add x, y; lea w, [x+1]; jz ...</code> doesn't error from an invalid iflags live range. I can lift it as <code>v0, b0 = iadd_cout.i64 x, y; v1 = iadd.i64 x, 1; zf = icmp_imm.i64 v0, 0; br eq ...</code>, but I don't think Cranelift is currently smart enough to treat the icmp_imm as an optional use for iflage.ZF and select the non-flags-clobbering LEA for iadds with no carry-out if possible, or move the iadd_cout below it if the LEA isn't encodable. This may be fine, but I also need e.g. OF, which I'm not sure how I would even naively emit as a branch case without a direct iflags type.</p>\n<p>If it is usable that would be great, but I assume I would either have to wait for the iflags design to be stabilized further or write optimization and selection passes myself, which might be a bit too much work for a side-project. My current thought is to switch to dynasm-rs so I can lift instructions to the same flags behavior (and re-implement my own IR and register allocation...)</p>\n</blockquote>",
        "id": 254060004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632148596
    },
    {
        "content": "<p>chc4 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922987812\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<p>I'm still not sure it would fit my use-case, since I need correct implementation of all other processor flags, not just CF. Using a B1 and codegen'ing it back to iflags at instruction selection would work for CF, but I'd probably also need code motion and disjoint flag tracking on the selection backend so that e.g. <code>add x, y; lea w, [x+1]; jz ...</code> doesn't error from an invalid iflags live range. I can lift it as <code>v0, b0 = iadd_cout.i64 x, y; v1 = iadd.i64 x, 1; zf = icmp_imm.i64 v0, 0; br eq ...</code>, but I don't think Cranelift is currently smart enough to treat the icmp_imm as an optional use for iflage.ZF and select the non-flags-clobbering LEA for iadds with no carry-out if possible, or move the iadd_cout below it if the LEA isn't encodable. This may be fine, but I also need e.g. OF, which I'm not sure how I would even naively emit as a branch case without a direct iflags type.</p>\n<p>If it is usable that would be great, but I assume I would either have to wait for the iflags design to be stabilized further or write optimization and selection passes myself, which might be a bit too much work for a side-project. My current thought is to switch to dynasm-rs so I can lift instructions to the same flags behavior (and re-implement my own IR and register allocation...)</p>\n<p>We can continue this discussion on Zulip to avoid clogging this issue further.</p>\n</blockquote>",
        "id": 254062240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632149416
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-923030997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860\">issue #2860</a>:</p>\n<blockquote>\n<blockquote>\n<p>We can continue this discussion on Zulip</p>\n</blockquote>\n<p>For others who want to follow along: <a href=\"#narrow/stream/217117-cranelift/topic/x86_64.20iflags.20handling\">link</a></p>\n</blockquote>",
        "id": 254067624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632151509
    }
]