[
    {
        "content": "<p><a href=\"https://github.com/dfoxfranke\">dfoxfranke</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">Issue #8556</a>.</p>",
        "id": 437168643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714948813
    },
    {
        "content": "<p>dfoxfranke opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>The <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831/crates/wasi-preview1-component-adapter/src/lib.rs#L2510\">single 64KiB page</a> available to <code>BumpArena</code> in <code>wasi-preview1-component-adapter</code> is not reliably sufficient for allocating environment variables during initialization. This problem manifested for me as a <a href=\"https://github.com/bytecodealliance/jco/issues/433\">crash in <code>jco</code></a> when running it inside a NixOS shell with a lot of environment variables set.</p>\n</blockquote>",
        "id": 437168644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714948814
    },
    {
        "content": "<p>pchickey assigned pchickey to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>.</p>",
        "id": 437356707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715040345
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2097125324\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>Thanks for the bug report. I'm not sure how easy this will be to fix, the component-adapter is a very change resistant bit of software, but I believe our original reasons for designing the long-lived BumpArena to have a capped size are no longer valid, so I'm going to see if I can change the design so that that it can grow unbounded.</p>\n</blockquote>",
        "id": 437356881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715040448
    },
    {
        "content": "<p>dfoxfranke <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2097128082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>Could <a href=\"https://crates.io/crates/wee_alloc\">https://crates.io/crates/wee_alloc</a> be a good fit for this?</p>\n</blockquote>",
        "id": 437357113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715040621
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2097164929\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>@pchickey I was poking a bit at this today and wrote up a <a href=\"https://github.com/alexcrichton/wasmtime/commit/repro-64k-env-bug\">reproduction test case</a> (ignore the commented out bits in the rest of Wasmtime). </p>\n<p>Otherwise I _think_ it should be possible to call <code>cabi_realloc</code> from the adapter. The one downside of that is that a single allocation can't be larger than 64k due to <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/1594eba3c22ed574e68fc02a6c078310132176a0/crates/wit-component/src/gc.rs#L90-L98\">this constraint</a>, but we can probably lift that at the same time perhaps. Most modules export a <code>cabi_realloc</code> anyway so they should avoid that linked code there too since they'd actually use the language's normal <code>cabi_realloc</code>.</p>\n</blockquote>",
        "id": 437360304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715043426
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2097498383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>thanks! I made a reproducer as well today but i like yours better. i was going through trying to decode the history of why we didnt always call cabi_realloc directly and trying to figure out, when it became possible to do so, did we choose not to do it or did we just not think about it? anyway I think I'm going kayaking tomorrow but I will give it a try wednesday.</p>\n</blockquote>",
        "id": 437382655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715060938
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2100853379\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>Originally we assumed we couldn't call cabi_realloc at all and even now the import of cabi_realloc is a bit of a lie, sometimes it's hooked up to <code>memory.grow</code>. Supporting cabi_realloc itself was added in due to other issues down the road at some point. </p>\n<p>Otherwise though I think we just forgot to handle the case of &gt;=64k env/arg blocks...</p>\n</blockquote>",
        "id": 437675275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715182341
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2104887280\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>I think I've got an idea, albeit a bit nasty in the implementation, of how to solve this so I'm going to give it a stab</p>\n</blockquote>",
        "id": 438009693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715358156
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556#issuecomment-2105123307\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>While it's very much a hack the idea ended up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8594\">at least mostly working out</a></p>\n</blockquote>",
        "id": 438032473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715367592
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8556\">issue #8556</a>:</p>\n<blockquote>\n<p>The <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831/crates/wasi-preview1-component-adapter/src/lib.rs#L2510\">single 64KiB page</a> available to <code>BumpArena</code> in <code>wasi-preview1-component-adapter</code> is not reliably sufficient for allocating environment variables during initialization. This problem manifested for me as a <a href=\"https://github.com/bytecodealliance/jco/issues/433\">crash in <code>jco</code></a> when running it inside a NixOS shell with a lot of environment variables set.</p>\n</blockquote>",
        "id": 438608876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715703037
    }
]