[
    {
        "content": "<p>danxexe opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>Are there any plans to support this on the CLI for preopened directories? <a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/91\">https://github.com/WebAssembly/wasi-filesystem/pull/91</a></p>\n<p>My use case is adding a \"scripting\" layer to an application where I need to make some files available to untrusted wasm modules. The modules should not be able to modify these files. Ideally this should be done without relying on the underlying OS permissions. Is there any way to do this on the current version?</p>\n</blockquote>",
        "id": 340674233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384180
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1462520336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>I'm guessing that @sunfishcode intends for Wasmtime to expose this flag, but since support for WASI preview 2 is still under heavy development it may be a bit before this lands.</p>\n<p>@sunfishcode, is that right? How hard would this be for an interested party to contribute support for?</p>\n</blockquote>",
        "id": 340677076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678384840
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1462529805\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>If you are embedding wasmtime (as a crate), you can achieve this by writing a pair of <code>WasiDir</code>/<code>WasiFile</code> impls that wraps an existing <code>dyn WasiDir</code>/ <code>dyn WasiFile</code> in one that rejects all write operations, otherwise passes operations through, and propagates that property to opened dirs/files. </p>\n</blockquote>",
        "id": 340678017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385087
    },
    {
        "content": "<p>danxexe <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1462568768\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you are embedding wasmtime (as a crate), you can achieve this by writing a pair of <code>WasiDir</code>/<code>WasiFile</code> impls that wraps an existing <code>dyn WasiDir</code>/ <code>dyn WasiFile</code> in one that rejects all write operations, otherwise passes operations through, and propagates that property to opened dirs/files.</p>\n</blockquote>\n<p>It's not a Rust app, I'm currently shelling out to the wasmtime CLI. I wanted to do this without writing a custom wrapper, but I will take a look into this suggestion, thanks.</p>\n</blockquote>",
        "id": 340682913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678386556
    },
    {
        "content": "<p>SnoopJ <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1962803379\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>Not sure from reading this thread if this feature is intended at some point, but I've just run into a use-case with the <code>wasmtime-py</code> bindings where this requested functionality would have been very convenient. Would be nice to know if it's something possibly on the horizon for the runtime.</p>\n</blockquote>",
        "id": 423228187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708833169
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1964646043\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>Read-only permissions can now be specified directly in the <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/struct.WasiCtxBuilder.html#method.preopened_dir\">wasmtime-wasi::preview2::WasiCtxBuilder::preopened_dir</a> method. This isn't yet the implementation used by the c-api that drives wasmtime-py, but we will be switching the c-api to that implementation soon, at which point we could add a new c-api function to expose providing a preopen with permissions, and then finally it could be exposed in wasmtime-py.</p>\n<p>We don't currently have anyone actively maintaining wasmtime-py, though, so that step will need someone interested to step up.</p>\n</blockquote>",
        "id": 423441414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708966634
    },
    {
        "content": "<p>SnoopJ <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-1964918381\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<p>Interesting, I had missed that this was capable from the Rust side. If I understand the bindings generation machinery for <code>wasmtime-py</code>, whatever is in the C API should be picked up pretty much automatically, although the Python-facing code may need special care.</p>\n<p>If there is an open issue that you could refer me to for exposing that machinery in the C API, I'd be happy to keep an eye on it and perhaps make an attempt (no promises!) at updating the bindings when the time is right.</p>\n<hr>\n<p>In the meantime, I may see how much fuss it would be to set up the runtime from ad-hoc Rust code. I have relatively simple needs for control over the configuration/etc. from the Python consumer side, so it might not be so bad to do it that way.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 423462561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708973486
    },
    {
        "content": "<p>FrankReh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974#issuecomment-2018700349\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5974\">issue #5974</a>:</p>\n<blockquote>\n<blockquote>\n<p>wasmtime-wasi::preview2::WasiCtxBuilder::preopened_dir</p>\n</blockquote>\n<p>The link is now <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/struct.WasiCtxBuilder.html#method.preopened_dir\">https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/struct.WasiCtxBuilder.html#method.preopened_dir</a></p>\n</blockquote>",
        "id": 429489025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711393275
    }
]