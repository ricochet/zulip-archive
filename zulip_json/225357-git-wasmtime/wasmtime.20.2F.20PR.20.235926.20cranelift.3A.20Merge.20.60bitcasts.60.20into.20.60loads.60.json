[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a> from <code>delete-bitcasts</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I was looking at some wasmtime generated CLIF, and noticed that wasmtime emits a <code>bitcast</code> after SIMD loads. That's okay, but it prevents the loads being merged into some ops. So I decided to have a go at trying to remove these.</p>\n<p>The rule works, which is nice, but It doesn't seem to delete the previous load, which I assume is some sort of correctness rule embedded in the mid end? This optimization looks correct to me, but I might be wrong!</p>\n<hr>\n<p>For this example CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">b</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We now merge the load into the iabs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>Where we used to do a <code>load</code> + <code>pabsd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\">             </span><span class=\"n\">movdqu</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>In practice this doesn't help Wasmtime that much for SSE ops, since they require the loads to be aligned, but it does for VEX/EVEX ops.</p>\n</blockquote>",
        "id": 339548692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677933844
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a> from <code>delete-bitcasts</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I was looking at some wasmtime generated CLIF, and noticed that wasmtime emits a <code>bitcast</code> after SIMD loads. That's okay, but it prevents the loads being merged into some ops. So I decided to have a go at trying to remove these.</p>\n<p>The rule works, which is nice, but It doesn't seem to delete the previous load, which I assume is some sort of correctness rule embedded in the mid end? This optimization looks correct to me, but I might be wrong!</p>\n<hr>\n<p>For this example CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">b</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We now merge the load into the iabs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>Where we used to do a <code>load</code> + <code>pabsd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\">             </span><span class=\"n\">movdqu</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>In practice this doesn't help Wasmtime that much for SSE ops, since they require the loads to be aligned, but it should for VEX/EVEX ops.</p>\n</blockquote>",
        "id": 339549399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677934125
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a> from <code>delete-bitcasts</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I was looking at some wasmtime generated CLIF, and noticed that wasmtime emits a <code>bitcast</code> after SIMD loads. That's okay, but it prevents the loads being merged into some ops. So I decided to have a go at trying to remove these.</p>\n<p>The rule works, which is nice, but It <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/4331044775/jobs/7562649279#step:15:913\">doesn't seem to delete the previous load</a>, which I assume is some sort of correctness rule embedded in the mid end? This optimization looks correct to me, but I might be wrong!</p>\n<hr>\n<p>For this example CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">b</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iabs</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We now merge the load into the iabs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>Where we used to do a <code>load</code> + <code>pabsd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\">             </span><span class=\"n\">movdqu</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\">          </span><span class=\"n\">pabsd</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n</code></pre></div>\n<p>In practice this doesn't help Wasmtime that much for SSE ops, since they require the loads to be aligned, but it should for VEX/EVEX ops.</p>\n</blockquote>",
        "id": 339551050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677934796
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1325111006\">PR review</a>.</p>",
        "id": 339607321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677960259
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1325111006\">PR review</a>.</p>",
        "id": 339607322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677960259
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1125518905\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <code>i8x16</code> here is a typo (and what CI is tripping over), but CI also indicates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">filecheck</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">32</span>:\n    #<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i8x16</span><span class=\"p\">)</span>:\n    #<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span>#<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">load_bitcast</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Missed</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"err\">\\</span><span class=\"n\">bblock0</span><span class=\"err\">\\</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i8x16</span><span class=\"err\">\\</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">little</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">v4</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which look like the original load isn't actually being replaced but rather a second load is added?</p>\n<p>If that's the case there may be something special about egraphs trying to preserve effectful operations which may need some extra help here getting bypassed?</p>\n</blockquote>",
        "id": 339607323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677960259
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1125519026\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW the reason for this is that the load instruction for wasm is simply <code>v128.load</code> so we don't know what type is necessary for clif, so <code>i8x16</code> is always chosen (IIRC). Each op in clif, though, is specifically typed so if it flows into something that needs <code>f32x4</code> then the bitcast is required.</p>\n<p>That being said I think this is a clever optimization to work around that limitation of wasm translation!</p>\n</blockquote>",
        "id": 339607324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677960259
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1125530595\">PR review comment</a>:</p>\n<blockquote>\n<p>I've been sitting here trying to wrap my head around endianness and lane casts and how it affects s390x and I'll admit I still don't fully grok the implications of this. Natively it seems like having the same endianness is what's required here, but I might also natively think that \"well just take the bitcast's endianness and use that on the load\" although I'm not certin that's right.</p>\n<p>To help assist with assurances here, though, could you also add some runtests which trigger this optimization and work before/after your PR?</p>\n</blockquote>",
        "id": 339607326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677960259
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1325127471\">PR review</a>.</p>",
        "id": 339613727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677965233
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1125562092\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that makes sense, I'll add that info to the comment.</p>\n</blockquote>",
        "id": 339613728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677965233
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a> from <code>delete-bitcasts</code> to <code>main</code>.</p>",
        "id": 339614659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677966069
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a> from <code>delete-bitcasts</code> to <code>main</code>.</p>",
        "id": 339614681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677966107
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1325129325\">PR review</a>.</p>",
        "id": 339615412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677966734
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1125564394\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think i8x16 here is a typo</p>\n</blockquote>\n<p>Oops, that's right!</p>\n<blockquote>\n<p>which look like the original load isn't actually being replaced but rather a second load is added?</p>\n<p>If that's the case there may be something special about egraphs trying to preserve effectful operations which may need some extra help here getting bypassed?</p>\n</blockquote>\n<p>Yeah, I noticed that but I really don't know how to fix that... I'm not very familiar with the egraphs stuff behind the curtains.</p>\n</blockquote>",
        "id": 339615413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677966734
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1327189993\">PR review</a>.</p>",
        "id": 339974447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678139544
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#pullrequestreview-1327189993\">PR review</a>.</p>",
        "id": 339974448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678139544
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926#discussion_r1127032123\">PR review comment</a>:</p>\n<blockquote>\n<p>We can't currently write egraph rules that will replace an instruction unless it has exactly one result <code>Value</code>, which is why <code>store</code> doesn't work here. I recently removed the other instructions from <code>clif_opt.isle</code> because rules using them would never fire. We've been talking about how to do this but don't have a concrete plan yet.</p>\n<p>This restriction is primarily because our egraph identifies equivalence classes of <code>Value</code>s, rather than identifying equivalent instructions. It's also because it's harder to define what equivalence means for instructions with side effects, such as <code>store</code>.</p>\n</blockquote>",
        "id": 339974449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678139544
    },
    {
        "content": "<p>afonso360 closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5926\">PR #5926</a>.</p>",
        "id": 340104634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678194466
    }
]