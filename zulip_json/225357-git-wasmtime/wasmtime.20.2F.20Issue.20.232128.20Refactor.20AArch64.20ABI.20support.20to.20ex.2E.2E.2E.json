[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-673248275\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 206779686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597292877
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-674283023\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>Thanks for the detailed review!</p>\n</blockquote>",
        "id": 206985072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597441107
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-674872533\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>I just noticed that the new interface makes it difficult to implement the IBM Z ABI (which I already had working with the old interface), because it is now (it seems) overly prescriptive in how the stack has to be layed out.</p>\n<p>Specifically, the split of gen_prologue into gen_prologue_frame_setup and gen_clobber_save is not a good idea on Z.  This seems to enforce the idea that clobbered registers <strong>must</strong> be saved <strong>below</strong> stackslots and spillslots.  In the Z ABI, however, the caller provides a register save area (via a biased stack pointer) on function entry that the callee can (and should) use to save clobbered registers.  So the sequence is usually: 1) save clobbers (via a single STORE MULTIPLE instruction, which also includes the old SP value, so that the LOAD MULTIPLE in the epilog will simultaneously restore clobbers and de-allocate the stack frame)  2) allocate stack frame by decrementing SP.</p>\n<p>This doesn't work with the new interface any more.  In gen_prologue_frame_setup I cannot save the clobbers, because I don't even get the list here.  But in gen_clobber_save, common code has already allocated the stack frame, so I cannot save the original SP any more.</p>\n<p>Some of the other refactoring in the patch makes sense also on Z, but I do believe a generic \"gen_prologue\" interface that allows the target freedom in how to allocate its stack frame is still necessary to handle a variety of targets.</p>\n<p>(As an aside, I'm not sure that saving clobbers below stackslots and spillslots is a good idea on any platform; neither GCC nor LLVM do it this way.  In general, you want the frequently accessed areas at short distances off the stack pointer so they can be accessed with small displacement instructions, on ISAs where this is an issue.  The clobbered register save areas are usually the <strong>least</strong> frequently accessed slots ...)</p>\n</blockquote>",
        "id": 207141520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597669888
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-674881249\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>The <code>ABIBody</code> trait is not changed. This PR only introduces a new <code>ABIBodyImpl</code> struct that can help with getting an <code>ABIBody</code> impl when the ABI follows certain rules. If it doesn't follow these rules, you can still manually implement <code>ABIBody</code>.</p>\n</blockquote>",
        "id": 207143387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597670868
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-674903842\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>Yes, I got that.  Still, it would be nice to be able to make use of the new ABIBodyImpl, since a lot of that refactoring is in fact useful on Z as well.  It just goes a little bit too far with the prolog/epilog details.</p>\n</blockquote>",
        "id": 207148054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597673316
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-674959101\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>@uweigand Thanks for the feedback -- indeed, I'm happy to refactor things as needed to support other architectures. (The layout issue you note with clobbers is also preexisting and had to do with constraints on what we know at what time -- though I think we can do better now that we track nominal-SP.)</p>\n<p>In more detail, this was mostly motivated by the fact that the x64 ABI had copied most of the AArch64 ABI verbatim, so this was a long-overdue refactor to fix that particular problem. As additional architectures come online, we can shift things around to be more flexible!</p>\n</blockquote>",
        "id": 207160009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597679229
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-675082404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>@cfallin I've now managed to move the Z backend to the new ABI helper while still generating the same code.  I've had to change a number of things:</p>\n<ul>\n<li>Pass call_conv and clobbers to the gen_prologue_frame_setup and gen_epilogue_frame_restore helpers as well.</li>\n<li>In addition, pass the frame size to gen_epilogue_frame_restore (this could possibly be avoided, but it seems logical to have the size available here, given that this routine is responsible for deallocating the frame).</li>\n<li>Allow the machine to specify a different stack alignment than 16.</li>\n<li>Fix a bug in the argument extension code.</li>\n</ul>\n<p>As to the that last bug in argument extension: The current code, when handling a ABIArg::Stack argument requiring extension, will perform an in-register extension of the argument value to I64, and then generate a store <strong>using the original type</strong>.  This means the extension is in fact just ignored ...  To fix this, the store needs to happen in I64 instead of the original type.  This bug is present both in gen_copy_reg_to_retval and emit_copy_reg_to_arg.</p>\n</blockquote>",
        "id": 207190016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597694364
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-675094937\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<p>Thanks! I'm happy to review a PR that does all of that, if you'd like. I'll plan to fix the argument-extension bug right now. (In general, for small design changes like passing additional args, I don't really think we need to have a design discussion first; I can just r+ a PR right away.)</p>\n</blockquote>",
        "id": 207192904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597695876
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128#issuecomment-720442025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2128\">Issue #2128</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks! I'm happy to review a PR that does all of that, if you'd like. I'll plan to fix the argument-extension bug right now. (In general, for small design changes like passing additional args, I don't really think we need to have a design discussion first; I can just r+ a PR right away.)</p>\n</blockquote>\n<p>@cfallin I've now opened two PRs:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/2345\">https://github.com/bytecodealliance/wasmtime/pull/2345</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/2346\">https://github.com/bytecodealliance/wasmtime/pull/2346</a></p>\n<p>The other changes discussed above are no longer necessary in the current code base.</p>\n</blockquote>",
        "id": 215311431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604320099
    }
]