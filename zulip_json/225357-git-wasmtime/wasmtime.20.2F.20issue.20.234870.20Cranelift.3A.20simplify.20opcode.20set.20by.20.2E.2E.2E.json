[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented everywhere.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 297228321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662385038
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented on all backends.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 297228504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662385118
    },
    {
        "content": "<p>yuyang-ok <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1237870625\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>+1 remove.</p>\n</blockquote>",
        "id": 297329496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662455132
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1238579109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Perhaps optimizations like #4803 would do better if we keep bitwise CLIF operations on floatsâ€”we could express the optimization in the mid-end without introducing extra bitcast instructions.</p>\n<p>That said, looking more closely, I think the best code sequence for that particular optimization is different enough across backends that we may not want to do it in the mid-end anyway. And it's niche enough to be a really weak argument for keeping bitwise operators on floats.</p>\n<p>By contrast, I find the opposite argument compelling: they're complicated to lower on probably any architecture with a hardware floating-point unit, and nobody has wanted them yet.</p>\n<p>So I'm also in favor of removing them.</p>\n</blockquote>",
        "id": 297475227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662493432
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1239232517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>@afonso360 You are missing <code>band_not</code> in your list.</p>\n<p>Those operations are actually straightforward to implement on AArch64, since there is a hardware floating-point unit iff SIMD is supported; only <code>bxor_not</code> is a 2-instruction sequence (instead of 1). However, I probably also lean towards removing them, given the niche use case.</p>\n</blockquote>",
        "id": 297564185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662548080
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1239255441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Added, Thanks!</p>\n</blockquote>",
        "id": 297567941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662549452
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented on all backends.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>band_not</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 297567970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662549464
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1239802035\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Agreed, I think we should remove them. A floating-point type imbues some meaning on the value such that it's not meant to be used (or is not typically used) as a \"bucket of bits\" type, as integer types are.</p>\n<p>I suspect that it would be <em>possible</em> to do reasonable lowerings for these on x86-64 too (since we use XMM regs and would have the integer-vec instructions at our disposal, just as on aarch64), so that angle doesn't hold as much significance for me. However, the \"only build what is needed\" angle <em>does</em>: if no one actually needs these op/type combinations and they are extra lowerings to add, maintain, and test, then let's not have them IMHO.</p>\n</blockquote>",
        "id": 297661616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662579911
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1239891048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>It turns out that Wasmtime can actually generate SIMD bitwise ops on floating-point vectors, as in this example (from <code>tests/misc_testsuite/simd/issue_3327_bnot_lowering.wast</code> and #3327):</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$v128_not</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"v128_not\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">f32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"kt\">f32</span><span class=\"err\">x</span><span class=\"mi\">4</span><span class=\"err\">.abs</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.not</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"err\">assert_</span><span class=\"nb\">return</span> <span class=\"p\">(</span><span class=\"err\">invoke</span> <span class=\"s2\">\"v128_not\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mi\">4</span> <span class=\"mi\">-1</span> <span class=\"mi\">-1</span> <span class=\"mi\">-1</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>That currently compiles to this CLIF:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i8x16</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">0026</span><span class=\"w\">                               </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0038</span><span class=\"w\">                               </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_bitcast</span><span class=\"p\">.</span><span class=\"n\">f32x4</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">const0</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">0038</span><span class=\"w\">                               </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fabs</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_bitcast</span><span class=\"p\">.</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"></span>\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v6</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">i8x16</span><span class=\"p\">)</span>:\n<span class=\"o\">@</span><span class=\"mi\">003</span><span class=\"n\">d</span><span class=\"w\">                               </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Do we want <code>cranelift-wasm</code> to insert a bitcast in between the <code>fabs</code> and <code>bnot</code> here?</p>\n</blockquote>",
        "id": 297674578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662585271
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1239991119\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>I would prefer fewer <code>raw_bitcasts</code> if at all possible? I'm not very fond of it...</p>\n</blockquote>",
        "id": 297686178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662591644
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1240017433\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ah, interesting! That actually does change the calculus a bit in my mind. Given the principle above (only build what is needed) as the higher-priority one, I think it's totally fine to keep this support. Then for consistency it probably makes sense to support scalar floats as well; otherwise we have support for scalar ints, and all kinds of vectors, but not scalar floats, which is an odd and surprising hole.</p>\n</blockquote>",
        "id": 297688776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662593349
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented on all backends.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>band_not</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 298347459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662976209
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented on all backends.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>band_not</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 298347461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662976209
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1270362756\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>I'm closing this issue as we seem to have reached consensus on keeping bitwise operations on floats.</p>\n</blockquote>",
        "id": 302691589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665073413
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Jun Ryung Ju (sorry, I don't know the github user) on <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297216851\">zulip</a> discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplemented on all backends.</p>\n<p>@bjorn3 also mentions that cg_clif does not use them, it does a <code>bitcast</code> and then the operation on the integer version.</p>\n<p>This makes it likely a good candidate for simplifying our opcode set.</p>\n<p>Is there any benefit / optimization that we can do on these that would justify keeping them around?</p>\n<p>The bitwise ops that I'm referring to are:</p>\n<ul>\n<li><code>band</code></li>\n<li><code>bor</code></li>\n<li><code>bxor</code></li>\n<li><code>bnot</code></li>\n<li><code>band_not</code></li>\n<li><code>bor_not</code></li>\n<li><code>bxor_not</code></li>\n</ul>\n<p>cc: @cfallin </p>\n</blockquote>",
        "id": 302691590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665073413
    },
    {
        "content": "<p>ArtBlnd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</p>\n</blockquote>",
        "id": 303176452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665354451
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<blockquote>\n<blockquote>\n<p>lowered band</p>\n</blockquote>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</p>\n</blockquote>",
        "id": 303176619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665354688
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<blockquote>\n<p>lowered band</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</p>\n</blockquote>",
        "id": 303176623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665354693
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<blockquote>\n<p>lowered band</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.<br>\nIs this possible or should I make an optimization for scalar float memory ops?</p>\n</blockquote>",
        "id": 303176701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665354767
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<blockquote>\n<p>lowered band</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok I think regalloc2 does not allocate Gpr for single F32, F64. I might need to make a custom lowering rule for bitwise ops.</p>\n</blockquote>",
        "id": 303176876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355028
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok I think regalloc2 does not allocate Gpr for single F32, F64. I might need to make a custom lowering rule for bitwise ops.</p>\n</blockquote>",
        "id": 303176878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355035
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// function %band_f32(f32, f32) -&gt; f32 {</span>\n<span class=\"c1\">// block0(v0: f32, v1: f32):</span>\n<span class=\"c1\">//     v2 = band v0, v1</span>\n<span class=\"c1\">//     return v2</span>\n<span class=\"c1\">// }</span>\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok I think regalloc2 does not allocate Gpr for single F32, F64. I might need to make a custom lowering rule for bitwise ops.</p>\n</blockquote>",
        "id": 303176885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355057
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// function %band_f32(f32, f32) -&gt; f32 {</span>\n<span class=\"c1\">// block0(v0: f32, v1: f32):</span>\n<span class=\"c1\">//     v2 = band v0, v1</span>\n<span class=\"c1\">//     return v2</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok I think regalloc2 does not allocate Gpr for single F32, F64. I might need to make a custom lowering rule for bitwise ops.</p>\n</blockquote>",
        "id": 303176887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355062
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// function %band_f32(f32, f32) -&gt; f32 {</span>\n<span class=\"c1\">// block0(v0: f32, v1: f32):</span>\n<span class=\"c1\">//     v2 = band v0, v1</span>\n<span class=\"c1\">//     return v2</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok I think regalloc2 does not allocate Gpr for single F32, F64. I might need to make a custom transform layer for float bitwise ops.</p>\n</blockquote>",
        "id": 303177048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355245
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// function %band_f32(f32, f32) -&gt; f32 {</span>\n<span class=\"c1\">// block0(v0: f32, v1: f32):</span>\n<span class=\"c1\">//     v2 = band v0, v1</span>\n<span class=\"c1\">//     return v2</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok nvm. I think I just need lower XMM bitops on scalar bitops.</p>\n</blockquote>",
        "id": 303177218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665355447
    },
    {
        "content": "<p>ArtBlnd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870#issuecomment-1272641657\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">issue #4870</a>:</p>\n<blockquote>\n<p>Ok. I am working on implementing float bitops on x86_64 currently. looks implementing bitwise operation using bitcasts results terrible.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// function %band_f32(f32, f32) -&gt; f32 {</span>\n<span class=\"c1\">// block0(v0: f32, v1: f32):</span>\n<span class=\"c1\">//     v2 = band v0, v1</span>\n<span class=\"c1\">//     return v2</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">args</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"o\">=%</span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"o\">=%</span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">andl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v132l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v133l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">movd</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">v134l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v135</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">6</span>: <span class=\"nc\">movaps</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">7</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><del>I think we need to make F32 and F64 to select Gpr instead of Xmm registers.</del><br>\n<del>Is this possible or should I make an optimization for scalar float memory ops?</del></p>\n<p>Ok nvm. I think I just need lower scalar bitops to XMM bitops</p>\n</blockquote>",
        "id": 303178478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665356883
    }
]