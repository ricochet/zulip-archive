[
    {
        "content": "<p>katie-martin-fastly opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793\">PR #1793</a> from <code>ktm/beep-beep-keywords-to-the-jeep</code> to <code>master</code>:</p>\n<blockquote>\n<p># Overview</p>\n<p>This commit makes changes to the <code>wiggle::from_witx</code> procedural in order<br>\nto allow for escaping strict and reserved Rust keywords.</p>\n<p>Additionally, this commit introduces the ability to use a <code>witx_literal</code><br>\nfield in the <code>{..}</code> object provided as an argument to<br>\n<code>wiggle::from_witx</code>. This field allows for witx documents to be provided<br>\nas inline string literals.</p>\n<p>Documentation comments are added to the methods of<br>\n<code>wiggle_generate::names::Names</code> struct responsible for generating<br>\n<code>proc_macro2::Ident</code> words.</p>\n<p>## Keyword Escaping</p>\n<p>Today, an interface that includes witx identifiers that conflict with<br>\nwith Rust syntax will cause the <code>from_witx</code> macro to panic at<br>\ncompilation time.</p>\n<p>Here is a small example (adapted from<br>\n<code>/crates/wiggle/tests/keywords.rs</code>) that demonstrates this issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>;; Attempts to define a module `self`, containing a trait `Self`. Both\n;; of these are reserved keywords, and will thus cause a compilation\n;; error.\n(module $self\n    (@interface func (export &quot;betchya_cant_implement_this&quot;)\n    )\n)\n</code></pre></div>\n\n\n<p>Building off of code that (as of <code>master</code> today)<br>\n[demonstrates a strategy][esc] for escaping keywords, we introduce an<br>\ninternal <code>escaping</code> module to <code>generate/src/config.rs</code> that contains<br>\ncode responsible for escaping Rust keywords in a generalized manner.</p>\n<p>[esc]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0dd77d36f895df70c6e82758f23f553365c2f25f/crates/wiggle/generate/src/names.rs#L106\">https://github.com/bytecodealliance/wasmtime/blob/0dd77d36f895df70c6e82758f23f553365c2f25f/crates/wiggle/generate/src/names.rs#L106</a></p>\n<p>Some code related to special cases, such as accounting for<br>\n[<code>errno::2big</code>][err] while generating names for enum variants, is moved<br>\ninto this module as well.</p>\n<p>[err]: <a href=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#-errno-enumu16\">https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#-errno-enumu16</a></p>\n<p>As mentioned in the document comments of this diff, we do not include<br>\nweak keywords like <code>'static</code> or <code>union</code>. Their semantics do not impact<br>\nus in the same way from a code generation perspective.</p>\n<p>## witx_literal</p>\n<p>First, some background. Trait names, type names, and so on use a<br>\ncamel-cased naming convention.  As such, <code>Self</code> is the only keyword that<br>\ncan potentially conflict with these identifiers. (See the [Rust<br>\nReference][key] for a complete list of strict, reserved, and weak<br>\nkeywords.)</p>\n<p>When writing tests, this meant that many tests had to be outlined into<br>\nseparate files, as items with the name <code>$self</code> could not be defined in<br>\nthe same namespace. As such, it seemed like a worthwhile feature to<br>\nimplement while the above work was being developed.</p>\n<p>The most important function to note is the <code>load_document</code> inherent<br>\nmethod added to <code>WitxConf</code>, and that <code>WitxConf</code> is now an enum<br>\ncontaining either (a) a collection of paths, identical to its current<br>\nfunctionality, or (b) a single string literal.</p>\n<p>Note that a witx document given to <code>from_witx</code> using a string literal<br>\nprovided to <code>from_witx</code> cannot include <code>use (..)</code> directives, per<br>\nthe <code>witx::parse</code> documentation.<br>\n(See: <a href=\"https://docs.rs/witx/0.8.5/witx/fn.parse.html\">https://docs.rs/witx/0.8.5/witx/fn.parse.html</a>)</p>\n<p>Two newtypes, <code>Paths</code> and <code>Literal</code>, are introduced to facilitate the<br>\nparsing of <code>WitxConf</code> values. Their public API and trait implementations<br>\nhas been kept to the minimum required to satisfy compilation in order to<br>\nlimit the scope of this diff. Additional surface for external consumers<br>\ncan be added in follow-up commits if deemed necessary in review.</p>\n<p><span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> </p>\n</blockquote>",
        "id": 199242037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590820668
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#pullrequestreview-421389267\">PR Review</a>.</p>",
        "id": 199245766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590827580
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#discussion_r432822972\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is it appropriate to add a joke of this kind in the source?</p>\n</blockquote>",
        "id": 199245767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590827580
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#pullrequestreview-421433740\">PR Review</a>.</p>",
        "id": 199269768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590863365
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#discussion_r432876565\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes</p>\n</blockquote>",
        "id": 199269769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590863365
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#pullrequestreview-421434504\">PR Review</a>.</p>",
        "id": 199270403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590864380
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#pullrequestreview-421434504\">PR Review</a>.</p>",
        "id": 199270404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590864380
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793#discussion_r432877891\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    /// function will return `None`.\n    ///\n    /// This functionality is a short-term fix that keeps WASI working. Instead of expanding these sort of special cases,\n    /// we should replace this function by having the user provide a mapping of witx identifiers to Rust identifiers in the\n    /// arguments to the macro.\n</code></pre></div>\n\n\n</blockquote>",
        "id": 199270405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590864380
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793\">PR #1793</a> from <code>ktm/beep-beep-keywords-to-the-jeep</code> to <code>master</code>:</p>\n<blockquote>\n<p># Overview</p>\n<p>This commit makes changes to the <code>wiggle::from_witx</code> procedural in order<br>\nto allow for escaping strict and reserved Rust keywords.</p>\n<p>Additionally, this commit introduces the ability to use a <code>witx_literal</code><br>\nfield in the <code>{..}</code> object provided as an argument to<br>\n<code>wiggle::from_witx</code>. This field allows for witx documents to be provided<br>\nas inline string literals.</p>\n<p>Documentation comments are added to the methods of<br>\n<code>wiggle_generate::names::Names</code> struct responsible for generating<br>\n<code>proc_macro2::Ident</code> words.</p>\n<p>## Keyword Escaping</p>\n<p>Today, an interface that includes witx identifiers that conflict with<br>\nwith Rust syntax will cause the <code>from_witx</code> macro to panic at<br>\ncompilation time.</p>\n<p>Here is a small example (adapted from<br>\n<code>/crates/wiggle/tests/keywords.rs</code>) that demonstrates this issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>;; Attempts to define a module `self`, containing a trait `Self`. Both\n;; of these are reserved keywords, and will thus cause a compilation\n;; error.\n(module $self\n    (@interface func (export &quot;betchya_cant_implement_this&quot;)\n    )\n)\n</code></pre></div>\n\n\n<p>Building off of code that (as of <code>master</code> today)<br>\n[demonstrates a strategy][esc] for escaping keywords, we introduce an<br>\ninternal <code>escaping</code> module to <code>generate/src/config.rs</code> that contains<br>\ncode responsible for escaping Rust keywords in a generalized manner.</p>\n<p>[esc]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0dd77d36f895df70c6e82758f23f553365c2f25f/crates/wiggle/generate/src/names.rs#L106\">https://github.com/bytecodealliance/wasmtime/blob/0dd77d36f895df70c6e82758f23f553365c2f25f/crates/wiggle/generate/src/names.rs#L106</a></p>\n<p>Some code related to special cases, such as accounting for<br>\n[<code>errno::2big</code>][err] while generating names for enum variants, is moved<br>\ninto this module as well.</p>\n<p>[err]: <a href=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#-errno-enumu16\">https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#-errno-enumu16</a></p>\n<p>As mentioned in the document comments of this diff, we do not include<br>\nweak keywords like <code>'static</code> or <code>union</code>. Their semantics do not impact<br>\nus in the same way from a code generation perspective.</p>\n<p>## witx_literal</p>\n<p>First, some background. Trait names, type names, and so on use a<br>\ncamel-cased naming convention.  As such, <code>Self</code> is the only keyword that<br>\ncan potentially conflict with these identifiers. (See the [Rust<br>\nReference][key] for a complete list of strict, reserved, and weak<br>\nkeywords.)</p>\n<p>When writing tests, this meant that many tests had to be outlined into<br>\nseparate files, as items with the name <code>$self</code> could not be defined in<br>\nthe same namespace. As such, it seemed like a worthwhile feature to<br>\nimplement while the above work was being developed.</p>\n<p>The most important function to note is the <code>load_document</code> inherent<br>\nmethod added to <code>WitxConf</code>, and that <code>WitxConf</code> is now an enum<br>\ncontaining either (a) a collection of paths, identical to its current<br>\nfunctionality, or (b) a single string literal.</p>\n<p>Note that a witx document given to <code>from_witx</code> using a string literal<br>\nprovided to <code>from_witx</code> cannot include <code>use (..)</code> directives, per<br>\nthe <code>witx::parse</code> documentation.<br>\n(See: <a href=\"https://docs.rs/witx/0.8.5/witx/fn.parse.html\">https://docs.rs/witx/0.8.5/witx/fn.parse.html</a>)</p>\n<p>Two newtypes, <code>Paths</code> and <code>Literal</code>, are introduced to facilitate the<br>\nparsing of <code>WitxConf</code> values. Their public API and trait implementations<br>\nhas been kept to the minimum required to satisfy compilation in order to<br>\nlimit the scope of this diff. Additional surface for external consumers<br>\ncan be added in follow-up commits if deemed necessary in review.</p>\n<p><span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> </p>\n</blockquote>",
        "id": 199274013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590869449
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1793\">PR #1793</a>.</p>",
        "id": 199274016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590869461
    }
]