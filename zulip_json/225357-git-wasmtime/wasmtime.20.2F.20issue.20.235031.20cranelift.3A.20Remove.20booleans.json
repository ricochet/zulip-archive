[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1276670636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<p>@uweigand, could you take a closer look at my changes to the s390x backend? In particular the changes in c01d860, as they increased the instruction count for the <code>bmask</code> translation by quite a bit.</p>\n</blockquote>",
        "id": 303711996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665604806
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1276670636\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<p>@uweigand, could you take a closer look at my changes to the s390x backend? In particular the changes to the lowering of <code>bmask</code>, as they increased the instruction count for the translation by quite a bit.</p>\n</blockquote>",
        "id": 303731319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665613936
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1277319898\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand, could you take a closer look at my changes to the s390x backend? In particular the changes to the lowering of <code>bmask</code>, as they increased the instruction count for the translation by quite a bit.</p>\n</blockquote>\n<p>Well, in part this is due to changed semantics: the old <code>bmask</code> would take a boolean type as input, which (except for <code>$B1</code>) already used only the values 0 and -1.  So the semantics of <code>bmask</code> was simply a no-op or a sign-extend.  The new <code>bmask</code> I understand now needs to take any arbitrary integer input, so it actually has to perform a comparison against zero.</p>\n<p>That said, I think the new implementation could still be improved, in particular the <code>$I128</code> cases.  However, instead of re-implementing the wheel here, why don't you simply use the existing <code>icmp_val</code> helper to emit the actual comparison?</p>\n<p>Maybe something alone the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">oty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bmask</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">ity</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">lower_bool_to_mask</span><span class=\"w\"> </span><span class=\"n\">oty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">icmp_val</span><span class=\"w\"> </span><span class=\"cp\">$true</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">NotEqual</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"n\">ity</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with a new helper <code>lower_bool_to_mask</code> analogous to the old <code>lower_bool</code> ...<br>\n</p>\n</blockquote>",
        "id": 303790258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665653722
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1277379627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<p>Following up on myself, it would be even simpler <em>and</em> better to use the existing <code>value_nonzero</code> helper, which will fold in previous comparisons if possible:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bmask</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">lower_bool_to_mask</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_nonzero</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 303796300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665656408
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1277793761\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<blockquote>\n<p>Following up on myself, it would be even simpler _and_ better to use the existing <code>value_nonzero</code> helper, which will fold in previous comparisons if possible:</p>\n<p><code>\n (rule (lower (has_type ty (bmask x)))\n       (lower_bool_to_mask ty (value_nonzero x)))\n</code></p>\n</blockquote>\n<p>This is much nicer! I'll rework the changes to add <code>lower_bool_to_mask</code> instead.</p>\n</blockquote>",
        "id": 303862276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665674719
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031#issuecomment-1277931157\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5031\">issue #5031</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is much nicer! I'll rework the changes to add <code>lower_bool_to_mask</code> instead.</p>\n</blockquote>\n<p>Thanks!   The s390x parts LGTM now.</p>\n</blockquote>",
        "id": 303885307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665681206
    }
]