[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267#issuecomment-704533012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267\">Issue #2267</a>:</p>\n<blockquote>\n<p>Thanks! Updated based on comments. I definitely like the renaming in terms of explicit actions (\"clobbered by call\", \"saved in prologue\") in the ABI impls. The only open question is the naming of <code>is_included_in_clobbers()</code> in the <code>MachInst</code> interface; I'm curious if you have any other good names in mind. Open to whatever makes sense!</p>\n</blockquote>",
        "id": 212480918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602015928
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267#issuecomment-704563404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267\">Issue #2267</a>:</p>\n<blockquote>\n<p>I also had a quick look at the changes and they are good, but now I have realized that there is a gap in the tests - there is nothing that covers the callee side. However, that is definitely a job for another PR, in particular one that is going to fix function prologues and epilogues, so that they deal only with the lower 64 bits of the SIMD &amp; FP registers. At the very least we should have a function with a chain of operations such as <code>v1 = v0 + v0, v2 = v1 + v1, ..., f(v0, v1, v2, ...)</code> to force the compiler to use the callee-saved registers, possibly mixing data types (<code>f32</code>, <code>f64</code> and <code>i8x16</code>).</p>\n</blockquote>",
        "id": 212488361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602019771
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267#issuecomment-704570133\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267\">Issue #2267</a>:</p>\n<blockquote>\n<p>@akirilov-arm good point; thanks! I just updated the PR to include a test (<code>prologue.clif</code>) that does exactly that, and checks that all of the callee-saves are saved (lower halves of v8-v15, covered by saving all of v8-v15 currently). Let me know if this covers what you had in mind.</p>\n</blockquote>",
        "id": 212490067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602020739
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267#issuecomment-704580333\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2267\">Issue #2267</a>:</p>\n<blockquote>\n<p>@cfallin Yes, and it is simpler than what I had in mind, which is even better. I think that together with the other tests it will be a good exercise for an optimal with respect to the AAPCS64 implementation (trying to be a little bit forward-thinking here), and yet it demonstrates the current issues that are simpler, namely handling the full registers and the lack of paired loads and stores.</p>\n</blockquote>",
        "id": 212492579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602022271
    }
]