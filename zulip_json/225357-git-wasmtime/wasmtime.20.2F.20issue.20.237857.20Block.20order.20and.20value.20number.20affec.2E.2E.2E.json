[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>Last night we got a <a href=\"https://oss-fuzz.com/testcase-detail/4583302363152384\">fuzz bug</a>. Everything below is relative to Wasmtime at 0d662c9d3dd1db8490e30124c9126bfa00a9a5c6.</p>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func\n    (local f32)\n    f32.const 100\n    f32.sqrt\n    i32.const 0\n    if\n      f32.const 100\n      f32.sqrt\n      block ;; label = @5\n        i32.const 1\n        br_if 0 (;@6;)\n        f32.const 0\n        local.set 0\n      end\n      local.get 0\n      i32.const 1\n      select\n      i32.reinterpret_f32\n      global.set 0\n    end\n    i32.reinterpret_f32\n    global.set 0\n  )\n  (global (;0;) (mut i32) i32.const 0)\n)\n</code></pre></div>\n<p>will panic in regalloc</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">14</span>:\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">SSA</span><span class=\"p\">(</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">198</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">))</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>This surfaces a validation error in CLIF earlier with validation enabled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">                                    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">                                    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"o\">@</span><span class=\"mi\">0043</span><span class=\"w\">                               </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">;</span><span class=\"o\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst12</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>: <span class=\"nc\">uses</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">dominating</span><span class=\"w\"> </span><span class=\"n\">block4</span>\n\n<span class=\"o\">@</span><span class=\"mi\">0044</span><span class=\"w\">                               </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"o\">@</span><span class=\"mi\">0049</span><span class=\"w\">                               </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>This has been further reduced to this CLIF test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_verifier</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block5</span>\n\n<span class=\"n\">block5</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v9</span><span class=\"p\">)</span>\n\n<span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v10</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n\n<span class=\"n\">block3</span>:\n    <span class=\"nc\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which can be reproduced with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>I've been investigating this with @elliottt and @fitzgen in person for a bit now. So far we have concluded a few \"fixes\" can be applied:</p>\n<ul>\n<li>One fix is to renumber the original <code>v12</code> input to <code>v1</code> in CLIF.</li>\n<li>Another fix is to move <code>block3</code> to be beneath <code>block0</code>.</li>\n<li>The final fix is to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b6a8abc6ce31cf6db7ad5edb9b2567620190ce35/cranelift/codegen/src/opts/cprop.isle#L172\">this line</a> to <code>(subsume x)</code></li>\n</ul>\n<p>Naturally none of these are actual fixes but are symptoms of the \"real\" issue. We're still figuring things out at this time but I wanted to open this up.</p>\n<p>Trevor and Nick are telling me as well that this is possibly related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6126\">https://github.com/bytecodealliance/wasmtime/issues/6126</a>.</p>\n</blockquote>",
        "id": 419303021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706810236
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">Issue #7857</a>.</p>",
        "id": 419303043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706810243
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">Issue #7857</a>.</p>",
        "id": 419303044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706810243
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">Issue #7857</a>.</p>",
        "id": 419303045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706810243
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>Last night we got a <a href=\"https://oss-fuzz.com/testcase-detail/4583302363152384\">fuzz bug</a>. Everything below is relative to Wasmtime at 0d662c9d3dd1db8490e30124c9126bfa00a9a5c6.</p>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func\n    (local f32)\n    f32.const 100\n    f32.sqrt\n    i32.const 0\n    if\n      f32.const 100\n      f32.sqrt\n      block\n        i32.const 1\n        br_if 0\n        f32.const 0\n        local.set 0\n      end\n      local.get 0\n      i32.const 1\n      select\n      i32.reinterpret_f32\n      global.set 0\n    end\n    i32.reinterpret_f32\n    global.set 0\n  )\n  (global (;0;) (mut i32) i32.const 0)\n)\n</code></pre></div>\n<p>will panic in regalloc</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">14</span>:\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">SSA</span><span class=\"p\">(</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">198</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">))</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>This surfaces a validation error in CLIF earlier with validation enabled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">                                    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">                                    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"o\">@</span><span class=\"mi\">0043</span><span class=\"w\">                               </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">;</span><span class=\"o\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst12</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>: <span class=\"nc\">uses</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">dominating</span><span class=\"w\"> </span><span class=\"n\">block4</span>\n\n<span class=\"o\">@</span><span class=\"mi\">0044</span><span class=\"w\">                               </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"o\">@</span><span class=\"mi\">0049</span><span class=\"w\">                               </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>This has been further reduced to this CLIF test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_verifier</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block5</span>\n\n<span class=\"n\">block5</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v9</span><span class=\"p\">)</span>\n\n<span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v10</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n\n<span class=\"n\">block3</span>:\n    <span class=\"nc\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which can be reproduced with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>I've been investigating this with @elliottt and @fitzgen in person for a bit now. So far we have concluded a few \"fixes\" can be applied:</p>\n<ul>\n<li>One fix is to renumber the original <code>v12</code> input to <code>v1</code> in CLIF.</li>\n<li>Another fix is to move <code>block3</code> to be beneath <code>block0</code>.</li>\n<li>The final fix is to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b6a8abc6ce31cf6db7ad5edb9b2567620190ce35/cranelift/codegen/src/opts/cprop.isle#L172\">this line</a> to <code>(subsume x)</code></li>\n</ul>\n<p>Naturally none of these are actual fixes but are symptoms of the \"real\" issue. We're still figuring things out at this time but I wanted to open this up.</p>\n<p>Trevor and Nick are telling me as well that this is possibly related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6126\">https://github.com/bytecodealliance/wasmtime/issues/6126</a>.</p>\n</blockquote>",
        "id": 419303116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706810267
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922067336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>With a small patch to get bugpoint to actually work on this test case and a fair amount of manual work I got it reduced to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_verifier</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">brif</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v9</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n\n<span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v10</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span>\n\n<span class=\"n\">block3</span>:\n    <span class=\"nc\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which gives the following verifier error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v23</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v23</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n\n<span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v10</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v24</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v25</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v26</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v25</span>\n<span class=\"w\">    </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v25</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v28</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v24</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v28</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"n\">user0</span>\n\n<span class=\"n\">block3</span>:\n    <span class=\"nc\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fneg</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"o\">^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>: <span class=\"nc\">uses</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">dominating</span><span class=\"w\"> </span><span class=\"n\">block4</span>\n\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 419317319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706815460
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922137129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>I took a quick look at this (I'm still on leave, only have a brief window here, but figured my input could be useful after seeing this go by).</p>\n<p>It seems to me at least that there's an issue with the cost function: the select is union'ing with one of its inputs (because it is being constant-folded), but then another user of that input elsewhere is picking the select instead. (Given <code>x</code> and <code>select true, x, bla</code> one should always pick <code>x</code>.) This is compounded by the fact that the <code>bla</code> is dependent on a blockparam that's not available at the other use's site.</p>\n<p><code>subsume</code> is a bandaid over that but really we should figure out why <code>select true, x, bla</code> doesn't have higher cost than <code>x</code>. Both <code>v12</code> and <code>v4</code> have saturated their cost; I didn't get a chance to look into why.</p>\n<p>Alternately, in a universe where we have use-site-specific costs, we could push the cost of blockparams that are not available (not in a dominating block) to infinity. But we've avoided use-site-specific costs so far because that removes the ability to have the nice linear-time dynamic programming pass to compute them...</p>\n<p>(Why hasn't this come up before? The <code>x</code> -&gt; <code>func(x, other_stuff)</code> rewrite is a violation of the correctness condition for rewrites that we have in <code>opts/README.md</code> -- \"using the same inputs as the original, or fewer\" -- not in the sense that the original rule is written that way, but in the sense that equivalences are bidirectional and so reading the rule backwards produces that outcome. The cost function should ordinarily prevent the rewrite from being used \"backwards\" and I suspect our \"infinity\" encoding/scheme has some issues...)</p>\n</blockquote>",
        "id": 419323547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706817753
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922429840\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>@elliottt, @fitzgen, and I have been debugging this quite a bit today. Sorry haven't fully caught up on the latest comments. Our findings are:</p>\n<ul>\n<li>It's possible to leverage this bug to elaborate effectful instructions, such as function calls, where they shouldn't be. This is a sign that we should assert that during elaboration no effectful instructions should be added, only pure instructions.</li>\n<li>One issue here is that <code>compute_best_values</code> only runs one iteration going through the values. The input program here is constructed such that this one pass does not calculate an accurate cost of nodes such as <code>v4</code> and <code>v7</code>. This explains why <code>v12</code> is chosen to elaborate because all items in the eclass have near-infinite cost and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b6a8abc6ce31cf6db7ad5edb9b2567620190ce35/cranelift/codegen/src/egraph/elaborate.rs#L80-L83\">this heuristic</a> prefers larger nodes.</li>\n<li>The \"root\" issue here feels that there's an eclass which contains <code>v4</code> and <code>v12</code>. The <code>v12</code> expression relies on a value not in scope with <code>v4</code>, meaning that it seems like there needs to be some sort of concept of \"scope\" with eclasses. We had no idea how this would be implemented and it sounds scary.</li>\n</ul>\n<p>@fitzgen is going to leave a further comment about the possibility of running <code>compute_best_values</code> to a fixpoint to get a more accurate cost.</p>\n<hr>\n<p>Answering some questions reading over your comment now @cfallin </p>\n<blockquote>\n<p>we should figure out why select true, x, bla doesn't have higher cost than x</p>\n</blockquote>\n<p>We've concluded this is due to the numbers of values here. Due to the single pass in <code>compute_best_values</code> everything ends up with near-infinite cost. The values are out-of-order here due to the nan canonicalization pass running after CLIF construction in Wasmtime.</p>\n<blockquote>\n<p>Why hasn't this come up before?</p>\n</blockquote>\n<p>My naive understanding at this point is that if all values are defined with values defined before it then we can correctly calculate cost and will deterministically pick <code>x</code> over <code>f(x, other)</code>. This is not a great explanation though and there may be something deeper.</p>\n</blockquote>",
        "id": 419347460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706827896
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922446025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<blockquote>\n<p>One issue here is that <code>compute_best_values</code> only runs one iteration going through the values.</p>\n</blockquote>\n<p>I think we should do a fixed point here, and I know that is a scary thing to just drop in chat, but I think it is actually fine. The maximum number of iterations the fixed-point loop would take is equal to the longest chain of <code>vNN</code>-to-<code>vMM</code> edges in the the dataflow graph where <code>NN &gt; MM</code>. So in the worst case this is <code>O(n^2)</code>, yes. But the Wasm frontend doesn't introduce any of these edges. Cranelift itself can introduce them during NaN canonicalization, but this will be chains that are only one or two links long. Therefore, with Wasmtime, Cranelift would _never_ do more than a handful of iterations. Other frontends would however have the responsibility of avoiding the worst case value numbering themselves. </p>\n<p>Additionally, this would allow us to remove the funky infinity-minus-one cost clamping as well, which would be a very nice simplification.</p>\n<p>I think this might also fix some of the issues discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6126\">https://github.com/bytecodealliance/wasmtime/issues/6126</a>.</p>\n</blockquote>",
        "id": 419348999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706828638
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922594963\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<blockquote>\n<p>The \"root\" issue here feels that there's an eclass which contains v4 and v12. The v12 expression relies on a value not in scope with v4, meaning that it seems like there needs to be some sort of concept of \"scope\" with eclasses. We had no idea how this would be implemented and it sounds scary.</p>\n</blockquote>\n<p>This (two values in the eclass) is \"right and good and normal\" I think -- if <code>v12</code> derives from <code>v4</code> and we realize that the def of <code>v12</code> simplifies down to <code>v12 := v4</code>, then there is no other reasonable way to represent this but to put them in the same eclass. Doing otherwise (e.g. having a \"copy\" operator or something of the sort) then makes each instance unique (and e.g. we couldn't collapse <code>v14</code> and <code>v15</code> in <code>v12 := v4; v13 := v4; v14 = f(v12); v15 = f(v13)</code>). Basically, if something is truly equal to a blockparam then we need to represent it as such, or else all of the simplification stops prematurely.</p>\n<p>The key I think is the directionality, and for that we need to stick to the \"correctness condition\" we've stated for rewrite rules -- removing but not adding inputs -- in the extraction (picking nodes for each class) too. If one enode in an eclass depends on <code>v1</code>, and another depends on <code>v1, v2</code>, we need to pick the former. This is because while we may have written the rule to \"shrink\" the input set, equivalence is bidirectional, so a broken extraction could actually use the bigger input set where we originally had the smaller.</p>\n<p>So all this leads me to come again to the cost function, and I agree @fitzgen's approach feels like the right one. Basically we need to (i) define costs correctly, so a rewrite rule that \"shrinks\" the input set also results in a node with lower cost -- this should already be the case, and is a separate bug if not -- and (ii) compute costs correctly according to their definition, which the fixpoint approach should do.</p>\n</blockquote>",
        "id": 419363206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706835554
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922446025\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<blockquote>\n<p>One issue here is that <code>compute_best_values</code> only runs one iteration going through the values.</p>\n</blockquote>\n<p>I think we should do a fixed point here, and I know that is a scary thing to just drop in chat, but I think it is actually fine. The maximum number of iterations the fixed-point loop would take is equal to the longest chain of <code>vNN</code>-to-<code>vMM</code> edges in the the dataflow graph where <code>NN &lt; MM</code>. So in the worst case this is <code>O(n^2)</code>, yes. But the Wasm frontend doesn't introduce any of these edges. Cranelift itself can introduce them during NaN canonicalization, but this will be chains that are only one or two links long. Therefore, with Wasmtime, Cranelift would _never_ do more than a handful of iterations. Other frontends would however have the responsibility of avoiding the worst case value numbering themselves. </p>\n<p>Additionally, this would allow us to remove the funky infinity-minus-one cost clamping as well, which would be a very nice simplification.</p>\n<p>I think this might also fix some of the issues discussed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6126\">https://github.com/bytecodealliance/wasmtime/issues/6126</a>.</p>\n</blockquote>",
        "id": 419371668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706840518
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1922750213\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>I have a fix in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7859\">https://github.com/bytecodealliance/wasmtime/pull/7859</a></p>\n</blockquote>",
        "id": 419378497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706845238
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857#issuecomment-1927208087\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>(please feel free to respond to this after you're back @cfallin, no urgency on this of course)</p>\n<blockquote>\n<p>If one enode in an eclass depends on v1, and another depends on v1, v2, we need to pick the former.</p>\n</blockquote>\n<p>In the past I've been under the impression that one of the properties of eclasses/elaboration that we rely on is that correctness is guaranteed because no matter what we choose in an eclass it's guaranteed to have the same program. Put another way I was under the impression that various bits and pieces of code relied on the fact that we can choose anything in an eclass to elaborate. What you're saying I agree with, however, and if the above program is correctly putting everything in the same eclass then the I also agree with the consequence, the cost function is quite important.</p>\n<p>Is there perhaps other bits and pieces of elaboration that need to be updated/rethought? Or is this perhaps a mistaken impression I've gotten from egraphs/etc? (I couldn't actually find docs in Cranelift itself saying anything like this searching for a moment).</p>\n</blockquote>",
        "id": 419860134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707145483
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7857\">issue #7857</a>:</p>\n<blockquote>\n<p>Last night we got a <a href=\"https://oss-fuzz.com/testcase-detail/4583302363152384\">fuzz bug</a>. Everything below is relative to Wasmtime at 0d662c9d3dd1db8490e30124c9126bfa00a9a5c6.</p>\n<p>This input:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func\n    (local f32)\n    f32.const 100\n    f32.sqrt\n    i32.const 0\n    if\n      f32.const 100\n      f32.sqrt\n      block\n        i32.const 1\n        br_if 0\n        f32.const 0\n        local.set 0\n      end\n      local.get 0\n      i32.const 1\n      select\n      i32.reinterpret_f32\n      global.set 0\n    end\n    i32.reinterpret_f32\n    global.set 0\n  )\n  (global (;0;) (mut i32) i32.const 0)\n)\n</code></pre></div>\n<p>will panic in regalloc</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">machinst</span><span class=\"o\">/</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">14</span>:\n<span class=\"nc\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span>: <span class=\"nc\">SSA</span><span class=\"p\">(</span><span class=\"n\">VReg</span><span class=\"p\">(</span><span class=\"n\">vreg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">198</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">))</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>This surfaces a validation error in CLIF earlier with validation enabled</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">nan</span><span class=\"o\">-</span><span class=\"n\">canonicalization</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">                                    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">                                    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"o\">@</span><span class=\"mi\">0043</span><span class=\"w\">                               </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">;</span><span class=\"o\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst12</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>: <span class=\"nc\">uses</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">dominating</span><span class=\"w\"> </span><span class=\"n\">block4</span>\n\n<span class=\"o\">@</span><span class=\"mi\">0044</span><span class=\"w\">                               </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"o\">@</span><span class=\"mi\">0049</span><span class=\"w\">                               </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"w\">                                </span><span class=\"n\">block1</span>:\n<span class=\"o\">@</span><span class=\"mi\">004</span><span class=\"n\">b</span><span class=\"w\">                               </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>This has been further reduced to this CLIF test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_verifier</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">900000</span><span class=\"n\">p6</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"n\">v6</span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">block5</span>\n\n<span class=\"n\">block5</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32const</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v9</span><span class=\"p\">)</span>\n\n<span class=\"n\">block4</span><span class=\"p\">(</span><span class=\"n\">v10</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v12</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n\n<span class=\"n\">block3</span>:\n    <span class=\"nc\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitcast</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">80</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which can be reproduced with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n</code></pre></div>\n<p>I've been investigating this with @elliottt and @fitzgen in person for a bit now. So far we have concluded a few \"fixes\" can be applied:</p>\n<ul>\n<li>One fix is to renumber the original <code>v12</code> input to <code>v1</code> in CLIF.</li>\n<li>Another fix is to move <code>block3</code> to be beneath <code>block0</code>.</li>\n<li>The final fix is to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b6a8abc6ce31cf6db7ad5edb9b2567620190ce35/cranelift/codegen/src/opts/cprop.isle#L172\">this line</a> to <code>(subsume x)</code></li>\n</ul>\n<p>Naturally none of these are actual fixes but are symptoms of the \"real\" issue. We're still figuring things out at this time but I wanted to open this up.</p>\n<p>Trevor and Nick are telling me as well that this is possibly related to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6126\">https://github.com/bytecodealliance/wasmtime/issues/6126</a>.</p>\n</blockquote>",
        "id": 419946476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707175345
    }
]