[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086#issuecomment-1480459055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086\">issue #6086</a>:</p>\n<blockquote>\n<p>Neat, thanks for picking this up! I think this is correct, but I'd like @elliottt or @abrown to take a look.</p>\n</blockquote>",
        "id": 343813161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679535013
    },
    {
        "content": "<p>meithecatte <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086#issuecomment-1481535048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086\">issue #6086</a>:</p>\n<blockquote>\n<p>Hmm, any idea what could be happening with that test failure? Is there some special-case around sinking for <code>cmp</code> that needs to be extended to <code>test</code>?</p>\n</blockquote>",
        "id": 344039598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679590097
    },
    {
        "content": "<p>meithecatte <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086#issuecomment-1481542899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086\">issue #6086</a>:</p>\n<blockquote>\n<p>Hmm, this optimization can turn one use at the IR level into two uses at the same instruction, at the opcode level. Perhaps this confuses the sinking logic?</p>\n</blockquote>",
        "id": 344040915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679590427
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086#issuecomment-1481560047\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6086\">issue #6086</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hmm, this optimization can turn one use at the IR level into two uses at the same instruction, at the opcode level. Perhaps this confuses the sinking logic?</p>\n</blockquote>\n<p>Yes, we have some subtle invariants here where lowering <code>icmp</code>/<code>fcmp</code> is special: we lower at every use (because otherwise we'd have to spill/restore flags), so we go to special lengths to not allow load sinking. See e.g. #3934. We'd like to come up with a more principled way to enforce this invariant, maybe a \"special\" lowering context state that knows we're lowering something that can be lowered multiple times; but right now we don't have that. Unfortunately I think this means that this change can't work as-is.</p>\n</blockquote>",
        "id": 344043979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679591095
    }
]