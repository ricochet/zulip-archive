[
    {
        "content": "<p>LorDawid opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9309\">issue #9309</a>:</p>\n<blockquote>\n<p>Is there any way to access interfaces of other WASM components?</p>\n<p>I've created a <code>plugin1</code> with the following <code>.wit</code> representation:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package test:plugin1;\n\nworld plugin1 {\n    import engine: interface {\n        print: func(msg: string);\n    }\n\n    export plugin1i: interface {\n        initialize-p1: func();\n    }\n}\n</code></pre></div>\n<p>And a <code>plugin2</code> with the following <code>.wit</code> representation:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package test:plugin2;\n\nworld plugin2 {\n    import engine: interface {\n        print: func(msg: string);\n    }\n\n    import plugin1i: interface {\n        initialize-p1: func();\n    }\n\n    export initialize-p2: func();\n}\n</code></pre></div>\n<p>Which is supposed to use the <code>plugin1</code>'s interface and call that method, but I haven't been able to find any documentation regarding this, so I'm wondering if it is even possible.</p>\n<p>This does not work as the message <code>component imports instance 'plugin1i', but a matching implementation was not found in the linker</code> appears.</p>\n<p>The only thing I seem to be able to do is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"plugin1i\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"initialize-p1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Call\"</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>But the goal is not to define the functions myself, but rather to import them from other instances, and I'm also kinda curious about why this even works (are interfaces like instances under the hood? Why do I use <code>.instance()</code> to access a given interface?).</p>\n<p>I could not find any documentation regarding this, so I hope that someone could help me here.</p>\n<p>I'm trying to make a plugin system where dynamically loaded plugins can depend on each other (without having access to each other's source code), and I'm wondering if the component model is even the right thing to use here.</p>\n</blockquote>",
        "id": 472730742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727280230
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9309#issuecomment-2380755990\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9309\">issue #9309</a>:</p>\n<blockquote>\n<p>Thanks for the report! At this time linking like in the same manner as core wasm is not supported. That means that you can't take an export from one component and use it as the import of another component. To work around that you'll be required to use the host as you're doing here. Effectively you're on the right track and the goal is to fill out <code>Ok(println!(\"Call\"))</code>.</p>\n<p>How exactly you fill that in depends on your use case. If you statically know the signatures, you can specialize to that. If you don't statically know the signatures (which I suspect is the case due to the plugin nature of this) you'll want to use <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.func_new\"><code>func_new</code></a> to define the function in <code>LinkerInstance</code> and <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Func.html#method.call\"><code>Func::call</code></a>. You'll need to do some \"reflection\" of sorts to iterate the exports of plugin component and to fill out the linker to instantiate the next component as well.</p>\n<p>You're right this isn't well documented, and it's something we should improve! In the meantime though let me know if that doesn't work (or perhaps if it's so burdensome you change approaches altogether). </p>\n</blockquote>",
        "id": 473363609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727541184
    },
    {
        "content": "<p>LorDawid closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9309\">issue #9309</a>:</p>\n<blockquote>\n<p>Is there any way to access interfaces of other WASM components?</p>\n<p>I've created a <code>plugin1</code> with the following <code>.wit</code> representation:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package test:plugin1;\n\nworld plugin1 {\n    import engine: interface {\n        print: func(msg: string);\n    }\n\n    export plugin1i: interface {\n        initialize-p1: func();\n    }\n}\n</code></pre></div>\n<p>And a <code>plugin2</code> with the following <code>.wit</code> representation:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package test:plugin2;\n\nworld plugin2 {\n    import engine: interface {\n        print: func(msg: string);\n    }\n\n    import plugin1i: interface {\n        initialize-p1: func();\n    }\n\n    export initialize-p2: func();\n}\n</code></pre></div>\n<p>Which is supposed to use the <code>plugin1</code>'s interface and call that method, but I haven't been able to find any documentation regarding this, so I'm wondering if it is even possible.</p>\n<p>This does not work as the message <code>component imports instance 'plugin1i', but a matching implementation was not found in the linker</code> appears.</p>\n<p>The only thing I seem to be able to do is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"plugin1i\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"initialize-p1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">():</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Call\"</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>But the goal is not to define the functions myself, but rather to import them from other instances, and I'm also kinda curious about why this even works (are interfaces like instances under the hood? Why do I use <code>.instance()</code> to access a given interface?).</p>\n<p>I could not find any documentation regarding this, so I hope that someone could help me here.</p>\n<p>I'm trying to make a plugin system where dynamically loaded plugins can depend on each other (without having access to each other's source code), and I'm wondering if the component model is even the right thing to use here.</p>\n</blockquote>",
        "id": 480711533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730810375
    }
]