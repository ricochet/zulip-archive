[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815\">Issue #1815</a>:</p>\n<blockquote>\n<p>Right now, we only insert them at (resumable) interrupt traps and calls:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61</a></p>\n<p>But long running wasm could be in a loop, and if this loop doesn't make any calls or have interrupt traps, there will be no safepoints inserted, which in turn means that GC cannot happen inside this long-running wasm loop.</p>\n<p>We should fix this by inserting <code>safepoint</code>s at loop headers.</p>\n</blockquote>",
        "id": 199687861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591225362
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815\">Issue #1815</a>:</p>\n<blockquote>\n<p>Right now, we only insert them at (resumable) interrupt traps and calls:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61</a></p>\n<p>But long running wasm could be in a loop, and if this loop doesn't make any calls or have interrupt traps, there will be no safepoints inserted, which in turn means that GC cannot happen inside this long-running wasm loop.</p>\n<p>We should fix this by inserting <code>safepoint</code>s at loop headers.</p>\n</blockquote>",
        "id": 199687862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591225362
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815#issuecomment-638507582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815\">Issue #1815</a>:</p>\n<blockquote>\n<p>Actually, now that I think about it, the loop header has to have some sort of check for whether the collector requested that the Wasm stop and synchronize for root marking or whatever. This synchronization will most likely will involve some kind of call, e.g </p>\n<div class=\"codehilite\"><pre><span></span><code>block0:\n    gc_requested = i32.load &lt;known offset from vmctx for the gc flag&gt;\n    brnz gc_requested, block2\n    fallthrough block1\n\nblock1:\n    ...\n\nblock2:\n    call synchronize_with_gc\n    jump block1\n</code></pre></div>\n\n\n<p>And in the case that a gc is requested, we call some <code>synchronize_with_gc</code> function, and this call will get a <code>safepoint</code> inserted. So maybe everything is ok here?</p>\n<p>If we want to do the virtual memory tricks described in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">https://github.com/bytecodealliance/wasmtime/issues/1749</a> for gc synchronization, then we will need some extra work here though.</p>\n</blockquote>",
        "id": 199688451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591225848
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815\">Issue #1815</a>:</p>\n<blockquote>\n<p>Right now, we only insert them at (resumable) interrupt traps and calls:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/regalloc/safepoint.rs#L54-L61</a></p>\n<p>But long running wasm could be in a loop, and if this loop doesn't make any calls or have interrupt traps, there will be no safepoints inserted, which in turn means that GC cannot happen inside this long-running wasm loop.</p>\n<p>We should fix this by inserting <code>safepoint</code>s at loop headers.</p>\n</blockquote>",
        "id": 199688474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591225886
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815#issuecomment-638509344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1815\">Issue #1815</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 199688883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591226182
    }
]