[
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>.</p>",
        "id": 423105607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708727709
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>.</p>",
        "id": 423105608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708727709
    },
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a> from <code>jeffcharles:fix-400-params-test</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nUsing 16 bits instead of 8 bits to track the register index allows us to support parameter lists that are longer than 400. It looks like v8 supports 1000 params.</p>\n</blockquote>",
        "id": 423105609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708727709
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>.</p>",
        "id": 423105610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708727709
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#pullrequestreview-1899052498\">PR review</a>.</p>",
        "id": 423106395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708728219
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#pullrequestreview-1899052498\">PR review</a>.</p>",
        "id": 423106396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708728219
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#discussion_r1501243888\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we also update the <code>aarch64</code> abi given that we're here? It still uses <code>u8</code>.</p>\n</blockquote>",
        "id": 423106397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708728220
    },
    {
        "content": "<p>jeffcharles submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#pullrequestreview-1899067911\">PR review</a>.</p>",
        "id": 423108387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708729489
    },
    {
        "content": "<p>jeffcharles created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#discussion_r1501254038\">PR review comment</a>:</p>\n<blockquote>\n<p>I noticed the <code>RegIndexEnv</code> implementation in <code>aarch64</code> returns <code>Option&lt;u8&gt;</code> with a value of <code>None</code> if the index is incremented past the <code>limit</code> field and the <code>limit</code> field defaults to <code>8</code>. There is one place where we call <code>set_limit</code> with a value of <code>1</code>. So as far as I can tell, if we had over 8 parameters, the increment function would no longer be called so, with more than 255 parameters, an overflow would not happen like was the case with the x86 implementation.</p>\n<p>Does it still make sense to use a <code>u16</code> instead of a <code>u8</code>?</p>\n</blockquote>",
        "id": 423108388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708729489
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>.</p>",
        "id": 423109167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708730044
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#issuecomment-1962211663\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 423121126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708739675
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#pullrequestreview-1900966916\">PR review</a>.</p>",
        "id": 423402475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708956322
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#discussion_r1502667486\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah good point -- thinking a bit more about this, I think that the root of the issue is the lack of limits for each register class. Perhaps instead of widening the type to <code>u16</code> we should add an upper-bound and make <code>increment</code> return <code>None</code>. The upper-bound could be either:</p>\n<ul>\n<li>A <code>limit</code> like in the case of <code>aarch64</code>, which could be derived from the calling convention.</li>\n<li>Using a checked add in <code>increment</code> (<code>u8::MAX</code> is good enough to represent the register arguments)</li>\n</ul>\n</blockquote>",
        "id": 423402476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708956322
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993#issuecomment-1964299858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>:</p>\n<blockquote>\n<p>Note that we follow the JS embedding limits in Wasmtime for maximum compatibility with Web engines: <a href=\"https://webassembly.github.io/spec/js-api/index.html#limits\">https://webassembly.github.io/spec/js-api/index.html#limits</a></p>\n</blockquote>",
        "id": 423409178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708958271
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7993\">PR #7993</a>.</p>",
        "id": 423861009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709139036
    }
]