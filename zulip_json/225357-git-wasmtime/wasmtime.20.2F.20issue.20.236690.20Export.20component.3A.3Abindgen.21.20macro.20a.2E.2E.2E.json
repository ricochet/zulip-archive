[
    {
        "content": "<p>kajacx opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690\">issue #6690</a>:</p>\n<blockquote>\n<h4>Export component::bindgen! macro as a normal function</h4>\n<p>The <code>wasm_bridge::component::bindgen!</code> macro works well for it's intended purpose, but I need to modify it's output as a <code>TokenStream</code>.</p>\n<h4>Benefit</h4>\n<p>In <a href=\"https://github.com/kajacx/wasm-bridge\"><code>wasm-bridge</code></a>, I need to call the <code>wasm_bridge::component::bindgen!</code> macro and modify the import paths to use <code>wasm_bridge::</code> instead of <code>wasmtime::</code>, for example.</p>\n<p>This can be done by modifying the <code>TokenStream</code> (I hope), but I cannot call the macro as a normal function to modify the output. See <a href=\"https://users.rust-lang.org/t/call-proc-macro-and-modify-its-output/96486\">this post</a> to get a better understanding.</p>\n<h4>Implementation</h4>\n<p>Proc macro crates cannot export \"normal\" functions, so I guess the only option would be to split the <a href=\"https://docs.rs/wasmtime-component-macro/10.0.1/wasmtime_component_macro/\"><code>wasmtime_component_macro</code></a> crate into two crates:</p>\n<ul>\n<li><code>wasmtime_component_macro_impl</code> - Implement the <code>bindgen</code> macro as a normal function that takes and returns a <code>TokenStream</code>.</li>\n<li><code>wasmtime_component_macro</code> - Export a <code>bindgen</code> proc macro, that would just call the impl crate's code.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>The \"use <code>wasm_bridge::</code> instead of <code>wasmtime::</code> path\" issue can be solved by using a <code>wasmtime</code> mod like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">wasmtime</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasm_bridge</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but there are other changes to the <code>TokenStream</code> that I will need to make.</p>\n</blockquote>",
        "id": 372665270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688577446
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690#issuecomment-1622664036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690\">issue #6690</a>:</p>\n<blockquote>\n<p>Thanks for the report! I'm not sure that this is something we want to \"official\" support though. Technically it's possible for you to depend on <code>wasmtime-wit-bindgen</code> and run that as a code generator, but the output is intertwined with the details of Wasmtime's embedding API which includes some public-but-shouldn't-be-touched portions used by derive (e.g. the hidden methods in <code>Lift</code> and <code>Lower</code>). While it's possible for you to export all these types in a different crate (such as <code>wasm_bridge</code>) there's no stability guarantees or any sort of compatibility guarantees we can reasonably provide. This means that your best bet may be to pin to a specific version of <code>wasmtime-wit-bindgen</code> if you'd like to use the source.</p>\n<p>Otherwise though the \"guts\" of <code>wasmtime-wit-bindgen</code> are intended to be somewhat simple. The main logic is all in the <code>wit-parser</code> crate which takes care of much of the implementation details of WIT and things like that, so you may also want to either copy Wasmtime's implementation and start editing it or start from scratch.</p>\n<p>In general though this is not something we can commit on our end to helping to maintain, so in that sense I'm not sure there's going to be a great way for us to satisfy this feature request.</p>\n</blockquote>",
        "id": 372730042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688599028
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690\">issue #6690</a>:</p>\n<blockquote>\n<h4>Export component::bindgen! macro as a normal function</h4>\n<p>The <code>wasm_bridge::component::bindgen!</code> macro works well for it's intended purpose, but I need to modify it's output as a <code>TokenStream</code>.</p>\n<h4>Benefit</h4>\n<p>In <a href=\"https://github.com/kajacx/wasm-bridge\"><code>wasm-bridge</code></a>, I need to call the <code>wasm_bridge::component::bindgen!</code> macro and modify the import paths to use <code>wasm_bridge::</code> instead of <code>wasmtime::</code>, for example.</p>\n<p>This can be done by modifying the <code>TokenStream</code> (I hope), but I cannot call the macro as a normal function to modify the output. See <a href=\"https://users.rust-lang.org/t/call-proc-macro-and-modify-its-output/96486\">this post</a> to get a better understanding.</p>\n<h4>Implementation</h4>\n<p>Proc macro crates cannot export \"normal\" functions, so I guess the only option would be to split the <a href=\"https://docs.rs/wasmtime-component-macro/10.0.1/wasmtime_component_macro/\"><code>wasmtime_component_macro</code></a> crate into two crates:</p>\n<ul>\n<li><code>wasmtime_component_macro_impl</code> - Implement the <code>bindgen</code> macro as a normal function that takes and returns a <code>TokenStream</code>.</li>\n<li><code>wasmtime_component_macro</code> - Export a <code>bindgen</code> proc macro, that would just call the impl crate's code.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>The \"use <code>wasm_bridge::</code> instead of <code>wasmtime::</code> path\" issue can be solved by using a <code>wasmtime</code> mod like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">wasmtime</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasm_bridge</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but there are other changes to the <code>TokenStream</code> that I will need to make.</p>\n</blockquote>",
        "id": 372730043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688599029
    },
    {
        "content": "<p>kajacx <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690#issuecomment-1623391625\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690\">issue #6690</a>:</p>\n<blockquote>\n<p>Thanks for the reply @alexcrichton </p>\n<blockquote>\n<p>Technically it's possible for you to depend on <code>wasmtime-wit-bindgen</code> and run that as a code generator</p>\n</blockquote>\n<p>I can invoke the <code>bindgen!</code> macro with a world definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime_component_macro</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../protocol.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"test-world\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>but that is not what I want. What I want is to manipulate the <code>TokenStream</code> coming from that macro. It is my understanding that this is currently impossible in Rust, but there is a workaround to separate the code into two crates, like I described in the original post.</p>\n<blockquote>\n<p>there's no stability guarantees or any sort of compatibility guarantees we can reasonably provide</p>\n</blockquote>\n<p>That's fine, I can pin a specific version like you said.</p>\n<blockquote>\n<p>so you may also want to either copy Wasmtime's implementation and start editing it or start from scratch.</p>\n</blockquote>\n<p>That's another option: copy the entire code of <code>wasmtime_bindgen_macro</code> and just remove the <code>[proc_macro]</code> from the <code>bindgen</code> function, so I can call it with a <code>TokenStream</code> and get a <code>TokenStream</code> back. This would work, but would be even more unstable with regards to changes in wasmtime, because I would need to manually update the entire crate every time a new version is released.</p>\n<p>But this would open new doors, where, as you said, I could change the code directly inside this \"clone\" instead of relying on manipulation the <code>TokenStream</code>, which might be better moving forward.</p>\n<p>This is not something I need right now, so I guess I will cross that <em>bridge</em> when I get there.</p>\n</blockquote>",
        "id": 372836375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688637727
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690#issuecomment-1624073311\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6690\">issue #6690</a>:</p>\n<blockquote>\n<p>Yes I understand invoking the macro doesn't work for you, I mean to depend on the internals of the macro or, as you've put it, copying the <code>wasmtime_bindgen_macro</code> crate/module.</p>\n<p>Manual updates are expected for something like this as it's not something we can reasonably \"officially\" support, which is where pinning comes in where you could be compatible with a historical version if you'd like.</p>\n</blockquote>",
        "id": 372976243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688665077
    }
]