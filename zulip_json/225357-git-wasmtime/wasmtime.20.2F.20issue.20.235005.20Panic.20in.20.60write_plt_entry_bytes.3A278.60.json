[
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the following line. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 302233502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664880364
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the following line. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>More info:</p>\n<h1>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</h1>\n<h1>My JIT only declares some external rust functions and creates a wrapper function that calls those.</h1>\n<h1>I ran into another memory permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</h1>\n</blockquote>",
        "id": 302234086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664880655
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the following line. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>More info:</p>\n<ul>\n<li>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</li>\n<li>My JIT only declares some external rust functions and creates a wrapper function that calls those.</li>\n<li>I ran into another memory permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</li>\n</ul>\n</blockquote>",
        "id": 302234111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664880666
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the following line. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>More info:</p>\n<ul>\n<li>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</li>\n<li>My JIT only declares some external rust functions and creates a wrapper function that calls those.</li>\n<li>I ran into another memory permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</li>\n<li>Disabling <code>is_pic</code> solves this panic, is that a bug?</li>\n</ul>\n</blockquote>",
        "id": 302234189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664880713
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the following line. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>More info:</p>\n<ul>\n<li>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</li>\n<li>My JIT only declares some external rust functions and creates a wrapper function that calls those.</li>\n<li>I previously ran into another memory execution permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</li>\n<li>Disabling <code>is_pic</code> obviously solves this panic, is that a bug?</li>\n</ul>\n</blockquote>",
        "id": 302235765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664881288
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the line shown below. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>More info:</p>\n<ul>\n<li>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</li>\n<li>My JIT only declares some external rust functions and creates a wrapper function that calls those.</li>\n<li>I previously ran into another memory execution permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</li>\n<li>Disabling <code>is_pic</code> obviously solves this panic, is that a bug?</li>\n</ul>\n</blockquote>",
        "id": 302236597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664881589
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I'm getting a panic and the stacktrace points at the line shown below. This happens at the very early stages when I initialize my JIT and try to declare some functions. Any hints on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_plt_entry_bytes</span><span class=\"p\">(</span><span class=\"n\">plt_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">got_ptr</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">AtomicPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">plt_val</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">to_ne_bytes</span><span class=\"p\">(</span><span class=\"kt\">i32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..................</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>More info</h3>\n<ul>\n<li>I'm running on <code>x86_64</code> and <code>Ubuntu 20</code>.</li>\n<li>My JIT only declares some external rust functions and creates a wrapper function that calls those.</li>\n<li>I previously ran into another memory execution permissions problem and was pointed to use the feature flag <code>selinux-fix</code> which solved that problem (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347\">https://github.com/bytecodealliance/wasmtime/issues/4980#issue-1391090347</a>).</li>\n<li>Disabling <code>is_pic</code> obviously solves this panic, is that a bug?</li>\n</ul>\n</blockquote>",
        "id": 302236647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664881615
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1266808528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>When is_pic is enabled, it requires all code to be within 2GB of each other as a 32bit signed pc-relative offset is used for getting the address of called local functions. There is no code to guarantee this, thus leading to panics like this. I've known about this issue for a long time, but haven't had the time to think of a good solution.</p>\n</blockquote>",
        "id": 302239151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664882685
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1268627750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>Pretty much.</p>\n</blockquote>",
        "id": 302493098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664986503
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1268626959\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I have been trying to wrap my head around this for a while now. So this is happening because the got and plt entries for a given function get allocated addresses too far from each other or?</p>\n</blockquote>",
        "id": 302493221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664986530
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence?</li>\n<li>Are there any external/local function calls that go through the PLT? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665038817
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence?</li>\n<li>Are there any external/local function calls that go through the PLT? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665038839
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence?</li>\n<li>Are there any external or even local function calls that go through the PLT? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665038856
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence?</li>\n<li>Are there any external or even local function calls that emit PLT relocations and go through the PLT at call sites? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665038883
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence? I saw in the <code>isa/x64/inst/emit.rs</code> file entries for <code>Inst::CallKnown</code> and <code>Inst::CallUnknown</code> but I ca't connect the dots back to the IR call instructions.</li>\n<li>Are there any external or even local function calls that emit PLT relocations and go through the PLT at call sites? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665039058
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269427862\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>@bjorn3 I'm trying to understand why a PLT entry is always created for each function declaration in the module in pic mode. I have some questions:</p>\n<ul>\n<li>Where exactly in the code does the <a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/trait.InstBuilder.html#method.call\">call instruction</a> get translated to the target's call instruction/sequence? I saw in the <code>isa/x64/inst/emit.rs</code> file entries for <code>Inst::CallKnown</code> and <code>Inst::CallUnknown</code> but I can't connect the dots back to the IR call instructions.</li>\n<li>Are there any external or even local function calls that emit PLT relocations and go through the PLT at call sites? I saw that <code>X86CallPLTRel4</code> is only generated for this special instruction <code>ElfTlsGetAddr</code>?<br>\n</li>\n</ul>\n</blockquote>",
        "id": 302591868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665039068
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269458258\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>call lowers to CallKnown. call_indirect to CallUnknown.</p>\n<blockquote>\n<p>Are there any external or even local function calls that emit PLT relocations and go through the PLT at call sites? I saw that X86CallPLTRel4 is only generated for this special instruction ElfTlsGetAddr?</p>\n</blockquote>\n<p>For PLT, no unless hotswapping is enabled. For GOT, yes CallKnown turns into GOT lookup followed by an indirect call. It would likely be possible to stop maintaining the PLT when hotswapping is disabled, but the GOT has the same issue.</p>\n</blockquote>",
        "id": 302594120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665040213
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269458258\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>call lowers to CallKnown. call_indirect to CallUnknown.</p>\n<blockquote>\n<p>Are there any external or even local function calls that emit PLT relocations and go through the PLT at call sites? I saw that X86CallPLTRel4 is only generated for this special instruction ElfTlsGetAddr?</p>\n</blockquote>\n<p>For PLT, no unless hotswapping is enabled. For GOT, yes CallKnown turns into GOT lookup followed by an indirect call in some cases. It would likely be possible to stop maintaining the PLT when hotswapping is disabled, but the GOT has the same issue.</p>\n</blockquote>",
        "id": 302594157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665040237
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269529371\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>If I got it right, for the hotswapping we <code>declare_function</code> once and then we can (re)define that function through this sequence: <code>define_function</code> + <code>finalize_definitions</code> + <code>get_finalized_function</code> which compiles/loads the (new) definition in a new piece of memory and returns the address to it, i think it does not use or clean the memory of the old definition. My question is why do we need the PLT indirection if we already get the address to the newly created definition?</p>\n</blockquote>",
        "id": 302600132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665043129
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269529371\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>If I got it right, for the hotswapping we <code>declare_function</code> once and then we can (re)define that function through this sequence: (<code>prepare_for_function_redefine</code>) + <code>define_function</code> + <code>finalize_definitions</code> + <code>get_finalized_function</code> which compiles/loads the (new) definition in a new piece of memory and returns the address to it, i think it does not use or clean the memory of the old definition. My question is why do we need the PLT indirection if we already get the address to the newly created definition?</p>\n</blockquote>",
        "id": 302600169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665043156
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269589638\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>The <code>define_function</code> replaces the entry in the GOT, causing all calls from the old function to be redirected to the new definition, even when done by other compiled code. If the GOT didn't exist, we would have to change all executable memory back to read+write, relocate it again and change it back. This is much slower and isn't thread safe. The PLT indirection is for cases where a direct GOT access is not possible, like for function pointers. The PLT is basically a trampoline jumping to the address in the corresponding GOT entry.</p>\n<blockquote>\n<p>i think it does not use or clean the memory of the old definition.</p>\n</blockquote>\n<p>Indeed. That it doesn't deallocate the old definition is something I would like to see fixed, but that will require a more complex scheme for allocating memory to put the executable code in and a way to check that the function is no longer in use by any thread.</p>\n</blockquote>",
        "id": 302605291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665045399
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269667569\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>Oh I believe I got it now, this is done through <code>get_address</code> that returns the PLT entry for hotswapped mode instead of the actual function pointer. This hotswapping is probably meant for the non top level functions, so If you have X calling Y, you can get a finalized definition to X you can hotswap Y, but you can't get PLT entries to top level functions right?</p>\n</blockquote>",
        "id": 302612763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665048252
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269695464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh I believe I got it now, this is done through get_address that returns the PLT entry for hotswapped mode instead of the actual function pointer</p>\n</blockquote>\n<p>Indeed.</p>\n<blockquote>\n<p>This hotswapping is probably meant for the non top level functions, so If you have X calling Y, you can get a finalized definition to X you can hotswap Y, but you can't get PLT entries to top level functions right?</p>\n</blockquote>\n<p><code>get_finalized_function</code> returns a PLT entry too in hotswap mode I believe.</p>\n</blockquote>",
        "id": 302615464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665049253
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269699573\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I think it just returns the pointer to the allocated memory where the function was loaded unless I missed some other indirection :) </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/backend.rs#L379\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/backend.rs#L379</a></p>\n</blockquote>",
        "id": 302615888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665049406
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269703859\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>Indeed.</p>\n</blockquote>",
        "id": 302616374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665049567
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269713665\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>Thanks alot @bjorn3 for all the support <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>.</p>\n<p>Feel free to close the issue if you have something that duplicates the original problem. I saw your suggestion in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a> which can hit two birds with one stone as far as I understood.</p>\n</blockquote>",
        "id": 302617244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665049922
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-1269732584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>I don't believe I had opened an issue for this already, so keeping it open is fine I think.</p>\n</blockquote>",
        "id": 302619083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665050643
    },
    {
        "content": "<p>Dimchikkk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-2198501580\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<blockquote>\n<p>Indeed. That it doesn't deallocate the old definition is something I would like to see fixed, but that will require a more complex scheme for allocating memory to put the executable code in and a way to check that the function is no longer in use by any thread.</p>\n</blockquote>\n<p>Hi @bjorn3 , sorry for hijacking the thread but just wondering if you could share mode details on how would you start implementing swapped function deallocation... is it sort of garbage collector that tracks all definitions... if it was swapped with new definition and old definition is not used by any thread - deallocate memory?<br>\n</p>\n</blockquote>",
        "id": 448096513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719741003
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005#issuecomment-2198512336\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5005\">issue #5005</a>:</p>\n<blockquote>\n<p>My idea has been for the user of cranelift-jit to tell which functions are no longer necessary. Then cranelift-jit needs to store which parts of each page are still used by necessary functions and when no used function is still part of the page, the page can be deallocated. Or alternatively at the cost of memory usage each function can be stored in separate pages which would allow immediately deallocating all pages when a function is marked as unused..</p>\n</blockquote>",
        "id": 448101566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719743564
    }
]