[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211799023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601489300
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211799348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601489481
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211807464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601493604
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a>.</p>",
        "id": 211807606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601493675
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a>.</p>",
        "id": 211807609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601493677
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211810518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601495205
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-499874453\">PR Review</a>.</p>",
        "id": 211852455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508366
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-499874453\">PR Review</a>.</p>",
        "id": 211852456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508366
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497853577\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm a little uneasy about the hidden semantics here -- it feels like a leaky abstraction. (I know these are pre-existing, but the confusion is appearing now that I see this comment...). Could we perhaps have an enum indicating whether the output of a r/m, r instruction depends on the initial value or not (i.e., <code>IsModOrDef::Def</code> vs. <code>IsModOrDef::Mod</code>)? That would make things more clear, I think.</p>\n</blockquote>",
        "id": 211852457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508366
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497851835\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think we should have a bit more here to describe when this might be useful: basically, when we have a sequence of instructions whose register usages are nominally <code>mod</code>s, but such that the combination of operations creates a result that is independent of the initial register value. It's thus semantically a <code>def</code>, not a <code>mod</code>, when all the instructions are taken together, so we want to ensure the register is defined (its live-range starts) prior to the sequence to keep analyses happy.</p>\n<p>It's worth briefly mentioning the alternative as well, namely a compound instruction that somehow encapsulates the others and reports its own defs/uses/mods; this adds complexity (the instruction list is no longer flat) and requires knowledge about semantics and initial-value independence anyway.</p>\n</blockquote>",
        "id": 211852458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508366
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497853693\">PR Review Comment</a>:</p>\n<blockquote>\n<p>s/declaring/declare/</p>\n</blockquote>",
        "id": 211852459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508367
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497852673\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Let's pull this out into a toplevel helper; I'd rather keep the main <code>match</code> from exploding in size with nested functions :-)</p>\n</blockquote>",
        "id": 211852460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508367
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497852842\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What is <code>w_bit</code> (is it <code>is64</code> as elsewhere)?</p>\n</blockquote>",
        "id": 211852461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508367
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r497853969\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, I think it might be good to choose a better name. In the spirit of Rust's <code>mem::uninitialized()</code>, can we have <code>XmmUninitializedValue</code> that defines a register to an uninitialized value?</p>\n</blockquote>",
        "id": 211852462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601508367
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-500168926\">PR Review</a>.</p>",
        "id": 211886709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601544694
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-500168926\">PR Review</a>.</p>",
        "id": 211886710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601544695
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r498109284\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not a huge fan of this; instead could we just xorps the destination register, in the place where it's used? (There's already special handling of xorps X X in regalloc.) The slow down caused by the additional instruction in the pipeline may be recouped by the speedup caused by the lane dependency clearing.</p>\n<p>If we really really have to resort to a vcode instruction for this, please put it at the bottom of this list (there's a section for instructions that don't generate new code); Chris's name suggestion sounds good to me.</p>\n</blockquote>",
        "id": 211886711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601544695
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-500623941\">PR Review</a>.</p>",
        "id": 211955803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601577910
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r498446691\">PR Review Comment</a>:</p>\n<blockquote>\n<p>REX.W... changed.</p>\n</blockquote>",
        "id": 211955804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601577910
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-500638676\">PR Review</a>.</p>",
        "id": 211958725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601579162
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r498457215\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I agree that this is a leaky abstraction but I'm not confident <code>IsModOrDef</code> plugs the hole; let me open an issue to discuss: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2252\">https://github.com/bytecodealliance/wasmtime/issues/2252</a>.</p>\n</blockquote>",
        "id": 211958727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601579162
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211961275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601580241
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#pullrequestreview-500651728\">PR Review</a>.</p>",
        "id": 211961442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601580304
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#discussion_r498466432\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point; that was the intent but I forgot to <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>.</p>\n</blockquote>",
        "id": 211961444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601580305
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211961859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601580490
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a> from <code>comparisons</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change was originally intended to implement the remaining lane operations (<code>any_true</code>, <code>all_true</code>, and <code>splat</code>) in order to enable the <code>simd_lane.wast</code> spec test; however, I had forgotten that comparisons were necessary for some of those sequences so this change adds those as well.</p>\n</blockquote>",
        "id": 211962198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601580654
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248\">PR #2248</a>.</p>",
        "id": 212090049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601652573
    }
]