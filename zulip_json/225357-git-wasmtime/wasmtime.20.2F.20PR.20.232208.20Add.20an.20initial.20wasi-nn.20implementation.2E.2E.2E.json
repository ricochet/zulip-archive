[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[ ] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[ ] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 210555392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600452360
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[ ] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[ ] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 210555477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600452390
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 211948723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601574930
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 211948760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601574948
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\">pchickey</a> and <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 211948838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601574972
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-501328719\">PR Review</a>.</p>",
        "id": 212106038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601660637
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-501587824\">PR Review</a>.</p>",
        "id": 212207208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601789785
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-501587824\">PR Review</a>.</p>",
        "id": 212207209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601789785
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r499201527\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this copy of SECURITY.md file still needed? Does this come from wasi-nn-rust-bindings previously living in its own repository?</p>\n</blockquote>",
        "id": 212207210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601789785
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r499202284\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For my curiosity, what is a .bdsignore file?</p>\n</blockquote>",
        "id": 212207211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601789785
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r499206605\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is anyhow used in the witx-generation macros, or could it be a dev-dependency?</p>\n</blockquote>",
        "id": 212207212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601789785
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-507836370\">PR Review</a>.</p>",
        "id": 213218213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602623930
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r504264487\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Nope, comes from living in its own repository--removed.</p>\n</blockquote>",
        "id": 213218214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602623930
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-507836774\">PR Review</a>.</p>",
        "id": 213218286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602623971
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r504264818\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's from Black Duck Protex, which we have to use in scanning code we release... I'll remove them.</p>\n</blockquote>",
        "id": 213218287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602623972
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-507840548\">PR Review</a>.</p>",
        "id": 213218978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602624344
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#discussion_r504267797\">PR Review Comment</a>:</p>\n<blockquote>\n<p>If I remove it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0433</span><span class=\"p\">]</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span>: <span class=\"nc\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">undeclared</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">or</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">anyhow</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wiggle</span>::<span class=\"n\">wasmtime_integration</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"c1\">// The wiggle code to integrate with lives here:</span>\n<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">target</span>: <span class=\"nc\">witx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"c1\">// This must be the same witx document as used above:</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">25</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">missing_memory</span>: <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">witx</span>::<span class=\"n\">types</span>::<span class=\"n\">Errno</span>::<span class=\"n\">MissingMemory</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">___</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">undeclared</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">or</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">anyhow</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>So it looks like it needs to be included?</p>\n</blockquote>",
        "id": 213218979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602624344
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[ ] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[ ] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213219148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602624431
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[ ] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[ ] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213611112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602880668
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[ ] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213611174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602880686
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213611231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602880719
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/tests/example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213613088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602881700
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 213613137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602881740
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[ ] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214260433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603409991
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214260437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603409993
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214260531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603410052
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214260957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603410475
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214261050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603410566
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214261173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603410687
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214261382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603410932
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214261580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603411159
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214333077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603469624
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214334685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603470440
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214336346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603471232
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214337325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603471695
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214339413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603472773
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214339517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603472847
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214340083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603473142
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214343160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603474713
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214346774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603476438
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214346987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603476541
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214395467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603494183
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214396285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603495065
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214397616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603496490
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 214398962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603498070
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> as ready for review.</p>",
        "id": 214399700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603499092
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 214399940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603499404
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a>, <a href=\"https://github.com/pchickey\">pchickey</a> and <a href=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 214399951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603499407
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 215359603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604342115
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a> from <code>wasi-nn-rebased</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds a crate, <code>wasmtime-wasi-nn</code>, that uses <code>wiggle</code> to expose the current state of the wasi-nn API and <code>openvino</code> to implement the exposed functions. It includes an end-to-end test demonstrating how to do classification using wasi-nn:</p>\n<ul>\n<li><code>crates/wasi-nn/examples/classification-example</code> contains Rust code that is compiled to the <code>wasm32-wasi</code> target and run with a Wasmtime embedding that exposes the wasi-nn calls</li>\n<li>the example uses Rust bindings for wasi-nn contained in <code>crates/wasi-nn/tests/wasi-nn-rust-bindings</code>; this crate contains code generated by <code>witx-bindgen</code> and eventually should be its own standalone crate</li>\n</ul>\n<p>This change does not wire up wasi-nn to Wasmtime in any way that an external user would be able to observe.</p>\n<p>Things to discuss:</p>\n<ul>\n<li>[x] the end-to-end classification test contains a 95MB model weight file which adds considerable weight to a <code>git clone</code>--what to do? Removing the test would mean that the CI could not verify that <code>wasmtime-wasi-nn</code> works</li>\n<li>[x] the <code>openvino</code> crate is not yet published but should be when <a href=\"https://github.com/openvinotoolkit/openvino/pull/2342\">https://github.com/openvinotoolkit/openvino/pull/2342</a> is merged; this means that builds of this PR will fail until then [edit: I ended up publishing them prior to merging that PR; we are still trying to figure out where that code will end up]</li>\n<li>[x] the <code>wasi-nn-rust-bindings</code> crate should probably be its own repository but I cannot move it there until I wade through Intel's external release process (for reference, it took me several weeks for the <code>openvino</code> crate); it could be moved to its own repository in a separate PR</li>\n<li>[x] the last time we talked about this, the consensus was to hide the wasi-nn functionality behind a Cargo feature; I will check this item off once I figure out how to do that correctly but I wanted to get feedback on the current approach</li>\n</ul>\n</blockquote>",
        "id": 216550283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605227804
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208#pullrequestreview-531612487\">PR Review</a>.</p>",
        "id": 216915200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605552836
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2208\">PR #2208</a>.</p>",
        "id": 216915212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605552842
    }
]