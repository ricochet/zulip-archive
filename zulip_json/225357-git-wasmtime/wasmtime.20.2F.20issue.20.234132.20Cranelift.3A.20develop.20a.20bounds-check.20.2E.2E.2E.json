[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4132\">issue #4132</a>:</p>\n<blockquote>\n<p>When using explicit bounds checks for \"dynamic\" heaps, Cranelift generated code currently includes a comparison and conditional branch for every access (as well as the Spectre-mitigation conditional move if enabled).</p>\n<p>In some cases, it should be able to prove that subsequent accesses are \"superseded\" by the first: they occur at the same or earlier addresses. In such cases, we can only reach the second access if the first bounds-check succeeded (or else we would have trapped), and heaps can never shrink, so the second is unnecessary.</p>\n<p>We should develop such an analysis initially with a simple \"same index SSA-value\" test, and later enhance it with a value range analysis.</p>\n</blockquote>",
        "id": 281900554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652226057
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4132\">issue #4132</a>:</p>\n<blockquote>\n<p>When using explicit bounds checks for \"dynamic\" heaps, Cranelift generated code currently includes a comparison and conditional branch for every access (as well as the Spectre-mitigation conditional move if enabled).</p>\n<p>In some cases, it should be able to prove that subsequent accesses are \"superseded\" by the first: they occur at the same or earlier addresses. In such cases, we can only reach the second access if the first bounds-check succeeded (or else we would have trapped), and heaps can never shrink, so the second is unnecessary.</p>\n<p>We should develop such an analysis initially with a simple \"same index SSA-value\" test, and later enhance it with a value range analysis.</p>\n</blockquote>",
        "id": 281900555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652226057
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4132\">issue #4132</a>:</p>\n<blockquote>\n<p>When using explicit bounds checks for \"dynamic\" heaps, Cranelift generated code currently includes a comparison and conditional branch for every access (as well as the Spectre-mitigation conditional move if enabled).</p>\n<p>In some cases, it should be able to prove that subsequent accesses are \"superseded\" by the first: they occur at the same or earlier addresses. In such cases, we can only reach the second access if the first bounds-check succeeded (or else we would have trapped), and heaps can never shrink, so the second is unnecessary.</p>\n<p>We should develop such an analysis initially with a simple \"same index SSA-value\" test, and later enhance it with a value range analysis.</p>\n</blockquote>",
        "id": 281900557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652226057
    }
]