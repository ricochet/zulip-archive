[
    {
        "content": "<p>kajacx opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<h4>Make Wasmtime work on the web</h4>\n<p>The current <a href=\"https://docs.rs/crate/wasmtime/latest\">wasmtime Rust crate</a> works well on desktop, but I doesn't work on the web.</p>\n<h4>Benefit</h4>\n<p>Making wasmtime work on the web would allow to have a single application with single source code in Rust, and be able to build it as a desktop application or as a web application that would run in the browser.</p>\n<h4>Implementation</h4>\n<p>On the web, the browser runs the WASM modules. This would include the Rust application that is using wasmtime to load WASM modules, and those modules as well. This means that an engine or a compiler is not needed, and calls to the module's exported functions probably need to go through the broweser. <a href=\"https://wasmer.io/\">Wasmer</a> already manages to do this with the <code>js</code> feature,</p>\n<h4>Alternatives</h4>\n<p>One alternative is to use wasmer instead of wasmtime.</p>\n<p>Other alternative is to rewrite your entire application in TS if you want to run it on the web.</p>\n<p>Third alternative is to use wasm_bindgen as a bridge between your Rust application and the browser, and then call the module's functions from there.</p>\n</blockquote>",
        "id": 363019582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685706436
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504#issuecomment-1574041531\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<p>It sounds like you want the ability to use Wasmtime's API for embedders without any of Wasmtime's implementation of that API. The implementation is heavily tied to running under a traditional operating system and JIT-compiling native code, and I don't think there's anything there that would be useful to reuse in a browser. In addition, many aspects of Wasmtime's API and configuration options are impossible to implement in a browser, so only a small subset of the embedder API would work anyway.</p>\n<p>I would recommend instead that you create a new Rust crate providing a WebAssembly embedding API that uses browser interfaces when built for wasm, and uses Wasmtime otherwise. That allows you to define the API in a way that makes sense for both settings. You could even offer build-time options to use other engines besides Wasmtime, if you wanted to.</p>\n<p>Building that crate is out of scope for the Wasmtime project, but I think it would be a great contribution to the WebAssembly ecosystem. If you want to build it, I think the <a href=\"#narrow/stream/223391-wasm\">#wasm stream on the Bytecode Alliance Zulip</a> would be a good place to discuss the idea.</p>\n<p>I'm going to close this issue since I don't believe it's something that this team can address, but if I've misunderstood what you're asking for, you're welcome to re-open it.</p>\n</blockquote>",
        "id": 363112177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685724997
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<h4>Make Wasmtime work on the web</h4>\n<p>The current <a href=\"https://docs.rs/crate/wasmtime/latest\">wasmtime Rust crate</a> works well on desktop, but I doesn't work on the web.</p>\n<h4>Benefit</h4>\n<p>Making wasmtime work on the web would allow to have a single application with single source code in Rust, and be able to build it as a desktop application or as a web application that would run in the browser.</p>\n<h4>Implementation</h4>\n<p>On the web, the browser runs the WASM modules. This would include the Rust application that is using wasmtime to load WASM modules, and those modules as well. This means that an engine or a compiler is not needed, and calls to the module's exported functions probably need to go through the broweser. <a href=\"https://wasmer.io/\">Wasmer</a> already manages to do this with the <code>js</code> feature,</p>\n<h4>Alternatives</h4>\n<p>One alternative is to use wasmer instead of wasmtime.</p>\n<p>Other alternative is to rewrite your entire application in TS if you want to run it on the web.</p>\n<p>Third alternative is to use wasm_bindgen as a bridge between your Rust application and the browser, and then call the module's functions from there.</p>\n</blockquote>",
        "id": 363112179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685724998
    },
    {
        "content": "<p>kajacx <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504#issuecomment-1574237791\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<p>Yes, what I want is the ability to use single source code that would load and run wasm modules both on desktop and on the web. With wit bindgen support.</p>\n<p>But you are right to say it's out of scope for wasmtime, since doing so requires none of the hard work of actually running a WASM module, and only requires gluing together calls to the browser-provided APIs.</p>\n<p>The tough part will be making it work in a consistent and reusable way while supporting wit bindgen, because WASM without a bindgen kind of sucks.</p>\n<p>I guess I have work to do for the foreseeable future. Thanks for taking your time to write such a comprehensive reply.</p>\n</blockquote>",
        "id": 363151166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685735534
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504#issuecomment-1574242170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<p>@kajacx You may be interested in <a href=\"https://github.com/bytecodealliance/jco\">jco</a>, which is a set of tools for running components built with wit-bindgen in JS environments, including browsers.</p>\n</blockquote>",
        "id": 363151908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685735754
    },
    {
        "content": "<p>kajacx <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504#issuecomment-1574254472\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<p>Thanks, I have seen <code>jco</code> for the first time today. So far I have been using wasmer and wai bindgen, but I think I will be moving to wit bindgen and wasmtime instead, since wit bindgen supports more guest languages.</p>\n</blockquote>",
        "id": 363153693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685736313
    },
    {
        "content": "<p>kajacx edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6504\">issue #6504</a>:</p>\n<blockquote>\n<h4>Make Wasmtime work on the web</h4>\n<p>The current <a href=\"https://docs.rs/crate/wasmtime/latest\">wasmtime Rust crate</a> works well on desktop, but I doesn't work on the web.</p>\n<h4>Benefit</h4>\n<p>Making wasmtime work on the web would allow to have a single application with single source code in Rust, and be able to build it as a desktop application or as a web application that would run in the browser.</p>\n<h4>Implementation</h4>\n<p>On the web, the browser runs the WASM modules. This would include the Rust application that is using wasmtime to load WASM modules, and those modules as well. This means that an engine or a compiler is not needed, and calls to the module's exported functions probably need to go through the broweser. <a href=\"https://wasmer.io/\">Wasmer</a> already manages to do this with the <code>js</code> feature,</p>\n<h4>Alternatives</h4>\n<p>One alternative is to use wasmer instead of wasmtime.</p>\n<p>Other alternative is to rewrite your entire application in TS if you want to run it on the web.</p>\n<p>Third alternative is to use wasm_bindgen as a bridge between your Rust application and the browser, and then call the module's functions from there.</p>\n<h4><em>Edit</em></h4>\n<p>I have started work on a crate that would use <code>js-sys</code> on the web with the same API as wasmtime, see <a href=\"https://github.com/kajacx/wasm-bridge\">wasm-bridge</a>.</p>\n</blockquote>",
        "id": 371795189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688324592
    }
]