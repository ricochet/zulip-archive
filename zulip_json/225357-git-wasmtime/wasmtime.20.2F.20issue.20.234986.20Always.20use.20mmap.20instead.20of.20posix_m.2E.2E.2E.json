[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">issue #4986</a>:</p>\n<blockquote>\n<p>This currently behind the selinux-fix feature flag. SELinux doesn't allow making parts of the heap executable. In addition it seems that there is an issue in multithreaded environments causing permission issues leading to crashes when using posix_memalign instead of mmap. (see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">https://github.com/bytecodealliance/wasmtime/issues/4980</a>) I don't know why using posix_memalign was chosen initially. Maybe there is some advantage to it that I don't know of. If not, I don't see any reason to stay with posix_memalign as default. @sunfishcode do you remember why you used posix_memalign?</p>\n</blockquote>",
        "id": 301684772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664554681
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986#issuecomment-1263817001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">issue #4986</a>:</p>\n<blockquote>\n<p>It's <code>std::alloc::alloc</code> now, rather than <code>posix_memalign</code>, but the same question applies.</p>\n<p>I think the reason was that <code>alloc</code>/<code>posix_memalign</code> can be faster, because it can reuse free memory that the allocator has, rather than always requiring an mmap system call to allocate and a munmap system call to free each time. However, I don't have any data on whether it's actually faster.</p>\n</blockquote>",
        "id": 301695222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664557814
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986#issuecomment-1263827303\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">issue #4986</a>:</p>\n<blockquote>\n<p>Maybe we could make a simple memory allocator ourself? Unlike system allocators it doesn't have to deal with tiny allocations or allocations of fixed sizes, so complexity from that doesn't have to exist and it could be made aware of which page has which memory protection applied so that once a page is made executable it will only consider it allocatable once every function stored in it has been deallocated. This way it is also no longer necessary to allocate multiples of the page size.</p>\n</blockquote>",
        "id": 301697290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664558496
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986#issuecomment-1263832299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">issue #4986</a>:</p>\n<blockquote>\n<p>Another advantage of that would be that it allows keeping all code within 2GB even when allocating a lot of memory in between compiling functions. This is necessary to avoid the panics at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c1d6ca48a74ab6f356d08baa533b90b17ccb834a/cranelift/jit/src/compiled_blob.rs#L60\">https://github.com/bytecodealliance/wasmtime/blob/c1d6ca48a74ab6f356d08baa533b90b17ccb834a/cranelift/jit/src/compiled_blob.rs#L60</a> and elsewhere during applying of relocations.</p>\n</blockquote>",
        "id": 301698438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664558858
    },
    {
        "content": "<p>Mrmaxmeier <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986#issuecomment-1268125115\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">issue #4986</a>:</p>\n<blockquote>\n<p>I'm using a simple mmap-based allocator to work around #4000 (^) here: <a href=\"https://github.com/Mrmaxmeier/wasmtime/commits/cranelift-jit-reserve-vmem-area\">https://github.com/Mrmaxmeier/wasmtime/commits/cranelift-jit-reserve-vmem-area</a><br>\nThe branch is mostly a hack though and made for easy rebasing, but feel free to benchmark the mmap overhead with it ^^</p>\n</blockquote>",
        "id": 302410854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664958951
    }
]