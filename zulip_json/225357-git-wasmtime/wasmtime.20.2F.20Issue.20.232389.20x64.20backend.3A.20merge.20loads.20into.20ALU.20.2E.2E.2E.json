[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#issuecomment-725617443\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">Issue #2389</a>:</p>\n<blockquote>\n<blockquote>\n<p>In particular, we need to ensure<br>\nthat the use is the only use (otherwise the load happens more than<br>\nonce)</p>\n</blockquote>\n<p>If there are no atomic accesses in between, no effectful operations and no stores, then duplicating loads should be fine I think.</p>\n</blockquote>",
        "id": 216388506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605123072
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#issuecomment-725621521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">Issue #2389</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>In particular, we need to ensure<br>\nthat the use is the only use (otherwise the load happens more than<br>\nonce)</p>\n</blockquote>\n<p>If there are no atomic accesses in between, no effectful operations and no stores, then duplicating loads should be fine I think.</p>\n</blockquote>\n<p>I thought so too at first, but the interesting case occurs once we have threads/shared memory -- if a store to a particular address interleaves between two loads L1 and L2, which are two instances originating from the same CLIF-level load L, then L1 and L2 could produce different values, which could result in impossible executions.</p>\n<p>I <em>think</em> that some compilers may reason that such a case is undefined according to the memory consistency model, so anything can happen, but I'm a little uncomfortable allowing for this from a security / risk-mitigation perspective. Thoughts?</p>\n</blockquote>",
        "id": 216389452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605123555
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#issuecomment-725630535\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">Issue #2389</a>:</p>\n<blockquote>\n<blockquote>\n<p>if a store to a particular address interleaves between two loads L1 and L2, which are two instances originating from the same CLIF-level load L, then L1 and L2 could produce different values, which could result in impossible executions.</p>\n</blockquote>\n<p>That's why there must not be an atomic operation, nor instruction with side-effects. If neither exists in between, it is guaranteed that there is no synchronization between the current thread and another and as such multiple non-atomic memory accesses to the same location would consistute a data-race, which is UB.</p>\n</blockquote>",
        "id": 216391643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605124709
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#issuecomment-725631048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">Issue #2389</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think that some compilers may reason that such a case is undefined according to the memory consistency model, so anything can happen, but I'm a little uncomfortable allowing for this from a security / risk-mitigation perspective. Thoughts?</p>\n</blockquote>\n<p>There could be a new <code>no_race</code> memory flag to enable this optimization.</p>\n</blockquote>",
        "id": 216391765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605124782
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389#issuecomment-725862562\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">Issue #2389</a>:</p>\n<blockquote>\n<p>@cfallin +1 for not allowing loads to be duplicated.  We might be able to construct some complex story about why this is OK, but it's extra verification/reasoning-overhead/fragility that we don't want to carry if we don't have to.  Besides, loads are expensive and generally a hindrance to ILP.</p>\n</blockquote>",
        "id": 216431556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605161597
    }
]