[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2256\">Issue #2256</a>:</p>\n<blockquote>\n<p>As suggested by @bnjbvr in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#issuecomment-702627995\">https://github.com/bytecodealliance/wasmtime/pull/2248#issuecomment-702627995</a>, we should benchmark whether clearing a register with <code>PXOR</code> before emitting the sequence for <code>splat</code> will cause a slowdown on x64. Currently, #2248 adds a weird meta-instruction, <code>XmmUninitializedValue</code>, that tells the register allocator that the <code>dst</code> register is a <code>def</code>, not a <code>mod</code>, because the sequence of instructions emitted for <code>splat</code> will overwrite all lanes of <code>dst</code>. <code>XmmUninitializedValue</code> is dangerous, though, because we must be very careful to ensure the \"overwrite all lanes\" invariant holds--it would be preferable to remove it. One way to do so would be to initially emit a <code>PXOR dst, dst</code>, which the new backend recognizes as a <code>def</code>. I avoided this in #2248 because of increased code size, potential slowdown, and the fact that the old backend did not have it, but if we find that its emission causes no slowdown, we should add it and remove <code>XmmUninitializedValue</code>.</p>\n</blockquote>",
        "id": 212091679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601653273
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2256\">Issue #2256</a>:</p>\n<blockquote>\n<p>As suggested by @bnjbvr in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2248#issuecomment-702627995\">https://github.com/bytecodealliance/wasmtime/pull/2248#issuecomment-702627995</a>, we should benchmark whether clearing a register with <code>PXOR</code> before emitting the sequence for <code>splat</code> will cause a slowdown on x64. Currently, #2248 adds a weird meta-instruction, <code>XmmUninitializedValue</code>, that tells the register allocator that the <code>dst</code> register is a <code>def</code>, not a <code>mod</code>, because the sequence of instructions emitted for <code>splat</code> will overwrite all lanes of <code>dst</code>. <code>XmmUninitializedValue</code> is dangerous, though, because we must be very careful to ensure the \"overwrite all lanes\" invariant holds--it would be preferable to remove it. One way to do so would be to initially emit a <code>PXOR dst, dst</code>, which the new backend recognizes as a <code>def</code>. I avoided this in #2248 because of increased code size, potential slowdown, and the fact that the old backend did not have it, but if we find that its emission causes no slowdown, we should add it and remove <code>XmmUninitializedValue</code>.</p>\n</blockquote>",
        "id": 212091881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601653353
    }
]