[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1360022415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 317018777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671562955
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1361106081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<blockquote>\n<p>Trevor tells me that he ran this fuzz target for four hours without finding any bugs, which actually has me concerned that it may not be testing what we wanted to test. </p>\n</blockquote>\n<p>That's weird, when I ran this it crashed almost immediately even without a previous corpus.</p>\n<p>Ran it again with (This is just the run string that I usually use for fuzzgen):<br>\n<code>cargo +nightly fuzz run --no-default-features cranelift-compile -- -rss_limit_mb=8192 -max_len=128 -runs=5000000</code></p>\n<p>Gives me the following input (base64'd):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">////L/////////////////8K/wAAXQAAAAD/AQAAAA==</span>\n</code></pre></div>\n<p>Crashes with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Undeclared</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"o\">!'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"o\">/</span><span class=\"n\">fuzz_targets</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">60</span>:<span class=\"mi\">53</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 317120727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671616961
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1361271210\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>A follow up from the issue above, the default fuzzgen config generates random function references even if they don't actually exist. This works for icache, but <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fac4a915a3848f7efc26bdc50b6545b476545d35/cranelift/fuzzgen/src/lib.rs#L311-L314\">not for fuzzgen</a> since there we actually try to do some linking (via cranelift-jit).</p>\n<p>Altering that config for this target does get it past that error.</p>\n</blockquote>",
        "id": 317149882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671626802
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1361271210\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>A follow up from the issue above, the default fuzzgen config generates random function references even if they don't actually exist. This works for icache, but <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fac4a915a3848f7efc26bdc50b6545b476545d35/cranelift/fuzzgen/src/lib.rs#L311-L314\">not for fuzzgen (and compile)</a> since there we actually try to do some linking (via cranelift-jit).</p>\n<p>Altering that config for this target does get it past that error.</p>\n</blockquote>",
        "id": 317149952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671626823
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1361797263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>Huh, I guess I'm surprised that <code>cranelift-jit</code> works at all for cross-compiling. I don't think we should try to test those code paths when cross-compiling. So I think this is another argument for merging this new fuzz target into <code>cranelift-icache</code>, or at least making it more closely resemble that fuzz target.</p>\n</blockquote>",
        "id": 317218772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671646302
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1369917065\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>Could this perhaps get added as a mode to <code>cranelift-fuzzgen</code> instead of adding a new fuzz-target? Mostly due to how oss-fuzz allocates time I think it would be best to not expand the time allocated for Cranelift-specific fuzzing since the time alloted to cranelift-fuzzgen is probably good enough, although I could see this going both ways.</p>\n<p>My thinking is that the first byte of the input, for example, and its lowest bit would indicate \"run in an interpreter\" or \"compile, possibly a cross-compile\"</p>\n</blockquote>",
        "id": 319221898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672760505
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1369925044\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>Merging this into icache would have the same effect right? We would keep the same number of targets as we do today (i.e. <code>fuzzgen</code> and <code>icache</code>). I think that would be the best way to go.</p>\n</blockquote>",
        "id": 319223228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672760907
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482#issuecomment-1369926337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5482\">issue #5482</a>:</p>\n<blockquote>\n<p>Oh dear sorry disregard me, indeed!</p>\n</blockquote>",
        "id": 319223407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1672760973
    }
]