[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859#issuecomment-1684358212\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859\">issue #6859</a>:</p>\n<blockquote>\n<p>Comparing this existing test in <code>cranelift/filetests/filetests/runtests/fmin-pseudo.clif</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">fmin_p_f32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">NaN</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>against the new test in this PR:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NaN</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">NaN</span>\n</code></pre></div>\n<p>I wouldn't think that NaN canonicalization could lead to us mixing up these results.</p>\n<p>Oh hey, I think the rule in question was only barely wrong. I think with the arguments swapped it might work:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nv\">select</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">fcmp</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">FloatCC.LessThan</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">fmin_pseudo</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>According to the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fmin_pseudo\">Cranelift <code>fmin_pseudo</code> docs</a>, the definition is <code>fmin_pseudo(a, b) = (b &lt; a) ? b : a</code>. But we were rewriting <code>(a &lt; b) ? a : b</code> to <code>fmin_pseudo(a, b)</code>.</p>\n</blockquote>",
        "id": 385976967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692387446
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859#issuecomment-1684505250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859\">issue #6859</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 385998270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692398690
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859#issuecomment-1686681759\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6859\">issue #6859</a>:</p>\n<blockquote>\n<p>Okay, after thinking this through, I agree: let's remove the <code>fmin_pseudo</code> and <code>fmax_pseudo</code> instructions, and we can merge this PR as a step in that direction.</p>\n<p>I've been thinking about what could justify keeping these instructions, given that the backends can match this pattern easily. The main case I can think of would be if they allowed us to concisely express other significant optimizations in the egraph rules. But that seems unlikely as these are rather specific. At least, I can't think of any possible examples.</p>\n</blockquote>",
        "id": 386435917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692636477
    }
]