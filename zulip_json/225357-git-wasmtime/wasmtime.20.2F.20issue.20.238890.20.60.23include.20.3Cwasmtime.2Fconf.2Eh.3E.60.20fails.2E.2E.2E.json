[
    {
        "content": "<p>dundargoc opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>When we try to bump to wasmtime v22.0.0 in <a href=\"https://github.com/tree-sitter/tree-sitter/pull/3428\">https://github.com/tree-sitter/tree-sitter/pull/3428</a> we get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">f17d22bba15001f</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"k\">impl</span><span class=\"o\">-</span><span class=\"mf\">22.0.0</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">   </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^~~~~~~~~~~~~~~~~</span>\n</code></pre></div>\n<p>When I checked this locally it seems that <code>conf.h</code> is not being generated when building the c-api via a crate as I could not find it in <code>cargo:warning=/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-c-api-impl-22.0.0/include/</code>, which is where I assumed it would be as that's where the headers are looking for it.</p>\n</blockquote>",
        "id": 448332911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719841009
    },
    {
        "content": "<p>dundargoc edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>When we try to bump to wasmtime v22.0.0 in <a href=\"https://github.com/tree-sitter/tree-sitter/pull/3428\">https://github.com/tree-sitter/tree-sitter/pull/3428</a> we get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">f17d22bba15001f</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"k\">impl</span><span class=\"o\">-</span><span class=\"mf\">22.0.0</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">   </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^~~~~~~~~~~~~~~~~</span>\n</code></pre></div>\n<p>When I checked this locally it seems that <code>conf.h</code> is not being generated when building the c-api via a crate as I could not find it in <code>cargo:warning=/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-c-api-impl-22.0.0/include/</code>, which is where I assumed it would be as that's where the headers are looking for it.<br>\n```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 448335137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719841504
    },
    {
        "content": "<p>dundargoc edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>When we try to bump to wasmtime v22.0.0 in <a href=\"https://github.com/tree-sitter/tree-sitter/pull/3428\">https://github.com/tree-sitter/tree-sitter/pull/3428</a> we get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">f17d22bba15001f</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"k\">impl</span><span class=\"o\">-</span><span class=\"mf\">22.0.0</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">   </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^~~~~~~~~~~~~~~~~</span>\n</code></pre></div>\n<p>When I checked this locally it seems that <code>conf.h</code> is not being generated when building the c-api via a crate as I could not find it in <code>cargo:warning=/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-c-api-impl-22.0.0/include/</code>, which is where I assumed it would be as that's where the headers are looking for it.</p>\n</blockquote>",
        "id": 448335189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719841515
    },
    {
        "content": "<p>clason <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2210515129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>Related: <a href=\"https://github.com/Homebrew/homebrew-core/pull/175234\">https://github.com/Homebrew/homebrew-core/pull/175234</a></p>\n</blockquote>",
        "id": 449262809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720171068
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214088407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>This changed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8642\">https://github.com/bytecodealliance/wasmtime/pull/8642</a> where <code>conf.h</code> is only generated as part of the cmake-based build process at this time. If using via the Rust build script that'll need to have support as well for generating <code>conf.h</code>, probably in the build directory, and generating another cargo build directive to add another include path pointing to the generated file</p>\n</blockquote>",
        "id": 449870520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720445513
    },
    {
        "content": "<p>clason <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214106059\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>Just to be clear: These changes need to happen here in wasmtime-c-api, right?</p>\n</blockquote>",
        "id": 449872318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720445953
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214289758\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>I think there may be multiple issues in play here, so I'm not certain if a single fix in a single location will fix both issues here. One issue is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8872ed531b4243b6de7cb83b7b66a829da710eb/crates/c-api/build.rs#L3\">this line</a> is no longer sufficient for the includes of Wasmtime because the <code>conf.h</code> file isn't generated anywhere as part of that build script. I think that's what tree-sitter is using and I think that's what tree-sitter is running into. Fixing that would involve updating the build script to do what CMake is doing which is to read <code>conf.h.in</code> and then postprocess it to generate a new <code>conf.h</code>. A new directive would then need to be printed to point to the location of this generated header file.</p>\n<p>As for the Homebrew PR I don't know what's going on there. That looks like a possibly buggy installation of the C API because it looks like it was built from source and installed but <code>conf.h</code> is missing. That may indicate that CMake wasn't used to build/install but the PR looks like it was updated to use CMake. Given all that I don't know what's happening.</p>\n</blockquote>",
        "id": 449889665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720449888
    },
    {
        "content": "<p>clason <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214315093\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<blockquote>\n<p>One issue is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8872ed531b4243b6de7cb83b7b66a829da710eb/crates/c-api/build.rs#L3\">this line</a> is no longer sufficient for the includes of Wasmtime because the conf.h file isn't generated anywhere as part of that build script. I think that's what tree-sitter is using and I think that's what tree-sitter is running into</p>\n</blockquote>\n<p>Yes. The main question is whether that is considered a regression to be fixed, or whether the official policy is now \"use the <code>cmake</code> crate to build the C API\".</p>\n<blockquote>\n<p>As for the Homebrew PR I don't know what's going on there.</p>\n</blockquote>\n<p>Sorry, that was just meant to show that the effect is not limited to one consumer: Homebrew had the same issue of no longer being able to build <code>wasmtime-c-api</code> via (pure) cargo and had to switch to a CMake based build. (Which is less intrusive since it's a standalone build that does not need to interface with a larger Rust project.)</p>\n</blockquote>",
        "id": 449891527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720450251
    },
    {
        "content": "<p>clason edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214315093\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<blockquote>\n<p>One issue is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8872ed531b4243b6de7cb83b7b66a829da710eb/crates/c-api/build.rs#L3\">this line</a> is no longer sufficient for the includes of Wasmtime because the conf.h file isn't generated anywhere as part of that build script. I think that's what tree-sitter is using and I think that's what tree-sitter is running into</p>\n</blockquote>\n<p>Yes. The main question is whether that is considered a regression to be fixed, or whether the official policy is now \"use the <code>cmake</code> crate to build the C API\" (or hack it yourself in your own <code>build.rs</code>).</p>\n<blockquote>\n<p>As for the Homebrew PR I don't know what's going on there.</p>\n</blockquote>\n<p>Sorry, that was just meant to show that the effect is not limited to one consumer: Homebrew had the same issue of no longer being able to build <code>wasmtime-c-api</code> via (pure) cargo and had to switch to a CMake based build. (Which is less intrusive since it's a standalone build that does not need to interface with a larger Rust project.)</p>\n</blockquote>",
        "id": 449894476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720450745
    },
    {
        "content": "<p>clason edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214315093\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<blockquote>\n<p>One issue is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b8872ed531b4243b6de7cb83b7b66a829da710eb/crates/c-api/build.rs#L3\">this line</a> is no longer sufficient for the includes of Wasmtime because the conf.h file isn't generated anywhere as part of that build script. I think that's what tree-sitter is using and I think that's what tree-sitter is running into</p>\n</blockquote>\n<p>Yes. The main question is whether that is considered a regression to be fixed, or whether the official policy is now \"use the <code>cmake</code> crate to build the C API\" (or hack it yourself in your own <code>build.rs</code>).</p>\n<blockquote>\n<p>As for the Homebrew PR I don't know what's going on there.</p>\n</blockquote>\n<p>Sorry, that was just meant to show that the effect is not limited to one consumer: Homebrew had the same issue of no longer being able to build <code>wasmtime-c-api</code> via (pure) cargo and had to switch to a CMake based build. (Which is less intrusive there since it's a standalone build that does not need to interface with a larger Rust project.)</p>\n</blockquote>",
        "id": 449896405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720451027
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2214547960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>If CMake can be used that'd be best yeah, primarily because that's what we're testing in CI and it's what's used to produce the artifacts. If that's not feasible this is minor enough I think it's ok to add custom logic to the build script too.</p>\n</blockquote>",
        "id": 449913809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720454501
    },
    {
        "content": "<p>osokin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2233726574\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>It seems like <code>cmake</code> runs <code>cargo</code> to fetch all necessary <code>crates</code> during the build time (previously <code>cargo</code> did that by itself)...</p>\n</blockquote>",
        "id": 452125639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721233945
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2234091731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>Yes <code>cmake</code> runs <code>cargo build</code> which will fetch if necessary. Is that an issue for your integration? If so where should the network fetching happen?</p>\n</blockquote>",
        "id": 452170467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721244926
    },
    {
        "content": "<p>osokin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2234134744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>All necessary for a build process files need to be fetched <strong>before</strong> the <code>build</code> phase, where phases are: <code>fetch</code> -&gt; <code>patch</code> -&gt; <code>configure</code> -&gt; <code>build</code> -&gt; <code>stage</code> -&gt; <code>install</code>.</p>\n<p>Previously it was easy enough just because <code>cargo</code> did all dirty job.  Now <code>cargo</code> is wrapped up with <code>cmake</code>, and as I said #8966 that adds complexity to the build process.</p>\n</blockquote>",
        "id": 452174483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721245910
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2234486832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>As a workaround for the time being could you continue to run <code>cargo fetch</code> during the fetch phase?</p>\n</blockquote>",
        "id": 452205389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721255932
    },
    {
        "content": "<p>CGamesPlay <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2254520591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>Can I get some guidance on how to use this crate in its current state? As it stands, the wasmtime-c-api crate seems to be completely unusable.</p>\n<p>It doesn't seem to be possible to use the cmake crate to call cmake from the <a href=\"http://build.rs\">build.rs</a> script, because the inner cargo will deadlock trying to lock the package folder. I could try calling cmake from tree-sitter's <a href=\"http://build.rs\">build.rs</a>, but this feels wrong because it would then require keeping tree-sitter's build script up to date with the build script for wasmtime.</p>\n<p>Am I missing something obvious? Thanks for any pointers. Happy to do some tweaking of the build script and file a PR with the results once I get it working.</p>\n</blockquote>",
        "id": 454613253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722173484
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890#issuecomment-2256188464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9031\">https://github.com/bytecodealliance/wasmtime/pull/9031</a> should work well, thanks for opening a PR!</p>\n<p>I'll note though that one of the reasons this snuck in, which I think I was also mentioning on the original PR for this support, is that there are no tests in-tree so we can't guarantee that this will keep working. Despite that though assistance in maintaining it is much appreciated! </p>\n</blockquote>",
        "id": 454861420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722265436
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8890\">issue #8890</a>:</p>\n<blockquote>\n<p>When we try to bump to wasmtime v22.0.0 in <a href=\"https://github.com/tree-sitter/tree-sitter/pull/3428\">https://github.com/tree-sitter/tree-sitter/pull/3428</a> we get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">f17d22bba15001f</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">-</span><span class=\"k\">impl</span><span class=\"o\">-</span><span class=\"mf\">22.0.0</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">   </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">cargo</span><span class=\"p\">:</span><span class=\"nc\">warning</span><span class=\"o\">=</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^~~~~~~~~~~~~~~~~</span>\n</code></pre></div>\n<p>When I checked this locally it seems that <code>conf.h</code> is not being generated when building the c-api via a crate as I could not find it in <code>cargo:warning=/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-c-api-impl-22.0.0/include/</code>, which is where I assumed it would be as that's where the headers are looking for it.</p>\n</blockquote>",
        "id": 459551395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723229504
    }
]