[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-619430025\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-619430025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195299267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587843232
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-619445436\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-619445436\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195304452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587851419
    },
    {
        "content": "<p>Ekleog <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-625846936\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-625846936\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>This looks great! FWIW, I was about to open an issue asking for exactly this, for <a href=\"https://crates.io/crates/wasmtime-async\" title=\"https://crates.io/crates/wasmtime-async\">wasmtime-async</a>, so that it'd be possible to create a WASI context that uses async functions (potentially with blocking tasks, especially for file IO).</p>\n<p>However, it looks like <code>preopened_dir</code> is not also hooked to take any <code>Handle</code>, in addition to taking <code>File</code>s. Would it be possible for it to take any <code>Handle</code>, so that it's not necessary to go through the entire directory hierarchy just to copy it into a <code>VirtualDirEntry</code> in memory?</p>\n</blockquote>",
        "id": 196902992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588948668
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-632275987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>@sunfishcode @pchickey Could you guys take a look and let me know if we're up for merging this change in, or would we rather wait for virtual dispatcher? Given that there a few reports from the users that this is a useful change, I'd vote for merging it in, and then redoing it when virtual dispatcher lands, but if you feel otherwise, I'm OK with it as well.</p>\n</blockquote>",
        "id": 198359585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086561
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-639882639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>Bump ping @kubkon @sunfishcode @pchickey.  This blocks the <code>wasmtime-dotnet</code> CI from being green (see #1735), provided we fix my comment above.</p>\n</blockquote>",
        "id": 199943252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591398163
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640171692\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>@peterhuene this should be it. If you could double check that this indeed fixes #1735 in dotnet side that’d be great. When you confirm everything is green, I reckon we can go ahead and merge this in.</p>\n</blockquote>",
        "id": 200012457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591515556
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640787733\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>I'll write some docs for the newly exported types so that we can get this merged today.</p>\n</blockquote>",
        "id": 200135288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591639774
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640791398\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>Oh nice one, thanks @pchickey, and apologies I’ve not done this earlier myself!</p>\n</blockquote>",
        "id": 200136230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640234
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640804907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>I'll test this shortly with the .NET API and get back to you.</p>\n</blockquote>",
        "id": 200139789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591641899
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640833833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>I can confirm this fixes #1735.</p>\n</blockquote>",
        "id": 200144859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591644568
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640883649\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>@kubkon It looks like for <code>OsDir</code>, <code>OsFile</code> and several of these types, the type itself has been exposed outside the crate but not any of its constructors. I don't think I understand why you'd need to write down this type but wouldnt be allowed to construct it - was this an oversight, or am I missing something?</p>\n</blockquote>",
        "id": 200155265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591649981
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640896712\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>The output of <code>#![warn(missing_docs)]</code> on wasi-common means we have some real work to do in both wiggle (which should be possible, since doc comments are in the witx ast!) and on <code>Handle</code> and many other places. There's also lots of snapshot 0 code that needs docs, but as legacy code we shouldn't sweat that as much for now.</p>\n<div class=\"codehilite\"><pre><span></span><code>From 6d0b0aad3da0e9b388f2b1c223c20acc2a3c5e87 Mon Sep 17 00:00:00 2001\nFrom: Pat Hickey &lt;pat@moreproductive.org&gt;\nDate: Mon, 8 Jun 2020 14:23:32 -0700\nSubject: [PATCH] Add some documention to the types exposed by this PR, and a\n few others\n\n---\n crates/wasi-common/src/sys/osfile.rs           | 3 +++\n crates/wasi-common/src/sys/osother.rs          | 2 ++\n crates/wasi-common/src/sys/unix/bsd/osdir.rs   | 7 ++++++-\n crates/wasi-common/src/sys/unix/linux/osdir.rs | 6 +++++-\n crates/wasi-common/src/virtfs.rs               | 4 ++++\n 5 files changed, 20 insertions(+), 2 deletions(-)\n\ndiff --git a/crates/wasi-common/src/sys/osfile.rs b/crates/wasi-common/src/sys/osfile.rs\nindex e9ced03fc..d1ffd6369 100644\n--- a/crates/wasi-common/src/sys/osfile.rs\n+++ b/crates/wasi-common/src/sys/osfile.rs\n@@ -9,6 +9,9 @@ use std::io::{self, Read, Seek, SeekFrom, Write};\n use std::ops::Deref;\n\n #[derive(Debug)]\n+/// A file backed by the operating system&#39;s file system. Dereferences to a\n+/// `RawOsHandle`.  Its impl of `Handle` uses Rust&#39;s `std` to implement all\n+/// file descriptor operations.\n pub struct OsFile {\n     rights: Cell&lt;HandleRights&gt;,\n     handle: RawOsHandle,\ndiff --git a/crates/wasi-common/src/sys/osother.rs b/crates/wasi-common/src/sys/osother.rs\nindex 42f15c579..fcfa979ac 100644\n--- a/crates/wasi-common/src/sys/osother.rs\n+++ b/crates/wasi-common/src/sys/osother.rs\n@@ -10,6 +10,8 @@ use std::fs::File;\n use std::io::{self, Read, Write};\n use std::ops::Deref;\n\n+/// Extra methods for `OsOther` that are only available when configured for\n+/// some operating systems.\n pub trait OsOtherExt {\n     /// Create `OsOther` as `dyn Handle` from null device.\n     fn from_null() -&gt; io::Result&lt;Box&lt;dyn Handle&gt;&gt;;\ndiff --git a/crates/wasi-common/src/sys/unix/bsd/osdir.rs b/crates/wasi-common/src/sys/unix/bsd/osdir.rs\nindex 7baa1939e..19d2e1f1b 100644\n--- a/crates/wasi-common/src/sys/unix/bsd/osdir.rs\n+++ b/crates/wasi-common/src/sys/unix/bsd/osdir.rs\n@@ -6,6 +6,9 @@ use std::io;\n use yanix::dir::Dir;\n\n #[derive(Debug)]\n+/// A directory in the operating system&#39;s file system. Its impl of `Handle` is\n+/// in sys::osdir. This type is exposed to all other modules as\n+/// sys::osdir::OsDir when configured.\n pub struct OsDir {\n     pub(crate) rights: Cell&lt;HandleRights&gt;,\n     pub(crate) handle: RawOsHandle,\n@@ -39,7 +42,9 @@ impl OsDir {\n             stream_ptr,\n         })\n     }\n\n-    /// Returns the `Dir` stream pointer associated with this `OsDir`.\n+    /// Returns the `Dir` stream pointer associated with this `OsDir`. Duck\n+    /// typing: sys::unix::fd::readdir expects the configured OsDir to have\n+    /// this method.\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;RefMut&lt;Dir&gt;&gt; {\n         Ok(self.stream_ptr.borrow_mut())\n     }\ndiff --git a/crates/wasi-common/src/sys/unix/linux/osdir.rs b/crates/wasi-common/src/sys/unix/linux/osdir.rs\nindex f15d89a4c..e0747b72b 100644\n--- a/crates/wasi-common/src/sys/unix/linux/osdir.rs\n+++ b/crates/wasi-common/src/sys/unix/linux/osdir.rs\n@@ -6,6 +6,9 @@ use std::io;\n use yanix::dir::Dir;\n\n #[derive(Debug)]\n+/// A directory in the operating system&#39;s file system. Its impl of `Handle` is\n+/// in sys::osdir. This type is exposed to all other moduleas as\n+/// sys::osdir::OsDir when configured.\n pub struct OsDir {\n     pub(crate) rights: Cell&lt;HandleRights&gt;,\n     pub(crate) handle: RawOsHandle,\n@@ -16,7 +19,8 @@ impl OsDir {\n         let rights = Cell::new(rights);\n         Ok(Self { rights, handle })\n     }\n\n-    /// Returns the `Dir` stream pointer associated with this `OsDir`.\n+    /// Returns the `Dir` stream pointer associated with this `OsDir`. Duck typing:\n+    /// sys::unix::fd::readdir expects the configured OsDir to have this method.\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;Box&lt;Dir&gt;&gt; {\n         // We need to duplicate the handle, because `opendir(3)`:\n         //     After a successful call to fdopendir(), fd is used internally by the implementation,\ndiff --git a/crates/wasi-common/src/virtfs.rs b/crates/wasi-common/src/virtfs.rs\nindex 3d9b61b19..141a9cc69 100644\n--- a/crates/wasi-common/src/virtfs.rs\n+++ b/crates/wasi-common/src/virtfs.rs\n@@ -11,12 +11,16 @@ use std::io::SeekFrom;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n\n+/// An entry in a virtual filesystem\n pub enum VirtualDirEntry {\n\n+    /// The contents of a child directory\n     Directory(HashMap&lt;String, VirtualDirEntry&gt;),\n\n+    /// A file\n     File(Box&lt;dyn FileContents&gt;),\n }\n\n impl VirtualDirEntry {\n\n+    /// Construct an empty directory\n     pub fn empty_directory() -&gt; Self {\n         Self::Directory(HashMap::new())\n     }\n--\n2.17.1\n</code></pre></div>\n\n\n</blockquote>",
        "id": 200158210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591651623
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-640896712\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>The output of <code>#![warn(missing_docs)]</code> on wasi-common means we have some real work to do in both wiggle (which should be possible, since doc comments are in the witx ast!) and on <code>Handle</code> and many other places. There's also lots of snapshot 0 code that needs docs, but as legacy code we shouldn't sweat that as much for now.</p>\n<p>Apologies for posting a patch for some docs I added, I don't have any way to push to your branch since its in a different repo. (Do you not have write privs on this one? If not we should fix that)</p>\n<div class=\"codehilite\"><pre><span></span><code>From 6d0b0aad3da0e9b388f2b1c223c20acc2a3c5e87 Mon Sep 17 00:00:00 2001\nFrom: Pat Hickey &lt;pat@moreproductive.org&gt;\nDate: Mon, 8 Jun 2020 14:23:32 -0700\nSubject: [PATCH] Add some documention to the types exposed by this PR, and a\n few others\n\n---\n crates/wasi-common/src/sys/osfile.rs           | 3 +++\n crates/wasi-common/src/sys/osother.rs          | 2 ++\n crates/wasi-common/src/sys/unix/bsd/osdir.rs   | 7 ++++++-\n crates/wasi-common/src/sys/unix/linux/osdir.rs | 6 +++++-\n crates/wasi-common/src/virtfs.rs               | 4 ++++\n 5 files changed, 20 insertions(+), 2 deletions(-)\n\ndiff --git a/crates/wasi-common/src/sys/osfile.rs b/crates/wasi-common/src/sys/osfile.rs\nindex e9ced03fc..d1ffd6369 100644\n--- a/crates/wasi-common/src/sys/osfile.rs\n+++ b/crates/wasi-common/src/sys/osfile.rs\n@@ -9,6 +9,9 @@ use std::io::{self, Read, Seek, SeekFrom, Write};\n use std::ops::Deref;\n\n #[derive(Debug)]\n+/// A file backed by the operating system&#39;s file system. Dereferences to a\n+/// `RawOsHandle`.  Its impl of `Handle` uses Rust&#39;s `std` to implement all\n+/// file descriptor operations.\n pub struct OsFile {\n     rights: Cell&lt;HandleRights&gt;,\n     handle: RawOsHandle,\ndiff --git a/crates/wasi-common/src/sys/osother.rs b/crates/wasi-common/src/sys/osother.rs\nindex 42f15c579..fcfa979ac 100644\n--- a/crates/wasi-common/src/sys/osother.rs\n+++ b/crates/wasi-common/src/sys/osother.rs\n@@ -10,6 +10,8 @@ use std::fs::File;\n use std::io::{self, Read, Write};\n use std::ops::Deref;\n\n+/// Extra methods for `OsOther` that are only available when configured for\n+/// some operating systems.\n pub trait OsOtherExt {\n     /// Create `OsOther` as `dyn Handle` from null device.\n     fn from_null() -&gt; io::Result&lt;Box&lt;dyn Handle&gt;&gt;;\ndiff --git a/crates/wasi-common/src/sys/unix/bsd/osdir.rs b/crates/wasi-common/src/sys/unix/bsd/osdir.rs\nindex 7baa1939e..19d2e1f1b 100644\n--- a/crates/wasi-common/src/sys/unix/bsd/osdir.rs\n+++ b/crates/wasi-common/src/sys/unix/bsd/osdir.rs\n@@ -6,6 +6,9 @@ use std::io;\n use yanix::dir::Dir;\n\n #[derive(Debug)]\n+/// A directory in the operating system&#39;s file system. Its impl of `Handle` is\n+/// in sys::osdir. This type is exposed to all other modules as\n+/// sys::osdir::OsDir when configured.\n pub struct OsDir {\n     pub(crate) rights: Cell&lt;HandleRights&gt;,\n     pub(crate) handle: RawOsHandle,\n@@ -39,7 +42,9 @@ impl OsDir {\n             stream_ptr,\n         })\n     }\n\n-    /// Returns the `Dir` stream pointer associated with this `OsDir`.\n+    /// Returns the `Dir` stream pointer associated with this `OsDir`. Duck\n+    /// typing: sys::unix::fd::readdir expects the configured OsDir to have\n+    /// this method.\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;RefMut&lt;Dir&gt;&gt; {\n         Ok(self.stream_ptr.borrow_mut())\n     }\ndiff --git a/crates/wasi-common/src/sys/unix/linux/osdir.rs b/crates/wasi-common/src/sys/unix/linux/osdir.rs\nindex f15d89a4c..e0747b72b 100644\n--- a/crates/wasi-common/src/sys/unix/linux/osdir.rs\n+++ b/crates/wasi-common/src/sys/unix/linux/osdir.rs\n@@ -6,6 +6,9 @@ use std::io;\n use yanix::dir::Dir;\n\n #[derive(Debug)]\n+/// A directory in the operating system&#39;s file system. Its impl of `Handle` is\n+/// in sys::osdir. This type is exposed to all other moduleas as\n+/// sys::osdir::OsDir when configured.\n pub struct OsDir {\n     pub(crate) rights: Cell&lt;HandleRights&gt;,\n     pub(crate) handle: RawOsHandle,\n@@ -16,7 +19,8 @@ impl OsDir {\n         let rights = Cell::new(rights);\n         Ok(Self { rights, handle })\n     }\n\n-    /// Returns the `Dir` stream pointer associated with this `OsDir`.\n+    /// Returns the `Dir` stream pointer associated with this `OsDir`. Duck typing:\n+    /// sys::unix::fd::readdir expects the configured OsDir to have this method.\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;Box&lt;Dir&gt;&gt; {\n         // We need to duplicate the handle, because `opendir(3)`:\n         //     After a successful call to fdopendir(), fd is used internally by the implementation,\ndiff --git a/crates/wasi-common/src/virtfs.rs b/crates/wasi-common/src/virtfs.rs\nindex 3d9b61b19..141a9cc69 100644\n--- a/crates/wasi-common/src/virtfs.rs\n+++ b/crates/wasi-common/src/virtfs.rs\n@@ -11,12 +11,16 @@ use std::io::SeekFrom;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n\n+/// An entry in a virtual filesystem\n pub enum VirtualDirEntry {\n\n+    /// The contents of a child directory\n     Directory(HashMap&lt;String, VirtualDirEntry&gt;),\n\n+    /// A file\n     File(Box&lt;dyn FileContents&gt;),\n }\n\n impl VirtualDirEntry {\n\n+    /// Construct an empty directory\n     pub fn empty_directory() -&gt; Self {\n         Self::Directory(HashMap::new())\n     }\n--\n2.17.1\n</code></pre></div>\n\n\n</blockquote>",
        "id": 200158286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591651675
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-641098720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<blockquote>\n<p>@kubkon It looks like for <code>OsDir</code>, <code>OsFile</code> and several of these types, the type itself has been exposed outside the crate but not any of its constructors. I don't think I understand why you'd need to write down this type but wouldnt be allowed to construct it - was this an oversight, or am I missing something?</p>\n</blockquote>\n<p>Oh right, no, this was intentional. For the time being, the only way to create either of those is using <code>TryFrom</code>/<code>TryInto</code> trait from <code>std::fs::File</code>. This way I wanted to ensure that in case anyone ever tries to construct <code>OsFile</code> from a handle that's incompatible (such as a directory handle), then it would error out early. As an added bonus of this approach, the user doesn't have to worry about adjusting the <code>HandleRights</code> manually -- everything is done automatically when calling <code>TryFrom</code>/<code>TryInto</code>.</p>\n<p>Here's an example usage I've had in mind:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OpenOptions</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">&quot;some_file&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">os_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OsFile</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">some_file</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 200190604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591688707
    },
    {
        "content": "<p>kubkon edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-641098720\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<blockquote>\n<p>@kubkon It looks like for <code>OsDir</code>, <code>OsFile</code> and several of these types, the type itself has been exposed outside the crate but not any of its constructors. I don't think I understand why you'd need to write down this type but wouldnt be allowed to construct it - was this an oversight, or am I missing something?</p>\n</blockquote>\n<p>Oh right, no, this was intentional. For the time being, the only way to create either of those is using <code>TryFrom</code>/<code>TryInto</code> trait from <code>std::fs::File</code>. This way I wanted to ensure that in case anyone ever tries to construct <code>OsFile</code> from a handle that's incompatible (such as a directory handle), then it would error out early. As an added bonus of this approach, the user doesn't have to worry about adjusting the <code>HandleRights</code> manually -- everything is done automatically when calling <code>TryFrom</code>/<code>TryInto</code>.</p>\n<p>Here's an example usage I've had in mind:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OpenOptions</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">&quot;some_file&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">os_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OsFile</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">some_file</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Having said all that, I'm happy to add an explicit constructor for this to make it more readable and usable, something like <code>OsFile::new(file)</code>.</p>\n</blockquote>",
        "id": 200191224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591689143
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-641103967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<blockquote>\n<p>The output of <code>#![warn(missing_docs)]</code> on wasi-common means we have some real work to do in both wiggle (which should be possible, since doc comments are in the witx ast!) and on <code>Handle</code> and many other places. There's also lots of snapshot 0 code that needs docs, but as legacy code we shouldn't sweat that as much for now.</p>\n<p>Apologies for posting a patch for some docs I added, I don't have any way to push to your branch since its in a different repo. (Do you not have write privs on this one? If not we should fix that)</p>\n<p>```<br>\nFrom 6d0b0aad3da0e9b388f2b1c223c20acc2a3c5e87 Mon Sep 17 00:00:00 2001<br>\nFrom: Pat Hickey &lt;<a href=\"mailto:pat@moreproductive.org\">pat@moreproductive.org</a>&gt;<br>\nDate: Mon, 8 Jun 2020 14:23:32 -0700<br>\nSubject: [PATCH] Add some documention to the types exposed by this PR, and a<br>\n few others</p>\n<hr>\n<p>crates/wasi-common/src/sys/osfile.rs           | 3 +++<br>\n crates/wasi-common/src/sys/osother.rs          | 2 ++<br>\n crates/wasi-common/src/sys/unix/bsd/osdir.rs   | 7 ++++++-<br>\n crates/wasi-common/src/sys/unix/linux/osdir.rs | 6 +++++-<br>\n crates/wasi-common/src/virtfs.rs               | 4 ++++<br>\n 5 files changed, 20 insertions(+), 2 deletions(-)</p>\n<p>diff --git a/crates/wasi-common/src/sys/osfile.rs b/crates/wasi-common/src/sys/osfile.rs<br>\nindex e9ced03fc..d1ffd6369 100644<br>\n--- a/crates/wasi-common/src/sys/osfile.rs<br>\n+++ b/crates/wasi-common/src/sys/osfile.rs<br>\n@@ -9,6 +9,9 @@ use std::io::{self, Read, Seek, SeekFrom, Write};<br>\n use std::ops::Deref;</p>\n<p>#[derive(Debug)]<br>\n+/// A file backed by the operating system's file system. Dereferences to a<br>\n+/// <code>RawOsHandle</code>.  Its impl of <code>Handle</code> uses Rust's <code>std</code> to implement all<br>\n+/// file descriptor operations.<br>\n pub struct OsFile {<br>\n     rights: Cell&lt;HandleRights&gt;,<br>\n     handle: RawOsHandle,<br>\ndiff --git a/crates/wasi-common/src/sys/osother.rs b/crates/wasi-common/src/sys/osother.rs<br>\nindex 42f15c579..fcfa979ac 100644<br>\n--- a/crates/wasi-common/src/sys/osother.rs<br>\n+++ b/crates/wasi-common/src/sys/osother.rs<br>\n@@ -10,6 +10,8 @@ use std::fs::File;<br>\n use std::io::{self, Read, Write};<br>\n use std::ops::Deref;</p>\n<p>+/// Extra methods for <code>OsOther</code> that are only available when configured for<br>\n+/// some operating systems.<br>\n pub trait OsOtherExt {<br>\n     /// Create <code>OsOther</code> as <code>dyn Handle</code> from null device.<br>\n     fn from_null() -&gt; io::Result&lt;Box&lt;dyn Handle&gt;&gt;;<br>\ndiff --git a/crates/wasi-common/src/sys/unix/bsd/osdir.rs b/crates/wasi-common/src/sys/unix/bsd/osdir.rs<br>\nindex 7baa1939e..19d2e1f1b 100644<br>\n--- a/crates/wasi-common/src/sys/unix/bsd/osdir.rs<br>\n+++ b/crates/wasi-common/src/sys/unix/bsd/osdir.rs<br>\n@@ -6,6 +6,9 @@ use std::io;<br>\n use yanix::dir::Dir;</p>\n<p>#[derive(Debug)]<br>\n+/// A directory in the operating system's file system. Its impl of <code>Handle</code> is<br>\n+/// in sys::osdir. This type is exposed to all other modules as<br>\n+/// sys::osdir::OsDir when configured.<br>\n pub struct OsDir {<br>\n     pub(crate) rights: Cell&lt;HandleRights&gt;,<br>\n     pub(crate) handle: RawOsHandle,<br>\n@@ -39,7 +42,9 @@ impl OsDir {<br>\n             stream_ptr,<br>\n         })<br>\n     }<br>\n-    /// Returns the <code>Dir</code> stream pointer associated with this <code>OsDir</code>.<br>\n+    /// Returns the <code>Dir</code> stream pointer associated with this <code>OsDir</code>. Duck<br>\n+    /// typing: sys::unix::fd::readdir expects the configured OsDir to have<br>\n+    /// this method.<br>\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;RefMut&lt;Dir&gt;&gt; {<br>\n         Ok(self.stream_ptr.borrow_mut())<br>\n     }<br>\ndiff --git a/crates/wasi-common/src/sys/unix/linux/osdir.rs b/crates/wasi-common/src/sys/unix/linux/osdir.rs<br>\nindex f15d89a4c..e0747b72b 100644<br>\n--- a/crates/wasi-common/src/sys/unix/linux/osdir.rs<br>\n+++ b/crates/wasi-common/src/sys/unix/linux/osdir.rs<br>\n@@ -6,6 +6,9 @@ use std::io;<br>\n use yanix::dir::Dir;</p>\n<p>#[derive(Debug)]<br>\n+/// A directory in the operating system's file system. Its impl of <code>Handle</code> is<br>\n+/// in sys::osdir. This type is exposed to all other moduleas as<br>\n+/// sys::osdir::OsDir when configured.<br>\n pub struct OsDir {<br>\n     pub(crate) rights: Cell&lt;HandleRights&gt;,<br>\n     pub(crate) handle: RawOsHandle,<br>\n@@ -16,7 +19,8 @@ impl OsDir {<br>\n         let rights = Cell::new(rights);<br>\n         Ok(Self { rights, handle })<br>\n     }<br>\n-    /// Returns the <code>Dir</code> stream pointer associated with this <code>OsDir</code>.<br>\n+    /// Returns the <code>Dir</code> stream pointer associated with this <code>OsDir</code>. Duck typing:<br>\n+    /// sys::unix::fd::readdir expects the configured OsDir to have this method.<br>\n     pub(crate) fn stream_ptr(&amp;self) -&gt; Result&lt;Box&lt;Dir&gt;&gt; {<br>\n         // We need to duplicate the handle, because <code>opendir(3)</code>:<br>\n         //     After a successful call to fdopendir(), fd is used internally by the implementation,<br>\ndiff --git a/crates/wasi-common/src/virtfs.rs b/crates/wasi-common/src/virtfs.rs<br>\nindex 3d9b61b19..141a9cc69 100644<br>\n--- a/crates/wasi-common/src/virtfs.rs<br>\n+++ b/crates/wasi-common/src/virtfs.rs<br>\n@@ -11,12 +11,16 @@ use std::io::SeekFrom;<br>\n use std::path::{Path, PathBuf};<br>\n use std::rc::Rc;</p>\n<p>+/// An entry in a virtual filesystem<br>\n pub enum VirtualDirEntry {<br>\n+    /// The contents of a child directory<br>\n     Directory(HashMap&lt;String, VirtualDirEntry&gt;),<br>\n+    /// A file<br>\n     File(Box&lt;dyn FileContents&gt;),<br>\n }</p>\n<p>impl VirtualDirEntry {<br>\n+    /// Construct an empty directory<br>\n     pub fn empty_directory() -&gt; Self {<br>\n         Self::Directory(HashMap::new())<br>\n     }<br>\n-- <br>\n2.17.1<br>\n```</p>\n</blockquote>\n<p>Hmm, I thought you should be able to push directly to my branch in my fork. And yes, I do have write permissions, however, I always prefer to work out of my fork so as to shield myself from stupid mistakes such as force-pushing into <code>master</code> etc. Anyhow, that's OK, I'll add your patch into my branch myself <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>. Lemme know what you reckon about the constructors of <code>OsFile</code>, etc. (whether you think we should add explicit ones or <code>TryFrom</code> trait is enough).</p>\n</blockquote>",
        "id": 200191390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591689297
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600#issuecomment-641251504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">Issue #1600</a>:</p>\n<blockquote>\n<p>@pchickey I've applied your patch (thanks!), and extended the docs with some constructing examples. Have a look and lemme know what you reckon!</p>\n</blockquote>",
        "id": 200216319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591705089
    }
]