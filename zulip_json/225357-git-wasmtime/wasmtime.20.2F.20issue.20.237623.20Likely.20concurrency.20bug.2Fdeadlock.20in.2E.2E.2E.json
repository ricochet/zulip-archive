[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623\">issue #7623</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/7049286500/job/19187423868?pr=7618\">This GitHub Actions failure</a> happened on the 15.0.0 release branch yesterday. The bug there appears to be a timeout in the builder where the log ends with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">atomic_wait_notify</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">seconds</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">The</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">canceled</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>In the absence of any other information this appears like the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/338653878d89afb5fab99d2e1aa8575aac21feea/crates/runtime/src/parking_spot.rs#L218-L260\"><code>atomic_wait_notify</code> test</a> deadlocked and then the test timed out eventually when GitHub Actions let it run for 6 hours.</p>\n<p>I've been staring at the test and the implementation of <code>ParkingSpot</code> and I unfortunately haven't been able to come up with anything. </p>\n<p>One thing I have noticed is that blocking is done with Rust's standard <code>Condvar</code> which is documented as allowing possible spurious wakeups. This I think means that a thread can \"steal\" a wakeup notification meant for another. I haven't been able to construct a theoretical trace which leads to deadlock however. Additionally I can't say with any certainty that this is an actual issue since the precise concurrent behaviors allowed here I'm not certain of.</p>\n</blockquote>",
        "id": 405383116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701443544
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623#issuecomment-1836304467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623\">issue #7623</a>:</p>\n<blockquote>\n<p>Does this deadlock reproduce using <a href=\"https://docs.rs/loom/0.7.1/loom/\">loom</a>?</p>\n</blockquote>",
        "id": 405385899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701444386
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623#issuecomment-1836317302\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623\">issue #7623</a>:</p>\n<blockquote>\n<p>I was curious myself! I rewrote the test with loom (had to remove the usage of scoped threads), and it's been running for 12+ hours and so far hasn't found an issue. Loom docs said I should run with <code>LOOM_MAX_PREEMPTIONS={2,3}</code> to get \"most bugs out of the way\" and the <code>LOOM_MAX_PREEMPTIONS=3</code> run took ~12 hours and found no issues.</p>\n<p>So to answer your question, so far no, but it's still running. Also I'm a bit suspicious about spurious wakeups here and my guess is that loom probably doesn't model spurious wakeups from <code>Condvar</code>, so it may not reproduce in loom after all</p>\n</blockquote>",
        "id": 405387591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701444894
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7623\">issue #7623</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/7049286500/job/19187423868?pr=7618\">This GitHub Actions failure</a> happened on the 15.0.0 release branch yesterday. The bug there appears to be a timeout in the builder where the log ends with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">parking_spot</span>::<span class=\"n\">tests</span>::<span class=\"n\">atomic_wait_notify</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">seconds</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">The</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">canceled</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>In the absence of any other information this appears like the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/338653878d89afb5fab99d2e1aa8575aac21feea/crates/runtime/src/parking_spot.rs#L218-L260\"><code>atomic_wait_notify</code> test</a> deadlocked and then the test timed out eventually when GitHub Actions let it run for 6 hours.</p>\n<p>I've been staring at the test and the implementation of <code>ParkingSpot</code> and I unfortunately haven't been able to come up with anything. </p>\n<p>One thing I have noticed is that blocking is done with Rust's standard <code>Condvar</code> which is documented as allowing possible spurious wakeups. This I think means that a thread can \"steal\" a wakeup notification meant for another. I haven't been able to construct a theoretical trace which leads to deadlock however. Additionally I can't say with any certainty that this is an actual issue since the precise concurrent behaviors allowed here I'm not certain of.</p>\n</blockquote>",
        "id": 406107009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701796026
    }
]