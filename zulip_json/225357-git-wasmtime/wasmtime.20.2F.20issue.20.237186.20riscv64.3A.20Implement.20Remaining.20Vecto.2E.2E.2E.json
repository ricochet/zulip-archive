[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7186\">issue #7186</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a general issue for tracking the missing instructions from the RISC-V Vector extension. We have implemented most of them, however there are a couple of categories that are still missing</p>\n<h2>Widening and Narrowing Operations</h2>\n<ul>\n<li>[x] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#117-vector-narrowing-integer-right-shift-instructions\">Vector Narrowing Integer Right Shift Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1114-vector-widening-integer-multiply-add-instructions\">Vector Widening Integer Multiply-Add Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#133-vector-widening-floating-point-addsubtract-instructions\">Vector Widening Floating-Point Add/Subtract Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#135-vector-widening-floating-point-multiply\">Vector Widening Floating-Point Multiply</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1318-widening-floating-pointinteger-type-convert-instructions\">Widening Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1319-narrowing-floating-pointinteger-type-convert-instructions\">Narrowing Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#137-vector-widening-floating-point-fused-multiply-add-instructions\">Vector Widening Floating-Point Fused Multiply-Add Instructions</a></li>\n</ul>\n<p>I have Implemented <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a> in #6542 and #6555.</p>\n<p>I have a branch that contains <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a> in <a href=\"https://github.com/afonso360/wasmtime/tree/riscv-simd-widening-mul\">riscv-simd-widening-mul</a>, however before merging that I think it we should rework our approach towards these instructions.</p>\n<p>Matching one of these instructions includes a lot of rules mostly due to how many combinations we can perform with <code>{s,u}widen_{low,high}</code>, so before adding any more instruction I think we need to add an extractor that can match all of these patterns.</p>\n<p>As an example <code>vwmulsu.vv</code> requires 8 rules to match all combinations of <code>{s,u}widen_{low,high}</code>.</p>\n<h2>Vector Multiple Register Move</h2>\n<p>We have implemented <code>vmv1r.v</code> as our move instruction, this instruction moves one register into another. However we also have <code>vmv2r.v</code> / <code>vmv4r.v</code> / <code>vmv8r.v</code>. These instructions move n consecutive registers.</p>\n<p>As an example, <code>vmv2r.v v10, v12</code> copies <code>v10=v12; v11=v13</code>.</p>\n<p>These instructions have a constraint that the source and destination registers must be \"aligned\" to the number of the instruction.</p>\n<p>So, <code>vmv2r.v v11, v15</code> would be an illegal instruction.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#166-whole-vector-register-move\">Whole Vector Register Move</a></li>\n</ul>\n<h2>Vector Reduction Operations</h2>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#141-vector-single-width-integer-reduction-instructions\">Vector Single-Width Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#142-vector-widening-integer-reduction-instructions\">Vector Widening Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#143-vector-single-width-floating-point-reduction-instructions\">Vector Single-Width Floating-Point Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#144-vector-widening-floating-point-reduction-instructions\">Vector Widening Floating-Point Reduction Instructions</a></li>\n</ul>\n<p>I'm not entirely sure how we can best match these operations. We don't have the equivalent instructions in cranelift.</p>\n<p>These instructions do a operation on an entire vector register, such as a sum and return a scalar value. We have two of these implemented <code>vredminu</code> and <code>vredmaxu</code>  that are used when lowering <code>vany_true</code> or <code>vall_true</code>.</p>\n<h2>Special Load / Store Addressing Modes</h2>\n<p>We currently implement <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#74-vector-unit-stride-instructions\">Vector Unit-Stride Instructions</a> for all our Loads and Stores. These are fairly simple in that they load <code>vl</code> elements that are a fixed number of bits apart. These match the semantics of the <code>load</code> and <code>store</code> instructions in cranelift.</p>\n<p>The remaining Addressing Modes might be beneficial, but I have no idea how we could match them. Some of these might not be that useful.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#75-vector-strided-instructions\">Vector Strided Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#76-vector-indexed-instructions\">Vector Indexed Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#77-unit-stride-fault-only-first-loads\">Unit-stride Fault-Only-First Loads</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#78-vector-loadstore-segment-instructions\">Vector Load/Store Segment Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#79-vector-loadstore-whole-register-instructions\">Vector Load/Store Whole Register Instructions</a></li>\n</ul>\n<h2>Vector Integer Division</h2>\n<p>We don't actually support vector <code>sdiv</code> / <code>udiv</code>, nevertheless RISC-V includes instructions for them in <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a>. I'm including this here mostly for completeness.</p>\n</blockquote>",
        "id": 395532652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696764496
    },
    {
        "content": "<p><a href=\"https://github.com/afonso360\">afonso360</a> added the cranelift:area:riscv64 label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7186\">Issue #7186</a>.</p>",
        "id": 395532653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696764496
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7186\">issue #7186</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a general issue for tracking the missing instructions from the RISC-V Vector extension. We have implemented most of them, however there are a couple of categories that are still missing</p>\n<h2>Widening and Narrowing Operations</h2>\n<ul>\n<li>[x] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#117-vector-narrowing-integer-right-shift-instructions\">Vector Narrowing Integer Right Shift Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1114-vector-widening-integer-multiply-add-instructions\">Vector Widening Integer Multiply-Add Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#133-vector-widening-floating-point-addsubtract-instructions\">Vector Widening Floating-Point Add/Subtract Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#135-vector-widening-floating-point-multiply\">Vector Widening Floating-Point Multiply</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1318-widening-floating-pointinteger-type-convert-instructions\">Widening Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1319-narrowing-floating-pointinteger-type-convert-instructions\">Narrowing Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#137-vector-widening-floating-point-fused-multiply-add-instructions\">Vector Widening Floating-Point Fused Multiply-Add Instructions</a></li>\n</ul>\n<p>I have Implemented <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a> in #6542 and #6555.</p>\n<p>I have a branch that contains <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a> in <a href=\"https://github.com/afonso360/wasmtime/tree/riscv-simd-widening-mul\">riscv-simd-widening-mul</a>, however before merging that I think it we should rework our approach towards these instructions.</p>\n<p>Matching one of these instructions includes a lot of rules mostly due to how many combinations we can perform with <code>{s,u}widen_{low,high}</code>, so before adding any more instruction I think we need to add an extractor that can match all of these patterns.</p>\n<p>As an example <code>vwmulsu.vv</code> requires 8 rules to match all combinations of <code>{s,u}widen_{low,high}</code>.</p>\n<h2>Vector Multiple Register Move</h2>\n<p>We have implemented <code>vmv1r.v</code> as our move instruction, this instruction moves one register into another. However we also have <code>vmv2r.v</code> / <code>vmv4r.v</code> / <code>vmv8r.v</code>. These instructions move n consecutive registers.</p>\n<p>As an example, <code>vmv2r.v v10, v12</code> copies <code>v10=v12; v11=v13</code>.</p>\n<p>These instructions have a constraint that the source and destination registers must be \"aligned\" to the number of the instruction.</p>\n<p>So, <code>vmv2r.v v11, v15</code> would be an illegal instruction.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#166-whole-vector-register-move\">Whole Vector Register Move</a></li>\n</ul>\n<h2>Vector Reduction Operations</h2>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#141-vector-single-width-integer-reduction-instructions\">Vector Single-Width Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#142-vector-widening-integer-reduction-instructions\">Vector Widening Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#143-vector-single-width-floating-point-reduction-instructions\">Vector Single-Width Floating-Point Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#144-vector-widening-floating-point-reduction-instructions\">Vector Widening Floating-Point Reduction Instructions</a></li>\n</ul>\n<p>I'm not entirely sure how we can best match these operations. We don't have the equivalent instructions in cranelift.</p>\n<p>These instructions do a operation on an entire vector register, such as a sum and return a scalar value. We have two of these implemented <code>vredminu</code> and <code>vredmaxu</code>  that are used when lowering <code>vany_true</code> or <code>vall_true</code>.</p>\n<h2>Special Load / Store Addressing Modes</h2>\n<p>We currently implement <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#74-vector-unit-stride-instructions\">Vector Unit-Stride Instructions</a> for all our Loads and Stores. These are fairly simple in that they load <code>vl</code> elements that are a fixed number of bits apart. These match the semantics of the <code>load</code> and <code>store</code> instructions in cranelift.</p>\n<p>The remaining Addressing Modes might be beneficial, but I have no idea how we could match them. Some of these might not be that useful.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#75-vector-strided-instructions\">Vector Strided Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#76-vector-indexed-instructions\">Vector Indexed Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#77-unit-stride-fault-only-first-loads\">Unit-stride Fault-Only-First Loads</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#78-vector-loadstore-segment-instructions\">Vector Load/Store Segment Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#79-vector-loadstore-whole-register-instructions\">Vector Load/Store Whole Register Instructions</a></li>\n</ul>\n<h2>Vector Integer Division</h2>\n<p>We don't actually support vector <code>sdiv</code> / <code>udiv</code>, nevertheless RISC-V includes instructions for them in <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a>. I'm including this here mostly for completeness.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a></li>\n</ul>\n</blockquote>",
        "id": 395532689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696764532
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7186\">issue #7186</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a general issue for tracking the missing instructions from the RISC-V Vector extension. We have implemented most of them, however there are a couple of categories that are still missing</p>\n<h2>Widening and Narrowing Operations</h2>\n<ul>\n<li>[x] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#117-vector-narrowing-integer-right-shift-instructions\">Vector Narrowing Integer Right Shift Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1114-vector-widening-integer-multiply-add-instructions\">Vector Widening Integer Multiply-Add Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#133-vector-widening-floating-point-addsubtract-instructions\">Vector Widening Floating-Point Add/Subtract Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#135-vector-widening-floating-point-multiply\">Vector Widening Floating-Point Multiply</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1318-widening-floating-pointinteger-type-convert-instructions\">Widening Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1319-narrowing-floating-pointinteger-type-convert-instructions\">Narrowing Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#137-vector-widening-floating-point-fused-multiply-add-instructions\">Vector Widening Floating-Point Fused Multiply-Add Instructions</a></li>\n</ul>\n<p>I have Implemented <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a> in #6542 and #6555.</p>\n<p>I have a branch that contains <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a> in <a href=\"https://github.com/afonso360/wasmtime/tree/riscv-simd-widening-mul\">riscv-simd-widening-mul</a>, however before merging that I think it we should rework our approach towards these instructions.</p>\n<p>Matching one of these instructions includes a lot of rules mostly due to how many combinations we can perform with <code>{s,u}widen_{low,high}</code>, so before adding any more instruction I think we need to add an extractor that can match all of these patterns.</p>\n<p>As an example <code>vwmulsu.vv</code> requires 8 rules to match all combinations of <code>{s,u}widen_{low,high}</code>.</p>\n<h2>Vector Multiple Register Move</h2>\n<p>We have implemented <code>vmv1r.v</code> as our move instruction, this instruction moves one register into another. However we also have <code>vmv2r.v</code> / <code>vmv4r.v</code> / <code>vmv8r.v</code>. These instructions move n consecutive registers.</p>\n<p>As an example, <code>vmv2r.v v10, v12</code> copies <code>v10=v12; v11=v13</code>.</p>\n<p>These instructions have a constraint that the source and destination registers must be \"aligned\" to the number of the instruction. <code>vmv2r.v v11, v15</code> would be an illegal instruction.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#166-whole-vector-register-move\">Whole Vector Register Move</a></li>\n</ul>\n<h2>Vector Reduction Operations</h2>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#141-vector-single-width-integer-reduction-instructions\">Vector Single-Width Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#142-vector-widening-integer-reduction-instructions\">Vector Widening Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#143-vector-single-width-floating-point-reduction-instructions\">Vector Single-Width Floating-Point Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#144-vector-widening-floating-point-reduction-instructions\">Vector Widening Floating-Point Reduction Instructions</a></li>\n</ul>\n<p>I'm not entirely sure how we can best match these operations. We don't have the equivalent instructions in cranelift.</p>\n<p>These instructions do a operation on an entire vector register, such as a sum and return a scalar value. We have two of these implemented <code>vredminu</code> and <code>vredmaxu</code>  that are used when lowering <code>vany_true</code> or <code>vall_true</code>.</p>\n<h2>Special Load / Store Addressing Modes</h2>\n<p>We currently implement <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#74-vector-unit-stride-instructions\">Vector Unit-Stride Instructions</a> for all our Loads and Stores. These are fairly simple in that they load <code>vl</code> elements that are a fixed number of bits apart. These match the semantics of the <code>load</code> and <code>store</code> instructions in cranelift.</p>\n<p>The remaining Addressing Modes might be beneficial, but I have no idea how we could match them. Some of these might not be that useful.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#75-vector-strided-instructions\">Vector Strided Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#76-vector-indexed-instructions\">Vector Indexed Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#77-unit-stride-fault-only-first-loads\">Unit-stride Fault-Only-First Loads</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#78-vector-loadstore-segment-instructions\">Vector Load/Store Segment Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#79-vector-loadstore-whole-register-instructions\">Vector Load/Store Whole Register Instructions</a></li>\n</ul>\n<h2>Vector Integer Division</h2>\n<p>We don't actually support vector <code>sdiv</code> / <code>udiv</code>, nevertheless RISC-V includes instructions for them in <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a>. I'm including this here mostly for completeness.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a></li>\n</ul>\n</blockquote>",
        "id": 395532814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696764608
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7186\">issue #7186</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is a general issue for tracking the missing instructions from the RISC-V Vector extension. We have implemented most of them, however there are a couple of categories that are still missing</p>\n<h2>Widening and Narrowing Operations</h2>\n<ul>\n<li>[x] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#117-vector-narrowing-integer-right-shift-instructions\">Vector Narrowing Integer Right Shift Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1114-vector-widening-integer-multiply-add-instructions\">Vector Widening Integer Multiply-Add Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#133-vector-widening-floating-point-addsubtract-instructions\">Vector Widening Floating-Point Add/Subtract Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#135-vector-widening-floating-point-multiply\">Vector Widening Floating-Point Multiply</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1318-widening-floating-pointinteger-type-convert-instructions\">Widening Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1319-narrowing-floating-pointinteger-type-convert-instructions\">Narrowing Floating-Point/Integer Type-Convert Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#137-vector-widening-floating-point-fused-multiply-add-instructions\">Vector Widening Floating-Point Fused Multiply-Add Instructions</a></li>\n</ul>\n<p>I have Implemented <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#112-vector-widening-integer-addsubtract\">Vector Widening Integer Add/Subtract</a> in #6542 and #6555.</p>\n<p>I also have a branch that contains <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1112-vector-widening-integer-multiply-instructions\">Vector Widening Integer Multiply Instructions</a> in <a href=\"https://github.com/afonso360/wasmtime/tree/riscv-simd-widening-mul\">riscv-simd-widening-mul</a>, however before merging that I think it we should rework our approach towards these instructions.</p>\n<p>Matching one of these instructions includes a lot of rules mostly due to how many combinations we can perform with <code>{s,u}widen_{low,high}</code>, so before adding any more instruction I think we need to add an extractor that can match all of these patterns.</p>\n<p>As an example <code>vwmulsu.vv</code> requires 8 rules to match all combinations of <code>{s,u}widen_{low,high}</code>.</p>\n<h2>Vector Multiple Register Move</h2>\n<p>We have implemented <code>vmv1r.v</code> as our move instruction, this instruction moves one register into another. However we also have <code>vmv2r.v</code> / <code>vmv4r.v</code> / <code>vmv8r.v</code>. These instructions move n consecutive registers.</p>\n<p>As an example, <code>vmv2r.v v10, v12</code> copies <code>v10=v12; v11=v13</code>.</p>\n<p>These instructions have a constraint that the source and destination registers must be \"aligned\" to the number of the instruction. <code>vmv2r.v v11, v15</code> would be an illegal instruction.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#166-whole-vector-register-move\">Whole Vector Register Move</a></li>\n</ul>\n<h2>Vector Reduction Operations</h2>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#141-vector-single-width-integer-reduction-instructions\">Vector Single-Width Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#142-vector-widening-integer-reduction-instructions\">Vector Widening Integer Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#143-vector-single-width-floating-point-reduction-instructions\">Vector Single-Width Floating-Point Reduction Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#144-vector-widening-floating-point-reduction-instructions\">Vector Widening Floating-Point Reduction Instructions</a></li>\n</ul>\n<p>I'm not entirely sure how we can best match these operations. We don't have the equivalent instructions in cranelift.</p>\n<p>These instructions do a operation on an entire vector register, such as a sum and return a scalar value. We have two of these implemented <code>vredminu</code> and <code>vredmaxu</code>  that are used when lowering <code>vany_true</code> or <code>vall_true</code>.</p>\n<h2>Special Load / Store Addressing Modes</h2>\n<p>We currently implement <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#74-vector-unit-stride-instructions\">Vector Unit-Stride Instructions</a> for all our Loads and Stores. These are fairly simple in that they load <code>vl</code> elements that are a fixed number of bits apart. These match the semantics of the <code>load</code> and <code>store</code> instructions in cranelift.</p>\n<p>The remaining Addressing Modes might be beneficial, but I have no idea how we could match them. Some of these might not be that useful.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#75-vector-strided-instructions\">Vector Strided Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#76-vector-indexed-instructions\">Vector Indexed Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#77-unit-stride-fault-only-first-loads\">Unit-stride Fault-Only-First Loads</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#78-vector-loadstore-segment-instructions\">Vector Load/Store Segment Instructions</a></li>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#79-vector-loadstore-whole-register-instructions\">Vector Load/Store Whole Register Instructions</a></li>\n</ul>\n<h2>Vector Integer Division</h2>\n<p>We don't actually support vector <code>sdiv</code> / <code>udiv</code>, nevertheless RISC-V includes instructions for them in <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a>. I'm including this here mostly for completeness.</p>\n<ul>\n<li>[ ] <a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1111-vector-integer-divide-instructions\">Vector Integer Divide Instructions</a></li>\n</ul>\n</blockquote>",
        "id": 395538108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696768678
    }
]