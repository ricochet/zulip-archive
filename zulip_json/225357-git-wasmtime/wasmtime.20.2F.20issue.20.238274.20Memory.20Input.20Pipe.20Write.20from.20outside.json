[
    {
        "content": "<p>MinusGix opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When supplying a custom<code>MemoryInputPipe</code> to <code>WasiCtxBuilder</code> as <code>stdin</code> it would be useful to have the ability to write to it in order to communicate with the program.  </p>\n<p>(The specific use-case here is spawning WASM programs that essentially act like LSPs, communicating over a simple text interface rather than directly calling functions)</p>\n<h4>Benefit</h4>\n<p>Allows sending data through stdin, and reading data from stdout/stderr.</p>\n<h4>Implementation</h4>\n<p>Probably have to change <code>MemoryInputPipe</code> to use a <code>BytesMut</code>.  <br>\nCould add standard <code>std::io::Read</code>/<code>std::io::Write</code> implementations to <code>MemoryInputPipe</code> (and <code>MemoryOutputPipe</code>, though that's readable though <code>.content()</code>) like the old <code>ReadPipe</code>/<code>WritePipe</code> from wasi-common?</p>\n<h4>Alternatives</h4>\n<p>Reimplement a version locally.  <br>\n(Could be I've missed some alternative solution?)</p>\n</blockquote>",
        "id": 430535928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711943909
    },
    {
        "content": "<p>MinusGix edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When supplying a custom<code>MemoryInputPipe</code> to <code>WasiCtxBuilder</code> as <code>stdin</code> it would be useful to have the ability to write to it in order to communicate with the program.  </p>\n<p>(The specific use-case here is spawning WASM programs that essentially act like LSPs, communicating over a simple text interface rather than directly calling functions)</p>\n<h4>Benefit</h4>\n<p>Allows sending data through stdin, along with reading data from stdout/stderr.</p>\n<h4>Implementation</h4>\n<p>Probably have to change <code>MemoryInputPipe</code> to use a <code>BytesMut</code>.  <br>\nCould add standard <code>std::io::Read</code>/<code>std::io::Write</code> implementations to <code>MemoryInputPipe</code> (and <code>MemoryOutputPipe</code>, though that's readable though <code>.content()</code>) like the old <code>ReadPipe</code>/<code>WritePipe</code> from wasi-common?</p>\n<h4>Alternatives</h4>\n<p>Reimplement a version locally.  <br>\n(Could be I've missed some alternative solution?)</p>\n</blockquote>",
        "id": 430535971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711943948
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274#issuecomment-2029656061\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<p>Would <code>wasmtime_wasi::pipe::AsyncReadStream</code> work for you? It allows the guest to read from an <code>AsyncRead</code> you supply.</p>\n</blockquote>",
        "id": 430582975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711973116
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274#issuecomment-2029915714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<p>To confirm, @MinusGix are you using the C API? If so then this implemented in the C API at this time. If you're using the Rust API, however, you can use <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/struct.WasiCtxBuilder.html#method.stdin\"><code>WasiCtxBuilder::stdin</code></a> with a custom implementation of <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/trait.StdinStream.html\"><code>StdinStream</code></a> where the <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/trait.HostInputStream.html\"><code>HostInputStream</code></a> you're implementing would be backed by <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/pipe/struct.AsyncReadStream.html\"><code>AsyncReadStream</code></a> as @bjorn3 mentioned.</p>\n</blockquote>",
        "id": 430609052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711984204
    },
    {
        "content": "<p>MinusGix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274#issuecomment-2030373867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<p>I am using the Rust API, updating a project that was last on 14.0.0.</p>\n<p>I have not directly used async/tokio much in any past projects, which makes it unclear what type to use that implements <code>AsyncRead</code> + can be shared so that we can write to it from elsewhere. If there's some obvious choice here, I was unable to find it after some searching on the net/tokio docs.  </p>\n<p>If I'm needing a custom implementation, then it seems simpler to reuse a modified <code>MemoryInputStream</code> to implement <code>Write</code> (and if provided in wasmtime would make it simpler as a user).  </p>\n</blockquote>",
        "id": 430648749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711998405
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274#issuecomment-2032785636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<p>I think what you probably want is a <a href=\"https://docs.rs/tokio/latest/tokio/io/struct.DuplexStream.html\"><code>DuplexStream</code></a></p>\n</blockquote>",
        "id": 430850940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712082941
    },
    {
        "content": "<p>MinusGix closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When supplying a custom<code>MemoryInputPipe</code> to <code>WasiCtxBuilder</code> as <code>stdin</code> it would be useful to have the ability to write to it in order to communicate with the program.  </p>\n<p>(The specific use-case here is spawning WASM programs that essentially act like LSPs, communicating over a simple text interface rather than directly calling functions)</p>\n<h4>Benefit</h4>\n<p>Allows sending data through stdin, along with reading data from stdout/stderr.</p>\n<h4>Implementation</h4>\n<p>Probably have to change <code>MemoryInputPipe</code> to use a <code>BytesMut</code>.  <br>\nCould add standard <code>std::io::Read</code>/<code>std::io::Write</code> implementations to <code>MemoryInputPipe</code> (and <code>MemoryOutputPipe</code>, though that's readable though <code>.content()</code>) like the old <code>ReadPipe</code>/<code>WritePipe</code> from wasi-common?</p>\n<h4>Alternatives</h4>\n<p>Reimplement a version locally.  <br>\n(Could be I've missed some alternative solution?)</p>\n</blockquote>",
        "id": 430876454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712093094
    },
    {
        "content": "<p>MinusGix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274#issuecomment-2033125705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8274\">issue #8274</a>:</p>\n<blockquote>\n<p>That'll probably work.  <br>\nLooking back, the primary issue is seemingly that I was confused about <code>MemoryInputPipe</code>/<code>MemoryOutputPipe</code>: I was interpreting them as \"buffers to read/write from which are just missing utility functions\", but they're actually for having some fixed data that you want to pass in or having a fixed size buffer to write data into.  </p>\n</blockquote>",
        "id": 430876455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712093095
    }
]