[
    {
        "content": "<p>salmmanfred opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! Please fill out the TODOs below.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339346687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677850581
    },
    {
        "content": "<p>salmmanfred labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! Please fill out the TODOs below.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339346688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677850581
    },
    {
        "content": "<p>salmmanfred labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! Please fill out the TODOs below.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339346689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677850581
    },
    {
        "content": "<p>salmmanfred edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue! Please fill out the TODOs below.</p>\n<h3>The Code</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339346783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677850609
    },
    {
        "content": "<p>salmmanfred edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<h3>The Code</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339347039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677850673
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920#issuecomment-1454081311\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p><code>pr</code> needs to be <code>extern \"sysv\"</code> as that is what you use when calling it. By the way I would suggest using cranelift-jit instead of manually writing code to handle jitting.</p>\n</blockquote>",
        "id": 339436694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677874771
    },
    {
        "content": "<p>salmmanfred <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920#issuecomment-1454715663\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<p>Currently only experimenting, but its working now with extern. Thanks! </p>\n</blockquote>",
        "id": 339540899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677931208
    },
    {
        "content": "<p>salmmanfred closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5920\">issue #5920</a>:</p>\n<blockquote>\n<h3>The Code</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FuncRef</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EntityRef</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">codegen</span>::<span class=\"p\">{</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"p\">{</span><span class=\"n\">JITModule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">target_lexicon</span>::<span class=\"n\">Triple</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">write</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">pr</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">b</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">c</span>:<span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"n\">d</span>:<span class=\"kt\">i64</span><span class=\"p\">){</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{t},{},{},{}\"</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"c1\">//println!(\"{:?}\",*t);</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_compile</span><span class=\"p\">(){</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">isa</span>::<span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">Triple</span>::<span class=\"n\">host</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error looking up target: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">isa_builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">isa_builder</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">write_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n\n<span class=\"w\">       </span><span class=\"c1\">// write_sig.returns.push(AbiParam::new(pointer_type));</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write_address</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n\n\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">plus_three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">plus_one</span><span class=\"p\">,</span><span class=\"n\">plus_two</span><span class=\"p\">);</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">write_sig</span><span class=\"p\">,</span><span class=\"n\">write_address</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n<span class=\"w\">   </span><span class=\"c1\">// builder.ins().store(mem_flags, cell_value, plus_three, 0);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">,</span><span class=\"n\">plus_three</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">());</span>\n\n\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">isa</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memmap2</span>::<span class=\"n\">MmapOptions</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_anon</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">code_buffer</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">make_exec</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code_fn</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"sysv64\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"n\">code_fn</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"out: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>The pr should print out 113 4 times</p>\n<h3>Actual Results</h3>\n<p>The pr function prints out random values <br>\nwhen you have the pr set up to only have 3 I64s<br>\nthe middle I64 is always correct <br>\nwhen there is 2 or less I64s there are no correct results </p>\n<p>when you have 4 I64s there are 2 correct and 2 wrong results. <br>\nI have not tried added more I64 arguments </p>\n<p>![bild](<a href=\"https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png\">https://user-images.githubusercontent.com/32799244/222733355-ca869c9a-4e20-4752-99bf-53a4e14a2273.png</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: 0.93.0</p>\n<p>Operating system: Windows 10 19042.1288</p>\n<p>Architecture: X86</p>\n<h3>Extra Info</h3>\n<p>Im quite new to cranelift but this just does not make sense im unsure if I messed something up when experimenting but to me this seems like a bug. </p>\n</blockquote>",
        "id": 339540901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677931208
    }
]