[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">PR #1384</a> from <code>linking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit adds a new type to the <code>wasmtime</code> crate, a <code>Linker</code>. This<br>\nlinker is intended to vastly simplify calling <code>Instance::new</code> by easily<br>\nperforming name resolution and incrementally defining state over time.<br>\nThe goal here is to start down a path of making linking wasm modules in<br>\n<code>wasmtime</code> a first-class and ergonomic operation. This is highly likely<br>\nto evolve over time and get tweaked through releases as we iterate<br>\ntowards a design well-suited for <code>wasmtime</code>, but this is intended to at<br>\nleast be the initial foundation for such functionality.</p>\n<p>This commit additionally also adds a C API for the linker and switches<br>\nthe existing linking examples to using this linker in both Rust and C.</p>\n<p>One piece of future work I'd like to tackle next is to integrate WASI<br>\ninto the <code>wasmtime</code> crate in a more first-class manner. This [<code>Linker</code>]<br>\ntype provides a great location to hook into the instantiation process to<br>\neasily instantiate modules with WASI imports. That's a relatively large<br>\nrefactoring for now though and I figured it'd be best left for a<br>\ndifferent time.</p>\n<p>Closes #727</p>\n</blockquote>",
        "id": 191498190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584980537
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">PR #1384</a> from <code>linking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit adds a new type to the <code>wasmtime</code> crate, a <code>Linker</code>. This<br>\nlinker is intended to vastly simplify calling <code>Instance::new</code> by easily<br>\nperforming name resolution and incrementally defining state over time.<br>\nThe goal here is to start down a path of making linking wasm modules in<br>\n<code>wasmtime</code> a first-class and ergonomic operation. This is highly likely<br>\nto evolve over time and get tweaked through releases as we iterate<br>\ntowards a design well-suited for <code>wasmtime</code>, but this is intended to at<br>\nleast be the initial foundation for such functionality.</p>\n<p>This commit additionally also adds a C API for the linker and switches<br>\nthe existing linking examples to using this linker in both Rust and C.</p>\n<p>One piece of future work I'd like to tackle next is to integrate WASI<br>\ninto the <code>wasmtime</code> crate in a more first-class manner. This [<code>Linker</code>]<br>\ntype provides a great location to hook into the instantiation process to<br>\neasily instantiate modules with WASI imports. That's a relatively large<br>\nrefactoring for now though and I figured it'd be best left for a<br>\ndifferent time.</p>\n<p>Closes #727</p>\n</blockquote>",
        "id": 191502213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584982076
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379834955\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379834955\">PR Review</a>.</p>",
        "id": 191540961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396770339\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396770339\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's a little odd to me that <code>Linker::instantiate</code> needs to be <code>&amp;mut self</code>.  Perhaps an <code>Linker::insert_key</code> and <code>Linker::get_key</code> method, where the former does what <code>Linker::import_key</code> is doing now and the latter returns <code>Option&lt;ImportKey&gt;</code> after checking if the given strings are present in the data structures without interning?  That would remove the requirement of this being <code>&amp;mut self</code>.</p>\n</blockquote>",
        "id": 191540962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396767790\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396767790\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this (and the corresponding Rust impl) be <code>const wasm_instance_t*</code>?</p>\n</blockquote>",
        "id": 191540963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379834955\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379834955\">PR Review</a>.</p>",
        "id": 191540964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396767134\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396767134\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this (and the corresponding Rust impl) be <code>const wasi_instance_t*</code>?</p>\n</blockquote>",
        "id": 191540965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396766755\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396766755\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>WASM_API_EXTERN own wasmtime_linker_t* wasmtime_linker_new(wasm_store_t* store);\n</pre></div>\n\n\n</blockquote>",
        "id": 191540966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396772513\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396772513\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Assuming <code>Linker::instantiate</code> can become <code>&amp;self</code>, this (and the corresponding Rust impl) should probably be <code>const wasmtime_linker_t *</code>.</p>\n</blockquote>",
        "id": 191540968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396774392\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396774392\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Extreme nit: <code>record_instantiate</code> implies a record is kept some somewhere to me. Perhaps <code>handle_instantiation</code> since it takes <code>Result&lt;Instance&gt;</code>?</p>\n</blockquote>",
        "id": 191540969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396772184\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396772184\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this (and the corresponding Rust impl) be <code>const wasm_module_t*</code>?</p>\n</blockquote>",
        "id": 191540970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999914
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396770339\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396770339\">PR Review Comment</a>.</p>",
        "id": 191541011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584999944
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379884560\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379884560\">PR Review</a>.</p>",
        "id": 191548482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585004284
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396807230\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r396807230\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In general builders in Rust have <code>&amp;mut self</code> even on the build methods, primarily for future-flexibility. That being said given the way I envision this being used I think we'll want a guarantee that <code>&amp;mut self</code> isn't needed and that mutations don't happen. In that sense I agree, let's shoot for <code>&amp;self</code> here.</p>\n</blockquote>",
        "id": 191548483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585004284
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">PR #1384</a> from <code>linking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit adds a new type to the <code>wasmtime</code> crate, a <code>Linker</code>. This<br>\nlinker is intended to vastly simplify calling <code>Instance::new</code> by easily<br>\nperforming name resolution and incrementally defining state over time.<br>\nThe goal here is to start down a path of making linking wasm modules in<br>\n<code>wasmtime</code> a first-class and ergonomic operation. This is highly likely<br>\nto evolve over time and get tweaked through releases as we iterate<br>\ntowards a design well-suited for <code>wasmtime</code>, but this is intended to at<br>\nleast be the initial foundation for such functionality.</p>\n<p>This commit additionally also adds a C API for the linker and switches<br>\nthe existing linking examples to using this linker in both Rust and C.</p>\n<p>One piece of future work I'd like to tackle next is to integrate WASI<br>\ninto the <code>wasmtime</code> crate in a more first-class manner. This [<code>Linker</code>]<br>\ntype provides a great location to hook into the instantiation process to<br>\neasily instantiate modules with WASI imports. That's a relatively large<br>\nrefactoring for now though and I figured it'd be best left for a<br>\ndifferent time.</p>\n<p>Closes #727</p>\n</blockquote>",
        "id": 191549103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585004652
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379910489\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-379910489\">PR Review</a>.</p>",
        "id": 191552781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585007403
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">PR #1384</a> from <code>linking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit adds a new type to the <code>wasmtime</code> crate, a <code>Linker</code>. This<br>\nlinker is intended to vastly simplify calling <code>Instance::new</code> by easily<br>\nperforming name resolution and incrementally defining state over time.<br>\nThe goal here is to start down a path of making linking wasm modules in<br>\n<code>wasmtime</code> a first-class and ergonomic operation. This is highly likely<br>\nto evolve over time and get tweaked through releases as we iterate<br>\ntowards a design well-suited for <code>wasmtime</code>, but this is intended to at<br>\nleast be the initial foundation for such functionality.</p>\n<p>This commit additionally also adds a C API for the linker and switches<br>\nthe existing linking examples to using this linker in both Rust and C.</p>\n<p>One piece of future work I'd like to tackle next is to integrate WASI<br>\ninto the <code>wasmtime</code> crate in a more first-class manner. This [<code>Linker</code>]<br>\ntype provides a great location to hook into the instantiation process to<br>\neasily instantiate modules with WASI imports. That's a relatively large<br>\nrefactoring for now though and I figured it'd be best left for a<br>\ndifferent time.</p>\n<p>Closes #727</p>\n</blockquote>",
        "id": 191558889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585013393
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">PR #1384</a>.</p>",
        "id": 191560343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585015353
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-380624816\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-380624816\">PR Review</a>.</p>",
        "id": 191659800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585077543
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r397402411\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r397402411\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This should have a <code>?</code> to handle errors.</p>\n</blockquote>",
        "id": 191659801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585077543
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r397407022\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#discussion_r397407022\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh good eye, I've added a commit to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1391\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1391\">https://github.com/bytecodealliance/wasmtime/pull/1391</a> which denies warnings in doctests to catch this</p>\n</blockquote>",
        "id": 191660810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585078058
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-380630571\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384#pullrequestreview-380630571\">PR Review</a>.</p>",
        "id": 191660811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585078058
    }
]