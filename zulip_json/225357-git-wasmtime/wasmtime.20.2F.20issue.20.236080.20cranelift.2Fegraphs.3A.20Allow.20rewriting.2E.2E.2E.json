[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a mid-end optimization rule in ISLE matches an instruction which has a result value, it should be possible to replace that instruction with an unconditional trap. For example, <code>(udiv _ _ (iconst _ 0))</code> should rewrite to a trap with code <code>int_divz</code>.</p>\n<p>This is only possible once we resolve #5908; until then, ISLE rules never fire for instructions which could trap.</p>\n<h4>Benefit</h4>\n<p>This particular rewrite doesn't fit in our current framework, which only supports replacing a value with another value.</p>\n<p>Traps, specifically, are special. They make the rest of the current block unreachable, as well as any block dominated by the current block. It's important to drop all dominated blocks because those are exactly the blocks which may have used the result of the original instruction. It's also useful to drop all dominated instructions because then we can avoid running all the egraph machinery on any of them.</p>\n<p>Like the branch optimizations that we aren't doing yet, discarding dominated branches may move other blocks down the dominator tree and make some block parameters known. We don't have to update the dominator tree when that happens, but it's useful to do because it makes more information available to the affected blocks, which can lead to better optimizations. </p>\n<h4>Implementation</h4>\n<p>The ISLE <code>simplify</code> term can only produce instructions which have a result <code>Value</code>, so it can't directly produce a <code>trap</code> instruction. I think we should change its return type to a new <code>ValueOrTrap</code> enum, and define an implicit conversion from <code>Value</code> to <code>ValueOrTrap</code>. When a rule returns the <code>Trap</code> variant with a trap code, the caller needs to remove the remaining instructions in the current block and insert the appropriate <code>trap</code> instruction into the data-flow graph.</p>\n<p>If _any_ rewrite rule says that an instruction is equivalent to a trap, then we can ignore all the other rewrites and just take the trap. This is sort of like how <code>subsume</code> works.</p>\n<p>Things would get a little weird if a trap were generated somewhere other than the top-level right-hand side of a rule. All instructions which use the result would be unreachable, and those instructions' other operands would be unused, so we'd end up deleting all the instructions created by the rule except for the trap. Making the return type of <code>simplify</code> be the only place where a trap can appear means we can statically prevent writing rules which do this extra work.</p>\n<p>It's also weird if this happens while we're doing recursive simplification on instructions which were newly-created by other rewrites. However, I think that case isn't actually useful and we should just prohibit it, since that means a rule created an instruction which would trap, without being equivalent to any possibly-trapping instruction in the original program. We could panic if we see a rewrite to a trap during recursive simplification.</p>\n<h4>Alternatives</h4>\n<p>I haven't thought of any besides keeping the _status quo_, but I think we should do something like this.</p>\n</blockquote>",
        "id": 343484866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679421933
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080#issuecomment-1478427458\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<p>Also, maybe the block where the trap occurs should be automatically marked <code>cold</code>. It obviously is not going to execute more than once per invocation of the program; blocks don't get much more cold than that.</p>\n</blockquote>",
        "id": 343495386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679424930
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a mid-end optimization rule in ISLE matches an instruction which has a result value, it should be possible to replace that instruction with an unconditional trap. For example, <code>(udiv _ _ (iconst _ 0))</code> should rewrite to a trap with code <code>int_divz</code>.</p>\n<p>This is only possible once we resolve #5908; until then, ISLE rules never fire for instructions which could trap.</p>\n<h4>Benefit</h4>\n<p>This particular rewrite doesn't fit in our current framework, which only supports replacing a value with another value.</p>\n<p>Traps, specifically, are special. They make the rest of the current block unreachable, as well as any block dominated by the current block. It's important to drop all dominated blocks because those are exactly the blocks which may have used the result of the original instruction. It's also useful to drop all dominated instructions because then we can avoid running all the egraph machinery on any of them.</p>\n<p>Like the branch optimizations that we aren't doing yet, discarding dominated branches may move other blocks down the dominator tree and make some block parameters known. We don't have to update the dominator tree when that happens, but it's useful to do because it makes more information available to the affected blocks, which can lead to better optimizations. </p>\n<h4>Implementation</h4>\n<p>The ISLE <code>simplify</code> term can only produce instructions which have a result <code>Value</code>, so it can't directly produce a <code>trap</code> instruction. I think we should change its return type to a new <code>ValueOrTrap</code> enum, and define an implicit conversion from <code>Value</code> to <code>ValueOrTrap</code>. When a rule returns the <code>Trap</code> variant with a trap code, the caller needs to remove the remaining instructions in the current block and insert the appropriate <code>trap</code> instruction into the data-flow graph.</p>\n<p>If _any_ rewrite rule says that an instruction is equivalent to a trap, then we can ignore all the other rewrites and just take the trap. This is sort of like how <code>subsume</code> works.</p>\n<p>Things would get a little weird if a trap were generated somewhere other than the top-level right-hand side of a rule. All instructions which use the result would be unreachable, and those instructions' other operands would be unused, so we'd end up deleting all the instructions created by the rule except for the trap. Making the return type of <code>simplify</code> be the only place where a trap can appear means we can statically prevent writing rules which do this extra work.</p>\n<p>It's also weird if this happens while we're doing recursive simplification on instructions which were newly-created by other rewrites. However, I think that case isn't actually useful and we should just prohibit it, since that means a rule created an instruction which would trap, without being equivalent to any possibly-trapping instruction in the original program. We could panic if we see a rewrite to a trap during recursive simplification.</p>\n<h4>Alternatives</h4>\n<p>I haven't thought of any besides keeping the _status quo_, but I think we should do something like this.</p>\n</blockquote>",
        "id": 343495542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679424966
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a mid-end optimization rule in ISLE matches an instruction which has a result value, it should be possible to replace that instruction with an unconditional trap. For example, <code>(udiv _ _ (iconst _ 0))</code> should rewrite to a trap with code <code>int_divz</code>.</p>\n<p>This is only possible once we resolve #5908; until then, ISLE rules never fire for instructions which could trap.</p>\n<h4>Benefit</h4>\n<p>This particular rewrite doesn't fit in our current framework, which only supports replacing a value with another value.</p>\n<p>Traps, specifically, are special. They make the rest of the current block unreachable, as well as any block dominated by the current block. It's important to drop all dominated blocks because those are exactly the blocks which may have used the result of the original instruction. It's also useful to drop all dominated instructions because then we can avoid running all the egraph machinery on any of them.</p>\n<p>Like the branch optimizations that we aren't doing yet, discarding dominated branches may move other blocks down the dominator tree and make some block parameters known. We don't have to update the dominator tree when that happens, but it's useful to do because it makes more information available to the affected blocks, which can lead to better optimizations. </p>\n<h4>Implementation</h4>\n<p>The ISLE <code>simplify</code> term can only produce instructions which have a result <code>Value</code>, so it can't directly produce a <code>trap</code> instruction. I think we should change its return type to a new <code>ValueOrTrap</code> enum, and define an implicit conversion from <code>Value</code> to <code>ValueOrTrap</code>. When a rule returns the <code>Trap</code> variant with a trap code, the caller needs to remove the remaining instructions in the current block and insert the appropriate <code>trap</code> instruction into the data-flow graph.</p>\n<p>If _any_ rewrite rule says that an instruction is equivalent to a trap, then we can ignore all the other rewrites and just take the trap. This is sort of like how <code>subsume</code> works.</p>\n<p>Things would get a little weird if a trap were generated somewhere other than the top-level right-hand side of a rule. All instructions which use the result would be unreachable, and those instructions' other operands would be unused, so we'd end up deleting all the instructions created by the rule except for the trap. Making the return type of <code>simplify</code> be the only place where a trap can appear means we can statically prevent writing rules which do this extra work.</p>\n<p>It's also weird if this happens while we're doing recursive simplification on instructions which were newly-created by other rewrites. However, I think that case isn't actually useful and we should just prohibit it, since that means a rule created an instruction which would trap, without being equivalent to any possibly-trapping instruction in the original program. We could panic if we see a rewrite to a trap during recursive simplification.</p>\n<h4>Alternatives</h4>\n<p>I haven't thought of any besides keeping the _status quo_, but I think we should do something like this.</p>\n</blockquote>",
        "id": 343495543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679424966
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a mid-end optimization rule in ISLE matches an instruction which has a result value, it should be possible to replace that instruction with an unconditional trap. For example, <code>(udiv _ _ (iconst _ 0))</code> should rewrite to a trap with code <code>int_divz</code>.</p>\n<p>This is only possible once we resolve #5908; until then, ISLE rules never fire for instructions which could trap.</p>\n<h4>Benefit</h4>\n<p>This particular rewrite doesn't fit in our current framework, which only supports replacing a value with another value.</p>\n<p>Traps, specifically, are special. They make the rest of the current block unreachable, as well as any block dominated by the current block. It's important to drop all dominated blocks because those are exactly the blocks which may have used the result of the original instruction. It's also useful to drop all dominated instructions because then we can avoid running all the egraph machinery on any of them.</p>\n<p>Like the branch optimizations that we aren't doing yet, discarding dominated branches may move other blocks down the dominator tree and make some block parameters known. We don't have to update the dominator tree when that happens, but it's useful to do because it makes more information available to the affected blocks, which can lead to better optimizations. </p>\n<h4>Implementation</h4>\n<p>The ISLE <code>simplify</code> term can only produce instructions which have a result <code>Value</code>, so it can't directly produce a <code>trap</code> instruction. I think we should change its return type to a new <code>ValueOrTrap</code> enum, and define an implicit conversion from <code>Value</code> to <code>ValueOrTrap</code>. When a rule returns the <code>Trap</code> variant with a trap code, the caller needs to remove the remaining instructions in the current block and insert the appropriate <code>trap</code> instruction into the data-flow graph.</p>\n<p>If _any_ rewrite rule says that an instruction is equivalent to a trap, then we can ignore all the other rewrites and just take the trap. This is sort of like how <code>subsume</code> works.</p>\n<p>Things would get a little weird if a trap were generated somewhere other than the top-level right-hand side of a rule. All instructions which use the result would be unreachable, and those instructions' other operands would be unused, so we'd end up deleting all the instructions created by the rule except for the trap. Making the return type of <code>simplify</code> be the only place where a trap can appear means we can statically prevent writing rules which do this extra work.</p>\n<p>It's also weird if this happens while we're doing recursive simplification on instructions which were newly-created by other rewrites. However, I think that case isn't actually useful and we should just prohibit it, since that means a rule created an instruction which would trap, without being equivalent to any possibly-trapping instruction in the original program. We could panic if we see a rewrite to a trap during recursive simplification.</p>\n<h4>Alternatives</h4>\n<p>I haven't thought of any besides keeping the _status quo_, but I think we should do something like this.</p>\n</blockquote>",
        "id": 343495544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679424966
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6080\">issue #6080</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>When a mid-end optimization rule in ISLE matches an instruction which has a result value, it should be possible to replace that instruction with an unconditional trap. For example, <code>(udiv _ _ (iconst _ 0))</code> should rewrite to a trap with code <code>int_divz</code>.</p>\n<p>This is only possible once we resolve #5908; until then, ISLE rules never fire for instructions which could trap.</p>\n<h4>Benefit</h4>\n<p>This particular rewrite doesn't fit in our current framework, which only supports replacing a value with another value.</p>\n<p>Traps, specifically, are special. They make the rest of the current block unreachable, as well as any block dominated by the current block. It's important to drop all dominated blocks because those are exactly the blocks which may have used the result of the original instruction. It's also useful to drop all dominated instructions because then we can avoid running all the egraph machinery on any of them.</p>\n<p>Like the branch optimizations that we aren't doing yet, discarding dominated branches may move other blocks down the dominator tree and make some block parameters known. We don't have to update the dominator tree when that happens, but it's useful to do because it makes more information available to the affected blocks, which can lead to better optimizations. </p>\n<h4>Implementation</h4>\n<p>The ISLE <code>simplify</code> term can only produce instructions which have a result <code>Value</code>, so it can't directly produce a <code>trap</code> instruction. I think we should change its return type to a new <code>ValueOrTrap</code> enum, and define an implicit conversion from <code>Value</code> to <code>ValueOrTrap</code>. When a rule returns the <code>Trap</code> variant with a trap code, the caller needs to remove the remaining instructions in the current block and insert the appropriate <code>trap</code> instruction into the data-flow graph.</p>\n<p>If _any_ rewrite rule says that an instruction is equivalent to a trap, then we can ignore all the other rewrites and just take the trap. This is sort of like how <code>subsume</code> works.</p>\n<p>Things would get a little weird if a trap were generated somewhere other than the top-level right-hand side of a rule. All instructions which use the result would be unreachable, and those instructions' other operands would be unused, so we'd end up deleting all the instructions created by the rule except for the trap. Making the return type of <code>simplify</code> be the only place where a trap can appear means we can statically prevent writing rules which do this extra work.</p>\n<p>It's also weird if this happens while we're doing recursive simplification on instructions which were newly-created by other rewrites. However, I think that case isn't actually useful and we should just prohibit it, since that means a rule created an instruction which would trap, without being equivalent to any possibly-trapping instruction in the original program. We could panic if we see a rewrite to a trap during recursive simplification.</p>\n<h4>Alternatives</h4>\n<p>I haven't thought of any besides keeping the _status quo_, but I think we should do something like this.</p>\n</blockquote>",
        "id": 343495545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679424966
    }
]