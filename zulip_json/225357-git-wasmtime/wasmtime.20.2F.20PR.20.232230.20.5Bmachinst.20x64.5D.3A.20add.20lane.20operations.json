[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230\">PR #2230</a> from <code>lane</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds x64 implementations for <code>extract_lane</code>, <code>replace_lane</code>, <code>shuffle</code>, and <code>swizzle</code> as well as some saturating addition (necessary for <code>swizzle</code>). I cannot yet enable the <code>simd_lane.wast</code> test because it also uses other instructions like <code>splat</code>, <code>all_true</code>, and <code>any_true</code> but I did verify that the assertions in <code>simd_lane.wast</code> that do not use these instructions pass.</p>\n</blockquote>",
        "id": 211289343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601055419
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-496621522\">PR Review</a>.</p>",
        "id": 211289771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601055647
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495138223\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The frontend could have incorrectly passed for example 2 as lane. Maybe add a <code>debug_assert!</code> that <code>lane &lt; src_ty.lane_count()</code>?</p>\n</blockquote>",
        "id": 211289772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601055647
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-496621568\">PR Review</a>.</p>",
        "id": 211289778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601055651
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495138269\">PR Review Comment</a>:</p>\n<blockquote>\n<p>These assertions were only valid for <code>CMPP*</code>; with the addition of <code>PINSR*</code> and <code>PEXTR*</code> the reg classes can come from I64 in either slot (perhaps we could keep the <code>imm</code> assertion with <code>imm &lt; 16</code>).</p>\n</blockquote>",
        "id": 211289780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601055651
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-496915113\">PR Review</a>.</p>",
        "id": 211330572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-496915113\">PR Review</a>.</p>",
        "id": 211330573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495323698\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Little style preference mostly, but maybe do a <code>let swapped = match *op { ... };</code> and then <code>let (dst, src) = if swapped { ... } else { ... };</code>? This keeps the code duplication down in case we add more logic around the <code>emit_...()</code> call later.</p>\n</blockquote>",
        "id": 211330574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495323928\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd prefer an <code>assert!()</code> here to ensure we avoid those opcodes, then avoid the extra nesting level of the if/else.</p>\n</blockquote>",
        "id": 211330575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495324616\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Doc comment and/or better name for this field perhaps? All the others are self-explanatory but I'm not sure what just <code>w</code> means without context...</p>\n</blockquote>",
        "id": 211330576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495325431\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, on preview below, the raw bool params to the encoding functions are somewhat bothersome; can we make this an enum instead for more self-documenting goodness?</p>\n</blockquote>",
        "id": 211330577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495328300\">PR Review Comment</a>:</p>\n<blockquote>\n<p>comment clarification request: somewhat subtle, but let's note that the <em>CLIF</em> instruction spec also specifies this behavior. In theory we might have chosen a simpler behavior at the CLIF level and done the Wasm-required magic in the translation; the swizzle op in CLIF just happens to be aligned with Wasm. (It probably doesn't matter much and is unlikely to change, but precision doesn't hurt...).</p>\n</blockquote>",
        "id": 211330578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601078277
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-497373262\">PR Review</a>.</p>",
        "id": 211473755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601288082
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-497424649\">PR Review</a>.</p>",
        "id": 211480690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601293293
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-497424649\">PR Review</a>.</p>",
        "id": 211480691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601293293
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495872717\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Even better, for static goodness: use a different Vcode instruction for these two opcodes, so that the error becomes a compile time error.</p>\n</blockquote>",
        "id": 211480692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601293293
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495875158\">PR Review Comment</a>:</p>\n<blockquote>\n<p>While this may map the intel manual more closely, it's unusual and quite disturbing to see an input named <code>dst0</code> here, and it could lead to mental mapping errors (e.g. this can be written to without any issue). Can you name this <code>in_vec</code> or something like this?</p>\n</blockquote>",
        "id": 211480693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601293293
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r495873200\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Also, the tradition has to name this <code>is64</code> to indicate a 64-bits operation or something along those lines.</p>\n</blockquote>",
        "id": 211480695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601293293
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-497732140\">PR Review</a>.</p>",
        "id": 211520480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601312768
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r496104769\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I went with the <code>assert!</code> here; it's a bit burdensome to create new <code>Inst</code> variants and creating new ones just adds to the chaos of deciding which variant to pick during lowering.</p>\n</blockquote>",
        "id": 211520481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601312768
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#pullrequestreview-497736367\">PR Review</a>.</p>",
        "id": 211521195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601313114
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230#discussion_r496107943\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Added additional documentation here. But note that we shouldn't translate the semantics at the Wasm-to-CLIF level because that would disadvantage ARM since the semantics of their instruction matches the Wasm SIMD semantics. (If you look at issues in the Wasm SIMD repository I've brought up several times how the Wasm SIMD semantics are skewed towards matching ARM semantics).</p>\n</blockquote>",
        "id": 211521196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601313114
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230\">PR #2230</a> from <code>lane</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change adds x64 implementations for <code>extract_lane</code>, <code>replace_lane</code>, <code>shuffle</code>, and <code>swizzle</code> as well as some saturating addition (necessary for <code>swizzle</code>). I cannot yet enable the <code>simd_lane.wast</code> test because it also uses other instructions like <code>splat</code>, <code>all_true</code>, and <code>any_true</code> but I did verify that the assertions in <code>simd_lane.wast</code> that do not use these instructions pass.</p>\n</blockquote>",
        "id": 211537871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601321048
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2230\">PR #2230</a>.</p>",
        "id": 211640055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1601394315
    }
]