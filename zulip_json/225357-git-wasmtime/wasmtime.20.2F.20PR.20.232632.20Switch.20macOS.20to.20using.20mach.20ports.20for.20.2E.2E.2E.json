[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a> from <code>mach-ports</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit moves macOS to using mach ports instead of signals for<br>\nhandling traps. The motivation for this is listed in #2456, namely that<br>\nonce mach ports are used in a process that means traditional UNIX signal<br>\nhandlers won't get used. This means that if Wasmtime is integrated with<br>\nBreakpad, for example, then Wasmtime's trap handler never fires and<br>\ntraps don't work.</p>\n<p>The <code>traphandlers</code> module is refactored as part of this commit to split<br>\nthe platform-specific bits into their own files (it was growing quite a<br>\nlot for one inline <code>cfg_if!</code>). The <code>unix.rs</code> and <code>windows.rs</code> files<br>\nremain the same as they were before with a few minor tweaks for some<br>\nrefactored interfaces. The <code>macos.rs</code> file is brand new and lifts almost<br>\nits entire implementation from SpiderMonkey, adapted for Wasmtime<br>\nthough.</p>\n<p>The main gotcha with mach ports is that a separate thread is what<br>\nservices the exception. Some unsafe magic allows this separate thread to<br>\nread non-<code>Send</code> and temporary state from other threads, but is hoped to<br>\nbe safe in this context. The unfortunate downside is that calling wasm<br>\non macOS now involves taking a global lock and modifying a global hash<br>\nmap twice-per-call. I'm not entirely sure how to get out of this cost<br>\nfor now, but hopefully for any embeddings on macOS it's not the end of<br>\nthe world.</p>\n<p>Closes #2456</p>\n</blockquote>",
        "id": 225080038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385681
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a> from <code>mach-ports</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit moves macOS to using mach ports instead of signals for<br>\nhandling traps. The motivation for this is listed in #2456, namely that<br>\nonce mach ports are used in a process that means traditional UNIX signal<br>\nhandlers won't get used. This means that if Wasmtime is integrated with<br>\nBreakpad, for example, then Wasmtime's trap handler never fires and<br>\ntraps don't work.</p>\n<p>The <code>traphandlers</code> module is refactored as part of this commit to split<br>\nthe platform-specific bits into their own files (it was growing quite a<br>\nlot for one inline <code>cfg_if!</code>). The <code>unix.rs</code> and <code>windows.rs</code> files<br>\nremain the same as they were before with a few minor tweaks for some<br>\nrefactored interfaces. The <code>macos.rs</code> file is brand new and lifts almost<br>\nits entire implementation from SpiderMonkey, adapted for Wasmtime<br>\nthough.</p>\n<p>The main gotcha with mach ports is that a separate thread is what<br>\nservices the exception. Some unsafe magic allows this separate thread to<br>\nread non-<code>Send</code> and temporary state from other threads, but is hoped to<br>\nbe safe in this context. The unfortunate downside is that calling wasm<br>\non macOS now involves taking a global lock and modifying a global hash<br>\nmap twice-per-call. I'm not entirely sure how to get out of this cost<br>\nfor now, but hopefully for any embeddings on macOS it's not the end of<br>\nthe world.</p>\n<p>Closes #2456</p>\n</blockquote>",
        "id": 225080213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385758
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a> from <code>mach-ports</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit moves macOS to using mach ports instead of signals for<br>\nhandling traps. The motivation for this is listed in #2456, namely that<br>\nonce mach ports are used in a process that means traditional UNIX signal<br>\nhandlers won't get used. This means that if Wasmtime is integrated with<br>\nBreakpad, for example, then Wasmtime's trap handler never fires and<br>\ntraps don't work.</p>\n<p>The <code>traphandlers</code> module is refactored as part of this commit to split<br>\nthe platform-specific bits into their own files (it was growing quite a<br>\nlot for one inline <code>cfg_if!</code>). The <code>unix.rs</code> and <code>windows.rs</code> files<br>\nremain the same as they were before with a few minor tweaks for some<br>\nrefactored interfaces. The <code>macos.rs</code> file is brand new and lifts almost<br>\nits entire implementation from SpiderMonkey, adapted for Wasmtime<br>\nthough.</p>\n<p>The main gotcha with mach ports is that a separate thread is what<br>\nservices the exception. Some unsafe magic allows this separate thread to<br>\nread non-<code>Send</code> and temporary state from other threads, but is hoped to<br>\nbe safe in this context. The unfortunate downside is that calling wasm<br>\non macOS now involves taking a global lock and modifying a global hash<br>\nmap twice-per-call. I'm not entirely sure how to get out of this cost<br>\nfor now, but hopefully for any embeddings on macOS it's not the end of<br>\nthe world.</p>\n<p>Closes #2456</p>\n</blockquote>",
        "id": 225080293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385779
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a> from <code>mach-ports</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit moves macOS to using mach ports instead of signals for<br>\nhandling traps. The motivation for this is listed in #2456, namely that<br>\nonce mach ports are used in a process that means traditional UNIX signal<br>\nhandlers won't get used. This means that if Wasmtime is integrated with<br>\nBreakpad, for example, then Wasmtime's trap handler never fires and<br>\ntraps don't work.</p>\n<p>The <code>traphandlers</code> module is refactored as part of this commit to split<br>\nthe platform-specific bits into their own files (it was growing quite a<br>\nlot for one inline <code>cfg_if!</code>). The <code>unix.rs</code> and <code>windows.rs</code> files<br>\nremain the same as they were before with a few minor tweaks for some<br>\nrefactored interfaces. The <code>macos.rs</code> file is brand new and lifts almost<br>\nits entire implementation from SpiderMonkey, adapted for Wasmtime<br>\nthough.</p>\n<p>The main gotcha with mach ports is that a separate thread is what<br>\nservices the exception. Some unsafe magic allows this separate thread to<br>\nread non-<code>Send</code> and temporary state from other threads, but is hoped to<br>\nbe safe in this context. The unfortunate downside is that calling wasm<br>\non macOS now involves taking a global lock and modifying a global hash<br>\nmap twice-per-call. I'm not entirely sure how to get out of this cost<br>\nfor now, but hopefully for any embeddings on macOS it's not the end of<br>\nthe world.</p>\n<p>Closes #2456</p>\n</blockquote>",
        "id": 225091558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612390656
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a> from <code>mach-ports</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit moves macOS to using mach ports instead of signals for<br>\nhandling traps. The motivation for this is listed in #2456, namely that<br>\nonce mach ports are used in a process that means traditional UNIX signal<br>\nhandlers won't get used. This means that if Wasmtime is integrated with<br>\nBreakpad, for example, then Wasmtime's trap handler never fires and<br>\ntraps don't work.</p>\n<p>The <code>traphandlers</code> module is refactored as part of this commit to split<br>\nthe platform-specific bits into their own files (it was growing quite a<br>\nlot for one inline <code>cfg_if!</code>). The <code>unix.rs</code> and <code>windows.rs</code> files<br>\nremain the same as they were before with a few minor tweaks for some<br>\nrefactored interfaces. The <code>macos.rs</code> file is brand new and lifts almost<br>\nits entire implementation from SpiderMonkey, adapted for Wasmtime<br>\nthough.</p>\n<p>The main gotcha with mach ports is that a separate thread is what<br>\nservices the exception. Some unsafe magic allows this separate thread to<br>\nread non-<code>Send</code> and temporary state from other threads, but is hoped to<br>\nbe safe in this context. The unfortunate downside is that calling wasm<br>\non macOS now involves taking a global lock and modifying a global hash<br>\nmap twice-per-call. I'm not entirely sure how to get out of this cost<br>\nfor now, but hopefully for any embeddings on macOS it's not the end of<br>\nthe world.</p>\n<p>Closes #2456</p>\n</blockquote>",
        "id": 225095609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612392917
    },
    {
        "content": "<p>bnjbvr closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2632\">PR #2632</a>.</p>",
        "id": 230661763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615973712
    }
]