[
    {
        "content": "<p><a href=\"https://github.com/fitzgen\">fitzgen</a> added the pulley label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">Issue #9163</a>.</p>",
        "id": 464460347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724353590
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<p>We should rewrite the core of the interpreter and its main loop such that we can easily flip a cargo feature on to start using nightly Rust's <code>feature(explicit_tail_calls)</code>.</p>\n<p>The way I am imagining this would be done (warning: super rough ideas incoming) is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Define a few different things used by the tail-call-agnostic parts of the</span>\n<span class=\"c1\">// interpreter, based on whether or not we are using explicit tail calls:</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 1. A macro that the rest of the crate uses to define opcode handlers. Users</span>\n<span class=\"c1\">//    of the macro provide do the following:</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">//    * Take machine state and PC as \"arguments\".</span>\n<span class=\"c1\">//    * Decode their associated opcode's immediates and operands (the PC has</span>\n<span class=\"c1\">//      already been decoded).</span>\n<span class=\"c1\">//    * Return either `Ok(new_pc)` or</span>\n<span class=\"c1\">//      `Err(Continuation::{Trap,ReturnToHost,HostCall})` to break out of the</span>\n<span class=\"c1\">//      interpreter loop.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 2. An `OpcodeHandler` function type alias.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 3. A `run` function implementing the innermost interpreter loop.</span>\n\n<span class=\"c1\">// Version that does NOT use explicit tail calls.</span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">no_tail_calls</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A handler function returns the next handler function to call, or else</span>\n<span class=\"w\">    </span><span class=\"c1\">// updates the `continuation` to be `Continuation::Trap` or whatever, as</span>\n<span class=\"w\">    </span><span class=\"c1\">// appropriate.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">OpcodeHandler</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">NextOpcodeHandler</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A newtype because Rust doesn't like cyclic type aliases, even though it</span>\n<span class=\"w\">    </span><span class=\"c1\">// shouldn't be an issue in this particular case.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">NextOpcodeHandler</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">OpcodeHandler</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">define_opcode_handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">:</span><span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"cp\">$state</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"cp\">$pc</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$body</span><span class=\"p\">:</span><span class=\"nc\">expr</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">continuation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">OpcodeHandler</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"cp\">$state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$pat</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">$body</span><span class=\"p\">)(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"c1\">// Decode the next handler and return it so that `run`</span>\n<span class=\"w\">                        </span><span class=\"c1\">// can call it.</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">next_handler</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Vm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// As tight as we can get the interpreter loop without tail calls: while</span>\n<span class=\"w\">        </span><span class=\"c1\">// the handlers keep returning the next handler to call, call it.</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">NextOpcodeHandler</span><span class=\"p\">(</span><span class=\"n\">next_handler</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// When a handler doesn't return the next handler to call, then we are</span>\n<span class=\"w\">        </span><span class=\"c1\">// doing something exceptional.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">trap</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">ReturnToHost</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">return_to_host</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">HostCall</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">host_call</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">no_tail_calls</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Version that DOES use explicit tail calls.</span>\n<span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">tail_calls</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A handler function tail calls to the next handler, if any, and ultimately</span>\n<span class=\"w\">    </span><span class=\"c1\">// updates the `continuation` to be `Continuation::Trap` or whatever when it</span>\n<span class=\"w\">    </span><span class=\"c1\">// is finally time to break out of the interpreter loop, as appropriate.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">OpcodeHandler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">define_opcode_handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">:</span><span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"cp\">$state</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"cp\">$pc</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">$body</span><span class=\"p\">:</span><span class=\"nc\">expr</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">continuation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"cp\">$state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">$body</span><span class=\"p\">)(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"c1\">// Decode the next opcode and tail call to the next handler.</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n<span class=\"w\">                        </span><span class=\"kr\">become</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Vm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// The ideal interpreter loop: a bunch of opcode handlers tail calling</span>\n<span class=\"w\">        </span><span class=\"c1\">// each other!</span>\n<span class=\"w\">        </span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">trap</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">ReturnToHost</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">return_to_host</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">HostCall</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">host_call</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tail_calls</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"sd\">/// Define the table of opcode handlers.</span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">opcode_handler_table_entry</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">OpcodeHandler</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"n\">for_each_op</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">opcode_handler_table_entry</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">extended_op_handler</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">EXTENDED_OPCODE_HANDLER_TABLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">OpcodeHandler</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">for_each_extended_op</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">opcode_handler_table_entry</span><span class=\"p\">)];</span>\n\n<span class=\"c1\">// A few examples of defining opcode handlers:</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">xadd32</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// The `decode` module will need to be extended with methods to decode</span>\n<span class=\"w\">        </span><span class=\"c1\">// an instructions immediates and operands, assuming that the associated</span>\n<span class=\"w\">        </span><span class=\"c1\">// opcode has already been deecoded.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BinaryOperands</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"p\">::</span><span class=\"n\">xadd32_imms_and_operands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">src1</span><span class=\"p\">].</span><span class=\"n\">get_i32</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">src2</span><span class=\"p\">]].</span><span class=\"n\">get_i32</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">dst</span><span class=\"p\">].</span><span class=\"n\">set_i32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">br_if</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"p\">::</span><span class=\"n\">br_if_imms_and_operands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">cond</span><span class=\"p\">].</span><span class=\"n\">get_u64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pc_rel_jump</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">new_pc</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">trap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">_state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>cc @Kmeakin, since you've been doing some Pulley stuff</p>\n</blockquote>",
        "id": 464460350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724353591
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2305448480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"pulley\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 464460490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724353637
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2305975602\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<blockquote>\n<p>define_opcode_handler! {<br>\n    fn xadd32(<br>\n        state: &amp;mut MachineState,<br>\n        mut pc: UnsafeBytecodeStream,<br>\n    ) {<br>\n        // The <code>decode</code> module will need to be extended with methods to decode<br>\n        // an instructions immediates and operands, assuming that the associated<br>\n        // opcode has already been deecoded.<br>\n        let BinaryOperands { dst, src1, src2 } = decode::xadd32_imms_and_operands(&amp;mut pc).unwrap();</p>\n<div class=\"codehilite\"><pre><span></span><code>    let a = state[src1].get_i32();\n    let b = state[src[src2]].get_i32();\n    state[dst].set_i32(a.wrapping_add(b));\n\n    Ok(pc)\n}\n</code></pre></div>\n\n<p>}<br>\n</p>\n</blockquote>\n<p>Why is a separate decoder function for the arguments needed? Why can't the existing decoder functions be used?<br>\n</p>\n</blockquote>",
        "id": 464513212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724373941
    },
    {
        "content": "<p>Kmeakin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2305979995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<p>Oh and how can we verify that the tailcall optimization does indeed result in the desired assembly (ie each opcode handler does an indirect branch to the next handler, rather than a branch back to the top of the loop)? Copy/pasting the code into Compiler Explorer and looking at the output is doable, but not automatable. </p>\n</blockquote>",
        "id": 464513579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724374262
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2307256263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<p>For the verification, I think that's a property of the <code>become</code> keyword and the compiler implementation? There's no actual loop in the source itself and <code>become</code> is defined as always performing a tail call, so pending compiler bugs I think we can probably skip the automated verification and just spot-check some disassembly of profiles perhaps to confirm it's happening?</p>\n</blockquote>",
        "id": 464664641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724424743
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2307386278\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why is a separate decoder function for the arguments needed? Why can't the existing decoder functions be used?</p>\n</blockquote>\n<p>Just so that we don't have to manually remember \"<code>xadd32</code> takes <code>BinaryOperands&lt;XReg&gt;</code> as its only operands and no immediates\" and can have that stuff stay in sync with the instruction definition by construction. Especially if/when we tweak an instruction's definition so that the compiler tells us all the places we need to update, rather than trying to remember and hoping we got all the right places.</p>\n<p>I fully expect these would be macro-generated like most stuff in this crate and defer to the underlying <code>Decode</code> implementations.</p>\n<p>Does that make senes?</p>\n</blockquote>",
        "id": 464681630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724429248
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2307386278\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why is a separate decoder function for the arguments needed? Why can't the existing decoder functions be used?</p>\n</blockquote>\n<p>Just so that we don't have to manually remember \"<code>xadd32</code> takes <code>BinaryOperands&lt;XReg&gt;</code> as its only operands and no immediates\" and can have that stuff stay in sync with the instruction definition by construction. Especially if/when we tweak an instruction's definition so that the compiler tells us all the places we need to update, rather than trying to remember and hoping we got all the right places.</p>\n<p>I fully expect these would be macro-generated like most stuff in this crate and defer to the underlying <code>Decode</code> implementations.</p>\n<p>Does that make sense?</p>\n</blockquote>",
        "id": 464681657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724429257
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<p>We should rewrite the core of the interpreter and its main loop such that we can easily flip a cargo feature on to start using nightly Rust's <code>feature(explicit_tail_calls)</code>.</p>\n<p>The way I am imagining this would be done (warning: super rough ideas incoming) is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Define a few different things used by the tail-call-agnostic parts of the</span>\n<span class=\"c1\">// interpreter, based on whether or not we are using explicit tail calls:</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 1. A macro that the rest of the crate uses to define opcode handlers. Users</span>\n<span class=\"c1\">//    of the macro provide do the following:</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">//    * Take machine state and PC as \"arguments\".</span>\n<span class=\"c1\">//    * Decode their associated opcode's immediates and operands (the PC has</span>\n<span class=\"c1\">//      already been decoded).</span>\n<span class=\"c1\">//    * Return either `Ok(new_pc)` or</span>\n<span class=\"c1\">//      `Err(Continuation::{Trap,ReturnToHost,HostCall})` to break out of the</span>\n<span class=\"c1\">//      interpreter loop.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 2. An `OpcodeHandler` function type alias.</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// 3. A `run` function implementing the innermost interpreter loop.</span>\n\n<span class=\"c1\">// Version that does NOT use explicit tail calls.</span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">no_tail_calls</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A handler function returns the next handler function to call, or else</span>\n<span class=\"w\">    </span><span class=\"c1\">// updates the `continuation` to be `Continuation::Trap` or whatever, as</span>\n<span class=\"w\">    </span><span class=\"c1\">// appropriate.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">OpcodeHandler</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">NextOpcodeHandler</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A newtype because Rust doesn't like cyclic type aliases, even though it</span>\n<span class=\"w\">    </span><span class=\"c1\">// shouldn't be an issue in this particular case.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">NextOpcodeHandler</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">OpcodeHandler</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">define_opcode_handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">:</span><span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"cp\">$state</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"cp\">$pc</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"cp\">$body</span><span class=\"p\">:</span><span class=\"nc\">expr</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">continuation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">OpcodeHandler</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"cp\">$state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$pat</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">$body</span><span class=\"p\">)(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"c1\">// Decode the next handler and return it so that `run`</span>\n<span class=\"w\">                        </span><span class=\"c1\">// can call it.</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">next_handler</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Vm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// As tight as we can get the interpreter loop without tail calls: while</span>\n<span class=\"w\">        </span><span class=\"c1\">// the handlers keep returning the next handler to call, call it.</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">NextOpcodeHandler</span><span class=\"p\">(</span><span class=\"n\">next_handler</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// When a handler doesn't return the next handler to call, then we are</span>\n<span class=\"w\">        </span><span class=\"c1\">// doing something exceptional.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">trap</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">ReturnToHost</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">return_to_host</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">HostCall</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">host_call</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">no_tail_calls</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Version that DOES use explicit tail calls.</span>\n<span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">tail_calls</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A handler function tail calls to the next handler, if any, and ultimately</span>\n<span class=\"w\">    </span><span class=\"c1\">// updates the `continuation` to be `Continuation::Trap` or whatever when it</span>\n<span class=\"w\">    </span><span class=\"c1\">// is finally time to break out of the interpreter loop, as appropriate.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">OpcodeHandler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">define_opcode_handler</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">:</span><span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"cp\">$state</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"cp\">$pc</span><span class=\"p\">:</span><span class=\"nc\">pat</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">$body</span><span class=\"p\">:</span><span class=\"nc\">expr</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"cp\">$name</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">continuation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"cp\">$state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$pc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">$body</span><span class=\"p\">)(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"c1\">// Decode the next opcode and tail call to the next handler.</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n<span class=\"w\">                        </span><span class=\"kr\">become</span><span class=\"w\"> </span><span class=\"n\">next_handler</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">;</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Vm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Opcode</span><span class=\"p\">::</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">[</span><span class=\"n\">next_opcode</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">];</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// The ideal interpreter loop: a bunch of opcode handlers tail calling</span>\n<span class=\"w\">        </span><span class=\"c1\">// each other!</span>\n<span class=\"w\">        </span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">continuation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">trap</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">ReturnToHost</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">return_to_host</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">HostCall</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">host_call</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"explicit_tail_calls\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tail_calls</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"sd\">/// Define the table of opcode handlers.</span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">opcode_handler_table_entry</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">OpcodeHandler</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"n\">for_each_op</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">opcode_handler_table_entry</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">extended_op_handler</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">EXTENDED_OPCODE_HANDLER_TABLE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">OpcodeHandler</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">for_each_extended_op</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">opcode_handler_table_entry</span><span class=\"p\">)];</span>\n\n<span class=\"c1\">// A few examples of defining opcode handlers:</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">xadd32</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// The `decode` module will need to be extended with methods to decode</span>\n<span class=\"w\">        </span><span class=\"c1\">// an instructions immediates and operands, assuming that the associated</span>\n<span class=\"w\">        </span><span class=\"c1\">// opcode has already been deecoded.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BinaryOperands</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"p\">::</span><span class=\"n\">xadd32_imms_and_operands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">src1</span><span class=\"p\">].</span><span class=\"n\">get_i32</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">src2</span><span class=\"p\">]].</span><span class=\"n\">get_i32</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">dst</span><span class=\"p\">].</span><span class=\"n\">set_i32</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wrapping_add</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">br_if</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"p\">::</span><span class=\"n\">br_if_imms_and_operands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pc</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"n\">cond</span><span class=\"p\">].</span><span class=\"n\">get_u64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_pc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pc_rel_jump</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">new_pc</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">define_opcode_handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">trap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">_state</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MachineState</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_pc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnsafeBytecodeStream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Continuation</span><span class=\"p\">::</span><span class=\"n\">Trap</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>cc @Kmeakin, since you've been doing some Pulley stuff</p>\n</blockquote>",
        "id": 486394223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733433164
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163#issuecomment-2521447549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9163\">issue #9163</a>:</p>\n<blockquote>\n<p>This is implemented now <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 486394225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733433165
    }
]