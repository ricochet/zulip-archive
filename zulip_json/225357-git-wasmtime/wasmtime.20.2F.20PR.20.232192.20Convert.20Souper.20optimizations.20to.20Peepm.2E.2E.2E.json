[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a> from <code>souper-to-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p>Conversion from Souper into Peepmatic is implemented with a straightforward, top-down recursive traversal of the optimization's left- and right-hand side expression DAGs. Most Souper instructions have a corresponding Peepmatic instruction. If we run into an instruction where that isn't the case, we skip that Souper optimization and move on to the next one.</p>\n<p>Note that Souper fully supports DAGs, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>%0 = var\n%1 = add 1, %0\n%2 = add %1, %1       ;; Two edges to `%1` makes this a DAG.\n</code></pre></div>\n\n\n<p>On the other hand, Peepmatic only currently supports trees, so shared subexpressions are duplicated:</p>\n<div class=\"codehilite\"><pre><span></span><code>(iadd (iadd 1 $x)\n      (iadd 1 $x))    ;; The shared subexpression is duplicated.\n</code></pre></div>\n\n\n<p>This does not, however, affect correctness.</p>\n<p>See also #2184, which is related. </p>\n</blockquote>",
        "id": 209703228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599768883
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a>.</p>",
        "id": 209703229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599768883
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192#pullrequestreview-486298234\">PR Review</a>.</p>",
        "id": 209707742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599771286
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192#pullrequestreview-486298234\">PR Review</a>.</p>",
        "id": 209707743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599771286
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192#discussion_r486624008\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You could use <code>as_bytes()[1]</code> as <code>%</code> is in the ascii range and you are checking if it is an ascii lowercase alphabetic character.</p>\n</blockquote>",
        "id": 209707745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599771286
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a> from <code>souper-to-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p>Conversion from Souper into Peepmatic is implemented with a straightforward, top-down recursive traversal of the optimization's left- and right-hand side expression DAGs. Most Souper instructions have a corresponding Peepmatic instruction. If we run into an instruction where that isn't the case, we skip that Souper optimization and move on to the next one.</p>\n<p>Note that Souper fully supports DAGs, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>%0 = var\n%1 = add 1, %0\n%2 = add %1, %1       ;; Two edges to `%1` makes this a DAG.\n</code></pre></div>\n\n\n<p>On the other hand, Peepmatic only currently supports trees, so shared subexpressions are duplicated:</p>\n<div class=\"codehilite\"><pre><span></span><code>(iadd (iadd 1 $x)\n      (iadd 1 $x))    ;; The shared subexpression is duplicated.\n</code></pre></div>\n\n\n<p>This does not, however, affect correctness.</p>\n<p>See also #2184, which is related. </p>\n</blockquote>",
        "id": 209720461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599779202
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192#pullrequestreview-487024775\">PR Review</a>.</p>",
        "id": 209816529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599848321
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a> from <code>souper-to-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p>Conversion from Souper into Peepmatic is implemented with a straightforward, top-down recursive traversal of the optimization's left- and right-hand side expression DAGs. Most Souper instructions have a corresponding Peepmatic instruction. If we run into an instruction where that isn't the case, we skip that Souper optimization and move on to the next one.</p>\n<p>Note that Souper fully supports DAGs, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>%0 = var\n%1 = add 1, %0\n%2 = add %1, %1       ;; Two edges to `%1` makes this a DAG.\n</code></pre></div>\n\n\n<p>On the other hand, Peepmatic only currently supports trees, so shared subexpressions are duplicated:</p>\n<div class=\"codehilite\"><pre><span></span><code>(iadd (iadd 1 $x)\n      (iadd 1 $x))    ;; The shared subexpression is duplicated.\n</code></pre></div>\n\n\n<p>This does not, however, affect correctness.</p>\n<p>See also #2184, which is related. </p>\n</blockquote>",
        "id": 209836368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599859120
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a> from <code>souper-to-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p>Conversion from Souper into Peepmatic is implemented with a straightforward, top-down recursive traversal of the optimization's left- and right-hand side expression DAGs. Most Souper instructions have a corresponding Peepmatic instruction. If we run into an instruction where that isn't the case, we skip that Souper optimization and move on to the next one.</p>\n<p>Note that Souper fully supports DAGs, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>%0 = var\n%1 = add 1, %0\n%2 = add %1, %1       ;; Two edges to `%1` makes this a DAG.\n</code></pre></div>\n\n\n<p>On the other hand, Peepmatic only currently supports trees, so shared subexpressions are duplicated:</p>\n<div class=\"codehilite\"><pre><span></span><code>(iadd (iadd 1 $x)\n      (iadd 1 $x))    ;; The shared subexpression is duplicated.\n</code></pre></div>\n\n\n<p>This does not, however, affect correctness.</p>\n<p>See also #2184, which is related. </p>\n</blockquote>",
        "id": 209836587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599859264
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2192\">PR #2192</a>.</p>",
        "id": 209839882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599861278
    }
]