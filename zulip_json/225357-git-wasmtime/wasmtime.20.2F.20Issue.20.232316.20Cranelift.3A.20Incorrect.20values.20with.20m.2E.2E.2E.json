[
    {
        "content": "<p>chrisvittal edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?<br>\nRun the code attached at the bottom of this post. It builds a very simple function that takes 3 pointer parameters, prints them with <code>printf</code> then returns them in a permuted order. The clif is as follows:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v9</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I build the code with a <code>FunctionBuilder</code> much like the <code>toy</code> example. Then I call it from rust as follows, printing out diagnostic information along the way.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from rust:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Retval</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Retval</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from compiled:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Retval</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">zero_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from returned:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The output I then see (in debug mode), (with variation on exact addresses but the offsets are usually similar) is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">rust</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bf6c0</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf6c8</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x7ffe818bf6d0</span><span class=\"w\"></span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">compiled</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bf840</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf6c0</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x7ffe818bf6c8</span><span class=\"w\"></span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">returned</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bfa88</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf880</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x557e358e62a0</span><span class=\"w\"></span>\n</code></pre></div>\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I expect the block parameters to have the same values that were passed into the function. I expect the return values to be what the function should return.</p>\n<ul>\n<li>\n<p>Which Cranelift version / commit hash / branch are you using?<br>\n<code>0.67.0</code></p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)<br>\nrustc 1.49.0-nightly (8dae8cdcc 2020-10-12)<br>\nx86_64-unknown-linux-gnu</p>\n</li>\n</ul>\n<p>Thank you for your assistance.</p>\n<p>Full code here:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Cargo.toml</span>\n<span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"cranelift-repro\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"k\">[\"Chris Vittal &lt;chris@vittal.dev&gt;\"]</span>\n<span class=\"n\">edition</span> <span class=\"o\">=</span> <span class=\"s\">\"2018\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">cranelift</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n<span class=\"n\">cranelift-module</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n<span class=\"n\">cranelift-simplejit</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_simplejit</span>::<span class=\"p\">{</span><span class=\"n\">SimpleJITBackend</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SimpleJITBuilder</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">CString</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Retval</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimpleJITBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cranelift_module</span>::<span class=\"n\">default_libcall_names</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"nc\">Module</span><span class=\"o\">&lt;</span><span class=\"n\">SimpleJITBackend</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_context</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">target_config</span><span class=\"p\">().</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">fn_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fn_sig</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this is hacky</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">printf_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf_sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_context</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"printf\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">printf_sig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}: %p</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"no nulls\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">into_bytes_with_nul</span><span class=\"p\">().</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"data_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_data</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data_ctx</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_data_in_func</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">symbol_value</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">param</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_returns</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret_params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ret_params</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"test_fn\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">codegen</span>::<span class=\"n\">binemit</span>::<span class=\"n\">NullTrapSink</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">finalize_definitions</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">get_finalized_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Retval</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from rust:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from compiled:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Retval</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">zero_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from returned:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214441858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603563849
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716041202\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>It isn't allowed to return more than 3 values. This should result in an error when you run the verifier.</p>\n</blockquote>",
        "id": 214444028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603566584
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716041626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>Also using multiple return values to represent returning a tuple struct is not correct in the general case. For the two primitive elements case it happens to be correct on x86_64 with the System-V call conv, but for three or more elements the function in most cases actually takes a pointer to where the struct needs to be stored.</p>\n</blockquote>",
        "id": 214444203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603566780
    },
    {
        "content": "<p>chrisvittal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716046932\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>Thank you for the explanation. I added a call to <code>verify_function</code> and got no errors.</p>\n</blockquote>",
        "id": 214446143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603569335
    },
    {
        "content": "<p>chrisvittal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716047615\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>More specifically,</p>\n<p>I added this line after finishing, but before finalizing the builder.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">codegen</span>::<span class=\"n\">verify_function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">isa</span><span class=\"p\">())))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>And It gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">59</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">isa</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TargetIsa</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">triple</span>: <span class=\"nc\">Triple</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">architecture</span>: <span class=\"nc\">X86_64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vendor</span>: <span class=\"nc\">Unknown</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">operating_system</span>: <span class=\"nc\">Linux</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">environment</span>: <span class=\"nc\">Gnu</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binary_format</span>: <span class=\"nc\">Elf</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">pointer_width</span>: <span class=\"nc\">U64</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">59</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">codegen</span>::<span class=\"n\">verify_function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"p\">()))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214446434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603569662
    },
    {
        "content": "<p>chrisvittal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716048942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>Thank you for your help. I'll update my program with this in mind.</p>\n</blockquote>",
        "id": 214446980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603570286
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716049366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>The three return value case is an extension of the System-V abi, it only gives a verifier error for four or more return values. While this extension is supported by both Cranelift and I think LLVM, it will never be used for <code>#[repr(C)]</code> structs with three register sized elements, as that would be in conflict with the System-V abi. I am pretty sure there is no way to convince rustc to use this extension. You should instead just take an extra argument that points to a place to write the return value to.</p>\n</blockquote>",
        "id": 214447169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603570484
    },
    {
        "content": "<p>chrisvittal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316#issuecomment-716052835\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>I'm updating my program to use output parameters now.</p>\n<p>I'm going to close this.</p>\n<p>This is a really nice project. Thanks for you help and support.</p>\n</blockquote>",
        "id": 214448537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603572312
    },
    {
        "content": "<p>chrisvittal closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2316\">Issue #2316</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?<br>\nRun the code attached at the bottom of this post. It builds a very simple function that takes 3 pointer parameters, prints them with <code>printf</code> then returns them in a permuted order. The clif is as follows:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gv2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"n\">u1</span>:<span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">symbol_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">block1</span><span class=\"p\">(</span><span class=\"n\">v9</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I build the code with a <code>FunctionBuilder</code> much like the <code>toy</code> example. Then I call it from rust as follows, printing out diagnostic information along the way.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from rust:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Retval</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Retval</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from compiled:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Retval</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">zero_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from returned:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The output I then see (in debug mode), (with variation on exact addresses but the offsets are usually similar) is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">rust</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bf6c0</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf6c8</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x7ffe818bf6d0</span><span class=\"w\"></span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">compiled</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bf840</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf6c0</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x7ffe818bf6c8</span><span class=\"w\"></span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">returned</span>:\n<span class=\"mi\">0</span>: <span class=\"mh\">0x7ffe818bfa88</span><span class=\"w\"></span>\n<span class=\"mi\">1</span>: <span class=\"mh\">0x7ffe818bf880</span><span class=\"w\"></span>\n<span class=\"mi\">2</span>: <span class=\"mh\">0x557e358e62a0</span><span class=\"w\"></span>\n</code></pre></div>\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I expect the block parameters to have the same values that were passed into the function. I expect the return values to be what the function should return.</p>\n<ul>\n<li>\n<p>Which Cranelift version / commit hash / branch are you using?<br>\n<code>0.67.0</code></p>\n</li>\n<li>\n<p>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)<br>\nrustc 1.49.0-nightly (8dae8cdcc 2020-10-12)<br>\nx86_64-unknown-linux-gnu</p>\n</li>\n</ul>\n<p>Thank you for your assistance.</p>\n<p>Full code here:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Cargo.toml</span>\n<span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"cranelift-repro\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"k\">[\"Chris Vittal &lt;chris@vittal.dev&gt;\"]</span>\n<span class=\"n\">edition</span> <span class=\"o\">=</span> <span class=\"s\">\"2018\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">cranelift</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n<span class=\"n\">cranelift-module</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n<span class=\"n\">cranelift-simplejit</span> <span class=\"o\">=</span> <span class=\"s\">\"0.67.0\"</span>\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// main.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">DataContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_simplejit</span>::<span class=\"p\">{</span><span class=\"n\">SimpleJITBackend</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SimpleJITBuilder</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">CString</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Retval</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimpleJITBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cranelift_module</span>::<span class=\"n\">default_libcall_names</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DataContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"nc\">Module</span><span class=\"o\">&lt;</span><span class=\"n\">SimpleJITBackend</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_context</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">target_config</span><span class=\"p\">().</span><span class=\"n\">pointer_type</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">fn_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn_sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fn_sig</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// this is hacky</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">printf_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf_sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_context</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"printf\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">printf_sig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}: %p</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"no nulls\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">into_bytes_with_nul</span><span class=\"p\">().</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"data_{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_data</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data_ctx</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_data_in_func</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">symbol_value</span><span class=\"p\">(</span><span class=\"n\">ptr_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">param</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_returns</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret_params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ret_params</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"test_fn\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">codegen</span>::<span class=\"n\">binemit</span>::<span class=\"n\">NullTrapSink</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">finalize_definitions</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">get_finalized_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Retval</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from rust:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">zero_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from compiled:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Retval</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">zero_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">one_r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">two_r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"from returned:\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2: {:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214448538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603572312
    }
]