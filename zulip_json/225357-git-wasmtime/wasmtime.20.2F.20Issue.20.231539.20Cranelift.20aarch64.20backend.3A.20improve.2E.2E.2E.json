[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>Right now, the <code>vcode</code> filetest matches the pretty-printed assembly with the filecheck directives. To test the new aarch64 backend, we've written a bunch of filetests that match against a golden compilation. This works for now, but is somewhat brittle: if regalloc heuristics change which registers are used, the tests need to be updated. In addition, it requires us to match the whole function body to ensure that nothing else was generated, when all we really want to do is to assert that a <em>particular</em> operation was implemented by only these N instructions. We should look into porting or building an equivalent of the old backend's \"assert this instruction has this encoding\" functionality, and its register constraints that make tests more robust.</p>\n</blockquote>",
        "id": 194472092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587143600
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>Right now, the <code>vcode</code> filetest matches the pretty-printed assembly with the filecheck directives. To test the new aarch64 backend, we've written a bunch of filetests that match against a golden compilation. This works for now, but is somewhat brittle: if regalloc heuristics change which registers are used, the tests need to be updated. In addition, it requires us to match the whole function body to ensure that nothing else was generated, when all we really want to do is to assert that a <em>particular</em> operation was implemented by only these N instructions. We should look into porting or building an equivalent of the old backend's \"assert this instruction has this encoding\" functionality, and its register constraints that make tests more robust.</p>\n</blockquote>",
        "id": 194472147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587143622
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>Right now, the <code>vcode</code> filetest matches the pretty-printed assembly with the filecheck directives. To test the new aarch64 backend, we've written a bunch of filetests that match against a golden compilation. This works for now, but is somewhat brittle: if regalloc heuristics change which registers are used, the tests need to be updated. In addition, it requires us to match the whole function body to ensure that nothing else was generated, when all we really want to do is to assert that a <em>particular</em> operation was implemented by only these N instructions. We should look into porting or building an equivalent of the old backend's \"assert this instruction has this encoding\" functionality, and its register constraints that make tests more robust.</p>\n</blockquote>",
        "id": 194472148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587143622
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539#issuecomment-615370913\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539#issuecomment-615370913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>Did you know about the regex match functionality of filetest?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L5\" title=\"https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L5\">https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L5</a></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L40-L41\" title=\"https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L40-L41\">https://github.com/bytecodealliance/wasmtime/blob/86ff6d7aef8017da4b77b9b8d69a71c4a2b443cb/cranelift/filetests/filetests/regalloc/coalesce.clif#L40-L41</a></p>\n</blockquote>",
        "id": 194474029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587144516
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539#issuecomment-615377231\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539#issuecomment-615377231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>FWIW one technique which has worked out really well for the Rust project and others I've seen is to have exhaustive assertions about the output (like it seems you're describing is the current state today), but also having a way to auto-update the assertion. This means that at a glance you can always see the complete output of something (such as the full function in all its glory) but if you make a minor tweak to epilogue generation you can easily update the whole test suite. Reviewing is generally quite easy too because you're either looking at something entirely new in which case you can review it in detail, or you're reviewing changes to what was already there so you can easily spot things which may have accidentally changed but shouldn't have.</p>\n<p>The way this typically works is there's some sort of opt-in \"bless\" option. With rust-lang/rust it's <code>./x.py test --bless</code> but with some projects I've worked on it's just <code>BLESS=1 cargo test</code>. My workflow is generally to write a test and then always use <code>BLESS=1</code>, reviewing the output manually to make sure it looks ok.</p>\n<p>I'd be happy to help prototype this if folks think it's a good idea.</p>\n</blockquote>",
        "id": 194475682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587145344
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>Right now, the <code>vcode</code> filetest matches the pretty-printed assembly with the filecheck directives. To test the new aarch64 backend, we've written a bunch of filetests that match against a golden compilation. This works for now, but is somewhat brittle: if regalloc heuristics change which registers are used, the tests need to be updated. In addition, it requires us to match the whole function body to ensure that nothing else was generated, when all we really want to do is to assert that a <em>particular</em> operation was implemented by only these N instructions. We should look into porting or building an equivalent of the old backend's \"assert this instruction has this encoding\" functionality, and its register constraints that make tests more robust.</p>\n</blockquote>",
        "id": 194515910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587169297
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539#issuecomment-690475368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1539\">Issue #1539</a>:</p>\n<blockquote>\n<p>This issue is going to be a major headache for any attempt to fix #1148 in the AArch64 backend.</p>\n</blockquote>",
        "id": 209674121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599755940
    }
]