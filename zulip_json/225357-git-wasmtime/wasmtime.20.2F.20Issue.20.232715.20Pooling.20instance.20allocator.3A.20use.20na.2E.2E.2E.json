[
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Currently the pooling instance allocator page-aligns each instance in the pool.</p>\n<p>This is unnecessary and can lead to wasting a space to alignment padding.</p>\n<p>Instances can be aligned according to their natural alignment instead as the pooling instance allocator does not muck around with the backing pages for an instance like it does with the other resources.</p>\n</blockquote>",
        "id": 229381498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615240795
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Currently the pooling instance allocator page-aligns each instance in the pool.</p>\n<p>This is unnecessary and can lead to wasting a space to alignment padding.</p>\n<p>Instances can be aligned according to their natural alignment instead as the pooling instance allocator does not muck around with the backing pages for an instance like it does with the other resources.</p>\n</blockquote>",
        "id": 229381499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615240795
    },
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Currently the pooling instance allocator page-aligns each instance in the pool.</p>\n<p>This is unnecessary and can lead to wasting a space to alignment padding.</p>\n<p>Instances can be aligned according to their natural alignment instead as the pooling instance allocator does not muck around with the backing pages for an instance like it does with the other resources.</p>\n</blockquote>",
        "id": 229381500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615240795
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Currently the pooling instance allocator page-aligns each instance in the pool.</p>\n<p>This is unnecessary and can lead to wasting some space to alignment padding.</p>\n<p>Instances can be aligned according to their natural alignment instead as the pooling instance allocator does not muck around with the backing pages for an instance like it does with the other resources.</p>\n</blockquote>",
        "id": 229381644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615240820
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715#issuecomment-793162793\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a>:</p>\n<blockquote>\n<p>Replying to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2518#issuecomment-792956929\">https://github.com/bytecodealliance/wasmtime/pull/2518#issuecomment-792956929</a> over here....</p>\n<p>For tables you mention that decommit is needed, but that's just a fancy way to do <code>memset</code> with zeros, right? Is the kernel doing it for us that much faster than us doing it ourselves? (not sure if this was a bottleneck in lucet, for example).</p>\n<p>For malloc/free as well I'm imagining that we'd malloc the whole pool and then do custom memory management within the pool itself FWIW, rather than using malloc/free for each individual instance and table.</p>\n<p>My main thinking with using malloc/free is that it's just generally a bit more portable and helps us to work with any old chunk of memory rather than something that's specificall mmap'd</p>\n</blockquote>",
        "id": 229394580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615245690
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715#issuecomment-793315028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a>:</p>\n<blockquote>\n<p>Correct, it's just a fancy way to <code>memset</code> for tables, so it can be replaced with that.  It would certainly be worth benchmarking to see if managing the table pool is worth the added complexity.  Lucet doesn't implement it this way since tables are read-only and part of the compilation artifact itself iirc (that is to say, tables are not a concern of the runtime).</p>\n<p>Re the portability issue, the pooling allocator needs the platform specific implementation anyway for managing the linear memory pool, so switching over the instance and table pools likely won't rid us of much platform-specific code.</p>\n<p>Still, it can't hurt to investigate such a design.</p>\n</blockquote>",
        "id": 229414973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615259737
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715#issuecomment-793315028\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a>:</p>\n<blockquote>\n<p>Correct, it's just a fancy way to <code>memset</code> for tables, so it can be replaced with that.  It would certainly be worth benchmarking to see if managing the table pool is worth the added complexity.  Lucet doesn't implement it this way since tables are read-only and part of the compilation artifact itself iirc (that is to say, tables are not a concern of the runtime).</p>\n<p>Re: the portability issue, the pooling allocator needs the platform specific implementation anyway for managing the linear memory pool, so switching over the instance and table pools likely won't rid us of much platform-specific code.</p>\n<p>Still, it can't hurt to investigate such a design.</p>\n</blockquote>",
        "id": 229415017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615259764
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715#issuecomment-793315028\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2715\">Issue #2715</a>:</p>\n<blockquote>\n<p>Correct, it's just a fancy way to <code>memset</code> for tables, so it can be replaced with that.  It would certainly be worth benchmarking to see if managing the table pool is worth the added complexity.  Lucet doesn't implement it this way since tables are read-only and part of the compilation artifact itself iirc (that is to say, tables are not a concern of the runtime).</p>\n<p>Re: the portability issue, the pooling allocator needs the platform specific implementation anyway for managing the linear memory pool, so switching over the instance and table pools to <code>malloc</code>/<code>free</code> likely won't rid us of much platform-specific code.</p>\n<p>Still, it can't hurt to investigate such a design.</p>\n</blockquote>",
        "id": 229415099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615259855
    }
]