[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a> from <code>jameysharp:table-traps</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently, every access to a table element does a bounds-check with a conditional branch to a block that explicitly traps.</p>\n<p>Instead, when SPECTRE mitigations are enabled, let's change the address computation to return a null pointer for out-of-bounds accesses, and then allow the subsequent load or store to trap.</p>\n<p>This is less code in that case since we can reuse instructions we needed anyway.</p>\n<p>In addition, when the table has constant size and the element index is a constant and mid-end optimization is enabled, this allows the bounds-check to be constant folded away. Later, #8139 will let us optimize away the select_spectre_guard instruction in this case too.</p>\n<p>Once we also implement #8160, <code>tests/disas/typed-funcrefs.wat</code> should be almost as fast as native indirect function calls.</p>\n</blockquote>",
        "id": 427568115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793326
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427568120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793327
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427568121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793327
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427568122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793327
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#pullrequestreview-1944168730\">PR review</a>:</p>\n<blockquote>\n<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>In addition to the question I put below, could you update <code>prepare_table_addr</code> to thread out some information \"the pointer is known to not be null\" or something like that? For example if spectre mitigations are disabled it's known that the load is in-bounds and therefore none of the trap metadata would be required.</p>\n<p>Or perhaps <code>prepare_table_addr</code> could return a <code>MemFlags</code> which has the trap code pre-configured?</p>\n</blockquote>",
        "id": 427572614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710795107
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#pullrequestreview-1944168730\">PR review</a>:</p>\n<blockquote>\n<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>In addition to the question I put below, could you update <code>prepare_table_addr</code> to thread out some information \"the pointer is known to not be null\" or something like that? For example if spectre mitigations are disabled it's known that the load is in-bounds and therefore none of the trap metadata would be required.</p>\n<p>Or perhaps <code>prepare_table_addr</code> could return a <code>MemFlags</code> which has the trap code pre-configured?</p>\n</blockquote>",
        "id": 427572615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710795108
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#discussion_r1529258385\">PR review comment</a>:</p>\n<blockquote>\n<p>AFAIK spectre mitigations are typically a flag due to their performance impact, but in this case because the spectre-related code is straight-line and actually involves less branches, is this actually the more performant path? Would it be worth, for example, unconditionally using <code>select_spectre_guard</code>?</p>\n</blockquote>",
        "id": 427572617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710795108
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#pullrequestreview-1944226018\">PR review</a>.</p>",
        "id": 427576954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710796920
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#discussion_r1529295226\">PR review comment</a>:</p>\n<blockquote>\n<p>I actually totally confused myself with the same question at first! But I ran it by @cfallin who confirmed the following: A bounds-check branch is almost always predicted correctly, and that means that if we don't care about Spectre, an out-of-order CPU can make more progress by speculating the load and continuing on to dependent operations past that, rather than stalling on the bounds-check computation.</p>\n<p>So although I haven't measured it, there should generally be a performance advantage to sticking with the <code>trapnz</code> approach, for anyone who ain't afraid of no Spectre.</p>\n</blockquote>",
        "id": 427576957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710796921
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#issuecomment-2005017083\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>:</p>\n<blockquote>\n<p>Returning the memflags is an interesting option! Let me think about that a bit.</p>\n</blockquote>",
        "id": 427577209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710797023
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427607578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814380
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427608290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814826
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171#issuecomment-2005621780\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>:</p>\n<blockquote>\n<p>Yeah, returning <code>MemFlags</code> from <code>prepare_table_addr</code> tidied things up nicely. Thanks for the suggestion, Alex!</p>\n</blockquote>",
        "id": 427608383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710814901
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427608628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710815051
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8171\">PR #8171</a>.</p>",
        "id": 427612787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710818055
    }
]