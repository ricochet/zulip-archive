[
    {
        "content": "<p>yowl opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to prepare a PR to add split wasm support, and I think I'd like to set <code>wasm_file</code> on <code>DebugInfoData</code> to the name of the wasm file being processed.  Would that be an appropriate use of <code>wasm_file</code>?</p>\n<p>Probably set it here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/compile.rs#L69\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/compile.rs#L69</a></p>\n<p>So I can use it somewhere around here <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/2c6f38622d3b009293437839e5d75b4df64fa774/crates/cranelift/src/debug/transform/mod.rs#L88\">https://github.com/bytecodealliance/wasmtime/blob/2c6f38622d3b009293437839e5d75b4df64fa774/crates/cranelift/src/debug/transform/mod.rs#L88</a><br>\nif we encounter <code>gimli::UnitType::Skeleton</code>,  The wasm module will contain the name of the <code>dwo</code>, however if the <code>dwo</code> files were packaged into a <code>dwp</code> then that name is arbirtrary and as far as I can see we can load it by convention, i,e, wasm file with the extension changed to <code>.dwp</code> or perhaps it can be an option passed to wasmtime, but in a later PR.  Chrome loads <code>.dwp</code> by convention it seems, and emscripten follows that conventions.  (I'm getting this info from <a href=\"https://developer.chrome.com/blog/faster-wasm-debugging/\">https://developer.chrome.com/blog/faster-wasm-debugging/</a>)</p>\n<p>Thanks,</p>\n</blockquote>",
        "id": 420760218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707529821
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911#issuecomment-1938878356\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>Seems reasonable to me yeah, I had no idea this field even existed myself! I do think we'll want to be a little careful about the filesystem access though since using <code>Module::new</code> for example probably shouldn't go off reading the filesystem. When using <code>Module::from_file</code>, however, reading the filesystem seems reasonable, but we probably don't want to read the dependent object files for each function and we'll want to make sure it only happens at most once.</p>\n</blockquote>",
        "id": 421058732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707751157
    },
    {
        "content": "<p>yowl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911#issuecomment-1942921006\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>I wonder if I can ask for some more advice.  I would like to pass the dwarf in here<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/85ffc394a77d06bea15f460c78251651d154aaae/crates/wasmtime/src/compile.rs#L661\">https://github.com/bytecodealliance/wasmtime/blob/85ffc394a77d06bea15f460c78251651d154aaae/crates/wasmtime/src/compile.rs#L661</a><br>\nAt least that's my current thinking.  If I load the dwarf in <code>Module::from_file</code> then I can store it in <code>Module</code> or <code>ModuleInner</code> I guess, but how would I access that in <code>link_and_append_code</code>, pass it all the way around?</p>\n</blockquote>",
        "id": 421350906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707871972
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911#issuecomment-1944036331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>It'll likely want to get attached somewhere within <code>ModuleTranslation</code> along the way. For a <code>Module::from_file</code> that's probably threading an option down into <code>Module::from_binary</code> which indicates that reading from the filesystem is ok or similar</p>\n</blockquote>",
        "id": 421466868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707923645
    },
    {
        "content": "<p>yowl closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to prepare a PR to add split wasm support, and I think I'd like to set <code>wasm_file</code> on <code>DebugInfoData</code> to the name of the wasm file being processed.  Would that be an appropriate use of <code>wasm_file</code>?</p>\n<p>Probably set it here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/compile.rs#L69\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/compile.rs#L69</a></p>\n<p>So I can use it somewhere around here <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/2c6f38622d3b009293437839e5d75b4df64fa774/crates/cranelift/src/debug/transform/mod.rs#L88\">https://github.com/bytecodealliance/wasmtime/blob/2c6f38622d3b009293437839e5d75b4df64fa774/crates/cranelift/src/debug/transform/mod.rs#L88</a><br>\nif we encounter <code>gimli::UnitType::Skeleton</code>,  The wasm module will contain the name of the <code>dwo</code>, however if the <code>dwo</code> files were packaged into a <code>dwp</code> then that name is arbirtrary and as far as I can see we can load it by convention, i,e, wasm file with the extension changed to <code>.dwp</code> or perhaps it can be an option passed to wasmtime, but in a later PR.  Chrome loads <code>.dwp</code> by convention it seems, and emscripten follows that conventions.  (I'm getting this info from <a href=\"https://developer.chrome.com/blog/faster-wasm-debugging/\">https://developer.chrome.com/blog/faster-wasm-debugging/</a>)</p>\n<p>Thanks,</p>\n</blockquote>",
        "id": 424988556,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709688509
    },
    {
        "content": "<p>yowl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911#issuecomment-1979916128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>Thanks very much for the help, I have something working I think</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/2720041/048b75b3-c150-4b51-bd3a-c51a430e2d4e\">https://github.com/bytecodealliance/wasmtime/assets/2720041/048b75b3-c150-4b51-bd3a-c51a430e2d4e</a>)</p>\n</blockquote>",
        "id": 424988558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709688510
    },
    {
        "content": "<p>yowl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911#issuecomment-1986636431\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7911\">issue #7911</a>:</p>\n<blockquote>\n<p>Going to close this now as #8055 exists.  Thanks!</p>\n</blockquote>",
        "id": 425628997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709945251
    }
]