[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, struct return is enabled in cranelift via the <code>sret</code> parameter annotation. This annotation marks the parameter as a required input, and also signals to the abi that this value will be returned and may need special handling. As the value is not explicitly returned, the lowering module is responsible for tracking and returning that parameter in an abi-defined location. Cranelift itself doesn't write data to the memory pointed to by the <code>sret</code> param, and instead relies on the clif producer to write data out.</p>\n<p>Since cranelift itself doesn't need to know that an input will ultimately be used as an <code>sret</code> location, I'd like to propose that we turn <code>sret</code> into an annotation on a return type instead. For example, consider this existing function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">sret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As the consumer is already responsible for writing to <code>v0</code>, and cranelift has no other need to know that the parameter will ultimately be a struct return, we could instead implement it as the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">sret</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>This change would simplify the lowering code a bit, and make it more clear that struct returns are for the most part coordinated by the clif producer; cranelift only needs to know about a struct return to satisfy the requirements of the abi it's targeting.</p>\n<h4>Implementation</h4>\n<p>This should be a fairly straight forward refactoring.</p>\n<h4>Alternatives</h4>\n<p>We can certainly leave struct return the way it is, keeping the connection between the parameter and return value.</p>\n</blockquote>",
        "id": 314789089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670540645
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401#issuecomment-1343491041\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<p>Strong +1 to this; in discussions about it, we started from the principle that CLIF should provide all the necessary primitives to conform to an ABI, but no more. \"Struct return\" as a concept is out-of-place in CLIF because CLIF does not have structs. Rather, the relevant detail here is that some ABIs when returning structs require a pointer to that struct to be returned in a different register than normal (<code>x8</code> on aarch64, vs. the usual <code>x0</code>). So the key idea is to allow CLIF to express this directly. The <code>sret</code> name is irrelevant; one might as well think of it as <code>special-return-in-different-slot</code> that happens to pick <code>x8</code>, etc. The reification of the flow from input arg to output is important too as it avoids the need to special-case this (a hidden SSA value generated by ABI code essentially).</p>\n</blockquote>",
        "id": 314789704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670540967
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401#issuecomment-1343550414\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<p>For AArch64 this is covered in the <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#result-return\">AAPCS64 Section 6.9</a>:</p>\n<blockquote>\n<p>[...] The address of the memory block shall be passed as an additional argument to the function in x8. The callee may modify the result memory block at any point during the execution of the subroutine (there is no requirement for the callee to preserve the value stored in x8).</p>\n</blockquote>\n<p>If I'm reading this correctly requires that the struct return argument is passed into the callee in x8. But when exiting the function x8 can be whatever the callee wants. Which would be better represented as <code>sret</code> on a function argument right?</p>\n</blockquote>",
        "id": 314794173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670543369
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401#issuecomment-1343550414\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<p>For AArch64 this is covered in the <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#result-return\">AAPCS64 Section 6.9</a>:</p>\n<blockquote>\n<p>[...] The address of the memory block shall be passed as an additional argument to the function in x8. The callee may modify the result memory block at any point during the execution of the subroutine (there is no requirement for the callee to preserve the value stored in x8).</p>\n</blockquote>\n<p>If I'm reading this correctly, it requires that the struct return argument is passed into the callee in x8. But when exiting the function x8 can be whatever the callee wants. Which would be better represented as <code>sret</code> on a function argument right?</p>\n</blockquote>",
        "id": 314794394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670543502
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401#issuecomment-1343550414\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<p>For AArch64 this is covered in the <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#result-return\">AAPCS64 Section 6.9</a>:</p>\n<blockquote>\n<p>[...] The address of the memory block shall be passed as an additional argument to the function in x8. The callee may modify the result memory block at any point during the execution of the subroutine (there is no requirement for the callee to preserve the value stored in x8).</p>\n</blockquote>\n<p>If I'm reading this correctly, it requires that the struct return argument is passed into the callee in x8. But when exiting the function x8 is clobbered. Which would be better represented as <code>sret</code> on a function argument right?</p>\n</blockquote>",
        "id": 314794815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670543748
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401#issuecomment-1343550414\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5401\">issue #5401</a>:</p>\n<blockquote>\n<p>For AArch64 this is covered in the <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#result-return\">AAPCS64 Section 6.9</a>:</p>\n<blockquote>\n<p>[...] The address of the memory block shall be passed as an additional argument to the function in x8. The callee may modify the result memory block at any point during the execution of the subroutine (there is no requirement for the callee to preserve the value stored in x8).</p>\n</blockquote>\n<p>If I'm reading this correctly, it requires that the struct return argument is passed into the callee in x8. But when exiting the function x8 is clobbered. Which would be better represented as <code>sret</code> on a function argument right?</p>\n<p><strong>Edit</strong>:</p>\n<p>For RISC-V I've found the <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc#integer-calling-convention\">RISC-V ELF psABI</a>:</p>\n<blockquote>\n<p>Values are returned in the same manner as a first named argument of the same type would be passed.  If such an argument would have been passed by reference, the caller allocates memory for the return value, and passes the address as an implicit first parameter.</p>\n<blockquote>\n<p>Note | There is no requirement that the address be returned from the function and so software should not assume that a0 will hold the address of the return value on return.</p>\n</blockquote>\n</blockquote>\n<p>I assume that here the \"implicit first parameter\" means, always use a0. But it looks like a fairly similar mechanism to AArch64 where its more like a special argument than a special return value.</p>\n</blockquote>",
        "id": 314795909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670544290
    }
]