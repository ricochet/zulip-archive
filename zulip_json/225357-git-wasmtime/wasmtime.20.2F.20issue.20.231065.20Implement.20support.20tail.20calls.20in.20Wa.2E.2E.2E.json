[
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\">issue #1065</a> (assigned to fitzgen):</p>\n<blockquote>\n<p>To write a functional language compiler using this IR, tail call eliminations would be desirable. Are there any plans to support this? I couldn't find any details in the docs.</p>\n</blockquote>",
        "id": 351711735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682103841
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065#issuecomment-1624395771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\">issue #1065</a>:</p>\n<blockquote>\n<p>So @jameysharp and I did a little profiling/investigation of switching the internal Wasm calling convention over to <code>tail</code> on our sightglass benchmarks. I was really expecting this to have no measurable change, but unfortunately it looks like it has a ~7% overhead on bz2 and spidermonkey.wasm and ~1% overhead on pulldown-cmark. This is surprising! We think this means that we ~frequently call functions that don't have enough register pressure to clobber all callee-save registers, and since <code>tail</code> only has caller-save registers and zero callee-save registers, we are doing more spills than we used to. Enough more that it is really measurable.</p>\n<p>Supporting caller-save registers with the <code>tail</code> calling convention is possible, but requires more work. Either we do parallel moves (and also avoid building the temporary stack frames for tail calls with stack arguments) or we add a bunch of fiddly offset computation for tail calls. Both possible, but I don't want to do either right this very moment. I'd really like to get a <code>wasmtime::Config</code> knob for Wasm tail calls shipping first.</p>\n<p>So here is our updated plan:</p>\n<ul>\n<li>[ ] Only use <code>tail</code> as the Wasm internal calling convention when the Wasm tail calls proposal is enabled. This avoids any impact on existing Wasm programs that don't use tail calls. However, it requires a bit of unfortunate plumbing, but that's fine.</li>\n<li>[ ] Finish implementing the Wasm tail calls proposal on all platforms and make sure it is fully spec compliant and all that.</li>\n<li>[ ] Fix the performance issues after that knob is exposed.</li>\n<li>[ ] Switch all Wasm internal calling conventions to <code>tail</code> after that.</li>\n<li>[ ] ... profit</li>\n</ul>\n<p>Additionally, we would not enable tail calls by default in Wasmtime until the performance issues are addressed.</p>\n</blockquote>",
        "id": 373034985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688683096
    }
]