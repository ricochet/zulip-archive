[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226#issuecomment-1402387643\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226\">issue #5226</a>:</p>\n<blockquote>\n<p>This broke doing a check build of cg_clif on x86, which rust's CI does. I use cranelift-native for implementing <code>-Ctarget-cpu=native</code> in cg_clif. For this purpose just returning no features on unsupported platforms is fine.</p>\n<p><a href=\"https://github.com/rust-lang/rust/actions/runs/3999165664/jobs/6862725564#step:26:1343\">https://github.com/rust-lang/rust/actions/runs/3999165664/jobs/6862725564#step:26:1343</a></p>\n</blockquote>",
        "id": 323322228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674584403
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226#issuecomment-1402393402\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226\">issue #5226</a>:</p>\n<blockquote>\n<p>@bjorn3 IMHO it's reasonable for <code>cranelift-native</code> to refuse to compile on a platform (i686) that Cranelift doesn't support, since its purpose is to query what the native platform is from Cranelift's point of view. Is there a way to exclude the cg_clif check build from running there?</p>\n</blockquote>",
        "id": 323323326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674584699
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226#issuecomment-1402394846\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226\">issue #5226</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a way to exclude the cg_clif check build from running there?</p>\n</blockquote>\n<p>Probably, but it would also break cross-compiling scenarios where cranelift-native would never be called at runtime.</p>\n</blockquote>",
        "id": 323323616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674584778
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226#issuecomment-1402404126\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226\">issue #5226</a>:</p>\n<blockquote>\n<p>Hmm, yeah, actually it seems that any other non-supported platform will compile here (returning an <code>Err</code> at runtime); that's probably the more reasonable option. Happy to review a PR to remove the block with the compile-error. The original issue we were trying to solve was that folks were trying to build Cranelift embedders (like Wasmtime or Viceroy wrapping it) for i686 and were misled by a successful compile; but I suppose a runtime error is still good enough for that purpose since it's clear enough (\"unsupported architecture\").</p>\n</blockquote>",
        "id": 323324679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674585077
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226#issuecomment-1402416908\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5226\">issue #5226</a>:</p>\n<blockquote>\n<p>Opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5627\">https://github.com/bytecodealliance/wasmtime/pull/5627</a></p>\n</blockquote>",
        "id": 323326363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674585516
    }
]