[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Wasmtime recently had <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">https://github.com/bytecodealliance/wasmtime/issues/4315</a> filed against it which discovered that there were two separate bugs in the SIMD implementation on x86_64. This discovery comes after \"months of continuous oss-fuzzing\" for the simd feature. I wanted to file an issue here with some investigation of why this happened because this theoretically should not happen.</p>\n<p>Specifically here the bug was a buggy instruction lowering (two different ones). One fix (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a>) surfaced by corrupting an input register which I think only causes issues if the input is attempted to be reused elsewhere (e.g. a constant reused somewhere else). I don't know precisely but my impression was that this involved some register pressure, a \"big\" function, and constants to line up. This specific bug I could see as very difficult to discover via wasm-smith. The second bug, however, (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a>) was a trivial bug in the <code>select</code> instruction which showed up with the smallest of tests for <code>select</code>. The fact that wasm-smith never discovered this is alarming to me.</p>\n<p>Digging in it appears to be a confluence of factors which makes wasm-smith basically  unable to find these bugs:</p>\n<ul>\n<li>The <code>select</code> instruction requires 3 operands on the stack of specific types. Turns out this very rarely happens. I inserted a <code>panic!</code> whenever a <code>select</code> instruction was even considered a candidate, and it was rarely hit. Even less rarely is the instruction chosen to be emitted.</li>\n<li>The <code>i32</code> input to <code>select</code> I think is almost always nonzero at runtime itself. The specific bug only happened when the condition was 0, however. I think this is because a lot of i32s come from things like <code>i32.const</code> which is practically never zero.</li>\n<li>Even if <code>select</code> is generated with v128 inputs (which happens quite rarely) it's often never actually even executed at runtime. The few test cases I found which generated this instruction immediately had infinite recursion or an infinite loop with the interesting instructions far away.</li>\n</ul>\n<p>I unfortunately don't know if there's really a \"fix\" for issues like this. We could throw a bunch more heuristics at wasm-smith but at some point we probably need a somewhat fundamental new strategy for fuzzing here to get significantly more coverage.</p>\n</blockquote>",
        "id": 287443788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656174567
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1166387942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>I suspect that for individual instruction semantics, something like #3251 might be a reasonable solution. If we focus on generating test cases for individual Wasm instructions, we can drive the random code generation in the other direction: e.g. we have a <code>v128.select</code>, we know what the stack signature is, let's provide those inputs. Along the same lines, \"unit-testing\" individual instructions lets us more easily run through their input data-space with many test vectors (invocations) for one function.</p>\n<p>Without coverage feedback libFuzzer may not know that some of those inputs are only sensitive to particular values (e.g. zero), but we could maybe bias probabilities too, if needed. (Custom entropy based on... similar bits? Closeness of some args to others? Surely the propcheck/quickcheck folks have some useful heuristics here...)</p>\n<p>All the above won't give us coverage of multiple-instruction patterns (I think this objection was also raised in #3251) but unit-testing instruction lowerings seems like a sufficiently useful and unique use-case to me that it's worth its own fuzz target and approach...</p>\n</blockquote>",
        "id": 287463495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656204194
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Wasmtime recently had <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">https://github.com/bytecodealliance/wasmtime/issues/4315</a> filed against it which discovered that there were two separate bugs in the SIMD implementation on x86_64. This discovery comes after \"months of continuous oss-fuzzing\" for the simd feature. I wanted to file an issue here with some investigation of why this happened because this theoretically should not happen.</p>\n<p>Specifically here the bug was a buggy instruction lowering (two different ones). One fix (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a>) surfaced by corrupting an input register which I think only causes issues if the input is attempted to be reused elsewhere (e.g. a constant reused somewhere else). I don't know precisely but my impression was that this involved some register pressure, a \"big\" function, and constants to line up. This specific bug I could see as very difficult to discover via wasm-smith. The second bug, however, (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a>) was a trivial bug in the <code>select</code> instruction which showed up with the smallest of tests for <code>select</code>. The fact that wasm-smith never discovered this is alarming to me.</p>\n<p>Digging in it appears to be a confluence of factors which makes wasm-smith basically  unable to find these bugs:</p>\n<ul>\n<li>The <code>select</code> instruction requires 3 operands on the stack of specific types. Turns out this very rarely happens. I inserted a <code>panic!</code> whenever a <code>select</code> instruction was even considered a candidate, and it was rarely hit. Even less rarely is the instruction chosen to be emitted.</li>\n<li>The <code>i32</code> input to <code>select</code> I think is almost always nonzero at runtime itself. The specific bug only happened when the condition was 0, however. I think this is because a lot of i32s come from things like <code>i32.const</code> which is practically never zero.</li>\n<li>Even if <code>select</code> is generated with v128 inputs (which happens quite rarely) it's often never actually even executed at runtime. The few test cases I found which generated this instruction immediately had infinite recursion or an infinite loop with the interesting instructions far away.</li>\n</ul>\n<p>I unfortunately don't know if there's really a \"fix\" for issues like this. We could throw a bunch more heuristics at wasm-smith but at some point we probably need a somewhat fundamental new strategy for fuzzing here to get significantly more coverage.</p>\n</blockquote>",
        "id": 287633712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656362323
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167866006\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>I had forgotten about that issue! That's an excellent point though. I also filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4338\">https://github.com/bytecodealliance/wasmtime/issues/4338</a> as possible other wasm fuzzers we could integrate. Otherwise though other wasm-smith improvements include <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/266\">https://github.com/bytecodealliance/wasm-tools/issues/266</a>.</p>\n<p>While this may not be the most useful issue to keep open I'm tempted to leave it here as \"if anyone searches the fuzzing tag in the Wasmtime repo this'll trigger them to think about improving wasm-smith\"</p>\n</blockquote>",
        "id": 287633859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656362416
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167881081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Hey, I had completely forgotten about #3251 but I believe when I added <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.allowed_instructions\"><code>allowed_instructions</code></a> to <code>wasm-smith</code> it was motivated in part by that issue. The idea would be to configure <code>wasm-smith</code> to only allow  could be configured to generate functions with, e.g., numeric and vector instructions (see <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/enum.InstructionKind.html\"><code>InstructionKind</code></a> for the categories allowed) and set <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.max_instructions\"><code>max_instructions</code></a> to, e.g., 3 (to test possible interactions with other instructions). With the small test case generated, we could then also generate instructions in the other direction @cfallin mentions, by randomizing the function arguments. What do you all think of that as a new fuzz target?</p>\n</blockquote>",
        "id": 287635015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363033
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167881081\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Hey, I had completely forgotten about #3251 but I believe when I added <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.allowed_instructions\"><code>allowed_instructions</code></a> to <code>wasm-smith</code> it was motivated in part by that issue. The idea would be to configure <code>wasm-smith</code> to generate functions with, e.g., numeric and vector instructions (see <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/enum.InstructionKind.html\"><code>InstructionKind</code></a> for the categories allowed) and set <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.max_instructions\"><code>max_instructions</code></a> to, e.g., 3 (to test possible interactions with other instructions). With the small test case generated, we could then also generate instructions in the other direction @cfallin mentions, by randomizing the function arguments. What do you all think of that as a new fuzz target?</p>\n</blockquote>",
        "id": 287635051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363054
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167881674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>We could also add a \"no control flow\" mode to <code>wasm-smith</code>, which might end up pretty similar to the \"test a single instruction\" thing in practice.</p>\n<p>In fact, @abrown added the <code>InstructionKinds</code> filtering and we don't really use that in our fuzz targets yet. Covers a lot of the same stuff. We could actually probably use this to avoid control instructions already.</p>\n<p>I think we also only pass zeros in as arguments to whatever functions we generate, and we could probably do much better than that as well (at least try zero, max, and one random bit pattern).</p>\n</blockquote>",
        "id": 287635082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363067
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167881081\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Hey, I had completely forgotten about #3251 but I believe when I added <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.allowed_instructions\"><code>allowed_instructions</code></a> to <code>wasm-smith</code> it was motivated in part by that issue. The idea would be to configure <code>wasm-smith</code> to generate functions with, e.g., numeric and vector instructions (see <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/enum.InstructionKind.html\"><code>InstructionKind</code></a> for the categories allowed) and set <a href=\"https://docs.rs/wasm-smith/0.11.1/wasm_smith/trait.Config.html#method.max_instructions\"><code>max_instructions</code></a> to, e.g., 3 (to test possible interactions with other instructions). With the small test case generated, we could then also randomly generate in the value space that @cfallin mentions, by randomizing the function arguments. What do you all think of that as a new fuzz target?</p>\n</blockquote>",
        "id": 287635118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363088
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167882883\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>@abrown jinx ;)</p>\n<blockquote>\n<p>What do you all think of that as a new fuzz target?</p>\n</blockquote>\n<p>Yes, definitely.</p>\n</blockquote>",
        "id": 287635196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363130
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167883479\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>One thing I think we'd also want to change about wasm-smith is the signatures of functions as well. Right now we drop all values that don't correspond to the function's type so differential fuzzing has a hard time picking these up. Ideally we want a mode where we generate the function body first and then we wrap that in a function of the appropriate type.</p>\n</blockquote>",
        "id": 287635251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363162
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167885300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Hm... how? I wasn't really aware of the limitations on function signatures.<br>\n</p>\n</blockquote>",
        "id": 287635465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363255
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167885853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>We just choose a signature, and then generate a body. Alex is suggesting we generate a body and then derive a signature from that.</p>\n</blockquote>",
        "id": 287635509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363287
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167886348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Makes sense for returns, not necessarily for parameters though, since generating a body needs to know what locals are available.</p>\n</blockquote>",
        "id": 287635564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363315
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167887770\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Or the first instruction dictates what locals _must_ be available which should bubble up to the signature... This is the part that I'm having trouble seeing in wasm-smith. It doesn't seem designed for this kind of thing?<br>\n</p>\n</blockquote>",
        "id": 287635730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656363396
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167910802\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Ok, how about this: we add <code>SingleFunctionModule</code> to <code>wasm-smith</code> which takes a <code>Config</code>, an <code>Unstructured</code>, and a <code>Signature</code>. The <code>Signature</code> could be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Signature</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">params</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ValTy</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">returns</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ValTy</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>ValTy</code> would be some set-like struct that could be <code>Arbitrary</code>-generated and would cover the Wasm types (<code>i32</code>, <code>f32</code>, <code>v128</code>, etc.). So one could either manually set the parameters of the function (I think this has come up in the past as a need) OR one could generate this <code>Signature</code> with a range of types. (Or something like that... looking for feedback here).</p>\n<p>The <code>SingleFunctionModule</code> would then... well, what _would_ it do? Generate instructions to use all of the arguments before we get to <code>max_instructions</code>? We don't have to re-<code>local.get</code> the arguments, right?</p>\n</blockquote>",
        "id": 287638216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656364649
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167930199\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>One idea is to perhaps:</p>\n<ul>\n<li>Generate an arbitrary list of parameters</li>\n<li>Generate an arbitrary function body using those parameters</li>\n<li>Using what's left on the stack assign that as the return value of the function</li>\n<li>Insert the final function type into a module</li>\n</ul>\n<p>I like the idea though of using a completely new dedicated <code>SingleFunctionModule</code> (or similar) generator for this. That module could also have a list of values to invoke the exported function with perhaps?</p>\n</blockquote>",
        "id": 287640046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656365676
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167931539\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>So you mean \"arbitrary list of parameters\" not \"arbitrary list of parameter types\"?</p>\n</blockquote>",
        "id": 287640151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656365749
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1167934891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Oh sorry I meant types there, but I was thinking we could in actuality do:</p>\n<ul>\n<li>generate an arbitrary list of parameter types</li>\n<li>Additionally, afterwards, generate a list of arbitrary values to invoke the function with</li>\n</ul>\n<p>whether that second step belongs in wasm-smith or wasmtime I dunno but either seems fine by me<br>\n</p>\n</blockquote>",
        "id": 287640544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656365948
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322#issuecomment-1334602019\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>The single-instruction generator from Andrew came out of this and nothing else has turned up in the meantime. Additionally Andrew did a lot of refactoring to have one <code>differential</code> fuzzer so I think we're in a better place now (hopefully). I'm going to subsequently close this.</p>\n</blockquote>",
        "id": 313403311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669939744
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4322\">issue #4322</a>:</p>\n<blockquote>\n<p>Wasmtime recently had <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">https://github.com/bytecodealliance/wasmtime/issues/4315</a> filed against it which discovered that there were two separate bugs in the SIMD implementation on x86_64. This discovery comes after \"months of continuous oss-fuzzing\" for the simd feature. I wanted to file an issue here with some investigation of why this happened because this theoretically should not happen.</p>\n<p>Specifically here the bug was a buggy instruction lowering (two different ones). One fix (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a>) surfaced by corrupting an input register which I think only causes issues if the input is attempted to be reused elsewhere (e.g. a constant reused somewhere else). I don't know precisely but my impression was that this involved some register pressure, a \"big\" function, and constants to line up. This specific bug I could see as very difficult to discover via wasm-smith. The second bug, however, (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a>) was a trivial bug in the <code>select</code> instruction which showed up with the smallest of tests for <code>select</code>. The fact that wasm-smith never discovered this is alarming to me.</p>\n<p>Digging in it appears to be a confluence of factors which makes wasm-smith basically  unable to find these bugs:</p>\n<ul>\n<li>The <code>select</code> instruction requires 3 operands on the stack of specific types. Turns out this very rarely happens. I inserted a <code>panic!</code> whenever a <code>select</code> instruction was even considered a candidate, and it was rarely hit. Even less rarely is the instruction chosen to be emitted.</li>\n<li>The <code>i32</code> input to <code>select</code> I think is almost always nonzero at runtime itself. The specific bug only happened when the condition was 0, however. I think this is because a lot of i32s come from things like <code>i32.const</code> which is practically never zero.</li>\n<li>Even if <code>select</code> is generated with v128 inputs (which happens quite rarely) it's often never actually even executed at runtime. The few test cases I found which generated this instruction immediately had infinite recursion or an infinite loop with the interesting instructions far away.</li>\n</ul>\n<p>I unfortunately don't know if there's really a \"fix\" for issues like this. We could throw a bunch more heuristics at wasm-smith but at some point we probably need a somewhat fundamental new strategy for fuzzing here to get significantly more coverage.</p>\n</blockquote>",
        "id": 313403312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1669939744
    }
]