[
    {
        "content": "<p>lei-april opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to use wasmtime's debug support. I followed the simple demo from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">https://github.com/bytecodealliance/wasmtime/issues/1613</a>, and it works as expected. But when I try to debug a slightly more complex C++ program, there's some problem.</p>\n<p>Here's the C++ snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span> <span class=\"o\">+</span> <span class=\"n\">s2</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>I compiled it with a freshly built clang (<a href=\"https://github.com/llvm/llvm-project/commit/7965dd79a3da76f68a65e942f2ad4d78270491e6\">commit</a>), coupled with prebuilt wasi-sysroot from <a href=\"https://github.com/WebAssembly/wasi-sdk\">wasi-sdk</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ clang++ --target=wasm32-wasi --sysroot ./wasi-sysroot -fno-exceptions -g t.cc -o t.wasm\n</code></pre></div>\n\n\n<p>Then I use lldb (8.0.1) and a freshly built wasmtime (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/06a69d18fa9bb5d19625a8b5411c67b40d35fe78\">commit</a>) to debug it:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lldb -- ./wasmtime/target/release/wasmtime -g t.wasm\n</code></pre></div>\n\n\n<p>Setting breakpoint and stepping thru statements all work fine. But somehow none of the local variables are printed as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code>Process 26379 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fcf5af JIT(0x5555562ec490)`hello(x=0) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 0\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)\n(lldb) p s2\n(std::__2::string) $2 = {}\n</code></pre></div>\n\n\n<p>Any hints?</p>\n</blockquote>",
        "id": 201228502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592456715
    },
    {
        "content": "<p>lei-april edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to use wasmtime's debug support. I followed the simple demo from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">https://github.com/bytecodealliance/wasmtime/issues/1613</a>, and it works as expected. But when I try to debug a slightly more complex C++ program, there's some problem.</p>\n<p>Here's the C++ snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span> <span class=\"o\">+</span> <span class=\"n\">s2</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>I compiled it with a freshly built clang (<a href=\"https://github.com/llvm/llvm-project/commit/7965dd79a3da76f68a65e942f2ad4d78270491e6\">commit</a>), coupled with prebuilt wasi-sysroot from <a href=\"https://github.com/WebAssembly/wasi-sdk\">wasi-sdk</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ clang++ --target=wasm32-wasi --sysroot ./wasi-sysroot -fno-exceptions -g t.cc -o t.wasm\n</code></pre></div>\n\n\n<p>Then I use lldb (8.0.1) and a freshly built wasmtime (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/06a69d18fa9bb5d19625a8b5411c67b40d35fe78\">commit</a>) to debug it:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lldb -- ./wasmtime/target/release/wasmtime -g t.wasm\n</code></pre></div>\n\n\n<p>Setting breakpoint and stepping thru statements all work fine. But somehow none of the local variables are printed as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code>Process 26379 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fcf5af JIT(0x5555562ec490)`hello(x=0) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 0\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)\n(lldb) p s2\n(std::__2::string) $2 = {}\n</code></pre></div>\n\n\n<p>Any hints?</p>\n<p>P.S. I'm doing all the experiments on Linux.</p>\n</blockquote>",
        "id": 201230871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592460475
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-646347814\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<blockquote>\n<p>hen I use lldb (8.0.1) and a freshly built wasmtime (commit) to debug it.</p>\n</blockquote>\n<p>At this moment recommended debuggers lldb-10 and gdb for various reasons/issues.</p>\n<blockquote>\n<p>(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)</p>\n</blockquote>\n<p>The wasm pointer is not really a pointer in computer memory that can be accessed. You may check <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a> on how to use helpers to unwrap wasm pointers in a debugger.</p>\n<blockquote>\n<p>(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)</p>\n</blockquote>\n<p>Not sure why <code>s1</code> points to the memory offset 0. Did you try debugging non-optimized <code>-O0</code> wasm?</p>\n</blockquote>",
        "id": 201336229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592521464
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-646347814\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<blockquote>\n<p>hen I use lldb (8.0.1) and a freshly built wasmtime (commit) to debug it.</p>\n</blockquote>\n<p>At this moment recommended debuggers lldb-10 and gdb for various reasons/issues.</p>\n<blockquote>\n<p>(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)</p>\n</blockquote>\n<p>The wasm pointer is not really a pointer in computer memory that can be accessed. You may check <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a> on how to use helpers to unwrap wasm pointers in a debugger.</p>\n<p>Not sure why <code>s1</code> points to the memory offset 0. Did you try debugging non-optimized <code>-O0</code> wasm?</p>\n</blockquote>",
        "id": 201336280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592521507
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-646352841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>Okay, I just check that with or without optimization -- the issue is the same.</p>\n</blockquote>",
        "id": 201337498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592522509
    },
    {
        "content": "<p>yurydelendik assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to use wasmtime's debug support. I followed the simple demo from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">https://github.com/bytecodealliance/wasmtime/issues/1613</a>, and it works as expected. But when I try to debug a slightly more complex C++ program, there's some problem.</p>\n<p>Here's the C++ snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span> <span class=\"o\">+</span> <span class=\"n\">s2</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>I compiled it with a freshly built clang (<a href=\"https://github.com/llvm/llvm-project/commit/7965dd79a3da76f68a65e942f2ad4d78270491e6\">commit</a>), coupled with prebuilt wasi-sysroot from <a href=\"https://github.com/WebAssembly/wasi-sdk\">wasi-sdk</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ clang++ --target=wasm32-wasi --sysroot ./wasi-sysroot -fno-exceptions -g t.cc -o t.wasm\n</code></pre></div>\n\n\n<p>Then I use lldb (8.0.1) and a freshly built wasmtime (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/06a69d18fa9bb5d19625a8b5411c67b40d35fe78\">commit</a>) to debug it:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lldb -- ./wasmtime/target/release/wasmtime -g t.wasm\n</code></pre></div>\n\n\n<p>Setting breakpoint and stepping thru statements all work fine. But somehow none of the local variables are printed as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code>Process 26379 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fcf5af JIT(0x5555562ec490)`hello(x=0) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 0\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)\n(lldb) p s2\n(std::__2::string) $2 = {}\n</code></pre></div>\n\n\n<p>Any hints?</p>\n<p>P.S. I'm doing all the experiments on Linux.</p>\n</blockquote>",
        "id": 201337501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592522512
    },
    {
        "content": "<p>lei-april <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-646396425\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>Thanks for you reply :) @yurydelendik </p>\n<blockquote>\n<p>At this moment recommended debuggers lldb-10 and gdb for various reasons/issues.</p>\n</blockquote>\n<p>I retried the previous experiment with lldb 11.0.0 (freshly built) and gdb 8.2, respectively. Here are the results:</p>\n<p><strong>lldb</strong></p>\n<div class=\"codehilite\"><pre><span></span><code>Process 101273 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fcf5af JIT(0x5555562ef450)`hello(x=0) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 0\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)\n(lldb) p s2\n(std::string) $2 = Summary Unavailable\n</code></pre></div>\n\n\n<p><strong>gdb</strong></p>\n<div class=\"codehilite\"><pre><span></span><code>Thread 1 &quot;wasmtime&quot; hit Breakpoint 1, hello (x=0) at t.cc:4\n4       const char* s1 = &quot;Hello&quot;;\n(gdb) n\n5       std::string s2 = &quot;World&quot;;\n(gdb) n\n6       return s1 + s2 + std::to_string(x);\n(gdb) p x\n$1 = 0\n(gdb) p s1\n$2 = {__ptr = 0}\n(gdb) p s2\n$3 = &lt;incomplete type&gt;\n</code></pre></div>\n\n\n<p>It seems switching debugger version doesn't help much.</p>\n<blockquote>\n<p>The wasm pointer is not really a pointer in computer memory that can be accessed. You may check #1482 on how to use helpers to unwrap wasm pointers in a debugger.</p>\n</blockquote>\n<p>Cool. I'll give it a try.</p>\n</blockquote>",
        "id": 201346186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592532928
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-648260412\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<p>I looked at the issue. There are at least two problems:</p>\n<ul>\n<li>[ ] <code>TODO</code> related to reference types (specific to C++) at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/debug/src/transform/unit.rs#L398\">https://github.com/bytecodealliance/wasmtime/blob/master/crates/debug/src/transform/unit.rs#L398</a></li>\n<li>[ ] There is an issue with CL value tracking, which is a cause for wrong location in DWARF</li>\n</ul>\n<p>@lei-april you can also turn off option at CL via <code>--opt-level 0</code></p>\n<p>I will try to address the above issues soon.</p>\n</blockquote>",
        "id": 201746280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592928299
    },
    {
        "content": "<p>lei-april <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-648569620\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<blockquote>\n<p>you can also turn off option at CL via --opt-level 0</p>\n</blockquote>\n<p>Thanks. This does help :)</p>\n<p>The result looks better now (with lldb 11.0.0):</p>\n<div class=\"codehilite\"><pre><span></span><code>Process 76848 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fc369e JIT(0x55555639a690)`hello(x=12345) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 12345\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 1024)\n(lldb) p s2\n(std::string) $2 = Summary Unavailable\n</code></pre></div>\n\n\n</blockquote>",
        "id": 201809702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592971376
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896#issuecomment-648825156\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a>:</p>\n<blockquote>\n<blockquote>\n<p>(std::string) $2 = Summary Unavailable</p>\n</blockquote>\n<p>C++ types with reference types in them will likely fail due to TODO mentioned above.</p>\n</blockquote>",
        "id": 201847619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593005843
    },
    {
        "content": "<p>yurydelendik labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">Issue #1896</a> (assigned to yurydelendik):</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to use wasmtime's debug support. I followed the simple demo from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1613\">https://github.com/bytecodealliance/wasmtime/issues/1613</a>, and it works as expected. But when I try to debug a slightly more complex C++ program, there's some problem.</p>\n<p>Here's the C++ snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">s1</span> <span class=\"o\">+</span> <span class=\"n\">s2</span> <span class=\"o\">+</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>I compiled it with a freshly built clang (<a href=\"https://github.com/llvm/llvm-project/commit/7965dd79a3da76f68a65e942f2ad4d78270491e6\">commit</a>), coupled with prebuilt wasi-sysroot from <a href=\"https://github.com/WebAssembly/wasi-sdk\">wasi-sdk</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ clang++ --target=wasm32-wasi --sysroot ./wasi-sysroot -fno-exceptions -g t.cc -o t.wasm\n</code></pre></div>\n\n\n<p>Then I use lldb (8.0.1) and a freshly built wasmtime (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/06a69d18fa9bb5d19625a8b5411c67b40d35fe78\">commit</a>) to debug it:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lldb -- ./wasmtime/target/release/wasmtime -g t.wasm\n</code></pre></div>\n\n\n<p>Setting breakpoint and stepping thru statements all work fine. But somehow none of the local variables are printed as expected:</p>\n<div class=\"codehilite\"><pre><span></span><code>Process 26379 stopped\n* thread #1, name = &#39;wasmtime&#39;, stop reason = step over\n    frame #0: 0x00007ffff7fcf5af JIT(0x5555562ec490)`hello(x=0) at t.cc:6:12\n   3    std::string hello(int x) {\n   4        const char* s1 = &quot;Hello&quot;;\n   5        std::string s2 = &quot;World&quot;;\n-&gt; 6        return s1 + s2 + std::to_string(x);\n   7    }\n   8\n   9    int main() {\n(lldb) p x\n(int) $0 = 0\n(lldb) p s1\n(WebAssemblyPtrWrapper&lt;const char&gt;) $1 = (__ptr = 0)\n(lldb) p s2\n(std::__2::string) $2 = {}\n</code></pre></div>\n\n\n<p>Any hints?</p>\n<p>P.S. I'm doing all the experiments on Linux.</p>\n</blockquote>",
        "id": 201965281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593090063
    }
]