[
    {
        "content": "<p>yIllusionSky opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557\">issue #8557</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p>TODO: upload Wasm file here</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>I built a wasm package</li>\n<li>I threw this package into wasmtime for execution (the command line outputs the correct result, but there is a problem with the program result output)</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Output Hello, world!</p>\n<h3>Actual Results</h3>\n<p>Error: expected 4 imports, found 0</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest</p>\n<p>Operating system: macos</p>\n<p>Architecture: aarch64-apple-darwin</p>\n<h3>Extra Info</h3>\n<p>my wasm code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">doing_home</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>my exec code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// An engine stores and configures global compilation settings like</span>\n<span class=\"w\">     </span><span class=\"c1\">// optimization level, enabled wasm features, etc.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// We start off by creating a `Module` which represents a compiled form</span>\n<span class=\"w\">     </span><span class=\"c1\">// of our input wasm module. In this case it'll be JIT-compiled after</span>\n<span class=\"w\">     </span><span class=\"c1\">// we parse the text format.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/doing.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// A `Store` is what will own instances, functions, globals, etc. All wasm</span>\n<span class=\"w\">     </span><span class=\"c1\">// items are stored within a `Store`, and it's what we'll always be using to</span>\n<span class=\"w\">     </span><span class=\"c1\">// interact with the wasm world. Custom data can be stored in stores but for</span>\n<span class=\"w\">     </span><span class=\"c1\">// now we just use `()`.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// With a compiled `Module` we can then instantiate it, creating</span>\n<span class=\"w\">     </span><span class=\"c1\">// an `Instance` which we can actually poke at functions on.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// The `Instance` gives us access to various exported functions and items,</span>\n<span class=\"w\">     </span><span class=\"c1\">// which we access here to pull out our `answer` exported function and</span>\n<span class=\"w\">     </span><span class=\"c1\">// run it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"doing_home\"</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`answer` was not an exported function\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// There's a few ways we can call the `answer` `Func` value. The easiest</span>\n<span class=\"w\">     </span><span class=\"c1\">// is to statically assert its signature with `typed` (in this case</span>\n<span class=\"w\">     </span><span class=\"c1\">// asserting it takes no arguments and returns one i32) and then call it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// And finally we can call our function! Note that the error propagation</span>\n<span class=\"w\">     </span><span class=\"c1\">// with `?` is done to handle the case where the wasm function traps.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Answer: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 437286887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715009447
    },
    {
        "content": "<p>yIllusionSky edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557\">issue #8557</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>See end</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>I built a wasm package</li>\n<li>I threw this package into wasmtime for execution (the command line outputs the correct result, but there is a problem with the program result output)</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Output Hello, world!</p>\n<h3>Actual Results</h3>\n<p>Error: expected 4 imports, found 0</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest</p>\n<p>Operating system: macos</p>\n<p>Architecture: aarch64-apple-darwin</p>\n<h3>Extra Info</h3>\n<p>my wasm code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">doing_home</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>my exec code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// An engine stores and configures global compilation settings like</span>\n<span class=\"w\">     </span><span class=\"c1\">// optimization level, enabled wasm features, etc.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// We start off by creating a `Module` which represents a compiled form</span>\n<span class=\"w\">     </span><span class=\"c1\">// of our input wasm module. In this case it'll be JIT-compiled after</span>\n<span class=\"w\">     </span><span class=\"c1\">// we parse the text format.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/doing.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// A `Store` is what will own instances, functions, globals, etc. All wasm</span>\n<span class=\"w\">     </span><span class=\"c1\">// items are stored within a `Store`, and it's what we'll always be using to</span>\n<span class=\"w\">     </span><span class=\"c1\">// interact with the wasm world. Custom data can be stored in stores but for</span>\n<span class=\"w\">     </span><span class=\"c1\">// now we just use `()`.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// With a compiled `Module` we can then instantiate it, creating</span>\n<span class=\"w\">     </span><span class=\"c1\">// an `Instance` which we can actually poke at functions on.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// The `Instance` gives us access to various exported functions and items,</span>\n<span class=\"w\">     </span><span class=\"c1\">// which we access here to pull out our `answer` exported function and</span>\n<span class=\"w\">     </span><span class=\"c1\">// run it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"doing_home\"</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`answer` was not an exported function\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// There's a few ways we can call the `answer` `Func` value. The easiest</span>\n<span class=\"w\">     </span><span class=\"c1\">// is to statically assert its signature with `typed` (in this case</span>\n<span class=\"w\">     </span><span class=\"c1\">// asserting it takes no arguments and returns one i32) and then call it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// And finally we can call our function! Note that the error propagation</span>\n<span class=\"w\">     </span><span class=\"c1\">// with `?` is done to handle the case where the wasm function traps.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Answer: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 437287907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715009778
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557#issuecomment-2096417487\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557\">issue #8557</a>:</p>\n<blockquote>\n<p>Thanks for the report, and what you're most likely running into here is the fact that WASI imports need to be provided. I'd recommend following <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview1/index.html#examples\">this example</a> for instantiating a module that has wasi imports.</p>\n</blockquote>",
        "id": 437295185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715012039
    },
    {
        "content": "<p>yIllusionSky closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557\">issue #8557</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>See end</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>I built a wasm package</li>\n<li>I threw this package into wasmtime for execution (the command line outputs the correct result, but there is a problem with the program result output)</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Output Hello, world!</p>\n<h3>Actual Results</h3>\n<p>Error: expected 4 imports, found 0</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: latest</p>\n<p>Operating system: macos</p>\n<p>Architecture: aarch64-apple-darwin</p>\n<h3>Extra Info</h3>\n<p>my wasm code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">doing_home</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>my exec code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// An engine stores and configures global compilation settings like</span>\n<span class=\"w\">     </span><span class=\"c1\">// optimization level, enabled wasm features, etc.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// We start off by creating a `Module` which represents a compiled form</span>\n<span class=\"w\">     </span><span class=\"c1\">// of our input wasm module. In this case it'll be JIT-compiled after</span>\n<span class=\"w\">     </span><span class=\"c1\">// we parse the text format.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/doing.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// A `Store` is what will own instances, functions, globals, etc. All wasm</span>\n<span class=\"w\">     </span><span class=\"c1\">// items are stored within a `Store`, and it's what we'll always be using to</span>\n<span class=\"w\">     </span><span class=\"c1\">// interact with the wasm world. Custom data can be stored in stores but for</span>\n<span class=\"w\">     </span><span class=\"c1\">// now we just use `()`.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// With a compiled `Module` we can then instantiate it, creating</span>\n<span class=\"w\">     </span><span class=\"c1\">// an `Instance` which we can actually poke at functions on.</span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// The `Instance` gives us access to various exported functions and items,</span>\n<span class=\"w\">     </span><span class=\"c1\">// which we access here to pull out our `answer` exported function and</span>\n<span class=\"w\">     </span><span class=\"c1\">// run it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"doing_home\"</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`answer` was not an exported function\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// There's a few ways we can call the `answer` `Func` value. The easiest</span>\n<span class=\"w\">     </span><span class=\"c1\">// is to statically assert its signature with `typed` (in this case</span>\n<span class=\"w\">     </span><span class=\"c1\">// asserting it takes no arguments and returns one i32) and then call it.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">     </span><span class=\"c1\">// And finally we can call our function! Note that the error propagation</span>\n<span class=\"w\">     </span><span class=\"c1\">// with `?` is done to handle the case where the wasm function traps.</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">     </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Answer: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"w\">     </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 437359837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715043003
    },
    {
        "content": "<p>yIllusionSky <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557#issuecomment-2097160555\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8557\">issue #8557</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for the report, and what you're most likely running into here is the fact that WASI imports need to be provided. I'd recommend following <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview1/index.html#examples\">this example</a> for instantiating a module that has wasi imports.</p>\n</blockquote>\n<p>Thanks I have solved my problem</p>\n</blockquote>",
        "id": 437359841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715043003
    }
]