[
    {
        "content": "<p><strong>scottmcm</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 406919696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702117257
    },
    {
        "content": "<p><strong>scottmcm</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 406919697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702117257
    },
    {
        "content": "<p>scottmcm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a> from <code>scottmcm:iconst_su</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Extracting an <code>iconst</code> with value <code>1</code> today is easy enough, albeit needing more type-conversions than one might like</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/4f2d634ca4291a09003eaba26f989cd544c1a289/cranelift/codegen/src/opts/arithmetic.isle#L52-L56\">https://github.com/bytecodealliance/wasmtime/blob/4f2d634ca4291a09003eaba26f989cd544c1a289/cranelift/codegen/src/opts/arithmetic.isle#L52-L56</a></p>\n<p>However there's no way to <em>extract</em> against a type-aware <code>-1</code>, meaning those patterns have an extra step</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/4f2d634ca4291a09003eaba26f989cd544c1a289/cranelift/codegen/src/opts/arithmetic.isle#L64-L67\">https://github.com/bytecodealliance/wasmtime/blob/4f2d634ca4291a09003eaba26f989cd544c1a289/cranelift/codegen/src/opts/arithmetic.isle#L64-L67</a></p>\n<p>This PR adds <code>iconst_s ty c</code> that can directly extract a sign-extended value as well as construct a properly masked constant (so <code>iconst_s ty -1</code> will give <code>iconst.i8 255</code> or <code>iconst.i16 0xFFFF</code> or â€¦).  And for symmetry, it also adds <code>iconst_u</code>, which also works as both constructor and extractor.</p>\n<p>Thus the pattern looking for <code>-1</code> is simplified to just</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"c1\">;; x*-1 == ineg(x).</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imul</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst_s</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">ineg</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>And even unsigned cases are shortened and simplified by no longer needing to remember to get <code>u64_from_imm64</code> vs <code>imm64</code> correct depending whether something is extracting or constructing, since <code>iconst_u</code> works for both</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>;; uge(x, 0) == true.\n<span class=\"gd\">-(rule (simplify (uge (fits_in_64 (ty_int bty)) x zero @ (iconst _ (u64_from_imm64 0))))</span>\n<span class=\"gd\">-      (subsume (iconst bty (imm64 1))))</span>\n<span class=\"gi\">+(rule (simplify (uge (fits_in_64 (ty_int bty)) x zero @ (iconst_u _ 0)))</span>\n<span class=\"gi\">+      (subsume (iconst_u bty 1)))</span>\n</code></pre></div>\n<p>This makes no functional changes to the patterns, just makes them shorter using the new etor+ctors, and thus there are no test changes.  (There's way too many changes in the ISLE for it to be a good idea to try to also change any functionality here.  Similarly, to attempt to ease review, I did no formatting changes in the ISLE, even where I might have otherwise removed some line-breaking.)</p>\n<hr>\n<p>This also moves <code>simm32</code> and <code>uimm8</code> to lowering ISLE only, as they appear not actually useful for <em>opts</em> ISLE.</p>\n<p>In particular, it's very tempting to write</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"c1\">;; x*-1 == ineg(x).</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">imul</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iconst</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">simm32</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">ineg</span><span class=\"w\"> </span><span class=\"nv\">ty</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>but despite its name, <strong>that doesn't even work for 32-bit numbers</strong> because of how <code>simm32</code> is implemented.</p>\n</blockquote>",
        "id": 406919698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702117257
    },
    {
        "content": "<p>scottmcm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 406919864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702117360
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#issuecomment-1848400627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:machinst\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 406931450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702126114
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1775440956\">PR review</a>.</p>",
        "id": 407265079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702308748
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1775440956\">PR review</a>.</p>",
        "id": 407265081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702308748
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#discussion_r1422657746\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this might actually be able to get replicated into ISLE with <code>(extractor iconst_s (iconst ty (i64_sextend_imm64 n)))</code>, although I forget the precise syntax. Effectively though it should be possible to build up this new extractor based on previous extractors I think?</p>\n</blockquote>",
        "id": 407265082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702308749
    },
    {
        "content": "<p>scottmcm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1775946627\">PR review</a>.</p>",
        "id": 407300140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702320543
    },
    {
        "content": "<p>scottmcm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#discussion_r1422989745\">PR review comment</a>:</p>\n<blockquote>\n<p>I would love to do that -- manually loading the <code>InstructionData</code> is something I'd much rather avoid -- but I couldn't find a way to do it.</p>\n<p>First, <code>i64_sextend_imm64</code> is a constructor, not an extractor, so it needs <em>something</em> extra over what already exists.</p>\n<p>So then I tried to just add something like <code>i64_sextend_imm64_etor</code>.  The problem I hit with that is that it needs the type information -- that's the only way to know whether an <code>Imm64</code> of 255 is <code>-1_i64</code> or <code>255_i64</code>.</p>\n<p>That means it would need to be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">iconst_s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i64_sextend_imm64_etor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>But if you try to define that extractor, you get a signature of <code>fn(&amp;mut self, Imm64) -&gt; Option&lt;(Type, i64)&gt;</code>, which is impossible to implement.  I couldn't find a way to have what I guess would have to be sortof a \"parameterized extractor\" so that it can take one of its parameters as an input and the other as an output -- but it feels like that might fundamentally break the \"there are extractors and there are constructors\" model that it seems like ISLE depends on.</p>\n<p>Thus the only way I could figure out to make it work was the version where the extractor has the signature <code>fn(&amp;mut self, Value) -&gt; Option&lt;(Type, i64)&gt;</code> that you see here.</p>\n<p>So I'd love to not need the <code>self.ctx.func.dfg</code> stuff, but I couldn't figure out how.  Do let me know if you have any alternatives I could try.</p>\n<p>(Said otherwise, you'll notice that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670/files#diff-bf1f1ea991da38588a1785fc7012072e7a685411ea6a262c1fab18379411ef50R79\"><code>iconst_u</code> *does* use that approach</a> of building it up from other extractors, since zero-extending is easier, as I agree I'd much rather do that than add new <code>extern</code>s if I can help it.  I just couldn't find the way to do that for <code>iconst_s</code>.)<br>\n</p>\n</blockquote>",
        "id": 407300141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702320544
    },
    {
        "content": "<p>scottmcm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1775972588\">PR review</a>.</p>",
        "id": 407302118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702321321
    },
    {
        "content": "<p>scottmcm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#discussion_r1423003393\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, looking at trying to clean it up slightly, is there such a thing as multiple-output extractors?  The extern could be much simpler if it got <code>(Type, InstructionData)</code> instead of <code>Value</code>, but that needs a way to write a pattern like <code>(inst_data (new_thing c))</code> even though <code>inst_data</code> needs two parameters, and I don't know how to write that.</p>\n<p>Basic attempts say that it's not allowed even syntactically:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">building</span><span class=\"w\"> </span><span class=\"n\">ISLE</span><span class=\"w\"> </span><span class=\"n\">files</span>:\n  <span class=\"nc\">parse</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Unexpected</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"n\">LParen</span>\n<span class=\"w\">  </span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">prelude_opt</span><span class=\"p\">.</span><span class=\"n\">isle</span>:<span class=\"mi\">85</span>:<span class=\"mi\">26</span>: <span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">my_new_thing</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">InstructionData</span><span class=\"p\">))</span>\n<span class=\"w\">                                                       </span><span class=\"o\">^</span>\n</code></pre></div>\n<p>(Irrelevant aside: things like this are why I find concatenative languages really elegant conceptually, since for them multiple return values work as smoothly as multiple arguments</p>\n</blockquote>",
        "id": 407302120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702321321
    },
    {
        "content": "<p>scottmcm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 407310077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702324562
    },
    {
        "content": "<p>scottmcm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#issuecomment-1850789304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>:</p>\n<blockquote>\n<p>There we go; hopefully that's better.  By manually uncurrying things I could still use the same <code>inst_data</code> code (albeit under a different name to make the ISLE types work out) so it does more work in ISLE and less work in the extractor itself.</p>\n</blockquote>",
        "id": 407310370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702324674
    },
    {
        "content": "<p>scottmcm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 407310538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702324731
    },
    {
        "content": "<p>scottmcm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#issuecomment-1850789304\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>:</p>\n<blockquote>\n<p>There we go; hopefully that's better.  By manually uncurrying things I could still use the same <code>inst_data</code> code (albeit under a different name to make the ISLE types work out) so it does more work in ISLE and less work in the extractor itself.</p>\n<p>I suppose there's a version of this that instead makes <code>tupled</code> versions of every single instruction -- so you could have <code>(iconst_tupled (my_extractor â€¦))</code> -- but I'm not going that far right now <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n</blockquote>",
        "id": 407311964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702325268
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1777853540\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for pushing on that! You're reaching my own personal limit of knowledge of extractors and ISLE as well as I've run into the same things myself. </p>\n<p>@fitzgen would you be ok taking a look at this too? You're more familiar with ISLE than I and you might spot something I'm missing.</p>\n</blockquote>",
        "id": 407508042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702396214
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670#pullrequestreview-1778336476\">PR review</a>:</p>\n<blockquote>\n<p>Fantastic! We've wanted to do this kind of thing for a long time (couple constant values to their type and signedness) but no one ever had time or stepped up. Thanks for doing this!</p>\n</blockquote>",
        "id": 407554825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702411028
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7670\">PR #7670</a>.</p>",
        "id": 407561351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702413111
    }
]