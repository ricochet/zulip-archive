[
    {
        "content": "<p>giteewif opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>Aot mode use the api deserialize, it get module from serialized module that called from Module::from_file() or Module::from_bytes()，and serilize api. And I test the aot mode and jit mode in polybench wasm or libsodium bench，their performance is same in execution, otherwise the compilation.</p>\n</blockquote>",
        "id": 479263384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730118362
    },
    {
        "content": "<p>giteewif edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>Aot mode use the api deserialize, it get module from serialized module that called from Module::from_file() or Module::from_bytes()，and serilize api. And I test the aot mode and jit mode in polybench wasm or libsodium bench，their performance is same in execution, otherwise the compilation.</p>\n</blockquote>",
        "id": 479263474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730118387
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>Aot mode use the api deserialize, it get module from serialized module that called from Module::from_file() or Module::from_bytes()，and serilize api. And I test the aot mode and jit mode in polybench wasm or libsodium bench，their performance is same in execution, otherwise the compilation.</p>\n</blockquote>",
        "id": 479296246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730127695
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514#issuecomment-2441840618\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>You're evaluation matches expectations which is that these two perform the same. The \"JIT mode\" compile process is the exact same as \"AOT mode\" and so the exact same artifact is produced in both situations. That means the only expected difference is compile time.</p>\n<p>Out of curiosity did you locate documentation that indicate the contrary? Did we for example have outdated documentation indicating that one mode was faster than the other?</p>\n</blockquote>",
        "id": 479296248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730127695
    },
    {
        "content": "<p>giteewif <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514#issuecomment-2441892857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>Thanks! There is no doc that show that, i just thought aot should perform best. That means wasmtime only support jit mod? the aot mode just the aot style, it do not compile all the code before execution?</p>\n</blockquote>",
        "id": 479300317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730128875
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514#issuecomment-2441904166\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9514\">issue #9514</a>:</p>\n<blockquote>\n<p>Wasmtime doesn't have a first-class concept of \"jit mode\" or \"aot mode\" actually, so it's more in how you use Wasmtime than anything else. Once a module is running Wasmtime never generates code, so the two modes behave exactly the same way after a <code>Module</code> is created.</p>\n<p>Put another way you can think of \"jit mode\" as \"I can create a <code>Module</code> from a wasm blob\" and \"aot mode\" is \"I can create a <code>Module</code> from some previously-serialized bytes\". In both cases the operation that's being done is the creation of a <code>Module</code>. In both cases once a <code>Module</code> is created (or <code>wasmtime_module_t</code> in the C API) no more codegen happens so both perform the same way.</p>\n</blockquote>",
        "id": 479301129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730129128
    }
]