[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a>.</p>",
        "id": 194850801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587497560
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194850803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587497560
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\" title=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a>.</p>",
        "id": 194850805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587497560
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194851004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587497660
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194851638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587498017
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398215140\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398215140\">PR Review</a>.</p>",
        "id": 194936028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564576
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398215140\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398215140\">PR Review</a>.</p>",
        "id": 194936029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564576
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413003431\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413003431\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is the clone necessary, since it happens above already?</p>\n</blockquote>",
        "id": 194936031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564576
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413015737\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413015737\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this comment ought to complete the documentation of <code>colocated</code> in the <code>ExtFuncData</code> data structure, because it's more likely CL users will look at <code>ExtFuncData</code> rather than <code>RelocDistance</code>.</p>\n</blockquote>",
        "id": 194936032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564576
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413010527\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413010527\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this be a getter on <code>ExtFuncData</code> and on <code>GlobalValueData</code> instead?</p>\n</blockquote>",
        "id": 194936033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564576
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398231255\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398231255\">PR Review</a>.</p>",
        "id": 194936143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564611
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413016736\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413016736\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Actually not sure how I feel about putting it on <code>GlobalValueData</code>, since it should only be for <code>GlobalVataData::Symbol</code>, really...</p>\n</blockquote>",
        "id": 194936144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587564611
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398613805\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398613805\">PR Review</a>.</p>",
        "id": 194995338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592028
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413355771\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413355771\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah -- the earlier clone was just cloning a tuple with a borrow (<code>call_target()</code> returns a borrow of the <code>ExternalName</code>), which is a no-op as it's already <code>Copy</code>; the new <code>clone</code> was to get around a conflicting borrow issue with <code>ctx.emit</code> taking a mut <code>self</code>. Removed first clone. The joys of proper Rust usage :-)</p>\n</blockquote>",
        "id": 194995339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592028
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 194996252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592627
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398619425\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398619425\">PR Review</a>.</p>",
        "id": 194996281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592656
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413361115\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413361115\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done -- added an additional note to both <code>colocated</code> flags, in both <code>ExtFuncData</code> and <code>GlobalValueData::Symbol</code>.</p>\n</blockquote>",
        "id": 194996282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592657
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413361387\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r413361387\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good idea -- done (made the <code>GlobalValueData</code> getter return an <code>Option</code>, only <code>Some</code> for the <code>Symbol</code> case).</p>\n</blockquote>",
        "id": 194996347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592687
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398619692\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-398619692\">PR Review</a>.</p>",
        "id": 194996348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587592687
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195114619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587673386
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196256399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588638561
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196257443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588639627
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405593822\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405593822\">PR Review</a>.</p>",
        "id": 196281154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588668174
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r419950473\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r419950473\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: <code>If</code></p>\n</blockquote>",
        "id": 196281155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588668175
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405593822\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405593822\">PR Review</a>.</p>",
        "id": 196281156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588668175
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196314464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588688634
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r420149825\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#discussion_r420149825\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Fixed, thanks!</p>\n</blockquote>",
        "id": 196314475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588688640
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405839885\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570#pullrequestreview-405839885\">PR Review</a>.</p>",
        "id": 196314476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588688640
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a> from <code>fix-long-range-aarch64-call</code> to <code>master</code>:</p>\n<blockquote>\n<p>Previously, every call was lowered on AArch64 to a <code>call</code> instruction, which<br>\ntakes a signed 26-bit PC-relative offset. Including the 2-bit left shift, this<br>\ngives a range of +/- 128 MB. Longer-distance offsets would cause an impossible<br>\nrelocation record to be emitted (or rather, a record that a more sophisticated<br>\nlinker would fix up by inserting a shim/veneer).</p>\n<p>This commit adds a notion of \"relocation distance\" in the MachInst backends,<br>\nand provides this information for every call target and symbol reference. The<br>\nintent is that backends on architectures like AArch64, where there are different<br>\noffset sizes / addressing strategies to choose from, can either emit a regular<br>\ncall or a load-64-bit-constant / call-indirect sequence, as necessary. This<br>\navoids the need to implement complex linking behavior.</p>\n<p>The MachInst driver code provides this information based on the \"colocated\" bit<br>\nin the CLIF symbol references, which appears to have been designed for this<br>\npurpose, or at least a similar one. Combined with the <code>use_colocated_libcalls</code><br>\nsetting, this allows client code to ensure that library calls can link to<br>\nlibrary code at any location in the address space.</p>\n<p>Separately, the <code>simplejit</code> example did not handle <code>Arm64Call</code>; rather than doing<br>\nso, it appears all that is necessary to get its tests to pass is to set the<br>\n<code>use_colocated_libcalls</code> flag to false, to make use of the above change. This<br>\nfixes the <code>libcall_function</code> unit-test in this crate.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 196335000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588697726
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1570\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1570\">PR #1570</a>.</p>",
        "id": 196341520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588700757
    }
]