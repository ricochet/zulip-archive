[
    {
        "content": "<p>lazytiger opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>I want to test if I can use the parallel feature in the specs crate. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Component)]</span>\n<span class=\"cp\">#[storage(VecStorage)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SumSystem</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SumSystem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">SystemData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Write</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadStorage</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">::</span><span class=\"n\">SystemData</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">i32comp</span><span class=\"p\">).</span><span class=\"n\">join</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"o\">*</span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"system\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">..</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">create_entity</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ThreadPoolBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DispatcherBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">SumSystem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"sum_system\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">with_pool</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">dispatcher</span><span class=\"p\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">fetch</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">sum</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>When i=0, j=1, the Engine with default config failed: memory allocation of memory allocation of 10361552 bytes failed</li>\n<li>When i=0, j=10, the Engine with max_wasm_stack=1024<em>1024</em>10, it works</li>\n<li>When i=0, j=20, the Engine with max_wasm_stack=1024<em>1024</em>10 it fails: memory allocation of memory allocation of 10361552 bytes failed</li>\n</ul>\n<p>I have tested max_wasm_stack=200x1024x1024, it fails the same.</p>\n<p>I wonder if this is a bug or if I just missed some configuration.<br>\n</p>\n</blockquote>",
        "id": 444391833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718259822
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2164622297\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>What is the max memory size set by the wasm module? Wasm shared memories are required to set some limit to their size. It may be the case that the linker defaulted to a too small size.</p>\n</blockquote>",
        "id": 444393362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718260563
    },
    {
        "content": "<p>lazytiger edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>I want to test if I can use the parallel feature in the specs crate. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Component)]</span>\n<span class=\"cp\">#[storage(VecStorage)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SumSystem</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SumSystem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">SystemData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Write</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadStorage</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">::</span><span class=\"n\">SystemData</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">i32comp</span><span class=\"p\">).</span><span class=\"n\">join</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"o\">*</span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"system\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">..</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">create_entity</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ThreadPoolBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DispatcherBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">SumSystem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"sum_system\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">with_pool</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">dispatcher</span><span class=\"p\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">fetch</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">sum</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>When i=0, j=1, the Engine with default config failed: memory allocation of memory allocation of 10361552 bytes failed</li>\n<li>When i=0, j=10, the Engine with max_wasm_stack=1024x1024x10, it works</li>\n<li>When i=0, j=20, the Engine with max_wasm_stack=1024x1024x10 it fails: memory allocation of memory allocation of 10361552 bytes failed</li>\n</ul>\n<p>I have tested max_wasm_stack=200x1024x1024, it fails the same.</p>\n<p>I wonder if this is a bug or if I just missed some configuration.<br>\n</p>\n</blockquote>",
        "id": 444393562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718260629
    },
    {
        "content": "<p>lazytiger <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2164627567\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>I use default for all the other config parameters</p>\n</blockquote>",
        "id": 444393627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718260658
    },
    {
        "content": "<p>lazytiger edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2164627567\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>I use default for all the other config parameters. @bjorn3 How can I set max memory size, I don't find an API related to this purpose except max_wasm_stack</p>\n</blockquote>",
        "id": 444394336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718260973
    },
    {
        "content": "<p>lazytiger <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2164684692\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>ImportType { module: \"env\", name: \"memory\", ty: Memory(MemoryType { ty: Memory { minimum: 17, maximum: Some(17), shared: true, memory64: false } }) }</p>\n<p>The shared memory maximum is 17, how can I change the maximum? Thanks</p>\n</blockquote>",
        "id": 444395665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718261568
    },
    {
        "content": "<p>lazytiger <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2164802411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>Thanks for your help. I use the walrus crate to modify the wasm file, and it works.</p>\n</blockquote>",
        "id": 444400416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718263399
    },
    {
        "content": "<p>lazytiger closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>I want to test if I can use the parallel feature in the specs crate. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Component)]</span>\n<span class=\"cp\">#[storage(VecStorage)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">SumSystem</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SumSystem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">SystemData</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Write</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadStorage</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">::</span><span class=\"n\">SystemData</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">i32comp</span><span class=\"p\">).</span><span class=\"n\">join</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"o\">*</span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i32comp</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"system\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">Int32Comp</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">..</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">create_entity</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">Int32Comp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ThreadPoolBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">dispatcher</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DispatcherBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">SumSystem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"sum_system\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">with_pool</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)).</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">dispatcher</span><span class=\"p\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">fetch</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">sum</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>When i=0, j=1, the Engine with default config failed: memory allocation of memory allocation of 10361552 bytes failed</li>\n<li>When i=0, j=10, the Engine with max_wasm_stack=1024x1024x10, it works</li>\n<li>When i=0, j=20, the Engine with max_wasm_stack=1024x1024x10 it fails: memory allocation of memory allocation of 10361552 bytes failed</li>\n</ul>\n<p>I have tested max_wasm_stack=200x1024x1024, it fails the same.</p>\n<p>I wonder if this is a bug or if I just missed some configuration.<br>\n</p>\n</blockquote>",
        "id": 444400429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718263405
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793#issuecomment-2165092205\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8793\">issue #8793</a>:</p>\n<blockquote>\n<p>You can set the mac size by passing <code>--max-memory</code> to the linker as alternative.</p>\n</blockquote>",
        "id": 444419506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718270234
    }
]