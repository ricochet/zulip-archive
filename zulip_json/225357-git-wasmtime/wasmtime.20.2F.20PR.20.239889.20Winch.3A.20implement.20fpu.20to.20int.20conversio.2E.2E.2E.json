[
    {
        "content": "<p>MarinPostma edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 490317243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734803796
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#issuecomment-2567092704\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>:</p>\n<blockquote>\n<p>I can help reviewing this one. </p>\n</blockquote>",
        "id": 491516850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735753640
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 491516855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735753645
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2527896742\">PR review</a>:</p>\n<blockquote>\n<p>Looking good. Left some comments inline.</p>\n<p>As a general comment, the <code>emit_*</code> naming convention is not standard across the assembler implementations (as noted and fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9918\">https://github.com/bytecodealliance/wasmtime/pull/9918</a>), so I´d suggest dropping the <code>emit_</code> prefix in the assembler methods introduced in this PR. </p>\n</blockquote>",
        "id": 491646991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901079539\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar comment here, I think it should be possible to omit the <code>OperandSize</code> prefix in both match arms. </p>\n</blockquote>",
        "id": 491646992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901078851\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: I believe that here and in the next match arm below you can omit the <code>OperandSize::</code> prefix given that you're already importing it above (e.g., <code>use OperandSize::*</code>)</p>\n</blockquote>",
        "id": 491646994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901073856\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Load the max value for an integer of size out_size, as a floating-point\n    /// of size `in_size`, into register `rd`.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 491646995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901137302\">PR review comment</a>:</p>\n<blockquote>\n<p>I´d suggest avoiding passing a placeholder register here. The temp register that is passed to <code>unsigned_truncate</code> is an allocatable register, therefore there's very little chance of it getting unintentionally clobbered.  Instead having a single implementation for both cases, I´d suggest breaking down the implementation in the assembler into two methods, one for each case (signed/unsigned), then in each implementation you can decide to use the scratch register, immediately before emission, without the risk of unintentionally clobbering it. This is similar to how the x64 assembler implementation works. </p>\n</blockquote>",
        "id": 491646996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901121925\">PR review comment</a>:</p>\n<blockquote>\n<p>If we're writing to <code>tmp_reg</code>, I think this should be defined in the signature, similar to <code>dst</code>: <code>tmp_reg: Writable&lt;Reg&gt;</code></p>\n</blockquote>",
        "id": 491646997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901068773\">PR review comment</a>:</p>\n<blockquote>\n<p>Here we don´t need to duplicate this method, <code>fcmp</code> already exists. </p>\n</blockquote>",
        "id": 491646998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735841524
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2529184719\">PR review</a>.</p>",
        "id": 491766351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735914993
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1901843347\">PR review comment</a>:</p>\n<blockquote>\n<p>To make sure I understand, similarly to how x86 implementation, you would like to have two methods, <code>fpu_to_sint</code> and <code>fpu_to_uint</code> in asm, and also, those methods should be passed a temporary register in <code>masm</code>, rather than using the provided one in the case of <code>unsigned_truncate</code>?</p>\n<p>I have a few questions/remarks:</p>\n<ul>\n<li>what is the purpose of the temp reg in the <code>unsigned</code> variant? Why must this registry be allocated rather than used as a temp register? Is the caller expecting to find something in there? It is not explicitly passed as a writable register, but the x64 implementation implicitly converts it to one.</li>\n<li>While splitting the <code>convert_</code> methods for x64 makes sense to me since they correspond to a single instruction, we must emit a bunch of checks that are aware of the sign in the case of aarch64. Do you suggest duplicating all the checks in signed and unsigned variants? Or do we have two methods in ASM that call the current implementation with the <code>signed</code> argument set accordingly?</li>\n<li>I'm sorry if that sounds very ignorant, but why do we have to worry about clobbering a tmp register anyway? Can't it, by definition, be used for any purpose, and one should not have too strong an assumption about what it may contain, especially when handing it over to a callee?</li>\n<li>I'm surely missing something, but it seems to me that splitting the <code>convert</code> method into a signed and unsigned variant, and the use of tmp regs are orthogonal things, so I want to make sure I understand what you want correctly :)</li>\n</ul>\n</blockquote>",
        "id": 491766352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735914993
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#issuecomment-2569331751\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>:</p>\n<blockquote>\n<p>@saulecabrera I addressed most of the review comments but left a few questions</p>\n</blockquote>",
        "id": 491766831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735915271
    },
    {
        "content": "<p>MarinPostma updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 491767347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735915554
    },
    {
        "content": "<p>MarinPostma updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 491767447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735915589
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2530765154\">PR review</a>.</p>",
        "id": 491889904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736008695
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1903123268\">PR review comment</a>:</p>\n<blockquote>\n<p>The purpose of the allocatable temporary register is to provide an extra<br>\nregister to aid in the emission of the instruction sequence needed for the<br>\nunsigned case; in x64, 4 registers are required for the instruction sequence:<br>\n1 for the destination and 3 temporary registers. Since in the case of x64 the<br>\ninstruction sequence is completely handled by Cranelift, there's no risk of<br>\nunintentionally clobbering any of the registers passed to it, the unintentional<br>\nclobbering risk is particularly important in the case of scratch registers in Winch: even<br>\nthough they can be used for any purpose, one important detail about them is that<br>\nthey are not tracked by Winch's regalloc therefore they must be used sparingly<br>\nand with extreme caution: a misuse could result in unintentional clobbering and<br>\ntherefore subtle bugs. Ideally, the live range of the scratch registers should be<br>\nas short as possible to avoid potential bugs.</p>\n<p>In this particular case the reason why I am suggestion improving the usage of<br>\nthe scratch register is to minimize the risk of unintentional clobbering of such<br>\nregisters: once a scratch register is passed as a parameter, its live range is<br>\nextended and the risk of misuse is greater. A concrete example in this case of<br>\na potential risk of unintentional clobbering is passing the scratch register to<br>\n<code>fpu_to_int</code> and then using the float scratch register in any of the methods<br>\nneeded for the instruction sequence needed to fulfill the truncate instructions<br>\n(this is not the case today, but by passing the float scratch register around as<br>\nif it were any other register, it becomes harder to reason and audit in the<br>\nfuture).</p>\n<p>There are some alternatives that I've thought about to improve the<br>\nhandling/usage of the scratch registers to address some of the challenges<br>\nexposed in the previous paragraph. We could discuss those in a separate<br>\nissue/PR (e.g., relying on the type system to identify/audit scratch register usage and/or<br>\nproviding exclusive access to the scratch registers, similar to what we have for<br>\nthe allocatable registers). Care needs to be taken here to ensure that none of<br>\nthe solutions explored affect compilation performance. </p>\n<p>Taking a deeper look at your changes for the unsigned case, only 3 registers are<br>\nneeded here compared to the x64 implementation which demands 4. This  means that<br>\nyou can effectively ignore the temporary register defined in the Masm<br>\n<code>unsigned_truncate</code> signature and only rely on the float scratch register.</p>\n<p>Taking this into account, my concrete suggestion to move forward here is to:</p>\n<ul>\n<li>Redefine the <code>unsigned_truncate</code> signature to be:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">unsigned_truncate</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">context</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">CodeGenContext</span><span class=\"o\">&lt;</span><span class=\"n\">Emission</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">OperandSize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">dst_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">OperandSize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TruncKind</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This allows maximum flexibility to encode the ISA differences and more<br>\nimportantly reduces register pressure in cases where only 3 registers are<br>\nneeded, reducing unnecessary register pressure where possible is important to<br>\nminimize memory traffic. </p>\n<p>This is similar to how we handle the <code>div</code> instruction, given that the<br>\nrequirements vary between ISAs.</p>\n<ul>\n<li>Redefine <code>fpu_to_int</code> to be:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">fpu_to_int</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">dst</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Writable</span><span class=\"o\">&lt;</span><span class=\"n\">Reg</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Reg</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">OperandSize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">dst_size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">OperandSize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TruncKind</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">signed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>Avoiding passing the scratch registers as params and shortening their live<br>\nrange as much as possible by using them explicitly in each of the helper<br>\nfunctions that you have to fulfill the instruction sequence. </p>\n<hr>\n<p>I believe that with this approach, my concerns will be addressed and there won't<br>\nbe a need to split the signed/unsigned implementations (initially I was confused<br>\nwith the <code>TODO</code> comment in the code and had assumed that the implementation was<br>\nmaking use of a scratch register that wasn't actually needed, although that's<br>\nnot the case). </p>\n</blockquote>",
        "id": 491889905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736008695
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1903123268\">PR review comment</a>.</p>",
        "id": 491889921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736008722
    },
    {
        "content": "<p>MarinPostma submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2530772873\">PR review</a>.</p>",
        "id": 491894284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736012967
    },
    {
        "content": "<p>MarinPostma created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1903131962\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks a lot for the detailed writeup! This makes things a lot clearer. I'll make the changes <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 491894285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736012967
    },
    {
        "content": "<p>MarinPostma updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 491918699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736034477
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#issuecomment-2571442814\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>:</p>\n<blockquote>\n<p>@saulecabrera I have made the requested changes</p>\n</blockquote>",
        "id": 491918972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736034718
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2530938351\">PR review</a>:</p>\n<blockquote>\n<p>Looks great! Thanks for all your patience iterating on this. Left two minor comments and then we should be able to land this one. </p>\n</blockquote>",
        "id": 491983919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736098317
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1903311241\">PR review comment</a>:</p>\n<blockquote>\n<p>Similar here, you can use  the appropriate error constructor. </p>\n</blockquote>",
        "id": 491983920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736098317
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#discussion_r1903311090\">PR review comment</a>:</p>\n<blockquote>\n<p>Here you can use <code>CodeGenError::unexpected_operand_size()</code> instead. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/codegen/error.rs#L139\">https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/codegen/error.rs#L139</a></p>\n</blockquote>",
        "id": 491983921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736098318
    },
    {
        "content": "<p>MarinPostma updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 492321508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736260651
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#issuecomment-2575458912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>:</p>\n<blockquote>\n<p>It should be good now @saulecabrera </p>\n</blockquote>",
        "id": 492321624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736260692
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889#pullrequestreview-2534593692\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 492328324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736262726
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9889\">PR #9889</a>.</p>",
        "id": 492332397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736263815
    }
]