[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9155\">issue #9155</a>:</p>\n<blockquote>\n<p>Context: <code>wasmtime::component::bindgen</code> creates a <code>GuestPre</code> struct (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L578\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L578</a>) for each exported interface.</p>\n<p><code>GuestPre::new</code> performs the <code>export_index</code> lookups to validate that each function in the interface exists. However, it does not typecheck the functions in <code>new</code> - instead, they are typechecked in <code>GuestPre::load</code>, which takes a store and therefore must occur at instantiation time.</p>\n<p>The information to typecheck these exports exists in the <code>Component</code> (specifically in the <code>wasmtime_environ::component::Component</code> via <code>Component::env_component</code>) but right now there is no straightforward way to typecheck against that - <code>load</code> typechecks by way of <code>Func::typed</code> which requires a store argument, but ultimately ends up getting all the types out of that same env_component information.</p>\n<p>We should fix this so that GuestPre can be used to validate that the component's exports are all typechecked. This is useful for two reasons:</p>\n<ol>\n<li>it allows bindgen's <code>Pre</code> types to be used to fully validate a component is well typed without instantiating it - it already does this for imports, only exports are missing</li>\n<li>we could potentially eliminate type checking performed in the (<code>Instance::get_typed_func</code>)[https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L2577] performed in <code>GuestPre::load</code> which would make instantiation faster, and have one less path of possible failure.</li>\n</ol>\n</blockquote>",
        "id": 463783134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724179959
    }
]