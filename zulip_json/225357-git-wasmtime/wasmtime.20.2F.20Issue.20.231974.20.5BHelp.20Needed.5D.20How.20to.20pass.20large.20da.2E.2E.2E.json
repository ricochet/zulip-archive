[
    {
        "content": "<p>leonwanghui opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1974\">Issue #1974</a>:</p>\n<blockquote>\n<p>Hi all, recently I'm working for compiling a pretrained model (ResNet50) into WASM bytecode, although the model has been transformed into WASM successfully, but it seems that there is no efficient way to pass the image data into WASM to perform inference. Here are some ways I have tried:</p>\n<ul>\n<li>\n<p>WASM Memory Type. Though it's efficient to save and load data, but it seems to have memory size limitation (<code>64KB</code> I guess), and when I load the Tensor of image (2MB+) into the memory type, the error occurred with <code>thread 'main' panicked at 'wasm trap: undefined element: out of bounds table access\nwasm backtrace:\n  0: 0x41e4 - &lt;unknown&gt;!core::fmt::write::h4834d85ce1be7131\n  1: 0x2276c - &lt;unknown&gt;!&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt::hfcc1c9dfb39740ed\n  2: 0x22dcf - &lt;unknown&gt;!std::io::stdio::_print::hc41bda27e6084072\n  3: 0x34b86 - &lt;unknown&gt;!run\n', src/main.rs:59:19\nnote: run with </code>RUST_BACKTRACE=1<code> environment variable to display a backtrace</code></p>\n</li>\n<li>\n<p>System interface. This way solves the problem of size limitation, but it would cause performance downgrade and be difficult to scale out.</p>\n</li>\n</ul>\n<p>Any thoughts on this? Thanks!</p>\n</blockquote>",
        "id": 202760094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593737901
    },
    {
        "content": "<p>leonwanghui <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1974#issuecomment-653452938\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1974\">Issue #1974</a>:</p>\n<blockquote>\n<p>It seems that the error would be gone when callling <code>memory.grow()</code> to grow up the memory size, so this PR would be closed.</p>\n</blockquote>",
        "id": 202784908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593768980
    },
    {
        "content": "<p>leonwanghui closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1974\">Issue #1974</a>:</p>\n<blockquote>\n<p>Hi all, recently I'm working for compiling a pretrained model (ResNet50) into WASM bytecode, although the model has been transformed into WASM successfully, but it seems that there is no efficient way to pass the image data into WASM to perform inference. Here are some ways I have tried:</p>\n<ul>\n<li>\n<p>WASM Memory Type. Though it's efficient to save and load data, but it seems to have memory size limitation (<code>64KB</code> I guess), and when I load the Tensor of image (2MB+) into the memory type, the error occurred with <code>thread 'main' panicked at 'wasm trap: undefined element: out of bounds table access\nwasm backtrace:\n  0: 0x41e4 - &lt;unknown&gt;!core::fmt::write::h4834d85ce1be7131\n  1: 0x2276c - &lt;unknown&gt;!&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt::hfcc1c9dfb39740ed\n  2: 0x22dcf - &lt;unknown&gt;!std::io::stdio::_print::hc41bda27e6084072\n  3: 0x34b86 - &lt;unknown&gt;!run\n', src/main.rs:59:19\nnote: run with </code>RUST_BACKTRACE=1<code> environment variable to display a backtrace</code></p>\n</li>\n<li>\n<p>System interface. This way solves the problem of size limitation, but it would cause performance downgrade and be difficult to scale out.</p>\n</li>\n</ul>\n<p>Any thoughts on this? Thanks!</p>\n</blockquote>",
        "id": 202784909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593768980
    }
]