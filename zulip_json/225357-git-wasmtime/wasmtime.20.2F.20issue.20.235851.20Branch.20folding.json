[
    {
        "content": "<p>mmitton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851#issuecomment-1440394176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851\">issue #5851</a>:</p>\n<blockquote>\n<p>This function contains both BrIf and BrTable with a loop and optimizes it down to a constant return.</p>\n<p>function u0:0() -&gt; i32 system_v {<br>\nblock0:<br>\n    v0 = iconst.i32 1<br>\n    v1 = iconst.i32 10<br>\n    brif v0, block1, block2(v1)  ; v0 = 1, v1 = 10 </p>\n<p>block1:<br>\n    v2 = iconst.i32 0<br>\n    jump block5(v2)  ; v2 = 0</p>\n<p>block2(v3: i32):<br>\n    v4 = iconst.i32 1<br>\n    v5 = isub v3, v4  ; v4 = 1<br>\n    jump block3</p>\n<p>block3:<br>\n    brif.i32 v5, block2(v5), block4</p>\n<p>block4:<br>\n    v6 = iconst.i32 8<br>\n    jump block5(v6)  ; v6 = 8</p>\n<p>block5(v7: i32):<br>\n    br_table v7, block6, [block7, block8]</p>\n<p>block6:<br>\n    v8 = iconst.i32 4<br>\n    jump block9(v8)  ; v8 = 4</p>\n<p>block7:<br>\n    v9 = iconst.i32 8<br>\n    jump block9(v9)  ; v9 = 8</p>\n<p>block8:<br>\n    v10 = iconst.i32 16<br>\n    jump block9(v10)  ; v10 = 16 </p>\n<p>block9(v11: i32):<br>\n    return v11<br>\n}</p>\n<p>[cranelift_codegen::isa::x64] disassembly:<br>\n  pushq   %rbp<br>\n  unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }<br>\n  movq    %rsp, %rbp<br>\n  unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }<br>\nblock0:<br>\n  jmp     label1<br>\nblock1:<br>\n  jmp     label2<br>\nblock2:<br>\n  jmp     label3<br>\nblock3:<br>\n  jmp     label4<br>\nblock4:<br>\n  jmp     label5<br>\nblock5:<br>\n  movl    $8, %eax<br>\n  movq    %rbp, %rsp<br>\n  popq    %rbp<br>\n  ret<br>\n</p>\n</blockquote>",
        "id": 329476110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677084061
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851#issuecomment-1447252630\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851\">issue #5851</a>:</p>\n<blockquote>\n<p>This is a fantastic illustration of how much better Cranelift could do with all these optimizations combined. Thank you for putting it together! The example you've given in the comment above is compelling: I love seeing all that code disappear.</p>\n<p>I'm having trouble reviewing this all at once, though. I'm hoping we can split it into a series of smaller PRs. Individually they won't be nearly as effective, of course, but we need to be able to reason about the correctness of each change individually.</p>\n<p>What I'd like to see first is just brif/br_table folding. I'd like to leave out the changes to block parameters and the changes for domtree reconstruction. Maybe that just means putting your first two commits in a new PR?</p>\n<p>I suspect that piece by itself will be uncontroversial and easy to merge, while already being a big improvement. We'll need one more thing before merging it: some new small regression tests in <code>cranelift/filetests/filetests/egraph/</code> demonstrating that these kinds of branches are correctly folded away in simple cases. For bonus points, you could measure the impact of this change using our <a href=\"https://github.com/bytecodealliance/sightglass\">Sightglass benchmark suite</a>.</p>\n<p>Once that's merged, let's come back to the rest of the changes in this PR!</p>\n</blockquote>",
        "id": 338468217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677539244
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851#issuecomment-1486073827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5851\">issue #5851</a>:</p>\n<blockquote>\n<p>I've written up a bunch of thoughts about our general requirements for branch folding in a pair of issues. These two issues describe essentially independent tasks, and both are complex enough that we need to solve them separately so we can have a chance at reviewing each of them. On top of that, a third independent issue may make the other two easier. So probably the best order to tackle these is:</p>\n<ol>\n<li>#5908 </li>\n<li>#6109 </li>\n<li>#6106 </li>\n</ol>\n<p>The biggest challenge for all of this work, and for this PR as it stands now, is that we want the egraph pass to visit each basic block only once. In fact some fundamental invariants of our egraph implementation currently rely on this. Someday I want to relax that restriction and have the _option_ of running equality saturation to a fixpoint, but we aren't there today.</p>\n<p>So we miss some optimization opportunities on loops, but we still find a lot of optimizations, and this restriction keeps the optimization pass fast.</p>\n</blockquote>",
        "id": 345004695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679966477
    }
]