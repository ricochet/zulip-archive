[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647#issuecomment-1407157108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647\">issue #5647</a>:</p>\n<blockquote>\n<p>cc @jameysharp, any idea what might be causing this ISLE codegen bug?</p>\n</blockquote>",
        "id": 324169283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674859147
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647#issuecomment-1407189368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647\">issue #5647</a>:</p>\n<blockquote>\n<p>I think there's a codegen bug here that I should look into, but I don't think it's urgent because this bug can only happen with multi-terms, and I believe there's an easy workaround applicable to rules in any multi-constructor.</p>\n<p>I think if you remove the priorities from these rules, everything will work. You've forced ISLE to evaluate two rules in a specific order, where both rules need to loop over the same <code>inst_data</code> multi-extractor result. By giving ISLE the freedom to schedule these rules in any order, you'll allow it to loop over that extractor only once, so it won't try to reuse an iterator that's already been consumed.</p>\n<p>Since egraph simplifications are specified in a multi-constructor term, all matches will be returned, so you don't need to set rule priorities to ensure that the right rule wins. I don't believe there's any significant impact on elaboration results from the order that simplifications are returned in, either.</p>\n</blockquote>",
        "id": 324181600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674862191
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647#issuecomment-1409319027\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5647\">issue #5647</a>:</p>\n<blockquote>\n<p>That fixed it! Thanks @jameysharp!</p>\n</blockquote>",
        "id": 324774941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675112113
    }
]