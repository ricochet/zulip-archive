[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213097038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602546376
    },
    {
        "content": "<p><strong>yurydelendik</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a>.</p>",
        "id": 213097039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602546377
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213099074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602548600
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213181955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602606482
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-507728301\">PR Review</a>.</p>",
        "id": 213214071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-507728301\">PR Review</a>.</p>",
        "id": 213214072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504177609\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For a more general-purpose name, perhaps <code>SaveRegister</code>?</p>\n</blockquote>",
        "id": 213214073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504177730\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Likewise, perhaps <code>RestoreRegister</code>?</p>\n</blockquote>",
        "id": 213214074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504184920\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Typo in old code:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            cfa_offset: word_size as i32, // CFA offset starts at 8 to account for the return address on stack\n</code></pre></div>\n\n</blockquote>",
        "id": 213214075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504195094\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>Xmm</code> is architecture-specific, so perhaps we should combine this with <code>SaveRegister</code> and let the specific ABI emit the needed unwind code / CFI depending on integer vs. floating point register?  It looks like the unwind codes for Windows ARM64 ABI will need SP-relative offsets too, even for the integer registers (unlike with x64 where only the floating-point XMM register saves need the SP-relative offset), so combining this with an <code>Option&lt;u32&gt;</code> for the stack offset might make sense to do.</p>\n</blockquote>",
        "id": 213214076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504219143\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wonder if we should call this <code>SetFramePointer</code>, which will correspond to the CFA register in DWARF and the <code>set_fp</code> unwind code for Windows ARM64?  Windows x64 doesn't need the concept of a \"frame pointer\" currently as Cranelift doesn't support <code>alloca</code> and this is why it is only used for <code>SystemV</code> at the moment.</p>\n</blockquote>",
        "id": 213214077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504223227\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: perhaps call this <code>function_size</code> to correspond with <code>prologue_size</code>?</p>\n</blockquote>",
        "id": 213214078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621830
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-507814420\">PR Review</a>.</p>",
        "id": 213214189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621877
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504247330\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Note that Windows ARM64 unwind information will have a \"set_fp\" unwind code.</p>\n</blockquote>",
        "id": 213214192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602621877
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-507728301\">PR Review</a>.</p>",
        "id": 213214748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602622180
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213230620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602632016
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213235037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602636091
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213235280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602636293
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213240939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602643264
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213290587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602683406
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-508372709\">PR Review</a>.</p>",
        "id": 213291249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602683684
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#discussion_r504697435\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Windows x64 emit logic wants to differentiate these two. I'll rename it to <code>SaveXmmRegister</code>, I'll defer this refactoring to different PR -- it is getting more complicated than simple refactoring.</p>\n</blockquote>",
        "id": 213291250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602683684
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213293602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602684637
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213304081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602688376
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a> from <code>common-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR:</p>\n<ul>\n<li>Creates common unwind info data structures (at <code>cranelift::isa::unwind::input</code>)</li>\n<li>Extracts common logic for SystemV and FastCall into \"cranelift/codegen/src/isa/x86/unwind.rs\"</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/winx64.rs to cranelift/codegen/src/isa/unwind/winx64.rs</li>\n<li>Moves emit logic from cranelift/codegen/src/isa/x86/unwind/systemv.rs to cranelift/codegen/src/isa/unwind/systemv.rs</li>\n<li>Fixes test at x86/unwind/systemv.rs</li>\n</ul>\n<p>This is a preparation PR to expose unwind info for different backends, e.g. new backend for Aarch64. Also, will be useful to move emitting logic out of the codegen crate and keep only common data structures.</p>\n<p>See also #2266 </p>\n</blockquote>",
        "id": 213304137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602688396
    },
    {
        "content": "<p><strong>yurydelendik</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a>.</p>",
        "id": 213320488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602694790
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289#pullrequestreview-508934766\">PR Review</a>.</p>",
        "id": 213380255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602737475
    },
    {
        "content": "<p>yurydelendik merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">PR #2289</a>.</p>",
        "id": 213425863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602768891
    }
]