[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a> from <code>alexcrichton:pulley-ungate-simd</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit removes the simd proposal from \"known panicking compiler<br>\nfeatures\" for Pulley by filling out some minor ABI bits around<br>\nloads/stores of v128 in the Cranelift ABI code. This unlocks running<br>\n<code>spec_testsuite/*.wast</code> in CI and expecting it to pass as otherwise<br>\neverything was rejected since that test suite requires SIMD and it never<br>\neven got to the Cranelift backend.</p>\n<p>This then fixes a few minor issues here and there to get existing tests<br>\npassing now that they're actually being run. Some examples are:</p>\n<ul>\n<li>\n<p>Fix some copy/paste typos around callee-save clobbers and float<br>\n  registers.</p>\n</li>\n<li>\n<p>Add vector load/store support to avoid panicking in ABI code (not well<br>\n  tested yet though).</p>\n</li>\n<li>\n<p>Zero-extend the condition in <code>brif</code>'s lowering to ensure that the<br>\n  entire register is defined. In the future more variants of <code>br_if</code> in<br>\n  Pulley are probably desired.</p>\n</li>\n<li>\n<p>Limit <code>store</code> lowerings to just integer types, not vector types.</p>\n</li>\n<li>Fix <code>Func::call</code> with Pulley when the callee is a host function.</li>\n</ul>\n</blockquote>",
        "id": 487317054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487317056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487317057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487317058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487317059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855557
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487317062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855559
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779#issuecomment-2532577397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>:</p>\n<blockquote>\n<p>Note that this is currently based on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">https://github.com/bytecodealliance/wasmtime/pull/9775</a></p>\n</blockquote>",
        "id": 487317082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733855568
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487321457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733857135
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779#issuecomment-2532577397\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>:</p>\n<blockquote>\n<p>~~Note that this is currently based on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775~~\">https://github.com/bytecodealliance/wasmtime/pull/9775~~</a></p>\n</blockquote>",
        "id": 487321484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733857144
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 487334425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733862093
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779#issuecomment-2532961955\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"pulley\", \"wasmtime:api\", \"wasmtime:config\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 487346363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733867088
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779#issuecomment-2533113476\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 487353418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733870738
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779#pullrequestreview-2495522992\">PR review</a>:</p>\n<blockquote>\n<p>Nice</p>\n</blockquote>",
        "id": 488085428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733919966
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>.</p>",
        "id": 488089296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733921088
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9779\">PR #9779</a>:</p>\n<blockquote>\n<p>This commit removes the simd proposal from \"known panicking compiler<br>\nfeatures\" for Pulley by filling out some minor ABI bits around<br>\nloads/stores of v128 in the Cranelift ABI code. This unlocks running<br>\n<code>spec_testsuite/*.wast</code> in CI and expecting it to pass as otherwise<br>\neverything was rejected since that test suite requires SIMD and it never<br>\neven got to the Cranelift backend.</p>\n<p>This then fixes a few minor issues here and there to get existing tests<br>\npassing now that they're actually being run. Some examples are:</p>\n<ul>\n<li>\n<p>Fix some copy/paste typos around callee-save clobbers and float<br>\n  registers.</p>\n</li>\n<li>\n<p>Add vector load/store support to avoid panicking in ABI code (not well<br>\n  tested yet though).</p>\n</li>\n<li>\n<p>Zero-extend the condition in <code>brif</code>'s lowering to ensure that the<br>\n  entire register is defined. In the future more variants of <code>br_if</code> in<br>\n  Pulley are probably desired.</p>\n</li>\n<li>\n<p>Limit <code>store</code> lowerings to just integer types, not vector types.</p>\n</li>\n<li>Fix <code>Func::call</code> with Pulley when the callee is a host function.</li>\n</ul>\n<p>cc #9783</p>\n</blockquote>",
        "id": 488125590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733930893
    }
]