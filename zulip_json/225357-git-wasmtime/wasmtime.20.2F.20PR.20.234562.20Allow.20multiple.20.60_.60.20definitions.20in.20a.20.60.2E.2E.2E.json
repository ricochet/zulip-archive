[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<ul>\n<li>Allow multiple definitions of <code>_</code> in let</li>\n<li>Refactor now that multiple <code>_</code> definitions are allowed</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291393129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659137462
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291393455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659137796
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291393855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659138257
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<p>On main a let expression in ISLE currently requires unique names for each declaration. If you are sequencing a number of effects together using a let expression, you'll end up with multiple declarations whose name you don't care about, like in this example from the s390x backend: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064\">https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064</a>.</p>\n<p>This PR allows multiple definitions with the name <code>_</code> in a let expression, removing the need to come up with unique names. The previous example can be refactored to the following after this change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">boolean</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesBool</span><span class=\"p\">.</span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_producer</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_mov</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_consumer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_cmov_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291394310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659138806
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, a let expression in ISLE currently requires unique names for each declaration. If you are sequencing a number of effects together using a let expression, you'll end up with multiple declarations whose name you don't care about, like in this example from the s390x backend: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064\">https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064</a>.</p>\n<p>This PR allows multiple definitions with the name <code>_</code> in a let expression, removing the need to come up with unique names. The previous example can be refactored to the following after this change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">boolean</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesBool</span><span class=\"p\">.</span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_producer</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_mov</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_consumer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_cmov_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291394314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659138819
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, a let expression in ISLE currently requires unique names for each declaration. If you are sequencing a number of effects together using a let expression, you'll end up with multiple declarations whose results you don't need. Here's an example of this from the s390x backend: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064\">https://github.com/bytecodealliance/wasmtime/blob/8e9e9c52a1da9c661ad8a25210e38826bf8f7362/cranelift/codegen/src/isa/s390x/inst.isle#L3057-L3064</a></p>\n<p>This PR allows multiple definitions with the name <code>_</code> in a let expression, removing the need to come up with unique names. The previous example can be refactored to the following after this change:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">boolean</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select_bool_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesBool</span><span class=\"p\">.</span><span class=\"n\">ProducesBool</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_producer</span><span class=\"w\"> </span><span class=\"n\">producer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_mov</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">reg_false</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_consumer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_cmov_reg</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">reg_true</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291394388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659138888
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> as ready for review.</p>",
        "id": 291599182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659371055
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057665888\">PR review</a>.</p>",
        "id": 291611446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659376821
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291621059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659381680
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a>.</p>",
        "id": 291621524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659381919
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057757969\">PR review</a>.</p>",
        "id": 291622479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659382451
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057757969\">PR review</a>.</p>",
        "id": 291622480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659382451
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934847401\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you mind turning at least this case into a run-test and invoking the rule from a test toplevel, asserting that the most recent binding wins?</p>\n</blockquote>",
        "id": 291622481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659382452
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291627293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659384814
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">PR #4562</a> from <code>trevor/isle-wildcard-let</code> to <code>main</code>.</p>",
        "id": 291629030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659385611
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#pullrequestreview-1057823150\">PR review</a>.</p>",
        "id": 291629286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659385731
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#discussion_r934892195\">PR review comment</a>:</p>\n<blockquote>\n<p>I reworked it as a <code>link</code> test in the <code>isle/isle_examples/link</code> directory, and modified the test runner to also execute the output of <code>rustc</code> on these tests.</p>\n</blockquote>",
        "id": 291629288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659385731
    }
]