[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a>:</p>\n<blockquote>\n<p>Given this wasm:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">drop</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.load</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.xor</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>when run this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x4b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:   <span class=\"mh\">0x2d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like in the disassembly <code>pxor</code> is being used with a memory operand, but presumably that memory operand needs to be aligned and the instruction is trapping otherwise?</p>\n<p>cc @abrown, @jlb6740 <br>\n</p>\n</blockquote>",
        "id": 240499635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622135093
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a>:</p>\n<blockquote>\n<p>Given this wasm:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">drop</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.load</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.xor</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>when run this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x4b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:   <span class=\"mh\">0x2d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like in the disassembly <code>pxor</code> is being used with a memory operand, but presumably that memory operand needs to be aligned and the instruction is trapping otherwise?</p>\n<p>cc @abrown, @jlb6740 <br>\n</p>\n</blockquote>",
        "id": 240499636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622135093
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a>:</p>\n<blockquote>\n<p>Given this wasm:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">drop</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.load</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.xor</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>when run this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x4b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:   <span class=\"mh\">0x2d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like in the disassembly <code>pxor</code> is being used with a memory operand, but presumably that memory operand needs to be aligned and the instruction is trapping otherwise?</p>\n<p>cc @abrown, @jlb6740 <br>\n</p>\n</blockquote>",
        "id": 240499637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622135093
    },
    {
        "content": "<p>abrown assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a> (assigned to abrown):</p>\n<blockquote>\n<p>Given this wasm:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">drop</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.load</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.xor</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>when run this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x4b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:   <span class=\"mh\">0x2d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like in the disassembly <code>pxor</code> is being used with a memory operand, but presumably that memory operand needs to be aligned and the instruction is trapping otherwise?</p>\n<p>cc @abrown, @jlb6740 <br>\n</p>\n</blockquote>",
        "id": 243090716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623967217
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943#issuecomment-884376716\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a>:</p>\n<blockquote>\n<blockquote>\n<p>presumably that memory operand needs to be aligned and the instruction is trapping otherwise</p>\n</blockquote>\n<p>I can confirm this is the case. When I run <code>cargo run -p cranelift-tools -- wasm --set=\"enable_simd=true\" --target x86_64 -dDv scratch.wat</code> with the code above I see the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">f3</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">movdqu</span><span class=\"w\">  </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mh\">0x14</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdi</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">f</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">ef</span><span class=\"w\"> </span><span class=\"mi\">46</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">          </span><span class=\"n\">pxor</span><span class=\"w\">    </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsi</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">17</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">ret</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">19</span>:   <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                   </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There are two problems here:</p>\n<ul>\n<li>an optimization issue: <code>MOVDQU</code>, the unaligned move for double-quadwords (128-bit), is used to materialize the constant at offset <code>19</code> (relative <code>14</code>) into an XMM register. This actually should just be lowered to a <code>PXOR</code> and I'm not entirely sure why the x64 backend is not doing this</li>\n<li>an alignment issue, causing the crash: <code>PXOR</code> is using load-coalescing for its second operand, <code>xmmword ptr [rsi + 1]</code>, instead of a <code>MOVDQU + PXOR</code> sequence. This points out that load-coalescing is being over-eager: we should only be load coalescing 128-bit values if we know the load offset is aligned, perhaps using Wasm's <code>memarg</code> alignment.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 246755107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626889946
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">issue #2943</a> (assigned to abrown):</p>\n<blockquote>\n<p>Given this wasm:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">call</span> <span class=\"mi\">1</span>\n        <span class=\"nb\">drop</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"p\">)</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.const</span> <span class=\"kt\">i32</span><span class=\"err\">x</span><span class=\"mf\">4 0</span> <span class=\"mf\">0 0</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.load</span>\n    <span class=\"err\">v</span><span class=\"mf\">128</span><span class=\"err\">.xor</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>when run this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.20</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x4b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:   <span class=\"mh\">0x2d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like in the disassembly <code>pxor</code> is being used with a memory operand, but presumably that memory operand needs to be aligned and the instruction is trapping otherwise?</p>\n<p>cc @abrown, @jlb6740 <br>\n</p>\n</blockquote>",
        "id": 247258566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627331957
    }
]