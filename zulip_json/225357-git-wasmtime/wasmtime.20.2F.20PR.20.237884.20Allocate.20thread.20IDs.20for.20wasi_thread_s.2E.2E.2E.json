[
    {
        "content": "<p>Milek7 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a> from <code>Milek7:threadid</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>TID returned by <code>wasi_thread_spawn</code> must be non-zero and upper three bits must always be zero: <a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids\">https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids</a></p>\n<p>Current implementation didn't fulfill this requirements, only clearing the top bit from random value. Additionally, from birthday paradox probability of collision in allowed TID range nears 50% after spawning 27000 threads. This is large but not totally impossible, thus replace random generation with sequential allocation.</p>\n</blockquote>",
        "id": 420256380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707313945
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>.</p>",
        "id": 420256381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707313945
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>.</p>",
        "id": 420256382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707313946
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>TID returned by <code>wasi_thread_spawn</code> must be non-zero and upper three bits must always be zero: <a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids\">https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids</a></p>\n<p>Current implementation didn't fulfill this requirements, only clearing the top bit from random value. This breaks wasi-libc mutexes when random TID is larger than 0x1FFFFFFF.</p>\n<p>Additionally, from birthday paradox probability of collision in allowed TID range nears 50% after spawning 27000 threads. This is large but not totally impossible, thus replace random generation with sequential allocation.</p>\n</blockquote>",
        "id": 420257280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707314218
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>.</p>",
        "id": 420308419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707328057
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884#issuecomment-1932659652\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>This PR makes 0x1FFFFFFF the last TID that will be returned, but it is incorrect on wasm-libc because it reserves that for main thread ID. But wasi-threads proposal as written allows for this, so I'm not sure whether assume that's wasm-libc problem or limit it there 0x1FFFFFFE.</p>\n</blockquote>",
        "id": 420319196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707331534
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884#issuecomment-1932659652\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>This PR makes 0x1FFFFFFF the last TID that will be returned, but it is incorrect on wasm-libc because it reserves that for main thread ID. But wasi-threads proposal as written allows for this, so I'm not sure whether assume that's wasm-libc problem or limit it here to 0x1FFFFFFE.</p>\n</blockquote>",
        "id": 420319262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707331556
    },
    {
        "content": "<p>Milek7 deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884#issuecomment-1932659652\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>This PR makes 0x1FFFFFFF the last TID that will be returned, but it is incorrect on wasm-libc because it reserves that for main thread ID. But wasi-threads proposal as written allows for this, so I'm not sure whether assume that's wasm-libc problem or limit it here to 0x1FFFFFFE.</p>\n</blockquote>",
        "id": 420340546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707339125
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>TID returned by <code>wasi_thread_spawn</code> must be non-zero and upper three bits must always be zero: <a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids\">https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids</a></p>\n<p>Current implementation didn't fulfill this requirements, only clearing the top bit from random value. This breaks wasi-libc mutexes when random TID is larger or equal than 0x3FFFFFFF.</p>\n<p>Additionally, from birthday paradox probability of collision in allowed TID range nears 50% after spawning 27000 threads. This is large but not totally impossible, thus replace random generation with sequential allocation.</p>\n</blockquote>",
        "id": 420341179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707339402
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>TID returned by <code>wasi_thread_spawn</code> must be non-zero and upper three bits must always be zero: <a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids\">https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#design-choice-thread-ids</a></p>\n<p>Current implementation didn't fulfill this requirements, only clearing the top bit from random value. This breaks wasi-libc mutexes when random TID is larger or equal to 0x3FFFFFFF.</p>\n<p>Additionally, from birthday paradox probability of collision in allowed TID range nears 50% after spawning 27000 threads. This is large but not totally impossible, thus replace random generation with sequential allocation.</p>\n</blockquote>",
        "id": 420341212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707339420
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884#pullrequestreview-1875596056\">PR review</a>.</p>",
        "id": 421070835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707753972
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884#issuecomment-1938999432\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>:</p>\n<blockquote>\n<p>@Milek7, thanks for the PR!</p>\n</blockquote>",
        "id": 421071032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707754029
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7884\">PR #7884</a>.</p>",
        "id": 421078669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707756095
    }
]