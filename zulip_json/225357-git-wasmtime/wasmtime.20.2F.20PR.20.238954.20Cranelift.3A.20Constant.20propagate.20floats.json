[
    {
        "content": "<p>primoly edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 451228407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720906629
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2227122772\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 451235338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720910680
    },
    {
        "content": "<p>primoly edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<p>Adds constant propagation of the following instructions for <code>$F32</code> and <code>$F64</code>:<br>\n<code>fadd</code>, <code>fsub</code>, <code>fmul</code>, <code>fdiv</code>, <code>sqrt</code>, <code>ceil</code>, <code>floor</code>, <code>trunc</code>, <code>nearest</code>.</p>\n<p><code>fmin</code> and <code>fmax</code> are still missing. Those are tricky due to their handling and propagation of NaNs: <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fmin\">cranelift_codegen::ir::InstBuilder::fmin</a><br>\n</p>\n</blockquote>",
        "id": 451329900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720942026
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 451468753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721040791
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178490013\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Looks good to me, modulo one clarification below.</p>\n</blockquote>",
        "id": 451607231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721071813
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178490013\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Looks good to me, modulo one clarification below.</p>\n</blockquote>",
        "id": 451607232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721071813
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678295637\">PR review comment</a>:</p>\n<blockquote>\n<p><code>fma</code>, and any other relaxed SIMD opcode that is non-deterministic, is a little bit tricky. We would want to double check the required Wasm semantics, and whether the non-determinism is allowed to \"change\" throughout the program or not. If it is spec'd to be non-deterministic, but always has the same behavior for a given evaluation of the N non-deterministic choices, then const folding could be problematic if we are compiling on an aarch64 machine but running on an x64 machine, for example. It would essentially be observable to the program whether the constant folding was happening or not, and I'm not sure if that is allowed by the spec.</p>\n<p>So we should answer this question, and then document the answer here.</p>\n</blockquote>",
        "id": 451607233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721071813
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178516081\">PR review</a>.</p>",
        "id": 451612702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721072747
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678311462\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>If it is spec'd to be non-deterministic, but always has the same behavior for a given evaluation of the N non-deterministic choices, then const folding could be problematic if we are compiling on an aarch64 machine but running on an x64 machine, for example.</p>\n</blockquote>\n<p>IMHO it would be problematic either way. It would break reproducibility of the compiled executable/<code>.cwasm</code> file across compiler host architectures.</p>\n</blockquote>",
        "id": 451612703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721072747
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178529662\">PR review</a>.</p>",
        "id": 451615740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073266
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678319581\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW, I tried to answer this question for myself and didn't come away with anything firm.</p>\n<p>Filed <a href=\"https://github.com/WebAssembly/relaxed-simd/issues/155\">https://github.com/WebAssembly/relaxed-simd/issues/155</a> to ask for clarification.</p>\n<p>I think this <code>TODO</code> comment can just add a note about the potential gotcha with non-deterministic instructions and link to that issue.</p>\n</blockquote>",
        "id": 451615742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073266
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178529867\">PR review</a>.</p>",
        "id": 451615787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073274
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678319703\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we may already be able to observe const propagation with this PR already. At least on RISC-V any NaN producing operation is guaranteed to produce the canonical NaN, but I think some other platforms preserve the payload bits.</p>\n</blockquote>",
        "id": 451615789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073274
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678327718\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>At least on RISC-V any NaN producing operation is guaranteed to produce the canonical NaN, but I think some other platforms preserve the payload bits.</p>\n</blockquote>\n<p><code>NaN</code>s don't have any guarantee around having the same behavior across instructions, AFAIK. But the relaxed SIMD instructions might, or at least I'm not sure, which is why I filed that issue.</p>\n<blockquote>\n<p>It would break reproducibility of the compiled executable/<code>.cwasm</code> file across compiler host architectures.</p>\n</blockquote>\n<p>I guess this is a philosophical choice. It isn't clear to me whether we want to provide the weaker (deterministic cross compilation given the same host architecture) or the stronger (deterministic cross compilation regardless of host architecture) guarantee.</p>\n<p>If the latter, then we can't do compile-time evaluation of <em>any</em> floating point operation that could involve <code>NaN</code>s.</p>\n</blockquote>",
        "id": 451618679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073766
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178542933\">PR review</a>.</p>",
        "id": 451618680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073766
    },
    {
        "content": "<p>primoly submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178557413\">PR review</a>.</p>",
        "id": 451621287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074277
    },
    {
        "content": "<p>primoly created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678336412\">PR review comment</a>:</p>\n<blockquote>\n<p>I read <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fma\">the docs</a> as <code>fma</code> in Cranelift being deterministic with regards to rounding. However I don’t know if this is actually honoured by codegen, since properly emulating <code>fma</code>’s rounding might be too expensive. If it turns out that <code>fma</code> is (either set or list) non-deterministic (ignoring propagation of NaNs), then the documentation in <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html\"><code>InstructionBuilder</code></a> has to be updated.</p>\n</blockquote>",
        "id": 451621289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074277
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178566540\">PR review</a>.</p>",
        "id": 451622505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074633
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678341729\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>If the latter, then we can't do compile-time evaluation of any floating point operation that could involve NaNs.</p>\n</blockquote>\n<p>You could still attempt evaluation and bail out optimizing if the output turns out to be NaN.</p>\n</blockquote>",
        "id": 451622508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074633
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2178574272\">PR review</a>.</p>",
        "id": 451623366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074891
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678346184\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that's true. We could make all these external constructors <code>partial</code> and have them return <code>None</code> if the operation is given or produces a <code>NaN</code>.</p>\n</blockquote>",
        "id": 451623368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721074891
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2232834354\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<p>Reading the WebAssembly spec with regards to NaNs&lt;sup&gt;[1][2]&lt;/sup&gt; here are some remarks and questions.</p>\n<p>When all the NaNs in the input are canonical (NaN&lt;sub&gt;canon&lt;/sub&gt;), then the output is canonical as well.&lt;sup&gt;[1]&lt;/sup&gt; So there is no non-determinism in this case.&lt;sup&gt;[3]&lt;/sup&gt; If at least one of the inputs is non-canonical, the output is non-deterministic, but must be an <strong>arithmetic NaN</strong> (which of course can be a NaN&lt;sub&gt;canon&lt;/sub&gt;).&lt;sup&gt;[2]&lt;/sup&gt; I don’t know if this is actually handled correctly by Cranelift, because always propagating NaNs is incorrect, since non-arithmetic NaNs must be turned into arithmetic ones. Unless it is guaranteed that <code>Ieee32</code> and <code>Ieee64</code> NaNs are always arithmetic, but I don’t think this is the case. (opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8967\">https://github.com/bytecodealliance/wasmtime/issues/8967</a>)</p>\n<p>In Cranelift the functions used by the constant propagation of float in this PR (as well as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8625\">https://github.com/bytecodealliance/wasmtime/pull/8625</a>) convert the <code>Ieee32</code>/<code>Ieee64</code> to Rust <code>f32</code>/<code>f64</code>, perform the operation and then convert the result back to <code>Ieee32</code>/<code>Ieee64</code> by reinterpreting their bits. So the question: What happens to different kinds of NaNs during both calculation and conversions? Do they propagate, are they canonicalised or is this non-deterministic?</p>\n<p>To avoid const prop leading to different results than before @bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678341729\">mentioned</a> that well could just ignore const prop for all instructions involving NaNs. Actually you could still include operations that involve only NaN&lt;sub&gt;canon&lt;/sub&gt;, since there propagation and canonicalisation would be the same. Except there still remains the problem with the sign.&lt;sup&gt;[3]&lt;/sup&gt;</p>\n<p>Personally, I would prefer to do the propagation in all cases, since programs should never assume platform specific behaviour (list non-determinism) for instructions that are defined to be set non-deterministic. I except that constant NaNs (and especially non NaN&lt;sub&gt;canon&lt;/sub&gt;) will almost never occur in practice, so my reason is just the avoidance of to much special casing.</p>\n<p>[1] <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation\">https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation</a></p>\n<p>[2] <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\">https://webassembly.github.io/spec/core/syntax/values.html#syntax-float</a></p>\n<p>[3] Not quite: The sign is not part of the NaN&lt;sub&gt;canon&lt;/sub&gt;, so there are effectively two NaN&lt;sub&gt;canon&lt;/sub&gt;: +NaN&lt;sub&gt;canon&lt;/sub&gt; and −NaN&lt;sub&gt;canon&lt;/sub&gt;. The sign of the output is non-deterministic for all operations except <code>fneg</code>, <code>fabs</code> and <code>fcopysign</code>.<br>\n</p>\n</blockquote>",
        "id": 452003912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721207835
    },
    {
        "content": "<p>primoly edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2232834354\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<p>Reading the WebAssembly spec with regards to NaNs&lt;sup&gt;[1][2]&lt;/sup&gt; here are some remarks and questions.</p>\n<p>When all the NaNs in the input are canonical (NaN&lt;sub&gt;canon&lt;/sub&gt;), then the output is canonical as well.&lt;sup&gt;[1]&lt;/sup&gt; So there is no non-determinism in this case.&lt;sup&gt;[3]&lt;/sup&gt; If at least one of the inputs is non-canonical, the output is non-deterministic, but must be an <strong>arithmetic NaN</strong> (which of course can be a NaN&lt;sub&gt;canon&lt;/sub&gt;).&lt;sup&gt;[2]&lt;/sup&gt; I don’t know if this is actually handled correctly by Cranelift, because always propagating NaNs is incorrect, since non-arithmetic NaNs must be turned into arithmetic ones. Unless it is guaranteed that <code>Ieee32</code> and <code>Ieee64</code> NaNs are always arithmetic, but I don’t think this is the case. (opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8967\">https://github.com/bytecodealliance/wasmtime/issues/8967</a>)</p>\n<p>In Cranelift the functions used by the constant propagation of float in this PR (as well as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8625\">https://github.com/bytecodealliance/wasmtime/pull/8625</a>) convert the <code>Ieee32</code>/<code>Ieee64</code> to Rust <code>f32</code>/<code>f64</code>, perform the operation and then convert the result back to <code>Ieee32</code>/<code>Ieee64</code> by reinterpreting their bits. So the question: What happens to different kinds of NaNs during both calculation and conversions? Do they propagate, are they canonicalised or is this non-deterministic?</p>\n<p>To avoid const prop leading to different results than before @bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1678341729\">mentioned</a> that well could just ignore const prop for all instructions involving NaNs. Actually you could still include operations that involve only NaN&lt;sub&gt;canon&lt;/sub&gt;, since there propagation and canonicalisation would be the same. Except there still remains the problem with the sign.&lt;sup&gt;[3]&lt;/sup&gt;</p>\n<p>Personally, I would prefer to do the constant propagation in all cases (and just pick one spec compliant way of dealing with NaNs), since programs should never assume platform specific behaviour (list non-determinism) for instructions that are defined to be set non-deterministic. I except that constant NaNs (and especially non NaN&lt;sub&gt;canon&lt;/sub&gt;) will almost never occur in practice, so my reason is just the avoidance of to much special casing.</p>\n<p>[1] <a href=\"https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation\">https://webassembly.github.io/spec/core/exec/numerics.html#nan-propagation</a></p>\n<p>[2] <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\">https://webassembly.github.io/spec/core/syntax/values.html#syntax-float</a></p>\n<p>[3] Not quite: The sign is not part of the NaN&lt;sub&gt;canon&lt;/sub&gt;, so there are effectively two NaN&lt;sub&gt;canon&lt;/sub&gt;: +NaN&lt;sub&gt;canon&lt;/sub&gt; and −NaN&lt;sub&gt;canon&lt;/sub&gt;. The sign of the output is non-deterministic for all operations except <code>fneg</code>, <code>fabs</code> and <code>fcopysign</code>.<br>\n</p>\n</blockquote>",
        "id": 452004771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721208012
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2233713530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<p>I would be more comfortable with aborting the compile-time evaluation if either given or producing a <code>NaN</code>. It is more conservative, and we can always have follow up discussions/PRs focused on just that issue. I also suspect there isn't too much additional performance to gain w.r.t <code>NaN</code>s.</p>\n<hr>\n<p>FWIW, it seems like compile-time evaluating relaxed SIMD instructions like <code>fma</code> is probably a no-go: <a href=\"https://github.com/WebAssembly/relaxed-simd/issues/155#issuecomment-2232721287\">https://github.com/WebAssembly/relaxed-simd/issues/155#issuecomment-2232721287</a></p>\n</blockquote>",
        "id": 452123161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721233492
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452207028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721256615
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452408840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721326273
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2237208911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<p>I’ve updated the PR to always check whether the result is NaN and don’t do constant folding in that case. I also changed <code>neg</code> <code>abs</code> and <code>copysign</code> to not convert to Rust <code>f32</code>/<code>f64</code> but operate on the bits directly, since otherwise NaNs could have their payload and even sign changed. I also added <code>fmin</code> and <code>fmax</code> folding.</p>\n<p>Regarding <code>fma</code>: I still believe that it is a deterministic instruction when not involving NaNs, but since this PR doesn’t include it, this is something we can discuss in the future.<br>\n</p>\n</blockquote>",
        "id": 452411056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721326661
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#issuecomment-2237226013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>:</p>\n<blockquote>\n<blockquote>\n<p>Regarding <code>fma</code>: I still believe that it is a deterministic instruction when not involving NaNs, but since this PR doesn’t include it, this is something we can discuss in the future.</p>\n</blockquote>\n<p>Yes, my b I was thinking of the <code>relaxed_madd</code> Wasm instruction.</p>\n</blockquote>",
        "id": 452412888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721327059
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2186584301\">PR review</a>:</p>\n<blockquote>\n<p>Looks good modulo a rebase to address conflicts with <code>main</code> and a couple tiny nitpicks. Thanks!!</p>\n</blockquote>",
        "id": 452422443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721330147
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2186584301\">PR review</a>:</p>\n<blockquote>\n<p>Looks good modulo a rebase to address conflicts with <code>main</code> and a couple tiny nitpicks. Thanks!!</p>\n</blockquote>",
        "id": 452422444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721330147
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1683355604\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you follow this with a sentence saying <em>why</em> that is? Something like</p>\n<blockquote>\n<p>We want the NaN bit patterns produced by an instruction to be consistent, and compile-time evaluation in a cross-compilation scenario risks producing different NaN bit patterns than the target would have at run-time.</p>\n</blockquote>\n</blockquote>",
        "id": 452422445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721330147
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#discussion_r1683307652\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it is worth worth defining helpers like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Ieee</span><span class=\"p\">{</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"mi\">64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">non_nan</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">is_nan</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>to clean up some of this repetition.</p>\n</blockquote>",
        "id": 452422446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721330147
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452430914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721333303
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2186791366\">PR review</a>:</p>\n<blockquote>\n<p>Perfect! Thanks again!</p>\n</blockquote>",
        "id": 452433680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721334213
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452436289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721335085
    },
    {
        "content": "<p>primoly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452532334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721381937
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954#pullrequestreview-2188963674\">PR review</a>.</p>",
        "id": 452640053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721414653
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8954\">PR #8954</a>.</p>",
        "id": 452642292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721415567
    }
]