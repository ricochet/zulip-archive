[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1307865953\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<p>Would it make sense to have a method that returns <code>&amp;UnsafeCell&lt;[T]&gt;</code> or <code>&amp;Cell&lt;[T]&gt;</code>?</p>\n</blockquote>",
        "id": 308678601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667943713
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1307953582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 308689242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667948614
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1307962509\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it make sense to have a method that returns <code>&amp;UnsafeCell&lt;[T]&gt;</code> or <code>&amp;Cell&lt;[T]&gt;</code>?</p>\n</blockquote>\n<p>I'm open to it; not sure if all of the functions exposed are necessary, though. Let's see what @alexcrichton and @pchickey think?</p>\n</blockquote>",
        "id": 308690247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667949155
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309037216\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<blockquote>\n<p>Otherwise I think it should be able to implement:</p>\n<p><code>rust\nimpl&lt;T&gt; Deref for UnsafeGuestSlice&lt;'_, T&gt; {\n    type Target = [UnsafeCell&lt;T&gt;];\n    // ...\n}\n</code></p>\n<p>which could actually be relatively convenient to work with.</p>\n</blockquote>\n<p>Thinking about this more, I don't think accessing <code>T</code> through an <code>UnsafeCell</code> is right: <code>UnsafeCell::get_mut</code> would give us a <code>&amp;mut T</code> and the documentation of that method claims that \"this call borrows the <code>UnsafeCell</code> mutably (at compile-time) which guarantees that we possess the only reference,\" which is incorrect. It's incorrect because <code>UnsafeGuestSlice</code> is pointing to shared memory which could be modified at any time by any WASI thread, outside of the Rust borrowing world. @alexcrichton, what do you think?</p>\n</blockquote>",
        "id": 308826258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668012128
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309057250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<p>The <code>get_mut</code> method requires <code>&amp;mut self</code> so we won't have to worry about that here since we'll never hand out <code>&amp;mut UnsafeCell&lt;T&gt;</code>. By more-or-less handing out <code>&amp;[UnsafeCell&lt;T&gt;]</code> we're basically saying \"here's a 100% valid region of memory in terms of in-bounds, you have access to it, and it's all aligned correctly and whatnot -- but the contents of memory are ruled by other mechanisms\"</p>\n<p>The only way to interact with the contents of <code>&amp;UnsafeCell&lt;T&gt;</code> is to have <code>unsafe</code>, which is the goal here, so I think it'll work out well. For unshared cases the wrapper methods to go to safe slices will work, and for shared cases it's clear that atomics/raw intrinsics/etc need to get used (and is something we'll document).</p>\n</blockquote>",
        "id": 308829445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668013075
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309177517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<blockquote>\n<p>The <code>get_mut</code> method requires <code>&amp;mut self</code></p>\n</blockquote>\n<p>Ah, yeah, I see what you mean; this makes more sense. I'm not sure how/when this would be used, though; I guess this would be yet another way to modify a slice besides the <code>unsafe</code> <code>UnsafeGuestSlice::get_mut</code>? (I guess we could also expose an <code>unsafe</code> <code>`UnsafeGuestSlice::get</code> which would return a <code>&amp;[T]</code>). If this isn't going to be used just yet, should we  implement this in this PR or wait until it is needed?</p>\n</blockquote>",
        "id": 308843462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668017741
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309177517\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<blockquote>\n<p>The <code>get_mut</code> method requires <code>&amp;mut self</code></p>\n</blockquote>\n<p>Ah, yeah, I see what you mean; this makes more sense. I'm not sure how/when this would be used, though; I guess this would be yet another way to modify a slice besides the <code>unsafe</code> <code>UnsafeGuestSlice::get_mut</code>? (I guess we could also expose an <code>unsafe</code> <code>UnsafeGuestSlice::get</code> which would return a <code>&amp;[T]</code>). If this isn't going to be used just yet, should we  implement this in this PR or wait until it is needed?</p>\n</blockquote>",
        "id": 308843495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668017757
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309177517\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<blockquote>\n<p>The <code>get_mut</code> method requires <code>&amp;mut self</code></p>\n</blockquote>\n<p>Ah, yeah, I see what you mean; this makes more sense. I'm not sure how/when this would be used, though; I guess this would be yet another way to modify a slice besides the <code>unsafe</code> <code>UnsafeGuestSlice::get_mut</code>? (I guess for completeness we could also expose an <code>unsafe</code> <code>UnsafeGuestSlice::get</code> which would return a <code>&amp;[T]</code>). If this isn't going to be used just yet, should we  implement this in this PR or wait until it is needed?</p>\n</blockquote>",
        "id": 308843566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668017768
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229#issuecomment-1309235290\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5229\">issue #5229</a>:</p>\n<blockquote>\n<p>Oh I don't think the <code>Deref</code> impl is really all that important to have, it's just a \"might as well\" sort of thing. I think though having an interim <code>UnsafeGuestSlice</code> get constructed on the way to a <code>GuestSlice{,Mut}</code> will exercise it and make it useful. Only for niche cases will <code>UnsafeGuestSlice</code> be useful. Note though we could have <code>UnsafeGuestSlice::copy_from_slice</code> as a safe method which only fails due to active borrows.</p>\n</blockquote>",
        "id": 308853667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668020994
    }
]