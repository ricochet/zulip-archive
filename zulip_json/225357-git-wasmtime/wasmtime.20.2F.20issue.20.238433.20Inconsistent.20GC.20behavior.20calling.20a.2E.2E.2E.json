[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8433\">issue #8433</a>:</p>\n<blockquote>\n<p>For this program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">            (module</span>\n<span class=\"s\">                (import \"\" \"a\" (func $a (result externref)))</span>\n\n<span class=\"s\">                (func (export \"a\")</span>\n<span class=\"s\">                    (loop $l</span>\n<span class=\"s\">                        call $a</span>\n<span class=\"s\">                        drop</span>\n<span class=\"s\">                        br $l</span>\n<span class=\"s\">                    )</span>\n<span class=\"s\">                )</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">        \"#</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ValType</span>::<span class=\"n\">EXTERNREF</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_new</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>it will, as-is, run with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">42</span>:<span class=\"mi\">28</span>:\n<span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">externref</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">GC</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">memory</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>However if the <code>\"a\"</code> is switched to <code>\"b\"</code> to use the <code>func_new</code> definition instead of <code>func_wrap</code>, it will run infinitely and have steady memory usage.</p>\n<p>The reason is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4b9f53a928a8721e9b955da1c50090086bbef112/crates/wasmtime/src/runtime/func.rs#L1349-L1365\">this block</a> is only present in the <code>func_new</code> path, not the <code>func_wrap</code> path.</p>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 434794025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713803184
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8433#issuecomment-2070183825\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8433\">issue #8433</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8434\">https://github.com/bytecodealliance/wasmtime/pull/8434</a> I'm making the behavior \"consistent\" but in the wrong direction. That PR is removing the auto-gc block I outlined above, which was the source of the panic. This is the \"wrong direction\", however, as we should still retain the gc-before-returning so hosts aren't required necessarily to GC themselves. (or we should perhaps decide that this is indeed the desired semantics). </p>\n<p>In that sense I'm going to leave this issue open after that PR lands.</p>\n</blockquote>",
        "id": 434797356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713804210
    }
]