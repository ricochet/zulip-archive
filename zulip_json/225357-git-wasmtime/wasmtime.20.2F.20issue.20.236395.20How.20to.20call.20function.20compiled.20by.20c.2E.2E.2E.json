[
    {
        "content": "<p>YjyJeff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6395\">issue #6395</a>:</p>\n<blockquote>\n<p>Hi, I want to use cranelift for creating a toy language. After reading the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/tree/main\">cranelift-jit-demo</a>, I know how to build a simple function and call it. </p>\n<p>Now, I want to compile a function that takes a number of arguments as input(different arguments have different types) and call it in rust. I know how to build the function that returns a function pointer <code>*const u8</code>. The question is, how can I cast it back to rust function and call it?  The key point is the length of the input parameters is dynamic,  I do not know what <code>std::mem::transmute::&lt;fn(?)&gt;()</code> should be placed here... </p>\n<p>One solution maybe to call the function pointer <code>*const u8</code> directly without casting it back to the function pointer.  Can I do it? </p>\n<p>Another solution maybe limits the max number of parameters and write all of them manually....</p>\n<p>Thanks in advance.</p>\n</blockquote>",
        "id": 358916735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684310717
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6395#issuecomment-1550980477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6395\">issue #6395</a>:</p>\n<blockquote>\n<p>At the place you are calling the function you know the exact arguments it takes, right? You can transmute it right before calling to this exact function pointer type. If not Rust doesn't have a way to pass a dynamic amount of arguments to a function. You did either have to build a trampoline using cranelift which for example takes a byte array and reconstructs it into arguments for the target function and then construct a byte array on the rust side. (this is what wasmtime uses when the function signature is not known at compile time) Or you can use something like libffi which can handle building such trampolines for you.</p>\n</blockquote>",
        "id": 358921946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684312377
    },
    {
        "content": "<p>YjyJeff closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6395\">issue #6395</a>:</p>\n<blockquote>\n<p>Hi, I want to use cranelift for creating a toy language. After reading the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/tree/main\">cranelift-jit-demo</a>, I know how to build a simple function and call it. </p>\n<p>Now, I want to compile a function that takes a number of arguments as input(different arguments have different types) and call it in rust. I know how to build the function that returns a function pointer <code>*const u8</code>. The question is, how can I cast it back to rust function and call it?  The key point is the length of the input parameters is dynamic,  I do not know what <code>std::mem::transmute::&lt;fn(?)&gt;()</code> should be placed here... </p>\n<p>One solution maybe to call the function pointer <code>*const u8</code> directly without casting it back to the function pointer.  Can I do it? </p>\n<p>Another solution maybe limits the max number of parameters and write all of them manually....</p>\n<p>Thanks in advance.</p>\n</blockquote>",
        "id": 358923151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684312733
    }
]