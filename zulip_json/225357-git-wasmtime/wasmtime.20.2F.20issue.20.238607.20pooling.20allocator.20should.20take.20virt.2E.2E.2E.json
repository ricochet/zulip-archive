[
    {
        "content": "<p><a href=\"https://github.com/matsbror\">matsbror</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">Issue #8607</a>.</p>",
        "id": 438430277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715627667
    },
    {
        "content": "<p>matsbror opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">issue #8607</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<h3>Test Case</h3>\n<p>Hello wasi http</p>\n<h3>Steps to Reproduce</h3>\n<p>These steps fail on Ubuntu 24.04/riscv64 on VisionFive 2 and on Ubuntu 18.04/aarch64 on Nvidia Jetson Nano.</p>\n<ul>\n<li>Build the hello wasi http code as described <a href=\"https://github.com/sunfishcode/hello-wasi-http\">here</a></li>\n<li>run <code>wasmtime serve target/wasm32-wasi/debug/hello_wasi_http.wasm</code> </li>\n</ul>\n<h3>Expected Results</h3>\n<p>I would have expected the tutorial to work as described. </p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">pooling</span><span class=\"o\">-</span><span class=\"n\">allocator</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello_wasi_http</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"n\">mapping</span><span class=\"w\">                                                                                                                                                                                                     </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">mmap</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">reserve</span><span class=\"w\"> </span><span class=\"mh\">0x5dc80000000</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>When running without pooling allocator it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">pooling</span><span class=\"o\">-</span><span class=\"n\">allocator</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello_wasi_http</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span>:<span class=\"c1\">//0.0.0.0:8080/</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 21.0</p>\n<p>Operating system: </p>\n<ul>\n<li>For RISCV64 Ubuntu 24.04 downloaded from <a href=\"https://ubuntu.com/download/risc-v\">here</a></li>\n<li>For Aarch64 Ubuntu 18.04 downloaded from <a href=\"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write\">here</a></li>\n</ul>\n<p>Architecture: </p>\n<ul>\n<li>Riscv64</li>\n<li>Aarch64</li>\n</ul>\n<h3>Extra Info</h3>\n<p>I guess there should be a way to detect the virtual address size as it seems to be around 39 bits in these architectures.<br>\n</p>\n</blockquote>",
        "id": 438430278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715627668
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607#issuecomment-2108752994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">issue #8607</a>:</p>\n<blockquote>\n<p>In lieu of directly probing address space limitations I've opted to do something slightly different in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8610\">https://github.com/bytecodealliance/wasmtime/pull/8610</a> which probes for a large reservation to succeed before attempting another one for the pooling allocator.</p>\n</blockquote>",
        "id": 438443024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715632485
    },
    {
        "content": "<p>matsbror <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607#issuecomment-2109195854\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">issue #8607</a>:</p>\n<blockquote>\n<p>Thanks. Will this also help spin, which uses wasmtime as library? The same error occurs there. </p>\n</blockquote>",
        "id": 438491597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715656431
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607#issuecomment-2110443953\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">issue #8607</a>:</p>\n<blockquote>\n<p>Not directly, no, but I can propose the same change on Spin to have the same effect</p>\n</blockquote>",
        "id": 438592845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715698102
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8607\">issue #8607</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<h3>Test Case</h3>\n<p>Hello wasi http</p>\n<h3>Steps to Reproduce</h3>\n<p>These steps fail on Ubuntu 24.04/riscv64 on VisionFive 2 and on Ubuntu 18.04/aarch64 on Nvidia Jetson Nano.</p>\n<ul>\n<li>Build the hello wasi http code as described <a href=\"https://github.com/sunfishcode/hello-wasi-http\">here</a></li>\n<li>run <code>wasmtime serve target/wasm32-wasi/debug/hello_wasi_http.wasm</code> </li>\n</ul>\n<h3>Expected Results</h3>\n<p>I would have expected the tutorial to work as described. </p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">pooling</span><span class=\"o\">-</span><span class=\"n\">allocator</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello_wasi_http</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"n\">mapping</span><span class=\"w\">                                                                                                                                                                                                     </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">mmap</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">reserve</span><span class=\"w\"> </span><span class=\"mh\">0x5dc80000000</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>When running without pooling allocator it works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">pooling</span><span class=\"o\">-</span><span class=\"n\">allocator</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello_wasi_http</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Serving</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span>:<span class=\"c1\">//0.0.0.0:8080/</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 21.0</p>\n<p>Operating system: </p>\n<ul>\n<li>For RISCV64 Ubuntu 24.04 downloaded from <a href=\"https://ubuntu.com/download/risc-v\">here</a></li>\n<li>For Aarch64 Ubuntu 18.04 downloaded from <a href=\"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write\">here</a></li>\n</ul>\n<p>Architecture: </p>\n<ul>\n<li>Riscv64</li>\n<li>Aarch64</li>\n</ul>\n<h3>Extra Info</h3>\n<p>I guess there should be a way to detect the virtual address size as it seems to be around 39 bits in these architectures.<br>\n</p>\n</blockquote>",
        "id": 438601010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715700460
    }
]