[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277\">PR #8277</a>.</p>",
        "id": 430607905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711983831
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277\">PR #8277</a>.</p>",
        "id": 430607906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711983831
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277\">PR #8277</a> from <code>alexcrichton:less-borrow-checking</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is a refactoring and modernization of wiggle's <code>BorrowChecker</code> implementation. This type is quite old and predates everything related to the component model for example. This type additionally predates the implementation of WASI threads for Wasmtime as well. In general, this type is old and has not been updated in a long time.</p>\n<p>Originally a <code>BorrowChecker</code> was intended to be a somewhat cheap method of enabling the host to have active safe shared and mutable borrows to guest memory. Over time though this hasn't really panned out. The WASI threads proposal, for example, doesn't allow safe shared or mutable borrows at all. Instead everything must be modeled as a copy in or copy out of data. This means that all of <code>wasmtime-wasi</code> and <code>wasi-common</code> have largely already been rewritten in such a way to minimize borrows into linear memory.</p>\n<p>Nowadays the only types that represent safe borrows are the <code>GuestSlice</code> type and its equivalents (e.g. <code>GuestSliceMut</code>, <code>GuestStr</code>, etc). These are minimally used throughout <code>wasi-common</code> and <code>wasmtime-wasi</code> and when they are used they're typically isolated to a small region of memory.</p>\n<p>This is all coupled with the facst that <code>BorrowChecker</code> never ended up being optimized. It's a <code>Mutex&lt;HashMap&lt;..&gt;&gt;</code> effectively and a pretty expensive one at that. The <code>Mutex</code> is required because <code>&amp;BorrowChecker</code> must both allow mutations and be <code>Sync</code>. The <code>HashMap</code> is used to implement precise byte-level region checking to fulfill the original design requirements of what <code>wiggle</code> was envisioned to be.</p>\n<p>Given all that, this commit guts <code>BorrowChecker</code>'s implementation and functionality. The type is now effectively a glorified <code>RefCell</code> for the entire span of linear memory. Regions are no longer considered when borrows are made and instead a shared borrow is considered as borrowing the entirety of shared memory. This means that it's not possible to simultaneously have a safe shared and mutable borrow, even if they're disjoint, at the same time.</p>\n<p>The goal of this commit is to address performance issues seen in #7973 which I've seen locally as well. The heavyweight implementation of <code>BorrowChecker</code> isn't really buying us much nowadays, especially with much development having since moved on to the component model. The hope is that this much coarser way of implementing borrow checking, which should be much more easily optimizable, is sufficient for the needs of WASI and not a whole lot else.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 430607907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711983831
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277#pullrequestreview-1971616746\">PR review</a>.</p>",
        "id": 430619642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711987887
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277#pullrequestreview-1971616746\">PR review</a>.</p>",
        "id": 430619643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711987887
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277#discussion_r1546517634\">PR review comment</a>:</p>\n<blockquote>\n<p>Should there be different handle types for mut vs shared borrows? </p>\n</blockquote>",
        "id": 430619645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711987887
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277#pullrequestreview-1971786537\">PR review</a>.</p>",
        "id": 430635694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711993335
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277#discussion_r1546637289\">PR review comment</a>:</p>\n<blockquote>\n<p>In theory yeah, but I'm not too keen to do too much refactoring here because it's all basically a dated library on life support now. These are all ignored anyway so I should probably refactor to remove them entirely, but I'll leave that as a future TODO if necessary</p>\n</blockquote>",
        "id": 430635695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711993335
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277\">PR #8277</a>.</p>",
        "id": 430639963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711994987
    }
]