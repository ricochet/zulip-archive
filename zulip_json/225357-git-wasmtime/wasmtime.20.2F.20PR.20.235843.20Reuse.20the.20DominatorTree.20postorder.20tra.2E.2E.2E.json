[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created<br>\nby the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by<br>\nidentifying edges up-front that will need splitting, and otherwise allowing<br>\nregalloc2 to place moves on either the entry or exit edges of a block.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329058813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676923375
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created by the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by identifying edges up-front that will need splitting, and otherwise allowing<br>\nregalloc2 to place moves on either the entry or exit edges of a block.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329058990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676923427
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created by the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by identifying edges up-front that will need splitting, and otherwise allowing regalloc2 to place moves on either the entry or exit edges of a block.</p>\n<p>The meat of this change is in the first two commits. The first commit changes the lowering order implementation, while the second propagates the heuristic of processing child nodes in reverse order during postorder traversal of the CFG back to the DominatorTree's implementation. The second change caused a bit of churn in the dominator tree tests.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329059226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676923518
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created by the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by identifying edges up-front that will need splitting, and otherwise allowing regalloc2 to place moves on either the entry or exit edges of a block. Identifying critical edges up-front yields fewer critical edges in many cases than the previous algorithm, and produces lowering orders that usually have fewer blocks in them. This change leads to small but measurable improvements in sightglass benchmarks for compilation on both <code>bz2</code> and <code>spidermonkey</code> wasm.</p>\n<p>The meat of this change is in the first two commits. The first commit changes the lowering order implementation, while the second propagates the heuristic of processing child nodes in reverse order during postorder traversal of the CFG back to the DominatorTree's implementation. The second change caused a bit of churn in the dominator tree tests.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329059702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676923737
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>.</p>",
        "id": 329060391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676924074
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created by the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by identifying edges up-front that will need splitting, and otherwise allowing regalloc2 to place moves on either the entry or exit edges of a block. Identifying critical edges up-front yields fewer critical edges in many cases than the previous algorithm, and produces lowering orders that usually have fewer blocks in them. This change leads to small but measurable improvements in sightglass benchmarks for compilation on both <code>bz2</code> and <code>spidermonkey</code> wasm.</p>\n<p>The meat of this change is in the first commit, which both changes the block lowering order implementation and propagates a heuristic from the old implementation's postorder construction to the DominatorTree's implementation. This heuristic (reversing the children before pushing them on the work stack) is responsible for much of the test change fallout in this PR, but is important in that without it the new lowering order sees significantly more cache misses on the bz2 benchmark.<br>\n&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329060632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676924194
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>.</p>",
        "id": 329080309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676935116
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>:</p>\n<blockquote>\n<p>Rework <code>BlockLoweringOrder</code> construction to use the postorder traversal created by the <code>DominatorTree</code>. Additionally, construct fewer critical edge splits by identifying edges up-front that will need splitting, and otherwise allowing regalloc2 to place moves on either the entry or exit edges of a block. Identifying critical edges up-front often yields fewer critical edge splits than the previous algorithm, leading to lowering orders with fewer blocks overall. This change leads to small but measurable improvements in sightglass benchmarks for compilation on both <code>bz2</code> and <code>spidermonkey</code> wasm.</p>\n<p>The meat of this change is in the first commit, which both changes the block lowering order implementation and propagates a heuristic from the old implementation's postorder construction to the DominatorTree's implementation. This heuristic (reversing the children before pushing them on the work stack) is responsible for much of the test change fallout in this PR, but is important in that without it the new lowering order sees significantly more cache misses on the bz2 benchmark.<br>\n&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 329082913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676937243
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1308208906\">PR review</a>.</p>",
        "id": 329299784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677016549
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1308208906\">PR review</a>.</p>",
        "id": 329299785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677016549
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1113602667\">PR review comment</a>:</p>\n<blockquote>\n<p>This isn't quite the same as the existing logic, though today it evaluates the same: the existing logic is that if there are any fixed args (ie, non-blockparam args), we need to ensure no edge-moves to succs end up in this block. Branch tables with empty tables can result in this, but I'd prefer to encode the actual restriction for robustness (in other words, I want correctness written explicitly rather than an emergent property). Can we take the <code>f.dfg.insts[inst].opcode().is_branch() &amp;&amp; f.dfg.inst_fixed_args(inst).len() &gt; 0</code> condition and use it here?</p>\n</blockquote>",
        "id": 329299786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677016549
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1113598870\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this the index of the branch, or the index of the target within the single branch that can exist? (I prefer the existing <code>succ_idx</code> name for that, if that's what it is)</p>\n</blockquote>",
        "id": 329299787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677016549
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1308328460\">PR review</a>.</p>",
        "id": 329328331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031404
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1308328460\">PR review</a>.</p>",
        "id": 329328332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031404
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1113686756\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, we added this <code>branch_idx</code> field a while after deleting the previous <code>succ_idx</code> field when we discovered that it didn't work otherwise. You're right, the old name is fine, and the comment that went with it would be helpful here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"sd\">/// The successor index in this edge, to distinguish multiple</span>\n<span class=\"w\">        </span><span class=\"sd\">/// edges between the same block pair.</span>\n<span class=\"w\">        </span><span class=\"n\">succ_idx</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 329328333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031404
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1113732609\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm sorry the following comment is long. I couldn't figure out how to make it shorter and still clear.</p>\n<p>I agree, I prefer capturing correctness conditions explicitly instead of checking things which accidentally match the right conditions. But I'm not sure the existing code does that.</p>\n<p>This condition is written in terms of the CLIF instructions, but it's trying to establish an RA2 precondition on the machine instructions. At this point lowering hasn't happened yet, and the backend could do anything, so it's not obvious to me that there's any way to define the true correctness criteria at this point.</p>\n<p>But let's say we make assumptions about what a reasonable backend might do. Even then it's not obvious to me that the number of <code>inst_fixed_args</code> captures the condition we'd need to be safe against future CLIF extensions. We could add a weird branch instruction with a <code>ValueList</code>, or add some entirely different way to pass values into a branch.</p>\n<p>We could make the additional assumption that we won't invent CLIF instructions like that in the future. But at that point I don't see much difference between encoding our assumptions here versus encoding them somewhere else—especially if that \"somewhere else\" is right at the point where we call <code>lower_branch</code>, which it occurs to me is a great place to legalize away these special cases while staying close to RA2-related code.</p>\n<p>Since anything we do at the level of CLIF still can't guarantee that the backend never breaks the rules, at the end of the day I think we still need to rely on RA2's \"disallowed branch arg\" check and our fuzzing and tests to catch bugs around this.</p>\n<p>I can see one other option: defer deciding where to insert edge splits until after we call <code>lower_branch</code> and can do the same check RA2 would do on the machine instructions while they're temporarily buffered in <code>self.ir_insts</code>. I don't love that, but I think it's the only way to be sure we're checking the true correctness condition. And since this PR separates the computation of RPO from the decision about where to insert edge blocks, I think it's at least not impossible.</p>\n</blockquote>",
        "id": 329328334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031404
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1308418008\">PR review</a>.</p>",
        "id": 329328736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031747
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1113752521\">PR review comment</a>:</p>\n<blockquote>\n<p>The third option, just to record it for completeness here, is to make RA2 handle this edge (pun intended) case properly, by considering a branch's uses to come after edge-moves if they're inserted before the branch. I'm not advocating for that by any means, but I just wanted to note that end of the spectrum exists and is, in some manner of thinking, the cleanest :-)</p>\n<p>Thanks for writing out the reasoning here, in more depth than I had considered -- given that we have the backstop of the checks in RA2 itself, running during fuzzing, I'm fine with this as-written for now. So, LGTM with just the above <code>succ_idx</code> change.</p>\n</blockquote>",
        "id": 329328738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677031747
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> as ready for review.</p>",
        "id": 329472780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677083281
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>.</p>",
        "id": 332428957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677186720
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a> from <code>trevor/reuse-postorder-blockorder</code> to <code>main</code>.</p>",
        "id": 332430308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677187181
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#discussion_r1116289521\">PR review comment</a>:</p>\n<blockquote>\n<p>I changed this back to <code>succ_idx</code>, and also documented that it represents the index into the order specified by <code>visit_block_succs</code>.</p>\n</blockquote>",
        "id": 335045791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677189606
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#pullrequestreview-1312207672\">PR review</a>.</p>",
        "id": 335045797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677189607
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">PR #5843</a>.</p>",
        "id": 336357820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677192570
    }
]