[
    {
        "content": "<p>hungryzzz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7495\">issue #7495</a>:</p>\n<blockquote>\n<p>Hi, I run the following case in <code>Wasmtime</code> and <code>WasmEdge</code> respectively and I find that the execution time of Wasmtime is almost 6x slower than which of WasmEdge(measured by time tool).</p>\n<ul>\n<li><code>Wasmtime</code>: 4.08s</li>\n<li><code>WasmEdge</code>: 0.66s</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_snapshot_preview1\"</span> <span class=\"s2\">\"proc_exit\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">31</span>\n    <span class=\"nb\">i32.and</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.store</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">local.tee</span> <span class=\"mi\">5</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.load</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">4</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">6 6</span> <span class=\"k\">funcref</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">8192</span> <span class=\"mf\">8192</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">5246560</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">615098409</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"__indirect_function_table\"</span> <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<h3>Try to debug</h3>\n<p>I dump the corresponding machine code generated by <code>Wasmtime</code> and <code>WasmEdge</code>, I find that, the first loop will be optimized to empty in <code>WasmEdge</code> but <code>Wasmtime</code> cannot do this.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Machine code generated by Wasmtime</span>\n\n<span class=\"m\">64</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>c9<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%ecx,%ecx\n<span class=\"m\">66</span>:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>db<span class=\"w\">                </span>xor<span class=\"w\">    </span>%r11d,%r11d\n<span class=\"m\">69</span>:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c1<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%ecx\n6c:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>db<span class=\"w\">                </span><span class=\"nb\">test</span><span class=\"w\">   </span>%r11d,%r11d\n6f:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>f1<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">66</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x16&gt;\n\n<span class=\"m\">75</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">77</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n7e:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e1<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>xff,%ecx\n<span class=\"m\">84</span>:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span>a0<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0xa0<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%r8d\n8b:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>%r8d,<span class=\"o\">(</span>%rax,%rcx,1<span class=\"o\">)</span>\n8f:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%r8d\n<span class=\"m\">92</span>:<span class=\"w\"> </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"m\">95</span>:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e0<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\n9c:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c2<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%edx\n9f:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\na6:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>d8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">84</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x34&gt;\n\n\n<span class=\"c1\"># Machine code generated by WasmEdge</span>\n<span class=\"m\">60</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n<span class=\"m\">63</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>4f<span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rcx\n<span class=\"m\">67</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">69</span>:<span class=\"w\"> </span>0f<span class=\"w\"> </span>1f<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>nopl<span class=\"w\">   </span>0x0<span class=\"o\">(</span>%rax<span class=\"o\">)</span>\n<span class=\"m\">70</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">71</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rcx<span class=\"o\">)</span>,%rsi\n<span class=\"m\">74</span>:<span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">36</span><span class=\"w\">                   </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rsi<span class=\"o\">)</span>,%esi\n<span class=\"m\">76</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">38</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%rdi\n<span class=\"m\">79</span>:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">77</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>mov<span class=\"w\">    </span>%esi,0x1<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n7c:<span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">72</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%rdx<span class=\"o\">)</span>,%esi\n7f:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e2<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n<span class=\"m\">85</span>:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>fa<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n8b:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>f2<span class=\"w\">                   </span>mov<span class=\"w\">    </span>%esi,%edx\n8d:<span class=\"w\"> </span><span class=\"m\">75</span><span class=\"w\"> </span>e1<span class=\"w\">                   </span>jne<span class=\"w\">    </span><span class=\"m\">70</span><span class=\"w\"> </span>&lt;f2+0x10&gt;\n</code></pre></div>\n<p>And after removing the first loop in the above <code>.wat</code>, the execution time of <code>Wasmtime</code> will back to normal. So I am wandering that whether there is an related optimization in <code>Cranelift</code> can optimize the first loop like <code>LLVM</code>.</p>\n<h3>Versions and Environment</h3>\n<ul>\n<li><code>Wasmtime</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea\">https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea</a> (build release version)</li>\n<li><code>WasmEdge</code>: 7d4213b3abd5360c88e9120c3bc68ffd9b8a6870</li>\n<li>kernel version: Linux 5.15.0-83-generic</li>\n</ul>\n</blockquote>",
        "id": 400790888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699380120
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7495\">issue #7495</a>:</p>\n<blockquote>\n<p>Hi, I run the following case in <code>Wasmtime</code> and <code>WasmEdge</code> respectively and I find that the execution time of Wasmtime is almost 6x slower than which of WasmEdge(measured by time tool).</p>\n<ul>\n<li><code>Wasmtime</code>: 4.08s</li>\n<li><code>WasmEdge</code>: 0.66s</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_snapshot_preview1\"</span> <span class=\"s2\">\"proc_exit\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">31</span>\n    <span class=\"nb\">i32.and</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"c1\">;; First Loop</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\">;; Second Loop</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.store</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">local.tee</span> <span class=\"mi\">5</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.load</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">4</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">6 6</span> <span class=\"k\">funcref</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">8192</span> <span class=\"mf\">8192</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">5246560</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">615098409</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"__indirect_function_table\"</span> <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<h3>Try to debug</h3>\n<p>I dump the corresponding machine code generated by <code>Wasmtime</code> and <code>WasmEdge</code>, I find that there is something strange with the machine code generated by <code>Wasmtime</code>,<br>\n1. the first loop in the above <code>wat</code> will be compiled to <code>64-6f</code>(I guess that), but actually the first time the <code>jne</code> instruction is executed, the loop will be jumped out of, but <code>%ecx</code> will be added 1.<br>\n2. In the second loop, <code>mov  %r8d,(%rax,%rcx,1)</code> is also strange. Because the variables used in these two loops don't have data dependence.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Machine code generated by Wasmtime</span>\n\n<span class=\"m\">64</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>c9<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%ecx,%ecx\n<span class=\"m\">66</span>:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>db<span class=\"w\">                </span>xor<span class=\"w\">    </span>%r11d,%r11d\n<span class=\"m\">69</span>:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c1<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%ecx\n6c:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>db<span class=\"w\">                </span><span class=\"nb\">test</span><span class=\"w\">   </span>%r11d,%r11d\n6f:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>f1<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">66</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x16&gt;\n\n<span class=\"m\">75</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">77</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n7e:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e1<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>xff,%ecx\n<span class=\"m\">84</span>:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span>a0<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0xa0<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%r8d\n8b:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>%r8d,<span class=\"o\">(</span>%rax,%rcx,1<span class=\"o\">)</span>\n8f:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%r8d\n<span class=\"m\">92</span>:<span class=\"w\"> </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"m\">95</span>:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e0<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\n9c:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c2<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%edx\n9f:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\na6:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>d8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">84</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x34&gt;\n\n\n<span class=\"c1\"># Machine code generated by WasmEdge</span>\n<span class=\"m\">60</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n<span class=\"m\">63</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>4f<span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rcx\n<span class=\"m\">67</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">69</span>:<span class=\"w\"> </span>0f<span class=\"w\"> </span>1f<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>nopl<span class=\"w\">   </span>0x0<span class=\"o\">(</span>%rax<span class=\"o\">)</span>\n<span class=\"m\">70</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">71</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rcx<span class=\"o\">)</span>,%rsi\n<span class=\"m\">74</span>:<span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">36</span><span class=\"w\">                   </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rsi<span class=\"o\">)</span>,%esi\n<span class=\"m\">76</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">38</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%rdi\n<span class=\"m\">79</span>:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">77</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>mov<span class=\"w\">    </span>%esi,0x1<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n7c:<span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">72</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%rdx<span class=\"o\">)</span>,%esi\n7f:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e2<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n<span class=\"m\">85</span>:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>fa<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n8b:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>f2<span class=\"w\">                   </span>mov<span class=\"w\">    </span>%esi,%edx\n8d:<span class=\"w\"> </span><span class=\"m\">75</span><span class=\"w\"> </span>e1<span class=\"w\">                   </span>jne<span class=\"w\">    </span><span class=\"m\">70</span><span class=\"w\"> </span>&lt;f2+0x10&gt;\n</code></pre></div>\n<p>I try to remove the first loop in the above <code>wat</code> and the genrated codes are a little different,<br>\n1. <code>mov  %r8d,(%rax,%rcx,1)</code> in the above version becomes <code>mov    %eax,(%rsi)</code><br>\n2. <code>mov    (%rax),%r8d</code>  in the above version disappeared.</p>\n<p>So I think Cranelift generates wrong machine code which will result in wrong behaviors and further causes poor performance.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mi\">64</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">ecx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ecx</span>\n<span class=\"w\">  </span><span class=\"mi\">66</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">b7</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x80</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n\n<span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"n\">d</span>:   <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">87</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0xa0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">73</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">75</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">c8</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"mi\">78</span>:   <span class=\"mi\">81</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"w\">       </span><span class=\"n\">and</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x3fffffff</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"n\">e</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">                </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ecx</span>\n<span class=\"w\">  </span><span class=\"mi\">81</span>:   <span class=\"mi\">81</span><span class=\"w\"> </span><span class=\"n\">f8</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"w\">       </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x3fffffff</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">87</span>:   <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">       </span><span class=\"n\">jne</span><span class=\"w\">    </span><span class=\"mi\">6</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mh\">0x1d</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li><code>Wasmtime</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea\">https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea</a> (build release version)</li>\n<li><code>WasmEdge</code>: 7d4213b3abd5360c88e9120c3bc68ffd9b8a6870</li>\n<li>kernel version: Linux 5.15.0-83-generic</li>\n</ul>\n</blockquote>",
        "id": 400931977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699445794
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7495\">issue #7495</a>:</p>\n<blockquote>\n<p>Hi, I run the following case in <code>Wasmtime</code> and <code>WasmEdge</code> respectively and I find that the execution time of Wasmtime is almost 6x slower than which of WasmEdge(measured by time tool).</p>\n<ul>\n<li><code>Wasmtime</code>: 4.08s</li>\n<li><code>WasmEdge</code>: 0.66s</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_snapshot_preview1\"</span> <span class=\"s2\">\"proc_exit\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">2</span>\n    <span class=\"nb\">global.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">31</span>\n    <span class=\"nb\">i32.and</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">local</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"c1\">;; First Loop</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\">;; Second Loop</span>\n    <span class=\"k\">loop</span>  <span class=\"c1\">;; label = @6</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">global.get</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.store</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">2</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">local.tee</span> <span class=\"mi\">5</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">255</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.load</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">4</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">local.get</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n      <span class=\"nb\">i32.add</span>\n      <span class=\"nb\">local.set</span> <span class=\"mi\">3</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.and</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mf\">0x3FFFFFFF</span>\n      <span class=\"nb\">i32.ne</span>\n      <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@6;)</span>\n    <span class=\"k\">end</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">6 6</span> <span class=\"k\">funcref</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">8192</span> <span class=\"mf\">8192</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">5246560</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">615098409</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"__indirect_function_table\"</span> <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n</code></pre></div>\n<h3>Try to debug</h3>\n<p>I dump the corresponding machine code generated by <code>Wasmtime</code> and <code>WasmEdge</code>, I find that there is something strange with the machine code generated by <code>Wasmtime</code>,<br>\n1. the first loop in the above <code>wat</code> will be compiled to <code>64-6f</code>(I guess that), but actually the first time the <code>jne</code> instruction is executed, the loop will be jumped out of, but <code>%ecx</code> will be added 1.<br>\n2. In the second loop, <code>mov  %r8d,(%rax,%rcx,1)</code> is also strange. Because the variables used in these two loops don't have data dependence.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Machine code generated by Wasmtime</span>\n\n<span class=\"m\">64</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>c9<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%ecx,%ecx\n<span class=\"m\">66</span>:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>db<span class=\"w\">                </span>xor<span class=\"w\">    </span>%r11d,%r11d\n<span class=\"m\">69</span>:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c1<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%ecx\n6c:<span class=\"w\"> </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>db<span class=\"w\">                </span><span class=\"nb\">test</span><span class=\"w\">   </span>%r11d,%r11d\n6f:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>f1<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">66</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x16&gt;\n\n<span class=\"m\">75</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">77</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n7e:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e1<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>xff,%ecx\n<span class=\"m\">84</span>:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">87</span><span class=\"w\"> </span>a0<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0xa0<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%r8d\n8b:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">04</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>%r8d,<span class=\"o\">(</span>%rax,%rcx,1<span class=\"o\">)</span>\n8f:<span class=\"w\"> </span><span class=\"m\">44</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%r8d\n<span class=\"m\">92</span>:<span class=\"w\"> </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"m\">95</span>:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e0<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\n9c:<span class=\"w\"> </span><span class=\"m\">83</span><span class=\"w\"> </span>c2<span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>add<span class=\"w\">    </span><span class=\"nv\">$0</span>x1,%edx\n9f:<span class=\"w\"> </span><span class=\"m\">41</span><span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">    </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%r8d\na6:<span class=\"w\"> </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span>d8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">84</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x34&gt;\n\n\n<span class=\"c1\"># Machine code generated by WasmEdge</span>\n<span class=\"m\">60</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rax\n<span class=\"m\">63</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>4f<span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rcx\n<span class=\"m\">67</span>:<span class=\"w\"> </span><span class=\"m\">31</span><span class=\"w\"> </span>d2<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%edx,%edx\n<span class=\"m\">69</span>:<span class=\"w\"> </span>0f<span class=\"w\"> </span>1f<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>nopl<span class=\"w\">   </span>0x0<span class=\"o\">(</span>%rax<span class=\"o\">)</span>\n<span class=\"m\">70</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">71</span><span class=\"w\"> </span><span class=\"m\">08</span><span class=\"w\">             </span>mov<span class=\"w\">    </span>0x8<span class=\"o\">(</span>%rcx<span class=\"o\">)</span>,%rsi\n<span class=\"m\">74</span>:<span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">36</span><span class=\"w\">                   </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rsi<span class=\"o\">)</span>,%esi\n<span class=\"m\">76</span>:<span class=\"w\"> </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span><span class=\"m\">38</span><span class=\"w\">                </span>mov<span class=\"w\">    </span><span class=\"o\">(</span>%rax<span class=\"o\">)</span>,%rdi\n<span class=\"m\">79</span>:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span><span class=\"m\">77</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>mov<span class=\"w\">    </span>%esi,0x1<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n7c:<span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">72</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">                </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%rdx<span class=\"o\">)</span>,%esi\n7f:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>e2<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>and<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n<span class=\"m\">85</span>:<span class=\"w\"> </span><span class=\"m\">81</span><span class=\"w\"> </span>fa<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>3f<span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>x3fffffff,%edx\n8b:<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>f2<span class=\"w\">                   </span>mov<span class=\"w\">    </span>%esi,%edx\n8d:<span class=\"w\"> </span><span class=\"m\">75</span><span class=\"w\"> </span>e1<span class=\"w\">                   </span>jne<span class=\"w\">    </span><span class=\"m\">70</span><span class=\"w\"> </span>&lt;f2+0x10&gt;\n</code></pre></div>\n<p>I try to remove the first loop in the above <code>wat</code> and the genrated codes are a little different,<br>\n1. <code>mov  %r8d,(%rax,%rcx,1)</code> in the above version becomes <code>mov    %eax,(%rsi)</code><br>\n2. <code>mov    (%rax),%r8d</code>  in the above version disappeared.</p>\n<p>So I think Cranelift generates wrong machine code which will result in wrong behaviors and further causes poor performance.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mi\">64</span>:   <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                   </span><span class=\"n\">xor</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">ecx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ecx</span>\n<span class=\"w\">  </span><span class=\"mi\">66</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">b7</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x80</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n\n<span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"n\">d</span>:   <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">87</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">       </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0xa0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">73</span>:   <span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">06</span><span class=\"w\">                   </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">75</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">c8</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"mi\">78</span>:   <span class=\"mi\">81</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"w\">       </span><span class=\"n\">and</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x3fffffff</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"n\">e</span>:   <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">                </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">ecx</span>\n<span class=\"w\">  </span><span class=\"mi\">81</span>:   <span class=\"mi\">81</span><span class=\"w\"> </span><span class=\"n\">f8</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"w\">       </span><span class=\"n\">cmp</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x3fffffff</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"mi\">87</span>:   <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">85</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">       </span><span class=\"n\">jne</span><span class=\"w\">    </span><span class=\"mi\">6</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mh\">0x1d</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<ul>\n<li><code>Wasmtime</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea\">https://github.com/bytecodealliance/wasmtime/commit/e0bfa7336de20f76048edbdc0157ee637a2c5fea</a> (build release version)</li>\n<li><code>WasmEdge</code>: 7d4213b3abd5360c88e9120c3bc68ffd9b8a6870</li>\n<li>kernel version: Linux 5.15.0-83-generic</li>\n</ul>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/13297804/case.zip\">case.zip</a></p>\n</blockquote>",
        "id": 400956094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699453866
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7495#issuecomment-1802673601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7495\">issue #7495</a>:</p>\n<blockquote>\n<p>This is the output of VTune for me:</p>\n<p>&lt;img width=\"1193\" alt=\"Screenshot 2023-11-08 at 3 04 06 PM\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/64996/c9e0f911-5752-4334-b47b-755e4234537d\">https://github.com/bytecodealliance/wasmtime/assets/64996/c9e0f911-5752-4334-b47b-755e4234537d</a>\"&gt;</p>\n<p>which seems to point the smoking gun at \"Loads Blocked by Store Forwarding\"</p>\n<p>For instructions I got:</p>\n<p>&lt;img width=\"1273\" alt=\"Screenshot 2023-11-08 at 3 04 54 PM\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/64996/c60a113e-38c3-423a-925d-82d9e003d7a5\">https://github.com/bytecodealliance/wasmtime/assets/64996/c60a113e-38c3-423a-925d-82d9e003d7a5</a>\"&gt;</p>\n<p>Cranelift/Wasmtime emit a load-store-load whereas LLVM/WasmEdge seem to emit a load-load-store which probably doesn't break load-store forwarding would be my guess. </p>\n<p>I have not dug further yet at this time. I don't think Cranelift is generating wrong code here, and I have not dug into why removing the loop affects things.</p>\n</blockquote>",
        "id": 401023150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699477580
    }
]