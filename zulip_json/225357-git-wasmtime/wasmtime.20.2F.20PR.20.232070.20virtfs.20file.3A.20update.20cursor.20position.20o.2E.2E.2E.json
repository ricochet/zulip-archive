[
    {
        "content": "<p>ueno opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205051564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595768863
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a>.</p>",
        "id": 205051665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595769002
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> and <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a>.</p>",
        "id": 205051683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595769022
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205052117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595769837
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205052853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595770937
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205059796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595783811
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205062628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595788947
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205064423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595792240
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205064659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595792727
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n</blockquote>",
        "id": 205080210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595822418
    },
    {
        "content": "<p>ueno edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205081894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595825810
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205082038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595826023
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455512506\">PR Review</a>.</p>",
        "id": 205090358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455512506\">PR Review</a>.</p>",
        "id": 205090359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460682186\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would you mind extracting this out into a temp variable such as <code>let nread = ...</code> and then doing an assertion <code>assert_eq!(nread, buffer.len(), ...)</code>? This hopefully should aid readability.</p>\n</blockquote>",
        "id": 205090360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460681312\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would you mind tweaking the message here to \"seeking to the beginning of the file again\" or something like this? This should help in debugging especially in the CI should we introduce a regression at some point in the future.</p>\n</blockquote>",
        "id": 205090361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460685397\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In case <code>types::Filesize</code> ever changes its ABI from <code>u64</code> into something different, would you mind using <code>From</code> trait to do the cast here: <code>read_total.into()</code> or <code>u64::from(read_total)</code>?</p>\n</blockquote>",
        "id": 205090362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460685623\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Like above, if you could tweak this to use the <code>From</code> trait instead of using an explicit <code>as</code> cast.</p>\n</blockquote>",
        "id": 205090363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460680753\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is there any reason for this name change?</p>\n</blockquote>",
        "id": 205090364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460714089\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this should either be <code>EFAULT</code> or <code>ENOMEM</code>. The former seems to be accurate for Linux, while the latter for macOS (and probably BSDs in general). But to get another pair of eyes on this, @sunfishcode could you offer some advice here please?</p>\n</blockquote>",
        "id": 205090365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595837029
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205094193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595840583
    },
    {
        "content": "<p>ueno submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455605686\">PR Review</a>.</p>",
        "id": 205094589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595840883
    },
    {
        "content": "<p>ueno created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460751417\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is just for consistency; in other tests such as <code>fd_flags_set.rs</code> or <code>file_truncate.rs</code>, \"buffer\" (or \"buf\") is used as a name of mutable buffers, and immutable buffers are called \"data\" or \"contents\". As we call <code>fd_read</code> below and need to assign a name to the immutable buffer, I thought it might be less confusing to follow the convention.</p>\n</blockquote>",
        "id": 205094593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595840883
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455606882\">PR Review</a>.</p>",
        "id": 205094678,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595840987
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460752372\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Huh, I didn't know we had a convention for this, but this makes sense! I'll make sure that we keep it that way from now on. Thanks!</p>\n</blockquote>",
        "id": 205094679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595840987
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205096558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595842486
    },
    {
        "content": "<p>ueno submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455628261\">PR Review</a>.</p>",
        "id": 205096974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595842760
    },
    {
        "content": "<p>ueno created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460769274\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since there is no auto conversion from <code>usize</code> to <code>u64</code>, I added a temporary variable with type annotation and used <code>try_into</code>, but I suppose there is a simpler solution.</p>\n<p>Btw, while doing that I also noticed <code>fd_pwrite</code> has the same issue, so I included a fix for that as well.</p>\n</blockquote>",
        "id": 205096975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595842760
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205098363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595843662
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205100925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595845512
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455680545\">PR Review</a>.</p>",
        "id": 205103460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595847607
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460811191\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@ueno could you replace this <code>as</code> cast with <code>TryInto</code> as well here?</p>\n</blockquote>",
        "id": 205103462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595847607
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205107334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595850730
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205113282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595854782
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455872483\">PR Review</a>.</p>",
        "id": 205128737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595862388
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460959918\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would you mind linking in <a href=\"https://github.com/rust-lang/rust/issues/74825\">rust-lang/rust#74825</a> for posterity?</p>\n</blockquote>",
        "id": 205128738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595862388
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-455872643\">PR Review</a>.</p>",
        "id": 205128756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595862398
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r460960065\">PR Review Comment</a>:</p>\n<blockquote>\n<p>And here?</p>\n</blockquote>",
        "id": 205128757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595862398
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205129702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595862830
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-456134282\">PR Review</a>.</p>",
        "id": 205168130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595883894
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r461169202\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Looking at POSIX, this looks like more of an <code>EINVAL</code> situation than <code>EFAULT</code>.</p>\n<p><a href=\"https://pubs.opengroup.org/onlinepubs/009695399/functions/pread.html\">https://pubs.opengroup.org/onlinepubs/009695399/functions/pread.html</a></p>\n<p><code>EINVAL</code> is for \"the offset argument is not valid\".</p>\n</blockquote>",
        "id": 205168131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595883894
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205200919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595916369
    },
    {
        "content": "<p>ueno submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-456326389\">PR Review</a>.</p>",
        "id": 205200935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595916404
    },
    {
        "content": "<p>ueno created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#discussion_r461339358\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thank you for the pointer; I've updated it to using <code>EINVAL</code>.</p>\n</blockquote>",
        "id": 205200936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595916404
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205202826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595919012
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205204802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595921381
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070#pullrequestreview-456453386\">PR Review</a>.</p>",
        "id": 205213518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595927905
    },
    {
        "content": "<p>ueno updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a> from <code>wip/dueno/fd-read-virtfs</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a handle is backed by <code>InMemoryFile</code>, <code>fd_read</code> (turned into <code>Handle::read_vectored</code>) doesn't update the cursor position properly and thus prevents the caller from detecting EOF.</p>\n<p>This also fixes a similar issue in <code>fd_pread</code>, which doesn't advance the read offset when reading data into multiple iovecs.</p>\n</blockquote>",
        "id": 205231972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595941475
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2070\">PR #2070</a>.</p>",
        "id": 205348582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596025159
    }
]