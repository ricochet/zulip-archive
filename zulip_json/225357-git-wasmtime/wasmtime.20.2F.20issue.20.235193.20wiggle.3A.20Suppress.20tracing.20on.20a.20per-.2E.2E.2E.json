[
    {
        "content": "<p>joeshaw opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5193\">issue #5193</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For functions that may pass sensitive information (think secrets), we should have the ability to suppress tracing of those functions.</p>\n<h4>Implementation</h4>\n<p>I have an implementation (which I'll open a PR with) which replaces the newly-added <code>tracing</code> boolean flag to the <code>from_witx!</code> macro with one called <code>suppress_tracing</code> which has a format equivalent to the existing <code>async</code> flag.  In other words, you can match everything by setting it to <code>*</code> (the equivalent to <code>tracing: false</code> now), or you can specify a list of identifiers in braces to disable logging for certain functions.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module1</span>::<span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module2</span>::<span class=\"n\">another_func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We can reuse the existing <code>AsyncConfField</code> and <code>AsyncFunctions</code> types for this, so I have renamed them to be more general in my implementation.</p>\n<h4>Alternatives</h4>\n<p>I had originally implemented this alongside the existing <code>tracing</code> flag, and we could continue to have that one if it's important for usability or backward compatibility.  But as I was implementing it it seems odd to have both since there was a lot of overlap, and the <code>async</code> implementation fit it nicely.</p>\n<p>It's a bit negatory -- \"suppress_tracing\" -- which I don't love in an API but I think is necessary because you'll generally want to select specific sensitive functions that you don't want to trace.  In the implementation I flip the meaning so there isn't negation-of-negation.<br>\n</p>\n</blockquote>",
        "id": 307836161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667508501
    },
    {
        "content": "<p>pchickey assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5193\">issue #5193</a> (assigned to pchickey):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For functions that may pass sensitive information (think secrets), we should have the ability to suppress tracing of those functions.</p>\n<h4>Implementation</h4>\n<p>I have an implementation (which I'll open a PR with) which replaces the newly-added <code>tracing</code> boolean flag to the <code>from_witx!</code> macro with one called <code>suppress_tracing</code> which has a format equivalent to the existing <code>async</code> flag.  In other words, you can match everything by setting it to <code>*</code> (the equivalent to <code>tracing: false</code> now), or you can specify a list of identifiers in braces to disable logging for certain functions.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module1</span>::<span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module2</span>::<span class=\"n\">another_func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We can reuse the existing <code>AsyncConfField</code> and <code>AsyncFunctions</code> types for this, so I have renamed them to be more general in my implementation.</p>\n<h4>Alternatives</h4>\n<p>I had originally implemented this alongside the existing <code>tracing</code> flag, and we could continue to have that one if it's important for usability or backward compatibility.  But as I was implementing it it seems odd to have both since there was a lot of overlap, and the <code>async</code> implementation fit it nicely.</p>\n<p>It's a bit negatory -- \"suppress_tracing\" -- which I don't love in an API but I think is necessary because you'll generally want to select specific sensitive functions that you don't want to trace.  In the implementation I flip the meaning so there isn't negation-of-negation.<br>\n</p>\n</blockquote>",
        "id": 307837721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667509048
    },
    {
        "content": "<p>pchickey unassigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5193\">issue #5193</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For functions that may pass sensitive information (think secrets), we should have the ability to suppress tracing of those functions.</p>\n<h4>Implementation</h4>\n<p>I have an implementation (which I'll open a PR with) which replaces the newly-added <code>tracing</code> boolean flag to the <code>from_witx!</code> macro with one called <code>suppress_tracing</code> which has a format equivalent to the existing <code>async</code> flag.  In other words, you can match everything by setting it to <code>*</code> (the equivalent to <code>tracing: false</code> now), or you can specify a list of identifiers in braces to disable logging for certain functions.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module1</span>::<span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module2</span>::<span class=\"n\">another_func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We can reuse the existing <code>AsyncConfField</code> and <code>AsyncFunctions</code> types for this, so I have renamed them to be more general in my implementation.</p>\n<h4>Alternatives</h4>\n<p>I had originally implemented this alongside the existing <code>tracing</code> flag, and we could continue to have that one if it's important for usability or backward compatibility.  But as I was implementing it it seems odd to have both since there was a lot of overlap, and the <code>async</code> implementation fit it nicely.</p>\n<p>It's a bit negatory -- \"suppress_tracing\" -- which I don't love in an API but I think is necessary because you'll generally want to select specific sensitive functions that you don't want to trace.  In the implementation I flip the meaning so there isn't negation-of-negation.<br>\n</p>\n</blockquote>",
        "id": 307837909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667509105
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5193\">issue #5193</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>For functions that may pass sensitive information (think secrets), we should have the ability to suppress tracing of those functions.</p>\n<h4>Implementation</h4>\n<p>I have an implementation (which I'll open a PR with) which replaces the newly-added <code>tracing</code> boolean flag to the <code>from_witx!</code> macro with one called <code>suppress_tracing</code> which has a format equivalent to the existing <code>async</code> flag.  In other words, you can match everything by setting it to <code>*</code> (the equivalent to <code>tracing: false</code> now), or you can specify a list of identifiers in braces to disable logging for certain functions.</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wiggle</span>::<span class=\"n\">from_witx</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">suppress_tracing</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module1</span>::<span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module2</span>::<span class=\"n\">another_func</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">witx</span>: <span class=\"p\">[</span><span class=\"s\">\"...\"</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We can reuse the existing <code>AsyncConfField</code> and <code>AsyncFunctions</code> types for this, so I have renamed them to be more general in my implementation.</p>\n<h4>Alternatives</h4>\n<p>I had originally implemented this alongside the existing <code>tracing</code> flag, and we could continue to have that one if it's important for usability or backward compatibility.  But as I was implementing it it seems odd to have both since there was a lot of overlap, and the <code>async</code> implementation fit it nicely.</p>\n<p>It's a bit negatory -- \"suppress_tracing\" -- which I don't love in an API but I think is necessary because you'll generally want to select specific sensitive functions that you don't want to trace.  In the implementation I flip the meaning so there isn't negation-of-negation.<br>\n</p>\n</blockquote>",
        "id": 308175037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667673071
    }
]