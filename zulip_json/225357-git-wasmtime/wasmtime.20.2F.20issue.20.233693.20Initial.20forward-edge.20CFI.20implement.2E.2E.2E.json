[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1117346040\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 281158442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651672612
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1117624403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>Note that the <code>region</code> crate lacks support for BTI (reported in <a href=\"https://github.com/darfink/region-rs/issues/21\">darfink/region-rs#21</a>), so I have used a work-around - a direct call to <code>libc::mprotect()</code>.</p>\n</blockquote>",
        "id": 281191673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651685842
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1164184960\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>@alexcrichton I added you as reviewer for the Wasmtime bits.</p>\n</blockquote>",
        "id": 287165457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977221
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216635867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>@alexcrichton I wanted to finish with the pointer authentication PR before coming back to this one:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* If a module is compiled with bti support and loaded into an engine that has bti support disabled, that&#39;s fine right? (since everything is a nop)\n</code></pre></div>\n\n</blockquote>\n<p>Yes, that is correct; we just have to make sure that we do not request the <code>PROT_BTI</code> memory protection mode from the kernel, since the system call is going to fail.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* If a module is not compiled with bti support, but is loaded into an engine with bti support, that&#39;s bad right? (in that none of the branches are protected but the page permissions say that all branches need protection?)\n</code></pre></div>\n\n</blockquote>\n<p>Yes, assuming that the engine applies <code>PROT_BTI</code> unconditionally to all executable memory pages.</p>\n<p>The current implementation supports the full flexibility the BTI extension enables, so we have to decouple the following:</p>\n<ul>\n<li>whether the user passed <code>--cranelift-enable use_bti</code> on the Wasmtime command line</li>\n<li>whether the environment (i.e. CPU and OS) supports BTI</li>\n<li>whether the module that the engine is trying to load has been compiled to use BTI instructions; also, if I am not mistaken, the engine could be trying to load several modules, which might not necessarily have been compiled with the same settings</li>\n</ul>\n</blockquote>",
        "id": 293717919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660656332
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the cranelift JIT to run runtests so we can also test the JIT portion of this PR.</p>\n<p>We don't yet support <code>call</code>s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n</blockquote>",
        "id": 293728150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660659904
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the cranelift JIT to run runtests so we can also test the <code>cranelift-jit</code> portion of this PR.</p>\n<p>We don't yet support <code>call</code>s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n</blockquote>",
        "id": 293728187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660659920
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the cranelift JIT to run runtests so we can also test the <code>cranelift-jit</code> portion of this PR.</p>\n<p>We don't yet support <code>call</code>'s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n</blockquote>",
        "id": 293728196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660659927
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the <code>cranelift-jit</code> to run runtests so we can also test the <code>cranelift-jit</code> portion of this PR.</p>\n<p>We don't yet support <code>call</code>'s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n</blockquote>",
        "id": 293729139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660198
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the <code>cranelift-jit</code> to run runtests so we can also test the <code>cranelift-jit</code> portion of this PR.</p>\n<p>We don't yet support <code>call</code>'s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n<p>Also, should we add <code>bti</code> detection in <code>cranelift-native</code>?</p>\n</blockquote>",
        "id": 293729520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660308
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1216710905\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>We should add a <code>target aarch64 use_bti</code> to <code>runtests/br_table.clif</code>, we now use the <code>cranelift-jit</code> to run runtests so we can also test the <code>cranelift-jit</code> portion of this PR.</p>\n<p>We don't yet support <code>call</code>'s, but that's something I'm addressing in #4667, and can add some bti runtests there as well.</p>\n</blockquote>",
        "id": 293729702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660660362
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1217121327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>Ah sorry ok I see why this can't be an <code>Engine</code>-level thing. If that's the case though instead of ferrying a separate <code>bool</code> through the system could this get attached to <code>CompiledModuleInfo</code> somewhere internally? </p>\n</blockquote>",
        "id": 293794076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660681387
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693#issuecomment-1222265028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3693\">issue #3693</a>:</p>\n<blockquote>\n<p>@cfallin I think that I have resolved all of @alexcrichton's comments that are related to Wasmtime, so do you have any feedback on the Cranelift side of things?</p>\n</blockquote>",
        "id": 294661498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661170081
    }
]