[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a> from <code>afonso360:riscv-tls-2</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements ELF TLS GD relocations in the RISC-V backend. This is required to get the `rustc_codegen_cranelift``'s testsuite passing on this architecture.</p>\n<p>The TLS GD model for RISC-V works slightly differently from the rest of the existing architectures. Usually you have 2 or 3 relocations pointing to a symbol and then a call to <code>__tls_get_addr</code>. RISC-V however has one relocation pointing to the symbol in a <code>auipc</code> instruction, and then a relocation pointing to a label in that <code>auipc</code> instruction, not the final symbol itself.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">label:</span>\n<span class=\"w\">    </span><span class=\"nf\">auipc</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                    </span><span class=\"c1\"># R_RISCV_TLS_GD_HI20 (symbol)</span>\n<span class=\"w\">    </span><span class=\"nf\">addi</span><span class=\"w\">  </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                 </span><span class=\"c1\"># R_RISCV_PCREL_LO12_I (label)</span>\n<span class=\"w\">    </span><span class=\"nf\">call</span><span class=\"w\"> </span><span class=\"no\">__tls_get_addr@plt</span>\n</code></pre></div>\n<p>This presents a problem as we currently don't have a way to export labels into the final binary, or a way to target labels with relocations.</p>\n<p>Most of this PR is dealing with that issue. In the first commit I've introduced a notion of label visibility that allows a label to be marked as public, and if so, be carried all the way through to binary object emission.</p>\n<p>Secondly is altering our allowed relocation targets. Currently we only allow external names, such as libcalls or other functions. I've altered this to allow targeting other labels within the function.</p>\n<p>Only the final commit deals with implementing the TLS GD relocations in the RISC-V backend.</p>\n<hr>\n<p>This doesn't have a great deal of tests as its quite difficult to test these kinds of binary emissions. But I've manually tested this by running <code>cg_clif</code>'s testsuite.</p>\n<p>CC: @bjorn3 </p>\n</blockquote>",
        "id": 390506364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694520848
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 390506367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694520849
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 390506368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694520849
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements ELF TLS GD relocations in the RISC-V backend. This is required to get the <code>rustc_codegen_cranelift</code>'s testsuite passing on this architecture.</p>\n<p>The TLS GD model for RISC-V works slightly differently from the rest of the existing architectures. Usually you have 2 or 3 relocations pointing to a symbol and then a call to <code>__tls_get_addr</code>. RISC-V however has one relocation pointing to the symbol in a <code>auipc</code> instruction, and then a relocation pointing to a label in that <code>auipc</code> instruction, not the final symbol itself.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">label:</span>\n<span class=\"w\">    </span><span class=\"nf\">auipc</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                    </span><span class=\"c1\"># R_RISCV_TLS_GD_HI20 (symbol)</span>\n<span class=\"w\">    </span><span class=\"nf\">addi</span><span class=\"w\">  </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                 </span><span class=\"c1\"># R_RISCV_PCREL_LO12_I (label)</span>\n<span class=\"w\">    </span><span class=\"nf\">call</span><span class=\"w\"> </span><span class=\"no\">__tls_get_addr@plt</span>\n</code></pre></div>\n<p>This presents a problem as we currently don't have a way to export labels into the final binary, or a way to target labels with relocations.</p>\n<p>Most of this PR is dealing with that issue. In the first commit I've introduced a notion of label visibility that allows a label to be marked as public, and if so, be carried all the way through to binary object emission.</p>\n<p>Secondly is altering our allowed relocation targets. Currently we only allow external names, such as libcalls or other functions. I've altered this to allow targeting other labels within the function.</p>\n<p>Only the final commit deals with implementing the TLS GD relocations in the RISC-V backend.</p>\n<hr>\n<p>This doesn't have a great deal of tests as its quite difficult to test these kinds of binary emissions. But I've manually tested this by running <code>cg_clif</code>'s testsuite.</p>\n<p>CC: @bjorn3 </p>\n</blockquote>",
        "id": 390506403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694520862
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements ELF TLS GD relocations in the RISC-V backend. This is required to get the <code>rustc_codegen_cranelift</code>'s testsuite passing on this architecture.</p>\n<p>The TLS GD model for RISC-V works slightly differently from the rest of the existing architectures. Usually you have 2 or 3 relocations pointing to a symbol and then a call to <code>__tls_get_addr</code>. RISC-V however has one relocation pointing to the symbol in a <code>auipc</code> instruction, and then a relocation pointing to a label in that <code>auipc</code> instruction, not the final symbol itself.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">label:</span>\n<span class=\"w\">    </span><span class=\"nf\">auipc</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                    </span><span class=\"c1\"># R_RISCV_TLS_GD_HI20 (symbol)</span>\n<span class=\"w\">    </span><span class=\"nf\">addi</span><span class=\"w\">  </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                 </span><span class=\"c1\"># R_RISCV_PCREL_LO12_I (label)</span>\n<span class=\"w\">    </span><span class=\"nf\">call</span><span class=\"w\"> </span><span class=\"no\">__tls_get_addr@plt</span>\n</code></pre></div>\n<p>This presents a problem as we currently don't have a way to export labels into the final binary, or a way to target labels with relocations.</p>\n<p>Most of this PR is dealing with that issue. In the first commit I've introduced a notion of label visibility that allows a label to be marked as public, and if so, be carried all the way through to binary object emission.</p>\n<p>Secondly is altering our allowed relocation targets. Currently we only allow external names, such as libcalls or other functions. I've altered this to allow targeting other labels within the function.</p>\n<p>Only the final commit deals with implementing the TLS GD relocations in the RISC-V backend.</p>\n<hr>\n<p>I also considered implementing TLS descriptors, but their spec isn't finalized yet (<a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/94\">https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/94</a>)</p>\n<p>This doesn't have a great deal of tests as its quite difficult to test these kinds of binary emissions. But I've manually tested this by running <code>cg_clif</code>'s testsuite.</p>\n<p>CC: @bjorn3 </p>\n</blockquote>",
        "id": 390506585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694520926
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR implements ELF TLS GD relocations in the RISC-V backend. This is required to get the <code>rustc_codegen_cranelift</code>'s testsuite passing on this architecture.</p>\n<p>The <a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-elf.adoc#global-dynamic\">TLS GD model for RISC-V</a> works slightly differently from the rest of the existing architectures. Usually you have 2 or 3 relocations pointing to a symbol and then a call to <code>__tls_get_addr</code>. RISC-V however has one relocation pointing to the symbol in a <code>auipc</code> instruction, and then a relocation pointing to a label in that <code>auipc</code> instruction, not the final symbol itself.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">label:</span>\n<span class=\"w\">    </span><span class=\"nf\">auipc</span><span class=\"w\"> </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                    </span><span class=\"c1\"># R_RISCV_TLS_GD_HI20 (symbol)</span>\n<span class=\"w\">    </span><span class=\"nf\">addi</span><span class=\"w\">  </span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"no\">a0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"w\">                 </span><span class=\"c1\"># R_RISCV_PCREL_LO12_I (label)</span>\n<span class=\"w\">    </span><span class=\"nf\">call</span><span class=\"w\"> </span><span class=\"no\">__tls_get_addr@plt</span>\n</code></pre></div>\n<p>This presents a problem as we currently don't have a way to export labels into the final binary, or a way to target labels with relocations.</p>\n<p>Most of this PR is dealing with that issue. In the first commit I've introduced a notion of label visibility that allows a label to be marked as public, and if so, be carried all the way through to binary object emission.</p>\n<p>Secondly is altering our allowed relocation targets. Currently we only allow external names, such as libcalls or other functions. I've altered this to allow targeting other labels within the function.</p>\n<p>Only the final commit deals with implementing the TLS GD relocations in the RISC-V backend.</p>\n<hr>\n<p>I also considered implementing TLS descriptors, but their spec isn't finalized yet (<a href=\"https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/94\">https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/94</a>)</p>\n<p>This doesn't have a great deal of tests as its quite difficult to test these kinds of binary emissions. But I've manually tested this by running <code>cg_clif</code>'s testsuite.</p>\n<p>CC: @bjorn3 </p>\n</blockquote>",
        "id": 390507311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694521184
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 390512981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694523000
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 390512982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694523000
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 390512983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694523000
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1625557597\">PR review</a>:</p>\n<blockquote>\n<p>ELF bits all look good to me (in that I'm assuming you're checking correctness and otherwise can confirm they're idiomatic for Cranelift)</p>\n<p>For the relocation/label bits I wrote out a suggestion below and am wondering if it can help simplify things a bit and keep <code>MachLabel</code> internal</p>\n</blockquote>",
        "id": 390814982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694645428
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1625557597\">PR review</a>:</p>\n<blockquote>\n<p>ELF bits all look good to me (in that I'm assuming you're checking correctness and otherwise can confirm they're idiomatic for Cranelift)</p>\n<p>For the relocation/label bits I wrote out a suggestion below and am wondering if it can help simplify things a bit and keep <code>MachLabel</code> internal</p>\n</blockquote>",
        "id": 390814983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694645428
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1325147669\">PR review comment</a>:</p>\n<blockquote>\n<p>A possible idea for this -- previously <code>MachLabel</code> was \"purely internal\" which I felt was a nice property about the type and its usage but this is causing it to \"leak\" from the compilation unit for public labels. That being said, labels are all fixed by the time a function finishes, so as a possible alternative could <code>Label(MachLabel)</code> be replaced with <code>Func(CodeOffset)</code>?</p>\n<p>That would represent how a relocation can be applied against the function itself, but it's a relative offset from the start of the function. That would avoid the need to export <code>MachLabel</code> and keeps it internal and avoids any need to perform lookups/translation from a label to an offset (e.g. no need for <code>MachLabelSite</code>). I think that should still be enough to bubble up to everyone processing <code>MachReloc</code> since they should have a handle on the location of the function in the final artifact?</p>\n</blockquote>",
        "id": 390814986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694645428
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1627368472\">PR review</a>.</p>",
        "id": 390982986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694710453
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1326265424\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think we can do that, since in the RISC-V backend we have to create a relocation to this label while the function is still being lowered, and if we just saved the offset it's possible that it could change later right? (I think this is the case, not 100% sure).</p>\n<p>I think we could maybe keep <code>RelocTarget</code> as is, but rename all the labels that are going to be published while finalizing. That way we keep <code>MachLabel</code> internal, and have a separate labeling scheme in <code>MachLabelFinalized</code> that is public. I think that could work, but it also means that we would have to:</p>\n<ul>\n<li>Renumber published labels (there shouldn't be many)</li>\n<li>Walk through all relocations and update them if they point to a label.<ul>\n<li>We can do this only if we have at least 1 published label, so we don't slow down the common case.<br>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 390982987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694710453
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1326265424\">PR review comment</a>.</p>",
        "id": 390983027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694710477
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1326265424\">PR review comment</a>.</p>",
        "id": 390983470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694710648
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1627629419\">PR review</a>.</p>",
        "id": 391006886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694720435
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1326437750\">PR review comment</a>:</p>\n<blockquote>\n<p>True! My thinking is:</p>\n<ul>\n<li><code>AddReloc</code> takes <code>ExternalName | MachLabel</code>, as you've done in this PR</li>\n<li>The concept of a public/private label goes away</li>\n<li>The <code>name</code> field of <code>MachReloc</code> would become <code>ExternalName | Func(CodeOffset)</code> </li>\n</ul>\n<p>Then during <code>MachBuffer::finish</code>, when all labels are known, the <code>MachBuffer::relocs</code> array is processed. This means that <code>MachBufferFinalized::relocs</code> would have a different type or alternatively the <code>relocs()</code> method would return <code>impl Iterator</code> which takes <code>MachBuffer::relocs</code> and then performs a mapping translating a <code>MachLabel</code> to a <code>Func(CodeOffset)</code></p>\n</blockquote>",
        "id": 391006887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694720435
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1326437750\">PR review comment</a>.</p>",
        "id": 391006914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694720446
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1628577045\">PR review</a>.</p>",
        "id": 391123238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694770358
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#discussion_r1327050528\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good, I'll do that</p>\n</blockquote>",
        "id": 391123239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694770358
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 391385894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694875777
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 391555328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694976551
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 391563597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694979472
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003#pullrequestreview-1631163097\">PR review</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 391708313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695046084
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7003\">PR #7003</a>.</p>",
        "id": 391724583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695050743
    }
]