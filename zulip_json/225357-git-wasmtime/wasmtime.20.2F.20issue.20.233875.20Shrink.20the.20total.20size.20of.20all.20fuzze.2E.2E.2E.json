[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875\">issue #3875</a>:</p>\n<blockquote>\n<p>I ended up going down a pretty long rabbit hole this morning for a number of reasons around our fuzzers. The main conclusion I reached so far is that Wasmtime's fuzzing on oss-fuzz has stopped as of 2022-02-24, which is about a week ago at this point. After <a href=\"https://github.com/google/oss-fuzz/issues/7353\">talking with the oss-fuzz folks</a> the conclusion is that the likely cause of this is that the size of all of Wasmtime's compiled fuzzers is too large and exceeds the disk space capacity of the machines running the fuzzers. A local build of the oss-fuzz image shows that Wasmtime produces ~6.8G of fuzzers as of right-this-red-hot-second.</p>\n<p>The easiest fix to apply for now is to <a href=\"https://github.com/google/oss-fuzz/pull/7354\">pass the <code>--strip-dead-code</code> option</a> to <code>cargo fuzz</code>, which disables passing <code>-Clink-dead-code</code> which greatly reduces the size of the output directory to 3.4G (~50% reduction). This should hopefully buy us some runway. According to <a href=\"https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0\">this</a> linking dead code is intentional and fixes some errors printed out by libfuzzer, but locally I was unable to reproduce those errors and <a href=\"https://github.com/rust-fuzz/cargo-fuzz/pull/260\">given the recent introduction of the <code>--strip-dead-code-flag</code></a> it seems like it at least works for others, so I'm hopeful that passing this flag will not impact the actual fuzzing process.</p>\n<p>In any case though I consider the <code>--strip-dead-code</code> argument to be more of a quick fix than a permanent solution. This will continue to limit our ability to add more fuzzers since each new fuzzers is hundreds of megabytes as it statically links all of Wasmtime. My proposed solution to this is to instead have a scheme where the <code>wasmtime_fuzzing</code> crate is built as a <code>dylib</code> (Rust crate type) which all the fuzzers then link to. Each fuzzer would then individually be quite small and we'd only have one copy of Wasmtime on disk for the build artifacts, probably reducing the output size by another 2-3G or so. There's some <a href=\"https://google.github.io/oss-fuzz/further-reading/fuzzer-environment/#runtime-dependencies\">documentation online</a> about how we need to be careful about dynamic library dependencies for the fuzzer, but that shouldn't be too hard to codify.</p>\n<p>Overall I think this is something we need to fix before adding more fuzzers, but for the time being if <a href=\"https://github.com/google/oss-fuzz/pull/7354\">https://github.com/google/oss-fuzz/pull/7354</a> works then we don't need to fix this immediately because we'll be back to fuzzing and have a good deal of headroom since we're 50% of the limit.</p>\n</blockquote>",
        "id": 273869910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646252019
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875\">issue #3875</a>:</p>\n<blockquote>\n<p>I ended up going down a pretty long rabbit hole this morning for a number of reasons around our fuzzers. The main conclusion I reached so far is that Wasmtime's fuzzing on oss-fuzz has stopped as of 2022-02-24, which is about a week ago at this point. After <a href=\"https://github.com/google/oss-fuzz/issues/7353\">talking with the oss-fuzz folks</a> the conclusion is that the likely cause of this is that the size of all of Wasmtime's compiled fuzzers is too large and exceeds the disk space capacity of the machines running the fuzzers. A local build of the oss-fuzz image shows that Wasmtime produces ~6.8G of fuzzers as of right-this-red-hot-second.</p>\n<p>The easiest fix to apply for now is to <a href=\"https://github.com/google/oss-fuzz/pull/7354\">pass the <code>--strip-dead-code</code> option</a> to <code>cargo fuzz</code>, which disables passing <code>-Clink-dead-code</code> which greatly reduces the size of the output directory to 3.4G (~50% reduction). This should hopefully buy us some runway. According to <a href=\"https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0\">this</a> linking dead code is intentional and fixes some errors printed out by libfuzzer, but locally I was unable to reproduce those errors and <a href=\"https://github.com/rust-fuzz/cargo-fuzz/pull/260\">given the recent introduction of the <code>--strip-dead-code-flag</code></a> it seems like it at least works for others, so I'm hopeful that passing this flag will not impact the actual fuzzing process.</p>\n<p>In any case though I consider the <code>--strip-dead-code</code> argument to be more of a quick fix than a permanent solution. This will continue to limit our ability to add more fuzzers since each new fuzzers is hundreds of megabytes as it statically links all of Wasmtime. My proposed solution to this is to instead have a scheme where the <code>wasmtime_fuzzing</code> crate is built as a <code>dylib</code> (Rust crate type) which all the fuzzers then link to. Each fuzzer would then individually be quite small and we'd only have one copy of Wasmtime on disk for the build artifacts, probably reducing the output size by another 2-3G or so. There's some <a href=\"https://google.github.io/oss-fuzz/further-reading/fuzzer-environment/#runtime-dependencies\">documentation online</a> about how we need to be careful about dynamic library dependencies for the fuzzer, but that shouldn't be too hard to codify.</p>\n<p>Overall I think this is something we need to fix before adding more fuzzers, but for the time being if <a href=\"https://github.com/google/oss-fuzz/pull/7354\">https://github.com/google/oss-fuzz/pull/7354</a> works then we don't need to fix this immediately because we'll be back to fuzzing and have a good deal of headroom since we're 50% of the limit.</p>\n</blockquote>",
        "id": 273869911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646252019
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875#issuecomment-1057338994\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875\">issue #3875</a>:</p>\n<blockquote>\n<p>Oh some more information on why this hit us now: I believe this all boils down to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3836\">https://github.com/bytecodealliance/wasmtime/pull/3836</a> which was merged the day before we stopped having fuzzers run on oss-fuzz. By linking dead code in to all binaries the way that PR is architected the <code>wasm-mutate</code> crate is now linked into all of wasmtime's fuzzers, and the <code>wasm-mutate</code> crate is quite hefty at around 50MB or so. This means that when multiplied across all our fuzzers we must have _just_ gone over the size limit which means that all our fuzzing stopped after that. </p>\n<p>I actually confirmed this locally originally because my builds <a href=\"#narrow/stream/217126-wasmtime/topic/fuzzing.20and.20.60R_AARCH64_CALL26.60.20limits\">were all failing on arm64</a> due to the fuzzing builds being too large, and bisection pointed at #3836 as the point when fuzzers stopped building for me locally. Locally I was able to build on arm64 once I passed <code>--strip-dead-code</code>, however.</p>\n</blockquote>",
        "id": 273870276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646252235
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875#issuecomment-1057341127\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3875\">issue #3875</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 273870623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646252406
    }
]