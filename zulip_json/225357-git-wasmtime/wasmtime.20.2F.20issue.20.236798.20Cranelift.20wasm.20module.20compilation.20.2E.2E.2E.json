[
    {
        "content": "<p>TimonPost opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>We have noticed a recent regression in module compilation times on the MBP M1/M2. Sometimes it takes over 100 seconds when it used to take less than 15. </p>\n<p>&lt;img width=\"1325\" alt=\"image\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2</a>\"&gt;</p>\n<p>Several non-scientific numbers have been reported on various platforms. At first three individual Mac users started reporting extreme numbers, often exceeding +90 seconds, while Windows and Linux users report an average of around 50 seconds, with some reporting more normal numbers below 10 seconds. We have attempted to isolate the problem by manually clearing all caches and see how long it takes to recompile from scratch. </p>\n<p>Upon further profiling, it appears that the performance bottleneck is related to the \"cranelift\" library (see image). </p>\n<p>Any tips on how we can help find out the root cause here are appreciated. Are there perhaps benchmarks to run to see if regressions happened?</p>\n<p>Some non-scientific data:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">47</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">Gen</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"err\">®</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"err\">™</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"o\">-</span><span class=\"mi\">11800</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">15</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">12900</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">13900</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mf\">8.2</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">amd</span><span class=\"w\"> </span><span class=\"mi\">5950</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">45</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"n\">intel</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span>\n<span class=\"mi\">56</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">AMD</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">6900</span><span class=\"n\">HS</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">90</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">Mac</span><span class=\"w\"> </span><span class=\"n\">Pro</span><span class=\"w\"> </span><span class=\"n\">M1</span><span class=\"o\">/</span><span class=\"n\">M2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macos</span>\n</code></pre></div>\n<p>Perhaps introduced in v10.0.0 or v10.0.1, as we have not upgraded to 11 yet, and in 9.0.4 we fixed another module compilation issue and had not experienced any problems yet up till quite recently</p>\n</blockquote>",
        "id": 381407430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691053649
    },
    {
        "content": "<p>TimonPost closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>We have noticed a recent regression in module compilation times on the MBP M1/M2. Sometimes it takes over 100 seconds when it used to take less than 15. </p>\n<p>&lt;img width=\"1325\" alt=\"image\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2</a>\"&gt;</p>\n<p>Several non-scientific numbers have been reported on various platforms. At first three individual Mac users started reporting extreme numbers, often exceeding +90 seconds, while Windows and Linux users report an average of around 50 seconds, with some reporting more normal numbers below 10 seconds. We have attempted to isolate the problem by manually clearing all caches and see how long it takes to recompile from scratch. </p>\n<p>Upon further profiling, it appears that the performance bottleneck is related to the \"cranelift\" library (see image). </p>\n<p>Any tips on how we can help find out the root cause here are appreciated. Are there perhaps benchmarks to run to see if regressions happened?</p>\n<p>Some non-scientific data:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">47</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">Gen</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"err\">®</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"err\">™</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"o\">-</span><span class=\"mi\">11800</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">15</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">12900</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">13900</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mf\">8.2</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">amd</span><span class=\"w\"> </span><span class=\"mi\">5950</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">45</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"n\">intel</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span>\n<span class=\"mi\">56</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">AMD</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">6900</span><span class=\"n\">HS</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">90</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">Mac</span><span class=\"w\"> </span><span class=\"n\">Pro</span><span class=\"w\"> </span><span class=\"n\">M1</span><span class=\"o\">/</span><span class=\"n\">M2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macos</span>\n</code></pre></div>\n<p>Perhaps introduced in v10.0.0 or v10.0.1, as we have not upgraded to 11 yet, and in 9.0.4 we fixed another module compilation issue and had not experienced any problems yet up till quite recently</p>\n</blockquote>",
        "id": 381424769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691057069
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1663702818\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Going to gather more data to make this issue more useful </p>\n</blockquote>",
        "id": 381424894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691057099
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1663702818\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Going to gather some more data and reopen if I have more.</p>\n</blockquote>",
        "id": 381425318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691057187
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1664275282\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<blockquote>\n<p>Upon further profiling, it appears that the performance bottleneck is related to the \"cranelift\" library (see image).</p>\n</blockquote>\n<p>Indeed, Cranelift is the whole compiler, so it makes sense that \"slow compilation\" involves Cranelift!</p>\n<p>Thanks very much for the report; we definitely weren't aware of this. If you're able to bisect to a particular commit that would be really useful; otherwise, if you have an example wasm module that gets much slower to compile, that would be the next best thing.</p>\n</blockquote>",
        "id": 381543340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691079658
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1664382529\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>In addition to Chris' comments, here are a couple other thoughts:</p>\n<p>The profile shows a third of time is spent in emitting islands, which makes me think this module has some very large functions in it. That could explain some of the difference between targets: the threshold where a function is large enough to need islands is different on aarch64 than on x86.</p>\n<p>That said, I'm suspicious about the fact that different x86 systems have wildly different compile times too. It might be useful to run <code>wasmtime settings</code> on each x86 test system and see if there are differences in the \"Settings inferred for the current host:\" section. We could be hitting slow code paths that are only enabled when certain instruction-set features are present, or perhaps only when they're absent.</p>\n<p>To normalize timing measurements you can do all your tests on the same computer so you aren't comparing the performance of different CPUs. You can use <code>cargo build --features all-arch</code> to enable Wasmtime support for all architectures, or use the release artifacts from GitHub which are already built with that turned on. Then you can use <code>wasmtime compile --target x86_64</code> or <code>aarch64</code>. You may need to pass the various settings printed by <code>wasmtime settings</code> to the <code>--cranelift-enable</code> flag in order to get a fair comparison. I think there's also some magic when running on macOS but I can't find the details, so it might be easiest to run all the tests from your Mac Pro test system and cross-compile for x86.</p>\n</blockquote>",
        "id": 381567135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691084543
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Someone ran it on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and mean times per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381722282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691136369
    },
    {
        "content": "<p>TimonPost reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>We have noticed a recent regression in module compilation times on the MBP M1/M2. Sometimes it takes over 100 seconds when it used to take less than 15. </p>\n<p>&lt;img width=\"1325\" alt=\"image\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2</a>\"&gt;</p>\n<p>Several non-scientific numbers have been reported on various platforms. At first three individual Mac users started reporting extreme numbers, often exceeding +90 seconds, while Windows and Linux users report an average of around 50 seconds, with some reporting more normal numbers below 10 seconds. We have attempted to isolate the problem by manually clearing all caches and see how long it takes to recompile from scratch. </p>\n<p>Upon further profiling, it appears that the performance bottleneck is related to the \"cranelift\" library (see image). </p>\n<p>Any tips on how we can help find out the root cause here are appreciated. Are there perhaps benchmarks to run to see if regressions happened?</p>\n<p>Some non-scientific data:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">47</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">Gen</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"err\">®</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"err\">™</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"o\">-</span><span class=\"mi\">11800</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">15</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">12900</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">13900</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mf\">8.2</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">amd</span><span class=\"w\"> </span><span class=\"mi\">5950</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">45</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"n\">intel</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span>\n<span class=\"mi\">56</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">AMD</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">6900</span><span class=\"n\">HS</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">90</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">Mac</span><span class=\"w\"> </span><span class=\"n\">Pro</span><span class=\"w\"> </span><span class=\"n\">M1</span><span class=\"o\">/</span><span class=\"n\">M2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macos</span>\n</code></pre></div>\n<p>Perhaps introduced in v10.0.0 or v10.0.1, as we have not upgraded to 11 yet, and in 9.0.4 we fixed another module compilation issue and had not experienced any problems yet up till quite recently</p>\n</blockquote>",
        "id": 381722284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691136369
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Someone ran it on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and mean times per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381722398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691136385
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Other dev ran it twice on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and mean times per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381722529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691136416
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Other dev ran it twice on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">enforced</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and max time per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381723174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691136531
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Other dev ran it twice on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and max time per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381726943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691137178
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"mf\">11.0.1</span>\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"mf\">9.0.4</span>:\n<span class=\"nc\">x86_64</span>: <span class=\"mf\">11.2984875</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">147.1249103</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>There seems to be not much of a difference between wasmtime 9 and 11 <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Other dev ran it twice on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and max time per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381728545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691137409
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>To the above points I wrote a small program to compile a 115 MB <code>.wasm</code> file for both <code>x86_64</code> and <code>aarch64</code> and it's considerably slower on <code>aarch64</code>.</p>\n<h2>Use <code>wasmtime</code> to compile different targets</h2>\n<p>I build a script to test compiling our module and ran it three times on Windows 11 with AMD Ryzen 9 5900X 12-Core:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"mf\">11.0.1</span>\n<span class=\"n\">x86_64</span>: <span class=\"mf\">13.9465882</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.2770526</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">11.0808334</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">157.5406149</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1816011</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">144.1495896</span><span class=\"n\">s</span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"mf\">9.0.4</span>:\n<span class=\"nc\">x86_64</span>: <span class=\"mf\">11.2984875</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">147.1249103</span><span class=\"n\">s</span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"mf\">9.0</span>\n<span class=\"n\">x86_64</span>: <span class=\"mf\">11.0617372</span><span class=\"n\">s</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">159.7219714</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>There seems to be not much of a difference between wasmtime 9 and 11 <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Other dev ran it twice on Windows, Intel Core i7 9750H:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">settings</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx</span>\n<span class=\"w\">  </span><span class=\"n\">has_avx2</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi1</span>\n<span class=\"w\">  </span><span class=\"n\">has_bmi2</span>\n<span class=\"w\">  </span><span class=\"n\">has_fma</span>\n<span class=\"w\">  </span><span class=\"n\">has_lzcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_popcnt</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse3</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse41</span>\n<span class=\"w\">  </span><span class=\"n\">has_sse42</span>\n<span class=\"w\">  </span><span class=\"n\">has_ssse3</span>\n\n<span class=\"n\">x86_64</span>: <span class=\"mf\">23.5362889</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">24.3254295</span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"n\">aarch64</span>: <span class=\"mf\">211.1731269</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">207.9991321</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Macbook pro M1 (from 2 devs initially reporting the problem)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Settings</span><span class=\"w\"> </span><span class=\"n\">inferred</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">host</span>:\n  <span class=\"nc\">has_lse</span>\n<span class=\"w\">  </span><span class=\"n\">has_pauth</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address</span>\n<span class=\"w\">  </span><span class=\"n\">sign_return_address_with_bkey</span>\n</code></pre></div>\n<p>&lt;details&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">times</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">time</span>::<span class=\"n\">Duration</span><span class=\"p\">,</span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"aarch64\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"wasmtime\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"compile\"</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"--target={os}\"</span><span class=\"p\">)).</span><span class=\"n\">arg</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"path\\xxxxx.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">.</span><span class=\"n\">wait_with_output</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">times</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"sandbox-{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"[{:?}]: {os} ({})\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I also did some queries on how often a module is loaded (not compiled) over 50 seconds in production environments. Over the course of 2 months after my previous patch #6548, where it was almost gone, it came back. It is a bit harder to visualize it in relation to the total amounts of module loading to get a percentile, but it shows something is going on.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/0fab3df8-5507-4fdf-9328-8f7e6b9ad9b2</a>)</p>\n<p>And also a query on the median and max time per day it took for a module to load (not only compiled). </p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba\">https://github.com/bytecodealliance/wasmtime/assets/19969910/6e7f13e8-2183-4324-a64c-96f48985b9ba</a>)</p>\n<p>I can unfortunately not share the wasm module. </p>\n</blockquote>",
        "id": 381730594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691137722
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665539868\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Given this program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// number of functions</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// number of calls per function</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"(module\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"(func\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"call $f\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\")\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"(func $f)\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\")\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{s}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which generates a wasm via:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>I then can reproduce this issue I believe with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">wasmtime_linkopt_padding_between_functions</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\">  </span><span class=\"mf\">5.43</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">0.31</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">736</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">0.780</span><span class=\"w\"> </span><span class=\"n\">total</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">wasmtime_linkopt_padding_between_functions</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">cranelift</span><span class=\"o\">-</span><span class=\"n\">set</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\">  </span><span class=\"mf\">15.14</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"mf\">2.60</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"mi\">180</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"mf\">9.809</span><span class=\"w\"> </span><span class=\"n\">total</span>\n</code></pre></div>\n<p>I believe the issue here is that there's quadratic behavior the way that fixups are handled in the <code>MachBuffer</code> right now. Specifically when an island is emitted any fixups which don't need to be present in the island are re-inserted back into the <code>fixup_records</code> list. This means that, in what I suspect is happening in the OP and what's happening in my test case, O(N) list entries are processed but O(N) are pushed back onto the list to get processed later. This means that there's O(N) times where O(N) items are processed, leading to quadratic behavior.</p>\n<p>I stressed this above by setting the <code>wasmtime_linkopt_padding_between_functions</code> option to force space between functions to simulate big functions. Each function has a lot of calls to the final function in the module which means that there is always a lot of pending fixup records. After ~1300 functions are emitted each function has an island after it for prior functions and the next 1k functions each process ~1M fixup records each time.</p>\n<p>One \"easy\" fix is to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/217de07e76b0aaec90b065eb875a92ab5f5823d8/cranelift/codegen/src/machinst/buffer.rs#L236\">this line</a> to a <code>VecDeque</code> instead of a <code>SmallVec</code>. That doesn't actually fix the quadratic behavior though, it just removes a large constant factor from it. For me that brought the runtime to ~5s.</p>\n<p>I was otherwise testing out locally an entirely different strategy where the <code>fixup_records</code> are stored as a <code>BinaryHeap</code> and only those necessary to be emitted into the island were emitted, leaving everything else in place. This is not a viable solution as-is because I had to disable the <code>MachBuffer</code> branching optimizations, but it did bring the compile time down to 2s from the original ~10s for aarch64. Profiling shows the 2 seconds is almost entirely spent in b-tree operations as part of regalloc, which I'm interpreting as meaning that this is indeed the issue and would bring aarch64 and x86_64 back in parity with each other.</p>\n<hr>\n<p>Do others have a better idea about how to handle the <code>fixup_records</code> list? The problem with the <code>BinaryHeap</code> approach is that the branch optimizations want to delete last-added records and additionally mutate records arbitrarily within the heap, both of which aren't operations that <code>BinaryHeap</code> supports.</p>\n<p>Alternatively, one perhaps more radical idea would be to remove the branch optimizations entirely. My naive understanding of them is that they're better suited for restructuring the CFG (e.g. basic-block style mid-end optimizations) rather than emission-time optimizations.</p>\n<p>One unfortunate part here is that the branch optimizations which require <code>BinaryHeap</code> aren't used at all when assembling functions into one large image. Only intra-function assembly uses branch optimization which is less of an issue here because functions are typically not large enough to hit this quadratic behavior. I'm not sure that this can be extrapolated into something useful, though, and inevitably a big function will hit this quadratic behavior too (in addition to the big module in the OP)</p>\n</blockquote>",
        "id": 381825822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691152587
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665867715\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>@alexcrichton I'm taking a look at this now. My most basic unanswered question is actually: what changed recently? The original report above is that this is a regression between v9 and v10; the core <code>MachBuffer</code> algorithm has not changed in three years (around June 2020).</p>\n<blockquote>\n<p>Alternatively, one perhaps more radical idea would be to remove the branch optimizations entirely. My naive understanding of them is that they're better suited for restructuring the CFG (e.g. basic-block style mid-end optimizations) rather than emission-time optimizations.</p>\n</blockquote>\n<p>Do you mean avoiding use of the <code>MachBuffer</code> for the inter-function linking? (My alternative reading of this suggetion -- not doing peephole opts for each function body emission -- seems unlikely as they're really important for perf, something like 25% when I introduced them at least.)</p>\n<p>That's possible for sure; I guess the question would then be whether we switch back to full Abs8 relocations for all calls (and reintroduce support for relocs into Wasmtime as code won't be fully PIC anymore) or get island handling some other way. Fundamentally it seems to me that:</p>\n<ul>\n<li>We do need islands (because of above);</li>\n<li>Islands require some sort of labell-resolution;</li>\n<li>Label resolution needs some way of handling both forward and reverse refs;</li>\n<li>Forward refs (labels not yet defined) are the core of the issue here, causing the re-insertion (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/de4ede08265e8e984a8fd34be5c0986e13b646b0/cranelift/codegen/src/machinst/buffer.rs#L1301\">here</a>).</li>\n</ul>\n<hr>\n<p>It seems to me that the most elegant approach may be to kick some label-fixup records off to a \"at max range, don't reconsider until final fixup\" list; then not consider them in <code>emit_island</code> again. We'd need a notion in <code>LabelUse</code> of \"maximum range\"; for aarch64 that's one step or two (19 bit -&gt; 26 bit -&gt; full abs8, or 26 bit -&gt; abs8) and in Wasmtime in practice just one step for conditionals and no escalation at all for jumps. <code>emit_island</code> clears the most-recent-branch list so we don't have to worry about invariants wrt its connection to <code>fixup_records</code>. Thoughts?</p>\n<p>I can try to prototype this today (but I have a pretty meeting-heavy day sadly so if you want to get to it first, please feel free!).</p>\n</blockquote>",
        "id": 381908415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691165747
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665867715\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>@alexcrichton I'm taking a look at this now. My most basic unanswered question is actually: what changed recently? The original report above is that this is a regression between v9 and v10; the core <code>MachBuffer</code> algorithm has not changed in three years (around June 2020).</p>\n<blockquote>\n<p>Alternatively, one perhaps more radical idea would be to remove the branch optimizations entirely. My naive understanding of them is that they're better suited for restructuring the CFG (e.g. basic-block style mid-end optimizations) rather than emission-time optimizations.</p>\n</blockquote>\n<p>Do you mean avoiding use of the <code>MachBuffer</code> for the inter-function linking? (My alternative reading of this suggetion -- not doing peephole opts for each function body emission -- seems unlikely as they're really important for perf, something like 25% when I introduced them at least.)</p>\n<p>That's possible for sure; I guess the question would then be whether we switch back to full Abs8 relocations for all calls (and reintroduce support for relocs into Wasmtime as code won't be fully PIC anymore) or get island handling some other way. Fundamentally it seems to me that:</p>\n<ul>\n<li>We do need islands (because of above);</li>\n<li>Islands require some sort of label-resolution;</li>\n<li>Label resolution needs some way of handling both forward and reverse refs;</li>\n<li>Forward refs (labels not yet defined) are the core of the issue here, causing the re-insertion (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/de4ede08265e8e984a8fd34be5c0986e13b646b0/cranelift/codegen/src/machinst/buffer.rs#L1301\">here</a>).</li>\n</ul>\n<hr>\n<p>It seems to me that the most elegant approach may be to kick some label-fixup records off to a \"at max range, don't reconsider until final fixup\" list; then not consider them in <code>emit_island</code> again. We'd need a notion in <code>LabelUse</code> of \"maximum range\"; for aarch64 that's one step or two (19 bit -&gt; 26 bit -&gt; full abs8, or 26 bit -&gt; abs8) and in Wasmtime in practice just one step for conditionals and no escalation at all for jumps. <code>emit_island</code> clears the most-recent-branch list so we don't have to worry about invariants wrt its connection to <code>fixup_records</code>. Thoughts?</p>\n<p>I can try to prototype this today (but I have a pretty meeting-heavy day sadly so if you want to get to it first, please feel free!).</p>\n</blockquote>",
        "id": 381908642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691165786
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665915990\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Actually it turns out that a simple implementation of the above is a Caltrain-ride-sized chunk of work: #6804. It still doesn't resolve the issue because there is actually a 32-bit PCrel label kind that we want to be able to use, so the Branch26's stick around and participate in the quadratic dance. I think we want some sort of tiered deadline approach; continuing to think!</p>\n</blockquote>",
        "id": 381919147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691167990
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665935754\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>The latest commit in #6804 now solves the issue, I think. I'll do more thorough testing and cleanup later in the day when I have a chance. One interesting consequence of the new change (every forward-ref that crosses an island gets a veneer) is that I think we no longer need a notion of worst-case size; but I'll verify that. It does also pessimize the case where a bunch of 26-bit forward refs cross a 19-bit-caused island in a very large function body, but \"calls jump through an island in the middle of a function\" is not <em>technically</em> wrong, so... (I'll measure with some benchmarks to be sure!)</p>\n</blockquote>",
        "id": 381924175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691169057
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665953855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Thank you for confirming and swiftly addressing the optimization approach. I have a question that hasn't been answered yet: Why is there such a significant difference in performance between the aarch64 and x86_64 architectures?</p>\n<p>Also, I'd like to mention @cfallin and express a bit of uncertainty regarding whether this could be related to version regression. I can not confirm it does (also see benchmarks <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801</a>). However, I've noticed that recently the aarch64 performance has been noticeably slower compared to before.</p>\n<p>Our code base is growing fast so it is not odd to experience slower compile times, however, I wonder if there are perhaps certain things we do that are very heavy on wasm-generated-code? </p>\n</blockquote>",
        "id": 381928641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691170071
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665953855\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>Thank you for confirming and swiftly addressing the optimization approach. I have a question that hasn't been answered yet: Why is there such a significant difference in performance between the aarch64 and x86_64 architectures?</p>\n<p>Also, I'd like to mention @cfallin and express a bit of uncertainty regarding whether this could be related to version regression. I can not confirm it does (also see benchmarks <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801\">https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665189801</a>). However, various people in our team have noticed that recently the aarch64 performance has been noticeably slower compared to before.</p>\n<p>Our code base is growing fast so it is not odd to experience slower compile times, however, I wonder if there are perhaps certain things we do that are very heavy on wasm-generated-code (.wasm), and why there is such a big mismatch between targets? </p>\n</blockquote>",
        "id": 381929146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691170155
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665992301\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why is there such a significant difference in performance between the aarch64 and x86_64 architectures?</p>\n</blockquote>\n<p>This is a consequence of the kinds of label-references (relocations, kind of) that the two architectures have, and more broadly a difference between RISC-y architectures and CISC-y ones. AArch64 has constant-size (32-bit) instructions, so its branches have either a 19-bit of 26-bit offset field (former for conditionals, which need to encode more information) -- but code can be larger than that. Likewise references to the \"constant pool\" have a 19-bit offset. To make larger code work, we create \"veneers\" in an \"island\" embedded in the code, where a branch first jumps to a longer-range branch (the veneer). The island also contains constants whose references are about to go out of range.This allows us to do single-pass emission, rather than going back and re-emitting with a longer-form branch (which may be a sequence of multiple insts and thus shift other offsets, causing a cascading fixup process). On the other hand, x86-64 has variable-length instructions and so can encode a 32-bit offset almost everywhere; we unconditionally use 32-bit offsets for conditional and unconditional jumps, and data references, so we never need an island of veneers/constants.</p>\n<blockquote>\n<p>recently the aarch64 performance has been noticeably slower compared to before.</p>\n</blockquote>\n<p>If you have an example module we can benchmark and a bisection range (\"faster with vX, slower since vY\") that'd be very helpful!</p>\n</blockquote>",
        "id": 381938036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691172319
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666005363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>If I understand Chris and Alex correctly, the relevant difference between x86_64 and aarch64 is that x86 branch instructions take 32-bit signed offsets, while aarch64 unconditional branches take effectively 28-bit signed offsets.</p>\n<p>Your 115MB wasm module is almost 2^27 bytes, so if the compiled aarch64 binary is bigger than the wasm input, then a branch from one end of it to the other is just past the threshold. If you had a 2GB wasm module I'd expect to start seeing similar problems on x86, assuming you didn't run into other bugs first.</p>\n<p>I would guess that things have gotten slower not because of Wasmtime changes but because as your wasm modules get bigger, the number of branches that overflow the signed offset limit increases.</p>\n<p>Oddly, I think this means that topo-sorting the functions in the wasm module would tend to avoid hitting this behavior in Wasmtime, and also let Wasmtime generate slightly better code. I'm not sure that's worth pursuing though.</p>\n</blockquote>",
        "id": 381941659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691173120
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666268920\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<blockquote>\n<p>what changed recently?</p>\n</blockquote>\n<p>I think the answer here is @TimonPost's module got bigger. If I take my <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1665539868\">example module</a> and compile it with Wasmtime 4.0.0 (to pick a random version) which is circa Dec 2022 I get x86_64 being 0.9s and aarch64 being 16s (different computer than my original measurements). </p>\n<p>In that sense I don't think that this is a new issue, I think this is a scaling issue that @TimonPost's module has run into now.</p>\n<blockquote>\n<p>Do you mean avoiding use of the MachBuffer for the inter-function linking?</p>\n</blockquote>\n<p>Oh sorry no definitely not, that's too load bearing to replace with something else! What I was saying is that for the inter-function use case the branch optimizations are not necessary (as there are no branches). I'll also clarify in that I'm not saying the branch optimizations aren't worth it, I'm saying that, if it works out perf-wise, it might be better to perform these optimizations at the mid-end instead of just before emission. (e.g. basic block jump threading and other basic block optimizations on the clif layer) Note though that I only think this is is a possible good idea if it retains all of the benefits that the current branch optimization brings, if something must be done at the mach buffer layer and can't be done at the clif layer then it's good to keep.</p>\n<blockquote>\n<p>The latest commit in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6804\">https://github.com/bytecodealliance/wasmtime/pull/6804</a> now solves the issue</p>\n</blockquote>\n<p>Nice! I'll also see your train ride and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6805\">raise you a plane ride</a> :)</p>\n<p>I'll take a look probably early next week <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> (unless someone beats me to it)</p>\n</blockquote>",
        "id": 381992895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691191362
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666329787\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm saying that, if it works out perf-wise, it might be better to perform these optimizations at the mid-end instead of just before emission. (e.g. basic block jump threading and other basic block optimizations on the clif layer) Note though that I only think this is is a possible good idea if it retains all of the benefits that the current branch optimization brings, if something must be done at the mach buffer layer and can't be done at the clif layer then it's good to keep.</p>\n</blockquote>\n<p>Ah, I see. I think it's probably best to keep <code>MachBuffer</code>'s optimizations where they are: for historical context, when it <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1718\">replaced a separate pass</a>, it resulted in 10% better compile time as well as 24% better perf overall. The reason is that the peephole pass is designed to be as unintrusive as possible: no editing of data structures, just \"chomping\" of branches where we see they're unnecessary. The two-target branch form is also deeply embedded in the design of the VCode and the register allocator; it's a much more natural representation of a CFG than the \"one-sided\" form (branch or fallthrough) that true machine branches have.</p>\n</blockquote>",
        "id": 382006671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691197950
    },
    {
        "content": "<p>TimonPost <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666490975\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>I can confirm our module is growing with an average of 8Mb/month, and that it might play a role in why it becomes more noticeable over time. </p>\n</blockquote>",
        "id": 382128424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691238146
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666490975\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>I can confirm our <code>.wasm</code> file is growing with an average of 8Mb/month, and that it might play a role in why it becomes more noticeable over time. </p>\n</blockquote>",
        "id": 382128497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691238161
    },
    {
        "content": "<p>TimonPost edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798#issuecomment-1666490975\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>I can confirm our <code>.wasm</code> file is growing with an average of 8Mb/month over the last year, and that it might play a role in why it becomes more noticeable over time. </p>\n</blockquote>",
        "id": 382128694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691238205
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6798\">issue #6798</a>:</p>\n<blockquote>\n<p>We have noticed a recent regression in module compilation times on the MBP M1/M2. Sometimes it takes over 100 seconds when it used to take less than 15. </p>\n<p>&lt;img width=\"1325\" alt=\"image\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2\">https://github.com/bytecodealliance/wasmtime/assets/19969910/d6751bb1-5254-4f28-ae66-0cd913370fc2</a>\"&gt;</p>\n<p>Several non-scientific numbers have been reported on various platforms. At first three individual Mac users started reporting extreme numbers, often exceeding +90 seconds, while Windows and Linux users report an average of around 50 seconds, with some reporting more normal numbers below 10 seconds. We have attempted to isolate the problem by manually clearing all caches and see how long it takes to recompile from scratch. </p>\n<p>Upon further profiling, it appears that the performance bottleneck is related to the \"cranelift\" library (see image). </p>\n<p>Any tips on how we can help find out the root cause here are appreciated. Are there perhaps benchmarks to run to see if regressions happened?</p>\n<p>Some non-scientific data:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">47</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">Gen</span><span class=\"w\"> </span><span class=\"n\">Intel</span><span class=\"err\">®</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"err\">™</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"o\">-</span><span class=\"mi\">11800</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">15</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">12900</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i9</span><span class=\"o\">-</span><span class=\"mi\">13900</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mf\">8.2</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">amd</span><span class=\"w\"> </span><span class=\"mi\">5950</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linux</span>\n<span class=\"mi\">45</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">th</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"n\">intel</span><span class=\"w\"> </span><span class=\"n\">i7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span>\n<span class=\"mi\">56</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">AMD</span><span class=\"w\"> </span><span class=\"n\">Ryzen</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">6900</span><span class=\"n\">HS</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">)</span>\n<span class=\"mi\">90</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">Mac</span><span class=\"w\"> </span><span class=\"n\">Pro</span><span class=\"w\"> </span><span class=\"n\">M1</span><span class=\"o\">/</span><span class=\"n\">M2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">macos</span>\n</code></pre></div>\n<p>Perhaps introduced in v10.0.0 or v10.0.1, as we have not upgraded to 11 yet, and in 9.0.4 we fixed another module compilation issue and had not experienced any problems yet up till quite recently</p>\n</blockquote>",
        "id": 382759010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691442466
    }
]