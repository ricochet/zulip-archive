[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4597\">PR #4597</a> from <code>component-dfg</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit updates the inlining phase of compiling a component to<br>\ncreating a dataflow-based representation of a component instead of<br>\ncreating a final <code>Component</code> with a linear list of initializers. This<br>\ndataflow graph is then linearized in a final step to create the actual<br>\nfinal <code>Component</code>.</p>\n<p>The motivation for this commit stems primarily from my work implementing<br>\nstrings in fused adapters. In doing this my plan is to defer most<br>\nlow-level transcoding to the host itself rather than implementing that<br>\nin the core wasm adapter modules. This means that small<br>\ncranelift-generated trampolines will be used for adapter modules to call<br>\nwhich then call \"transcoding libcalls\". The cranelift-generated<br>\ntrampolines will get raw pointers into linear memory and pass those to<br>\nthe libcall which core wasm doesn't have access to when passing<br>\narguments to an import.</p>\n<p>Implementing this with the previous representation of a <code>Component</code> was<br>\nbecoming too tricky to bear. The initialization of a transcoder needed<br>\nto happen at just the right time: before the adapter module which needed<br>\nit was instantiated but after the linear memories referenced had been<br>\nextracted into the <code>VMComponentContext</code>. The difficulty here is further<br>\ncompounded by the current adapter module injection pass already being<br>\nquite complicated. Adapter modules are already renumbering the index<br>\nspace of runtime instances and shuffling items around in the<br>\n<code>GlobalInitializer</code> list. Perhaps the worst part of this was that<br>\nmemories could already be referenced by host function imports or exports<br>\nto the host, and if adapters referenced the same memory it shouldn't be<br>\nreferenced twice in the component. This meant that <code>ExtractMemory</code><br>\ninitializers ideally needed to be shuffled around in the initializer<br>\nlist to happen as early as possible instead of wherever they happened to<br>\nshow up during translation.</p>\n<p>Overall I did my best to implement the transcoders but everything always<br>\ncame up short. I have decided to throw my hands up in the air and try a<br>\ncompletely different approach to this, namely the dataflow-based<br>\nrepresentation in this commit. This makes it much easier to edit the<br>\ncomponent after initial translation for injection of adapters, injection<br>\nof transcoders, adding dependencies on possibly-already-existing items,<br>\netc. The adapter module partitioning pass in this commit was greatly<br>\nsimplified to something which I believe is functionally equivalent but<br>\nis probably an order of magnitude easier to understand.</p>\n<p>The biggest downside of this representation I believe is having a<br>\nduplicate representation of a component. The <code>component::info</code> was<br>\nlargely duplicated into the <code>component::dfg</code> module in this commit.<br>\nPersonally though I think this is a more appropriate tradeoff than<br>\nbefore because it's very easy to reason about \"convert representation A<br>\nto B\" code whereas it was very difficult to reason about shuffling<br>\naround <code>GlobalInitializer</code> items in optimal fashions. This may also have<br>\na cost at compile-time in terms of shuffling data around, but my hope is<br>\nthat we have lots of other low-hanging fruit to optimize if it ever<br>\ncomes to that which allows keeping this easier-to-understand<br>\nrepresentation.</p>\n<p>Finally, to reiterate, the final representation of components is not<br>\nchanged by this PR. To the runtime internals everything is still the<br>\nsame.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291875218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659543865
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4597\">PR #4597</a>.</p>",
        "id": 291875219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659543865
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4597\">PR #4597</a> from <code>component-dfg</code> to <code>main</code>.</p>",
        "id": 292013160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659622363
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4597#pullrequestreview-1062558035\">PR review</a>.</p>",
        "id": 292066741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659645380
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4597\">PR #4597</a>.</p>",
        "id": 292067373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659645727
    }
]