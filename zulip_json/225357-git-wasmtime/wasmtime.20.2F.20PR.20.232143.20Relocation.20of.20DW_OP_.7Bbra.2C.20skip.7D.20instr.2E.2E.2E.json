[
    {
        "content": "<p>ggreif opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207382040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597825854
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207382089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597825895
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207385394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597828412
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207387751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597830282
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207392410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597833629
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207393834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597834739
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-470448004\">PR Review</a>.</p>",
        "id": 207405979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597843141
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r473022488\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>target</code> is informational only, never used</p>\n</blockquote>",
        "id": 207405980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597843142
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207406435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597843368
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-470478096\">PR Review</a>.</p>",
        "id": 207410132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597845083
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r473045269\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is hard-coded to be little-endian for now.</p>\n</blockquote>",
        "id": 207410133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597845083
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207427049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597852928
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207465531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597873784
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207550334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597944557
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-471836101\">PR Review</a>.</p>",
        "id": 207550541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597944641
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474156135\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This I'll submit separately.</p>\n</blockquote>",
        "id": 207550542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597944642
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-471836400\">PR Review</a>.</p>",
        "id": 207550583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597944668
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474156362\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Dito, refactoring.</p>\n</blockquote>",
        "id": 207550584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597944668
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474303175\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Let's make <code>jump_arcs</code> as field of <code>CompiledExpression</code> (<code>from_label</code> will have empty map)</p>\n</blockquote>",
        "id": 207581110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597961902
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472023424\">PR Review</a>.</p>",
        "id": 207581111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597961902
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207619837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598005862
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207620077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006060
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472385147\">PR Review</a>.</p>",
        "id": 207620112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006101
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474616755\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can we avoid this clone?</p>\n</blockquote>",
        "id": 207620113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006102
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472386185\">PR Review</a>.</p>",
        "id": 207620227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006220
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474617596\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Due to different macro expansions, sometimes this becomes a dead write. Can we suppress the warning in this particular cases?</p>\n</blockquote>",
        "id": 207620228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006221
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474617596\">PR Review Comment</a>.</p>",
        "id": 207620244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006234
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472386871\">PR Review</a>.</p>",
        "id": 207620334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006303
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474618113\">PR Review Comment</a>:</p>\n<blockquote>\n<p>TODO: Go through all <code>DW_OP_*</code> and check if they are mentioned here.</p>\n</blockquote>",
        "id": 207620335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598006303
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>Please don't look just yet.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207621152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007010
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472393713\">PR Review</a>.</p>",
        "id": 207621196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007051
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474623449\">PR Review Comment</a>:</p>\n<blockquote>\n<p>See #2154.</p>\n</blockquote>",
        "id": 207621197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007051
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record the <code>LandingPad</code>'s translated positions into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207622365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598008098
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207622401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598008136
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207622655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598008343
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207622926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598008590
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207624111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598009720
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207624950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598010479
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207625299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598010814
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207630449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598014557
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>ExpressionPart</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207631312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015109
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472471465\">PR Review</a>.</p>",
        "id": 207631494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015220
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474684424\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We now mention all possibilities, but bail out on some, below. We are strictly doing a better job now than before.</p>\n</blockquote>",
        "id": 207631495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015220
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472472000\">PR Review</a>.</p>",
        "id": 207631571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015269
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474684836\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done, thanks for the tip, it simplified matters considerably!</p>\n</blockquote>",
        "id": 207631574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015269
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472480015\">PR Review</a>.</p>",
        "id": 207632742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015947
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474690732\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Actually these might be pass-through, as they would push a Wasm bytecode address, which can be <code>DW_OP_deref</code>-ed. Will leave them here until we have a real use case though. It is hard to predict heap addresses at DWARF generation time.</p>\n</blockquote>",
        "id": 207632743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015947
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474690732\">PR Review Comment</a>.</p>",
        "id": 207632772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598015972
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is done.<br>\nCaveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207632942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598016074
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207633305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598016264
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207633603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598016445
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472493344\">PR Review</a>.</p>",
        "id": 207634326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598016887
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474701054\">PR Review Comment</a>:</p>\n<blockquote>\n<p>it is hard code to read without comment, perhaps <code>let found  = old_to_new.iter().find(|(_, new)| new == code_buf.len()); if let Some((old, new)) = found.cloned() { // update old_to_new ...</code></p>\n</blockquote>",
        "id": 207634327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598016887
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472502281\">PR Review</a>.</p>",
        "id": 207635531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017534
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474707931\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I tried to have <code>in &amp;mut old_to_new</code> but the borrow checker didn't like it. Modifying an iterated-over container is a bad idea, I suppose :-)</p>\n</blockquote>",
        "id": 207635532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017534
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472503019\">PR Review</a>.</p>",
        "id": 207635638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017593
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474708499\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It causes CI failures, too.</p>\n</blockquote>",
        "id": 207635639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017593
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472507576\">PR Review</a>.</p>",
        "id": 207636339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017949
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474711774\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I recommend removing <code>unread_bytes</code> as a local and add it as a \"parameter\" to the push! macro</p>\n</blockquote>",
        "id": 207636340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598017949
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207638284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019022
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472525732\">PR Review</a>.</p>",
        "id": 207638685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019222
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474724844\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Added better comment, since I cannot locate any encoding hint in the context that would let me decide cleanly. For that we would need a <code>gimli</code>-style <code>writer</code>. Another refactor to tackle sometime.</p>\n</blockquote>",
        "id": 207638686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019222
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474724844\">PR Review Comment</a>.</p>",
        "id": 207638709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019238
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472529340\">PR Review</a>.</p>",
        "id": 207639194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019491
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r474727500\">PR Review Comment</a>:</p>\n<blockquote>\n<p>indeed. If I understand the logic, you are searching for <code>new == code.buf.len()</code>. Means you need to use find <code>old_to_new.iter().find(|(_, new)| new == code_buf.len()).cloned()</code>. Then you can modify old_to_new based on found (if) <code>old</code>. No?</p>\n</blockquote>",
        "id": 207639195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598019491
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207678021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598040059
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472875661\">PR Review</a>.</p>",
        "id": 207698517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598055585
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475019543\">PR Review Comment</a>:</p>\n<blockquote>\n<p>As suggested (elsewhere?) this could be a <code>find</code> followed by <code>insert</code>s on success.</p>\n</blockquote>",
        "id": 207698518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598055585
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475019543\">PR Review Comment</a>.</p>",
        "id": 207698572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598055630
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472875933\">PR Review</a>.</p>",
        "id": 207698591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598055694
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475019825\">PR Review Comment</a>:</p>\n<blockquote>\n<p>remove</p>\n</blockquote>",
        "id": 207698592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598055695
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207698796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598056005
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207713839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598084051
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207716729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598089605
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472915604\">PR Review</a>.</p>",
        "id": 207716743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598089678
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475073463\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 207716744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598089679
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation.</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207717753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091554
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472917155\">PR Review</a>.</p>",
        "id": 207717819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091650
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475075965\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 207717820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091650
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472917178\">PR Review</a>.</p>",
        "id": 207717836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091690
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475075994\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 207717837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091691
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472917220\">PR Review</a>.</p>",
        "id": 207717897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091752
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475076065\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is a nice use case for <a href=\"https://doc.rust-lang.org/std/primitive.bool.html#method.then\">https://doc.rust-lang.org/std/primitive.bool.html#method.then</a></p>\n</blockquote>",
        "id": 207717898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091752
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475076065\">PR Review Comment</a>.</p>",
        "id": 207717918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598091826
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475076065\">PR Review Comment</a>.</p>",
        "id": 207718043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598092044
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475076065\">PR Review Comment</a>.</p>",
        "id": 207718170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598092246
    },
    {
        "content": "<p><strong>ggreif</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> as ready for review.</p>",
        "id": 207718303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598092450
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207718325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598092535
    },
    {
        "content": "<p><strong>ggreif</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a>.</p>",
        "id": 207718365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598092563
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472919095\">PR Review</a>.</p>",
        "id": 207719448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598094387
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475079304\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Leaving here the _nightly_-depending diff</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git diff\n<span class=\"gh\">diff --git a/crates/debug/src/lib.rs b/crates/debug/src/lib.rs</span>\n<span class=\"gh\">index 259c86975..901b171de 100644</span>\n<span class=\"gd\">--- a/crates/debug/src/lib.rs</span>\n<span class=\"gi\">+++ b/crates/debug/src/lib.rs</span>\n<span class=\"gu\">@@ -1,6 +1,7 @@</span>\n //! Debug utils for WebAssembly using Cranelift.\n\n #![allow(clippy::cast_ptr_alignment)]\n<span class=\"gi\">+#![feature(bool_to_option)]</span>\n\n use anyhow::{bail, ensure, Error};\n use object::{RelocationEncoding, RelocationKind};\n<span class=\"gh\">diff --git a/crates/debug/src/transform/expression.rs b/crates/debug/src/transform/expression.rs</span>\n<span class=\"gh\">index ceee274f3..002bacd33 100644</span>\n<span class=\"gd\">--- a/crates/debug/src/transform/expression.rs</span>\n<span class=\"gi\">+++ b/crates/debug/src/transform/expression.rs</span>\n<span class=\"gu\">@@ -340,10 +340,10 @@ impl CompiledExpression {</span>\n                         for part in &amp;self.parts {\n                             match part {\n                                 CompiledExpressionPart::Code(c) =&gt; {\n<span class=\"gd\">-                                    if let Some((old, new)) = old_to_new</span>\n<span class=\"gd\">-                                        .iter()</span>\n<span class=\"gd\">-                                        .find(|(_, new)| *new == &amp;code_buf.len())</span>\n<span class=\"gd\">-                                        .map(|(old, new)| (*old, *new))</span>\n<span class=\"gi\">+                                    if let Some((old, new)) =</span>\n<span class=\"gi\">+                                        old_to_new.iter().find_map(|(old, new)| {</span>\n<span class=\"gi\">+                                            (*new == code_buf.len()).then(|| (*old, *new))</span>\n<span class=\"gi\">+                                        })</span>\n                                     {\n                                         // when `new` comes from the preceding LandingPad\n                                         for i in 1..c.len() {\n</code></pre></div>\n\n\n<p>for posterity :-)</p>\n</blockquote>",
        "id": 207719449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598094388
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207719806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598094977
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207721315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598097732
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472921893\">PR Review</a>.</p>",
        "id": 207721569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598098123
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475083974\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Removed.</p>\n</blockquote>",
        "id": 207721570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598098123
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472927780\">PR Review</a>.</p>",
        "id": 207725312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598104032
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475092891\">PR Review Comment</a>:</p>\n<blockquote>\n<p>use <code>to_le_bytes</code> and <code>copy_from_slice</code> ?</p>\n</blockquote>",
        "id": 207725313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598104033
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472935333\">PR Review</a>.</p>",
        "id": 207730217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598112088
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475104310\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does that allow me to position in the array?</p>\n</blockquote>",
        "id": 207730218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598112088
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472935503\">PR Review</a>.</p>",
        "id": 207730349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598112293
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475104611\">PR Review Comment</a>:</p>\n<blockquote>\n<p>N/m, I have it: <a href=\"https://doc.rust-lang.org/book/ch04-03-slices.html\">https://doc.rust-lang.org/book/ch04-03-slices.html</a></p>\n</blockquote>",
        "id": 207730350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598112293
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207730439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598112453
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>                  <span class=\"kt\">DW_AT_location</span>    <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code>                  <span class=\"kt\">DW_AT_location</span>    <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207731583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598113900
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently?</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207731623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598113926
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207732078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598114545
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-472937542\">PR Review</a>.</p>",
        "id": 207732089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598114578
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475107979\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 207732090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598114578
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-473864367\">PR Review</a>.</p>",
        "id": 207899569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598304354
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-473864367\">PR Review</a>.</p>",
        "id": 207899570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598304354
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r475900565\">PR Review Comment</a>:</p>\n<blockquote>\n<p>is <code>combined</code> == to result of <code>parts.pop()</code>? so you don't have to clone</p>\n</blockquote>",
        "id": 207899571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598304354
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-473864367\">PR Review</a>.</p>",
        "id": 207899623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598304374
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-474351440\">PR Review</a>.</p>",
        "id": 207945965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598351791
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476349524\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What I'd really like to do is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">CompiledExpressionPart</span>::<span class=\"n\">Code</span><span class=\"p\">(</span><span class=\"n\">cc2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">CompiledExpressionPart</span>::<span class=\"n\">Code</span><span class=\"p\">(</span><span class=\"n\">cc1</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">part</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cc1</span><span class=\"p\">.</span><span class=\"n\">extend_from_slice</span><span class=\"p\">(</span><span class=\"n\">cc2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">CompiledExpressionPart</span>::<span class=\"n\">LandingPad</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">original_pos</span>: <span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">len</span><span class=\"p\">().</span><span class=\"n\">into_u64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"cp\">$unread</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">parts</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But for that <code>Code</code> needs to carry a mutable vector.<br>\nI tried various other ways of getting rid of the <code>.clone()</code> but I guess my Rust-fu is not strong enough for that. I'd love to see your idea written out though. Indeed the <code>.pop()</code> removes the <code>Code</code> which has <code>cc1</code> in it, and then it gets appended by <code>cc2</code> and. pushed back as a fresh <code>Code</code>.</p>\n</blockquote>",
        "id": 207945966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598351791
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476349524\">PR Review Comment</a>.</p>",
        "id": 207946142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598351980
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-473864367\">PR Review</a>.</p>",
        "id": 207962091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598361976
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-474484547\">PR Review</a>.</p>",
        "id": 207962876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598362377
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476451139\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You are not wrong above, just use <code>parts.last_mut()</code> instead of <code>.last()</code>.</p>\n</blockquote>",
        "id": 207962877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598362377
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-474574448\">PR Review</a>.</p>",
        "id": 207974610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598367843
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476520611\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Success!</p>\n</blockquote>",
        "id": 207974611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598367843
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207974722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598367902
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 207975789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598368373
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208017273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598386664
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-474952115\">PR Review</a>.</p>",
        "id": 208030814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598393497
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476787878\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this and above test cases are incorrect. Can you verify that?</p>\n</blockquote>",
        "id": 208030815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598393498
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475059742\">PR Review</a>.</p>",
        "id": 208038569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598399414
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476879160\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The parsing tests pass</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">transform</span>::<span class=\"n\">expression</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_debug_parse_expressions</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>The tests themselves are not intended to make sense, if that is what you mean. The example in the PR description is an actual location expression with its translation.</p>\n</blockquote>",
        "id": 208038570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598399414
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475070116\">PR Review</a>.</p>",
        "id": 208040581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598401373
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476907800\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The <code>original_pos: 5</code> appearing twice is probably which is confusing. It confused me too. But actually it makes sense. The jump goes from 5 to 7. The <code>LandingPad</code> before <code>Code</code> just orients it and tells that there are potential jump targets in <code>Code</code> (pre-translation) pos 6: <code>DW_OP_lit0</code>, pos 7: <code>DW_OP_stack_value</code>.</p>\n</blockquote>",
        "id": 208040582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598401373
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476907800\">PR Review Comment</a>.</p>",
        "id": 208040656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598401434
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476907800\">PR Review Comment</a>.</p>",
        "id": 208040877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598401569
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r476907800\">PR Review Comment</a>.</p>",
        "id": 208041051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598401723
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208113095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598458425
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at all relevant positions:</p>\n<ul>\n<li>immediately after a <code>Jump</code></li>\n<li>at actual <code>Jump</code> targets</li>\n<li>before <code>Code</code> chunks when the jump target goes properly into an inner bytecode position.</li>\n</ul>\n<p><code>LandingPad</code>s are identified by the bytecode instruction offset _before_ translation.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. Upon <code>write</code>ing we record every <code>LandingPad</code>'s translated position into a relocation map and using that we are able to recompute the target distance for every jump-like instruction.</p>\n<p>Since we don't know in advance if we will need <code>LandingPad</code>s, we speculatively add all, and clean up after parsing is concluded. At this point the map from jump sources to destinations is complete.</p>\n<p>Caveat: Currently we make no attempt to gracefully degrade when jump targets point into a multibyte operation (i.e. an illegal jump target).</p>\n<p>Progress:</p>\n<ul>\n<li>relocation of branch edges works</li>\n<li>open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</li>\n</ul>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208116647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460190
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTarget</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get corresponding <code>JumpTarget</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208117319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460525
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTarget</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get corresponding <code>JumpTarget</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208117359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460552
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208117423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460586
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208117532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460626
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208117600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460665
    },
    {
        "content": "<p><strong>ggreif</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a>.</p>",
        "id": 208117852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598460766
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475698760\">PR Review</a>.</p>",
        "id": 208121703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475698760\">PR Review</a>.</p>",
        "id": 208121704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477462182\">PR Review Comment</a>:</p>\n<blockquote>\n<p>can we revert this change?</p>\n</blockquote>",
        "id": 208121705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477463332\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    // Looks hacky but it is fast; does not need to be really exact.\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208121706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477463672\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        // Create somewhat unique hash data -- using part of\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208121708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477464419\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        // Internal hash_data test (theoretically can fail intermittently).\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208121709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598462603
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208123483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598463557
    },
    {
        "content": "<p>yurydelendik deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477464419\">PR Review Comment</a>.</p>",
        "id": 208123489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598463562
    },
    {
        "content": "<p>yurydelendik deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477463672\">PR Review Comment</a>.</p>",
        "id": 208123496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598463566
    },
    {
        "content": "<p>yurydelendik deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477463332\">PR Review Comment</a>.</p>",
        "id": 208123501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598463571
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475754403\">PR Review</a>.</p>",
        "id": 208130383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598466928
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477506348\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                parts.push(CompiledExpressionPart::Code(code_chunk));\n                code_chunk = Vec::new();\n</code></pre></div>\n\n\n<p>like this?</p>\n</blockquote>",
        "id": 208130384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598466928
    },
    {
        "content": "<p>ggreif deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477506348\">PR Review Comment</a>.</p>",
        "id": 208130420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598466950
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475755244\">PR Review</a>.</p>",
        "id": 208130552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467003
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                parts.push(CompiledExpressionPart::Code(code_chunk));\n                code_chunk = Vec::new();\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208130554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467003
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>.</p>",
        "id": 208130599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467022
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>.</p>",
        "id": 208130893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467153
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>.</p>",
        "id": 208131016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467205
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>.</p>",
        "id": 208131033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467217
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475760794\">PR Review</a>.</p>",
        "id": 208131661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467495
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477511432\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can <code>push!(</code> stay? I was thinking about <code>code_chunk.clone()</code> and <code>code_chunk = Vec::new()</code> stuff.</p>\n</blockquote>",
        "id": 208131662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467495
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477507023\">PR Review Comment</a>.</p>",
        "id": 208131853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467600
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475765535\">PR Review</a>.</p>",
        "id": 208132312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467899
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477515226\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I hope to keep <code>push!(</code> (see above), but no idea how to fix the warning without artificially reading the <code>code_chunk</code> after the last macro invocation.</p>\n</blockquote>",
        "id": 208132313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467899
    },
    {
        "content": "<p>ggreif edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477515226\">PR Review Comment</a>.</p>",
        "id": 208132338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598467911
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475778678\">PR Review</a>.</p>",
        "id": 208133881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598468676
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477524096\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I see. Yeah, it just needs <code>if !code_chunk.is_empty() {</code> without <code>code_chunk = Vec::new()</code></p>\n</blockquote>",
        "id": 208133882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598468676
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208142964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473063
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475827880\">PR Review</a>.</p>",
        "id": 208143094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473120
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477564560\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I did something that works. But I feel dense and am not sure if this is what you meant. Please feel free to fix.</p>\n</blockquote>",
        "id": 208143095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473120
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208143326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473239
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475830342\">PR Review</a>.</p>",
        "id": 208143550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473353
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477566577\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>            // Discarding out-of-bounds jumps (also some of falsely detected ops)\n</code></pre></div>\n\n\n</blockquote>",
        "id": 208143551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473353
    },
    {
        "content": "<p>ggreif updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208143558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598473359
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a> from <code>main</code> to <code>main</code>:</p>\n<blockquote>\n<p>The fundamental problem is that the target distance of jump-like operations may change in the DWARF expression translation process. Intervening <code>DW_OP_deref</code> will expand to about 10 bytes, for example.</p>\n<p>So the jumps must be relocated. We approach this task by inserting artificial <code>LandingPad</code> markers (new <code>CompiledExpressionParts</code> constructors) into the parsed vector at actual <code>Jump</code> targets.</p>\n<p><code>LandingPad</code>s are identified by <code>JumpTargetMarker</code> tokens which are generated on the fly.</p>\n<p>Additionally we now parse the <code>Jump</code> instructions. These also get their corresponding <code>JumpTargetMarker</code> token.</p>\n<p>We bail in two situations:</p>\n<ul>\n<li><code>frame_base</code> is too complicated (i.e. itself contains <code>Jump</code>)</li>\n<li>some jump distance in the original expression is fishy.</li>\n</ul>\n<p>Open problem: the <code>need_deref</code> flag. What when different branches want to set the flag differently? Probably not a biggie as long as all control-flow paths end e.g. with <code>DW_OP_stack_value</code> (or without).</p>\n<hr>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_WASM_location</span> <span class=\"mh\">0x0</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>gets transformed into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">DW_AT_location</span>  <span class=\"p\">(</span><span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_dup</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_bra</span> <span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_lit1</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_shr</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_skip</span> <span class=\"o\">+</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus_uconst</span> <span class=\"mh\">0x5</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_breg6</span> <span class=\"kt\">RBP</span><span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_consts</span> <span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_swap</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_const4u</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_and</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_plus</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_deref</span><span class=\"p\">,</span> <span class=\"kt\">DW_OP_stack_value</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 208152748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598478100
    },
    {
        "content": "<p>ggreif submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#pullrequestreview-475882635\">PR Review</a>.</p>",
        "id": 208153407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598478457
    },
    {
        "content": "<p>ggreif created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#discussion_r477608380\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I see, thanks!</p>\n</blockquote>",
        "id": 208153408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598478457
    },
    {
        "content": "<p>yurydelendik merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">PR #2143</a>.</p>",
        "id": 208156295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598480345
    }
]