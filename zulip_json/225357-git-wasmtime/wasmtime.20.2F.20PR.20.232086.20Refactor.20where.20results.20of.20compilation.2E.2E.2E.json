[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a> from <code>compile-singular-function</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors the internals of compilation in Wasmtime to change<br>\nwhere results of individual function compilation are stored. Previously<br>\ncompilation resulted in many maps being returned, and compilation<br>\nresults generally held all these maps together. This commit instead<br>\nswitches this to have all metadata stored in a <code>CompiledFunction</code><br>\ninstead of having a separate map for each item that can be stored.</p>\n<p>The motivation for this is primarily to help out with future<br>\nmodule-linking-related PRs. What exactly \"module level\" is depends on<br>\nhow we interpret modules and how many modules are in play, so it's a bit<br>\neasier for operations in wasmtime to work at the function level where<br>\npossible. This means that we don't have to pass around multiple<br>\ndifferent maps and a function index, but instead just one map or just<br>\none entry representing a compiled function.</p>\n<p>Additionally this change updates where the parallelism of compilation<br>\nhappens, pushing it into <code>wasmtime-jit</code> instead of <code>wasmtime-environ</code>.<br>\nThis is another goal where <code>wasmtime-jit</code> will have more knowledge about<br>\nmodule-level pieces with module linking in play. User-facing-wise this<br>\nshould be the same in terms of parallel compilation, though.</p>\n<p>The ultimate goal of this refactoring is to make it easier for the<br>\nresults of compilation to actually be a set of wasm modules. This means<br>\nwe won't be able to have a map-per-metadata where the primary key is the<br>\nfunction index, because there will be many modules within one \"object<br>\nfile\".</p>\n</blockquote>",
        "id": 205645400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596232239
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a>.</p>",
        "id": 205645408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596232243
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a> from <code>compile-singular-function</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors the internals of compilation in Wasmtime to change<br>\nwhere results of individual function compilation are stored. Previously<br>\ncompilation resulted in many maps being returned, and compilation<br>\nresults generally held all these maps together. This commit instead<br>\nswitches this to have all metadata stored in a <code>CompiledFunction</code><br>\ninstead of having a separate map for each item that can be stored.</p>\n<p>The motivation for this is primarily to help out with future<br>\nmodule-linking-related PRs. What exactly \"module level\" is depends on<br>\nhow we interpret modules and how many modules are in play, so it's a bit<br>\neasier for operations in wasmtime to work at the function level where<br>\npossible. This means that we don't have to pass around multiple<br>\ndifferent maps and a function index, but instead just one map or just<br>\none entry representing a compiled function.</p>\n<p>Additionally this change updates where the parallelism of compilation<br>\nhappens, pushing it into <code>wasmtime-jit</code> instead of <code>wasmtime-environ</code>.<br>\nThis is another goal where <code>wasmtime-jit</code> will have more knowledge about<br>\nmodule-level pieces with module linking in play. User-facing-wise this<br>\nshould be the same in terms of parallel compilation, though.</p>\n<p>The ultimate goal of this refactoring is to make it easier for the<br>\nresults of compilation to actually be a set of wasm modules. This means<br>\nwe won't be able to have a map-per-metadata where the primary key is the<br>\nfunction index, because there will be many modules within one \"object<br>\nfile\".</p>\n</blockquote>",
        "id": 205806787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596467857
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a> from <code>compile-singular-function</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors the internals of compilation in Wasmtime to change<br>\nwhere results of individual function compilation are stored. Previously<br>\ncompilation resulted in many maps being returned, and compilation<br>\nresults generally held all these maps together. This commit instead<br>\nswitches this to have all metadata stored in a <code>CompiledFunction</code><br>\ninstead of having a separate map for each item that can be stored.</p>\n<p>The motivation for this is primarily to help out with future<br>\nmodule-linking-related PRs. What exactly \"module level\" is depends on<br>\nhow we interpret modules and how many modules are in play, so it's a bit<br>\neasier for operations in wasmtime to work at the function level where<br>\npossible. This means that we don't have to pass around multiple<br>\ndifferent maps and a function index, but instead just one map or just<br>\none entry representing a compiled function.</p>\n<p>Additionally this change updates where the parallelism of compilation<br>\nhappens, pushing it into <code>wasmtime-jit</code> instead of <code>wasmtime-environ</code>.<br>\nThis is another goal where <code>wasmtime-jit</code> will have more knowledge about<br>\nmodule-level pieces with module linking in play. User-facing-wise this<br>\nshould be the same in terms of parallel compilation, though.</p>\n<p>The ultimate goal of this refactoring is to make it easier for the<br>\nresults of compilation to actually be a set of wasm modules. This means<br>\nwe won't be able to have a map-per-metadata where the primary key is the<br>\nfunction index, because there will be many modules within one \"object<br>\nfile\".</p>\n</blockquote>",
        "id": 205809280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596469053
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#pullrequestreview-460146142\">PR Review</a>.</p>",
        "id": 205812163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596470391
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#discussion_r464506093\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is it possible to add \"CompiledFunction\"-lite-like structure to use it with <code>Compilation</code>? It does not look like the code above will be easy to maintain.</p>\n</blockquote>",
        "id": 205812165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596470391
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#pullrequestreview-460146142\">PR Review</a>.</p>",
        "id": 205812166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596470391
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a> from <code>compile-singular-function</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors the internals of compilation in Wasmtime to change<br>\nwhere results of individual function compilation are stored. Previously<br>\ncompilation resulted in many maps being returned, and compilation<br>\nresults generally held all these maps together. This commit instead<br>\nswitches this to have all metadata stored in a <code>CompiledFunction</code><br>\ninstead of having a separate map for each item that can be stored.</p>\n<p>The motivation for this is primarily to help out with future<br>\nmodule-linking-related PRs. What exactly \"module level\" is depends on<br>\nhow we interpret modules and how many modules are in play, so it's a bit<br>\neasier for operations in wasmtime to work at the function level where<br>\npossible. This means that we don't have to pass around multiple<br>\ndifferent maps and a function index, but instead just one map or just<br>\none entry representing a compiled function.</p>\n<p>Additionally this change updates where the parallelism of compilation<br>\nhappens, pushing it into <code>wasmtime-jit</code> instead of <code>wasmtime-environ</code>.<br>\nThis is another goal where <code>wasmtime-jit</code> will have more knowledge about<br>\nmodule-level pieces with module linking in play. User-facing-wise this<br>\nshould be the same in terms of parallel compilation, though.</p>\n<p>The ultimate goal of this refactoring is to make it easier for the<br>\nresults of compilation to actually be a set of wasm modules. This means<br>\nwe won't be able to have a map-per-metadata where the primary key is the<br>\nfunction index, because there will be many modules within one \"object<br>\nfile\".</p>\n</blockquote>",
        "id": 205815402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596472094
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#pullrequestreview-460168908\">PR Review</a>.</p>",
        "id": 205815514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596472161
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#discussion_r464524071\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah that's a good point, I went ahead and updated <code>Compilation</code> to have specific accessors for what's needed by wasmtime and now it no longer stores all these fields that are emptied out here.</p>\n</blockquote>",
        "id": 205815515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596472161
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a> from <code>compile-singular-function</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit refactors the internals of compilation in Wasmtime to change<br>\nwhere results of individual function compilation are stored. Previously<br>\ncompilation resulted in many maps being returned, and compilation<br>\nresults generally held all these maps together. This commit instead<br>\nswitches this to have all metadata stored in a <code>CompiledFunction</code><br>\ninstead of having a separate map for each item that can be stored.</p>\n<p>The motivation for this is primarily to help out with future<br>\nmodule-linking-related PRs. What exactly \"module level\" is depends on<br>\nhow we interpret modules and how many modules are in play, so it's a bit<br>\neasier for operations in wasmtime to work at the function level where<br>\npossible. This means that we don't have to pass around multiple<br>\ndifferent maps and a function index, but instead just one map or just<br>\none entry representing a compiled function.</p>\n<p>Additionally this change updates where the parallelism of compilation<br>\nhappens, pushing it into <code>wasmtime-jit</code> instead of <code>wasmtime-environ</code>.<br>\nThis is another goal where <code>wasmtime-jit</code> will have more knowledge about<br>\nmodule-level pieces with module linking in play. User-facing-wise this<br>\nshould be the same in terms of parallel compilation, though.</p>\n<p>The ultimate goal of this refactoring is to make it easier for the<br>\nresults of compilation to actually be a set of wasm modules. This means<br>\nwe won't be able to have a map-per-metadata where the primary key is the<br>\nfunction index, because there will be many modules within one \"object<br>\nfile\".</p>\n</blockquote>",
        "id": 205816147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596472464
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#pullrequestreview-460173394\">PR Review</a>.</p>",
        "id": 205816338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596472559
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086#pullrequestreview-460146142\">PR Review</a>.</p>",
        "id": 205817470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596473069
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2086\">PR #2086</a>.</p>",
        "id": 205821899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596475253
    }
]