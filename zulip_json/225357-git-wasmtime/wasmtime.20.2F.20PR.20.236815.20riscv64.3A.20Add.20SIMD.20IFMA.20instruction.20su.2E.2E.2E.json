[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815\">PR #6815</a> from <code>afonso360:riscv-ifma</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds support for SIMD integer fused multiply add/subtract instructions to RISC-V. These instructions modify one of the source registers, so I've added a new instruction format for it.</p>\n<p>We have 4 variants of this instruction (<a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc#1113-vector-single-width-integer-multiply-add-instructions\">ยง11.13. Vector Single-Width Integer Multiply-Add Instructions</a>), I've only used two, since it looks like <code>vmadd</code>/<code>vnmsub</code> match the same pattern but just modify different registers. I'm not entirely sure how to expose this, since it looks like just a regalloc optimization.</p>\n<p>Additionally I couldn't find a way to match <code>isub+imul</code>, It looks like <code>vnmsac</code> does not match that, but maybe I'm missing something!</p>\n</blockquote>",
        "id": 382715147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691430021
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815\">PR #6815</a>.</p>",
        "id": 382715155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691430021
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815\">PR #6815</a>.</p>",
        "id": 382715156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691430021
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815#pullrequestreview-1570118805\">PR review</a>:</p>\n<blockquote>\n<p>Looks good!</p>\n<p>These patterns are already being generated by fuzzgen, right? I've lost track of what works right now.</p>\n<p>While reading this it occurred to me that someday we ought to have a lot more egraph rules for <code>splat</code>, such as rewriting <code>(imul (splat x) (splat y))</code> to (splat (imul x y))<code>. Those should probably go in </code>cranelift/codegen/src/opts/vector.isle<code>, and move some existing rules from </code>extends.isle` there too I think.</p>\n</blockquote>",
        "id": 383354809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691599699
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6815\">PR #6815</a>.</p>",
        "id": 383430350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691621400
    }
]