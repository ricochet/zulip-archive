[
    {
        "content": "<p>kubkon edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swaps mutability for interior mutability in a handful of places.</p>\n</blockquote>",
        "id": 191668617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585082111
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380688385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380688385\">PR Review</a>.</p>",
        "id": 191671103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585083326
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380688385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380688385\">PR Review</a>.</p>",
        "id": 191671104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585083326
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397454231\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397454231\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What is the <code>mut</code> here for?</p>\n</blockquote>",
        "id": 191671105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585083326
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380705184\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380705184\">PR Review</a>.</p>",
        "id": 191674013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084821
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468091\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468091\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The way this technically works is it's dispatching to the <code>impl Seek for &amp;File</code> where the seek method takes <code>&amp;mut self</code>. This means that we're calling seek on <code>&amp;mut &amp;File</code>, so the <code>mut</code> here is needed to create the <code>&amp;mut &amp;File</code> binding.</p>\n</blockquote>",
        "id": 191674014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084822
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380705879\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380705879\">PR Review</a>.</p>",
        "id": 191674124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084888
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468625\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468625\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is to be able to mutate the reference to reference to <code>File</code>. Another way of expressing it would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">File</span><span class=\"p\">)).</span><span class=\"n\">read_vectored</span><span class=\"p\">(...)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This looks too cluttered for me, hence why I’ve decided to <code>let</code>-bind it first. However, if you know of a better way of handling this, lemme know!</p>\n</blockquote>",
        "id": 191674125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084889
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380706115\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380706115\">PR Review</a>.</p>",
        "id": 191674175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084910
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468815\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397468815\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For one-liners like this it should suffice to do <code>(&amp;fd).seek(pos)</code></p>\n</blockquote>",
        "id": 191674176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084910
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397469321\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397469321\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@alexcrichton again beat me to it! Seconds, seconds!</p>\n</blockquote>",
        "id": 191674309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084962
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380706701\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380706701\">PR Review</a>.</p>",
        "id": 191674310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585084962
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380707443\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380707443\">PR Review</a>.</p>",
        "id": 191674434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585085032
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380708199\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380708199\">PR Review</a>.</p>",
        "id": 191674603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585085108
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397470534\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397470534\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I tried but alas wouldn’t work. The compiler complained that cannot mutate <code>File</code> behind a <code>&amp;</code> ref. I think this might be since <code>fd</code> is not a <code>File</code> but rather an entity that implements <code>Deref&lt;Target=File&gt;</code> so would need something like <code>(&amp;mut (&amp;*fd as &amp;File))</code>. Unless I’m doing something wrong here.</p>\n</blockquote>",
        "id": 191674606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585085108
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a> from <code>mut-cleanup</code> to <code>master</code>:</p>\n<blockquote>\n<p>Until now, several syscalls including <code>fd_pwrite</code> etc. were relying on mutating <code>&amp;mut Entry</code> by mutating its inner file handle. This is unnecessary in almost all cases since all methods mutating <code>std::fs::File</code> in Rust's libstd are also implemented for <code>&amp;std::fs::File</code>. In part, this will prepare us to handle <code>Entry</code>s behind an <code>Rc</code> and <code>RefCell</code> combo.</p>\n<p>While here, I've also modified <code>OsHandle</code> in BSD to include <code>RefCell&lt;Option&lt;Dir&gt;&gt;</code> rather than <code>Option&lt;Mutex&lt;Dir&gt;&gt;</code> as was until now. While <code>RefCell</code> could easily be replaced with <code>Mutex</code>, since going multithreading will require a lot of conceptual changes to <code>wasi-common</code>, I thought it'd be best not to mix single- with multithreading contexts and swap all places at once when it comes to it. If y'all feel this is not the right approach, lemme know!</p>\n<p>I've also had to make some modifications to virtual FS which mainly swaps mutability for interior mutability in a handful of places.</p>\n</blockquote>",
        "id": 191716597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585127679
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397705238\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#discussion_r397705238\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok, I've convinced myself that this is due to the fact that <code>fd</code> is an <code>OsHandle</code> and not a <code>File</code> nor <code>&amp;File</code>. Hence, we need to force it to coerce to <code>&amp;File</code> before calling the trait method such as <code>seek</code> on it. The minimum working one-liner I got down to is <code>(fd as &amp;File).seek(pos)?</code>. I'm happy to leave several as one-liners such as this one, unless we re-use the <code>fd</code> in a couple of places within the same scope, in which case <code>let mut fd: &amp;File = fd;</code> seems more natural.</p>\n</blockquote>",
        "id": 191716816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585127800
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380969851\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395#pullrequestreview-380969851\">PR Review</a>.</p>",
        "id": 191716817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585127800
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1395\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1395\">PR #1395</a>.</p>",
        "id": 191740003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585141254
    }
]