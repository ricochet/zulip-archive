[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">PR #8173</a>.</p>",
        "id": 427569402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793780
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">PR #8173</a> from <code>cfallin:fix-pcc-iconst</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>We have various constant-propagation/folding rules in the mid-end that generate new <code>iconst</code>s in place of other expressions. We got a fuzzbug with PCC wherein it was not able to verify that an iadd-iadd-uextend combination generating a Wasm address was in-range when rules reassociated the iadds to put constants together. Rather than carefully augment all rules to propagate constant facts only where they exist on the inputs, I opted to add a hook to the optimizer to generate brand-new assertions on <em>all</em> iconsts that we insert. This adds a little more work during verification (not too much hopefully: it's pretty low-overhead to check that <code>mov $1, %rax</code> puts <code>1</code> in <code>rax</code>) but should provide broader coverage of interesting corner-cases where optimization breaks the PCC chain.</p>\n<p>Fixes <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=67432\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=67432</a>.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 427569403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793780
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">PR #8173</a>.</p>",
        "id": 427569405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710793781
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173#pullrequestreview-1944644943\">PR review</a>:</p>\n<blockquote>\n<p>This one is easy enough to reason about: it passes the flags through so we can check whether we're using PCC, and if we are, it does what the commit message says.</p>\n</blockquote>",
        "id": 427598720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710807824
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8173\">PR #8173</a>.</p>",
        "id": 427602733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710810898
    }
]