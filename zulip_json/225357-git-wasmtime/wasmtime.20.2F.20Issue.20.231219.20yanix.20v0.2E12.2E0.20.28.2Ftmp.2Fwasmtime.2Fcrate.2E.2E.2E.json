[
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594678577\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594678577\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>okay, that very error already is underway to get fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1226\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1226\">https://github.com/bytecodealliance/wasmtime/pull/1226</a></p>\n</blockquote>",
        "id": 189713651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583342525
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594751983\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594751983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>Hey @stefson, thanks for the report. Could you do me a favour actually, and rebase onto #1226 and see if it indeed fixes the error (unless you've already done it of course)?</p>\n</blockquote>",
        "id": 189722916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583348239
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594764921\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594764921\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>ok, so I git cloned your fork and did <code>git checkout yanix-error-cleanup</code>, followed by <code>cd crates/wasi-common/yanix</code> and cargo build. It turns out that with the commits you added plus my patch from above, there's a new error now: </p>\n<div class=\"codehilite\"><pre><span></span>cargo build --target armv7-unknown-linux-gnueabihf\n   Compiling yanix v0.12.0 (/tmp/wasmtime/crates/wasi-common/yanix)\nerror[E0433]: failed to resolve: use of undeclared type or module `Errno`\n   --&gt; crates/wasi-common/yanix/src/file.rs:247:23\n    |\n247 |     let offset: i64 = Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?.into();\n    |                       ^^^^^ use of undeclared type or module `Errno`\n\nerror[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:10:17\n   |\n10 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `yanix`.\n</pre></div>\n\n\n<p>and I think that's due to you changing from Errno to Error in that line, right? </p>\n</blockquote>",
        "id": 189724575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583349256
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>git clone the repo, cd wasmtime/crates/wasi-common/yanix and execute cargo build fails with this beauty: </p>\n<div class=\"codehilite\"><pre><span></span>crates/wasi-common/yanix $ cargo build\n    Updating crates.io index\n  Downloaded cfg-if v0.1.10\n  Downloaded thiserror v1.0.11\n  Downloaded libc v0.2.67\n  Downloaded log v0.4.8\n  Downloaded bitflags v1.2.1\n  Downloaded thiserror-impl v1.0.11\n  Downloaded proc-macro2 v1.0.8\n  Downloaded quote v1.0.2\n  Downloaded unicode-xid v0.2.0\n  Downloaded syn v1.0.15\n   Compiling proc-macro2 v1.0.8\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.15\n   Compiling bitflags v1.2.1\n   Compiling libc v0.2.67\n   Compiling log v0.4.8\n   Compiling cfg-if v0.1.10\n   Compiling quote v1.0.2\n   Compiling thiserror-impl v1.0.11\n   Compiling thiserror v1.0.11\n   Compiling yanix v0.12.0 (/home/tim/wasmtime/crates/wasi-common/yanix)\nerror[E0308]: try expression alternatives have incompatible types\n   --&gt; crates/wasi-common/yanix/src/file.rs:247:23\n    |\n247 |     let offset: i64 = Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                       |\n    |                       expected `i64`, found `i32`\n    |                       help: you can convert an `i32` to `i64`: `Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?.into()`\n\nerror[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:10:17\n   |\n10 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `yanix`.\n</pre></div>\n\n\n<p>aarch64 seems fine. </p>\n<p>rustc is v1.41.1 with llvm-9</p>\n</blockquote>",
        "id": 189725170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583349617
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594771893\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594771893\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>Yep, looks like it! So the general gist now is to re-use <code>std::io::Error</code> to spawn and wrap raw OS errno values instead of maintaining yet another mapping between errno values and some enum type. Anyhow, thanks for looking into it! After we land #1226, I'll be happy to help you out in weeding out any errors that might have left over.</p>\n</blockquote>",
        "id": 189725375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583349758
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594773795\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594773795\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>ok, sweet, so here's the rebased patch for your branch, please simply add it if it's to your liking: </p>\n<div class=\"codehilite\"><pre><span></span>--- a/crates/wasi-common/yanix/src/file.rs\n+++ b/crates/wasi-common/yanix/src/file.rs\n@@ -244,6 +244,6 @@ pub unsafe fn fionread(fd: RawFd) -&gt; Result&lt;u32&gt; {\n /// This function is unsafe because it operates on a raw file descriptor.\n /// It&#39;s provided, because std::io::Seek requires a mutable borrow.\n pub unsafe fn tell(fd: RawFd) -&gt; Result&lt;u64&gt; {\n\n-    let offset: i64 = Error::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?;\n+    let offset: i64 = Error::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?.into();\n     Ok(offset.try_into()?)\n }\n</pre></div>\n\n\n<p>and thank you for the offer, I'm totally new to rust and might need a bit of help with the other error. The first one was simple, since the compiler error message told me exactly what to do. </p>\n</blockquote>",
        "id": 189725561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583349897
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594832211\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-594832211\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>No probs, perfect opportunity to learn some Rust then!</p>\n<p>Actually, I'd prefer if you submitted a separate PR either with #1226 as base, or waited until that one lands (which should be sometime today/tomorrow). This way we'd have contexts separated which should aid the readability of what's going on in <code>wasmtime</code> :-)</p>\n</blockquote>",
        "id": 189733717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583355179
    },
    {
        "content": "<p>kubkon assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a> (assigned to kubkon):</p>\n<blockquote>\n<p>git clone the repo, cd wasmtime/crates/wasi-common/yanix and execute cargo build fails with this beauty: </p>\n<div class=\"codehilite\"><pre><span></span>crates/wasi-common/yanix $ cargo build\n    Updating crates.io index\n  Downloaded cfg-if v0.1.10\n  Downloaded thiserror v1.0.11\n  Downloaded libc v0.2.67\n  Downloaded log v0.4.8\n  Downloaded bitflags v1.2.1\n  Downloaded thiserror-impl v1.0.11\n  Downloaded proc-macro2 v1.0.8\n  Downloaded quote v1.0.2\n  Downloaded unicode-xid v0.2.0\n  Downloaded syn v1.0.15\n   Compiling proc-macro2 v1.0.8\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.15\n   Compiling bitflags v1.2.1\n   Compiling libc v0.2.67\n   Compiling log v0.4.8\n   Compiling cfg-if v0.1.10\n   Compiling quote v1.0.2\n   Compiling thiserror-impl v1.0.11\n   Compiling thiserror v1.0.11\n   Compiling yanix v0.12.0 (/home/tim/wasmtime/crates/wasi-common/yanix)\nerror[E0308]: try expression alternatives have incompatible types\n   --&gt; crates/wasi-common/yanix/src/file.rs:247:23\n    |\n247 |     let offset: i64 = Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                       |\n    |                       expected `i64`, found `i32`\n    |                       help: you can convert an `i32` to `i64`: `Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?.into()`\n\nerror[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:10:17\n   |\n10 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `yanix`.\n</pre></div>\n\n\n<p>aarch64 seems fine. </p>\n<p>rustc is v1.41.1 with llvm-9</p>\n</blockquote>",
        "id": 189772004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583399601
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-595165685\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-595165685\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>with the rebased source tree, and when #1231 is applied, the second error remains: </p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:10:17\n   |\n10 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n</pre></div>\n\n\n<p>I tried to switch to <code>from_raw(loc: i32)</code> in that line, since i64 seems to be wrong, but that doesn't seem to solve anything :/</p>\n</blockquote>",
        "id": 189779151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583405651
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596663896\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596663896\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>still struggeling, five new regressions since <a href=\"https://github.com/bytecodealliance/wasmtime/commit/061390ee1b1085a2191019d2219da730ec62485f\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/commit/061390ee1b1085a2191019d2219da730ec62485f\">https://github.com/bytecodealliance/wasmtime/commit/061390ee1b1085a2191019d2219da730ec62485f</a></p>\n<div class=\"codehilite\"><pre><span></span>/tmp/wasmtime/crates/wasi-common/yanix $ cargo build --target armv7-unknown-linux-gnueabihf\n   Compiling libc v0.2.67\n   Compiling cfg-if v0.1.10\n   Compiling bitflags v1.2.1\n   Compiling log v0.4.8\n   Compiling filetime v0.2.8\n   Compiling yanix v0.12.0 (/tmp/wasmtime/crates/wasi-common/yanix)\nerror[E0308]: mismatched types\n  --&gt; crates/wasi-common/yanix/src/filetime.rs:18:29\n   |\n18 |                     tv_sec: ft.seconds(),\n   |                             ^^^^^^^^^^^^ expected `i32`, found `i64`\n\nerror[E0308]: mismatched types\n  --&gt; crates/wasi-common/yanix/src/filetime.rs:19:30\n   |\n19 |                     tv_nsec: i64::from(ft.nanoseconds()),\n   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `i64`\n\nerror[E0308]: mismatched types\n  --&gt; crates/wasi-common/yanix/src/filetime.rs:72:22\n   |\n72 |             tv_nsec: UTIME_NOW,\n   |                      ^^^^^^^^^ expected `i32`, found `i64`\n\nerror[E0308]: mismatched types\n  --&gt; crates/wasi-common/yanix/src/filetime.rs:76:22\n   |\n76 |             tv_nsec: UTIME_OMIT,\n   |                      ^^^^^^^^^^ expected `i32`, found `i64`\n\nerror[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:13:17\n   |\n13 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror[E0308]: mismatched types\n  --&gt; crates/wasi-common/yanix/src/sys/linux/utimesat.rs:39:17\n   |\n39 |         tv_sec: ft.seconds(),\n   |                 ^^^^^^^^^^^^ expected `i32`, found `i64`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `yanix`.\n\nTo learn more, run the command again with --verbose.\n</pre></div>\n\n\n</blockquote>",
        "id": 190094069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583774323
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596669014\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596669014\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>@kubkon if you happen to commit further changes to yanix, can you please do a testrun with <code>cargo build --target armv7-unknown-linux-gnueabihf</code> before you push the changes, to prevent further breakage? </p>\n</blockquote>",
        "id": 190095104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583774864
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596774259\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596774259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>@stefson OK, it's good that these have surfaced now. It looks like we might have to make certain targeted adjustments for <code>armv7-unknown-linux-gnueabihf</code>. Is this a 32bit architecture?</p>\n</blockquote>",
        "id": 190116655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583787276
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596779506\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-596779506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>yes, it is 32bit, with hardfloat. </p>\n<p>64bit is aarch64-unknown-linux-gnu (passes fine) </p>\n</blockquote>",
        "id": 190117825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583788031
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-597064014\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-597064014\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>Should now be fixed with #1269 :-)</p>\n</blockquote>",
        "id": 190166961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583843984
    },
    {
        "content": "<p>stefson <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-597068623\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219#issuecomment-597068623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a>:</p>\n<blockquote>\n<p>That's right, the yanix crate does now compile just fine. Thank you for helping with this! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 190167775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583844680
    },
    {
        "content": "<p>kubkon closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1219\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1219\">Issue #1219</a> (assigned to kubkon):</p>\n<blockquote>\n<p>git clone the repo, cd wasmtime/crates/wasi-common/yanix and execute cargo build fails with this beauty: </p>\n<div class=\"codehilite\"><pre><span></span>crates/wasi-common/yanix $ cargo build\n    Updating crates.io index\n  Downloaded cfg-if v0.1.10\n  Downloaded thiserror v1.0.11\n  Downloaded libc v0.2.67\n  Downloaded log v0.4.8\n  Downloaded bitflags v1.2.1\n  Downloaded thiserror-impl v1.0.11\n  Downloaded proc-macro2 v1.0.8\n  Downloaded quote v1.0.2\n  Downloaded unicode-xid v0.2.0\n  Downloaded syn v1.0.15\n   Compiling proc-macro2 v1.0.8\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.15\n   Compiling bitflags v1.2.1\n   Compiling libc v0.2.67\n   Compiling log v0.4.8\n   Compiling cfg-if v0.1.10\n   Compiling quote v1.0.2\n   Compiling thiserror-impl v1.0.11\n   Compiling thiserror v1.0.11\n   Compiling yanix v0.12.0 (/home/tim/wasmtime/crates/wasi-common/yanix)\nerror[E0308]: try expression alternatives have incompatible types\n   --&gt; crates/wasi-common/yanix/src/file.rs:247:23\n    |\n247 |     let offset: i64 = Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                       |\n    |                       expected `i64`, found `i32`\n    |                       help: you can convert an `i32` to `i64`: `Errno::from_result(libc::lseek(fd, 0, libc::SEEK_CUR))?.into()`\n\nerror[E0277]: the trait bound `i32: std::convert::From&lt;i64&gt;` is not satisfied\n  --&gt; crates/wasi-common/yanix/src/sys/linux/mod.rs:10:17\n   |\n10 |         Ok(Self(loc))\n   |                 ^^^ the trait `std::convert::From&lt;i64&gt;` is not implemented for `i32`\n   |\n   = help: the following implementations were found:\n             &lt;i32 as std::convert::From&lt;bool&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i16&gt;&gt;\n             &lt;i32 as std::convert::From&lt;i8&gt;&gt;\n             &lt;i32 as std::convert::From&lt;std::num::NonZeroI32&gt;&gt;\n           and 2 others\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;i32&gt;` for `i64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\nerror: could not compile `yanix`.\n</pre></div>\n\n\n<p>aarch64 seems fine. </p>\n<p>rustc is v1.41.1 with llvm-9</p>\n</blockquote>",
        "id": 190206853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583864342
    }
]