[
    {
        "content": "<p>NobodyXu opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>wasmtime compile</code> currently generates an ELF on Linux/Mac but it cannot be executed from cmdline as a regular executable.</p>\n<p>I would like a new option there to generate an actually runnable executable.</p>\n<h4>Benefit</h4>\n<p>This issue originally stems from <a href=\"https://github.com/ryankurte/cargo-binstall\"><code>cargo-binstall</code></a>, a cmdline utility similar to <code>cargo-install</code> except that <code>cargo-binstall</code> installs binaries instead of compiling everything from source for rust binaries.</p>\n<p>It can either install it from the url specified in the <code>Cargo.tom</code> of the upstream, or from <a href=\"https://github.com/alsuren/cargo-quickinstall/\"><code>cargo-quickinstall</code></a>, or fallback to <code>cargo-install</code>.</p>\n<p>We now want to support installation of wasm binaries as a fallback if the native executable isn't available for various reasons <a href=\"https://github.com/ryankurte/cargo-binstall/issues/246\">https://github.com/ryankurte/cargo-binstall/issues/246</a> and a problem we faced is that the wasm executable requires users to launch them using an wasm interpreter or using <code>binfmt_misc</code> on Linux.</p>\n<p>We would have to wrap the wasm in a script to launch it, which makes the feature harder to implement and more prune to error.<br>\n<code>binfmt_misc</code> on the other hand is only available on Linux and not every user configure that on installation.</p>\n<p>We tried <code>wasm compile</code>, but the native binaries it generated cannot be run directly from cmdline.</p>\n<h4>Implementation</h4>\n<p>Since wasm can already generates an ELF on linux, I think it won't be too hard to actually generate something runnable from cmdline and can be used as any other native executables.</p>\n<p>Though I am not familiar with the internal designs of wasmtime at all and could be wrong.</p>\n<h4>Alternatives</h4>\n<p>A universal way to run wasm binaries without having to specify the interpreters on Linux/Mac/Windows?</p>\n</blockquote>",
        "id": 291421912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659178269
    },
    {
        "content": "<p>NobodyXu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>wasmtime compile</code> currently generates an ELF on Linux/Mac but it cannot be executed from cmdline as a regular executable.</p>\n<p>I would like a new option there to generate an actually runnable executable.</p>\n<h4>Benefit</h4>\n<p>This issue originally stems from <a href=\"https://github.com/ryankurte/cargo-binstall\"><code>cargo-binstall</code></a>, a cmdline utility similar to <code>cargo-install</code> except that <code>cargo-binstall</code> installs binaries instead of compiling everything from source for rust binaries.</p>\n<p>It can either install it from the url specified in the <code>Cargo.tom</code> of the upstream, or from <a href=\"https://github.com/alsuren/cargo-quickinstall/\"><code>cargo-quickinstall</code></a>, or fallback to <code>cargo-install</code>.</p>\n<p>We now want to support installation of wasm binaries as a fallback if the native executable isn't available for various reasons <a href=\"https://github.com/ryankurte/cargo-binstall/issues/246\">https://github.com/ryankurte/cargo-binstall/issues/246</a> and a problem we faced is that the wasm executable requires users to launch them using an wasm interpreter or using <code>binfmt_misc</code> on Linux.</p>\n<p>We would have to wrap the wasm in a script to launch it, which makes the feature harder to implement and more prune to error.<br>\n<code>binfmt_misc</code> on the other hand is only available on Linux and not every user configure that on installation.</p>\n<p>We tried <code>wasm compile</code>, but the native binaries it generated cannot be run directly from cmdline.</p>\n<h4>Implementation</h4>\n<p>Since wasm can already generates an ELF on linux, I think it won't be too hard to actually generate something runnable from cmdline and can be used as any other native executables.</p>\n<p>Though I am not familiar with the internal designs of wasmtime at all and could be wrong.</p>\n<h4>Alternatives</h4>\n<p>A universal way to run wasm binaries without having to specify the interpreters on Linux/Mac/Windows.</p>\n<p>We want to use the wasm binaries as if it is a native executable.</p>\n</blockquote>",
        "id": 291421967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659178331
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200135223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<blockquote>\n<p>Since wasm can already generates an ELF on linux, I think it won't be too hard to actually generate something runnable from cmdline and can be used as any other native executables.</p>\n</blockquote>\n<p>The ELF files are dependent on the wasmtime runtime for everything from handling traps, to managing the linear memory and tables, to calling wasi api's. Generating executable files would require embedding wasmtime inside the executables.</p>\n</blockquote>",
        "id": 291422094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659178562
    },
    {
        "content": "<p>NobodyXu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200137108\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Since wasm can already generates an ELF on linux, I think it won't be too hard to actually generate something runnable from cmdline and can be used as any other native executables.</p>\n</blockquote>\n<p>The ELF files are dependent on the wasmtime runtime for everything from handling traps, to managing the linear memory and tables, to calling wasi api's. Generating executable files would require embedding wasmtime inside the executables.</p>\n</blockquote>\n<p>Can we split that part as a dynamic library and let the generated executable to depend on that?</p>\n</blockquote>",
        "id": 291422221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659178719
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200137589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<p>Probably. A part of it would need to be embedded in the executable though to invoke wasmtime. In addition you would need to make sure that the dylib version matches the version of wasmtime that compiled it.</p>\n</blockquote>",
        "id": 291422562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659178944
    },
    {
        "content": "<p>NobodyXu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200145272\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<blockquote>\n<p>In addition you would need to make sure that the dylib version matches the version of wasmtime that compiled it.</p>\n</blockquote>\n<p>Right, I forgot about that part.</p>\n<p>So I think it is better to embed the wasi binary to a script and let the script dynamically detect the wasm runtime.<br>\nWill that interfere with wasmtime's caching system @bjorn3 ?</p>\n</blockquote>",
        "id": 291425315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659182510
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200146123\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<p>Not sure. I think wasmtime hashes the wasm binary to determine the cache key, in which case caching should work.</p>\n</blockquote>",
        "id": 291425540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659182835
    },
    {
        "content": "<p>NobodyXu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1200147721\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<blockquote>\n<p>Not sure. I think wasmtime hashes the wasm binary to determine the cache key, in which case caching should work.</p>\n</blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 291425961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659183493
    },
    {
        "content": "<p>NobodyXu closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><code>wasmtime compile</code> currently generates an ELF on Linux/Mac but it cannot be executed from cmdline as a regular executable.</p>\n<p>I would like a new option there to generate an actually runnable executable.</p>\n<h4>Benefit</h4>\n<p>This issue originally stems from <a href=\"https://github.com/ryankurte/cargo-binstall\"><code>cargo-binstall</code></a>, a cmdline utility similar to <code>cargo-install</code> except that <code>cargo-binstall</code> installs binaries instead of compiling everything from source for rust binaries.</p>\n<p>It can either install it from the url specified in the <code>Cargo.tom</code> of the upstream, or from <a href=\"https://github.com/alsuren/cargo-quickinstall/\"><code>cargo-quickinstall</code></a>, or fallback to <code>cargo-install</code>.</p>\n<p>We now want to support installation of wasm binaries as a fallback if the native executable isn't available for various reasons <a href=\"https://github.com/ryankurte/cargo-binstall/issues/246\">https://github.com/ryankurte/cargo-binstall/issues/246</a> and a problem we faced is that the wasm executable requires users to launch them using an wasm interpreter or using <code>binfmt_misc</code> on Linux.</p>\n<p>We would have to wrap the wasm in a script to launch it, which makes the feature harder to implement and more prune to error.<br>\n<code>binfmt_misc</code> on the other hand is only available on Linux and not every user configure that on installation.</p>\n<p>We tried <code>wasm compile</code>, but the native binaries it generated cannot be run directly from cmdline.</p>\n<h4>Implementation</h4>\n<p>Since wasm can already generates an ELF on linux, I think it won't be too hard to actually generate something runnable from cmdline and can be used as any other native executables.</p>\n<p>Though I am not familiar with the internal designs of wasmtime at all and could be wrong.</p>\n<h4>Alternatives</h4>\n<p>A universal way to run wasm binaries without having to specify the interpreters on Linux/Mac/Windows.</p>\n<p>We want to use the wasm binaries as if it is a native executable.</p>\n</blockquote>",
        "id": 291427755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659185957
    },
    {
        "content": "<p>liudonghua123 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1272329778\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<p>I would like this feature too. I see <a href=\"https://github.com/wasmerio/wasmer/\"><code>wasmer</code></a> has this feature already.</p>\n<div class=\"codehilite\" data-code-language=\"cmd\"><pre><span></span><code>C:\\Users\\Liu.D.H&gt;wasmer compile --help\nwasmer-compile 2.3.0\nCompile a WebAssembly binary\n\nUSAGE:\n    wasmer compile [FLAGS] [OPTIONS] &lt;FILE&gt; -o &lt;OUTPUT PATH&gt;\n\nFLAGS:\n        --enable-all                Enable support for all pre-standard proposals\n        --enable-bulk-memory        Enable support for the bulk memory proposal\n        --cranelift                 Use Cranelift compiler\n        --dylib                     Use the Dylib Engine\n        --enable-verifier           Enable compiler internal verification\n    -h, --help                      Prints help information\n        --llvm                      Use LLVM compiler\n        --enable-multi-value        Enable support for the multi value proposal\n        --enable-reference-types    Enable support for the reference types proposal\n        --enable-simd               Enable support for the SIMD proposal\n        --singlepass                Use Singlepass compiler\n        --staticlib                 Use the Staticlib Engine\n        --enable-threads            Enable support for the threads proposal\n        --universal                 Use the Universal Engine\n    -V, --version                   Prints version information\n\nOPTIONS:\n        --header &lt;HEADER PATH&gt;      Output path for generated header file\n    -o &lt;OUTPUT PATH&gt;                Output file\n    -m &lt;cpu-features&gt;...\n        --target &lt;target-triple&gt;    Compilation Target triple\n\nARGS:\n    &lt;FILE&gt;    Input file\n\nC:\\Users\\Liu.D.H&gt;\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"cmd\"><pre><span></span><code>C:\\Users\\Liu.D.H&gt;wasmtime compile --help\nwasmtime-compile 1.0.0\nCompiles a WebAssembly module\n\nUSAGE:\n    wasmtime compile [OPTIONS] &lt;MODULE&gt;\n\nARGS:\n    &lt;MODULE&gt;\n            The path of the WebAssembly to compile\n\nOPTIONS:\n        --config &lt;CONFIG_PATH&gt;\n            Use specified configuration file\n\n        --cranelift-enable &lt;SETTING&gt;\n            Enable a Cranelift boolean setting or preset.\n            Use `wasmtime settings` to list Cranelift settings for a target.\n\n        --cranelift-set &lt;NAME=VALUE&gt;\n            Set a Cranelift setting to a given value.\n            Use `wasmtime settings` to list Cranelift settings for a target.\n\n        --disable-address-map\n            Disables the on-by-default address map from native code to wasm code\n\n        --disable-cache\n            Disable cache system\n\n        --disable-logging\n            Disable logging\n\n        --disable-memory-init-cow\n            Disables the default of attempting to initialize linear memory via a copy-on-write\n            mapping\n\n        --dynamic-memory-guard-size &lt;SIZE&gt;\n            Byte size of the guard region after dynamic memories are allocated\n\n        --enable-cranelift-debug-verifier\n            Enable Cranelift's internal debug verifier (expensive)\n\n        --enable-cranelift-nan-canonicalization\n            Enable Cranelift's internal NaN canonicalization\n\n        --epoch-interruption\n            Executing wasm code will yield when a global epoch counter changes, allowing for async\n            operation without blocking the executor\n\n        --fuel &lt;N&gt;\n            Enable execution fuel with N units fuel, where execution will trap after running out of\n            fuel.\n\n            Most WebAssembly instructions consume 1 unit of fuel. Some instructions, such as `nop`,\n            `drop`, `block`, and `loop`, consume 0 units, as any execution cost associated with them\n            involves other instructions which do consume fuel.\n\n    -g\n            Generate debug information\n\n    -h, --help\n            Print help information\n\n        --jitdump\n            Generate jitdump file (supported on --features=profiling build)\n\n        --log-to-files\n            Log to per-thread log files instead of stderr\n\n    -o, --output &lt;OUTPUT&gt;\n            The path of the output compiled module; defaults to &lt;MODULE&gt;.cwasm\n\n    -O, --optimize\n            Run optimization passes on translated functions, on by default\n\n        --opt-level &lt;LEVEL&gt;\n            Optimization level for generated functions\n            Supported levels: 0 (none), 1, 2 (most), or s (size); default is \"most\"\n\n        --pooling-allocator\n            Enables the pooling allocator, in place of the on-demand allocator\n\n        --static-memory-forced\n            Force using a \"static\" style for all wasm memories\n\n        --static-memory-guard-size &lt;SIZE&gt;\n            Byte size of the guard region after static memories are allocated\n\n        --static-memory-maximum-size &lt;MAXIMUM&gt;\n            Maximum size in bytes of wasm memory before it becomes dynamically relocatable instead\n            of up-front-reserved\n\n        --target &lt;TARGET&gt;\n            The target triple; default is the host triple\n\n    -V, --version\n            Print version information\n\n        --vtune\n            Generate vtune (supported on --features=vtune build)\n\n        --wasi-modules &lt;MODULE,MODULE,...&gt;\n            Enables or disables WASI modules\n\n        --wasm-features &lt;FEATURE,FEATURE,...&gt;\n            Enables or disables WebAssembly features\n\nBy default, no CPU features or presets will be enabled for the compilation.\n\nSupported values for `--wasm-features`:\n\nall               enables all supported WebAssembly features\nbulk-memory       enables support for bulk memory instructions\nmulti-memory      enables support for the multi-memory proposal\nmulti-value       enables support for multi-value functions\nreference-types   enables support for reference types\nsimd              enables support for proposed SIMD instructions\nthreads           enables support for WebAssembly threads\nmemory64          enables support for 64-bit memories\n\nSupported values for `--wasi-modules`:\n\ndefault                    enables all stable WASI modules (no experimental modules)\nwasi-common                enables support for the WASI common APIs, see\nhttps://github.com/WebAssembly/WASI\nexperimental-wasi-nn       enables support for the WASI neural network API (experimental), see\nhttps://github.com/WebAssembly/wasi-nn\nexperimental-wasi-crypto   enables support for the WASI cryptography APIs (experimental), see\nhttps://github.com/WebAssembly/wasi-crypto\n\nFeatures prefixed with '-' will be disabled.\n\nUsage examples:\n\nCompiling a WebAssembly module for the current platform:\n\n  wasmtime compile example.wasm\n\nSpecifying the output file:\n\n  wasmtime compile -o output.cwasm input.wasm\n\nCompiling for a specific platform (Linux) and CPU preset (Skylake):\n\n  wasmtime compile --target x86_64-unknown-linux --cranelift-enable skylake foo.wasm\n\nC:\\Users\\Liu.D.H&gt;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303024394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665238485
    },
    {
        "content": "<p>liudonghua123 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563#issuecomment-1272329778\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4563\">issue #4563</a>:</p>\n<blockquote>\n<p>I would like this feature too. I see <a href=\"https://github.com/wasmerio/wasmer/\"><code>wasmer</code></a> has this feature already. see <a href=\"https://docs.wasmer.io/ecosystem/wasmer/usage#wasmer-create-exe\">https://docs.wasmer.io/ecosystem/wasmer/usage#wasmer-create-exe</a>.</p>\n<div class=\"codehilite\" data-code-language=\"cmd\"><pre><span></span><code>C:\\Users\\Liu.D.H&gt;wasmer compile --help\nwasmer-compile 2.3.0\nCompile a WebAssembly binary\n\nUSAGE:\n    wasmer compile [FLAGS] [OPTIONS] &lt;FILE&gt; -o &lt;OUTPUT PATH&gt;\n\nFLAGS:\n        --enable-all                Enable support for all pre-standard proposals\n        --enable-bulk-memory        Enable support for the bulk memory proposal\n        --cranelift                 Use Cranelift compiler\n        --dylib                     Use the Dylib Engine\n        --enable-verifier           Enable compiler internal verification\n    -h, --help                      Prints help information\n        --llvm                      Use LLVM compiler\n        --enable-multi-value        Enable support for the multi value proposal\n        --enable-reference-types    Enable support for the reference types proposal\n        --enable-simd               Enable support for the SIMD proposal\n        --singlepass                Use Singlepass compiler\n        --staticlib                 Use the Staticlib Engine\n        --enable-threads            Enable support for the threads proposal\n        --universal                 Use the Universal Engine\n    -V, --version                   Prints version information\n\nOPTIONS:\n        --header &lt;HEADER PATH&gt;      Output path for generated header file\n    -o &lt;OUTPUT PATH&gt;                Output file\n    -m &lt;cpu-features&gt;...\n        --target &lt;target-triple&gt;    Compilation Target triple\n\nARGS:\n    &lt;FILE&gt;    Input file\n\nC:\\Users\\Liu.D.H&gt;\nC:\\Users\\Liu.D.H&gt;wasmer create-exe --help\nwasmer-create-exe 2.3.0\nCompile a WebAssembly binary into a native executable\n\nUSAGE:\n    wasmer create-exe [FLAGS] [OPTIONS] &lt;FILE&gt; -o &lt;OUTPUT PATH&gt;\n\nFLAGS:\n        --enable-all                Enable support for all pre-standard proposals\n        --enable-bulk-memory        Enable support for the bulk memory proposal\n        --cranelift                 Use Cranelift compiler\n        --enable-verifier           Enable compiler internal verification\n    -h, --help                      Prints help information\n        --llvm                      Use LLVM compiler\n        --enable-multi-value        Enable support for the multi value proposal\n        --enable-reference-types    Enable support for the reference types proposal\n        --enable-simd               Enable support for the SIMD proposal\n        --singlepass                Use Singlepass compiler\n        --enable-threads            Enable support for the threads proposal\n    -V, --version                   Prints version information\n\nOPTIONS:\n    -o &lt;OUTPUT PATH&gt;                Output file\n    -m &lt;cpu-features&gt;...\n    -l &lt;libraries&gt;...               Additional libraries to link against. This is useful for fixing linker errors that\n                                    may occur on some systems\n        --target &lt;target-triple&gt;    Compilation Target triple\n\nARGS:\n    &lt;FILE&gt;    Input file\n\nC:\\Users\\Liu.D.H&gt;\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"cmd\"><pre><span></span><code>C:\\Users\\Liu.D.H&gt;wasmtime compile --help\nwasmtime-compile 1.0.0\nCompiles a WebAssembly module\n\nUSAGE:\n    wasmtime compile [OPTIONS] &lt;MODULE&gt;\n\nARGS:\n    &lt;MODULE&gt;\n            The path of the WebAssembly to compile\n\nOPTIONS:\n        --config &lt;CONFIG_PATH&gt;\n            Use specified configuration file\n\n        --cranelift-enable &lt;SETTING&gt;\n            Enable a Cranelift boolean setting or preset.\n            Use `wasmtime settings` to list Cranelift settings for a target.\n\n        --cranelift-set &lt;NAME=VALUE&gt;\n            Set a Cranelift setting to a given value.\n            Use `wasmtime settings` to list Cranelift settings for a target.\n\n        --disable-address-map\n            Disables the on-by-default address map from native code to wasm code\n\n        --disable-cache\n            Disable cache system\n\n        --disable-logging\n            Disable logging\n\n        --disable-memory-init-cow\n            Disables the default of attempting to initialize linear memory via a copy-on-write\n            mapping\n\n        --dynamic-memory-guard-size &lt;SIZE&gt;\n            Byte size of the guard region after dynamic memories are allocated\n\n        --enable-cranelift-debug-verifier\n            Enable Cranelift's internal debug verifier (expensive)\n\n        --enable-cranelift-nan-canonicalization\n            Enable Cranelift's internal NaN canonicalization\n\n        --epoch-interruption\n            Executing wasm code will yield when a global epoch counter changes, allowing for async\n            operation without blocking the executor\n\n        --fuel &lt;N&gt;\n            Enable execution fuel with N units fuel, where execution will trap after running out of\n            fuel.\n\n            Most WebAssembly instructions consume 1 unit of fuel. Some instructions, such as `nop`,\n            `drop`, `block`, and `loop`, consume 0 units, as any execution cost associated with them\n            involves other instructions which do consume fuel.\n\n    -g\n            Generate debug information\n\n    -h, --help\n            Print help information\n\n        --jitdump\n            Generate jitdump file (supported on --features=profiling build)\n\n        --log-to-files\n            Log to per-thread log files instead of stderr\n\n    -o, --output &lt;OUTPUT&gt;\n            The path of the output compiled module; defaults to &lt;MODULE&gt;.cwasm\n\n    -O, --optimize\n            Run optimization passes on translated functions, on by default\n\n        --opt-level &lt;LEVEL&gt;\n            Optimization level for generated functions\n            Supported levels: 0 (none), 1, 2 (most), or s (size); default is \"most\"\n\n        --pooling-allocator\n            Enables the pooling allocator, in place of the on-demand allocator\n\n        --static-memory-forced\n            Force using a \"static\" style for all wasm memories\n\n        --static-memory-guard-size &lt;SIZE&gt;\n            Byte size of the guard region after static memories are allocated\n\n        --static-memory-maximum-size &lt;MAXIMUM&gt;\n            Maximum size in bytes of wasm memory before it becomes dynamically relocatable instead\n            of up-front-reserved\n\n        --target &lt;TARGET&gt;\n            The target triple; default is the host triple\n\n    -V, --version\n            Print version information\n\n        --vtune\n            Generate vtune (supported on --features=vtune build)\n\n        --wasi-modules &lt;MODULE,MODULE,...&gt;\n            Enables or disables WASI modules\n\n        --wasm-features &lt;FEATURE,FEATURE,...&gt;\n            Enables or disables WebAssembly features\n\nBy default, no CPU features or presets will be enabled for the compilation.\n\nSupported values for `--wasm-features`:\n\nall               enables all supported WebAssembly features\nbulk-memory       enables support for bulk memory instructions\nmulti-memory      enables support for the multi-memory proposal\nmulti-value       enables support for multi-value functions\nreference-types   enables support for reference types\nsimd              enables support for proposed SIMD instructions\nthreads           enables support for WebAssembly threads\nmemory64          enables support for 64-bit memories\n\nSupported values for `--wasi-modules`:\n\ndefault                    enables all stable WASI modules (no experimental modules)\nwasi-common                enables support for the WASI common APIs, see\nhttps://github.com/WebAssembly/WASI\nexperimental-wasi-nn       enables support for the WASI neural network API (experimental), see\nhttps://github.com/WebAssembly/wasi-nn\nexperimental-wasi-crypto   enables support for the WASI cryptography APIs (experimental), see\nhttps://github.com/WebAssembly/wasi-crypto\n\nFeatures prefixed with '-' will be disabled.\n\nUsage examples:\n\nCompiling a WebAssembly module for the current platform:\n\n  wasmtime compile example.wasm\n\nSpecifying the output file:\n\n  wasmtime compile -o output.cwasm input.wasm\n\nCompiling for a specific platform (Linux) and CPU preset (Skylake):\n\n  wasmtime compile --target x86_64-unknown-linux --cranelift-enable skylake foo.wasm\n\nC:\\Users\\Liu.D.H&gt;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 303024635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665238608
    }
]