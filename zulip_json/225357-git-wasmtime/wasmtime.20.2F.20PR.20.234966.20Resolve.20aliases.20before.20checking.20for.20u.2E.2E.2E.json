[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966\">PR #4966</a> from <code>resolve-aliases</code> to <code>main</code>:</p>\n<blockquote>\n<p>At control-flow join points, cranelift-frontend's SSA builder currently checks to see if only one definition of a variable reaches the current block. If so, it can eliminate the corresponding block parameter and use the original def directly. It implements this by turning the block parameter into an alias for the original value.</p>\n<p>However, it didn't resolve aliases during this check, except after it had already determined that there was only one definition.</p>\n<p>Resolving aliases first instead allows it to detect that more block parameters are redundant. And as more block parameters get converted to aliases, later blocks can see common definitions from further away, so this has a compounding effect.</p>\n<p>According to <code>valgrind --tool=dhat</code>, this is a significant memory savings. On the pulldown-cmark benchmark from Sightglass:</p>\n<ul>\n<li>15.3% (1.9MiB) less memory allocated at maximum heap</li>\n<li>4.1% (6.7MiB) less memory allocated in total</li>\n<li>9.8% (57MiB) fewer bytes read</li>\n<li>12.6% (36MiB) fewer bytes written</li>\n<li>5.4% fewer instructions retired</li>\n<li>1.04x faster by instructions retired (per Sightglass/perf)</li>\n<li>1.03x to 1.04x faster by CPU cycles (per Sightglass/perf)</li>\n<li>1.03 ± 0.01 times faster by CPU time (per hyperfine)</li>\n<li>1.04x faster by cache accesses (per Sightglass/perf)</li>\n</ul>\n<p>On the bz2 benchmark:</p>\n<ul>\n<li>1.06x faster by instructions retired (per Sightglass/perf)</li>\n<li>1.05x faster by CPU cycles (per Sightglass/perf)</li>\n<li>1.04 ± 0.01 times faster by CPU time (per hyperfine)</li>\n<li>1.02x to 1.03x faster by cache accesses (per Sightglass/perf)</li>\n</ul>\n<p>Even on the largest benchmark in Sightglass (spidermonkey.wasm), this is a measurable improvement:</p>\n<ul>\n<li>1.03x faster by instructions retired (per Sightglass/perf)</li>\n<li>1.02x faster by CPU cycles (per Sightglass/perf)</li>\n<li>1.02 ± 0.00 times faster by CPU time (per hyperfine)</li>\n</ul>\n<p>There was no significant difference in cache misses for any benchmark, according to Sightglass/perf.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 300924100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664241467
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966\">PR #4966</a>.</p>",
        "id": 300924101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664241467
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966\">PR #4966</a>.</p>",
        "id": 300924102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664241467
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#pullrequestreview-1122048116\">PR review</a>.</p>",
        "id": 301011204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664286999
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#discussion_r981282567\">PR review comment</a>:</p>\n<blockquote>\n<p>Why isn't this reachable anymore?</p>\n</blockquote>",
        "id": 301011205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664286999
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#pullrequestreview-1122253398\">PR review</a>.</p>",
        "id": 301040874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664293716
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#discussion_r981419764\">PR review comment</a>:</p>\n<blockquote>\n<p>Good question. Two pieces:</p>\n<ul>\n<li><code>ZeroOneOrMore::One(pred_val)</code> comes from the above <code>for pred_val in self</code> loop, which already resolved aliases. So it's guaranteed at this point that resolving aliases is a no-op.</li>\n<li>The above loop filters out any <code>pred_val</code> which is equal to <code>sentinel</code>.</li>\n</ul>\n<p>So instead of being a special case of <code>ZeroOneOrMore::One</code>, this is now just another case of <code>ZeroOneOrMore::Zero</code>. And that already had the <code>emit_zero</code>.</p>\n<p>But that case also takes care of two other things that weren't handled here: appending the current block to the layout if necessary, and adding this block to the side effects. So this does change behavior.</p>\n<p>I _think_ it was a bug that this case didn't also do those things. I also think it doesn't matter very much: this can only happen in unreachable blocks. As far as I understand, cranelift-wasm never generates unreachable blocks; does cg-clif?</p>\n</blockquote>",
        "id": 301040875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664293716
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#pullrequestreview-1122349035\">PR review</a>.</p>",
        "id": 301060234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664297403
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#discussion_r981485935\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the explanation! cg_clif does generate unreachable blocks in some cases.</p>\n</blockquote>",
        "id": 301060235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664297403
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966\">PR #4966</a>.</p>",
        "id": 301096256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664304902
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#pullrequestreview-1122527192\">PR review</a>.</p>",
        "id": 301096323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664304930
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#discussion_r981606874\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is worth noting in the git history so I'm adding this paragraph to the commit message:</p>\n<p>This also merges a special case, where there's exactly one unique non-sentinel definition but it's actually an alias for the sentinel, into the general case where all definitions are from the sentinel. As a result there's only one case that has to introduce a definition of the variable to zero.</p>\n</blockquote>",
        "id": 301096325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664304930
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966#pullrequestreview-1122689038\">PR review</a>.</p>",
        "id": 301116512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664312377
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4966\">PR #4966</a>.</p>",
        "id": 301116514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664312379
    }
]