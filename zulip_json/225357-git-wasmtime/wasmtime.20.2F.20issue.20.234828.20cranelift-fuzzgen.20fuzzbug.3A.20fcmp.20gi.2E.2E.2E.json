[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>Original report: <a href=\"https://oss-fuzz.com/testcase-detail/5662899036618752\">https://oss-fuzz.com/testcase-detail/5662899036618752</a></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Test case input&lt;/summary&gt;</p>\n<p>&lt;!-- Please base64-encode the input that libFuzzer generated, and paste it in the code-block below. This is required for us to reproduce the issue. --&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">YWlzY3RuIG8BXQAAe</span><span class=\"o\">/</span><span class=\"n\">HfLJGaiKD4</span><span class=\"o\">/</span><span class=\"n\">wAA6bZjQHhAcB7</span><span class=\"c1\">//wAHAAAA6bYgJgAB6fgAAAABAABK//8A</span>\n<span class=\"n\">ABgAAAD</span><span class=\"c1\">/////f///////////////////////////////////////////////////////////////</span>\n<span class=\"c1\">/////////////////ydV1sbWP9aCKgKCtgoFAGUAAAAAAAAAm/4p2gFG8J19fQAAAAAAAAAAAAAA</span>\n<span class=\"n\">AAAAAAAAAAAAAAAAAABlAWzzxkbacCrdpP</span><span class=\"c1\">//AAAAAAD6/wBDQ0P///////////////////////8A</span>\n<span class=\"n\">ZcYNRyYxRvSWnfAyAAAAADsgAakAfX0AAP</span><span class=\"o\">+</span><span class=\"n\">udf8AAA8AAAAAAPr</span><span class=\"o\">/</span><span class=\"n\">AENDQ0NDm5ubm5ubm5ubm5ub</span><span class=\"w\"></span>\n<span class=\"n\">m5ubm5ubm5ubm5ubfX3zfZubfQ</span><span class=\"o\">==</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I've minimized this to the following CLIF test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v3</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v78</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">NaN</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On x86-64, this call returns <code>false</code>; but on the interpreter it returns <code>true</code>. Those two implementations have disagreed at least back to June, so this doesn't seem to be due to any recent changes.</p>\n<p>I wasn't sure what the \"right\" answer is here so I wrote a quick wasm program for which wasmtime generates this CLIF instruction.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Equivalent wasm&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">le</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">nan</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This program doesn't trap either on wasmtime compiling for x86-64, or on wabt's wasm-interp, so I gather the Cranelift interpreter is the one giving the wrong answer here.</p>\n<p>@afonso360, can you look into this?</p>\n<p>I guess we should extend <code>cranelift/filetests/filetests/runtests/fcmp.clif</code> with NaN tests, and also start running that test file on the interpreter.</p>\n</blockquote>",
        "id": 296242064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661907224
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>Original report: <a href=\"https://oss-fuzz.com/testcase-detail/5662899036618752\">https://oss-fuzz.com/testcase-detail/5662899036618752</a></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Test case input&lt;/summary&gt;</p>\n<p>&lt;!-- Please base64-encode the input that libFuzzer generated, and paste it in the code-block below. This is required for us to reproduce the issue. --&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">YWlzY3RuIG8BXQAAe</span><span class=\"o\">/</span><span class=\"n\">HfLJGaiKD4</span><span class=\"o\">/</span><span class=\"n\">wAA6bZjQHhAcB7</span><span class=\"c1\">//wAHAAAA6bYgJgAB6fgAAAABAABK//8A</span>\n<span class=\"n\">ABgAAAD</span><span class=\"c1\">/////f///////////////////////////////////////////////////////////////</span>\n<span class=\"c1\">/////////////////ydV1sbWP9aCKgKCtgoFAGUAAAAAAAAAm/4p2gFG8J19fQAAAAAAAAAAAAAA</span>\n<span class=\"n\">AAAAAAAAAAAAAAAAAABlAWzzxkbacCrdpP</span><span class=\"c1\">//AAAAAAD6/wBDQ0P///////////////////////8A</span>\n<span class=\"n\">ZcYNRyYxRvSWnfAyAAAAADsgAakAfX0AAP</span><span class=\"o\">+</span><span class=\"n\">udf8AAA8AAAAAAPr</span><span class=\"o\">/</span><span class=\"n\">AENDQ0NDm5ubm5ubm5ubm5ub</span><span class=\"w\"></span>\n<span class=\"n\">m5ubm5ubm5ubm5ubfX3zfZubfQ</span><span class=\"o\">==</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I've minimized this to the following CLIF test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v3</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v78</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">NaN</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On x86-64, this call returns <code>false</code>; but on the interpreter it returns <code>true</code>. Those two implementations have disagreed at least back to June, so this doesn't seem to be due to any recent changes.</p>\n<p>I wasn't sure what the \"right\" answer is here so I wrote a quick wasm program for which wasmtime generates this CLIF instruction.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Equivalent wasm&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">le</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">nan</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This program doesn't trap either on wasmtime compiling for x86-64, or on wabt's wasm-interp, so I gather the Cranelift interpreter is the one giving the wrong answer here.</p>\n<p>@afonso360, can you look into this?</p>\n<p>I guess we should extend <code>cranelift/filetests/filetests/runtests/fcmp.clif</code> with NaN tests, and also start running that test file on the interpreter.</p>\n</blockquote>",
        "id": 296242065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661907224
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>Original report: <a href=\"https://oss-fuzz.com/testcase-detail/5662899036618752\">https://oss-fuzz.com/testcase-detail/5662899036618752</a></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Test case input&lt;/summary&gt;</p>\n<p>&lt;!-- Please base64-encode the input that libFuzzer generated, and paste it in the code-block below. This is required for us to reproduce the issue. --&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">YWlzY3RuIG8BXQAAe</span><span class=\"o\">/</span><span class=\"n\">HfLJGaiKD4</span><span class=\"o\">/</span><span class=\"n\">wAA6bZjQHhAcB7</span><span class=\"c1\">//wAHAAAA6bYgJgAB6fgAAAABAABK//8A</span>\n<span class=\"n\">ABgAAAD</span><span class=\"c1\">/////f///////////////////////////////////////////////////////////////</span>\n<span class=\"c1\">/////////////////ydV1sbWP9aCKgKCtgoFAGUAAAAAAAAAm/4p2gFG8J19fQAAAAAAAAAAAAAA</span>\n<span class=\"n\">AAAAAAAAAAAAAAAAAABlAWzzxkbacCrdpP</span><span class=\"c1\">//AAAAAAD6/wBDQ0P///////////////////////8A</span>\n<span class=\"n\">ZcYNRyYxRvSWnfAyAAAAADsgAakAfX0AAP</span><span class=\"o\">+</span><span class=\"n\">udf8AAA8AAAAAAPr</span><span class=\"o\">/</span><span class=\"n\">AENDQ0NDm5ubm5ubm5ubm5ub</span><span class=\"w\"></span>\n<span class=\"n\">m5ubm5ubm5ubm5ubfX3zfZubfQ</span><span class=\"o\">==</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I've minimized this to the following CLIF test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v3</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v78</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">NaN</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On x86-64, this call returns <code>false</code>; but on the interpreter it returns <code>true</code>. Those two implementations have disagreed at least back to June, so this doesn't seem to be due to any recent changes.</p>\n<p>I wasn't sure what the \"right\" answer is here so I wrote a quick wasm program for which wasmtime generates this CLIF instruction.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Equivalent wasm&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">le</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">nan</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This program doesn't trap either on wasmtime compiling for x86-64, or on wabt's wasm-interp, so I gather the Cranelift interpreter is the one giving the wrong answer here.</p>\n<p>@afonso360, can you look into this?</p>\n<p>I guess we should extend <code>cranelift/filetests/filetests/runtests/fcmp.clif</code> with NaN tests, and also start running that test file on the interpreter.</p>\n</blockquote>",
        "id": 296242066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661907224
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828#issuecomment-1233169620\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>AFAIK all comparisons involving a NaN (including those when both operands are NaNs) should return false, except for inequality.</p>\n</blockquote>",
        "id": 296403317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661963789
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828#issuecomment-1233178264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>That is true for the regular comparisons, however there are some <code>FloatCC::Unordered*</code> that invert that and always return true on NaN's.</p>\n</blockquote>",
        "id": 296405013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661964343
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828#issuecomment-1233178264\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>That is true for the regular comparisons, however there are some <code>FloatCC::Unordered*</code> that invert that and always return true on NaN's. That isn't the case here, this is a Ordered comparison, so we should be returning false as jamey mentions.</p>\n</blockquote>",
        "id": 296405677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661964543
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828#issuecomment-1233178264\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>That is true for the regular comparisons, however there are some <code>FloatCC::Unordered*</code> that invert that and always return true on NaN's. That isn't the case here, this is a Ordered comparison, so we should be returning <code>false</code> as jamey mentions.</p>\n</blockquote>",
        "id": 296405725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661964554
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828#issuecomment-1233178264\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>That is true for the regular comparisons, however there are some <code>FloatCC::Unordered*</code> that invert that and always return true on NaN's. That isn't the case here, this is a Ordered comparison, so we should be returning <code>false</code> as jameysharp mentions.</p>\n</blockquote>",
        "id": 296405867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661964602
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>Original report: <a href=\"https://oss-fuzz.com/testcase-detail/5662899036618752\">https://oss-fuzz.com/testcase-detail/5662899036618752</a></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Test case input&lt;/summary&gt;</p>\n<p>&lt;!-- Please base64-encode the input that libFuzzer generated, and paste it in the code-block below. This is required for us to reproduce the issue. --&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">YWlzY3RuIG8BXQAAe</span><span class=\"o\">/</span><span class=\"n\">HfLJGaiKD4</span><span class=\"o\">/</span><span class=\"n\">wAA6bZjQHhAcB7</span><span class=\"c1\">//wAHAAAA6bYgJgAB6fgAAAABAABK//8A</span>\n<span class=\"n\">ABgAAAD</span><span class=\"c1\">/////f///////////////////////////////////////////////////////////////</span>\n<span class=\"c1\">/////////////////ydV1sbWP9aCKgKCtgoFAGUAAAAAAAAAm/4p2gFG8J19fQAAAAAAAAAAAAAA</span>\n<span class=\"n\">AAAAAAAAAAAAAAAAAABlAWzzxkbacCrdpP</span><span class=\"c1\">//AAAAAAD6/wBDQ0P///////////////////////8A</span>\n<span class=\"n\">ZcYNRyYxRvSWnfAyAAAAADsgAakAfX0AAP</span><span class=\"o\">+</span><span class=\"n\">udf8AAA8AAAAAAPr</span><span class=\"o\">/</span><span class=\"n\">AENDQ0NDm5ubm5ubm5ubm5ub</span><span class=\"w\"></span>\n<span class=\"n\">m5ubm5ubm5ubm5ubfX3zfZubfQ</span><span class=\"o\">==</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I've minimized this to the following CLIF test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v3</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v78</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">NaN</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On x86-64, this call returns <code>false</code>; but on the interpreter it returns <code>true</code>. Those two implementations have disagreed at least back to June, so this doesn't seem to be due to any recent changes.</p>\n<p>I wasn't sure what the \"right\" answer is here so I wrote a quick wasm program for which wasmtime generates this CLIF instruction.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Equivalent wasm&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">le</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">nan</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This program doesn't trap either on wasmtime compiling for x86-64, or on wabt's wasm-interp, so I gather the Cranelift interpreter is the one giving the wrong answer here.</p>\n<p>@afonso360, can you look into this?</p>\n<p>I guess we should extend <code>cranelift/filetests/filetests/runtests/fcmp.clif</code> with NaN tests, and also start running that test file on the interpreter.</p>\n</blockquote>",
        "id": 296847066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133674
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4828\">issue #4828</a>:</p>\n<blockquote>\n<p>Original report: <a href=\"https://oss-fuzz.com/testcase-detail/5662899036618752\">https://oss-fuzz.com/testcase-detail/5662899036618752</a></p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Test case input&lt;/summary&gt;</p>\n<p>&lt;!-- Please base64-encode the input that libFuzzer generated, and paste it in the code-block below. This is required for us to reproduce the issue. --&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">YWlzY3RuIG8BXQAAe</span><span class=\"o\">/</span><span class=\"n\">HfLJGaiKD4</span><span class=\"o\">/</span><span class=\"n\">wAA6bZjQHhAcB7</span><span class=\"c1\">//wAHAAAA6bYgJgAB6fgAAAABAABK//8A</span>\n<span class=\"n\">ABgAAAD</span><span class=\"c1\">/////f///////////////////////////////////////////////////////////////</span>\n<span class=\"c1\">/////////////////ydV1sbWP9aCKgKCtgoFAGUAAAAAAAAAm/4p2gFG8J19fQAAAAAAAAAAAAAA</span>\n<span class=\"n\">AAAAAAAAAAAAAAAAAABlAWzzxkbacCrdpP</span><span class=\"c1\">//AAAAAAD6/wBDQ0P///////////////////////8A</span>\n<span class=\"n\">ZcYNRyYxRvSWnfAyAAAAADsgAakAfX0AAP</span><span class=\"o\">+</span><span class=\"n\">udf8AAA8AAAAAAPr</span><span class=\"o\">/</span><span class=\"n\">AENDQ0NDm5ubm5ubm5ubm5ub</span><span class=\"w\"></span>\n<span class=\"n\">m5ubm5ubm5ubm5ubfX3zfZubfQ</span><span class=\"o\">==</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>I've minimized this to the following CLIF test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v3</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v78</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fcmp</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v78</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">NaN</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On x86-64, this call returns <code>false</code>; but on the interpreter it returns <code>true</code>. Those two implementations have disagreed at least back to June, so this doesn't seem to be due to any recent changes.</p>\n<p>I wasn't sure what the \"right\" answer is here so I wrote a quick wasm program for which wasmtime generates this CLIF instruction.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Equivalent wasm&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">le</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">nan</span>:<span class=\"mh\">0x7ffffffffffff</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fn</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$test</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This program doesn't trap either on wasmtime compiling for x86-64, or on wabt's wasm-interp, so I gather the Cranelift interpreter is the one giving the wrong answer here.</p>\n<p>@afonso360, can you look into this?</p>\n<p>I guess we should extend <code>cranelift/filetests/filetests/runtests/fcmp.clif</code> with NaN tests, and also start running that test file on the interpreter.</p>\n</blockquote>",
        "id": 296867172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662140567
    }
]