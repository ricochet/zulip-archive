[
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">Issue #8432</a>.</p>",
        "id": 434792989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713802890
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">Issue #8432</a>.</p>",
        "id": 434792992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713802890
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>This program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">            (module</span>\n<span class=\"s\">                (import \"\" \"a\" (func $a (result externref)))</span>\n\n<span class=\"s\">                (func (export \"a\")</span>\n<span class=\"s\">                    (drop (call $a))</span>\n<span class=\"s\">                )</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">        \"#</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>compiled against the <code>main</code> branch currently runs as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"mi\">41807828</span><span class=\"n\">cb3a7a7e</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"n\">b9f53a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1306</span>:<span class=\"mi\">74</span>:\n<span class=\"nc\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">native</span><span class=\"w\"> </span><span class=\"n\">trampoline</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">importing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">signature</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 434792996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713802891
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2070756107\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>As discussed offline, we should look up the trampoline based on the import signature, not the wrapped function's type (which can be a subtype of the import signature).</p>\n</blockquote>",
        "id": 434829745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713814058
    },
    {
        "content": "<p>shamiao <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2074383150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>also happens when <code>externref</code> appeared as a func param.</p>\n</blockquote>",
        "id": 435137539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713947260
    },
    {
        "content": "<p>shamiao edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2074383150\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>also happens when <code>externref</code> appeared as a func param.</p>\n<p>application note: unsafe fn <code>Linker::func_new_unchecked</code> can be used to bypass this panic.</p>\n</blockquote>",
        "id": 435318493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714025382
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2088692876\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>I started poking at this. Things are a bit hairy because we update <code>FuncData</code> based on whether we have found a trampoline for a host function or not yet, but we could update that to hold onto a trampoline for some supertype of the function which is compatible with that particular use but \"incompatible\" with some other use that uses the function as its precise type rather than the previous super type. I put \"incompatible\" in scare quotes because it isn't <em>actually</em> incompatible because the trampolines aren't doing anything with these values other than shuffling them around to different ABI argument/return registers and stack slots. So any trampoline we find would be valid for all future uses, at least as the system currently exists, but this is a pretty subtle invariant to rely upon almost by accident.</p>\n<p>I think the best way to move forward is to center that invariant, and not make it an accidental after thought, by</p>\n<ul>\n<li>keeping track of every function type's \"trampoline signature\" in <code>ModuleTypes</code> or somewhere around there</li>\n<li>a \"trampoline signature\" is where we map all params/results from <code>(ref null? &lt;heapty&gt;)</code> to <code>(ref null &lt;top(heapty)&gt;)</code><ul>\n<li>(note that this is slightly different from the least-upper-bound of all concrete function types that this function type has a partial ordering with; that would require mapping params to bottom and results to top, which seems like a bit of a footgun if we ever give cranelift more knowledge of uninhabited types. instead, we are relying on implicit unsafe downcasts from the top type to the function's actual type for arguments here, which seems fine given that we control representation and otherwise have type/safety checks on calls)</li>\n</ul>\n</li>\n<li>we only generate trampolines for each trampoline signature, not every function signature<ul>\n<li>for modules without any reference types and subtyping, which is 99.9999% of modules, this will be the exact same number of trampolines as today</li>\n<li>for modules with lots of reference types and subtyping, this will actually dedupe trampolines that are byte-for-byte identical today</li>\n</ul>\n</li>\n<li>\n<p>looking up a trampoline is now a two-step process, where we introduce a step just before our existing type-to-trampoline lookup:</p>\n<ol>\n<li>(new) get the <code>VMSharedTypeIndex</code> of this function's type's trampoline signature</li>\n<li>(existing) get the trampoline associated with that type index</li>\n</ol>\n</li>\n</ul>\n</blockquote>",
        "id": 436529023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714579751
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2096410268\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>I like the sound of that yeah and it makes sense to me!</p>\n</blockquote>",
        "id": 437294545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715011807
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432#issuecomment-2096417056\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>(I've been working on a patch, still have a few kinks to work out)</p>\n</blockquote>",
        "id": 437295141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715012022
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8432\">issue #8432</a>:</p>\n<blockquote>\n<p>This program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">            (module</span>\n<span class=\"s\">                (import \"\" \"a\" (func $a (result externref)))</span>\n\n<span class=\"s\">                (func (export \"a\")</span>\n<span class=\"s\">                    (drop (call $a))</span>\n<span class=\"s\">                )</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">        \"#</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">ExternRef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>compiled against the <code>main</code> branch currently runs as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"mi\">41807828</span><span class=\"n\">cb3a7a7e</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"n\">b9f53a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1306</span>:<span class=\"mi\">74</span>:\n<span class=\"nc\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">native</span><span class=\"w\"> </span><span class=\"n\">trampoline</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">importing</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">signature</span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>cc @fitzgen </p>\n</blockquote>",
        "id": 437691513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715187248
    }
]