[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412\">PR #6412</a> from <code>alexcrichton:x64-feature-names</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Many of the tests for lowering features use <code>extractor</code>s I think since when they were added that was the only option. Nowadays a <code>pure constructor</code> with <code>if-let</code> feels more natural for this, so this commit updates all existing extractors used to test features to use a <code>pure constructor</code> instead. This additionally updates the names to match the cranelift codegen setting name to ensure that a consistent name is used.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 359473428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684435778
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412\">PR #6412</a> as ready for review.</p>",
        "id": 359473443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684435781
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412\">PR #6412</a>.</p>",
        "id": 359473445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684435782
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412\">PR #6412</a>.</p>",
        "id": 359473447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684435782
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#pullrequestreview-1433286137\">PR review</a>.</p>",
        "id": 359475451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684436378
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#pullrequestreview-1433324545\">PR review</a>:</p>\n<blockquote>\n<p>Nice, yes this stuff did indeed come before pure constructors and <code>if-let</code>.</p>\n</blockquote>",
        "id": 359479815,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684437963
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#pullrequestreview-1433317526\">PR review</a>:</p>\n<blockquote>\n<p>Excellent idea. Among other things, this gives ISLE a lot more freedom to schedule these feature tests with respect to other pattern matches, since it no longer believes there's a data dependency on the type. I like to <code>diff</code> the ISLE-generated source before and after changes like this just because I think it's interesting to see how the schedule changes.</p>\n<p>I'd love to see some Sightglass figures for the compile phase. It should be no worse, and possibly better, but ISLE uses a pretty simple greedy heuristic for match ordering so anything is possible.</p>\n</blockquote>",
        "id": 359480077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684438078
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#pullrequestreview-1433317526\">PR review</a>:</p>\n<blockquote>\n<p>Excellent idea. Among other things, this gives ISLE a lot more freedom to schedule these feature tests with respect to other pattern matches, since it no longer believes there's a data dependency on the type. I like to <code>diff</code> the ISLE-generated source before and after changes like this just because I think it's interesting to see how the schedule changes.</p>\n<p>I'd love to see some Sightglass figures for the compile phase. It should be no worse, and possibly better, but ISLE uses a pretty simple greedy heuristic for match ordering so anything is possible.</p>\n</blockquote>",
        "id": 359480078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684438078
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#discussion_r1198215799\">PR review comment</a>:</p>\n<blockquote>\n<p>I have a preference for using pattern-matches rather than priorities whenever possible.</p>\n<p>In this case I could be convinced the other way: do_ctz is more general and still works even if use_bmi1 is enabled, so semantically the priorities make sense; and it probably doesn't make much difference in terms of LLVM's output.</p>\n<p>But in general, priorities are kinda weird action-at-a-distance, and they can impede ISLE optimizations.</p>\n</blockquote>",
        "id": 359480079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684438078
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412\">PR #6412</a>.</p>",
        "id": 359487065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684440504
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#discussion_r1198325544\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah true! I did this as a drive-by fix since this was the only location (plus one other here in this PR) that explicitly matched <code>$false</code> where all other locations which have feature-specific lowerings only match on <code>$true</code>. Do you know how hard it would be to remove the need for priorities here? For example something like auto-prioritizing \"some <code>if-let</code>\" over \"no <code>if-let</code>\" and then requiring an explicit priority if two rules have <code>if-let</code>? Basically some way to automatically handle this case with good codegen and no priorities.</p>\n</blockquote>",
        "id": 359501170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684445408
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#discussion_r1198377864\">PR review comment</a>:</p>\n<blockquote>\n<p>ISLE used to treat more \"specific\" rules as implicitly higher priority, but we've been moving away from this kind of implicit priority scheme because it was hard for rule authors to reason about. We have all the code needed to implement it in ISLE if we wanted to, though; it's just an application of the subset-overlap check.</p>\n<p>If you use <code>if-let</code> in both rules, matching against <code>$true</code> and <code>$false</code> explicitly, you'll get good codegen without priorities, and the overlap check will understand that the two rules are mutually exclusive. But as I said that's a little unfortunate here where the <code>$false</code> case would still be correct if the <code>$true</code> case is removed. So maybe this is just fine as-is.</p>\n</blockquote>",
        "id": 359512951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684450763
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6412#discussion_r1199012240\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I realize the implicit priority scheme had its own issues but my hope was that \"zero <code>if-let</code>\" vs \"one or more <code>if-let</code>\" is pretty clear in terms of priority to not need an explicit disambiguation. So not the full \"which <code>if-let</code> is more specific\", just a zero-vs-nonzero check. My hope is that the idiom of \"write a rule with <code>if-let</code>\" ideally wouldn't require explicit priorities and could be handled in the common case because it's nice to not have to update all other lowerings when a more explicit one is added.<br>\n</p>\n</blockquote>",
        "id": 359674289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684505579
    }
]