[
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the wasmtime label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8212\">Issue #8212</a>.</p>",
        "id": 428200249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711048746
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8212\">Issue #8212</a>.</p>",
        "id": 428200250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711048746
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8212\">issue #8212</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I would like to remove the callee vmctx field from <code>VMFuncRef</code>. Anywhere that we currently have a pointer to a <code>VMFuncRef</code>, we would instead have a pair of that pointer plus a callee vmctx pointer.</p>\n<h4>Benefit/Implementation</h4>\n<p>Currently any use of <code>ref.func</code> in Wasmtime is compiled to a libcall, including table initialization from an element segment. If the function in question is declared within the current module, then the libcall has to initialize a <code>VMFuncRef</code> structure within the vmctx and then return a pointer to that structure. (If it's an import, then we have a <code>VMFuncRef</code> pointer in the corresponding import, and can just return that.)</p>\n<p>This is currently necessary because <code>VMFuncRef</code> includes the callee's vmctx pointer, which is not known until instantiation time.</p>\n<p>But all of the other fields are constant for a particular function once the module is loaded: The type ID is determined by the engine based on what other modules were loaded previously, and the function pointers are relocated according to the load address of the module, but none of that changes afterward.</p>\n<p>So removing the callee vmctx field means we can initialize all the <code>VMFuncRef</code> structures when the module is loaded. Then we can keep a single array of them attached to the module, and remove the space reserved for them in each vmctx. So although tables will need an additional word per element in each instance due to the fat-pointer representation, I think that's more than offset by removing five words per funcref from the vmctx for every instance.</p>\n<p>At that point, <code>ref.func</code> on a locally declared function just needs to get the address of a constant index into that module-global array of <code>VMFuncRef</code>s, and pair it with the current vmctx. So <code>ref.func</code> should compile to a base-pointer load and an add for locally declared functions (compared to two loads for imported functions). And that base-pointer load will be <code>notrap</code> and <code>readonly</code>, so it can be subject to GVN and LICM if <code>ref.func</code> is used multiple times or in a loop.</p>\n<p>Similarly, initializing tables from element segments can be fast: after loading the <code>VMFuncRef</code> array base pointer once, each locally declared functions can be computed by adding a compile-time constant offset. Maybe it's fast enough to remove the lazy-init optimization entirely, as in #8002.</p>\n<h4>Alternatives</h4>\n<p>In #8195 I suggested an alternative representation for read-only funcref tables. Now I've learned that the type IDs aren't known until the module is loaded so that plan doesn't work as written, but the tables could still be quickly unpacked when the module is loaded.</p>\n<p>The above proposal is more general than #8195: I believe this should work equally well in all WebAssembly modules and components, even when the table is writable, or an active element segment is applied to an imported table, or an element segment uses <code>global.get</code>. This proposal also doesn't require trampolines for imported functions like that one did. On the other hand, the read-only tables proposal might speed up module loading slightly relative to this plan.</p>\n<p>cc: @fitzgen @alexcrichton @cfallin</p>\n</blockquote>",
        "id": 428200251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711048747
    }
]