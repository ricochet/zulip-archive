[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1135#issuecomment-772719518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1135\">Issue #1135</a>:</p>\n<blockquote>\n<p>The new backend framework doesn't use legalizations as much as the old backend framework anymore.</p>\n</blockquote>",
        "id": 225057851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376517
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1135\">Issue #1135</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/bytecodealliance/cranelift/issues/1012\">bytecodealliance/cranelift#1012</a> I noticed that that when we bind a type or immediate to an instruction (e.g. <code>.bind(I32)</code>), we don't verify that they are valid. I believe this happens at some later time but it would be more comprehensible to the user if the error was thrown closer to where they wrote the <code>bind</code> code. </p>\n<p>Secondly, I did not see that the order of value types and immediates is checked, so the <code>bind</code> calls could be mixed in some nonsensical order (to the user) that ends up working correctly during codegen. This could be fixed by storing all of the bound parameters together in a single vector instead of separate vectors for value types and immediates.</p>\n</blockquote>",
        "id": 225059059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376968
    }
]