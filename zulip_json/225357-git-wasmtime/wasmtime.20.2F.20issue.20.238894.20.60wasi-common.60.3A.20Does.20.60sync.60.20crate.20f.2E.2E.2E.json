[
    {
        "content": "<p>Robbepop opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8894\">issue #8894</a>:</p>\n<blockquote>\n<p>I am writing this issue since I think it is the better place to ask than <a href=\"#narrow/stream/219900-wasi/topic/Does.20.60wasi-common.2Fsync.60.20really.20require.20.60wasmtime.60.3F\">my question at Zulip</a>.</p>\n<p>I was looking at <code>wasi-common</code>'s <code>sync</code> crate feature and it seems to be depending on <code>wasmtime</code> as dependency.</p>\n<p>I found this to be weird and checked out the repositoy locally and just removed the feature dependency line in the <code>Cargo.toml</code> after not really seeing any real dependency on Wasmtime in the <code>sync</code> specific code at first glace. Everything still compiled with <code>cargo build -p wasi-common --no-default-features --features sync</code>.</p>\n<p>Is this simply outdated? It would be great if other WASI runtimes (such as Wasmi) could use <code>wasi-common</code> with its <code>sync</code> feature to enable WASI and drop the heavily outdated <code>wasi-cap-std-sync</code> crate entirely.</p>\n</blockquote>",
        "id": 448547247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719911435
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8894\">issue #8894</a>:</p>\n<blockquote>\n<p>I am writing this issue since I think it is the better place to ask than <a href=\"#narrow/stream/219900-wasi/topic/Does.20.60wasi-common.2Fsync.60.20really.20require.20.60wasmtime.60.3F\">my question at Zulip</a>.</p>\n<p>I was looking at <code>wasi-common</code>'s <code>sync</code> crate feature and it seems to be depending on <code>wasmtime</code> as dependency.</p>\n<p>I found this to be weird and checked out the repository locally and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/Cargo.toml#L82\">just removed the feature dependency line</a> in the <code>Cargo.toml</code> after not really seeing any real dependency on Wasmtime in the <code>sync</code> specific code at first glace. Everything still compiled with <code>cargo build -p wasi-common --no-default-features --features sync</code>.</p>\n<p>Is this simply outdated? It would be great if other WASI runtimes (such as Wasmi) could use <code>wasi-common</code> with its <code>sync</code> feature to enable WASI and drop the heavily outdated <code>wasi-cap-std-sync</code> crate entirely.</p>\n</blockquote>",
        "id": 448547332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719911468
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8894\">issue #8894</a>:</p>\n<blockquote>\n<p>I am writing this issue since I think it is the better place to ask than <a href=\"#narrow/stream/219900-wasi/topic/Does.20.60wasi-common.2Fsync.60.20really.20require.20.60wasmtime.60.3F\">my question at Zulip</a>.</p>\n<p>I was looking at <code>wasi-common</code>'s <code>sync</code> crate feature and it seems to be depending on <code>wasmtime</code> as dependency.</p>\n<p>I found this to be weird and checked out the repository locally and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/Cargo.toml#L82\">just removed the feature dependency line</a> in the <code>Cargo.toml</code> after not really seeing any real dependency on Wasmtime in the <code>sync</code> specific code at first glace. Everything still compiled with <code>cargo build -p wasi-common --no-default-features --features sync</code>.</p>\n<p>Is this simply outdated? It would be great if other WASI runtimes (such as Wasmi) could use <code>wasi-common</code> with its <code>sync</code> feature to enable WASI and drop the heavily outdated <code>wasi-cap-std-sync</code> crate entirely.</p>\n<p>This is especially important for Wasmi since for technical reasons Wasmi has to use the super outdated <code>v2.0.0</code> of <code>wasi-cap-std-sync</code> crate and <code>dependabot</code> recently turned my attention to a security issue with <code>atty</code> that is used by <code>wasi-cap-std-sync</code> version <code>v2.0.0</code>.</p>\n</blockquote>",
        "id": 448547754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719911590
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8894\">issue #8894</a>:</p>\n<blockquote>\n<p>I am writing this issue since I think it is the better place to ask than <a href=\"#narrow/stream/219900-wasi/topic/Does.20.60wasi-common.2Fsync.60.20really.20require.20.60wasmtime.60.3F\">my question at Zulip</a>.</p>\n<p>I was looking at <code>wasi-common</code>'s <code>sync</code> crate feature and it seems to be depending on <code>wasmtime</code> as dependency.</p>\n<p>I found this to be weird and checked out the repository locally and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/Cargo.toml#L82\">just removed the feature dependency line</a> in the <code>Cargo.toml</code> after not really seeing any real dependency on Wasmtime in the <code>sync</code> specific code at first glace. Everything still compiled with <code>cargo build -p wasi-common --no-default-features --features sync</code>.</p>\n<p>Is this simply outdated? It would be great if other WASI runtimes (such as Wasmi) could use <code>wasi-common</code> with its <code>sync</code> feature to enable WASI and drop the heavily outdated <code>wasi-cap-std-sync</code> crate entirely.</p>\n<p>This is especially important for Wasmi since for technical reasons Wasmi has to use the super outdated <code>v2.0.0</code> of <code>wasi-cap-std-sync</code> crate and <code>dependabot</code> recently turned my attention to a security issue with <code>atty</code> that is used by <code>wasi-cap-std-sync</code> version <code>v2.0.0</code>.</p>\n</blockquote>",
        "id": 449877153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720447019
    }
]