[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>#3886 ports CLIF <code>icmp</code> operations to ISLE but in the process added new, unnecessary moves to the lowering:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64\">https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64</a></p>\n<p>The two initial <code>movdqa</code> instructions are not needed with the proper use of registers; my current thinking is that ISLE's move elision may not be working as it should but this could be due to re-ordering of operands in a lowering rule that ISLE cannot resolve.</p>\n</blockquote>",
        "id": 275844214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647628083
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945#issuecomment-1072683003\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>This may be similar to #3744.</p>\n</blockquote>",
        "id": 275844312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647628126
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>#3886 ports CLIF <code>icmp</code> operations to ISLE but in the process added new, unnecessary moves to the lowering:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64\">https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64</a></p>\n<p>The two initial <code>movdqa</code> instructions are not needed with the proper use of registers; my current thinking is that ISLE's move elision may not be working as it should but this could be due to re-ordering of operands in a lowering rule that ISLE cannot resolve.</p>\n</blockquote>",
        "id": 276392873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066258
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>#3886 ports CLIF <code>icmp</code> operations to ISLE but in the process added new, unnecessary moves to the lowering:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64\">https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64</a></p>\n<p>The two initial <code>movdqa</code> instructions are not needed with the proper use of registers; my current thinking is that ISLE's move elision may not be working as it should but this could be due to re-ordering of operands in a lowering rule that ISLE cannot resolve.</p>\n</blockquote>",
        "id": 276392874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066258
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>#3886 ports CLIF <code>icmp</code> operations to ISLE but in the process added new, unnecessary moves to the lowering:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64\">https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64</a></p>\n<p>The two initial <code>movdqa</code> instructions are not needed with the proper use of registers; my current thinking is that ISLE's move elision may not be working as it should but this could be due to re-ordering of operands in a lowering rule that ISLE cannot resolve.</p>\n</blockquote>",
        "id": 276392875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066258
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945#issuecomment-1116247942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>With the new regalloc the current test looks like:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f85047b0842d26b4ac9797356a130c7697ec934c/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L47-L49\">https://github.com/bytecodealliance/wasmtime/blob/f85047b0842d26b4ac9797356a130c7697ec934c/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L47-L49</a></p>\n<p>I'm not familiar enough with these instructions to know whether this is fixed though (there's still a single movdqa)</p>\n</blockquote>",
        "id": 281032520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651592584
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945#issuecomment-1116279562\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>I mean... this just looks wrong: I can never quite remember Cranelift's order of operands when using the x64 backend but our use of <code>%</code> makes this look like AT&amp;T syntax (so destination on the right). <code>%xmm0</code> and <code>%xmm1</code> are probably used for ABI arguments so it looks like we copy <code>%xmm0</code> to <code>%xmm5</code> in order to use the value twice--so far so good. But then the problem: I think what we need to do is to a) find the maximum between <code>%xmm5</code> and <code>%xmm1</code> and put that into <code>%xmm5</code> and b) equality-compare <code>%xmm0</code> and <code>%xmm5</code> and put that into <code>%xmm0</code> for the return. but the last two instructions there don't quite say that! Looks like it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pmaxsw</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"w\"></span>\n<span class=\"n\">pcmpeqw</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But even this is a bit silly because those SIMD instructions aren't really being used in their three-operand form.</p>\n<hr>\n<p>@alexcrichton, I think this issue is fixed though <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. The extra move is gone but we should resolve this debug output question...</p>\n</blockquote>",
        "id": 281037183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651594353
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945#issuecomment-1116279562\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>I mean... this just looks wrong: I can never quite remember Cranelift's order of operands when using the x64 backend but our use of <code>%</code> makes this look like AT&amp;T syntax (i.e., destination on the right). <code>%xmm0</code> and <code>%xmm1</code> are probably used for ABI arguments so it looks like we copy <code>%xmm0</code> to <code>%xmm5</code> in order to use the value twice--so far so good. But then the problem: I think what we need to do is to a) find the maximum between <code>%xmm5</code> and <code>%xmm1</code> and put that into <code>%xmm5</code> and b) equality-compare <code>%xmm0</code> and <code>%xmm5</code> and put that into <code>%xmm0</code> for the return. but the last two instructions there don't quite say that! Looks like it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pmaxsw</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"w\"></span>\n<span class=\"n\">pcmpeqw</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But even this is a bit silly because those SIMD instructions aren't really being used in their three-operand form.</p>\n<hr>\n<p>@alexcrichton, I think this issue is fixed though <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. The extra move is gone but we should resolve this debug output question...</p>\n</blockquote>",
        "id": 281037227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651594382
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945#issuecomment-1116294304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>@abrown the output of <code>clif-util compile</code> on the function is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">    </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">e8</span><span class=\"w\">             </span><span class=\"n\">movdqa</span><span class=\"w\">  </span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\"> </span><span class=\"n\">e9</span><span class=\"w\">             </span><span class=\"n\">pmaxsw</span><span class=\"w\">  </span><span class=\"n\">xmm5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">75</span><span class=\"w\"> </span><span class=\"n\">c5</span><span class=\"w\">             </span><span class=\"n\">pcmpeqw</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm5</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">     </span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so this looks right in actuality (result is put in <code>xmm0</code>). I think it's a pretty-printing bug (argument swap) actually -- PR incoming to fix that.</p>\n<p>The extra move is indeed elided now, so I think we can close this particular issue.</p>\n</blockquote>",
        "id": 281039174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651595187
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3945\">issue #3945</a>:</p>\n<blockquote>\n<p>#3886 ports CLIF <code>icmp</code> operations to ISLE but in the process added new, unnecessary moves to the lowering:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64\">https://github.com/bytecodealliance/wasmtime/blob/e92cbfb28383fdd53b5a48bdd99f4ea48c57fa78/cranelift/filetests/filetests/isa/x64/simd-comparison-legalize.clif#L61-L64</a></p>\n<p>The two initial <code>movdqa</code> instructions are not needed with the proper use of registers; my current thinking is that ISLE's move elision may not be working as it should but this could be due to re-ordering of operands in a lowering rule that ISLE cannot resolve.</p>\n</blockquote>",
        "id": 281039207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651595199
    }
]