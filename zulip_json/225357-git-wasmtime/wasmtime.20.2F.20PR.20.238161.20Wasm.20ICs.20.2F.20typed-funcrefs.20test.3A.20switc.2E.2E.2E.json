[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427221843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710709624
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427221846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710709625
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a> from <code>cfallin:typed-funcref-ics-test-update</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>â€¦e table.</p>\n<p>This is based on discussion in #8158:</p>\n<ul>\n<li>\n<p>We can use <code>call_indirect</code> rather than <code>table.get</code> + <code>call_ref</code>, even on typed funcrefs. TIL; updated the test!</p>\n</li>\n<li>\n<p>As noted in #8160, if we use a nullable typed funcref table instead (and given that we know we'll initialize a particular slot before use on the application side, so we won't actually call a null ref), and if we have a null-ref default value, we should be able to avoid the lazy table-init mechanism entirely.</p>\n</li>\n</ul>\n<p>(Ignore the part where this module doesn't actually have any update logic that would set non-null refs anywhere; it's a compile-test, not a runtest!)</p>\n<p>Once #8159 is merged and #8160 is implemented, we should see zero branches in this test.</p>\n<p>Of note here is that we do seem to be doing a dynamic signature check again, even though the table has a typed funcref element. Perhaps this path isn't implemented yet either?</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 427221848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710709625
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>:</p>\n<blockquote>\n<p>This is based on discussion in #8158:</p>\n<ul>\n<li>\n<p>We can use <code>call_indirect</code> rather than <code>table.get</code> + <code>call_ref</code>, even on typed funcrefs. TIL; updated the test!</p>\n</li>\n<li>\n<p>As noted in #8160, if we use a nullable typed funcref table instead (and given that we know we'll initialize a particular slot before use on the application side, so we won't actually call a null ref), and if we have a null-ref default value, we should be able to avoid the lazy table-init mechanism entirely.</p>\n</li>\n</ul>\n<p>(Ignore the part where this module doesn't actually have any update logic that would set non-null refs anywhere; it's a compile-test, not a runtest!)</p>\n<p>Once #8159 is merged and #8160 is implemented, we should see zero branches in this test.</p>\n<p>Of note here is that we do seem to be doing a dynamic signature check again, even though the table has a typed funcref element. Perhaps this path isn't implemented yet either?</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 427221859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710709636
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427221890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710709643
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427225596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710710614
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427225700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710710641
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>:</p>\n<blockquote>\n<p>This is based on discussion in #8158: as noted in #8160, if we use a nullable typed funcref table instead (and given that we know we'll initialize a particular slot before use on the application side, so we won't actually call a null ref), and if we have a null-ref default value, we should be able to avoid the lazy table-init mechanism entirely.</p>\n<p>(Ignore the part where this module doesn't actually have any update logic that would set non-null refs anywhere; it's a compile-test, not a runtest!)</p>\n<p>Once #8159 is merged and #8160 is implemented, we should see zero branches in this test.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 427225790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710710655
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161#issuecomment-2002622056\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>:</p>\n<blockquote>\n<p>(I switched back from <code>call_indirect</code> to <code>table.get</code> + <code>call_ref</code> because it seems the former doesn't actually omit callee signature checks even when the callee is a typed funcref)</p>\n</blockquote>",
        "id": 427225883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710710688
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>:</p>\n<blockquote>\n<p>This is based on discussion in #8158: as noted in #8160, if we use a nullable typed funcref table instead (and given that we know we'll initialize a particular slot before use on the application side, so we won't actually call a null ref), and if we have a null-ref default value, we should be able to avoid the lazy table-init mechanism entirely.</p>\n<p>(Ignore the part where this module doesn't actually have any update logic that would set non-null refs anywhere; it's a compile-test, not a runtest!)</p>\n<p>Once #8159 is merged and #8160 is implemented (and table-at-constant-index is fully optimized), we should see zero branches in this test.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 427226584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710710876
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161#pullrequestreview-1942279543\">PR review</a>:</p>\n<blockquote>\n<p>Looks great. The collection of optimizations we're discussing should be easy and should show up very well on this test. I'm looking forward to seeing each one shrink this!</p>\n</blockquote>",
        "id": 427391384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710751588
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161#issuecomment-2004139264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>:</p>\n<blockquote>\n<blockquote>\n<p>it seems the former doesn't actually omit callee signature checks even when the callee is a typed funcref</p>\n</blockquote>\n<p>Ah yes I didn't mean to imply that we already did it, only that it's not too hard to add. I've got a commit after <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8159\">https://github.com/bytecodealliance/wasmtime/pull/8159</a> which implements the optimization and the codegen for <code>call_indirect</code> vs <code>table.get</code> + <code>call_ref</code> is the same after that. </p>\n</blockquote>",
        "id": 427504143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710773730
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8161\">PR #8161</a>.</p>",
        "id": 427511220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710775531
    }
]