[
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-650406792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Items to verify:</p>\n<ul>\n<li>[ ] AArch64</li>\n<li>[ ] Windows unwind info</li>\n</ul>\n</blockquote>",
        "id": 202143932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593206402
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-650420025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:wasm\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202146901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593208386
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-650544226\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>CC @pchickey, would be good to get your input on the general approach here.</p>\n<blockquote>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n</blockquote>\n<p>Can you give some details on why this should be done as a follow-up? I think it might be good to do this refactoring as part of the initial landing if possible.</p>\n</blockquote>",
        "id": 202180482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593255958
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-651237774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>There is somewhat common/duplicated code in cranelift-object and creates/obj, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n</blockquote>\n<p>Can you give some details on why this should be done as a follow-up? I think it might be good to do this refactoring as part of the initial landing if possible.</p>\n</blockquote>\n<p><code>cranelift-object</code> is more generic backend for creating (ELF) object files, and does not fully reflect what is needed for wasm atm. <code>crates/obj</code> is close to what we need though it emits information such as tables or data segments into object file (as well as supporting other formats than ELF).</p>\n<p>Once we define how <code>crates/obj</code> and \"wasm2obj\" are used, we can merge/refactor its and this PR code to remove duplicated logic. I wonder who are the users of these crate and utility. @pchickey, are you using it these in some way?</p>\n</blockquote>",
        "id": 202337355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593449292
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-651245460\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<blockquote>\n<p>One of my main thoughts when reading this is about the various copies happening. To make sure I understand thing, can you double check this?</p>\n<ul>\n<li>When generating code for the first time, we first invoke cranelift which emits function code into a buffer for each function.</li>\n<li>Next we copy (?) each buffer into an object data structure to create an ELF image</li>\n<li>Next we copy that ELF image into the final executable page residing in CodeMemory</li>\n</ul>\n</blockquote>\n<p>That is about to be correct. Notice that we generated the ELF image for GDB JIT code, so for debug mode nothing is changed is term of copies.</p>\n<p>I'm looking into making <code>object</code> to emit image directly into CodeMemory, where we can directly protect regions for execution. Alternatively, the last copy operation can be removed when the code becomes PIC, so we don't have to patch the image, so there is a potential to use mmap+fs, and compete with current caching logic. </p>\n</blockquote>",
        "id": 202339371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593450196
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-651237774\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>There is somewhat common/duplicated code in cranelift-object and creates/obj, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n</blockquote>\n<p>Can you give some details on why this should be done as a follow-up? I think it might be good to do this refactoring as part of the initial landing if possible.</p>\n</blockquote>\n<p><code>cranelift-object</code> is more generic backend for creating (ELF) object files, and does not fully reflect what is needed for wasm atm. <code>crates/obj</code> is close to what we need though it emits information such as tables or data segments into object file (as well as supporting other formats than ELF).</p>\n<p>Once we define how <code>crates/obj</code> and \"wasm2obj\" are used, we can merge/refactor its and this PR code to remove duplicated logic. I wonder who are the users of these crate and utility. @pchickey, are you using it these in some unique way?</p>\n</blockquote>",
        "id": 202352238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593456365
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-651403032\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<ul>\n<li>[ ] check if <a href=\"https://github.com/gimli-rs/object/issues/240\">https://github.com/gimli-rs/object/issues/240</a> will help with copy reduction</li>\n</ul>\n</blockquote>",
        "id": 202375654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593469721
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-651842764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Ok, it seems reasonable to go ahead with this in the meantime if more refactoring is required internally to get to the goal of \"mmap and go\". I'd want to make sure we don't paint ourselves into a corner where that's not possible, but it sounds like that's not the case.</p>\n<p>Can you ad some high-level documentation somewhere for this, too? It'd be good I think to have a doc block describing how a wasm module is transformed into an ELF image, so whenever we read/write that we can refer back to those docs about what should go where.</p>\n</blockquote>",
        "id": 202445782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593528514
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-652452832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<blockquote>\n<p>Items to verify:\n* AArch64</p>\n</blockquote>\n<p>@cfallin could you verify if I refactored Arm64Call properly ? Not sure how to test it.  </p>\n<blockquote>\n<ul>\n<li>Windows unwind info</li>\n</ul>\n</blockquote>\n<p>@peterhuene I think the Windows Unwind stuff where properly refactored and tests are passing. If you have time, can you glance the changes? </p>\n</blockquote>",
        "id": 202575338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593613753
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-652452832\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<blockquote>\n<p>Items to verify:\n* AArch64</p>\n</blockquote>\n<p>@cfallin could you verify if I refactored Arm64Call properly ? Not sure how to test it.  </p>\n<blockquote>\n<ul>\n<li>Windows unwind info</li>\n</ul>\n</blockquote>\n<p>@peterhuene I think the Windows Unwind stuff were properly refactored and tests are passing. If you have time, can you glance the changes? </p>\n</blockquote>",
        "id": 202579590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593615799
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-652613735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>The unwind changes seem reasonable to me.</p>\n</blockquote>",
        "id": 202615800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593632937
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-650406792\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Items to verify:</p>\n<ul>\n<li>[ ] AArch64</li>\n<li>[x] Windows unwind info</li>\n</ul>\n</blockquote>",
        "id": 202616035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593633042
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-650406792\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Items to verify:</p>\n<ul>\n<li>[x] AArch64</li>\n<li>[x] Windows unwind info</li>\n</ul>\n</blockquote>",
        "id": 203027074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594061651
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-654432484\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Information related no absolute relocations code discussion:</p>\n<p>@sunfishcode @alexcrichton to observe relocations, I'm adding dump of the generated ELF at</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/crates/jit/src/compiler.rs b/crates/jit/src/compiler.rs\nindex 46280c120..96aed7a51 100644\n--- a/crates/jit/src/compiler.rs\n+++ b/crates/jit/src/compiler.rs\n@@ -189,4 +189,7 @@ impl Compiler {\n         })?;\n\n+        let mut file = ::std::fs::File::create(::std::path::Path::new(&quot;test.o&quot;)).expect(&quot;file&quot;);\n+        ::std::io::Write::write_all(&amp;mut file, &amp;obj).expect(&quot;write&quot;);\n+\n         Ok(Compilation {\n             obj,\n</code></pre></div>\n\n\n<p>I after <code>cargo run -- tests/all/debug/testsuite/reverse-str.wasm &amp;&amp; gobjdump -xD test.o</code> the following can be observed:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n    16b:       48 b8 00 00 00 00 00    movabs $0x0,%rax\n     172:       00 00 00\n                        16d: R_X86_64_64        _wasm_function_0\n     175:       49 89 fe                mov    %rdi,%r14\n     178:       4c 89 ef                mov    %r13,%rdi\n     17b:       4c 89 f6                mov    %r14,%rsi\n     17e:       44 89 fa                mov    %r15d,%edx\n     181:       40 ff d0                rex callq *%rax\n     184:       44 8b bc 24 0c 00 00    mov    0xc(%rsp),%r15d\n...\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203032700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594064984
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-654432484\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Information related to no absolute relocations code discussion:</p>\n<p>@sunfishcode @alexcrichton to observe relocations, I'm adding dump of the generated ELF at</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/crates/jit/src/compiler.rs b/crates/jit/src/compiler.rs\nindex 46280c120..96aed7a51 100644\n--- a/crates/jit/src/compiler.rs\n+++ b/crates/jit/src/compiler.rs\n@@ -189,4 +189,7 @@ impl Compiler {\n         })?;\n\n+        let mut file = ::std::fs::File::create(::std::path::Path::new(&quot;test.o&quot;)).expect(&quot;file&quot;);\n+        ::std::io::Write::write_all(&amp;mut file, &amp;obj).expect(&quot;write&quot;);\n+\n         Ok(Compilation {\n             obj,\n</code></pre></div>\n\n\n<p>I after <code>cargo run -- tests/all/debug/testsuite/reverse-str.wasm &amp;&amp; gobjdump -xD test.o</code> the following can be observed:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n    16b:       48 b8 00 00 00 00 00    movabs $0x0,%rax\n     172:       00 00 00\n                        16d: R_X86_64_64        _wasm_function_0\n     175:       49 89 fe                mov    %rdi,%r14\n     178:       4c 89 ef                mov    %r13,%rdi\n     17b:       4c 89 f6                mov    %r14,%rsi\n     17e:       44 89 fa                mov    %r15d,%edx\n     181:       40 ff d0                rex callq *%rax\n     184:       44 8b bc 24 0c 00 00    mov    0xc(%rsp),%r15d\n...\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203035028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594066233
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#issuecomment-654432484\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">Issue #1931</a>:</p>\n<blockquote>\n<p>Information related to no absolute relocations code discussion:</p>\n<p>@sunfishcode @alexcrichton to observe relocations, I'm adding dump of the generated ELF at</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/crates/jit/src/compiler.rs b/crates/jit/src/compiler.rs\nindex 46280c120..96aed7a51 100644\n--- a/crates/jit/src/compiler.rs\n+++ b/crates/jit/src/compiler.rs\n@@ -189,4 +189,7 @@ impl Compiler {\n         })?;\n\n+        let mut file = ::std::fs::File::create(::std::path::Path::new(&quot;test.o&quot;)).expect(&quot;file&quot;);\n+        ::std::io::Write::write_all(&amp;mut file, &amp;obj).expect(&quot;write&quot;);\n+\n         Ok(Compilation {\n             obj,\n</code></pre></div>\n\n\n<p>And after <code>cargo run -- tests/all/debug/testsuite/reverse-str.wasm &amp;&amp; gobjdump -xD test.o</code> the following can be observed:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n    16b:       48 b8 00 00 00 00 00    movabs $0x0,%rax\n     172:       00 00 00\n                        16d: R_X86_64_64        _wasm_function_0\n     175:       49 89 fe                mov    %rdi,%r14\n     178:       4c 89 ef                mov    %r13,%rdi\n     17b:       4c 89 f6                mov    %r14,%rsi\n     17e:       44 89 fa                mov    %r15d,%edx\n     181:       40 ff d0                rex callq *%rax\n     184:       44 8b bc 24 0c 00 00    mov    0xc(%rsp),%r15d\n...\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203119916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594136594
    }
]