[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">PR #2349</a> from <code>fix-frameinfo</code> to <code>main</code>:</p>\n<blockquote>\n<p>The ModuleFrameInfo and FunctionInfo data structures maintain<br>\na list of ranges via a BTreeMap.  The key to that map is one<br>\npast the end of the module/function in question.  This causes<br>\na problem in the case of immediately adjacent ranges.  For<br>\nexample, if we have two functions occupying adjacent ranges:<br>\n  A:   0-100<br>\n  B: 100-200<br>\nfunction A is stored with a key of 100 and B with a key of 200.</p>\n<p>Now, when looking up the function associated with address 100,<br>\nwe'd expect to find B.  However the current code:</p>\n<div class=\"codehilite\"><pre><span></span><code>   let (end, func) = info.functions.range(pc..).next()?;\n   if pc &lt; func.start || *end &lt; pc {\n</code></pre></div>\n\n<p>will look up the value 100 in the map and return function A,<br>\nwhich will then fail the pc &lt; func.start check in the next<br>\nline, so the result will be failure.</p>\n<p>Instead, it seems we need to look up the range starting at pc + 1.<br>\nIn addition, the *end &lt; pc check also look incorrect: in the case<br>\nof *end == pc, the PC value is actually outside of the function<br>\nthat was found, and we should therefore return failure.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215333175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604330826
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">PR #2349</a> from <code>fix-frameinfo</code> to <code>main</code>:</p>\n<blockquote>\n<p>The ModuleFrameInfo and FunctionInfo data structures maintain<br>\na list of ranges via a BTreeMap.  The key to that map is one<br>\npast the end of the module/function in question.  This causes<br>\na problem in the case of immediately adjacent ranges.  For<br>\nexample, if we have two functions occupying adjacent ranges:<br>\n  A:   0-100<br>\n  B: 100-200<br>\nfunction A is stored with a key of 100 and B with a key of 200.</p>\n<p>Now, when looking up the function associated with address 100,<br>\nwe'd expect to find B.  However the current code:</p>\n<div class=\"codehilite\"><pre><span></span><code>   let (end, func) = info.functions.range(pc..).next()?;\n   if pc &lt; func.start || *end &lt; pc {\n</code></pre></div>\n\n<p>will look up the value 100 in the map and return function A,<br>\nwhich will then fail the pc &lt; func.start check in the next<br>\nline, so the result will be failure.</p>\n<p>Instead, it seems we need to look up the range starting at pc + 1.<br>\nIn addition, the *end &lt; pc check also look incorrect: in the case<br>\nof *end == pc, the PC value is actually outside of the function<br>\nthat was found, and we should therefore return failure.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215339032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604333270
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">PR #2349</a> from <code>fix-frameinfo</code> to <code>main</code>:</p>\n<blockquote>\n<p>The ModuleFrameInfo and FunctionInfo data structures maintain<br>\na list of ranges via a BTreeMap.  The key to that map is one<br>\npast the end of the module/function in question.  This causes<br>\na problem in the case of immediately adjacent ranges.  For<br>\nexample, if we have two functions occupying adjacent ranges:<br>\n  A:   0-100<br>\n  B: 100-200<br>\nfunction A is stored with a key of 100 and B with a key of 200.</p>\n<p>Now, when looking up the function associated with address 100,<br>\nwe'd expect to find B.  However the current code:</p>\n<div class=\"codehilite\"><pre><span></span><code>   let (end, func) = info.functions.range(pc..).next()?;\n   if pc &lt; func.start || *end &lt; pc {\n</code></pre></div>\n\n<p>will look up the value 100 in the map and return function A,<br>\nwhich will then fail the pc &lt; func.start check in the next<br>\nline, so the result will be failure.</p>\n<p>Instead, it seems we need to look up the range starting at pc + 1.<br>\nIn addition, the *end &lt; pc check also look incorrect: in the case<br>\nof *end == pc, the PC value is actually outside of the function<br>\nthat was found, and we should therefore return failure.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215431313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604397119
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2349\">PR #2349</a>.</p>",
        "id": 215502508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604433269
    }
]