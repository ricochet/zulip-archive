[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611#issuecomment-768627831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611\">Issue #2611</a>:</p>\n<blockquote>\n<p>I'll take a look -- thanks for putting this together so quickly! A few quick notes on the isel thoughts:</p>\n<blockquote>\n<p>For example one optimization might be to not have a fuel_var and instead periodically do addq $fuel_consumed, offset(%vminterrupts_ptr) which avoids consuming extra registers. Similarly cmpq $0, offset(%vminterrupts_ptr) could be generated as well</p>\n</blockquote>\n<p>The former is an RMW compound op and could be done pretty reasonably with the current load-op merging framework; we haven't gotten around to it yet, but it's clear how to do so if we decide it's important. The latter is actually a bit more interesting: I recently fixed a bug (#2576) that arose because of certain combinations of load-and-compare that would sink a load beyond its first use by simply disallowing compare-from-memory. That too can be re-optimized but would take more machinery.</p>\n<p>Anyway, all that to say that there are reasons you couldn't get either of those instructions to come out the backend :-)</p>\n</blockquote>",
        "id": 224259531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611787464
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611#issuecomment-768631869\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611\">Issue #2611</a>:</p>\n<blockquote>\n<p>Oh also to clarify, I don't think it's just isel that can be improved, but rather I think the frontend codegen could also be improved if we decide the time should be invested. For example an empty function <code>(func nop)</code> generates this x86 code with the new backend (annotated by me): </p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">0000000000000000</span> <span class=\"nl\">_wasm_function_4:</span>\n       <span class=\"c1\">;; prologue stack-check to ensure we're not out of stack space</span>\n       <span class=\"c1\">;; note that this is only here because function calls are made internally</span>\n       <span class=\"err\">0:</span> <span class=\"err\">55</span>                            <span class=\"nf\">pushq</span>   <span class=\"nv\">%rbp</span>\n       <span class=\"err\">1:</span> <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">e5</span>                      <span class=\"no\">movq</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span> <span class=\"nv\">%rbp</span>\n       <span class=\"err\">4:</span> <span class=\"err\">4</span><span class=\"nf\">c</span> <span class=\"mi\">8</span><span class=\"no\">b</span> <span class=\"mi\">17</span>                      <span class=\"no\">movq</span>    <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span> <span class=\"nv\">%r10</span>\n       <span class=\"err\">7:</span> <span class=\"err\">4</span><span class=\"nf\">d</span> <span class=\"mi\">8</span><span class=\"no\">b</span> <span class=\"mi\">12</span>                      <span class=\"no\">movq</span>    <span class=\"p\">(</span><span class=\"nv\">%r10</span><span class=\"p\">),</span> <span class=\"nv\">%r10</span>\n       <span class=\"nl\">a:</span> <span class=\"err\">49</span> <span class=\"err\">39</span> <span class=\"nf\">e2</span>                      <span class=\"no\">cmpq</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span> <span class=\"nv\">%r10</span>\n       <span class=\"nl\">d:</span> <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"mi\">86</span> <span class=\"mi\">02</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>             <span class=\"no\">jbe</span> <span class=\"mh\">2</span> <span class=\"p\">&lt;</span><span class=\"no\">_wasm_function_4</span><span class=\"p\">+</span><span class=\"mi\">0x15</span><span class=\"p\">&gt;</span>\n      <span class=\"err\">13:</span> <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"mi\">0</span><span class=\"no\">b</span>                         <span class=\"no\">ud2</span>\n\n      <span class=\"c1\">;; allocating stack space, saving registers</span>\n      <span class=\"err\">15:</span> <span class=\"err\">48</span> <span class=\"err\">83</span> <span class=\"nf\">ec</span> <span class=\"mi\">10</span>                   <span class=\"no\">subq</span>    <span class=\"no\">$16</span><span class=\"p\">,</span> <span class=\"nv\">%rsp</span>\n      <span class=\"err\">19:</span> <span class=\"err\">4</span><span class=\"nf\">c</span> <span class=\"mi\">89</span> <span class=\"mi\">24</span> <span class=\"mi\">24</span>                   <span class=\"no\">movq</span>    <span class=\"nv\">%r12</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n\n      <span class=\"c1\">;; load vminterrupts_ptr into r12</span>\n      <span class=\"err\">1</span><span class=\"nl\">d:</span> <span class=\"err\">4</span><span class=\"nf\">c</span> <span class=\"mi\">8</span><span class=\"no\">b</span> <span class=\"mi\">27</span>                      <span class=\"no\">movq</span>    <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span> <span class=\"nv\">%r12</span>\n\n      <span class=\"c1\">;; increment the fuel consumed by 1 where 8(%r12) is where the previous count is</span>\n      <span class=\"err\">20:</span> <span class=\"nf\">be</span> <span class=\"mi\">01</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>                <span class=\"no\">movl</span>    <span class=\"no\">$1</span><span class=\"p\">,</span> <span class=\"nv\">%esi</span>\n      <span class=\"err\">25:</span> <span class=\"err\">49</span> <span class=\"err\">03</span> <span class=\"err\">74</span> <span class=\"err\">24</span> <span class=\"err\">08</span>                <span class=\"nf\">addq</span>    <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"nv\">%r12</span><span class=\"p\">),</span> <span class=\"nv\">%rsi</span>\n\n      <span class=\"c1\">;; check if fuel is gerater than zero</span>\n      <span class=\"err\">2</span><span class=\"nl\">a:</span> <span class=\"err\">48</span> <span class=\"err\">31</span> <span class=\"nf\">c0</span>                      <span class=\"no\">xorq</span>    <span class=\"nv\">%rax</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n      <span class=\"err\">2</span><span class=\"nl\">d:</span> <span class=\"err\">48</span> <span class=\"err\">39</span> <span class=\"nf\">c6</span>                      <span class=\"no\">cmpq</span>    <span class=\"nv\">%rax</span><span class=\"p\">,</span> <span class=\"nv\">%rsi</span>\n      <span class=\"err\">30:</span> <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"mi\">8</span><span class=\"no\">c</span> <span class=\"mi\">13</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>             <span class=\"no\">jl</span>  <span class=\"mh\">19</span> <span class=\"p\">&lt;</span><span class=\"no\">_wasm_function_4</span><span class=\"p\">+</span><span class=\"mi\">0x49</span><span class=\"p\">&gt;</span>\n\n      <span class=\"c1\">;; save the fuel count, load the intrinsic address, call it</span>\n      <span class=\"err\">36:</span> <span class=\"err\">49</span> <span class=\"err\">89</span> <span class=\"err\">74</span> <span class=\"err\">24</span> <span class=\"err\">08</span>                <span class=\"nf\">movq</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"nv\">%r12</span><span class=\"p\">)</span>\n      <span class=\"err\">3</span><span class=\"nl\">b:</span> <span class=\"err\">48</span> <span class=\"err\">8</span><span class=\"nf\">b</span> <span class=\"no\">b7</span> <span class=\"no\">f0</span> <span class=\"mi\">06</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>          <span class=\"no\">movq</span>    <span class=\"mi\">1776</span><span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span> <span class=\"nv\">%rsi</span>\n      <span class=\"err\">42:</span> <span class=\"nf\">ff</span> <span class=\"no\">d6</span>                         <span class=\"no\">callq</span>   <span class=\"p\">*</span><span class=\"nv\">%rsi</span>\n\n      <span class=\"c1\">;; restore the fuel_var for this function (unnecessary instruction, happens uncondititonally after call)</span>\n      <span class=\"err\">44:</span> <span class=\"err\">49</span> <span class=\"err\">8</span><span class=\"nf\">b</span> <span class=\"mi\">74</span> <span class=\"mi\">24</span> <span class=\"mi\">08</span>                <span class=\"no\">movq</span>    <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"nv\">%r12</span><span class=\"p\">),</span> <span class=\"nv\">%rsi</span>\n\n      <span class=\"c1\">;; save fuel_var at the end of the function (unnecessary instruction, happens unconditionally at function end)</span>\n      <span class=\"err\">49:</span> <span class=\"err\">49</span> <span class=\"err\">89</span> <span class=\"err\">74</span> <span class=\"err\">24</span> <span class=\"err\">08</span>                <span class=\"nf\">movq</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"nv\">%r12</span><span class=\"p\">)</span>\n\n      <span class=\"c1\">;; function epilogue</span>\n      <span class=\"err\">4</span><span class=\"nl\">e:</span> <span class=\"err\">4</span><span class=\"nf\">c</span> <span class=\"mi\">8</span><span class=\"no\">b</span> <span class=\"mi\">24</span> <span class=\"mi\">24</span>                   <span class=\"no\">movq</span>    <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span> <span class=\"nv\">%r12</span>\n      <span class=\"err\">52:</span> <span class=\"err\">48</span> <span class=\"err\">83</span> <span class=\"nf\">c4</span> <span class=\"mi\">10</span>                   <span class=\"no\">addq</span>    <span class=\"no\">$16</span><span class=\"p\">,</span> <span class=\"nv\">%rsp</span>\n      <span class=\"err\">56:</span> <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">ec</span>                      <span class=\"no\">movq</span>    <span class=\"nv\">%rbp</span><span class=\"p\">,</span> <span class=\"nv\">%rsp</span>\n      <span class=\"err\">59:</span> <span class=\"err\">5</span><span class=\"nf\">d</span>                            <span class=\"no\">popq</span>    <span class=\"nv\">%rbp</span>\n      <span class=\"err\">5</span><span class=\"nl\">a:</span> <span class=\"nf\">c3</span>                            <span class=\"no\">retq</span>\n</code></pre></div>\n<p>Larger functions like <a href=\"https://github.com/bytecodealliance/sightglass/blob/faf101e50f7af6243fe3e910cf9455eecd9e1368/benchmarks-next/shootout-ackermann/benchmark.wat#L25-L49\">https://github.com/bytecodealliance/sightglass/blob/faf101e50f7af6243fe3e910cf9455eecd9e1368/benchmarks-next/shootout-ackermann/benchmark.wat#L25-L49</a> end up having a lot more code generated with instrumentation enabled. I haven't yet gone through instruction-by-instruction yet, though, to see what could be improved.</p>\n</blockquote>",
        "id": 224260456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611788012
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611#issuecomment-768656401\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611\">Issue #2611</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen, @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:wasm\", \"fuzzing\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 224266418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611791680
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611#issuecomment-769420957\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2611\">Issue #2611</a>:</p>\n<blockquote>\n<p>Ok this should be rebased and updated to have <code>add_fuel</code> </p>\n</blockquote>",
        "id": 224397034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611870421
    }
]