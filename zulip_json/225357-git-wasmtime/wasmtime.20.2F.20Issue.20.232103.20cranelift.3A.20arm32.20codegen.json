[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-669845184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 206123989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596709351
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-670029193\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>Wow -- this is an excellent surprise to start my day with. First of all, thanks, @jmkrauz, for putting in all of this work!</p>\n<p>I'll review this in the next few days; I expect it will take a bit of time. One high-level comment regarding the register-overlap issue: we've thought about (and need to solve) it for other architectures too, e.g. x86-32, so I expect we'll have a better answer eventually. For now, a stopgap solution (for correctness) might be to simply allocate pairs as the fundamental unit (i.e. <code>D</code> regs), and just burn an extra 32-bit register for each <code>f32</code>, and punt on 128-bit vector support for now. Not ideal but it will get us to basic completeness at least. @julian-seward1 might have more thoughts on this?</p>\n</blockquote>",
        "id": 206163337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596730659
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-678383228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>@jmkrauz, I just wanted to comment here to say first of all, we haven't forgotten this -- we're working on some framework improvements that should make this backend a little bit nicer. Specifically:</p>\n<ul>\n<li>\n<p>In recent PRs I've refactored the ABI code to provide a higher-level abstraction when an ABI follows normal-ish conventions; this reduces a lot of the duplicated code between aarch64 and x64, at least. Would you be able to refactor the ABI support in this patch to use that framework (<code>ABIMachineImpl</code> trait etc)? There are a few places where it assumes 64-bitness but we can work through fixing those easily enough...</p>\n</li>\n<li>\n<p>I'm currently working out isel framework improvements to allow one SSA value to live in multiple registers; this will permit us to support <code>i64</code> on 32-bit targets (and later <code>i128</code> everywhere). I think we probably want <code>i64</code> support before this is merged, but we can see how that goes as the framework comes together.</p>\n</li>\n</ul>\n<p>I also don't want to hold this in limbo forever; at some point (@julian-seward1 and @bnjbvr may have opinions as well) we can consider merging and gating behind an experimental feature flag until we get this up to Wasm-MVP (i32/i64/f32/f64 support) level.</p>\n<p>Thanks again and hopefully this will come together sooner rather than later :-)</p>\n</blockquote>",
        "id": 207655868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598027925
    },
    {
        "content": "<p>jmkrauz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-678603571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>That's good news :)<br>\nI will work on this after the weekend.</p>\n</blockquote>",
        "id": 207710796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598078215
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-678997450\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>Agreed that we could review and merge this behind a flag, or just letting know that support for arm32 is experimental; we've done this for other backends, and we can work incrementally on supporting more opcodes etc.</p>\n</blockquote>",
        "id": 207820160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598259008
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-696454575\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>Hi @jmkrauz, it looks like you've refactored to use the common <code>abi_impl</code> machinery (thanks!). I discussed this PR briefly today with a few others and we agree that it might be best to merge now, given that I haven't resolved the multiple-register-value question yet (which this would need for <code>i64</code> values). (Sorry about that -- a lot on my plate lately!)  If that's alright with you, of course; does this seem OK or do you have plans to refine the PR more first?</p>\n<p>One thing I think we should do, however, is to put the new backend behind a feature flag until it implements Wasm MVP; otherwise someone might try to build wasmtime on arm32 and hit confusing panics. Perhaps just <code>#[cfg(feature = \"arm32\")]</code> on the main <code>mod arm32</code> statement in <code>cranelift/codegen/src/isa/mod.rs</code>?</p>\n</blockquote>",
        "id": 210817799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600735381
    },
    {
        "content": "<p>jmkrauz <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-696657552\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>Merging now is absolutely fine with me.<br>\nI have added additional commit in which I put ARM backend behind <code>experimental_arm32</code> feature flag. In order to avoid failing arm32 filetests with <code>experimental_arm32</code> disabled, I have also added small check in <code>cranelift/filetests/src/runone.rs</code>.</p>\n</blockquote>",
        "id": 210856015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600773479
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103#issuecomment-696820363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2103\">Issue #2103</a>:</p>\n<blockquote>\n<p>Excellent, thanks! Looking forward to seeing this become a full backend!</p>\n</blockquote>",
        "id": 210893039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600790869
    }
]