[
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925#issuecomment-1454264259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">issue #5925</a>:</p>\n<blockquote>\n<p>Note that I tried to modify the generated code for exports to decouple the resolve step from the call step (e.g. so you could do <code>(world.exports.get(\"x\"))(&amp;mut store)</code>), and I had that working nicely in the non-async case, but the async case got really messy.  I'll give it another shot next week.</p>\n</blockquote>",
        "id": 339463854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677886389
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925#issuecomment-1454271527\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">issue #5925</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 339464944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677887098
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925#issuecomment-1455221305\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">issue #5925</a>:</p>\n<blockquote>\n<p>After thinking about this some more, I realized that the \"early vs. late resolution\" tension I referred to above is not really a thing.  Even if we force the host to do \"early resolution\" (i.e. prior to instantiating the component), it can just provide thunks which do asynchronous operations and/or trap at runtime if they need to.  In other words, the host can always to \"late resolution\" (i.e. at the last possible moment, when called from the guest) inside the callback it provided at link time.</p>\n<p>Anyway, I went ahead and rewrote this using an ultra-minimalist approach such that the binding generator just skips wildcards entirely, leaving the host to use dynamic APIs to reflect on the component and do the necessary <code>func_wrap</code> (for imports) and <code>typed_func</code> (for exports) calls directly.  I'll close this and open a new PR. </p>\n</blockquote>",
        "id": 339749270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678053981
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925#issuecomment-1455229249\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">issue #5925</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5934\">https://github.com/bytecodealliance/wasmtime/pull/5934</a> for the new PR.</p>\n</blockquote>",
        "id": 339751502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678055792
    }
]