[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4024\">issue #4024</a>:</p>\n<blockquote>\n<p>In #3989 with the switchover to regalloc2, <code>VCode::emit</code> is almost completely immutable (needs only <code>&amp;self</code>), due to the way that we now keep regalloc2 results on-the-side and use the pre-regalloc code plus regalloc results on the fly, rather than editing in-place as before.</p>\n<p>However, the ABI implementation is still slightly stateful during emission: <code>gen_prologue</code> takes a <code>&amp;mut self</code> because it saves some computed info about the frame to use in <code>gen_epilogue</code>. Because of this, <code>VCode::emit</code> takes a <code>self</code> instead (consumes the VCode), and uses the ABI object mutably.</p>\n<p>Fixing this last little bit of mutability should in principle only need us to split out that state that the ABI impl wants to save and pass it from <code>gen_prologue</code> to <code>gen_epilogue</code> manually. This is a bit tricky because of the trait-genericity though: we need a type projection to tell us what that type is, but we use a <code>&amp;dyn ABICallee</code> (to avoid further type parameters and monomorphization everywhere) and so we can't just use a <code>A::PrologueState</code> from <code>A: ABICallee</code> because we don't have a parameter <code>A</code>.</p>\n<p>We could do some further boxing and downcasting trickery to work around this, or (my preferred solution) finally do away with the distinction between <code>ABICallee</code> and <code>ABICalleeImpl</code>, because in practice it seems we were able to share implementations and didn't need the pluggability. Then we can just use a concrete type to pass the state, and as a bonus, we remove a few vtable invocations as well (though this has not appeared in any hotpaths in the past).</p>\n</blockquote>",
        "id": 278880791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649879333
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4024\">issue #4024</a>:</p>\n<blockquote>\n<p>In #3989 with the switchover to regalloc2, <code>VCode::emit</code> is almost completely immutable (needs only <code>&amp;self</code>), due to the way that we now keep regalloc2 results on-the-side and use the pre-regalloc code plus regalloc results on the fly, rather than editing in-place as before.</p>\n<p>However, the ABI implementation is still slightly stateful during emission: <code>gen_prologue</code> takes a <code>&amp;mut self</code> because it saves some computed info about the frame to use in <code>gen_epilogue</code>. Because of this, <code>VCode::emit</code> takes a <code>self</code> instead (consumes the VCode), and uses the ABI object mutably.</p>\n<p>Fixing this last little bit of mutability should in principle only need us to split out that state that the ABI impl wants to save and pass it from <code>gen_prologue</code> to <code>gen_epilogue</code> manually. This is a bit tricky because of the trait-genericity though: we need a type projection to tell us what that type is, but we use a <code>&amp;dyn ABICallee</code> (to avoid further type parameters and monomorphization everywhere) and so we can't just use a <code>A::PrologueState</code> from <code>A: ABICallee</code> because we don't have a parameter <code>A</code>.</p>\n<p>We could do some further boxing and downcasting trickery to work around this, or (my preferred solution) finally do away with the distinction between <code>ABICallee</code> and <code>ABICalleeImpl</code>, because in practice it seems we were able to share implementations and didn't need the pluggability. Then we can just use a concrete type to pass the state, and as a bonus, we remove a few vtable invocations as well (though this has not appeared in any hotpaths in the past).</p>\n</blockquote>",
        "id": 281810373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652182509
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4024\">issue #4024</a>:</p>\n<blockquote>\n<p>In #3989 with the switchover to regalloc2, <code>VCode::emit</code> is almost completely immutable (needs only <code>&amp;self</code>), due to the way that we now keep regalloc2 results on-the-side and use the pre-regalloc code plus regalloc results on the fly, rather than editing in-place as before.</p>\n<p>However, the ABI implementation is still slightly stateful during emission: <code>gen_prologue</code> takes a <code>&amp;mut self</code> because it saves some computed info about the frame to use in <code>gen_epilogue</code>. Because of this, <code>VCode::emit</code> takes a <code>self</code> instead (consumes the VCode), and uses the ABI object mutably.</p>\n<p>Fixing this last little bit of mutability should in principle only need us to split out that state that the ABI impl wants to save and pass it from <code>gen_prologue</code> to <code>gen_epilogue</code> manually. This is a bit tricky because of the trait-genericity though: we need a type projection to tell us what that type is, but we use a <code>&amp;dyn ABICallee</code> (to avoid further type parameters and monomorphization everywhere) and so we can't just use a <code>A::PrologueState</code> from <code>A: ABICallee</code> because we don't have a parameter <code>A</code>.</p>\n<p>We could do some further boxing and downcasting trickery to work around this, or (my preferred solution) finally do away with the distinction between <code>ABICallee</code> and <code>ABICalleeImpl</code>, because in practice it seems we were able to share implementations and didn't need the pluggability. Then we can just use a concrete type to pass the state, and as a bonus, we remove a few vtable invocations as well (though this has not appeared in any hotpaths in the past).</p>\n</blockquote>",
        "id": 281810374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652182509
    }
]