[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4814\">issue #4814</a>:</p>\n<blockquote>\n<p>Currently the component model has no limit to type-bsaed recursion other than the \"width\" of a type and the number of types the type section is allowed to have. The fuzzers have subsequently studiously been finding all the issues with that in the implementation of the component model within Wasmtime. Wasmtime has a number of methods right now which recursively process a type which can lead to stack overflow for deeply nested types such as:</p>\n<ul>\n<li>the <code>Arbitrary for Type</code> implementation</li>\n<li>The <code>{Lower,Lift} for Val</code> implementations</li>\n<li>The compilation of adapter trampolines</li>\n</ul>\n<p>In each of these cases it's not 100% clear if there's an easy way to switch stack-based recursion to heap-based recursion. So far switching to heap-based recursion or alternative methods has been the go-to for fixing fuzz-bugs like this (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4657\">https://github.com/bytecodealliance/wasmtime/pull/4657</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4658\">https://github.com/bytecodealliance/wasmtime/pull/4658</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4708\">https://github.com/bytecodealliance/wasmtime/pull/4708</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4694\">https://github.com/bytecodealliance/wasmtime/pull/4694</a>) but this seems over time like it's starting to be untenable.</p>\n<p>To solve all these issues the conclusion that @fitzgen @lukewagner and I reached awhile back was to simply limit recursion of type hierarchies in the component model entirely. This is a big hammer to use but would definitely fix all of the related issues here, in addition to the recent crop of fuzz-bugs which are getting harder and harder to fix via alternative means. This also seems to mirror what the GC proposal for wasm is doing where limits are placed on the type recursion there as well.</p>\n<p>One option to implement this would be an error from <code>wasmparser</code> during validation but I think for now it may be best represented as an error from Wasmtime itself due to that being where all the fuzz bugs are. If we feel it's necessary this could also be moved to <code>wasmparser</code> instead. </p>\n<p>One bit of trickiness here is that we'll need to update <code>Arbitrary for Type</code> to have some limited recursion, and I'm not sure how to do that with <code>#[derive]</code> without a thread-local based solution. This may be a case where it's better to have a custom method taking <code>Unstructured</code> with a <code>depth</code> where the <code>depth</code> filters out some possible types to generate.</p>\n</blockquote>",
        "id": 296030999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661830721
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4814\">issue #4814</a>:</p>\n<blockquote>\n<p>Currently the component model has no limit to type-bsaed recursion other than the \"width\" of a type and the number of types the type section is allowed to have. The fuzzers have subsequently studiously been finding all the issues with that in the implementation of the component model within Wasmtime. Wasmtime has a number of methods right now which recursively process a type which can lead to stack overflow for deeply nested types such as:</p>\n<ul>\n<li>the <code>Arbitrary for Type</code> implementation</li>\n<li>The <code>{Lower,Lift} for Val</code> implementations</li>\n<li>The compilation of adapter trampolines</li>\n</ul>\n<p>In each of these cases it's not 100% clear if there's an easy way to switch stack-based recursion to heap-based recursion. So far switching to heap-based recursion or alternative methods has been the go-to for fixing fuzz-bugs like this (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4657\">https://github.com/bytecodealliance/wasmtime/pull/4657</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4658\">https://github.com/bytecodealliance/wasmtime/pull/4658</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4708\">https://github.com/bytecodealliance/wasmtime/pull/4708</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4694\">https://github.com/bytecodealliance/wasmtime/pull/4694</a>) but this seems over time like it's starting to be untenable.</p>\n<p>To solve all these issues the conclusion that @fitzgen @lukewagner and I reached awhile back was to simply limit recursion of type hierarchies in the component model entirely. This is a big hammer to use but would definitely fix all of the related issues here, in addition to the recent crop of fuzz-bugs which are getting harder and harder to fix via alternative means. This also seems to mirror what the GC proposal for wasm is doing where limits are placed on the type recursion there as well.</p>\n<p>One option to implement this would be an error from <code>wasmparser</code> during validation but I think for now it may be best represented as an error from Wasmtime itself due to that being where all the fuzz bugs are. If we feel it's necessary this could also be moved to <code>wasmparser</code> instead. </p>\n<p>One bit of trickiness here is that we'll need to update <code>Arbitrary for Type</code> to have some limited recursion, and I'm not sure how to do that with <code>#[derive]</code> without a thread-local based solution. This may be a case where it's better to have a custom method taking <code>Unstructured</code> with a <code>depth</code> where the <code>depth</code> filters out some possible types to generate.</p>\n</blockquote>",
        "id": 296031003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661830733
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4814\">issue #4814</a>:</p>\n<blockquote>\n<p>Currently the component model has no limit to type-bsaed recursion other than the \"width\" of a type and the number of types the type section is allowed to have. The fuzzers have subsequently studiously been finding all the issues with that in the implementation of the component model within Wasmtime. Wasmtime has a number of methods right now which recursively process a type which can lead to stack overflow for deeply nested types such as:</p>\n<ul>\n<li>the <code>Arbitrary for Type</code> implementation</li>\n<li>The <code>{Lower,Lift} for Val</code> implementations</li>\n<li>The compilation of adapter trampolines</li>\n</ul>\n<p>In each of these cases it's not 100% clear if there's an easy way to switch stack-based recursion to heap-based recursion. So far switching to heap-based recursion or alternative methods has been the go-to for fixing fuzz-bugs like this (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4657\">https://github.com/bytecodealliance/wasmtime/pull/4657</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4658\">https://github.com/bytecodealliance/wasmtime/pull/4658</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4708\">https://github.com/bytecodealliance/wasmtime/pull/4708</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4694\">https://github.com/bytecodealliance/wasmtime/pull/4694</a>) but this seems over time like it's starting to be untenable.</p>\n<p>To solve all these issues the conclusion that @fitzgen @lukewagner and I reached awhile back was to simply limit recursion of type hierarchies in the component model entirely. This is a big hammer to use but would definitely fix all of the related issues here, in addition to the recent crop of fuzz-bugs which are getting harder and harder to fix via alternative means. This also seems to mirror what the GC proposal for wasm is doing where limits are placed on the type recursion there as well.</p>\n<p>One option to implement this would be an error from <code>wasmparser</code> during validation but I think for now it may be best represented as an error from Wasmtime itself due to that being where all the fuzz bugs are. If we feel it's necessary this could also be moved to <code>wasmparser</code> instead. </p>\n<p>One bit of trickiness here is that we'll need to update <code>Arbitrary for Type</code> to have some limited recursion, and I'm not sure how to do that with <code>#[derive]</code> without a thread-local based solution. This may be a case where it's better to have a custom method taking <code>Unstructured</code> with a <code>depth</code> where the <code>depth</code> filters out some possible types to generate.</p>\n</blockquote>",
        "id": 296031004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661830734
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4814\">issue #4814</a>:</p>\n<blockquote>\n<p>Currently the component model has no limit to type-bsaed recursion other than the \"width\" of a type and the number of types the type section is allowed to have. The fuzzers have subsequently studiously been finding all the issues with that in the implementation of the component model within Wasmtime. Wasmtime has a number of methods right now which recursively process a type which can lead to stack overflow for deeply nested types such as:</p>\n<ul>\n<li>the <code>Arbitrary for Type</code> implementation</li>\n<li>The <code>{Lower,Lift} for Val</code> implementations</li>\n<li>The compilation of adapter trampolines</li>\n</ul>\n<p>In each of these cases it's not 100% clear if there's an easy way to switch stack-based recursion to heap-based recursion. So far switching to heap-based recursion or alternative methods has been the go-to for fixing fuzz-bugs like this (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/4657\">https://github.com/bytecodealliance/wasmtime/pull/4657</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4658\">https://github.com/bytecodealliance/wasmtime/pull/4658</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4708\">https://github.com/bytecodealliance/wasmtime/pull/4708</a> <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4694\">https://github.com/bytecodealliance/wasmtime/pull/4694</a>) but this seems over time like it's starting to be untenable.</p>\n<p>To solve all these issues the conclusion that @fitzgen @lukewagner and I reached awhile back was to simply limit recursion of type hierarchies in the component model entirely. This is a big hammer to use but would definitely fix all of the related issues here, in addition to the recent crop of fuzz-bugs which are getting harder and harder to fix via alternative means. This also seems to mirror what the GC proposal for wasm is doing where limits are placed on the type recursion there as well.</p>\n<p>One option to implement this would be an error from <code>wasmparser</code> during validation but I think for now it may be best represented as an error from Wasmtime itself due to that being where all the fuzz bugs are. If we feel it's necessary this could also be moved to <code>wasmparser</code> instead. </p>\n<p>One bit of trickiness here is that we'll need to update <code>Arbitrary for Type</code> to have some limited recursion, and I'm not sure how to do that with <code>#[derive]</code> without a thread-local based solution. This may be a case where it's better to have a custom method taking <code>Unstructured</code> with a <code>depth</code> where the <code>depth</code> filters out some possible types to generate.</p>\n</blockquote>",
        "id": 296424577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661970546
    }
]