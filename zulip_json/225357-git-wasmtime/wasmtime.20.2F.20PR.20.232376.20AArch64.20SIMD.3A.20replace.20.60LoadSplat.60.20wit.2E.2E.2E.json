[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a>.</p>",
        "id": 215920522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604708667
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 215920523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604708667
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 215920574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604708742
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-525687781\">PR Review</a>.</p>",
        "id": 215977825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604790358
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519226866\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Shouldn't we keep these helpers in <code>lower.rs</code>? I thought that <code>lower_inst.rs</code> was created to contain just the big functions <code>lower_insn_to_regs()</code> and <code>lower_branch()</code>.</p>\n</blockquote>",
        "id": 215977826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604790358
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519230309\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I just had a quick look at #2366, so I might be missing something, but the description says:<br>\n<code>This can only be done to an instruction with no uses of its result register(s), because it will cause the instruction not to be codegen'd at its original location.</code><br>\n(I guess the meaning is that there are no uses of its result except the instruction it has been merged into)<br>\nIt is not clear to me how we ensure that here; at the very least shouldn't there be a test case where the result of a load is used both by a splat and by another operation?</p>\n</blockquote>",
        "id": 215977827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604790358
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-525687781\">PR Review</a>.</p>",
        "id": 215977828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604790359
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-525693556\">PR Review</a>.</p>",
        "id": 215979580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604793226
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519235825\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, no other uses than the one by the input merging the op (I'll clarify that, and add a test for the multi-use case).</p>\n<p>The condition is ensured by the logic in <code>maybe_get_input_as_source_or_const()</code>: it will return <code>None</code> as the <code>inst</code> field in the returned <code>LowerInput</code> if any of the conditions for code motion are not satisfied. So, things just transparently work in the pattern-matching: we won't see any source op at all if we aren't allowed to merge it.</p>\n</blockquote>",
        "id": 215979581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604793226
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-526467553\">PR Review</a>.</p>",
        "id": 216113688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604941514
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519974090\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for fewer CLIF instructions!</p>\n</blockquote>",
        "id": 216113689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604941514
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-526468655\">PR Review</a>.</p>",
        "id": 216113843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604941583
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519974947\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So a separate PR will do the same for x64?</p>\n</blockquote>",
        "id": 216113844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604941583
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-526495822\">PR Review</a>.</p>",
        "id": 216118191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604943488
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r519996242\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed, that's my plan for today :-)</p>\n</blockquote>",
        "id": 216118193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604943488
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216125176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604946623
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-526537322\">PR Review</a>.</p>",
        "id": 216125255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604946671
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#discussion_r520028260\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, good point, we've gotten a bit sloppy about this -- moved the added helpers as well as the one above this code.</p>\n</blockquote>",
        "id": 216125256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604946671
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216125845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604946908
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216126129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604947053
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216165249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604973386
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-527550791\">PR Review</a>.</p>",
        "id": 216264072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605037544
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216297200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605057522
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216298188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605058553
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216948566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605570040
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a> from <code>loadsplat</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR uses the isel changes introduced in #2366 that allows loads to sink and merge with other operations in order to replace the <code>LoadSplat</code> instruction with more general pattern-matching.</p>\n<p><code>LoadSplat</code> was added as an incremental step to improve AArch64 code quality in #2278. At the time, we did not have a way to pattern-match the load + splat opcode sequence that the relevant Wasm opcodes lowered to. However, now with PR #2366, we can merge effectful instructions such as loads into other ops, and so we can do this pattern matching directly.</p>\n<p>PR includes commit from #2366 to allow simultaneous review/CI.</p>\n<p>cc @julian-seward1 @akirilov-arm @abrown</p>\n</blockquote>",
        "id": 216949969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605571179
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376#pullrequestreview-532400966\">PR Review</a>.</p>",
        "id": 217006666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605622378
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2376\">PR #2376</a>.</p>",
        "id": 217022289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605629003
    }
]