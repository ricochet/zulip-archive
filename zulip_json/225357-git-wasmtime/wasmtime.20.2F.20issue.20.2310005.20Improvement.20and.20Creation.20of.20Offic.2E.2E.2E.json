[
    {
        "content": "<p>JBrosDevelopment opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005\">issue #10005</a>:</p>\n<blockquote>\n<h3>Updated Official Cranelift Tutorial</h3>\n<p>I personally came to Cranelift as an <a href=\"https://llvm.org\">LLVM</a> alternative because LLVM was giving me trouble specifically with linking errors on my windows machine. I had high hopes going into using Cranelift because it just worked with the very helpful <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a>. Although after this first success, there was a lot of frustration because the demo is now outdated especially the <code>faerie</code> branch and there is basically no other tutorials out there for Cranelift besides this <a href=\"https://rodrigodd.github.io/2022/10/21/bf_compiler-part1.html\">brainfuck compiler</a> I found.</p>\n<p>For me, a newbie to Cranelift, trying to incorporate a compiler for my programming language project was very <strong>frustrating</strong>. Especially trying to use the <code>cranelift-object</code> module. Chat GPT and copilot where not very helpful either <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span>. I really wanted it to work because I think Cranelift is such an <strong>awesome piece of software</strong> but I just couldn't seem to do it. That's why I think an _up-to-date_ tutorial for Cranelift would be very beneficial for people like me trying to make a compiler without using LLVM. I imaging it would be similar to the <a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">Kaleidoscope</a> tutorial that LLVM uses.</p>\n<h4>Alternatives</h4>\n<p>I understand that this would be a big undertaking. If this is too much for now, an updated toy demo would work well. Specifically, one that doesn't use the outdated <code>faerie</code> module. </p>\n<h4>Suggestions</h4>\n<p>A very simple toy language similar to the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a> would be very beneficial. Especially if it would be kept up-to-date with the latest versions of Cranelift. And if someone had extra time, incorporating multiple types. For me at least, part of the pain was trying to use the <code>cranelift-object</code> module, so maybe incorporating that into the tutorial would be helpful.<br>\n</p>\n</blockquote>",
        "id": 493501144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736824679
    },
    {
        "content": "<p>JBrosDevelopment edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005\">issue #10005</a>:</p>\n<blockquote>\n<h3>Updated Official Cranelift Tutorial</h3>\n<p>I personally came to Cranelift as an <a href=\"https://llvm.org\">LLVM</a> alternative because LLVM was giving me trouble specifically with linking errors on my windows machine. I had high hopes going into using Cranelift because it just worked with the very helpful <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a>. Although after this first success, there was a lot of frustration because the demo is now outdated especially the <code>faerie</code> branch and there is basically no other tutorials out there for Cranelift besides this <a href=\"https://rodrigodd.github.io/2022/10/21/bf_compiler-part1.html\">brainfuck compiler</a> I found.</p>\n<p>For me, a newbie to Cranelift, trying to incorporate a compiler for my programming language project was very <strong>frustrating</strong>. Especially trying to use the <code>cranelift-object</code> module. Chat GPT and copilot where not very helpful either <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span>. I really wanted it to work because I think Cranelift is such an <strong>awesome piece of software</strong> but I just couldn't seem to do it. That's why I think an _up-to-date_ tutorial for Cranelift would be very beneficial for people like me trying to make a compiler without using LLVM. I imaging it would be similar to the <a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">Kaleidoscope</a> tutorial that LLVM uses.</p>\n<h4>Alternatives</h4>\n<p>I understand that this would be a big undertaking. If this is too much for now, an updated toy demo would work well. Specifically, one that doesn't use the outdated <code>faerie</code> module. </p>\n<h4>Suggestions</h4>\n<p>A very simple toy language similar to the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a> would be very beneficial. Especially if it would be kept up-to-date with the latest versions of Cranelift. And if someone had extra time, incorporating multiple types. For me at least, part of the pain was trying to use the <code>cranelift-object</code> module, so maybe incorporating that into the tutorial would be helpful.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 493501190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736824686
    },
    {
        "content": "<p>JBrosDevelopment edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005\">issue #10005</a>:</p>\n<blockquote>\n<h3>Updated Official Cranelift Tutorial</h3>\n<p>I personally came to Cranelift as an <a href=\"https://llvm.org\">LLVM</a> alternative because LLVM was giving me trouble specifically with linking errors on my windows machine. I had high hopes going into using Cranelift because it just worked with the very helpful <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a>. Although after this first success, there was a lot of frustration because the demo is now outdated especially the <code>faerie</code> branch and there is basically no other tutorials out there for Cranelift besides this <a href=\"https://rodrigodd.github.io/2022/10/21/bf_compiler-part1.html\">brainfuck compiler</a> I found.</p>\n<p>For me, a newbie to Cranelift, trying to incorporate a compiler for my programming language project was very <strong>frustrating</strong>. Especially trying to use the <code>cranelift-object</code> module. Chat GPT and copilot where not very helpful either <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span>. I really wanted it to work because I think Cranelift is such an <strong>awesome piece of software</strong> but I just couldn't seem to do it. That's why I think an _up-to-date_ tutorial for Cranelift would be very beneficial for people like me trying to make a compiler without using LLVM. I imaging it would be similar to the <a href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\">Kaleidoscope</a> tutorial that LLVM uses.</p>\n<h4>Alternatives</h4>\n<p>I understand that this would be a big undertaking. If this is too much for now, an updated toy demo would work well. Specifically, one that doesn't use the outdated <code>faerie</code> module. </p>\n<h4>Suggestions</h4>\n<p>A very simple toy language similar to the <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo</a> would be very beneficial. Especially if it would be kept up-to-date with the latest versions of Cranelift. And if someone had extra time, incorporating multiple types. For me at least, part of the pain was trying to use the <code>cranelift-object</code> module, so maybe incorporating that into the tutorial would be helpful.</p>\n</blockquote>",
        "id": 493501207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736824699
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the cranelift:docs label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005\">Issue #10005</a>.</p>",
        "id": 494200984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737049094
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005#issuecomment-2596343359\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10005\">issue #10005</a>:</p>\n<blockquote>\n<p>Hi @JBrosDevelopment -- thanks for filing the issue! We've wanted to expand our documentation for a while -- unfortunately we haven't had folks with enough cycles to build out an example like you describe. (We're pretty thinly staffed, with something like 100x fewer contributors than LLVM.) If anyone is interested in building out an example (the \"hard way\" using just our API docs) and then writing about it, we'd be happy to review additions to the docs. In the meantime, please do feel free to ask questions on our <a href=\"https://bytecodealliance.zulipchat.com/\">Zulip</a> instance, and there are usually folks around who can answer specific questions.</p>\n</blockquote>",
        "id": 494202174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737049528
    }
]