[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I tried to <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\">switch to the <code>haswell</code> preset</a> for SIMD support in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a>. On Linux everything is fine, however on macOS <code>clz</code> returns the wrong result. (At least on github actions) As I currently don't have access to a mac, I used github actions to bisect the change from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a> and to minimize the test case to basically</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">intrinsics</span>::<span class=\"n\">ctlz</span><span class=\"p\">(</span><span class=\"mb\">0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000</span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in 5f58262982a8b36b4c5cf5b7f1c515c77ac0c65b.</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir before compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2() system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64) system_v\n    sig1 = (i64) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0:\n                                    nop\n                                    jump block1\n\n                                block1:\n                                    nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002                               v0 = iconst.i64 0x0020_0000_0800_4000\n@0002                               v1 = iconst.i64 0x0020_8000_0000\n@0002                               v2 = iconcat v0, v1\n@0002                               v3, v4 = isplit v2\n@0002                               v5 = clz v3\n@0002                               v6 = clz v4\n@0002                               v7 = icmp_imm eq v4, 0\n@0002                               v8 = iadd_imm v5, 64\n@0002                               v9 = select v7, v8, v6\n@0002                               v10 = uextend.i128 v9\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002                               jump block2\n\n                                block2:\n@0002                               nop\n@0001                               v12, v13 = isplit.i128 v11\n@0001                               v14 = ireduce.i32 v12\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004                               v15 = iconst.i32 26\n@0004                               v16 = icmp ne v14, v15\n@0004                               v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006                               v18 = uextend.i32 v17\n@0006                               brz v18, block3\n@0006                               jump block4\n\n                                block3:\n@0006                               nop\n;\n; return\n@0008                               return\n\n                                block4:\n@0008                               nop\n@0009                               v19 = global_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009                               v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a                               call fn0(v20)\n@000a                               v21 = global_value.i64 gv1\n@000a                               call fn1(v21)\n@000a                               trap unreachable\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir after compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2(i64 fp [%rbp]) -&gt; i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64 [%rdi]) system_v\n    sig1 = (i64 [%rdi]) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0(v24: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v24\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[-]                                 nop\n[-]                                 fallthrough block1\n\n                                block1:\n[-]                                 nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002 [RexOp1pu_iq#80b8,%rax]       v0 = iconst.i64 0x0020_0000_0800_4000\n                                    v3 -&gt; v0\n@0002 [RexOp1pu_iq#80b8,%rcx]       v1 = iconst.i64 0x0020_8000_0000\n                                    v4 -&gt; v1\n@0002 [-,-]                         v2 = iconcat v0, v1\n@0002 [RexMp2urm#86bd,%rax]         v5 = clz v0\n@0002 [RexMp2urm#86bd,%rdx]         v6 = clz v1\n@0002 [DynRexOp1icscc_ib#f083,%rcx] v7 = icmp_imm eq v1, 0\n@0002 [DynRexOp1r_ib#8083,%rax]     v8 = iadd_imm v5, 64\n@0002 [RexOp1t8jccb#75]             brnz v7, block5(v8)\n[-]                                 fallthrough block7\n\n                                block7:\n@0002 [DynRexOp1umr#8089,%rax]      v23 = copy.i64 v6\n@0002 [-]                           fallthrough block5(v23)\n\n                                block5(v9: i64 [%rax]):\n                                    v12 -&gt; v9\n@0002 [RexOp1pu_id#b8,%rcx]         v22 = iconst.i64 0\n                                    v13 -&gt; v22\n@0002 [-,-]                         v10 = iconcat v9, v22\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002 [-]                           fallthrough block2\n\n                                block2:\n@0002 [-]                           nop\n@0001 [null#00,%rax]                v14 = ireduce.i32 v9\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004 [RexOp1pu_id#b8,%rcx]         v15 = iconst.i32 26\n@0004 [DynRexOp1icscc#39,%rax]      v16 = icmp ne v14, v15\n@0004 [RexOp2urm_noflags#4b6,%rax]  v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006 [RexOp2urm_noflags#4b6,%rax]  v18 = uextend.i32 v17\n;                                                            ;  val1@%rax\n@0006 [RexOp1tjccb#74]              brz v18, block3\n@0006 [Op1jmpb#eb]                  jump block4\n\n                                block3:\n@0006 [-]                           nop\n;\n; return\n[RexOp1popq#58,%rbp]                v25 = x86_pop.i64\n@0008 [Op1ret#c3]                   return v25\n\n                                block4:\n@0008 [-]                           nop\n@0009 [RexOp1pcrel_gvaddr8#808d,%rax] v19 = symbol_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009 [RexOp1ld#808b,%rax]          v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a [RexOp1rmov#8089]             regmove v20, %rax -&gt; %rdi\n;                                                            ;  val4@%rdi\n@000a [Op1call_plt_id#e8]           call fn0(v20)\n;                                                            ;  val4â˜\n@000a [RexOp1pcrel_gvaddr8#808d,%rax] v21 = symbol_value.i64 gv1\n@000a [RexOp1rmov#8089]             regmove v21, %rax -&gt; %rdi\n@000a [Op1call_plt_id#e8]           call fn1(v21)\n@000a [Op2trap#40b]                 trap unreachable\n;                                                            ;  val1â˜\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using? ac7cd4c46abdc9d4f3ef3230386afd52177e5f7c</li>\n<li>If relevant, can you include some extra information about your environment? x86_64 macOS</li>\n</ul>\n</blockquote>",
        "id": 192435558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585681795
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I tried to <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\">switch to the <code>haswell</code> preset</a> for SIMD support in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a>. On Linux everything is fine, however on macOS <code>clz</code> returns the wrong result. (At least on github actions) As I currently don't have access to a mac, I used github actions to bisect the change from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a> and to minimize the test case to basically</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">intrinsics</span>::<span class=\"n\">ctlz</span><span class=\"p\">(</span><span class=\"mb\">0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000</span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in 5f58262982a8b36b4c5cf5b7f1c515c77ac0c65b.</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir before compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2() system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64) system_v\n    sig1 = (i64) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0:\n                                    nop\n                                    jump block1\n\n                                block1:\n                                    nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002                               v0 = iconst.i64 0x0020_0000_0800_4000\n@0002                               v1 = iconst.i64 0x0020_8000_0000\n@0002                               v2 = iconcat v0, v1\n@0002                               v3, v4 = isplit v2\n@0002                               v5 = clz v3\n@0002                               v6 = clz v4\n@0002                               v7 = icmp_imm eq v4, 0\n@0002                               v8 = iadd_imm v5, 64\n@0002                               v9 = select v7, v8, v6\n@0002                               v10 = uextend.i128 v9\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002                               jump block2\n\n                                block2:\n@0002                               nop\n@0001                               v12, v13 = isplit.i128 v11\n@0001                               v14 = ireduce.i32 v12\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004                               v15 = iconst.i32 26\n@0004                               v16 = icmp ne v14, v15\n@0004                               v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006                               v18 = uextend.i32 v17\n@0006                               brz v18, block3\n@0006                               jump block4\n\n                                block3:\n@0006                               nop\n;\n; return\n@0008                               return\n\n                                block4:\n@0008                               nop\n@0009                               v19 = global_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009                               v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a                               call fn0(v20)\n@000a                               v21 = global_value.i64 gv1\n@000a                               call fn1(v21)\n@000a                               trap unreachable\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir after compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2(i64 fp [%rbp]) -&gt; i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64 [%rdi]) system_v\n    sig1 = (i64 [%rdi]) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0(v24: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v24\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[-]                                 nop\n[-]                                 fallthrough block1\n\n                                block1:\n[-]                                 nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002 [RexOp1pu_iq#80b8,%rax]       v0 = iconst.i64 0x0020_0000_0800_4000\n                                    v3 -&gt; v0\n@0002 [RexOp1pu_iq#80b8,%rcx]       v1 = iconst.i64 0x0020_8000_0000\n                                    v4 -&gt; v1\n@0002 [-,-]                         v2 = iconcat v0, v1\n@0002 [RexMp2urm#86bd,%rax]         v5 = clz v0\n@0002 [RexMp2urm#86bd,%rdx]         v6 = clz v1\n@0002 [DynRexOp1icscc_ib#f083,%rcx] v7 = icmp_imm eq v1, 0\n@0002 [DynRexOp1r_ib#8083,%rax]     v8 = iadd_imm v5, 64\n@0002 [RexOp1t8jccb#75]             brnz v7, block5(v8)\n[-]                                 fallthrough block7\n\n                                block7:\n@0002 [DynRexOp1umr#8089,%rax]      v23 = copy.i64 v6\n@0002 [-]                           fallthrough block5(v23)\n\n                                block5(v9: i64 [%rax]):\n                                    v12 -&gt; v9\n@0002 [RexOp1pu_id#b8,%rcx]         v22 = iconst.i64 0\n                                    v13 -&gt; v22\n@0002 [-,-]                         v10 = iconcat v9, v22\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002 [-]                           fallthrough block2\n\n                                block2:\n@0002 [-]                           nop\n@0001 [null#00,%rax]                v14 = ireduce.i32 v9\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004 [RexOp1pu_id#b8,%rcx]         v15 = iconst.i32 26\n@0004 [DynRexOp1icscc#39,%rax]      v16 = icmp ne v14, v15\n@0004 [RexOp2urm_noflags#4b6,%rax]  v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006 [RexOp2urm_noflags#4b6,%rax]  v18 = uextend.i32 v17\n;                                                            ;  val1@%rax\n@0006 [RexOp1tjccb#74]              brz v18, block3\n@0006 [Op1jmpb#eb]                  jump block4\n\n                                block3:\n@0006 [-]                           nop\n;\n; return\n[RexOp1popq#58,%rbp]                v25 = x86_pop.i64\n@0008 [Op1ret#c3]                   return v25\n\n                                block4:\n@0008 [-]                           nop\n@0009 [RexOp1pcrel_gvaddr8#808d,%rax] v19 = symbol_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009 [RexOp1ld#808b,%rax]          v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a [RexOp1rmov#8089]             regmove v20, %rax -&gt; %rdi\n;                                                            ;  val4@%rdi\n@000a [Op1call_plt_id#e8]           call fn0(v20)\n;                                                            ;  val4â˜\n@000a [RexOp1pcrel_gvaddr8#808d,%rax] v21 = symbol_value.i64 gv1\n@000a [RexOp1rmov#8089]             regmove v21, %rax -&gt; %rdi\n@000a [Op1call_plt_id#e8]           call fn1(v21)\n@000a [Op2trap#40b]                 trap unreachable\n;                                                            ;  val1â˜\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using? ac7cd4c46abdc9d4f3ef3230386afd52177e5f7c</li>\n<li>If relevant, can you include some extra information about your environment? x86_64 macOS</li>\n</ul>\n</blockquote>",
        "id": 192435559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585681795
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I tried to <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\">switch to the <code>haswell</code> preset</a> for SIMD support in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a>. On Linux everything is fine, however on macOS <code>clz</code> returns the wrong result. (At least on github actions) As I currently don't have access to a mac, I used github actions to bisect the change from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a> and to minimize the test case to basically</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">intrinsics</span>::<span class=\"n\">ctlz</span><span class=\"p\">(</span><span class=\"mb\">0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000</span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in 5f58262982a8b36b4c5cf5b7f1c515c77ac0c65b.</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir before compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2() system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64) system_v\n    sig1 = (i64) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0:\n                                    nop\n                                    jump block1\n\n                                block1:\n                                    nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002                               v0 = iconst.i64 0x0020_0000_0800_4000\n@0002                               v1 = iconst.i64 0x0020_8000_0000\n@0002                               v2 = iconcat v0, v1\n@0002                               v3, v4 = isplit v2\n@0002                               v5 = clz v3\n@0002                               v6 = clz v4\n@0002                               v7 = icmp_imm eq v4, 0\n@0002                               v8 = iadd_imm v5, 64\n@0002                               v9 = select v7, v8, v6\n@0002                               v10 = uextend.i128 v9\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002                               jump block2\n\n                                block2:\n@0002                               nop\n@0001                               v12, v13 = isplit.i128 v11\n@0001                               v14 = ireduce.i32 v12\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004                               v15 = iconst.i32 26\n@0004                               v16 = icmp ne v14, v15\n@0004                               v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006                               v18 = uextend.i32 v17\n@0006                               brz v18, block3\n@0006                               jump block4\n\n                                block3:\n@0006                               nop\n;\n; return\n@0008                               return\n\n                                block4:\n@0008                               nop\n@0009                               v19 = global_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009                               v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a                               call fn0(v20)\n@000a                               v21 = global_value.i64 gv1\n@000a                               call fn1(v21)\n@000a                               trap unreachable\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir after compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2(i64 fp [%rbp]) -&gt; i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64 [%rdi]) system_v\n    sig1 = (i64 [%rdi]) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0(v24: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v24\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[-]                                 nop\n[-]                                 fallthrough block1\n\n                                block1:\n[-]                                 nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002 [RexOp1pu_iq#80b8,%rax]       v0 = iconst.i64 0x0020_0000_0800_4000\n                                    v3 -&gt; v0\n@0002 [RexOp1pu_iq#80b8,%rcx]       v1 = iconst.i64 0x0020_8000_0000\n                                    v4 -&gt; v1\n@0002 [-,-]                         v2 = iconcat v0, v1\n@0002 [RexMp2urm#86bd,%rax]         v5 = clz v0\n@0002 [RexMp2urm#86bd,%rdx]         v6 = clz v1\n@0002 [DynRexOp1icscc_ib#f083,%rcx] v7 = icmp_imm eq v1, 0\n@0002 [DynRexOp1r_ib#8083,%rax]     v8 = iadd_imm v5, 64\n@0002 [RexOp1t8jccb#75]             brnz v7, block5(v8)\n[-]                                 fallthrough block7\n\n                                block7:\n@0002 [DynRexOp1umr#8089,%rax]      v23 = copy.i64 v6\n@0002 [-]                           fallthrough block5(v23)\n\n                                block5(v9: i64 [%rax]):\n                                    v12 -&gt; v9\n@0002 [RexOp1pu_id#b8,%rcx]         v22 = iconst.i64 0\n                                    v13 -&gt; v22\n@0002 [-,-]                         v10 = iconcat v9, v22\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002 [-]                           fallthrough block2\n\n                                block2:\n@0002 [-]                           nop\n@0001 [null#00,%rax]                v14 = ireduce.i32 v9\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004 [RexOp1pu_id#b8,%rcx]         v15 = iconst.i32 26\n@0004 [DynRexOp1icscc#39,%rax]      v16 = icmp ne v14, v15\n@0004 [RexOp2urm_noflags#4b6,%rax]  v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006 [RexOp2urm_noflags#4b6,%rax]  v18 = uextend.i32 v17\n;                                                            ;  val1@%rax\n@0006 [RexOp1tjccb#74]              brz v18, block3\n@0006 [Op1jmpb#eb]                  jump block4\n\n                                block3:\n@0006 [-]                           nop\n;\n; return\n[RexOp1popq#58,%rbp]                v25 = x86_pop.i64\n@0008 [Op1ret#c3]                   return v25\n\n                                block4:\n@0008 [-]                           nop\n@0009 [RexOp1pcrel_gvaddr8#808d,%rax] v19 = symbol_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009 [RexOp1ld#808b,%rax]          v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a [RexOp1rmov#8089]             regmove v20, %rax -&gt; %rdi\n;                                                            ;  val4@%rdi\n@000a [Op1call_plt_id#e8]           call fn0(v20)\n;                                                            ;  val4â˜\n@000a [RexOp1pcrel_gvaddr8#808d,%rax] v21 = symbol_value.i64 gv1\n@000a [RexOp1rmov#8089]             regmove v21, %rax -&gt; %rdi\n@000a [Op1call_plt_id#e8]           call fn1(v21)\n@000a [Op2trap#40b]                 trap unreachable\n;                                                            ;  val1â˜\n}\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using? ac7cd4c46abdc9d4f3ef3230386afd52177e5f7c</li>\n<li>If relevant, can you include some extra information about your environment? x86_64 macOS</li>\n</ul>\n</blockquote>",
        "id": 192435560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585681795
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606820369\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606820369\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>This issue or pull request has been labeled: \"cranelift\"</p>\n<p>&lt;details&gt; &lt;summary&gt;Users Subscribed to \"cranelift\"&lt;/summary&gt;</p>\n<ul>\n<li>@bnjbvr</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a></p>\n</blockquote>",
        "id": 192436225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585682112
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606858985\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606858985\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>That is very weird; what are the chances that <code>has_lzcnt</code> is not getting <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2c416484710ae64b7237597dbf6a321b5ca4662c/cranelift/native/src/lib.rs#L97\" title=\"https://github.com/bytecodealliance/wasmtime/blob/2c416484710ae64b7237597dbf6a321b5ca4662c/cranelift/native/src/lib.rs#L97\">enabled in the settings</a> for some reason? I've had that problem before. Maybe the <code>#[cfg...]</code> is preventing that function from being compiled on the macOS target?</p>\n</blockquote>",
        "id": 192445624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585686790
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606863370\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606863370\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I am not using <code>cranelift-native</code>. Instead I take the target triple from rustc, parse it and pass it to <code>cranelift_codegen::isa::lookup</code>. In the failing PR I then tried to enable the <code>haswell</code> preset.</p>\n</blockquote>",
        "id": 192446621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585687300
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606866575\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606866575\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>Yeah, but if you are running <code>test compile</code> filetests then you might be: see the <code>TargetIsa</code> passed in to <code>TestCompile::run</code>?</p>\n</blockquote>",
        "id": 192447326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585687668
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871442\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I haven't run it as <code>test compile</code>. I just made the clif ir printer in cg_clif always include that directive to make running it that way faster. Due to the several minute CI feedback loop, I haven't made a standalone repro yet.</p>\n</blockquote>",
        "id": 192448536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585688284
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871508\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871508\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I haven't run it as <code>test compile</code>. I just made the clif ir printer in cg_clif always include that directive to make running it that way faster. Due to the several minute CI feedback loop, I haven't made a standalone repro yet.</p>\n</blockquote>",
        "id": 192448551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585688292
    },
    {
        "content": "<p>bjorn3 deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871508\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-606871508\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I haven't run it as <code>test compile</code>. I just made the clif ir printer in cg_clif always include that directive to make running it that way faster. Due to the several minute CI feedback loop, I haven't made a standalone repro yet.</p>\n</blockquote>",
        "id": 192448570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585688302
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448#issuecomment-663855962\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>Found the problem: The macOS CI uses an \"Intel(R) Xeon(R) CPU E5-1650 v2 @ 3.50GHz\" This is a Ivy Bridge EP, which means that <code>lzcnt</code> is not yet supported.</p>\n</blockquote>",
        "id": 205004065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595683899
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">Issue #1448</a>:</p>\n<blockquote>\n<p>I tried to <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/master...cd7a270e02de947afb86b15bd4931ba931f4b4d6\">switch to the <code>haswell</code> preset</a> for SIMD support in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a>. On Linux everything is fine, however on macOS <code>clz</code> returns the wrong result. (At least on github actions) As I currently don't have access to a mac, I used github actions to bisect the change from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/951\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/951</a> and to minimize the test case to basically</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">intrinsics</span>::<span class=\"n\">ctlz</span><span class=\"p\">(</span><span class=\"mb\">0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000</span><span class=\"kt\">u128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>in 5f58262982a8b36b4c5cf5b7f1c515c77ac0c65b.</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir before compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2() system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64) system_v\n    sig1 = (i64) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0:\n                                    nop\n                                    jump block1\n\n                                block1:\n                                    nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002                               v0 = iconst.i64 0x0020_0000_0800_4000\n@0002                               v1 = iconst.i64 0x0020_8000_0000\n@0002                               v2 = iconcat v0, v1\n@0002                               v3, v4 = isplit v2\n@0002                               v5 = clz v3\n@0002                               v6 = clz v4\n@0002                               v7 = icmp_imm eq v4, 0\n@0002                               v8 = iadd_imm v5, 64\n@0002                               v9 = select v7, v8, v6\n@0002                               v10 = uextend.i128 v9\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002                               jump block2\n\n                                block2:\n@0002                               nop\n@0001                               v12, v13 = isplit.i128 v11\n@0001                               v14 = ireduce.i32 v12\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004                               v15 = iconst.i32 26\n@0004                               v16 = icmp ne v14, v15\n@0004                               v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006                               v18 = uextend.i32 v17\n@0006                               brz v18, block3\n@0006                               jump block4\n\n                                block3:\n@0006                               nop\n;\n; return\n@0008                               return\n\n                                block4:\n@0008                               nop\n@0009                               v19 = global_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009                               v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a                               call fn0(v20)\n@000a                               v21 = global_value.i64 gv1\n@000a                               call fn1(v21)\n@000a                               trap unreachable\n}\n</code></pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;Clif ir after compilation&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>test compile\nset is_pic\nset enable_simd\ntarget x86_64-apple-macosx10.7.0 haswell\n\nfunction u0:2(i64 fp [%rbp]) -&gt; i64 fp [%rbp] system_v {\n; symbol _ZN21mini_core_hello_world4main17h0e7acfb4fe46b048E\n; instance Instance { def: Item(DefId(0:11 ~ mini_core_hello_world[317d]::main[0])), substs: [] }\n; sig ([]; c_variadic: false)-&gt;()\n\n; kind  loc.idx   param    pass mode                            ty\n; ret   _0      -          NoPass                               ()\n\n; kind  local ty                              size align (abi,pref)\n; ssa   _1    bool                              1b 1, 1\n; ssa   _2    u32                               4b 4, 4\n; ssa   _3    u128                             16b 8, 8\n; ssa   _4    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _5    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n; ssa   _6    &amp;(&amp;str, &amp;str, u32, u32)           8b 8, 8\n\n    ss0 = incoming_arg 16, offset -16\n    gv0 = symbol colocated u1:0\n    gv1 = symbol colocated u1:1 ; [corruption] Diverging function returned\n    sig0 = (i64 [%rdi]) system_v\n    sig1 = (i64 [%rdi]) system_v\n    fn0 = u0:3 sig0 ; Instance { def: Item(DefId(1:226 ~ mini_core[8787]::panic[0])), substs: [] }\n    fn1 = u0:4 sig1 ; puts\n\n                                block0(v24: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v24\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[-]                                 nop\n[-]                                 fallthrough block1\n\n                                block1:\n[-]                                 nop\n;\n; _3 = const mini_core::intrinsics::ctlz::&lt;u128&gt;(const 2574915281713599978989567361024u128)\n@0002 [RexOp1pu_iq#80b8,%rax]       v0 = iconst.i64 0x0020_0000_0800_4000\n                                    v3 -&gt; v0\n@0002 [RexOp1pu_iq#80b8,%rcx]       v1 = iconst.i64 0x0020_8000_0000\n                                    v4 -&gt; v1\n@0002 [-,-]                         v2 = iconcat v0, v1\n@0002 [RexMp2urm#86bd,%rax]         v5 = clz v0\n@0002 [RexMp2urm#86bd,%rdx]         v6 = clz v1\n@0002 [DynRexOp1icscc_ib#f083,%rcx] v7 = icmp_imm eq v1, 0\n@0002 [DynRexOp1r_ib#8083,%rax]     v8 = iadd_imm v5, 64\n@0002 [RexOp1t8jccb#75]             brnz v7, block5(v8)\n[-]                                 fallthrough block7\n\n                                block7:\n@0002 [DynRexOp1umr#8089,%rax]      v23 = copy.i64 v6\n@0002 [-]                           fallthrough block5(v23)\n\n                                block5(v9: i64 [%rax]):\n                                    v12 -&gt; v9\n@0002 [RexOp1pu_id#b8,%rcx]         v22 = iconst.i64 0\n                                    v13 -&gt; v22\n@0002 [-,-]                         v10 = iconcat v9, v22\n                                    v11 -&gt; v10\n; write_cvalue: Var(_3): u128 &lt;- ByVal(v10): u128\n@0002 [-]                           fallthrough block2\n\n                                block2:\n@0002 [-]                           nop\n@0001 [null#00,%rax]                v14 = ireduce.i32 v9\n; write_cvalue: Var(_2): u32 &lt;- ByVal(v14): u32\n@0004 [RexOp1pu_id#b8,%rcx]         v15 = iconst.i32 26\n@0004 [DynRexOp1icscc#39,%rax]      v16 = icmp ne v14, v15\n@0004 [RexOp2urm_noflags#4b6,%rax]  v17 = bint.i8 v16\n; write_cvalue: Var(_1): bool &lt;- ByVal(v17): bool\n;\n; switchInt(_1)\n@0006 [RexOp2urm_noflags#4b6,%rax]  v18 = uextend.i32 v17\n;                                                            ;  val1@%rax\n@0006 [RexOp1tjccb#74]              brz v18, block3\n@0006 [Op1jmpb#eb]                  jump block4\n\n                                block3:\n@0006 [-]                           nop\n;\n; return\n[RexOp1popq#58,%rbp]                v25 = x86_pop.i64\n@0008 [Op1ret#c3]                   return v25\n\n                                block4:\n@0008 [-]                           nop\n@0009 [RexOp1pcrel_gvaddr8#808d,%rax] v19 = symbol_value.i64 gv0\n; write_cvalue: Var(_6): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByRef(Pointer { base: Addr(v19), offset: Offset32(0) }, None): &amp;(&amp;str, &amp;str, u32, u32)\n@0009 [RexOp1ld#808b,%rax]          v20 = load.i64 v19\n; write_cvalue: Var(_5): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n; write_cvalue: Var(_4): &amp;(&amp;str, &amp;str, u32, u32) &lt;- ByVal(v20): &amp;(&amp;str, &amp;str, u32, u32)\n;\n; const mini_core::panic(move _4)\n@000a [RexOp1rmov#8089]             regmove v20, %rax -&gt; %rdi\n;                                                            ;  val4@%rdi\n@000a [Op1call_plt_id#e8]           call fn0(v20)\n;                                                            ;  val4â˜\n@000a [RexOp1pcrel_gvaddr8#808d,%rax] v21 = symbol_value.i64 gv1\n@000a [RexOp1rmov#8089]             regmove v21, %rax -&gt; %rdi\n@000a [Op1call_plt_id#e8]           call fn1(v21)\n@000a [Op2trap#40b]                 trap unreachable\n;                                                            ;  val1â˜\n}\n</code></pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using? ac7cd4c46abdc9d4f3ef3230386afd52177e5f7c</li>\n<li>If relevant, can you include some extra information about your environment? x86_64 macOS</li>\n</ul>\n</blockquote>",
        "id": 205004066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595683900
    }
]