[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change is a follow-on from #4515 to add the ability to configure<br>\nthe <code>differential</code> fuzz target by limiting which engines and modules are<br>\nused for fuzzing. This is incredibly useful when troubleshooting, e.g.,<br>\nwhen an engine is more prone to failure, we can target that engine<br>\nexclusively. The effect of this configuration is visible in the<br>\nstatistics now printed out from #4739.</p>\n<p>Engines are configured using the <code>ALLOWED_ENGINES</code> environment variable.<br>\nWe can either subtract from the set of allowed engines (e.g.,<br>\n<code>ALLOWED_ENGINES=-v8</code>) or build up a set of allowed engines (e.g.,<br>\n<code>ALLOWED_ENGINES=wasmi,spec</code>), but not both at the same time.<br>\n<code>ALLOWED_ENGINES</code> only configures the left-hand side engine; the<br>\nright-hand side is always Wasmtime. When omitted, <code>ALLOWED_ENGINES</code><br>\ndefaults to [<code>wasmtime</code>, <code>wasmi</code>, <code>spec</code>, <code>v8</code>].</p>\n<p>The generated WebAssembly modules are configured using<br>\n<code>ALLOWED_MODULES</code>. This environment variables works the same as above<br>\nbut the available options are: [<code>wasm-smith</code>, <code>single-inst</code>].</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 295097708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661363717
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a>.</p>",
        "id": 295097739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661363730
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084289715\">PR review</a>.</p>",
        "id": 295109007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084289715\">PR review</a>.</p>",
        "id": 295109008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954135230\">PR review comment</a>:</p>\n<blockquote>\n<p>I got confused wondering what would happen if <code>configured</code> is empty, like if someone ran <code>ALLOWED_ENGINES= cargo fuzz ...</code>. In that case both of these expressions are true, and you treat it as \"nothing is subtracted\", so all defaults are used. I think that's a good choice. Maybe worth a comment, though?</p>\n</blockquote>",
        "id": 295109009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954122417\">PR review comment</a>:</p>\n<blockquote>\n<p>Based purely on the types here, I believe you should be able to borrow from the <code>env_variable</code> rather than returning owned strings:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>pub fn parse_env_list(env_variable: &amp;str) -&gt; Option&lt;Vec&lt;&amp;str&gt;&gt; {\n    std::env::var(env_variable)\n        .ok()\n        .map(|l| l.split(\",\").collect())\n}\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 295109010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954129536\">PR review comment</a>:</p>\n<blockquote>\n<p>Since the returned strings are always a subset of <code>defaults</code>, you could return them without copying them to the heap. Where this is used, the lifetime of the default strings is <code>'static</code>, so it should be okay to stash references to them in a global.</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>pub fn build_allowed_env_list&lt;'a&gt;(env_list: Option&lt;Vec&lt;String&gt;&gt;, defaults: &amp;[&amp;'a str]) -&gt; Vec&lt;&amp;'a str&gt; {\n</code></pre></div>\n<p>There's a bit of nuance in the <code>add_from_defaults</code> case, because you could either choose to loop over <code>configured</code> and add if it's present in <code>defaults</code>, as you do here, or the other way around.</p>\n<p>I suggest that in both the \"add\" and \"subtract\" cases, you should loop over <code>defaults</code> and check whether each item appears in <code>configured</code>. That lets you return the borrowed string from <code>defaults</code> in both cases. However, that is annoying when validating that every name in <code>configured</code> is present in <code>defaults</code>: you need the same kind of two-loop structure in both cases then too.</p>\n<p>You can clean _that_ up by unifying both cases. The only differences between them are<br>\n- should the first character be stripped?<br>\n- do we want <code>configured</code> to contain the string, or not?</p>\n<p>So you can save a range up front indicating which characters to pay attention to in <code>configured</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">keep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">subtract_from_defaults</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And use <code>&amp;c[keep]</code> whenever you need the stripped contents of an entry from <code>configured</code>. It's a little annoying to not be able to just use <code>configured.contains()</code> but I think <code>configured.iter().any(|c| &amp;c[keep] == d)</code> isn't too terrible. Anyway I kind of like that the fact that this is technically quadratic isn't as obscured this way, even though it definitely doesn't matter here.</p>\n<p>Finally, keep a default when that \"contains\" check <code>!= subtract_from_defaults</code>. If we do want to subtract, we keep the ones that are not present, and vice versa.</p>\n</blockquote>",
        "id": 295109011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954167165\">PR review comment</a>:</p>\n<blockquote>\n<p>Not a big deal, but I like to have as little code inside <code>unsafe</code> blocks as possible. The only unsafe thing here is the assignment to the <code>static mut</code> variables, so I'd let-bind the results of calling <code>build_allowed_env_list</code> and then only assign the locals to the globals inside the <code>unsafe</code>.</p>\n<p>Alternatively, you could pull in the <a href=\"https://docs.rs/lazy_static/latest/lazy_static/\">lazy_static</a> crate: it isn't currently used anywhere in wasmtime but it is already in our dependency tree. It just does what you're already doing, but puts a safe wrapper on it.</p>\n</blockquote>",
        "id": 295109012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954187676\">PR review comment</a>:</p>\n<blockquote>\n<p>This consumes some of the fuzz input even if this engine isn't selected. In fact, all of the engine initializers run and then most of them are thrown away each time. I'd suggest instead doing <code>u.choose(allowed).unwrap()</code> and then only initializing the engine that has the selected name.</p>\n</blockquote>",
        "id": 295109013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954179115\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe this will get you the same result, including not consuming any of the fuzz input if there's only one configured choice. </p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    let wasm = match u.choose(unsafe { &amp;ALLOWED_MODULES.as_slice() }).unwrap() {\n        \"wasm-smith\" =&gt; build_wasm_smith_module(&amp;mut u, &amp;mut config)?,\n        \"single-inst\" =&gt; build_single_inst_module(&amp;mut u, &amp;mut config)?,\n        _ =&gt; unreachable!(),\n    };\n</code></pre></div>\n<p>I think the only error that <code>choose</code> can report is that there weren't any choices provided. That can only happen here if the <code>defaults</code> array is empty, because if the <code>ALLOWED_MODULES</code> environment variable is empty then all defaults are configured. So <code>choose</code> failing would be a programmer error here, not user error, and I think <code>unwrap</code> is appropriate for that.</p>\n<p>Since the closures are only called in one place this way, you could inline them into the <code>match</code> if you want. I kind of like the separation here though, so, either way is good.</p>\n</blockquote>",
        "id": 295109014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661368132
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084411119\">PR review</a>.</p>",
        "id": 295113642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661369879
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954230143\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0515</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">referencing</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">l</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">fuzzing</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">oracles</span><span class=\"o\">/</span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">186</span>:<span class=\"mi\">18</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">186</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">------------^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">referencing</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">owned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"err\">`</span><span class=\"n\">l</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 295113643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661369879
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954232231\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh! I misread this. Yeah, you're right, _this_ one probably does have to be an owned <code>String</code>. I think the changes to <code>build_allowed_env_list</code> should still work though.</p>\n</blockquote>",
        "id": 295113924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661369998
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084413208\">PR review</a>.</p>",
        "id": 295113925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661369998
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954239105\">PR review comment</a>:</p>\n<blockquote>\n<p>We need the engine initializers to run because if they can't meet the requirements of the <code>Config</code> (e.g., SIMD, etc.) then we don't really want to pick them. Maybe we could choose on the list of allowed strings and _then_ try to initialize, looping on that if the engine can't meet the requirements... But then we would want to <code>take</code>/<code>swap_remove</code> from the string list. That might be less clear, though.</p>\n</blockquote>",
        "id": 295115104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661370425
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084423157\">PR review</a>.</p>",
        "id": 295115106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661370425
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954241312\">PR review comment</a>:</p>\n<blockquote>\n<p>Ahhh, I didn't understand that. I retract this suggestion :grin: </p>\n</blockquote>",
        "id": 295115514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661370593
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084426647\">PR review</a>.</p>",
        "id": 295115515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661370593
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>.</p>",
        "id": 295120634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661372593
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>.</p>",
        "id": 295121160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661372795
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954271343\">PR review comment</a>:</p>\n<blockquote>\n<p>I made the suggested change but added an extra check to <code>panic!</code> if <code>ALLOWED_MODULES.is_empty()</code>. This can be empty, if the user were to write <code>ALLOWED_MODULES=-wasm-smith,-single-inst</code>, so I want to fail with some kind of message in that case.</p>\n</blockquote>",
        "id": 295121417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661372894
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084470645\">PR review</a>.</p>",
        "id": 295121418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661372894
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>.</p>",
        "id": 295121465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661372912
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954310673\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, that's true! Well, you could replace the <code>.unwrap()</code> in my suggestion with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unable to generate a module to fuzz against; check `ALLOWED_MODULES`\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but making the panic explicit is fine too.</p>\n</blockquote>",
        "id": 295128863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376014
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084526449\">PR review</a>.</p>",
        "id": 295128864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376014
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>.</p>",
        "id": 295129409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376329
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084533306\">PR review</a>.</p>",
        "id": 295129623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376469
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954315575\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the explanation; it took me a second to parse but I think I implemented what you described. I went with the more verbose <code>if (add_from_defaults &amp;&amp; mentioned) || (subtract_from_defaults &amp;&amp; !mentioned)</code> in the logic because I thought that would be the most clear when we read this later...</p>\n</blockquote>",
        "id": 295129625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376469
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084534635\">PR review</a>.</p>",
        "id": 295129801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376560
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954316462\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, with the latest change. I think if an empty list gets passed then this function returns the empty list of allowed names. Should I add logic for this corner case? I think the surrounding fuzz target code will fail if nothing is allowed.</p>\n</blockquote>",
        "id": 295129803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376561
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084539992\">PR review</a>.</p>",
        "id": 295130597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376942
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954320530\">PR review comment</a>:</p>\n<blockquote>\n<p>If the input list is empty, so both <code>add</code> and <code>subtract</code> are <code>true</code>, then this condition:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">add_from_defaults</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">mentioned</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">subtract_from_defaults</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">mentioned</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>simplifies to <code>mentioned || !mentioned</code>, which is always true. So I think this is fine.</p>\n</blockquote>",
        "id": 295130598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661376942
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954322696\">PR review comment</a>:</p>\n<blockquote>\n<p>I forgot that <code>1..</code> and <code>..</code> have different types. So I'd change my suggestion here to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">subtract_from_defaults</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then using <code>&amp;c[start..]</code> everywhere, rather than cloning ranges. I think that'll be a little easier to read.</p>\n</blockquote>",
        "id": 295130995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377163
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084543211\">PR review</a>.</p>",
        "id": 295130996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377163
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084548538\">PR review</a>.</p>",
        "id": 295131869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377549
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#discussion_r954326683\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I agree, the more verbose condition is a good idea. And more broadly, I think this implementation looks great.</p>\n</blockquote>",
        "id": 295131871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377549
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a> from <code>fuzz-lists</code> to <code>main</code>.</p>",
        "id": 295132627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661377896
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773#pullrequestreview-1084557168\">PR review</a>.</p>",
        "id": 295133174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661378200
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4773\">PR #4773</a>.</p>",
        "id": 295138104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661381389
    }
]