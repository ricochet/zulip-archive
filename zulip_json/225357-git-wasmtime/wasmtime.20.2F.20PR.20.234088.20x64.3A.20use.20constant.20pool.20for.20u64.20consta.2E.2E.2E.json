[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">PR #4088</a> from <code>x64-u64-constants</code> to <code>main</code>:</p>\n<blockquote>\n<p>Another isel improvement from staring at disassemblies of spidermonkey.wasm compilation results: I noticed quite a few uses of constants of the form</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"mh\">0xC0DD259</span>:  <span class=\"nc\">movabsq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>r9</code> is used exactly once. This is a consequence of the \"emit constants right before use\" logic in the x64 backend that is meant to reduce register pressure (otherwise, we get one <code>movabs</code> at the top of the function and then a spill/reload).</p>\n<p>There's a better way though: a bunch of these uses are in reg/reg instructions that could be mem/reg, so we could load directly from a constant pool. So instead of <code>orq %r9, %rax</code> after the above, we could do <code>orq OFFSET(%rip), %rax</code>. This avoids the need to use a temporary register, reducing register pressure, and also deduplicates constants (because our constant pool is deduplicated) vs <code>movabs</code>-per-use-site.</p>\n<p>This PR improves performance on <code>meshoptimizer</code> by 1%. Surprisingly, and frustratingly, it does not actually make SpiderMonkey faster. I am starting to realize that SpiderMonkey.wasm on the current compilation is cache-bound, and so further improvements in isel may not translate to further performance improvements (at least at the individual lowering level); we need better mid-end opts to advance further. But its hot blocks are a good source of examples of awkward codegen regardless :-)</p>\n<p>Builds on top of #4080.</p>\n<p>Also fixes an emission bug in <code>pinsrd</code> where RIP-relative addresses were off by one (due to extra byte at end of instruction, not accounted for in the relocation). We'll never hit this currently because no lowerings use <code>pinsrd</code> with RIP-relative data (only used for the constant pool) but with this PR it's now relevant.</p>\n</blockquote>",
        "id": 280589408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651211658
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">PR #4088</a> from <code>x64-u64-constants</code> to <code>main</code>.</p>",
        "id": 280696953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651271279
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">PR #4088</a> as ready for review.</p>",
        "id": 280697083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651271346
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">PR #4088</a> from <code>x64-u64-constants</code> to <code>main</code>.</p>",
        "id": 280947846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651533743
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#pullrequestreview-968077858\">PR review</a>.</p>",
        "id": 281849073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652199598
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">PR #4088</a>.</p>",
        "id": 281849245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652199666
    }
]