[
    {
        "content": "<p>rahulchaphalkar opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8178\">issue #8178</a>:</p>\n<blockquote>\n<p>I am running <code>ackermann</code> benchmark with wasmtime, and I noticed that it had a performance delta when compared with native, of approx 30%. Profiling with VTune, I see wasmtime disassembly containing lot of setup/teardown function call stack related instructions at the beginning and end of the function, while native (clang, -O3) does not. <br>\nI used <code>wasmtime explore</code> to correlate the <code>wat</code> with disassembly as well. Here are the snippets of disassembly -</p>\n<p>Wasm Setup of the stack -</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">Assembly</span>\n<span class=\"mh\">0x7f2b691d8040</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">rbp</span>\n<span class=\"mh\">0x7f2b691d8041</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"mh\">0x7f2b691d8044</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rdi</span><span class=\"o\">+</span><span class=\"mh\">0x8</span><span class=\"p\">]</span>\n<span class=\"mh\">0x7f2b691d8048</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r10</span><span class=\"p\">]</span>\n<span class=\"mh\">0x7f2b691d804b</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"mh\">0x7f2b691d804e</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jnbe</span><span class=\"w\"> </span><span class=\"mh\">0x7f2b691d80b7</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x7f2b691d8054</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span>:\n<span class=\"mh\">0x7f2b691d8054</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x10</span>\n<span class=\"mh\">0x7f2b691d8058</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">r12</span>\n<span class=\"mh\">0x7f2b691d805c</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"o\">+</span><span class=\"mh\">0x8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">r15</span>\n<span class=\"mh\">0x7f2b691d8061</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdi</span>\n<span class=\"mh\">0x7f2b691d8064</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">edx</span>\n<span class=\"mh\">0x7f2b691d8066</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdx</span>\n<span class=\"mh\">0x7f2b691d8069</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"mh\">0x7f2b691d80a2</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>I have pasted the wat file of this function below as well for reference.</p>\n<p>Wasm Teardown -</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">Assembly</span>\n<span class=\"mh\">0x7f2b691d80a2</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">lea</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"o\">+</span><span class=\"mh\">0x1</span><span class=\"p\">]</span>\n<span class=\"mh\">0x7f2b691d80a5</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">]</span>\n<span class=\"mh\">0x7f2b691d80a9</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">qword</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"o\">+</span><span class=\"mh\">0x8</span><span class=\"p\">]</span>\n<span class=\"mh\">0x7f2b691d80ae</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x10</span>\n<span class=\"mh\">0x7f2b691d80b2</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rbp</span>\n<span class=\"mh\">0x7f2b691d80b5</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">pop</span><span class=\"w\"> </span><span class=\"n\">rbp</span>\n<span class=\"mh\">0x7f2b691d80b6</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">ret</span>\n</code></pre></div>\n<p><code>wat</code> of relevant function -</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">3</span>\n<span class=\"w\">          </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">          </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">sub</span>\n<span class=\"w\">          </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">          </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">end</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">sub</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">tee</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"n\">br_if</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"p\">;)</span>\n<span class=\"w\">      </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">end</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Native disassembly is pretty short, the entirety of the function is as shown below (this is in at&amp;t syntax, unlike Intel syntax in some above snippets) -</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">Line</span>\n<span class=\"mh\">0x1170</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"mh\">0x1170</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">pushq</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">rbx</span>\n<span class=\"mh\">0x1171</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"mh\">0x1173</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span>\n<span class=\"mh\">0x1175</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"mh\">0x119f</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x1177</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">2</span>:\n<span class=\"mh\">0x1177</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ebx</span>\n<span class=\"mh\">0x1179</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"mh\">0x118a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x117b</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">3</span>:\n<span class=\"mh\">0x117b</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">nopl</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mh\">0x1180</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span>:\n<span class=\"mh\">0x1180</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"mh\">0x1185</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0xffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ebx</span>\n<span class=\"mh\">0x1188</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"mh\">0x119f</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x118a</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span>:\n<span class=\"mh\">0x118a</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"mh\">0x118c</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"mh\">0x1180</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x118e</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">6</span>:\n<span class=\"mh\">0x118e</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0xffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"mh\">0x1191</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ebx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span>\n<span class=\"mh\">0x1193</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"mh\">0x1195</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">callq</span><span class=\"w\">  </span><span class=\"mh\">0x1170</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x119a</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">7</span>:\n<span class=\"mh\">0x119a</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0xffffffff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ebx</span>\n<span class=\"mh\">0x119d</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">jnz</span><span class=\"w\"> </span><span class=\"mh\">0x118a</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"o\">&gt;</span>\n<span class=\"mh\">0x119f</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">8</span>:\n<span class=\"mh\">0x119f</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"mh\">0x11a2</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">popq</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">rbx</span>\n<span class=\"mh\">0x11a3</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>and the C source function to generate wasm and native is - </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">ackermann</span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ackermann</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ackermann</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ackermann</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I also tried with <code>--wasm-features tail-call</code> cli flag, however that actually made the perf slightly worse.<br>\nAny pointers on the difference in disassembly between native and wasm?<br>\n</p>\n</blockquote>",
        "id": 427595461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710805756
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8178#issuecomment-2005631889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8178\">issue #8178</a>:</p>\n<blockquote>\n<p>Hi @rahulchaphalkar -- it looks like the difference is down to two fundamental factors:</p>\n<ul>\n<li>We have explicit stack checks rather than implicit stack probes and reliance on guard pages. We've actually just been discussing this in #8135. That's the business with <code>r10</code> before decrementing <code>rsp</code>.</li>\n<li>We have two clobber-saves (<code>r12</code> and <code>r15</code>), whereas the native code gets away with one (<code>rbx</code>). It would be a good exercise to trace through the assembly and see what the registers are used for; perhaps the native compiler's register allocator is able to be a bit smarter about reuse. It is fundamentally necessary to have <em>some</em> state on the stack I think, since there is a recursive call (the one in non-tail position on the second-to-last line of C) and there is at least one word of state (<code>M</code>) necessary after it returns.</li>\n</ul>\n</blockquote>",
        "id": 427608842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710815197
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8178#issuecomment-2007565469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8178\">issue #8178</a>:</p>\n<blockquote>\n<p>And FWIW, it is known that the <code>tail</code> calling convention can currently lead to some slow downs, which is why Wasm tail calls aren't enabled by default yet: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6759\">https://github.com/bytecodealliance/wasmtime/issues/6759</a></p>\n</blockquote>",
        "id": 427757322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710863889
    }
]