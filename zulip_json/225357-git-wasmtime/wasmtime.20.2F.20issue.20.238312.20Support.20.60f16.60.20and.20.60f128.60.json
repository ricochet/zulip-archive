[
    {
        "content": "<p>tgross35 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8312\">issue #8312</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Add support for 16-bit and 128-bit IEEE floating point numbers.</p>\n<h4>Benefit</h4>\n<p>This will allow using these types with <code>rustc_codegen_clif</code>, as described at <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/issues/1461\">https://github.com/rust-lang/rustc_codegen_cranelift/issues/1461</a></p>\n<h4>Implementation</h4>\n<p>Unsure</p>\n<h4>Alternatives</h4>\n<p>Unsure, maybe it would be possible to stub out these types if adding them is difficult.</p>\n</blockquote>",
        "id": 431726677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712460126
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8312\">Issue #8312</a>.</p>",
        "id": 438141044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715469990
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the cranelift:area:clif label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8312\">Issue #8312</a>.</p>",
        "id": 438141045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715469990
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8312#issuecomment-2106068334\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8312\">issue #8312</a>:</p>\n<blockquote>\n<p>Adding the types is pretty easy, I think, and extending CLIF floating-point instructions to allow the new types is also pretty easy. Successfully compiling anything that uses the types is the hard part, I imagine.</p>\n<p>I think the places to add the types are:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/meta/src/cdsl/typevar.rs#L646\">https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/meta/src/cdsl/typevar.rs#L646</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/meta/src/shared/types.rs#L44-L73\">https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/meta/src/shared/types.rs#L44-L73</a></li>\n<li>various places in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/src/ir/types.rs\">https://github.com/bytecodealliance/wasmtime/blob/e6f9ca5efa0c4bf59c9cf133d9abeaab63ec07bb/cranelift/codegen/src/ir/types.rs</a></li>\n</ul>\n<p>Once the tests are passing again after that, I think you'll have a compiler that will accept f16/f128 instructions. But if you use them, then it will fail later: during lowering on all backends; in the interpreter; in compiletests and runtests; and in fuzzing.</p>\n<p>I think this is a fairly large project, but if rustc needs these types, I think it's reasonable to add the types in one PR and then work on adding implementations for them everywhere over time.</p>\n</blockquote>",
        "id": 438143605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715473270
    }
]