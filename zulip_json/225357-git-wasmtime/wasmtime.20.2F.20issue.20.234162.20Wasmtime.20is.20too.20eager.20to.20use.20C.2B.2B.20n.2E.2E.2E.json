[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4162\">issue #4162</a>:</p>\n<blockquote>\n<p>Given an input module that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $f unreachable)\n  (start $f)\n)\n</code></pre></div>\n<p>this will print out:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"foo.wat\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:   <span class=\"mh\">0x1a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">float</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the function name <code>float</code> is incorrect in the backtrace. The reason this is due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca106e9bcd97511e75a935f07d085982b7267be1/crates/jit/src/demangling.rs#L9-L10\">this automatic demangling</a>.</p>\n<p>@fitzgen is there perhaps a different way we should invoke <code>cpp_demangle</code> to try to only trigger on C++ symbols? (e.g. the Rust <code>_Z</code> prefix or similar)</p>\n</blockquote>",
        "id": 282825537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652896867
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4162#issuecomment-1130350881\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4162\">issue #4162</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-structure\">https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-structure</a> all mangled C++ names seem to start with <code>_Z</code>. IMO cpp_demangle shouldn't attempt to demangle mangled types when using <code>Symbol::new</code>.</p>\n</blockquote>",
        "id": 282827529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652897861
    }
]