[
    {
        "content": "<p>rygo6 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>This is kind of a wasmTime issue. But probably more so I am just new to WasmTime and Rust trying to figure this out.</p>\n<p>I have a scenario where a linked imported function needs to look up an exported table and call a function from it.</p>\n<p>This is basically what I have hacked together thus far:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">EmWasmNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">wasmStore</span>: <span class=\"nc\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">wasmTable</span>: <span class=\"nc\">Table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">EmWasmNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">filePath</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">filePath</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"env\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"emscripten_set_main_loop\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">p0</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"cm\">/***** How would I access wasmTable and wasmStore from here to execute more methods??? *****/</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">//let browserIterationFuncOption:Option&lt;wasmtime::Val&gt; = Self::wasmTable.get(&amp;mut Self::wasmStore, p0 as u32);</span>\n<span class=\"w\">            </span><span class=\"c1\">// browserIterationFuncOption.unwrap().unwrap_funcref().call(&amp;store, ());</span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"__indirect_function_table\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"n\">extern_table</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">EmWasmNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">wasmStore</span>: <span class=\"nc\">store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">wasmTable</span>: <span class=\"nc\">table</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've tried a couple different routes to accomplish this, but neither have succeeded. This seems like an exceedingly simple thing that has been taking me hours of failure. Is there something obvious I am missing about how WasmTime or Rust is supposed to work here?</p>\n</blockquote>",
        "id": 262792705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637930380
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-981733838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>Thanks for the report, and I'd recommend browsing some of the examples in this repository to get an idea about some of the idioms for Rust and imported functions.</p>\n<p>One of the first things you'll want to do is to use a <code>Caller&lt;'_, T&gt;</code> as the first argument to your <code>emscripten_set_main_loop</code> closure. That will allow you to call the <code>.get_export</code> function or otherwise access closed-over values.</p>\n<p>For getting the <code>store</code> and the <code>table</code> into the closure you can either use <code>.get_export</code> or you can use something similar to <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> to start out at <code>None</code> and then set to <code>Some</code> after the instance has been instantiated and the exports found on the instance.</p>\n</blockquote>",
        "id": 263021654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638199113
    },
    {
        "content": "<p>rygo6 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-987559639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>So it looks like the called can't export the table right now? Says its disallowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// All instances created have a `host_state` with a pointer pointing</span>\n<span class=\"w\">        </span><span class=\"c1\">// back to themselves. If this caller doesn't have that `host_state`</span>\n<span class=\"w\">        </span><span class=\"c1\">// then it probably means it was a host-created object like `Func::new`</span>\n<span class=\"w\">        </span><span class=\"c1\">// which doesn't have any exports we want to return anyway.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">caller</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">host_state</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Intentionally ignore other Extern items here since this API is</span>\n<span class=\"w\">            </span><span class=\"c1\">// supposed to be a temporary stop-gap until interface types.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also I tried use a point, RC or ARC and trapping that in the enclosure. But it wouldn't let me because the enclosure has static lifetime and so not variable from the method or impl can be captured in the closure. I considered making a 'static' datastore for tables outside of the impl and passing that in, but that just seems so contrived?</p>\n</blockquote>",
        "id": 263957337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638851495
    },
    {
        "content": "<p>rygo6 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-987559639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>So it looks like the called can't export the table right now? Says its disallowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// All instances created have a `host_state` with a pointer pointing</span>\n<span class=\"w\">        </span><span class=\"c1\">// back to themselves. If this caller doesn't have that `host_state`</span>\n<span class=\"w\">        </span><span class=\"c1\">// then it probably means it was a host-created object like `Func::new`</span>\n<span class=\"w\">        </span><span class=\"c1\">// which doesn't have any exports we want to return anyway.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">caller</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">host_state</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Intentionally ignore other Extern items here since this API is</span>\n<span class=\"w\">            </span><span class=\"c1\">// supposed to be a temporary stop-gap until interface types.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also I tried use a pointer, RC or ARC and trapping that in the enclosure. But it wouldn't let me because the enclosure has static lifetime and so not variable from the method or impl can be captured in the closure. I considered making a 'static' datastore for tables outside of the impl and passing that in, but that just seems so contrived?</p>\n</blockquote>",
        "id": 263957341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638851506
    },
    {
        "content": "<p>rygo6 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-987559639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>So it looks like the caller can't export the table right now? Says its disallowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// All instances created have a `host_state` with a pointer pointing</span>\n<span class=\"w\">        </span><span class=\"c1\">// back to themselves. If this caller doesn't have that `host_state`</span>\n<span class=\"w\">        </span><span class=\"c1\">// then it probably means it was a host-created object like `Func::new`</span>\n<span class=\"w\">        </span><span class=\"c1\">// which doesn't have any exports we want to return anyway.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">caller</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">host_state</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Intentionally ignore other Extern items here since this API is</span>\n<span class=\"w\">            </span><span class=\"c1\">// supposed to be a temporary stop-gap until interface types.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also I tried use a pointer, RC or ARC and trapping that in the enclosure. But it wouldn't let me because the enclosure has static lifetime and so not variable from the method or impl can be captured in the closure. I considered making a 'static' datastore for tables outside of the impl and passing that in, but that just seems so contrived?</p>\n</blockquote>",
        "id": 263957387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638851532
    },
    {
        "content": "<p>rygo6 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-987559639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>So it looks like the caller can't export the table right now? Says its disallowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// All instances created have a `host_state` with a pointer pointing</span>\n<span class=\"w\">        </span><span class=\"c1\">// back to themselves. If this caller doesn't have that `host_state`</span>\n<span class=\"w\">        </span><span class=\"c1\">// then it probably means it was a host-created object like `Func::new`</span>\n<span class=\"w\">        </span><span class=\"c1\">// which doesn't have any exports we want to return anyway.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">caller</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">host_state</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Intentionally ignore other Extern items here since this API is</span>\n<span class=\"w\">            </span><span class=\"c1\">// supposed to be a temporary stop-gap until interface types.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also I tried use a pointer, RC or ARC and capturing that in the enclosure. But it wouldn't let me because the enclosure has static lifetime and so not variable from the method or impl can be captured in the closure. I considered making a 'static' datastore for tables outside of the impl and passing that in, but that just seems so contrived?</p>\n</blockquote>",
        "id": 263957397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638851552
    },
    {
        "content": "<p>rygo6 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-987559639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>So it looks like the caller can't export the table right now? Says its disallowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// All instances created have a `host_state` with a pointer pointing</span>\n<span class=\"w\">        </span><span class=\"c1\">// back to themselves. If this caller doesn't have that `host_state`</span>\n<span class=\"w\">        </span><span class=\"c1\">// then it probably means it was a host-created object like `Func::new`</span>\n<span class=\"w\">        </span><span class=\"c1\">// which doesn't have any exports we want to return anyway.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">caller</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">host_state</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Extern</span>::<span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Intentionally ignore other Extern items here since this API is</span>\n<span class=\"w\">            </span><span class=\"c1\">// supposed to be a temporary stop-gap until interface types.</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also I tried use a pointer, RC or ARC and capturing that in the enclosure. But it wouldn't let me because the enclosure has static lifetime and so no variable from the method or impl can be captured in the closure. I considered making a 'static' global datastore for tables outside of the impl and passing that in, but that just seems so contrived?</p>\n</blockquote>",
        "id": 263957401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1638851571
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-992583755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>Ah yes that's a restriction we can likely lift (and probably lift for all other types as well) given the direction that interface types is going in.</p>\n<p>Otherwise the recommended way to store data for closures is not actually to close over them but rather use the <code>T</code> in <code>Store&lt;T&gt;</code>. That way within the <code>T</code> you could have something like <code>table: Option&lt;wasmtime::Table&gt;</code> which is filled in after it's instantiated/created. Then the closure can take <code>Caller&lt;'_, T&gt;</code> as the first parameter and access the <code>table</code> field, asserting it's <code>Some</code> or otherwise returning a trap.</p>\n</blockquote>",
        "id": 264720931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639408739
    },
    {
        "content": "<p>xpepermint <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1004174915\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton so how would you then call a host function from another host function?</p>\n</blockquote>",
        "id": 266699244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641224249
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1004889132\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>Hm sorry I'm not sure I understand, @xpepermint can you clarify your question or do you have some example code to poke around?</p>\n</blockquote>",
        "id": 266818664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641308809
    },
    {
        "content": "<p>xpepermint <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1004904555\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton sorry about that. The title is kinda related to my question and I hope this won't shadow @rygo6's original post. Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module_ecno</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"....wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap1_async</span><span class=\"p\">(</span><span class=\"s\">\"host\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"fn1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"memory\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_memory</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// I think OK</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"???\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// how</span>\n<span class=\"w\">    </span><span class=\"c1\">// **** how do I get the instance ****</span>\n<span class=\"w\">    </span><span class=\"c1\">// **** CALL fn2 in the same context ****</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">})).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap1_async</span><span class=\"p\">(</span><span class=\"s\">\"host\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"fn2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">})).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So, how do you call a host-defined function from a host-defined function? If what I'm trying to do is not the right way of using it, please explain how should host function be communicating with the rest of the (outside context) program.<br>\n</p>\n</blockquote>",
        "id": 266820892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641309948
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1005031269\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>Can you refactor it such that <code>fn2</code> is defined as a Rust-native function and call that directly? </p>\n<p>Otherwise unless you close over the <code>wasmtime::Func</code> value in the <code>Store&lt;T&gt;</code> or similar you can't access it directly.</p>\n</blockquote>",
        "id": 266839661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641317940
    },
    {
        "content": "<p>xpepermint <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1005036357\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton got it. Thanks.</p>\n</blockquote>",
        "id": 266840560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641318351
    },
    {
        "content": "<p>xpepermint <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1006742702\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton I've been thinking, you can't even read the memory inside the host function because you need the <code>store</code>?</p>\n</blockquote>",
        "id": 267084016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641487808
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1006849396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>Yes the memory is owned by the <code>Store</code>, so you have to have access to the <code>Store</code> to read the memory.</p>\n</blockquote>",
        "id": 267101569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641496444
    },
    {
        "content": "<p>xpepermint <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1007064374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton I found the solution for the <code>store</code> which now allows me to manipulate the <code>memory</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 267139379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641518553
    },
    {
        "content": "<p>xpepermint edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1007064374\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>@alexcrichton I found a solution for the <code>store</code> which now allows me to manipulate the <code>memory</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 267200471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641568582
    },
    {
        "content": "<p>rygo6 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1012807238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah yes that's a restriction we can likely lift (and probably lift for all other types as well) given the direction that interface types is going in.</p>\n<p>Otherwise the recommended way to store data for closures is not actually to close over them but rather use the <code>T</code> in <code>Store&lt;T&gt;</code>. That way within the <code>T</code> you could have something like <code>table: Option&lt;wasmtime::Table&gt;</code> which is filled in after it's instantiated/created. Then the closure can take <code>Caller&lt;'_, T&gt;</code> as the first parameter and access the <code>table</code> field, asserting it's <code>Some</code> or otherwise returning a trap.</p>\n</blockquote>\n<p>Thanks for your help, although still have an issue. I am making a Store&lt;WasiCtx&gt; because I need WASI support. Is it still possible to add more data to that somehow? Or do I need to actually go down and edit the Store to hold more data types?</p>\n</blockquote>",
        "id": 267976515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642141301
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562#issuecomment-1015517628\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3562\">issue #3562</a>:</p>\n<blockquote>\n<p>A <code>Store&lt;T&gt;</code> can only hold one arbitrary type <code>T</code> but you can have <code>T = (U, V)</code> or <code>T = MyCustomStruct</code> which holds many fields. Embeddings like wasi don't require that the <code>T</code> is a specific type, only that you can acquire the wasi-specific type from <code>T</code></p>\n</blockquote>",
        "id": 268406413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642519287
    }
]