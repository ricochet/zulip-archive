[
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667\">Issue #2667</a>:</p>\n<blockquote>\n<p>We are planning to apply to Google Summer of Code; let's brainstorm projetcs that might be interesting! I'll start with a few and can update as ideas come in:</p>\n<ul>\n<li>\n<p>Language bindings for Wasmtime engine: currently, we have bindings to allow Wasmtime to be used within a program written in Go, Python, or a .NET language. It would be useful to extend this list further. This becomes even more interesting when we have Interface Types working: can we marshal native language types (lists and strings) across host/Wasm call boundaries for various host languages?</p>\n</li>\n<li>\n<p>Cranelift backend: improve instruction selection and speed up the compiler. We've been working on a new compiler backend for Cranelift, which is part of the technology that underlies our other projects (Wasmtime and Lucet). We believe that there are always ways to improve the generated code if one looks long enough! This project would involve finding and understanding sources of slowdown and learning enough about the compiler to change the instruction sequences that it uses. The rewards can be significant when one fixes an issue for a particular benchmark and many times the fixes are pretty simple (generate a different, better-suited instruction). This project would be an opportunity to learn about the innards of the compiler and has potential to be very interesting!</p>\n</li>\n</ul>\n<p>Please feel free to contribute other ideas!</p>\n</blockquote>",
        "id": 226892155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613686665
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667\">Issue #2667</a>:</p>\n<blockquote>\n<p>We are planning to apply to Google Summer of Code; let's brainstorm projetcs that might be interesting! I'll start with a few and can update as ideas come in:</p>\n<ul>\n<li>\n<p>Language bindings for Wasmtime engine: currently, we have bindings to allow Wasmtime to be used within a program written in Go, Python, or a .NET language. It would be useful to extend this list further. This becomes even more interesting when we have Interface Types working: can we marshal native language types (lists and strings) across host/Wasm call boundaries for various host languages?</p>\n</li>\n<li>\n<p>Cranelift backend: improve instruction selection and speed up the compiler. We've been working on a new compiler backend for Cranelift, which is part of the technology that underlies our other projects (Wasmtime and Lucet). We believe that there are always ways to improve the generated code if one looks long enough! This project would involve finding and understanding sources of slowdown and learning enough about the compiler to change the instruction sequences that it uses. The rewards can be significant when one fixes an issue for a particular benchmark and many times the fixes are pretty simple (generate a different, better-suited instruction). This project would be an opportunity to learn about the innards of the compiler and has potential to be very interesting!</p>\n</li>\n</ul>\n<p>Please feel free to contribute other ideas!</p>\n</blockquote>",
        "id": 226892156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613686665
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667\">Issue #2667</a>:</p>\n<blockquote>\n<p>We are planning to apply to Google Summer of Code; let's brainstorm projetcs that might be interesting! I'll start with a few and can update as ideas come in:</p>\n<ul>\n<li>\n<p>Language bindings for Wasmtime engine: currently, we have bindings to allow Wasmtime to be used within a program written in Go, Python, or a .NET language. It would be useful to extend this list further. This becomes even more interesting when we have Interface Types working: can we marshal native language types (lists and strings) across host/Wasm call boundaries for various host languages?</p>\n</li>\n<li>\n<p>Cranelift backend: improve instruction selection and speed up the compiler. We've been working on a new compiler backend for Cranelift, which is part of the technology that underlies our other projects (Wasmtime and Lucet). We believe that there are always ways to improve the generated code if one looks long enough! This project would involve finding and understanding sources of slowdown and learning enough about the compiler to change the instruction sequences that it uses. The rewards can be significant when one fixes an issue for a particular benchmark and many times the fixes are pretty simple (generate a different, better-suited instruction). This project would be an opportunity to learn about the innards of the compiler and has potential to be very interesting!</p>\n</li>\n</ul>\n<p>Please feel free to contribute other ideas!</p>\n</blockquote>",
        "id": 226892157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613686665
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667\">Issue #2667</a>:</p>\n<blockquote>\n<p>We are planning to apply to Google Summer of Code; let's brainstorm projects that might be interesting! I'll start with a few and can update as ideas come in:</p>\n<ul>\n<li>\n<p>Language bindings for Wasmtime engine: currently, we have bindings to allow Wasmtime to be used within a program written in Go, Python, or a .NET language. It would be useful to extend this list further. This becomes even more interesting when we have Interface Types working: can we marshal native language types (lists and strings) across host/Wasm call boundaries for various host languages?</p>\n</li>\n<li>\n<p>Cranelift backend: improve instruction selection and speed up the compiler. We've been working on a new compiler backend for Cranelift, which is part of the technology that underlies our other projects (Wasmtime and Lucet). We believe that there are always ways to improve the generated code if one looks long enough! This project would involve finding and understanding sources of slowdown and learning enough about the compiler to change the instruction sequences that it uses. The rewards can be significant when one fixes an issue for a particular benchmark and many times the fixes are pretty simple (generate a different, better-suited instruction). This project would be an opportunity to learn about the innards of the compiler and has potential to be very interesting!</p>\n</li>\n</ul>\n<p>Please feel free to contribute other ideas!</p>\n</blockquote>",
        "id": 226892306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613686740
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667#issuecomment-781739472\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2667\">Issue #2667</a>:</p>\n<blockquote>\n<ul>\n<li>Networking support in cap-std. <a href=\"https://github.com/bytecodealliance/cap-std\"><code>cap-std</code></a> is a version of the Rust standard library API using capabilities, such as a <a href=\"https://docs.rs/cap-std/latest/cap_std/fs/struct.Dir.html\"><code>Dir</code></a> type to represent a directory that one can open once and then use to open files inside it, rather than always using string paths. The idea for networking is to have a type which represents a set of addresses (a netmask, a hostname or set of hostnames with a wildcard, or perhaps even a simple list of addresses), which can be used to make connections to addresses in the set. Such a mechanism would be useful for fine-grained sandboxing of native code, and could also contribute to networking support in WASI.</li>\n<li>Port interesting codebases to <a href=\"https://github.com/bytecodealliance/cap-std\"><code>cap-std</code></a>. <a href=\"https://github.com/sunfishcode/tide-naive-static-files\"><code>tide-native-static-files</code></a> is an example of some real-world code ported to use cap-std for filesystem access; <a href=\"https://github.com/sunfishcode/tide-naive-static-files/commit/533706bf1e8f2bdcb00d47f45764ff51e599c337\">this patch</a> shows the changes -- using a <code>Dir</code> instead of a string for the root directory. It would be interesting to identify other codebases which could be made to use a <code>Dir</code> type, perhaps such as <a href=\"https://github.com/rust-lang/cargo/blob/master/src/cargo/sources/directory.rs#L16\">cargo</a>. A ported version can serve as an example of how to use cap-std, as well as helping us find ways to improve cap-std.<br>\n</li>\n</ul>\n</blockquote>",
        "id": 226907045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613696353
    }
]