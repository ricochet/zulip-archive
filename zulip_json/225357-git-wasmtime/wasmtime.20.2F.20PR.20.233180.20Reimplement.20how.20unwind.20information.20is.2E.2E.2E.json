[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is a major refactoring of how unwind information is stored<br>\nafter compilation of a function has finished. Previously we would store<br>\nthe raw <code>UnwindInfo</code> as a result of compilation and this would get<br>\nserialized/deserialized alongside the rest of the ELF object that<br>\ncompilation creates. Whenever functions were registered with<br>\n<code>CodeMemory</code> this would also result in registering unwinding information<br>\ndynamically at runtime, which in the case of Unix, for example, would<br>\ndynamically created FDE/CIE entries on-the-fly.</p>\n<p>Eventually I'd like to support compiling Wasmtime without Cranelift, but<br>\nthis means that <code>UnwindInfo</code> wouldn't be easily available to decode into<br>\nand create unwinding information from. To solve this I've changed the<br>\nELF object created to have the unwinding information encoded into it<br>\nahead-of-time so loading code into memory no longer needs to create<br>\nunwinding tables. This change has two different implementations for<br>\nWindows/Unix:</p>\n<ul>\n<li>\n<p>On Windows the implementation was much easier. The unwinding<br>\n  information on Windows is already stored after the function itself in<br>\n  the text section. This was actually slightly duplicated in object<br>\n  building and in code memory allocation. Now the object building<br>\n  continues to do the same, recording unwinding information after<br>\n  functions, and code memory no longer manually tracks this.<br>\n  Additionally Wasmtime will emit a special custom section in the object<br>\n  file with unwinding information which is the list of<br>\n<code>RUNTIME_FUNCTION</code> structures that <code>RtlAddFunctionTable</code> expects. This<br>\n  means that the object file has all the information precompiled into it<br>\n  and registration at runtime is simply passing a few pointers around to<br>\n  the runtime.</p>\n</li>\n<li>\n<p>Unix was a little bit more difficult than Windows. Today a <code>.eh_frame</code><br>\n  section is created on-the-fly with offsets in FDEs specified as the<br>\n  absolute address that functions are loaded at. This absolute<br>\n  address hindered the ability to precompile the FDE into the object<br>\n  file itself. I've switched how addresses are encoded, though, to using<br>\n<code>DW_EH_PE_pcrel</code> which means that FDE addresses are now specified<br>\n  relative to the FDE itself. This means that we can maintain a fixed<br>\n  offset between the <code>.eh_frame</code> loaded in memory and the beginning of<br>\n  code memory. When doing so this enables precompiling the <code>.eh_frame</code><br>\n  section into the object file and at runtime when loading an object no<br>\n  further construction of unwinding information is needed.</p>\n</li>\n</ul>\n<p>The overall result of this commit is that unwinding information is no<br>\nlonger stored in its cranelift-data-structure form on disk. This means<br>\nthat this unwinding information format is only present during<br>\ncompilation, which will make it that much easier to compile out<br>\ncranelift in the future.</p>\n<p>This commit also significantly refactors <code>CodeMemory</code> since the way<br>\nunwinding information is handled is not much different from before.<br>\nPreviously <code>CodeMemory</code> was suitable for incrementally adding more and<br>\nmore functions to it, but nowadays a <code>CodeMemory</code> either lives per<br>\nmodule (in which case all functions are known up front) or it's created<br>\nonce-per-<code>Func::new</code> with two trampolines. In both cases we know all<br>\nfunctions up front so the functionality of incrementally adding more and<br>\nmore segments is no longer needed. This commit removes the ability to<br>\nadd a function-at-a-time in <code>CodeMemory</code> and instead it can now only<br>\nload objects in their entirety. A small helper function is added to<br>\nbuild a small object file for trampolines in <code>Func::new</code> to handle<br>\nallocation there.</p>\n<p>Finally, this commit also refactors the <code>wasmtime-obj</code> crate and its<br>\nbuilder structure to be more amenable to this strategy of managing<br>\nunwinding tables.</p>\n<p>It is not intentional to have any real functional change as a result of<br>\nthis commit. This might accelerate loading a module from cache slightly<br>\nsince less work is needed to manage the unwinding information, but<br>\nthat's just a side benefit from the main goal of this commit which is to<br>\nremove the dependence on cranelift unwinding information being available<br>\nat runtime.</p>\n<p>On a procedural note this draws from <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3179\">https://github.com/bytecodealliance/wasmtime/pull/3179</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3176\">https://github.com/bytecodealliance/wasmtime/pull/3176</a> so only the last commit here is what's to be reviewed.</p>\n</blockquote>",
        "id": 249163970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628713309
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249164083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628713373
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249165068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628713814
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249171426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628717106
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249171576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628717171
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249172284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628717601
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249243229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628779148
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249287315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628799396
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249287333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628799410
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a>.</p>",
        "id": 249290041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628800768
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249298393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628805544
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is a major refactoring of how unwind information is stored<br>\nafter compilation of a function has finished. Previously we would store<br>\nthe raw <code>UnwindInfo</code> as a result of compilation and this would get<br>\nserialized/deserialized alongside the rest of the ELF object that<br>\ncompilation creates. Whenever functions were registered with<br>\n<code>CodeMemory</code> this would also result in registering unwinding information<br>\ndynamically at runtime, which in the case of Unix, for example, would<br>\ndynamically created FDE/CIE entries on-the-fly.</p>\n<p>Eventually I'd like to support compiling Wasmtime without Cranelift, but<br>\nthis means that <code>UnwindInfo</code> wouldn't be easily available to decode into<br>\nand create unwinding information from. To solve this I've changed the<br>\nELF object created to have the unwinding information encoded into it<br>\nahead-of-time so loading code into memory no longer needs to create<br>\nunwinding tables. This change has two different implementations for<br>\nWindows/Unix:</p>\n<ul>\n<li>\n<p>On Windows the implementation was much easier. The unwinding<br>\n  information on Windows is already stored after the function itself in<br>\n  the text section. This was actually slightly duplicated in object<br>\n  building and in code memory allocation. Now the object building<br>\n  continues to do the same, recording unwinding information after<br>\n  functions, and code memory no longer manually tracks this.<br>\n  Additionally Wasmtime will emit a special custom section in the object<br>\n  file with unwinding information which is the list of<br>\n<code>RUNTIME_FUNCTION</code> structures that <code>RtlAddFunctionTable</code> expects. This<br>\n  means that the object file has all the information precompiled into it<br>\n  and registration at runtime is simply passing a few pointers around to<br>\n  the runtime.</p>\n</li>\n<li>\n<p>Unix was a little bit more difficult than Windows. Today a <code>.eh_frame</code><br>\n  section is created on-the-fly with offsets in FDEs specified as the<br>\n  absolute address that functions are loaded at. This absolute<br>\n  address hindered the ability to precompile the FDE into the object<br>\n  file itself. I've switched how addresses are encoded, though, to using<br>\n<code>DW_EH_PE_pcrel</code> which means that FDE addresses are now specified<br>\n  relative to the FDE itself. This means that we can maintain a fixed<br>\n  offset between the <code>.eh_frame</code> loaded in memory and the beginning of<br>\n  code memory. When doing so this enables precompiling the <code>.eh_frame</code><br>\n  section into the object file and at runtime when loading an object no<br>\n  further construction of unwinding information is needed.</p>\n</li>\n</ul>\n<p>The overall result of this commit is that unwinding information is no<br>\nlonger stored in its cranelift-data-structure form on disk. This means<br>\nthat this unwinding information format is only present during<br>\ncompilation, which will make it that much easier to compile out<br>\ncranelift in the future.</p>\n<p>This commit also significantly refactors <code>CodeMemory</code> since the way<br>\nunwinding information is handled is not much different from before.<br>\nPreviously <code>CodeMemory</code> was suitable for incrementally adding more and<br>\nmore functions to it, but nowadays a <code>CodeMemory</code> either lives per<br>\nmodule (in which case all functions are known up front) or it's created<br>\nonce-per-<code>Func::new</code> with two trampolines. In both cases we know all<br>\nfunctions up front so the functionality of incrementally adding more and<br>\nmore segments is no longer needed. This commit removes the ability to<br>\nadd a function-at-a-time in <code>CodeMemory</code> and instead it can now only<br>\nload objects in their entirety. A small helper function is added to<br>\nbuild a small object file for trampolines in <code>Func::new</code> to handle<br>\nallocation there.</p>\n<p>Finally, this commit also refactors the <code>wasmtime-obj</code> crate and its<br>\nbuilder structure to be more amenable to this strategy of managing<br>\nunwinding tables.</p>\n<p>It is not intentional to have any real functional change as a result of<br>\nthis commit. This might accelerate loading a module from cache slightly<br>\nsince less work is needed to manage the unwinding information, but<br>\nthat's just a side benefit from the main goal of this commit which is to<br>\nremove the dependence on cranelift unwinding information being available<br>\nat runtime.</p>\n<p><del>On a procedural note this draws from <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3179\">https://github.com/bytecodealliance/wasmtime/pull/3179</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3176\">https://github.com/bytecodealliance/wasmtime/pull/3176</a> so only the last commit here is what's to be reviewed.</del></p>\n</blockquote>",
        "id": 249298420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1628805556
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249616676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133682
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249616823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133738
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249619466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629134885
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249643727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629146009
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249643747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629146018
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249644248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629146251
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249658300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629154084
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#pullrequestreview-732160686\">PR review</a>.</p>",
        "id": 249776372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#pullrequestreview-732160686\">PR review</a>.</p>",
        "id": 249776373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690699568\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we could do a slightly more helpful chained error message here:</p>\n<blockquote>\n<p>failed to parse internal ELF compilation artifact</p>\n</blockquote>\n</blockquote>",
        "id": 249776374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690674419\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: this can be removed, I guess?</p>\n</blockquote>",
        "id": 249776375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690706241\">PR review comment</a>:</p>\n<blockquote>\n<p>ugh I forgot about this bug</p>\n</blockquote>",
        "id": 249776376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690689336\">PR review comment</a>:</p>\n<blockquote>\n<p>To clarify: the alternative to this whole <code>DW_EH_PE_pcrel</code> approach would be to emit relocs for the FDEs, right?</p>\n</blockquote>",
        "id": 249776377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690679152\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick, but I find it more confusing to turbo fish <code>unzip</code> than to give an explicit type to the LHS of the assignment, since <code>unzip</code> has those two extra type parameters that I don't remember what is going on with them and have to look up in the docs again. On the other hand, when the explicit types are in the LHS of the assignment, I don't get side tracked by these meaningless type parameters.</p>\n</blockquote>",
        "id": 249776378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690672803\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! symbols that refer to libcalls.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249776379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690672623\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! relocation records for the linking stage. If DWARF sections exist, their\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249776380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629233111
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#pullrequestreview-732236706\">PR review</a>.</p>",
        "id": 249780500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235236
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180#discussion_r690731628\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed yeah. I'll admit that I know so little about relocations I didn't really try to do this at all and I didn't feel I needed to pursue this much because I got the <code>pcrel</code> bits working. Not having relocations is somewhat beneficial in that loading these tables is that much faster (it's just what's in-memory) and in theory amenable to the hypothetical mmap-and-go world.</p>\n</blockquote>",
        "id": 249780502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235237
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249780614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235287
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a> from <code>refactor-unwind</code> to <code>main</code>.</p>",
        "id": 249780758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235342
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3180\">PR #3180</a>.</p>",
        "id": 249785718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629238460
    }
]