[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437528298\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<p>I'll review this in detail tomorrow, but one thing I think would be good to explore / understand (if only because I sometimes find that fully explaining why a problem occurred leads to uncovering other surprises, or bugs, or ... basically, <a href=\"https://en.wiktionary.org/wiki/Chesterton%27s_fence\">Chesterton's Fence</a>): what cases did the existing code not cover that this does?</p>\n<p>I'm somewhat surprised because the existing implementation already was supposed to be creating lowered blocks only when necessary: its <code>Orig</code> / <code>Edge</code> / <code>EdgeAndOrig</code> / <code>OrigAndEdge</code> descriptors allow for merging the edge-block into either pred or succ, and for any non-critical edge (such that either pred or succ has at most one succ or pred, respectively), this merging should be possible. In other words, the problem description here \"now we only create edge blocks for critical edges\" is surprising to me because we were supposed to already be doing this. Was there a case missing or overly conservative, for example? Or is the new implementation not accounting for something?</p>\n<p>I see that tests are failing with RA2 rejecting some lowered code (\"disallowed branch arg\", which occurs when the CFG forces edge moves to the pred side of an edge but the pred ends in a conditional: in this case, we have nowhere to put the moves for just one side of the conditional), which IMHO means we should be extra-careful in understanding exactly what the difference is and what new cases we are now allowing!</p>\n</blockquote>",
        "id": 329064438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676926033
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437666464\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<p>The RA2 error was from treating <code>br_table</code> with an empty jump table as an unconditional jump. I ported forward the workaround from the previous implementation, which was to mark blocks that end in <code>br_table</code> as having at least 2 outgoing edges.</p>\n</blockquote>",
        "id": 329081039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676935625
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437675793\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<p>There were a few different motivations for this PR, that came out of discussions with @jameysharp, and recent refactorings that get us to a state where we can now assume all branch instructions terminate basic blocks.</p>\n<p>Starting with the latter first, I was idly investigating what it would take to have the output of <code>BlockLoweringOrder::succ_indices</code> return a single instruction along with a slice of the indices it branches to. This would allow simplifications in a few other places where we jump through hoops to assert that they are all the same instruction now. This was a pretty daunting refactoring with the previous implementation, as the <code>LoweredBlock</code> type makes use of the branch instruction in many places, and restructuring metadata used during the construction of the postorder traversal resisted multiple attempts by both me and @jameysharp.</p>\n<p>As to the former, @jameysharp and I had been discussing how it would be nice to reuse the postorder  traversal that's cached by the <code>DominatorTree</code> to drive the block lowering order. This is nice for a few reasons: it's not unnecessarily recomputing the order which while cheap to compute is not nothing; it allows us to specify explicitly that we only split critical edges, which was easier for me to think about than the state machine in the current implementation.</p>\n<p>Additionally this implementation allows us to avoid splitting edges for unconditional jumps leaving one block but targeting another that has multiple inputs, which in some cases does produce lowering orders with fewer critical edge nodes. One concrete case is the diamond from the test suite: an entry with a <code>brif</code> whose target blocks both branch to the same exit node. Previously that would introduce two edge blocks on the unconditional branches to the exit block, but with this implementation those introduced nodes are not necessary. Investigating how the <code>LoweredBlock</code> values are used by the RA2 interface is what led @jameysharp and I to believe that this would be a reasonable change to make, as it treats all <code>LoweredBlock</code> cases the same unless they are the pure <code>Edge</code> case.</p>\n</blockquote>",
        "id": 329082826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676937141
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437696492\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<blockquote>\n<p>One concrete case is the diamond from the test suite: an entry with a brif whose target blocks both branch to the same exit node. Previously that would introduce two edge blocks on the unconditional branches to the exit block, but with this implementation those introduced nodes are not necessary.</p>\n</blockquote>\n<p>Hmm... so, as silly as it may seem in the minimal example, in general we <em>do</em> actually need separate edge blocks here, because of blockparams. Specifically, imagine that each edge from A to B assigned a different list of values to the blockparams in B: then RA2 needs a location to do that permutation for each edge. This is why the definition of edge-criticality in the existing code has to do with number of successors and predecessors, without collapsing.</p>\n</blockquote>",
        "id": 329085302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676938990
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437701153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>One concrete case is the diamond from the test suite: an entry with a brif whose target blocks both branch to the same exit node. Previously that would introduce two edge blocks on the unconditional branches to the exit block, but with this implementation those introduced nodes are not necessary.</p>\n</blockquote>\n<p>Hmm... so, as silly as it may seem in the minimal example, in general we _do_ actually need separate edge blocks here, because of blockparams. Specifically, imagine that each edge from A to B assigned a different list of values to the blockparams in B: then RA2 needs a location to do that permutation for each edge. This is why the definition of edge-criticality in the existing code has to do with number of successors and predecessors, without collapsing.</p>\n</blockquote>\n<p>I think that's still easier to implement in the context of these changes, as we're currently adding an edge block only for critical edges; it would be really easy to rephrase this to add an edge block when there's a critical edge, or the successor block has multiple predecessors.</p>\n</blockquote>",
        "id": 329086086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676939586
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1437742267\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think that's still easier to implement in the context of these changes, as we're currently adding an edge block only for critical edges; it would be really easy to rephrase this to add an edge block when there's a critical edge, or the successor block has multiple predecessors.</p>\n</blockquote>\n<p>That's possibly equivalent to the current code, but phrased in a (to me) more confusing way. Given a CFG with two edges from A to B, these edges <em>are</em> critical edges; no need to distinguish the special case with multiple preds. Strictly speaking I guess one needs to see the CFG as a hypergraph (every edge has an identity) -- and this is why the edges use branch instruction IDs to disambiguate.</p>\n<p>That suggests a different fix to me: why not start with the current code, but use successor-index, rather than branch instruction, to disambiguate edges?</p>\n<p>Given the above fix, I suspect this PR would produce exactly equivalent code to the current code. I'm interested to see whether this is actually the case though.</p>\n</blockquote>",
        "id": 329091202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676943334
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843#issuecomment-1439089392\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5843\">issue #5843</a>:</p>\n<blockquote>\n<p>I'd really like to drop the \"Treat br_table with an empty jump table as multiple block exits\" workaround. The problem it's dealing with is that the input to such instructions is a register use that RA2 would have to account for when emitting moves between blocks. (I didn't understand that when looking at this with Trevor last week.) However in the only case where this can occur, that use is effectively dead: it can't have any effect on the execution of the program. I don't know if we should just make it illegal to have a <code>br_table</code> with an empty jump table (you can always replace it with a <code>jump</code>), or do a legalization pass at some point, but I don't like kludging the block-lowering order as a \"solution\".</p>\n<p>Regarding the edge-splits that this PR removes compared to the existing implementation: The current implementation supports fusing <code>EdgeAndOrig</code> or <code>OrigAndEdge</code> pairs, but if both fusions are legal it picks only one instead of emitting something like <code>EdgeAndOrigAndEdge</code>. That's the case this PR improves on. This is mentioned in the module comment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! (note that the edges into CLIF blocks 1 and 2 could be merged with those</span>\n<span class=\"sd\">//! blocks' original bodies, but the out-edges could not because for simplicity</span>\n<span class=\"sd\">//! in the successor-function definition, we only ever merge an edge onto one</span>\n<span class=\"sd\">//! side of an original CLIF block.)</span>\n</code></pre></div>\n<p>The key observation, I think, is that RA2 can't actually distinguish between <code>Orig</code>, <code>EdgeOrig</code>, and <code>OrigEdge</code> blocks. The only two kinds of blocks we hand it in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d711872d6367d2f50a14461c48ae4f19d571f984/cranelift/codegen/src/machinst/lower.rs#L1009-L1063\">machinst/lower.rs</a> are either pure critical-edge splitting blocks without any original instructions in them, or original blocks where RA2 may safely add moves to the beginning and end as needed. This PR makes that distinction explicit.</p>\n<p>I think you two are talking past each other regarding which edges are critical.</p>\n<p>I think the case Chris is talking about is if there are only two blocks (A and B), and A has two edges to B. In that case, yes, both of those edges are critical: they're both edges from a block with multiple successors and to a block with multiple predecessors. As you pointed out, the two edges may have different block parameters so we can't in general place the appropriate moves in either A or B. Those predecessors and successors aren't distinct if we look only at block IDs, but they are distinct edges, and that's what this PR looks at.</p>\n<p>The case which Trevor is talking about is when there are four blocks (A, B, C, D), with a conditional branch from A to either B or C, and then B and C both unconditionally branch to D. In that case there are no critical edges, even with block parameters. All of the moves can be attached to block B or C, because they each have exactly one predecessor and one successor. The existing implementation inserts unnecessary edge splits in this case.</p>\n<p>I believe this PR already captures the definition that you intended, Chris. It's much simpler than the existing implementation, in my opinion, because it only needs to iterate over all the edges and decide whether each edge is critical or not. That decision is simple after counting all the predecessors and successors of each block.</p>\n<p>The only tricky bit in this PR, I think, is in deciding where to insert the edge-splitting blocks in the pre-computed RPO. This PR places them immediately after their predecessors, if I remember correctly, but several other choices would be equally reasonable, I think. There's no \"good\" choice, as far as I can figure, but this is one choice that I think still produces a valid RPO, which is a reasonable heuristic.</p>\n</blockquote>",
        "id": 329291267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677013372
    }
]