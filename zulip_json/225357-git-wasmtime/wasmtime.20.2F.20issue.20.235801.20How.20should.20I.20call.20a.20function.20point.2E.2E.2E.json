[
    {
        "content": "<p>Officeyutong opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5801\">issue #5801</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"env\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// We are using `wasm32-wasi`, so pointers are 32bit</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">register_callback</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run_callback</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">callback_func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Called!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">register_callback</span><span class=\"p\">(</span><span class=\"n\">callback_func</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">run_callback</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>register_callback</code> and <code>run_callback</code> are functions that the host-side provides. </p>\n<p>I expect that the host side will call the function pointer (casted to <code>u32</code>) when <code>run_callback</code> is called, what should I do to implement this?</p>\n</blockquote>",
        "id": 328258422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676559322
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5801#issuecomment-1433260868\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5801\">issue #5801</a>:</p>\n<blockquote>\n<p>Function pointers in WebAssembly are represented as integers which are indexes into a table in the module. The <code>callback_func</code> given to the host should be used to index a <code>Table</code> which is exported from the module. After loading a <code>Func</code> from that table then you can cast it to the appropriate type and then call it.</p>\n</blockquote>",
        "id": 328266319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676561084
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5801\">issue #5801</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"env\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// We are using `wasm32-wasi`, so pointers are 32bit</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">register_callback</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">run_callback</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">callback_func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Called!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">register_callback</span><span class=\"p\">(</span><span class=\"n\">callback_func</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">run_callback</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>register_callback</code> and <code>run_callback</code> are functions that the host-side provides. </p>\n<p>I expect that the host side will call the function pointer (casted to <code>u32</code>) when <code>run_callback</code> is called, what should I do to implement this?</p>\n</blockquote>",
        "id": 328266320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676561084
    }
]