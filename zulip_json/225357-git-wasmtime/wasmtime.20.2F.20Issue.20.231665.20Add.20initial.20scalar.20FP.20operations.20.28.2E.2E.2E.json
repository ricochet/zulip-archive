[
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-631696470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@julian-seward1 @cfallin Rebased for Chris's latest updates.</p>\n</blockquote>",
        "id": 198250119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590005058
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-635672382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@julian-seward1 Thanks for the suggestions! I like somehow capturing the CPUID feature (SSE, SSE2, AVX, etc) and wanted to do this in an earlier push but wasn't sure how we'd want it done. It's good to encode this information now so good suggestion. On that note, I was thinking SSE_OP should really be SSE_RM_OP for consistency and convenient cross checking purposes. We'll want SSE_RMI_OP (actually created here already), SSE_RVM_OP, etc in the future. Do you think this would be fine to add (maybe update in a future patch)?</p>\n<p>Also potentially in a future patch I am not sure the value of having XMM_R_R. Seems this instruction format can be capture with XMM_RM_M ... same reason we combined SSE_RM_M and SSE_R_R. It would simplify logic in a few places. Do you think we can remove this as well in another patch? </p>\n<p>Note, one thing I didn't do here in this patch was remove the F_PREFIX_66 since that is a valid prefix that I think we will need. If you still think its best to remove I can push the removal.</p>\n<p>Also separately I noticed that it doesn't appear that cargo run -- wasm disassemble is printing based on lowered vcode. I say that because I redundant rex bits appear to be retained in the binary when I don't expect that. I am thinking this is printing from original cranelift lowering? Will have to investigate this further but will probably open this as an issue and submit a patch.</p>\n</blockquote>",
        "id": 199098834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590709004
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-635672382\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>@julian-seward1 Thanks for the suggestions! I like somehow capturing the CPUID feature (SSE, SSE2, AVX, etc) and wanted to do this in an earlier push but wasn't sure how we'd want it done. It's good to encode this information now so good suggestion. On that note, I was thinking SSE_OP should really be SSE_RM_OP for consistency and convenient cross checking purposes. We'll want SSE_RMI_OP (actually created here already), SSE_RVM_OP, etc in the future. Do you think this would be fine to add (maybe update in a future patch)?</p>\n<p>Also potentially in a future patch I am not sure the value of having XMM_R_R. Seems this instruction format can be capture with XMM_RM_M ... same reason we combined SSE_RM_M and SSE_R_R. It would simplify logic in a few places. Do you think we can remove this as well in another patch? </p>\n<p>Note, one thing I didn't do here in this patch was remove the F_PREFIX_66 since that is a valid prefix that I think we will need. If you still think its best to remove I can push the removal.</p>\n</blockquote>",
        "id": 199103297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590713681
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-640171277\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>Ah, you're right, <code>Inst::XMM_R_R</code> is redundant because <code>Inst::XMM_RM_R</code> will cover that case.  Not sure what I was thinking there.</p>\n<p>The reason I proposed simply <code>SSE_Op</code> and not <code>SSE_RM_R_Op</code> and <code>SSE_R_R_Op</code> etc is that for almost all SSE(*) insns, both the reg-mem and reg-reg forms exist.  Hence if we did that we'd get a lot of duplication in the two enums.</p>\n<p>Regarding <code>SSE_RMI_OP</code> op, there are no SSE insns where one of the operands is a literal (immediate) value, so this would never get used.  There are a few SSE insns in which there is an immediate 8-bit value, but that is basically an opcode extension, not an operand, and they are rare, so we can special-case those later if we need them.</p>\n</blockquote>",
        "id": 200012337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591515354
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665#issuecomment-642125616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1665\">Issue #1665</a>:</p>\n<blockquote>\n<p>Merging, so we can move forward. Thanks!</p>\n</blockquote>",
        "id": 200441821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591807015
    }
]