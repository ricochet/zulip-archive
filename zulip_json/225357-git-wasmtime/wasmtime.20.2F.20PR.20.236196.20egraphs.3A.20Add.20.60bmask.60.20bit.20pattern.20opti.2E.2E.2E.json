[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a> from <code>afonso360:long-bmask</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is something I wrote in #5888 and then <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5888/commits/497922f547c2299f5d317a73e843b48866c9e863#r1161902682\">@elliottt pointed out that It's just <code>bmask</code></a>. I checked if we had a rule for this in the mid end and we don't.</p>\n<p>This is a really long long rule, so I'm not sure how often it's going to fire. But I also got that lowering from <a href=\"https://github.com/RustCrypto/utils/blob/0256fff4d67edb4956f5200b877f41038c4ef7e7/cmov/src/portable.rs#L46-L47\">here</a> so it is out there in the real world.</p>\n<p>This is based on top of #6140 so that we don't have to rebase that again.<br>\n</p>\n</blockquote>",
        "id": 348423781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210486
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348423785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210486
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348423787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210487
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is something I wrote in #5888 and then <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5888/commits/497922f547c2299f5d317a73e843b48866c9e863#r1161902682\">@elliottt pointed out that It's just <code>bmask</code></a>. I checked if we had a rule for this in the mid end and we don't.</p>\n<p>This is a really long long rule, and I'm not sure how often it's going to fire. But I also got that lowering from <a href=\"https://github.com/RustCrypto/utils/blob/0256fff4d67edb4956f5200b877f41038c4ef7e7/cmov/src/portable.rs#L46-L47\">here</a> so it is out there in the real world.</p>\n<p>This is based on top of #6140 so that we don't have to rebase that again.<br>\n</p>\n</blockquote>",
        "id": 348423954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210528
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348425242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210874
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is something I wrote in #5888 and then <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5888/commits/497922f547c2299f5d317a73e843b48866c9e863#r1161902682\">@elliottt pointed out that It's just <code>bmask</code></a>. I checked if we had a rule for this in the mid end and we don't.</p>\n<p>This is a really long long rule, and I'm not sure how often it's going to fire. But I also got that lowering from <a href=\"https://github.com/RustCrypto/utils/blob/0256fff4d67edb4956f5200b877f41038c4ef7e7/cmov/src/portable.rs#L46-L47\">here</a> so it is out there in the real world.</p>\n<p>This is based on top of #6140 so that we don't have to rebase that again.</p>\n<p>I'm going to let the fuzzer run on this for a while.<br>\n</p>\n</blockquote>",
        "id": 348425295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210894
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This is something I wrote in #5888 and then <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5888/commits/497922f547c2299f5d317a73e843b48866c9e863#r1161902682\">@elliottt pointed out that It's just <code>bmask</code></a>. I checked if we had a rule for this in the mid end and we don't.</p>\n<p>This is a really long rule, and I'm not sure how often it's going to fire. But I also got that lowering from <a href=\"https://github.com/RustCrypto/utils/blob/0256fff4d67edb4956f5200b877f41038c4ef7e7/cmov/src/portable.rs#L46-L47\">here</a> so it is out there in the real world.</p>\n<p>This is based on top of #6140 so that we don't have to rebase that again.</p>\n<p>I'm going to let the fuzzer run on this for a while.<br>\n</p>\n</blockquote>",
        "id": 348425350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681210914
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348428828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681211780
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348429322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681211909
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 348430879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681212299
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379816842\">PR review</a>.</p>",
        "id": 348530058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236000
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379816842\">PR review</a>.</p>",
        "id": 348530059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236000
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163159019\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this actually correct? I couldn't convince myself, so I asked Z3 to find an <code>x</code> for which <code>bmask(x)</code> and <code>!(((x | ((!x) + 1)) &gt;&gt; (ty_bits - 1)) - 1)</code> were not equal (that is, I asked it to find a counterexample):</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">declare-const</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">BitVec</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"nb\">assert</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ite</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"mh\">#x00000000</span><span class=\"p\">)</span>\n<span class=\"w\">                   </span><span class=\"mh\">#x00000000</span>\n<span class=\"w\">                   </span><span class=\"mh\">#xffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"c1\">;; !(((x | ((!x) + 1)) &gt;&gt; 31) - 1)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"nv\">bvnot</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bvsub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bvlshr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bvor</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">                                          </span><span class=\"p\">(</span><span class=\"nv\">bvadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bvnot</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"w\">                                                 </span><span class=\"mh\">#x00000001</span><span class=\"p\">))</span>\n<span class=\"w\">                                    </span><span class=\"mh\">#x0000001f</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"mh\">#x00000001</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">check-sat</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">get-model</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>It reports <code>sat</code>, meaning that it found a counterexample, and it says the counterexample is zero:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"nv\">sat</span>\n<span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">define-fun</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">BitVec</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"mh\">#x00000000</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>So unless I'm missing something and/or translated the expression incorrectly, I think this optimization is incorrect?</p>\n</blockquote>",
        "id": 348530061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236000
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379819108\">PR review</a>.</p>",
        "id": 348530338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236076
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163160466\">PR review comment</a>:</p>\n<blockquote>\n<p>Then again, there is an explicit test for 0 in the run tests, so I must have done something wrong...</p>\n</blockquote>",
        "id": 348530339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236077
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379837040\">PR review</a>.</p>",
        "id": 348532782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236854
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163172030\">PR review comment</a>:</p>\n<blockquote>\n<p>The SMT counterexample is confusing me too:</p>\n<ul>\n<li><code>x1 := (bvnot x)</code> with <code>x := 0</code> -&gt; <code>0xffffffff</code></li>\n<li><code>x2 := (bvadd x1 1)</code> -&gt; <code>0</code></li>\n<li><code>x3 := (bvor x2 x)</code> -&gt; <code>(bvor 0 0)</code> -&gt; <code>0</code></li>\n<li><code>x4 := (bvlshr x3 31)</code> -&gt; <code>0</code></li>\n<li><code>x5 := (bvsub x4 1)</code> -&gt; <code>0xffffffff</code></li>\n<li><code>x6 := (bvnot x5)</code> -&gt; <code>0</code></li>\n</ul>\n<p>and on the LHS for the if-then-else we have <code>(ite (= 0 0) 0 0xffffffff)</code> -&gt; <code>0</code>. Seems like the optimization did what it was supposed to? I too am confused why we get SAT here. </p>\n</blockquote>",
        "id": 348532784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681236854
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379843983\">PR review</a>.</p>",
        "id": 348533779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237170
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163176855\">PR review comment</a>:</p>\n<blockquote>\n<p>That Z3 expression looks like a correct translation of that pattern to my eyes, so I'm confused too.</p>\n<p>I think the rule seems correct:</p>\n<ul>\n<li><code>!input + 1</code> is equivalent to <code>-input</code> in two's-complement.</li>\n<li>0 is the only value which, when negated, leaves the sign bit clear. (<code>INT_MIN</code> leaves the sign bit set; all other cases flip the sign bit.)</li>\n<li>Shifting the sign bit down after <code>x | -x</code> then gives us 0 if the input was 0, and 1 otherwise.</li>\n<li>Subtracting 1 means we get -1 if the input was 0, and 0 otherwise.</li>\n<li>Inverting the result should then give us the right answer.</li>\n</ul>\n</blockquote>",
        "id": 348533780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237170
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379849426\">PR review</a>.</p>",
        "id": 348534564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237419
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163180454\">PR review comment</a>:</p>\n<blockquote>\n<p>And I think this is a reasonable informal proof, by cases:</p>\n<p>Prove: <code>;; bmask(input) = !(((input | ((!input) + 1)) &gt;&gt; 63) - 1)</code> (for 64-bit input)</p>\n<ul>\n<li>Take the three cases<ul>\n<li><code>input == 0</code>: we have the above evaluation; the RHS produces <code>0</code> and <code>bmask(0) == 0</code>.</li>\n<li><code>input &lt; 0</code>: <code>input</code> has MSB = 1, thus <code>input | ...</code> has MSB = 1. Right-shift by 63, we have <code>1</code>; <code>1 - 1</code> = <code>0</code>; outer bnot gives us all-ones.</li>\n<li><code>input &gt; 0</code>: <code>input</code> has MSB = 0, thus <code>!input</code> has MSB = 1. Furthermore <code>!input != 0xffff...ffff</code> (else we would have had <code>input == 0</code>). So <code>!input + 1</code> also has MSB = 1 (because it will not wrap around, because of previous statement). So <code>input | ((!input) + 1)</code> has MSB = 1. Right-shift by 63, we have <code>1</code>; <code>1 - 1</code> = <code>0</code>; outer bnot gives us all-ones.</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 348534566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237419
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379850438\">PR review</a>.</p>",
        "id": 348534725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237461
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163181110\">PR review comment</a>:</p>\n<blockquote>\n<p>(@afonso360 a comment to this effect in the source would be very useful for the future!)</p>\n</blockquote>",
        "id": 348534728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237462
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379854159\">PR review</a>.</p>",
        "id": 348535241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237628
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163183680\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, and after posting I see @jameysharp 's comment too. Both of us arrived at the same reasoning more or less so I'm fairly confident here :-)</p>\n</blockquote>",
        "id": 348535243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681237628
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379879754\">PR review</a>.</p>",
        "id": 348538839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681238787
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163200495\">PR review comment</a>:</p>\n<blockquote>\n<p>We can extract out more broadly-applicable rules that should compose nicely into this one.</p>\n<p>Rewrite both of these patterns to <code>(ineg ty input)</code>:</p>\n<ul>\n<li><code>(iadd ty (bnot ty input) (iconst ty (u64_from_imm64 1)))</code></li>\n<li><code>(bnot ty (isub ty input (iconst ty (u64_from_imm64 1))))</code></li>\n</ul>\n<p>In a 64-bit word, <code>-(x &gt;&gt; 63)</code>, where right-shift is unsigned, should I think be equivalent to <code>x &gt;&gt; 63</code> with a signed right-shift. Or in general, rewrite negation of unsigned shifts by N-1 bits in N-bit words.</p>\n<p>Then this rule only needs to match <code>(x | -x) &gt;&gt; (N-1)</code>, with a signed right-shift.</p>\n<p>That should make all these rules more broadly applicable as well as (somewhat) easier to understand.</p>\n<p><code>x | -x</code> leaves the trailing 0s alone and sets the remaining bits to 1. (I found the inverse of this pattern in \"Hacker's Delight\", on page 12.) I don't think there's a useful rule we can extract from that pattern alone.</p>\n</blockquote>",
        "id": 348538840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681238787
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379883803\">PR review</a>.</p>",
        "id": 348539396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681238964
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163203196\">PR review comment</a>:</p>\n<blockquote>\n<p>The problem with the smtlib version was the use of <code>!</code>, which is for annotating expressions: switching to <code>not</code> fixes the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">declare</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">BitVec</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">assert</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ite</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>#<span class=\"n\">x00000000</span><span class=\"p\">)</span>\n<span class=\"w\">                   </span>#<span class=\"n\">x00000000</span>\n<span class=\"w\">                   </span>#<span class=\"n\">xffffffff</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(((</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"o\">!</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">bvnot</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvsub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvlshr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvor</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">                                          </span><span class=\"p\">(</span><span class=\"n\">bvadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bvnot</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">                                                 </span>#<span class=\"n\">x00000001</span><span class=\"p\">))</span>\n<span class=\"w\">                                    </span>#<span class=\"n\">x0000001f</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span>#<span class=\"n\">x00000001</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">sat</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>produces the following output:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">smt2</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">smt</span>\n<span class=\"n\">unsat</span>\n<span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"s\">\"line 14 column 10: model is not available\"</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 348539398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681238965
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379910391\">PR review</a>.</p>",
        "id": 348543125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681240085
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379910391\">PR review</a>.</p>",
        "id": 348543127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681240085
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163220103\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: instead of hard coding <code>63</code> lets make this <code>bits(ty) - 1</code>.</p>\n<p>Also, lets add a comment with an informal proof / argument about why this is correct, as @cfallin mentioned.</p>\n</blockquote>",
        "id": 348543131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681240085
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1379948105\">PR review</a>.</p>",
        "id": 348548384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681241807
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1163244717\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the correctness argument is much less important to write out if this is split into the four separate rules I suggested. They're individually much easier to verify.</p>\n</blockquote>",
        "id": 348548386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681241807
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 349105869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681391455
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 349121531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681394958
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 349124094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681395431
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1383749355\">PR review</a>.</p>",
        "id": 349190514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1383749355\">PR review</a>.</p>",
        "id": 349190515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1165739099\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment is great, thank you!</p>\n<p>I guess we should add the commutative version of this too, for <code>(-x | x)</code>, to go with <code>(x | -x)</code>.</p>\n</blockquote>",
        "id": 349190517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1165751518\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd like a couple more cases, maybe instead of the cases for 2 or 3:</p>\n<ul>\n<li>0xFFFF_FFFF_FFFF_FFFF</li>\n<li>0x8000_0000_0000_0000</li>\n</ul>\n<p>I'd also be fine with narrowing this to <code>i32</code> or <code>i16</code> so the interesting edge cases have smaller constants…</p>\n</blockquote>",
        "id": 349190518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1165742971\">PR review comment</a>:</p>\n<blockquote>\n<p>This rule would also work for <code>(x + (-1))</code> and its commutative equivalent.</p>\n<p>I considered suggesting that we should have a rule that transforms <code>isub</code> where the second operand is constant into <code>iadd</code> of the negation of that constant. Then any rules involving addition with a constant can fire for <code>isub</code> as well. For example, <code>(!x) - (-1)</code> would fire the rules above.</p>\n<p>That's not ideal though since it replaces an instruction with another instruction of equal cost, and I think we're converging on the idea that every egraph rule should rewrite to an expression of lower total cost. So in this case we'd want six rules in total:</p>\n<ul>\n<li><code>!x + 1 == 1 + !x == !x - (-1) == -x</code></li>\n<li><code>!(x - 1) == !(x + (-1)) == !((-1) + x) == -x</code></li>\n</ul>\n</blockquote>",
        "id": 349190519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#discussion_r1165764900\">PR review comment</a>:</p>\n<blockquote>\n<p>Elsewhere in this file these comments were written in the other order, with the pattern we're looking for first and the simpler equivalent afterward, and I think that makes a little more sense. So this example would instead be:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; (!x) + 1 == ineg(x)\n</code></pre></div>\n<p>And similarly through the rest of the rules in this PR.</p>\n</blockquote>",
        "id": 349190520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681412329
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 349199347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681415460
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196#pullrequestreview-1384115092\">PR review</a>.</p>",
        "id": 349199618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681415552
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6196\">PR #6196</a>.</p>",
        "id": 350031788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681500567
    }
]