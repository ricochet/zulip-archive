[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>JIT for arm64</p>\n<h4>Benefit</h4>\n<p>x86 works and it would be nice to be able to use it on M1 mac as well</p>\n<h4>Implementation</h4>\n<p>it currently panics here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5fecdfa49150e3304c1b949aab73bd4a0a02dbac/cranelift/jit/src/backend.rs#L183-L195\">https://github.com/bytecodealliance/wasmtime/blob/5fecdfa49150e3304c1b949aab73bd4a0a02dbac/cranelift/jit/src/backend.rs#L183-L195</a> I'm unsure what needs to change/ whats blocking it</p>\n<h4>Alternatives</h4>\n<p>only make JIT available on x86<br>\n</p>\n</blockquote>",
        "id": 230773049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616017901
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-801467140\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>@bnjbvr any thoughts on this? I'm not sure how PLTs ordinarily work on macOS/aarch64 but perhaps it's a simple addition?</p>\n</blockquote>",
        "id": 230773203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616017971
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-801471323\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>As workaround you could disable the <code>is_pic</code> flag when creating the <code>TargetIsa</code>.</p>\n</blockquote>",
        "id": 230774730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616018499
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-801475570\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>This is one of the plt entries of an executable I compiled on my phone:</p>\n<p><div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">90</span> <span class=\"err\">01</span> <span class=\"err\">00</span> <span class=\"nf\">B0</span>    <span class=\"no\">adrp</span> <span class=\"no\">x16</span><span class=\"p\">,</span> <span class=\"mi\">#0</span><span class=\"no\">x31000</span>\n<span class=\"err\">11</span> <span class=\"nf\">F2</span> <span class=\"mi\">46</span> <span class=\"no\">F9</span>    <span class=\"no\">ldr</span>  <span class=\"no\">x17</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">x16</span><span class=\"p\">,</span> <span class=\"mi\">#0</span><span class=\"no\">xde0</span><span class=\"p\">]</span>\n<span class=\"err\">10</span> <span class=\"err\">82</span> <span class=\"err\">37</span> <span class=\"err\">91</span>    <span class=\"nf\">add</span>  <span class=\"no\">x16</span><span class=\"p\">,</span> <span class=\"no\">x16</span><span class=\"p\">,</span> <span class=\"mi\">#0</span><span class=\"no\">xde0</span>\n<span class=\"err\">20</span> <span class=\"err\">02</span> <span class=\"err\">1</span><span class=\"nf\">F</span> <span class=\"no\">D6</span>    <span class=\"no\">br</span>   <span class=\"no\">x17</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 230776930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616019075
    },
    {
        "content": "<p>benmkw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-801476541\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<blockquote>\n<p>As workaround you could disable the is_pic flag when creating the TargetIsa.</p>\n</blockquote>\n<p>Tried with <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">https://github.com/bytecodealliance/cranelift-jit-demo</a></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Cargo.toml b/Cargo.toml</span>\n<span class=\"gh\">index 756983f..f6dd93f 100644</span>\n<span class=\"gd\">--- a/Cargo.toml</span>\n<span class=\"gi\">+++ b/Cargo.toml</span>\n<span class=\"gu\">@@ -8,7 +8,8 @@ description = \"Toy language implemented using cranelift-jit\"</span>\n edition = \"2018\"\n\n [dependencies]\n<span class=\"gd\">-cranelift = \"0.69.0\"</span>\n<span class=\"gd\">-cranelift-module = \"0.69.0\"</span>\n<span class=\"gd\">-cranelift-jit = \"0.69.0\"</span>\n<span class=\"gi\">+cranelift = \"0.72.0\"</span>\n<span class=\"gi\">+cranelift-module = \"0.72.0\"</span>\n<span class=\"gi\">+cranelift-jit = \"0.72.0\"</span>\n<span class=\"gi\">+cranelift-native = \"0.72.0\"</span>\n peg = \"0.6\"\n<span class=\"gh\">diff --git a/src/jit.rs b/src/jit.rs</span>\n<span class=\"gh\">index 160ac36..ffcff04 100644</span>\n<span class=\"gd\">--- a/src/jit.rs</span>\n<span class=\"gi\">+++ b/src/jit.rs</span>\n<span class=\"gu\">@@ -26,7 +26,17 @@ pub struct JIT {</span>\n\n impl Default for JIT {\n     fn default() -&gt; Self {\n<span class=\"gd\">-        let builder = JITBuilder::new(cranelift_module::default_libcall_names());</span>\n<span class=\"gi\">+        let mut flag_builder = settings::builder();</span>\n<span class=\"gi\">+        // On at least AArch64, \"colocated\" calls use shorter-range relocations,</span>\n<span class=\"gi\">+        // which might not reach all definitions; we can't handle that here, so</span>\n<span class=\"gi\">+        // we require long-range relocation types.</span>\n<span class=\"gi\">+        flag_builder.set(\"use_colocated_libcalls\", \"false\").unwrap();</span>\n<span class=\"gi\">+        flag_builder.set(\"is_pic\", \"false\").unwrap();</span>\n<span class=\"gi\">+        let isa_builder = cranelift_native::builder().unwrap_or_else(|msg| {</span>\n<span class=\"gi\">+            panic!(\"host machine is not supported: {}\", msg);</span>\n<span class=\"gi\">+        });</span>\n<span class=\"gi\">+        let isa = isa_builder.finish(settings::Flags::new(flag_builder));</span>\n<span class=\"gi\">+        let builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());</span>\n         let module = JITModule::new(builder);\n         Self {\n             builder_context: FunctionBuilderContext::new(),\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">λ</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"o\">|</span><span class=\"err\">✚</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.01</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">toy</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"n\">is</span>: <span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"n\">recursive_fib</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"></span>\n<span class=\"n\">iterative_fib</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">55</span><span class=\"w\"></span>\n<span class=\"n\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I could maybe PR that because I don't see how PIC is really relevant to the demo and it would make it work on more platforms </p>\n</blockquote>",
        "id": 230777353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616019213
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-804224406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>I don't know how PLT tables work in MacOS/aarch64 either. It's easy to make it work for our use case (load from pointer into reg + branch into it), but if the linker expects a precise sequence like the one from @bjorn3's comment, we'd need to find what is precisely expected. I don't plan to work on this immediately, yet I'd be happy to try patches if that can help!</p>\n</blockquote>",
        "id": 231345245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616431880
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-804228467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>In case of <code>cranelift-jit</code> no linker is involved. Or rather <code>cranelift-jit</code> is kind of the linker itself. It is not necessary to copy the exact same sequence. (Even on x86_64 I didn't use the exact same sequence) I merely posted it to show what it would roughly need to look like. Basically all the PLT entry needs to do in the case of <code>cranelift-jit</code> on any platform is load the corresponding GOT entry and jump to the loaded address. This is independent of the OS, but once Rust supports pointer authentication on the M1, the PLT entry code will need to be adapted to support pointer authentication.</p>\n</blockquote>",
        "id": 231346202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616432222
    },
    {
        "content": "<p>otaviopace <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-812723836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>Is this related to: <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/53\">https://github.com/bytecodealliance/wasmtime-go/issues/53</a>?</p>\n</blockquote>",
        "id": 232954500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617398962
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735#issuecomment-812725382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2735\">Issue #2735</a>:</p>\n<blockquote>\n<p>@octaviopace no, this issue doesn't need to be solved in order to run Wasmtime on macOS/aarch64 (M1) -- the <code>cranelift-jit</code> crate isn't used by Wasmtime.</p>\n</blockquote>",
        "id": 232955065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1617399272
    }
]