[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a> from <code>spectre-heap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a conditional move following a heap bounds check through<br>\nwhich the address to be accessed flows. This conditional move ensures<br>\nthat even if the branch is mispredicted (access is actually out of<br>\nbounds, but speculation goes down in-bounds path), the acually accessed<br>\naddress is zero (a NULL pointer) rather than the out-of-bounds address.</p>\n<p>The technique used is well-known and fairly standard: see, e.g., <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/arm64/MacroAssembler-arm64-inl.h#1726-1729\">SpiderMonkey's heap access bounds check</a> (thanks to @bnjbvr for locating this).</p>\n<p>The mitigation is controlled by a flag that is off by default, but can<br>\nbe set by the embedding, to avoid unexpected performance impact for<br>\nexisting users.</p>\n<p>Note that the mitigation is unneccessary when we use the \"huge heap\"<br>\ntechnique on 64-bit systems, in which we allocate a range of virtual<br>\naddress space such that no 32-bit offset can reach other data. Hence,<br>\nthis only affects small-heap configurations.</p>\n<p>The generated code is not great on aarch64 because the overflow flag must be materialized as a boolean in a register, rather than reusing flags (because the dataflow crosses basic blocks); in theory we could do much better with a later lowering, codegenning one comparison and two ops that use its flags.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202142677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593205708
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a> from <code>spectre-heap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a conditional move following a heap bounds check through which the address to be accessed flows. This conditional move ensures that even if the branch is mispredicted (access is actually out of bounds, but speculation goes down in-bounds path), the acually accessed address is zero (a NULL pointer) rather than the out-of-bounds address.</p>\n<p>The technique used is well-known and fairly standard: see, e.g., <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/arm64/MacroAssembler-arm64-inl.h#1726-1729\">SpiderMonkey's heap access bounds check</a> (thanks to @bnjbvr for locating this).</p>\n<p>The mitigation is controlled by a flag that is off by default, but can be set by the embedding, to avoid unexpected performance impact for existing users.</p>\n<p>Note that the mitigation is unneccessary when we use the \"huge heap\" technique on 64-bit systems, in which we allocate a range of virtual address space such that no 32-bit offset can reach other data. Hence, this only affects small-heap configurations.</p>\n<p>The generated code is not great on aarch64 because the overflow flag must be materialized as a boolean in a register, rather than reusing flags (because the dataflow crosses basic blocks); in theory we could do much better with a later lowering, codegenning one comparison and two ops that use its flags.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202142711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593205734
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a>.</p>",
        "id": 202142717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593205738
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-438995311\">PR Review</a>.</p>",
        "id": 202284150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593419876
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-438995311\">PR Review</a>.</p>",
        "id": 202284151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593419876
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r446862496\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Generating IR for the Spectre check seems quite dangerous, at this point; any optimization could reorganize the code (move it around in the best case, delete it in the worst case), so I don't think this is the right solution here.</p>\n</blockquote>",
        "id": 202284152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593419876
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r446861913\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The risk of causing harm by disabling Spectre mitigations by default seems much worse than the performance hit that will be caused by its being set all the time, so I think we should enable it by default, explicit the performance overhead here, and say that while it's enabled by default, there are certain environments in which it's fine to disable it.</p>\n</blockquote>",
        "id": 202284153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593419876
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-438999191\">PR Review</a>.</p>",
        "id": 202284529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593420131
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r446865122\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Even worse, there is a legalization for <code>select</code> that uses branches when there is no encoding that uses <code>cmov</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c9a3f05afd45961b0b397f97c4ad79cd7a7c807d/cranelift/codegen/src/legalizer/mod.rs#L476-L513\">https://github.com/bytecodealliance/wasmtime/blob/c9a3f05afd45961b0b397f97c4ad79cd7a7c807d/cranelift/codegen/src/legalizer/mod.rs#L476-L513</a></p>\n</blockquote>",
        "id": 202284530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593420131
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a> from <code>spectre-heap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a conditional move following a heap bounds check through which the address to be accessed flows. This conditional move ensures that even if the branch is mispredicted (access is actually out of bounds, but speculation goes down in-bounds path), the acually accessed address is zero (a NULL pointer) rather than the out-of-bounds address.</p>\n<p>The technique used is well-known and fairly standard: see, e.g., <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/arm64/MacroAssembler-arm64-inl.h#1726-1729\">SpiderMonkey's heap access bounds check</a> (thanks to @bnjbvr for locating this).</p>\n<p>The mitigation is controlled by a flag that is off by default, but can be set by the embedding, to avoid unexpected performance impact for existing users.</p>\n<p>Note that the mitigation is unneccessary when we use the \"huge heap\" technique on 64-bit systems, in which we allocate a range of virtual address space such that no 32-bit offset can reach other data. Hence, this only affects small-heap configurations.</p>\n<p>The generated code is not great on aarch64 because the overflow flag must be materialized as a boolean in a register, rather than reusing flags (because the dataflow crosses basic blocks); in theory we could do much better with a later lowering, codegenning one comparison and two ops that use its flags.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202368236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593464892
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-439501922\">PR Review</a>.</p>",
        "id": 202368279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593464924
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r447255153\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Changed to use a specific, effectful instruction that the optimizer and legalizations do not know about.</p>\n</blockquote>",
        "id": 202368280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593464924
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-439505764\">PR Review</a>.</p>",
        "id": 202369000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593465294
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r447258255\">PR Review Comment</a>:</p>\n<blockquote>\n<p>See below: will need to be <code>false</code> by default unless we also implement for the legacy x86 backend (or until we delete it), which (unless I'm mistaken) seems to be missing some of the necessary bits for cmovs.</p>\n</blockquote>",
        "id": 202369002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593465294
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a> from <code>spectre-heap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a conditional move following a heap bounds check through which the address to be accessed flows. This conditional move ensures that even if the branch is mispredicted (access is actually out of bounds, but speculation goes down in-bounds path), the acually accessed address is zero (a NULL pointer) rather than the out-of-bounds address.</p>\n<p>The technique used is well-known and fairly standard: see, e.g., <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/arm64/MacroAssembler-arm64-inl.h#1726-1729\">SpiderMonkey's heap access bounds check</a> (thanks to @bnjbvr for locating this).</p>\n<p>The mitigation is controlled by a flag that is off by default, but can be set by the embedding, to avoid unexpected performance impact for existing users.</p>\n<p>Note that the mitigation is unneccessary when we use the \"huge heap\" technique on 64-bit systems, in which we allocate a range of virtual address space such that no 32-bit offset can reach other data. Hence, this only affects small-heap configurations.</p>\n<p>The generated code is not great on aarch64 because the overflow flag must be materialized as a boolean in a register, rather than reusing flags (because the dataflow crosses basic blocks); in theory we could do much better with a later lowering, codegenning one comparison and two ops that use its flags.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202509203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593561159
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-440460632\">PR Review</a>.</p>",
        "id": 202509232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593561194
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r448041430\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Now on by default with latest version.</p>\n</blockquote>",
        "id": 202509233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593561195
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-440824020\">PR Review</a>.</p>",
        "id": 202562487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593606792
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r448329639\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: for symmetry with the other function, can you use a destructuring assignment here too? <code>let (cc, offset, bound) = ...</code></p>\n</blockquote>",
        "id": 202562493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593606795
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-440824020\">PR Review</a>.</p>",
        "id": 202562494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593606797
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a> from <code>spectre-heap</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds a conditional move following a heap bounds check through which the address to be accessed flows. This conditional move ensures that even if the branch is mispredicted (access is actually out of bounds, but speculation goes down in-bounds path), the acually accessed address is zero (a NULL pointer) rather than the out-of-bounds address.</p>\n<p>The technique used is well-known and fairly standard: see, e.g., <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/arm64/MacroAssembler-arm64-inl.h#1726-1729\">SpiderMonkey's heap access bounds check</a> (thanks to @bnjbvr for locating this).</p>\n<p>The mitigation is controlled by a flag that is off by default, but can be set by the embedding, to avoid unexpected performance impact for existing users.</p>\n<p>Note that the mitigation is unneccessary when we use the \"huge heap\" technique on 64-bit systems, in which we allocate a range of virtual address space such that no 32-bit offset can reach other data. Hence, this only affects small-heap configurations.</p>\n<p>The generated code is not great on aarch64 because the overflow flag must be materialized as a boolean in a register, rather than reusing flags (because the dataflow crosses basic blocks); in theory we could do much better with a later lowering, codegenning one comparison and two ops that use its flags.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202584307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593618010
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#pullrequestreview-440986923\">PR Review</a>.</p>",
        "id": 202584319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593618017
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930#discussion_r448451367\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 202584320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593618018
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">PR #1930</a>.</p>",
        "id": 202590197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593620585
    }
]