[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a> from <code>afonso360:riscv-dedup-trap</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR cleans up our trap instructions in the backend. We have 2 \"TrapIf\" style instructions. One that compares against zero, and a second that does any integer comparison. This PR does a couple of changes.</p>\n<p>Merge both <code>TrapIf</code> and <code>TrapIfC</code>. The new <code>TrapIf</code> instruction allows trapping with any integer condition. This is the first commit, and it does not change any of the emitted instruction sequences, just our printing.</p>\n<p>Use the new <code>MachBuffer::defer_trap</code> (#6011) method to place trap opcodes out of line. This does actually change the golden tests, and is contained to the second commit.</p>\n<p>Lastly, the <code>defer_trap</code> change exposed a bug in our lowering of <code>br_table</code>. Previously we were emitting islands right before the jump table targets, but crucially <em>after</em> calculating the jump offset. This meant that if the island were actually emitted, we could jump right into the middle of it!</p>\n<p>This was exposed by the <code>defer_trap</code> change since the test case would emit a trap before a huge <code>br_table</code>, forcing the island, and then jump into offset 0, which actually ended up being the trap opcode instead of the branch target.</p>\n<p>We now emit the island at the start of the <code>br_table</code> sequence instead of in the middle.</p>\n</blockquote>",
        "id": 391164987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694782876
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391164990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694782877
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391164992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694782877
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR cleans up our trap instructions in the backend. We have 2 \"TrapIf\" style instructions. One that compares against zero, and a second that does any integer comparison. This PR does a couple of changes.</p>\n<p>Merge both <code>TrapIf</code> and <code>TrapIfC</code>. The new <code>TrapIf</code> instruction allows trapping with any integer condition. This is the first commit, and it does not change any of the emitted instruction sequences, just our printing.</p>\n<p>Use the new <code>MachBuffer::defer_trap</code> (#6011) method to place trap opcodes out of line. This does actually change the golden tests, and is contained to the second commit.</p>\n<p>Lastly, the <code>defer_trap</code> change exposed a bug in our lowering of <code>br_table</code>. Previously we were emitting islands right before the jump table targets, but crucially <em>after</em> calculating the jump offset. This meant that if the island were actually emitted, we could jump right into the middle of it!</p>\n<p>This was exposed by the <code>defer_trap</code> change since the test case would emit a trap before a huge <code>br_table</code>, forcing the island, and then jump into the first <code>br_table</code> target, which actually ended up being the trap opcode instead of the branch target.</p>\n<p>We now emit the island at the start of the <code>br_table</code> sequence instead of in the middle.</p>\n</blockquote>",
        "id": 391166884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694783363
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR cleans up our trap instructions in the backend. We have 2 \"TrapIf\" style instructions. One that compares against zero, and a second that does any integer comparison. This PR does a couple of changes.</p>\n<p>Merge both <code>TrapIf</code> and <code>TrapIfC</code>. The new <code>TrapIf</code> instruction allows trapping with any integer condition. This is the first commit, and it does not change any of the emitted instruction sequences, just our printing.</p>\n<p>Use the new <code>MachBuffer::defer_trap</code> (#6011) method to place trap opcodes out of line. This does actually change the golden tests, and is contained to the second commit.</p>\n<p>Lastly, the <code>defer_trap</code> change exposed a bug in our lowering of <code>br_table</code>. Previously we were emitting islands right before the jump table targets, but crucially <em>after</em> calculating the jump offset. This meant that if the island were actually emitted, we could jump right into the middle of it!</p>\n<p>This was exposed by the <code>defer_trap</code> change since the test case would emit a trap before a huge <code>br_table</code>, forcing the island, and then jump into the first <code>br_table</code> target, which actually ended up being the trap opcode instead of the intended branch target.</p>\n<p>We now emit the island at the start of the <code>br_table</code> sequence instead of in the middle.</p>\n</blockquote>",
        "id": 391170176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694784325
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#pullrequestreview-1629217645\">PR review</a>.</p>",
        "id": 391200891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791687
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#pullrequestreview-1629217645\">PR review</a>.</p>",
        "id": 391200892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791687
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#discussion_r1327457213\">PR review comment</a>:</p>\n<blockquote>\n<p>This is confusing me a bit as <code>trapif</code> seems to trap if the condition succeeds, so the condition here is that if the input is not equal to zero this is trapping, asserting the register is zero. The function, however, is intended to trap if the register is zero.</p>\n<p>Should the helper perhaps be <code>trapnz</code>?</p>\n</blockquote>",
        "id": 391200893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791687
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#discussion_r1327457588\">PR review comment</a>:</p>\n<blockquote>\n<p>Along the lines of the above, should this perhaps become a <code>trapz</code> helper?</p>\n</blockquote>",
        "id": 391200894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791687
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391354001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694856235
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#pullrequestreview-1629939788\">PR review</a>.</p>",
        "id": 391354096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694856286
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047#discussion_r1327937640\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, looks like I got a bit confused here. Thanks for catching this!</p>\n</blockquote>",
        "id": 391354098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694856287
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391362633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694860943
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391759816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695064154
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7047\">PR #7047</a>.</p>",
        "id": 391770413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695069122
    }
]