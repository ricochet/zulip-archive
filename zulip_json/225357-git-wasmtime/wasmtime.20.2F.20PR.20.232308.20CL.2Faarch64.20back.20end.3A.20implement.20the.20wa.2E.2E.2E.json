[
    {
        "content": "<p>julian-seward1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a> from <code>arm64-simd-bitmask</code> to <code>main</code>:</p>\n<blockquote>\n<p>The <code>bitmask.{8x16,16x8,32x4}</code> instructions do not map neatly to any single<br>\nAArch64 SIMD instruction, and instead need a sequence of around ten<br>\ninstructions.  Because of this, this patch is somewhat longer and more complex<br>\nthan it would be for (eg) x64.</p>\n<p>Main changes are:</p>\n<ul>\n<li>\n<p>the relevant testsuite test (<code>simd_boolean.wast</code>) has been enabled.</p>\n</li>\n<li>\n<p>at the CLIF level, add a new instruction <code>vhigh_bits</code>, into which these wasm<br>\n  instructions are to be translated.</p>\n</li>\n<li>\n<p>in the wasm-&gt;CLIF translation (<a href=\"http://code_translator.rs\">code_translator.rs</a>), translate into<br>\n<code>vhigh_bits</code>.  This is straightforward.</p>\n</li>\n<li>\n<p>in the CLIF-&gt;AArch64 translation (<a href=\"http://lower_inst.rs\">lower_inst.rs</a>), translate <code>vhigh_bits</code><br>\n  into equivalent sequences of AArch64 instructions.  There is a different<br>\n  sequence for each of the <code>{8x16, 16x8, 32x4}</code> variants.</p>\n</li>\n</ul>\n<p>All other changes are AArch64-specific, and add instruction definitions needed<br>\nby the previous step:</p>\n<ul>\n<li>\n<p>Add two new families of AArch64 instructions: <code>VecShiftImm</code> (vector shift by<br>\n  immediate) and <code>VecExtract</code> (effectively a double-length vector shift)</p>\n</li>\n<li>\n<p>To the existing AArch64 family <code>VecRRR</code>, add a <code>zip1</code> variant.  To the<br>\n<code>VecLanesOp</code> family add an <code>addv</code> variant.</p>\n</li>\n<li>\n<p>Add supporting code for the above changes to AArch64 instructions:</p>\n<ul>\n<li>getting the register uses (<code>aarch64_get_regs</code>)</li>\n<li>mapping the registers (<code>aarch64_map_regs</code>)</li>\n<li>printing instructions</li>\n<li>\n<p>emitting instructions (<code>impl MachInstEmit for Inst</code>).  The handling of<br>\n<code>VecShiftImm</code> is a bit complex.</p>\n</li>\n<li>\n<p>emission tests for new instructions and variants.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214195069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603377023
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a> from <code>arm64-simd-bitmask</code> to <code>main</code>:</p>\n<blockquote>\n<p>The <code>bitmask.{8x16,16x8,32x4}</code> instructions do not map neatly to any single<br>\nAArch64 SIMD instruction, and instead need a sequence of around ten<br>\ninstructions.  Because of this, this patch is somewhat longer and more complex<br>\nthan it would be for (eg) x64.</p>\n<p>Main changes are:</p>\n<ul>\n<li>\n<p>the relevant testsuite test (<code>simd_boolean.wast</code>) has been enabled.</p>\n</li>\n<li>\n<p>at the CLIF level, add a new instruction <code>vhigh_bits</code>, into which these wasm<br>\n  instructions are to be translated.</p>\n</li>\n<li>\n<p>in the wasm-&gt;CLIF translation (<a href=\"http://code_translator.rs\">code_translator.rs</a>), translate into<br>\n<code>vhigh_bits</code>.  This is straightforward.</p>\n</li>\n<li>\n<p>in the CLIF-&gt;AArch64 translation (<a href=\"http://lower_inst.rs\">lower_inst.rs</a>), translate <code>vhigh_bits</code><br>\n  into equivalent sequences of AArch64 instructions.  There is a different<br>\n  sequence for each of the <code>{8x16, 16x8, 32x4}</code> variants.</p>\n</li>\n</ul>\n<p>All other changes are AArch64-specific, and add instruction definitions needed<br>\nby the previous step:</p>\n<ul>\n<li>\n<p>Add two new families of AArch64 instructions: <code>VecShiftImm</code> (vector shift by<br>\n  immediate) and <code>VecExtract</code> (effectively a double-length vector shift)</p>\n</li>\n<li>\n<p>To the existing AArch64 family <code>VecRRR</code>, add a <code>zip1</code> variant.  To the<br>\n<code>VecLanesOp</code> family add an <code>addv</code> variant.</p>\n</li>\n<li>\n<p>Add supporting code for the above changes to AArch64 instructions:</p>\n<ul>\n<li>getting the register uses (<code>aarch64_get_regs</code>)</li>\n<li>mapping the registers (<code>aarch64_map_regs</code>)</li>\n<li>printing instructions</li>\n<li>\n<p>emitting instructions (<code>impl MachInstEmit for Inst</code>).  The handling of<br>\n<code>VecShiftImm</code> is a bit complex.</p>\n</li>\n<li>\n<p>emission tests for new instructions and variants.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214201005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603379427
    },
    {
        "content": "<p><strong>julian-seward1</strong> requested <a href=\"https://github.com/yurydelendik\">yurydelendik</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a>.</p>",
        "id": 214206667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603381778
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-514953817\">PR Review</a>.</p>",
        "id": 214221199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388235
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-514953817\">PR Review</a>.</p>",
        "id": 214221200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388235
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510330204\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Please, use <code>lower_constant_f128()</code>. <code>lower_splat_const()</code> would be even better, but it won't be available until #2310 is merged.</p>\n</blockquote>",
        "id": 214221201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388235
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510336102\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Same comment about <code>Inst::MovToFpu</code>.</p>\n</blockquote>",
        "id": 214221202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388235
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510340596\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This should be just <code>Inst::MovToFpu</code>. I still think that the constant should be handled in <code>lower_constant_f128()</code> - we can add a special case for it, since we know that it is always going to be used for bitmask extraction, but we can do that later.</p>\n</blockquote>",
        "id": 214221203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388235
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a> from <code>arm64-simd-bitmask</code> to <code>main</code>:</p>\n<blockquote>\n<p>The <code>bitmask.{8x16,16x8,32x4}</code> instructions do not map neatly to any single<br>\nAArch64 SIMD instruction, and instead need a sequence of around ten<br>\ninstructions.  Because of this, this patch is somewhat longer and more complex<br>\nthan it would be for (eg) x64.</p>\n<p>Main changes are:</p>\n<ul>\n<li>\n<p>the relevant testsuite test (<code>simd_boolean.wast</code>) has been enabled.</p>\n</li>\n<li>\n<p>at the CLIF level, add a new instruction <code>vhigh_bits</code>, into which these wasm<br>\n  instructions are to be translated.</p>\n</li>\n<li>\n<p>in the wasm-&gt;CLIF translation (<a href=\"http://code_translator.rs\">code_translator.rs</a>), translate into<br>\n<code>vhigh_bits</code>.  This is straightforward.</p>\n</li>\n<li>\n<p>in the CLIF-&gt;AArch64 translation (<a href=\"http://lower_inst.rs\">lower_inst.rs</a>), translate <code>vhigh_bits</code><br>\n  into equivalent sequences of AArch64 instructions.  There is a different<br>\n  sequence for each of the <code>{8x16, 16x8, 32x4}</code> variants.</p>\n</li>\n</ul>\n<p>All other changes are AArch64-specific, and add instruction definitions needed<br>\nby the previous step:</p>\n<ul>\n<li>\n<p>Add two new families of AArch64 instructions: <code>VecShiftImm</code> (vector shift by<br>\n  immediate) and <code>VecExtract</code> (effectively a double-length vector shift)</p>\n</li>\n<li>\n<p>To the existing AArch64 family <code>VecRRR</code>, add a <code>zip1</code> variant.  To the<br>\n<code>VecLanesOp</code> family add an <code>addv</code> variant.</p>\n</li>\n<li>\n<p>Add supporting code for the above changes to AArch64 instructions:</p>\n<ul>\n<li>getting the register uses (<code>aarch64_get_regs</code>)</li>\n<li>mapping the registers (<code>aarch64_map_regs</code>)</li>\n<li>printing instructions</li>\n<li>\n<p>emitting instructions (<code>impl MachInstEmit for Inst</code>).  The handling of<br>\n<code>VecShiftImm</code> is a bit complex.</p>\n</li>\n<li>\n<p>emission tests for new instructions and variants.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214221413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388334
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-514977056\">PR Review</a>.</p>",
        "id": 214222897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388941
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510348442\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The code sequences here were chosen in part so as to be as close as feasible to what the SM wasm Baseline compiler generates.  I would be happy to use the improved constant-generation facilities as provided by #2310, but would prefer to make that change only once it is landed and stable.</p>\n</blockquote>",
        "id": 214222899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603388941
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-514980792\">PR Review</a>.</p>",
        "id": 214223601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603389223
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510351304\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FYI in #2310 <code>lower_constant_f128()</code> generates exactly the same sequence.</p>\n</blockquote>",
        "id": 214223602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603389223
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-515125654\">PR Review</a>.</p>",
        "id": 214254628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603404887
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-515125654\">PR Review</a>.</p>",
        "id": 214254629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603404887
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510462695\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Shouldn't this be <code>TxN</code>? <code>Any128</code> could be a scalar if I am not mistaken.</p>\n</blockquote>",
        "id": 214254630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603404887
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510471577\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Similarly here - value of <code>imm4</code>?</p>\n</blockquote>",
        "id": 214254631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603404887
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510463979\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps add the values of <code>size</code>, <code>is_shr</code>, and <code>imm</code> to the message? It should make it easier to diagnose panics.</p>\n</blockquote>",
        "id": 214254632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603404887
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-515125654\">PR Review</a>.</p>",
        "id": 214254826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603405023
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-515202785\">PR Review</a>.</p>",
        "id": 214262439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603412180
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#pullrequestreview-515235032\">PR Review</a>.</p>",
        "id": 214267801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603419723
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308#discussion_r510558101\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I added a FIXME note in the <code>Opcode::VhighBits</code> lowering rule that refers to #2310.  That comment also already refers to #2296.</p>\n</blockquote>",
        "id": 214267803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603419724
    },
    {
        "content": "<p>julian-seward1 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a> from <code>arm64-simd-bitmask</code> to <code>main</code>:</p>\n<blockquote>\n<p>The <code>bitmask.{8x16,16x8,32x4}</code> instructions do not map neatly to any single<br>\nAArch64 SIMD instruction, and instead need a sequence of around ten<br>\ninstructions.  Because of this, this patch is somewhat longer and more complex<br>\nthan it would be for (eg) x64.</p>\n<p>Main changes are:</p>\n<ul>\n<li>\n<p>the relevant testsuite test (<code>simd_boolean.wast</code>) has been enabled.</p>\n</li>\n<li>\n<p>at the CLIF level, add a new instruction <code>vhigh_bits</code>, into which these wasm<br>\n  instructions are to be translated.</p>\n</li>\n<li>\n<p>in the wasm-&gt;CLIF translation (<a href=\"http://code_translator.rs\">code_translator.rs</a>), translate into<br>\n<code>vhigh_bits</code>.  This is straightforward.</p>\n</li>\n<li>\n<p>in the CLIF-&gt;AArch64 translation (<a href=\"http://lower_inst.rs\">lower_inst.rs</a>), translate <code>vhigh_bits</code><br>\n  into equivalent sequences of AArch64 instructions.  There is a different<br>\n  sequence for each of the <code>{8x16, 16x8, 32x4}</code> variants.</p>\n</li>\n</ul>\n<p>All other changes are AArch64-specific, and add instruction definitions needed<br>\nby the previous step:</p>\n<ul>\n<li>\n<p>Add two new families of AArch64 instructions: <code>VecShiftImm</code> (vector shift by<br>\n  immediate) and <code>VecExtract</code> (effectively a double-length vector shift)</p>\n</li>\n<li>\n<p>To the existing AArch64 family <code>VecRRR</code>, add a <code>zip1</code> variant.  To the<br>\n<code>VecLanesOp</code> family add an <code>addv</code> variant.</p>\n</li>\n<li>\n<p>Add supporting code for the above changes to AArch64 instructions:</p>\n<ul>\n<li>getting the register uses (<code>aarch64_get_regs</code>)</li>\n<li>mapping the registers (<code>aarch64_map_regs</code>)</li>\n<li>printing instructions</li>\n<li>\n<p>emitting instructions (<code>impl MachInstEmit for Inst</code>).  The handling of<br>\n<code>VecShiftImm</code> is a bit complex.</p>\n</li>\n<li>\n<p>emission tests for new instructions and variants.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214268740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603421450
    },
    {
        "content": "<p>julian-seward1 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2308\">PR #2308</a>.</p>",
        "id": 214270035,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603423587
    }
]