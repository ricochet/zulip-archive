[
    {
        "content": "<p>zzjas opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973\">issue #2973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"non_empty_file.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_RDWR</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">stat</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Before fallocate:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fstat</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"size is: %lld</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">st_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">posix_fallocate</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"posix_fallocate returns %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"error is: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"After fallocate:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fstat</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"size is: %lld</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">st_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">non_empty_file</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the C program with the clang from wasi-sdk and run it with wasmtime on macOS.</p>\n<h3>Expected Results</h3>\n<p>For posix_fallocate(int fd, off_t offset, off_t len), POSIX manual says \"If the size of the file is less than offset+len, then the file is increased to this size; otherwise the file size is left unchanged.\"</p>\n<h3>Actual Results</h3>\n<p>When offset+len &lt; file size, wasmtime will keep the file size unchanged on Linux(Ubuntu), but will truncate the file on macOS(Mojave).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Mac OS X 10.14.6</p>\n<p>Architecture: x86</p>\n<p>CC: @deian<br>\n</p>\n</blockquote>",
        "id": 241985130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623185845
    },
    {
        "content": "<p>zzjas labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973\">issue #2973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">stat</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"non_empty_file.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_RDWR</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">stat</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Before fallocate:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fstat</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"size is: %lld</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">st_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">posix_fallocate</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"posix_fallocate returns %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"error is: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"After fallocate:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fstat</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"size is: %lld</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">st_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">non_empty_file</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>Compile the C program with the clang from wasi-sdk and run it with wasmtime on macOS.</p>\n<h3>Expected Results</h3>\n<p>For posix_fallocate(int fd, off_t offset, off_t len), POSIX manual says \"If the size of the file is less than offset+len, then the file is increased to this size; otherwise the file size is left unchanged.\"</p>\n<h3>Actual Results</h3>\n<p>When offset+len &lt; file size, wasmtime will keep the file size unchanged on Linux(Ubuntu), but will truncate the file on macOS(Mojave).</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.26.0</p>\n<p>Operating system: Mac OS X 10.14.6</p>\n<p>Architecture: x86</p>\n<p>CC: @deian<br>\n</p>\n</blockquote>",
        "id": 241985131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623185845
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973#issuecomment-857236101\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973\">issue #2973</a>:</p>\n<blockquote>\n<p>Thanks for the report! It seems there isn't a non-racy way to implement this aspect of <code>posix_fallocate</code> on macOS. I expect we'll need to remove <code>posix_fallocate</code> from WASI entirely. I've [filed an issue in wasi-filesystem[(<a href=\"https://github.com/WebAssembly/wasi-filesystem/issues/19\">https://github.com/WebAssembly/wasi-filesystem/issues/19</a>) to track this.</p>\n</blockquote>",
        "id": 241997568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623192494
    },
    {
        "content": "<p>sunfishcode edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973#issuecomment-857236101\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2973\">issue #2973</a>:</p>\n<blockquote>\n<p>Thanks for the report! It seems there isn't a non-racy way to implement this aspect of <code>posix_fallocate</code> on macOS. I expect we'll need to remove <code>posix_fallocate</code> from WASI entirely. I've <a href=\"https://github.com/WebAssembly/wasi-filesystem/issues/19\">filed an issue in wasi-filesystem</a> to track this.</p>\n</blockquote>",
        "id": 296147182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661873478
    }
]