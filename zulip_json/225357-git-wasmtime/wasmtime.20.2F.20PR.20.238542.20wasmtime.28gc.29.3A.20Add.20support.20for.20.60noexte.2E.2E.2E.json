[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542\">PR #8542</a> from <code>fitzgen:eq-and-noextern-heap-types</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>With this commit, we now support all GC heap types.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 436938238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714761180
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542\">PR #8542</a>.</p>",
        "id": 436938241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714761181
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542\">PR #8542</a>.</p>",
        "id": 436938242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714761181
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038821420\">PR review</a>.</p>",
        "id": 436941645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762587
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038821420\">PR review</a>.</p>",
        "id": 436941646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589619564\">PR review comment</a>:</p>\n<blockquote>\n<p>Out of curiosity is the term \"internal\" used at the spec level as well? It makes sense to mirror \"external\" but I figured these'd be called \"any types\" or... something along those lines. Anyway I'm just musing here.</p>\n</blockquote>",
        "id": 436941647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589621190\">PR review comment</a>:</p>\n<blockquote>\n<p>The word \"with\" here makes me think that cats are replaced with animals, but I think you're intending the opposite here, so perhaps something like \"s/with/for/\"? </p>\n</blockquote>",
        "id": 436941649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589623194\">PR review comment</a>:</p>\n<blockquote>\n<p>Wait sort of unrelated question on this, in the type section you can explicitly list the supertype and there's also <code>is_final</code> which say \"no one else can subtype this\". With the logic you're explaining below though that's not quite right is it? An <code>is_final</code> function type can still be subtyped so long as you align the parameters correctly?</p>\n<p>(totally unrelated to this PR I'm just trying to reconcile two different ways I've understood how subtyping is done in wasm)</p>\n</blockquote>",
        "id": 436941650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762588
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589620044\">PR review comment</a>:</p>\n<blockquote>\n<p>Ascii Art Diagrams: The Return Of The King</p>\n</blockquote>",
        "id": 436941651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714762588
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038896103\">PR review</a>.</p>",
        "id": 436948499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765388
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589663368\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I've seen it around, eg <a href=\"https://github.com/WebAssembly/gc/blob/main/proposals/gc/MVP.md#heap-types\">https://github.com/WebAssembly/gc/blob/main/proposals/gc/MVP.md#heap-types</a></p>\n<p>Also turning an <code>externref</code> into an <code>anyref</code> is called \"internalizing\"</p>\n</blockquote>",
        "id": 436948500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765388
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038896276\">PR review</a>.</p>",
        "id": 436948517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765397
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589663469\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"crown\" class=\"emoji emoji-1f451\" role=\"img\" title=\"crown\">:crown:</span> </p>\n</blockquote>",
        "id": 436948518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714765397
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038918351\">PR review</a>.</p>",
        "id": 436950876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714766449
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589676826\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah honestly I don't fully understand how all the dots connect in the way that the spec is written/defined, I just know what the intended behavior is.</p>\n<p>FWIW, we don't supertypes and finality yet, but this code (and I suppose these docs) will need to be updated at that point.</p>\n</blockquote>",
        "id": 436950877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714766449
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#pullrequestreview-2038934987\">PR review</a>.</p>",
        "id": 436952412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714767225
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542#discussion_r1589686468\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>With the logic you're explaining below though that's not quite right is it? An <code>is_final</code> function type can still be subtyped so long as you align the parameters correctly?</p>\n</blockquote>\n<p>And to be clear, yeah you can't subtype something (including a func type) that is declared final.</p>\n</blockquote>",
        "id": 436952415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714767225
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8542\">PR #8542</a>.</p>",
        "id": 436955354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714768686
    }
]