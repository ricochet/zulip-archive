[
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732\">issue #9732</a>:</p>\n<blockquote>\n<p>The Wasm Tail Call proposal is considered Tier 1 according to <a href=\"https://docs.wasmtime.dev/stability-tiers.html#tier-1\">Wasmtime's Tiers of support</a>. </p>\n<p>Winch currently doesn't support this proposal.</p>\n<ul>\n<li>[ ] <code>return_call</code></li>\n<li>[ ] <code>return_call_indirect</code></li>\n</ul>\n</blockquote>",
        "id": 492124453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736176712
    },
    {
        "content": "<p>saulecabrera assigned saulecabrera to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732\">issue #9732</a>.</p>",
        "id": 494257698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073469
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732#issuecomment-2598531711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732\">issue #9732</a>:</p>\n<blockquote>\n<p>@saulecabrera you can assign me to that <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 494376783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737125342
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732\">issue #9732</a>:</p>\n<blockquote>\n<p>The Wasm Tail Call proposal is considered Tier 1 according to <a href=\"https://docs.wasmtime.dev/stability-tiers.html#tier-1\">Wasmtime's Tiers of support</a>. </p>\n<p>Winch currently doesn't support this proposal.</p>\n<ul>\n<li>[ ] <code>return_call</code> @MarinPostma</li>\n<li>[ ] <code>return_call_indirect</code> @MarinPostma </li>\n</ul>\n</blockquote>",
        "id": 494377032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737125420
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732#issuecomment-2600949527\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9732\">issue #9732</a>:</p>\n<blockquote>\n<p>@saulecabrera </p>\n<p>Did you have a sketch of a plan on how to implement that already?</p>\n<p>I did some homework this weekend, trying to find a path toward tail calls. I think we could do something like described in this post about <a href=\"https://v8.dev/blog/wasm-tail-call\">v8 baseline compiler</a>, or as initially implemented <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6635\">in cranelift</a>, basically:</p>\n<ul>\n<li>set up the frame as if we were about to perform a normal call</li>\n<li><code>memcpy</code> the frame down to override the caller frame</li>\n<li>jump to the callee entry-point</li>\n</ul>\n<p>However this is over simplistic. There are many things getting in our way. Here's my understanding of the situation, thus far:</p>\n<p>1) The callee and the caller may not require the same amount of stack space for their arguments. In the Winch calling convention, it is the caller that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/codegen/call.rs#L103-L112\">cleans up the stack space for the arguments</a>. This is an issue for tail calls, because the caller doesn't know ahead of time how much stack space will need to be cleaned up when the callee returns. cranelift <code>TailCall</code> convention solves that by requiring that the callee <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/tail-calls.md#new-wasm-calling-conventions-in-cranelift\">cleans-up it's stack space</a>. I suppose there are alternatives to let the caller know dynamically the amount of stack space to pop on cleanup, but in any case, it seems to me that we need a calling convention that supports that.<br>\n2) The <code>ret_area</code> is inherited from the caller, rather and allocated in the caller stack. This is easy to do: we can get it from the caller's initial control frame. (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/visitor.rs#L1899\">there</a>). This works, because the callee must have the same return as the caller.<br>\n3) We need to emit a jump to the callee, rather than a call, because we must not push a return address, since the state is already set up during the return_call preparation. Winch relies of cranelift to emit relocs for the callee address. The story around converting a function ref to a <code>MachLabel</code> that can be used for a jump is not entirely clear to me yet. Alternatively, we could pop the FP back into it's register and let <code>call</code> push it back (this is what v8 baseline does).<br>\n4) Cranelift has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/2eb65138e9e0f331776d7d3747a47117f706d406/cranelift/codegen/src/isa/x64/inst/emit.rs?plain=1#L1670\"><code>Inst::CallReturn*</code></a> macro-instruction, but it's not clear to me if we can use it, since it emits code specific to cranelift <code>Tail</code> calling convention.</p>\n<p>I am glancing over a lot of things here, obviously. My principal concern is with <code>1)</code> right now; I don't see a way forward without addressing it.</p>\n</blockquote>",
        "id": 494659761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737307161
    }
]