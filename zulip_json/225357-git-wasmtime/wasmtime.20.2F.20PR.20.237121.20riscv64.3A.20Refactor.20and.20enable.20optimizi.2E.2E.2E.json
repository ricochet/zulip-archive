[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/afonso360\">afonso360</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121\">PR #7121</a>.</p>",
        "id": 394253202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696189015
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121\">PR #7121</a> from <code>alexcrichton:rv64-extends</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR is a long series of commits which is a culmination of some investigation and poking around I've been doing after taking a look at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7113\">https://github.com/bytecodealliance/wasmtime/pull/7113</a>. Previously there were quite a few entry points into the core <code>extend</code> function in the riscv64 backend which all had a number of different concerns handled and felt, at least from my perspective, a bit confusing to follow. The goal of this refactoring was to canonicalize around two helper functions, <code>zext</code> and <code>sext</code>, which take no arguments except a <code>Value</code>. The functions would then internally do whatever is necessary to extend to the full register width and an <code>XReg</code> would be returned.</p>\n<p>This required quite a bit of refactoring and changes to the previous code such as:</p>\n<ul>\n<li>Handling of 128-bit values was pushed into callers that needed it to avoid needing to have all callers deal with the possibility of 128-bit values.</li>\n<li>Many functions were moved around to be able to pass in a <code>Value</code> vs a <code>XReg Type</code> combo. This involved a lot of movement from <code>inst.isle</code> into <code>lower.isle</code> as well as code motion.</li>\n<li>Many helpers which called each other now bottom out much more quickly or have a little bit more duplication in <code>lower.isle</code>. Personally I felt the duplication was relatively small and ok, but other reviews are welcome!</li>\n<li>All extension-related helpers are removed now except <code>zext</code> and <code>sext</code> which internally have all conditional logic as necessary.</li>\n</ul>\n<p>The final culmination of this PR is that the assembly output probably doesn't change all that much for the time being. There's now a clear place, however, to skip sign extension based on the structure of a <code>Value</code>. For example I'd like to add support for the <code>addw</code> instruction which would skip the need to sign-extend the result of a 32-bit add. Similarly for other 32-bit operations as necessary. This is all in preparation for optimizing <code>icmp</code> which always has to sign extend so the goal in theory is to remove as many sign extension as possible.</p>\n</blockquote>",
        "id": 394253203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696189015
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121\">PR #7121</a>.</p>",
        "id": 394253204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696189015
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121\">PR #7121</a>.</p>",
        "id": 394253206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696189015
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121#pullrequestreview-1652537290\">PR review</a>:</p>\n<blockquote>\n<p>I really like this! Thanks for these cleanups!</p>\n<p>I like the <code>val_already_extended</code> approach, and I think we may be able to fit a few more ops in it like <code>fcmp</code>, <code>{s,u}load{8,16,32}</code> and <code>bmask</code> (with some restrictions)! I might do a follow up PR if you don't do it first.</p>\n<blockquote>\n<p>For example I'd like to add support for the addw instruction which would skip the need to sign-extend the result of a 32-bit add. Similarly for other 32-bit operations as necessary.</p>\n</blockquote>\n<p>I should note that we already have support for these operations, but they are all in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/270e92225da3acb5b0a583546b2d4598cb59ae2a/cranelift/codegen/src/isa/riscv64/lower.isle#L764-L795\"><code>sextend</code> part of <code>lower.isle</code></a>.</p>\n<p>Although I think we might be missing some, like the <code>rolw</code> or <code>rorw</code> that sign extend the results.</p>\n<p>And looking that the <code>uextend</code> branch we are also missing a bunch of them like <code>cpopw</code> / <code>clzw</code> / <code>ctzw</code>.</p>\n<p>I don't know if it's better to have them next to <code>{s,u}extend</code> or their original ops. </p>\n</blockquote>",
        "id": 394397349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696245012
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121#pullrequestreview-1652537290\">PR review</a>:</p>\n<blockquote>\n<p>I really like this! Thanks for these cleanups!</p>\n<p>I like the <code>val_already_extended</code> approach, and I think we may be able to fit a few more ops in it like <code>fcmp</code>, <code>{s,u}load{8,16,32}</code> and <code>bmask</code> (with some restrictions)! I might do a follow up PR if you don't do it first.</p>\n<blockquote>\n<p>For example I'd like to add support for the addw instruction which would skip the need to sign-extend the result of a 32-bit add. Similarly for other 32-bit operations as necessary.</p>\n</blockquote>\n<p>I should note that we already have support for these operations, but they are all in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/270e92225da3acb5b0a583546b2d4598cb59ae2a/cranelift/codegen/src/isa/riscv64/lower.isle#L764-L795\"><code>sextend</code> part of <code>lower.isle</code></a>.</p>\n<p>Although I think we might be missing some, like the <code>rolw</code> or <code>rorw</code> that sign extend the results.</p>\n<p>And looking that the <code>uextend</code> branch we are also missing a bunch of them like <code>cpopw</code> / <code>clzw</code> / <code>ctzw</code>.</p>\n<p>I don't know if it's better to have them next to <code>{s,u}extend</code> or their original ops since it might be easy to miss them where they are right now.</p>\n</blockquote>",
        "id": 394397788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696245173
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121#pullrequestreview-1652537290\">PR review</a>:</p>\n<blockquote>\n<p>I really like this! Thanks for these cleanups!</p>\n<p>I like the <code>val_already_extended</code> approach, and I think we may be able to fit a few more ops in it like <code>fcmp</code>, <code>{s,u}load{8,16,32}</code> and <code>bmask</code> (with some restrictions)! I might do a follow up PR if you don't do it first.</p>\n<blockquote>\n<p>For example I'd like to add support for the addw instruction which would skip the need to sign-extend the result of a 32-bit add. Similarly for other 32-bit operations as necessary.</p>\n</blockquote>\n<p>I should note that we already have support for these operations, but they are all in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/270e92225da3acb5b0a583546b2d4598cb59ae2a/cranelift/codegen/src/isa/riscv64/lower.isle#L764-L795\"><code>sextend</code> part of <code>lower.isle</code></a>.</p>\n<p>Although I think we might be missing some, like the <code>rolw</code> or <code>rorw</code> that sign extend the results.</p>\n<p>And looking at the <code>uextend</code> rules we are also missing a bunch of them like <code>cpopw</code> / <code>clzw</code> / <code>ctzw</code>.</p>\n<p>I don't know if it's better to have them next to <code>{s,u}extend</code> or their original ops since it might be easy to miss them where they are right now.</p>\n</blockquote>",
        "id": 394397883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696245197
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121#pullrequestreview-1652537290\">PR review</a>:</p>\n<blockquote>\n<p>I really like this! Thanks for these cleanups!</p>\n<p>I like the <code>val_already_extended</code> approach, and I think we may be able to fit a few more ops in it like <code>fcmp</code>, <code>{s,u}load{8,16,32}</code> and <code>bmask</code> (with some restrictions)! I might do a follow up PR if you don't do it first.</p>\n<blockquote>\n<p>For example I'd like to add support for the addw instruction which would skip the need to sign-extend the result of a 32-bit add. Similarly for other 32-bit operations as necessary.</p>\n</blockquote>\n<p>I should note that we already have support for these operations, but they are all in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/270e92225da3acb5b0a583546b2d4598cb59ae2a/cranelift/codegen/src/isa/riscv64/lower.isle#L764-L795\"><code>sextend</code> part of <code>lower.isle</code></a>.</p>\n<p>Although I think we might be missing some, like the <code>rolw</code> or <code>rorw</code> that sign extend the results.</p>\n<p>And looking at the <code>uextend</code> rules we are also missing a bunch of them like <code>cpopw</code> / <code>clzw</code> / <code>ctzw</code>.</p>\n<p>I don't know if it's better to have them next to <code>{s,u}extend</code> or their original ops since it might be easy to miss them where they are right now.</p>\n<hr>\n<p>Edit: Maybe we could add a <code>maybe_sextend</code> / <code>maybe_uextend</code> matcher and then these rules could be folded into the regular <code>$I32</code> rules.</p>\n</blockquote>",
        "id": 394398300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696245315
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7121\">PR #7121</a>.</p>",
        "id": 394478386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696266785
    }
]