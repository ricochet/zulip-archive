[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> from <code>compile-nested-modules</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to be the first of many in implementing the<br>\nmodule linking proposal. At this time this builds on #2059 so it<br>\nshouldn't land yet. The goal of this commit is to compile bare-bones<br>\nmodules which use module linking, e.g. those with nested modules.</p>\n<p>My hope with module linking is that almost everything in wasmtime only<br>\nneeds mild refactorings to handle it. The goal is that all per-module<br>\nstructures are still per-module and at the top level there's just a<br>\n<code>Vec</code> containing a bunch of modules. That's implemented currently where<br>\n<code>wasmtime::Module</code> contains <code>Arc&lt;[CompiledModule]&gt;</code> and an index of<br>\nwhich one it's pointing to. This should enable<br>\nserialization/deserialization of any module in a nested modules<br>\nscenario, no matter how you got it.</p>\n<p>Tons of features of the module linking proposal are missing from this<br>\ncommit. For example instantiation flat out doesn't work, nor does<br>\nimport/export of modules or instances. That'll be coming as future<br>\ncommits, but the purpose here is to start laying groundwork in Wasmtime<br>\nfor handling lots of modules in lots of places.</p>\n</blockquote>",
        "id": 205948339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596568560
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> from <code>compile-nested-modules</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to be the first of many in implementing the<br>\nmodule linking proposal. At this time this builds on #2059 so it<br>\nshouldn't land yet. The goal of this commit is to compile bare-bones<br>\nmodules which use module linking, e.g. those with nested modules.</p>\n<p>My hope with module linking is that almost everything in wasmtime only<br>\nneeds mild refactorings to handle it. The goal is that all per-module<br>\nstructures are still per-module and at the top level there's just a<br>\n<code>Vec</code> containing a bunch of modules. That's implemented currently where<br>\n<code>wasmtime::Module</code> contains <code>Arc&lt;[CompiledModule]&gt;</code> and an index of<br>\nwhich one it's pointing to. This should enable<br>\nserialization/deserialization of any module in a nested modules<br>\nscenario, no matter how you got it.</p>\n<p>Tons of features of the module linking proposal are missing from this<br>\ncommit. For example instantiation flat out doesn't work, nor does<br>\nimport/export of modules or instances. That'll be coming as future<br>\ncommits, but the purpose here is to start laying groundwork in Wasmtime<br>\nfor handling lots of modules in lots of places.</p>\n</blockquote>",
        "id": 215405153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604368942
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> from <code>compile-nested-modules</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to be the first of many in implementing the<br>\nmodule linking proposal. At this time this builds on #2059 so it<br>\nshouldn't land yet. The goal of this commit is to compile bare-bones<br>\nmodules which use module linking, e.g. those with nested modules.</p>\n<p>My hope with module linking is that almost everything in wasmtime only<br>\nneeds mild refactorings to handle it. The goal is that all per-module<br>\nstructures are still per-module and at the top level there's just a<br>\n<code>Vec</code> containing a bunch of modules. That's implemented currently where<br>\n<code>wasmtime::Module</code> contains <code>Arc&lt;[CompiledModule]&gt;</code> and an index of<br>\nwhich one it's pointing to. This should enable<br>\nserialization/deserialization of any module in a nested modules<br>\nscenario, no matter how you got it.</p>\n<p>Tons of features of the module linking proposal are missing from this<br>\ncommit. For example instantiation flat out doesn't work, nor does<br>\nimport/export of modules or instances. That'll be coming as future<br>\ncommits, but the purpose here is to start laying groundwork in Wasmtime<br>\nfor handling lots of modules in lots of places.</p>\n</blockquote>",
        "id": 215405852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604369518
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> as ready for review.</p>",
        "id": 215407050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604370719
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a>.</p>",
        "id": 215492642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604427941
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093#pullrequestreview-524663273\">PR Review</a>.</p>",
        "id": 215778290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604612699
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093#pullrequestreview-524663273\">PR Review</a>.</p>",
        "id": 215778291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604612699
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093#discussion_r518362155\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So this only includes nested submodules, not the top level module? Good to make this explicit in the comment.</p>\n</blockquote>",
        "id": 215778292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604612699
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093#pullrequestreview-525231330\">PR Review</a>.</p>",
        "id": 215857155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604674815
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093#discussion_r518806280\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah good point, but yes, this only includes the top-level module's modules (or whatever the current module is), basically just \"we found the <code>module</code> section in the wasm file\"</p>\n</blockquote>",
        "id": 215857158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604674815
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> from <code>compile-nested-modules</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to be the first of many in implementing the<br>\nmodule linking proposal. At this time this builds on #2059 so it<br>\nshouldn't land yet. The goal of this commit is to compile bare-bones<br>\nmodules which use module linking, e.g. those with nested modules.</p>\n<p>My hope with module linking is that almost everything in wasmtime only<br>\nneeds mild refactorings to handle it. The goal is that all per-module<br>\nstructures are still per-module and at the top level there's just a<br>\n<code>Vec</code> containing a bunch of modules. That's implemented currently where<br>\n<code>wasmtime::Module</code> contains <code>Arc&lt;[CompiledModule]&gt;</code> and an index of<br>\nwhich one it's pointing to. This should enable<br>\nserialization/deserialization of any module in a nested modules<br>\nscenario, no matter how you got it.</p>\n<p>Tons of features of the module linking proposal are missing from this<br>\ncommit. For example instantiation flat out doesn't work, nor does<br>\nimport/export of modules or instances. That'll be coming as future<br>\ncommits, but the purpose here is to start laying groundwork in Wasmtime<br>\nfor handling lots of modules in lots of places.</p>\n</blockquote>",
        "id": 215888803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604688984
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a> from <code>compile-nested-modules</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is intended to be the first of many in implementing the<br>\nmodule linking proposal. At this time this builds on #2059 so it<br>\nshouldn't land yet. The goal of this commit is to compile bare-bones<br>\nmodules which use module linking, e.g. those with nested modules.</p>\n<p>My hope with module linking is that almost everything in wasmtime only<br>\nneeds mild refactorings to handle it. The goal is that all per-module<br>\nstructures are still per-module and at the top level there's just a<br>\n<code>Vec</code> containing a bunch of modules. That's implemented currently where<br>\n<code>wasmtime::Module</code> contains <code>Arc&lt;[CompiledModule]&gt;</code> and an index of<br>\nwhich one it's pointing to. This should enable<br>\nserialization/deserialization of any module in a nested modules<br>\nscenario, no matter how you got it.</p>\n<p>Tons of features of the module linking proposal are missing from this<br>\ncommit. For example instantiation flat out doesn't work, nor does<br>\nimport/export of modules or instances. That'll be coming as future<br>\ncommits, but the purpose here is to start laying groundwork in Wasmtime<br>\nfor handling lots of modules in lots of places.</p>\n</blockquote>",
        "id": 215889075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604689098
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2093\">PR #2093</a>.</p>",
        "id": 215893091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604691151
    }
]