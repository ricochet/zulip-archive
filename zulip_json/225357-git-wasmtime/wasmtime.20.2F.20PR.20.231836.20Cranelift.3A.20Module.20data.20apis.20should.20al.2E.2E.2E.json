[
    {
        "content": "<p>carlokok opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 199976765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591452662
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-425744484\">PR Review</a>.</p>",
        "id": 199977772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591454071
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436273499\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add an assertion that it isn't a tls data object? Those only work for <code>StandardSection::Tls</code>.</p>\n</blockquote>",
        "id": 199977773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591454071
    },
    {
        "content": "<p>carlokok updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 200059589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591593818
    },
    {
        "content": "<p>carlokok updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 200129334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591636829
    },
    {
        "content": "<p>carlokok updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 200133554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591638994
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a>.</p>",
        "id": 200135972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640100
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-426501423\">PR Review</a>.</p>",
        "id": 200137536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-426501423\">PR Review</a>.</p>",
        "id": 200137537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436907499\">PR Review Comment</a>:</p>\n<blockquote>\n<p>idiomatic would be to just say <code>seg.to_owned()</code> rather than use <code>String::from</code>. Also, maybe this method should be named <code>set_segment_section</code>?</p>\n</blockquote>",
        "id": 200137538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436906269\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In Rust, we don't use assertions to indicate that the user provided bad input to a library function, instead we use the error type of the function's <code>Result</code>. In this case, we want to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">segment</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">datasection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">cranelift_module</span>::<span class=\"n\">ModuleError</span>::<span class=\"n\">Backend</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Custom section not supported by cranelift-faerie: `{}:{}`&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">segment</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">~~~</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 200137539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436908690\">PR Review Comment</a>:</p>\n<blockquote>\n<p>same as before, return an Err(ModuleError::Backend(anyhow!(...))) rather than assert here please.</p>\n</blockquote>",
        "id": 200137540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436907091\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>std::string::String</code> is always in scope as <code>String</code> so style would be to just say <code>String</code> here. Also, we should note in the comment what each member of the pair is for - I think they are for segment and section, right? should we make the field named <code>custom_segment_section</code> to reflect that? Is there ever a use case where you'd want to specify a section but not a segment (maybe you're letting a linker script determine segments from section names?)</p>\n</blockquote>",
        "id": 200137541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436908976\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think for the simplejit backend we'd be better off just ignoring the custom segment/section than throwing an error here.</p>\n</blockquote>",
        "id": 200137542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591640995
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-426518796\">PR Review</a>.</p>",
        "id": 200140268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642142
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436919820\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For mach-O files the linker is always responsible for picking the right segment. In fact the object files should only contain a single segment.</p>\n</blockquote>",
        "id": 200140269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642142
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-426520098\">PR Review</a>.</p>",
        "id": 200140522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642252
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436920897\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks @bjorn3. So it sounds like we should be specifying a custom section and a custom segment in two different fields.</p>\n</blockquote>",
        "id": 200140524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642252
    },
    {
        "content": "<p>carlokok submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-426521555\">PR Review</a>.</p>",
        "id": 200140790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642357
    },
    {
        "content": "<p>carlokok created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r436921848\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@bjorn3 maybe i misunderstand but this:<br>\nseg: __OBJC<br>\nsec: __image_info</p>\n<p>besides <br>\nseg: __DATA<br>\nsec __data</p>\n<p>isn't unusual on mach-o. (that said, segments are ignored on non mach-o afaik)</p>\n</blockquote>",
        "id": 200140791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591642358
    },
    {
        "content": "<p>philipc created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#discussion_r439663555\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>For mach-O files the linker is always responsible for picking the right segment. In fact the object files should only contain a single segment.</p>\n</blockquote>\n<p>My understanding is that the linker uses the segment name specified in the object file. Note that segment names appear in two places: in the segment and in the section. The linker ignores the first of these, but still uses the segment name in the section. It has to do this, because <code>__const</code> can appear in both <code>__TEXT</code> and <code>__DATA</code>.</p>\n</blockquote>",
        "id": 200730682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592000221
    },
    {
        "content": "<p>philipc submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836#pullrequestreview-430064598\">PR Review</a>.</p>",
        "id": 200730684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592000221
    },
    {
        "content": "<p>carlokok updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 200929598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592246805
    },
    {
        "content": "<p>carlokok updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a> from <code>feature/object_file_section</code> to <code>master</code>:</p>\n<blockquote>\n<p>This fixes #1640.</p>\n<p>What it does is two things:</p>\n<ul>\n<li>Expose a new api on the data context type to set the section of the current data item</li>\n<li>Emit it in the Object backend</li>\n</ul>\n<p>I have no idea how to write a testcase for this or if it's meaningful at all.<br>\nI don't know who can review this.</p>\n</blockquote>",
        "id": 201101280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592369319
    },
    {
        "content": "<p><strong>carlokok</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a>.</p>",
        "id": 201102969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592371794
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1836\">PR #1836</a>.</p>",
        "id": 201176666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1592416151
    }
]