[
    {
        "content": "<p>itsrainy edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366004544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694732
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1478168773\">PR review</a>:</p>\n<blockquote>\n<p>Seems right to me! I agree that tests are a good idea before merging but assuming those go okay then I think this is good.</p>\n</blockquote>",
        "id": 366008212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686696124
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228772871\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this and the other <code>mov</code> below be written like this? I'm not sure it makes any difference but it seems a little more clear to me if we can avoid using <code>.into()</code> so much. I'm also curious if there are other methods named perhaps <code>sub_rr</code> or <code>and_ir</code> for the other instructions in this sequence.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            self.asm.mov_rr(tmp, dst, size);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 366008285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686696153
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228848510\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm also curious if there are other methods named perhaps sub_rr or and_ir for the other instructions in this sequence.</p>\n</blockquote>\n<p>there are! I'll change those</p>\n</blockquote>",
        "id": 366022952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686704244
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366023087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686704329
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366220975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686756123
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366276701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686768517
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1480139585\">PR review</a>:</p>\n<blockquote>\n<p>Left one minor comment, but overall this looks great to me, thanks!</p>\n</blockquote>",
        "id": 366283244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770186
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1480139585\">PR review</a>:</p>\n<blockquote>\n<p>Left one minor comment, but overall this looks great to me, thanks!</p>\n</blockquote>",
        "id": 366283246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770186
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230061980\">PR review comment</a>:</p>\n<blockquote>\n<p>We currently have <code>impl From&lt;Reg&gt; for Gpr</code> and <code>impl From&lt;Reg&gt; for WritableGpr</code> so you could use those here if you wanted to reduce the boilerplate. </p>\n</blockquote>",
        "id": 366283249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770186
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1480125656\">PR review</a>.</p>",
        "id": 366285855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770970
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1480125656\">PR review</a>.</p>",
        "id": 366285856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770970
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230052289\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you add a comment that the fallback is based on <code>MacroAssembler::popcnt32</code> in <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h\">https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h</a>?</p>\n</blockquote>",
        "id": 366285857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770970
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230070081\">PR review comment</a>:</p>\n<blockquote>\n<p>I was pretty confused about why you didn't use <code>and_ir</code>, until I dug into the implementation enough to understand that x86 only supports 32-bit immediates for <code>and</code>, so doing it this way lets the underlying assembler decide whether to use <code>load_constant</code> into the scratch register or to emit the immediate operand inline.</p>\n<p>I don't know what to suggest but maybe there's a comment that could go here. Or maybe we should just assume that people reading this are more familiar with Winch idioms than I am. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>Also, it's a little unfortunate that in the 64-bit case, <code>masks[1]</code> gets loaded into the scratch register twice. It would be nice to avoid that, but it would clutter the implementation here and maybe that's not worth doing.</p>\n</blockquote>",
        "id": 366285858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770970
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230065479\">PR review comment</a>:</p>\n<blockquote>\n<p>This is perfectly reasonable as-is but it keeps bothering me that the constant masks are duplicated in this way. One alternative might be:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            let masks = [\n                0x5555555555555555, // m1\n                0x3333333333333333, // m2\n                0x0f0f0f0f0f0f0f0f, // m4\n                0x0101010101010101, // h01\n            ];\n            let (mask, shift_amt) = match size {\n                OperandSize::S64 =&gt; (u64::MAX as i64, 56u8),\n                OperandSize::S32 =&gt; (u32::MAX as i64, 24u8),\n            };\n</code></pre></div>\n<p>Then use e.g. <code>masks[0] &amp; mask</code>. (Maybe rename <code>mask</code> though.)</p>\n<p>Another approach is to generate the constants using bit-twiddling tricks. I don't think this is a _good_ idea but I spent enough time figuring out how it would work that I'm going to write it down anyway. You can divide <code>u64::MAX</code> or <code>u32::MAX</code> by certain constants to get these repeating patterns: specifically, <code>[0x3, 0x5, 0x11, 0xff]</code> to produce <code>[0x55..., 0x33..., 0x0f..., 0x01...]</code> respectively.</p>\n</blockquote>",
        "id": 366285859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686770970
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230085233\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Or maybe we should just assume that people reading this are more familiar with Winch idioms than I am. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>The scratch register has caused confusion, I agree. This is something that I'd like to improve, so I'm considering adding guards, which will hopefully make its usage traceable and more explicit. </p>\n</blockquote>",
        "id": 366288231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686771705
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230085762\">PR review comment</a>:</p>\n<blockquote>\n<p>I just haven't gotten to it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 366288424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686771747
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230086113\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I did have the thought about 0x333 getting loaded in twice, so I had briefly replaced the second <code>RegImm::imm(masks[0]).into()</code> with <code>regs::scratch().into()</code>, but that wouldn't work in the 32-bit case and then trying to work around that seemed like added complexity for not a lot of gain</p>\n</blockquote>",
        "id": 366288502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686771772
    },
    {
        "content": "<p>itsrainy edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230086113\">PR review comment</a>.</p>",
        "id": 366288561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686771789
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230090966\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think it would be terrible to unconditionally call <code>load_constant</code> here to put the <code>0x333...</code> mask in the scratch register, and use <code>and_rr</code> explicitly. It's one extra instruction in the 32-bit case, but it's only a move-immediate, and the generated code is shorter due to only emitting the constant once.</p>\n</blockquote>",
        "id": 366289646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686772113
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230091465\">PR review comment</a>:</p>\n<blockquote>\n<p>I thiiiink I'm inclined to keep it as is, though I don't feel too strongly about that. I initially had the 32-bit and 64-bit code as completely separate branches (this is what spidermonkey and cranelift do) and wasn't sure if I should even combine them in the first place. I kind of like the different constants being explicitly in the code, but I also see that using one to generate the other is tempting. Happy to go either way here</p>\n</blockquote>",
        "id": 366289726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686772143
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1230097148\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, I don't feel strongly about it either, so I'm good with leaving it as is. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 366290887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686772506
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366292305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686772959
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366292393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686772986
    },
    {
        "content": "<p>itsrainy merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366315404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686781234
    }
]