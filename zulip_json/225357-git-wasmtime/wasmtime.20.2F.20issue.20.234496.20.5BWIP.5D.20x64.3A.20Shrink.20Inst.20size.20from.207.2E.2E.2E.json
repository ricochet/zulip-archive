[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191738467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Would be really interested in sightglass benchmark results for this work when you get it in a good spot!</p>\n<p><a href=\"https://github.com/bytecodealliance/sightglass#comparing-a-feature-branch-to-main\">https://github.com/bytecodealliance/sightglass#comparing-a-feature-branch-to-main</a></p>\n</blockquote>",
        "id": 290405656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658423544
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191746904\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would be really interested in sightglass benchmark results for this work when you get it in a good spot!</p>\n<p><a href=\"https://github.com/bytecodealliance/sightglass#comparing-a-feature-branch-to-main\">https://github.com/bytecodealliance/sightglass#comparing-a-feature-branch-to-main</a></p>\n</blockquote>\n<p>Currently it shows a slowdown when running on the spidermonkey benchmark, but my guess is that it's from boxing <code>SyntheticAmode</code>. I'm experimenting with packing <code>SyntheticAmode</code> into 16 bytes to see if that leads to a similar space savings without the indirection :)</p>\n</blockquote>",
        "id": 290406966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658424126
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191877435\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Huh, looking at <code>PackedAmode</code> now, I'm pretty sure you can get the compiler to produce code at least this good using a regular Rust <code>enum</code>. When we talked about this before I hadn't realized every field was aligned to some multiple of 8 bits.</p>\n<p>The key thing is to make <code>SyntheticAmode</code> copy all the cases of <code>Amode</code> and just add a couple more. Converting between them requires a slightly tedious <code>match</code>, but this ensures that all five cases are in a single one-byte tag, instead of needing to pack a second tag somewhere. In addition, if I'm not mistaken, <code>Amode</code> is 4-byte aligned so embedding it in one of the cases of <code>SyntheticAmode</code> wastes three bytes in padding.</p>\n<p>So the result is something like the following. Happily, converting from <code>Amode</code> to <code>SyntheticAmode</code> can't fail.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">SyntheticAmode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">Reg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ImmRegRegShift</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">Gpr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"nc\">Gpr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">shift</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">MemFlags</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RipRelative</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">target</span>: <span class=\"nc\">MachLabel</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NominalSPOffset</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span>: <span class=\"kt\">u32</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ConstantOffset</span><span class=\"p\">(</span><span class=\"n\">VCodeConstant</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">Amode</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SyntheticAmode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">src</span>: <span class=\"nc\">Amode</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SyntheticAmode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Amode</span>::<span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SyntheticAmode</span>::<span class=\"n\">ImmReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simm32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>One nice thing here is that by default Rust will reorder struct fields to pack them with as little padding as possible. Also, it picks the smallest tag representation that is big enough to distinguish all the enum cases. So I think the representation it'll pick for the above <code>SyntheticAmode</code> is actually exactly what you did by hand. Convenient, right?</p>\n<p>I'd hope that LLVM is clever enough to notice that the above implementation of <code>from</code> doesn't change the memory representation, too.</p>\n</blockquote>",
        "id": 290426041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658433449
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191883023\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>One thing @elliottt and I have discussed is that it's likely possible to get this down to 12 bytes, actually, by taking advantage of the fact that VReg indices are limited to 21 bits (because regalloc2 also plays bitpacking tricks...). Then the worst case is 2*vreg (42 bits) + simm32 (32 bits) + tag (3 bits) + flags (5 bits now, up to 8 bits) --&gt; 82..85 bits. To do that we do need custom bitpacking, unfortunately (though if <code>rustc</code> supported C-style bitfields in structs... no wait, please don't throw me out the window...).</p>\n</blockquote>",
        "id": 290426956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658433854
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191895522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Can you define a type equivalent to <code>(VReg, VReg)</code> that's six bytes, and avoid doing magic bit-packing for anything else?</p>\n</blockquote>",
        "id": 290428791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658434798
    },
    {
        "content": "<p>jameysharp edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191895522\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Can you define a type equivalent to <code>(VReg, VReg)</code> that's six bytes, and avoid doing magic bit-packing for anything else?</p>\n<p>Edit: It'd need to be 2-byte aligned at most, so <code>[u16; 3]</code> under the hood, I imagine. And would it make sense to also use that type in <code>Amode</code> to shave four bytes off there too?</p>\n</blockquote>",
        "id": 290429318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658435032
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191912899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can you define a type equivalent to <code>(VReg, VReg)</code> that's six bytes, and avoid doing magic bit-packing for anything else?</p>\n<p>Edit: It'd need to be 2-byte aligned at most, so <code>[u16; 3]</code> under the hood, I imagine. And would it make sense to also use that type in <code>Amode</code> to shave four bytes off there too?</p>\n</blockquote>\n<p>I'd love it if we could find a way to make that work! My experiment on godbolt suggests that the tag bumps the enum back up to 16 bytes: <a href=\"https://rust.godbolt.org/z/1E8s3rns8\">https://rust.godbolt.org/z/1E8s3rns8</a>.</p>\n</blockquote>",
        "id": 290431302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658436083
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191912899\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can you define a type equivalent to <code>(VReg, VReg)</code> that's six bytes, and avoid doing magic bit-packing for anything else?</p>\n<p>Edit: It'd need to be 2-byte aligned at most, so <code>[u16; 3]</code> under the hood, I imagine. And would it make sense to also use that type in <code>Amode</code> to shave four bytes off there too?</p>\n</blockquote>\n<p>I'd love it if we could find a way to make that work -- the bit shifting implementation is a little less readable :)</p>\n<p>My experiment on godbolt suggests that the tag bumps the enum back up to 16 bytes: <a href=\"https://rust.godbolt.org/z/1E8s3rns8\">https://rust.godbolt.org/z/1E8s3rns8</a>.</p>\n</blockquote>",
        "id": 290431421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658436129
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191931669\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>I miscounted, but my new idea is to pack <code>base</code>, <code>index</code>, and also <code>shift</code> into 6 bytes. I believe x86 shifts are limited to something like two or three bits, right? So six bits should be plenty.</p>\n<p>...I just really want to use a normal enum okay <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n</blockquote>",
        "id": 290433641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658437306
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191935004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>@jameysharp if you can come up with a working Godbolt demo with a 12-byte size that'd be great; but I think the main focus right now is just to get something working and evaluate the performance gains of a smaller <code>Inst</code>. Then after that we can incrementally refine :-)</p>\n</blockquote>",
        "id": 290434096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658437544
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191952219\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>I mean, it's easy enough as long as it's safe to use only six bits for the shift: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=114c56c3b49d2465ce46456ef752f68d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=114c56c3b49d2465ce46456ef752f68d</a></p>\n<p>So, _is_ it safe to use six or fewer bits for the shift?</p>\n</blockquote>",
        "id": 290436428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658438922
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191958627\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Yep, the shift amount is always one of 1, 2, 4, 8; so that representation should work. Thanks!</p>\n</blockquote>",
        "id": 290437232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658439359
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1191959183\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>(Or rather, the scale is 1, 2, 4, 8; shift is 0, 1, 2, 3, so two bits.)</p>\n</blockquote>",
        "id": 290437355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658439405
    },
    {
        "content": "<p>MaxGraey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1192878641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Can you define a type equivalent to <code>(VReg, VReg)</code> that's six bytes, and avoid doing magic bit-packing for anything else?<br>\nEdit: It'd need to be 2-byte aligned at most, so <code>[u16; 3]</code> under the hood, I imagine. And would it make sense to also use that type in <code>Amode</code> to shave four bytes off there too?</p>\n</blockquote>\n<p>I'd love it if we could find a way to make that work -- the bit shifting implementation is a little less readable :)</p>\n<p>My experiment on godbolt suggests that the tag bumps the enum back up to 16 bytes: <a href=\"https://rust.godbolt.org/z/1E8s3rns8\">https://rust.godbolt.org/z/1E8s3rns8</a>.</p>\n</blockquote>\n<p>But you can switch to <code>union</code> with packed repr for <code>ImmRegRegShift</code>. It will turn union layout to <code>12</code> bytes without bits magic:<br>\n<a href=\"https://rust.godbolt.org/z/aWW939b7b\">https://rust.godbolt.org/z/aWW939b7b</a></p>\n</blockquote>",
        "id": 290556829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658518490
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1192890764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<blockquote>\n<p>But you can switch to <code>union</code> with packed repr for <code>ImmRegRegShift</code>. It will turn union layout to <code>12</code> bytes without bits magic: <a href=\"https://rust.godbolt.org/z/aWW939b7b\">https://rust.godbolt.org/z/aWW939b7b</a></p>\n</blockquote>\n<p>There still has to be a tag somewhere. With that <code>union</code> we'd have no idea which variant was being used. We'd also have to use <code>unsafe</code> everywhere we wanted to read from these values, for the same reason.</p>\n<p>Fortunately, just packing the base, index, and shift fields together, in the one case that uses all three, gets us down to 12 bytes anyway.</p>\n</blockquote>",
        "id": 290558803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658519674
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496#issuecomment-1192963505\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4496\">issue #4496</a>:</p>\n<blockquote>\n<p>Closing this PR in favor of #4514.</p>\n</blockquote>",
        "id": 290572402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658527392
    }
]