[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>We hit a fuzz bug just now where the spec interpreter is timing out the fuzz test case when wasmtime looks to execute the wasm in under a second, so I'm opening this to track investigation into the spec interpreter to see if there's perhaps some performance wins to gain there.</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524996/testcase0.wasm.gz\">wasm</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524997/input.gz\">fuzz input (gzipped)</a></li>\n</ul>\n<p>cc @conrad-watt </p>\n</blockquote>",
        "id": 279596234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650485143
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>We hit a fuzz bug just now where the spec interpreter is timing out the fuzz test case when wasmtime looks to execute the wasm in under a second, so I'm opening this to track investigation into the spec interpreter to see if there's perhaps some performance wins to gain there.</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524996/testcase0.wasm.gz\">wasm</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524997/input.gz\">fuzz input (gzipped)</a></li>\n</ul>\n<p>cc @conrad-watt </p>\n</blockquote>",
        "id": 279596246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650485148
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104410696\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah and for reference locally the spec interpreter is taking ~1 minute. I'm not entirely sure how to profile ocaml but perf is reporting:</p>\n<p>&lt;img width=\"704\" alt=\"Screen Shot 2022-04-20 at 3 06 56 PM\" src=\"<a href=\"https://user-images.githubusercontent.com/64996/164313995-d7c14c0c-c702-4f15-8731-279d5b5ac58d.png\">https://user-images.githubusercontent.com/64996/164313995-d7c14c0c-c702-4f15-8731-279d5b5ac58d.png</a>\"&gt;</p>\n</blockquote>",
        "id": 279596423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650485225
    },
    {
        "content": "<p>conrad-watt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104425128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah, interesting. The formal model's implementations of <code>reinterpret</code> and <code>popcnt</code> are particularly inefficient (still a constant factor only), and it looks like this test calls a whole bunch of them. I'll dig into this on my side, but do you see a big difference in the (forked) spec interpreter's runtime locally when providing/not providing the <code>-isa</code> flag?</p>\n</blockquote>",
        "id": 279598484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650486290
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104427096\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah sorry I'm not super familiar with running the interpreter outside the fuzzer itself, can you clarify what you mean by the <code>-isa</code> flag?</p>\n</blockquote>",
        "id": 279598743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650486446
    },
    {
        "content": "<p>conrad-watt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104431577\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah sorry, if it's any trouble, I can look myself later (not at my workstation right now).</p>\n<p>When running the spec interpreter from the command line, the invocation normally looks like</p>\n<p><code>./bin-name -i file-name</code></p>\n<p>this runs the reference interpreter (more or less) unchanged from the main repository</p>\n<p>if you instead run</p>\n<p><code>./bin-name -isa -i file-name</code></p>\n<p>it runs using my formal model</p>\n<p>if it runs much slower with the <code>-isa</code> flag provided, that suggests the culprit is my slow implementation of <code>reinterpret</code> and <code>popcnt</code>.</p>\n</blockquote>",
        "id": 279599414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650486795
    },
    {
        "content": "<p>conrad-watt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104431577\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah sorry, if it's any trouble, I can look myself later (not at my workstation right now).</p>\n<p>When running the spec interpreter from the command line, the invocation normally looks like</p>\n<p><code>./bin-name -i file-name</code></p>\n<p>this runs the reference interpreter (more or less) unchanged from the main repository</p>\n<p>if you instead run</p>\n<p><code>./bin-name -isa -i file-name</code></p>\n<p>it runs using my formal model (this flag is only implemented in my fork)</p>\n<p>if it runs much slower with the <code>-isa</code> flag provided, that suggests the culprit is my slow implementation of <code>reinterpret</code> and <code>popcnt</code>.</p>\n</blockquote>",
        "id": 279599552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650486847
    },
    {
        "content": "<p>conrad-watt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104431577\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah sorry, if it's any trouble, I can look myself later (not at my workstation right now).</p>\n<p>When running the spec interpreter from the command line, the invocation normally looks like</p>\n<p><code>./exe-name -i file-name</code></p>\n<p>this runs the reference interpreter (more or less) unchanged from the main repository</p>\n<p>if you instead run</p>\n<p><code>./exe-name -isa -i file-name</code></p>\n<p>it runs using my formal model (this flag is only implemented in my fork)</p>\n<p>if it runs much slower with the <code>-isa</code> flag provided, that suggests the culprit is my slow implementation of <code>reinterpret</code> and <code>popcnt</code>.</p>\n</blockquote>",
        "id": 279599872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650487043
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104437328\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah ok makes sense! </p>\n<p>Looks like the default spec interpreter executes this in 0.8s, and the <code>-isa</code> flag runs in 74s</p>\n<p>I used this small script to execute the interpreter:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"s\">\"(assert_return (invoke </span><span class=\"se\">\\\"\\\"</span><span class=\"s\">\"</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"err\">`</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"s\">\"$expr (f32.const 0)\"</span><span class=\"w\"></span>\n<span class=\"n\">done</span><span class=\"w\"></span>\n<span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"s\">\"$expr) (f32.const 0))\"</span><span class=\"w\"></span>\n<span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"cp\">$HOME</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"s\">\"$expr\"</span><span class=\"w\"></span>\n<span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"cp\">$HOME</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">testcase0</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"s\">\"$expr\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Also to clarify it's not urgent to fix this, just wanted to log this as the fuzz bug came in</p>\n</blockquote>",
        "id": 279600291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650487273
    },
    {
        "content": "<p>conrad-watt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1104431577\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Ah sorry, if it's any trouble, I can look myself later (not at my workstation right now).</p>\n<p>When running the spec interpreter from the command line, the invocation normally looks like</p>\n<p><code>./exe-name -i file-name</code></p>\n<p>this runs the reference interpreter (more or less) unchanged from the main repository</p>\n<p>if you instead run</p>\n<p><code>./exe-name -isa -i file-name</code></p>\n<p>it runs using my formal model (this flag is only implemented in my fork)</p>\n<p>if it runs much slower with the <code>-isa</code> flag provided, that suggests the culprit is my slow implementation of <code>reinterpret</code> and <code>popcnt</code>.</p>\n<p>EDIT: I should clarify that the fuzzer is only set up to run using the formal model path right now</p>\n</blockquote>",
        "id": 279600311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650487288
    },
    {
        "content": "<p>conrad-watt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1110397137\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Just to flag up - I've identified a fix, but I'm currently dealing with an unrelated deadline, so I'll probably make a PR late next week.</p>\n</blockquote>",
        "id": 280291468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651020759
    },
    {
        "content": "<p>conrad-watt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1121284754\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>With the fix in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4113\">https://github.com/bytecodealliance/wasmtime/pull/4113</a>, the Isabelle-based interpreter seems to (thankfully!) outperform the base spec interpreter on this example. As I feared, the culprit was <code>popcnt</code>'s performance. As I mention in that PR, there are a few more ops which could currently cause similar timeouts if a fuzz test is heavily weighted towards them, so I'll work on fixing those next.</p>\n</blockquote>",
        "id": 281705706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652111930
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059#issuecomment-1121298426\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>Sounds good! I'll ping here if we get a concrete test case but otherwise I'm gonna go ahead and close this since the fuzz bug in question is now fixed. </p>\n</blockquote>",
        "id": 281707492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652112623
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4059\">issue #4059</a>:</p>\n<blockquote>\n<p>We hit a fuzz bug just now where the spec interpreter is timing out the fuzz test case when wasmtime looks to execute the wasm in under a second, so I'm opening this to track investigation into the spec interpreter to see if there's perhaps some performance wins to gain there.</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524996/testcase0.wasm.gz\">wasm</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/files/8524997/input.gz\">fuzz input (gzipped)</a></li>\n</ul>\n<p>cc @conrad-watt </p>\n</blockquote>",
        "id": 281707494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652112623
    }
]