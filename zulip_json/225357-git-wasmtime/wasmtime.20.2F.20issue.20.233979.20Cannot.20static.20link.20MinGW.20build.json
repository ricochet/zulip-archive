[
    {
        "content": "<p>sjml opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build </li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277260564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648722737
    },
    {
        "content": "<p>sjml labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build </li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277260566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648722737
    },
    {
        "content": "<p>sjml edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build, error: <code>undefined reference to </code>__imp_wasm_engine_new'`</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277266625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648726430
    },
    {
        "content": "<p>sjml edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build, error: <code>undefined reference to \\</code>__imp_wasm_engine_new'`</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277266645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648726442
    },
    {
        "content": "<p>sjml edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build, error: <code>undefined reference to '__imp_wasm_engine_new'</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277266792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648726500
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979#issuecomment-1084730164\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<p>Yeah linking with Windows is a bit trickier than other platforms, as you've found you'll need to <code>-DWASM_API_EXTERN</code> on the command line to avoid the dllimport annotation. Note that when static linking you'll need to link all of the Windows libraries manually since they're not implicitly listed in the <code>*.a</code> file.</p>\n<p>You can see an example of how this is done with the <a href=\"https://github.com/bytecodealliance/wasmtime-go/blob/900a74e268664920276200d5a23167224196ed38/ffi.go#L5-L6\">wasmtime-go compliation flags on Windows</a> which statically links using MinGW I believe.</p>\n<p>Can you try passing the extra <code>-l</code> flags and see if it works for you?</p>\n</blockquote>",
        "id": 277296239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648739565
    },
    {
        "content": "<p>sjml <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979#issuecomment-1085406594\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<p>Ah, yup <a href=\"https://github.com/sjml/wasmtime-mingw-build/commit/de3632c1ea0b164709c04384d5ee6dd073672232\">that did the trick</a>. Sorry to bug you on that -- very glad for the pointer to the wasmtime-go example. </p>\n</blockquote>",
        "id": 277369521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648787022
    },
    {
        "content": "<p>sjml closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3979\">issue #3979</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>The problem is a build/link issue, so I created <a href=\"https://github.com/sjml/wasmtime-mingw-build\">a minimal example in this repository</a>.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Assuming you have <code>make</code> and a mingw pipeline available...</li>\n<li>Run <code>make</code><br>\n    * the resulting executable in <code>out/dynamic</code> runs fine on Windows with its accompanying DLL</li>\n<li>Run <code>make wasmplay-static</code>, which runs the same compilation/linking command, but passes \"-static\" to it<br>\n    * Note that it cannot even build, error: <code>undefined reference to '__imp_wasm_engine_new'</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to link wasmtime statically for a MinGW build. </p>\n<h3>Actual Results</h3>\n<p>Build fails.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v0.35.1</p>\n<p>Operating system: Building on macOS, running on Windows</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>Part of the issue seems to be <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/c9d31284651b975f05ac27cee0bab1377560b87e/include/wasm.h#L14\">these lines in <code>wasm.h</code></a>: note that it declares an external implementation (dllimport) if <code>_WIN32</code> is defined, with no provision for static linking. </p>\n<p>If I change that so <code>WASM_API_EXTERN</code> is blank (as on other platforms) then it's able to link to <code>libwasmtime.a</code>, but then fails the build since it can't find a bunch of Windows libraries. </p>\n<p>If static linking with MinGW is not possible or practical, I understand, but what is the static <code>.a</code> library file used for, then? I note there's a DLL loading static lib, which I get, but it's not clear how to use the full static library, if it's even possible. </p>\n<p>I'm not a MinGW expert, so there may be something I'm missing here... thanks for whatever help you can offer. <br>\n</p>\n</blockquote>",
        "id": 277369522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648787022
    }
]