[
    {
        "content": "<p>playXE opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\" title=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Message:  definition error: Compilation error: Verifier errors\nnote: while compiling function u0:0() -&gt; i32 system_v {\n    ss0 = explicit_slot 8\n\nblock0:\n    v1 = iconst.i64 4\n    v2 = iadd.i64 v0, v1\n    v3 = iconst.i32 42\n    store v3, v2\n    v4 = iconst.i32 0\n    return v4\n}\n</pre></div>\n\n\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n</blockquote>",
        "id": 195272182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587798809
    },
    {
        "content": "<p>playXE edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\" title=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Message:  definition error: Compilation error: Verifier errors\nnote: while compiling function u0:0() -&gt; i32 system_v {\n    ss0 = explicit_slot 8\n\nblock0:\n    v1 = iconst.i64 4\n    v2 = iadd.i64 v0, v1\n    v3 = iconst.i32 42\n    store v3, v2\n    v4 = iconst.i32 0\n    return v4\n}\n</pre></div>\n\n\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n<p>UPD: This might be useful for this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1076\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1076\">Support volatile store/loads</a></p>\n</blockquote>",
        "id": 195272447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587799380
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619339709\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619339709\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>FYI I implemented something very similar to your mem2reg in cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs</a></p>\n<blockquote>\n<p>UPD: This might be useful for this issue: Support volatile store/loads</p>\n</blockquote>\n<p>Implementing that issue would almosy definitely be done by adding a volatile flag to MemFlags as this issue suggests.</p>\n</blockquote>",
        "id": 195273938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587802000
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619339709\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619339709\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>FYI I implemented something very similar to your mem2reg in cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/169140506366d5aa96967a71b6af98563a9c2988/src/optimize/stack2reg.rs</a></p>\n<blockquote>\n<p>UPD: This might be useful for this issue: Support volatile store/loads</p>\n</blockquote>\n<p>Implementing that issue would almost definitely be done by adding a volatile flag to MemFlags as this issue suggests.</p>\n</blockquote>",
        "id": 195273941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587802010
    },
    {
        "content": "<p>playXE <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619360264\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619360264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>@bjorn3 your implementation looks much better than mine, but issue still remains, it is impossible to do mem2reg pass safely without volatile loads and stores :(</p>\n</blockquote>",
        "id": 195279543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587811896
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619363863\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619363863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>I have been thinking if we should maybe make <code>MemFlags</code> some opaque number just like <code>SourceLoc</code> and then pass a <code>MemoryModel</code> to the compile function, that uses the number to determine what kind of optimizations are allowed around <code>load</code> and <code>store</code>. That <code>MemoryModel</code> is then responsible for aliasing, volatility, atomic orderings, ... Another similar way would be to pre-compute all memory dependencies and store that in the function, like @sunfishcode suggested in <a href=\"https://youtu.be/9OIA7DTFQWU\" title=\"https://youtu.be/9OIA7DTFQWU\">https://youtu.be/9OIA7DTFQWU</a> beginning at 36:40.</p>\n</blockquote>",
        "id": 195280602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587813628
    },
    {
        "content": "<p>tschneidereit labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\" title=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Message:  definition error: Compilation error: Verifier errors\nnote: while compiling function u0:0() -&gt; i32 system_v {\n    ss0 = explicit_slot 8\n\nblock0:\n    v1 = iconst.i64 4\n    v2 = iadd.i64 v0, v1\n    v3 = iconst.i32 42\n    store v3, v2\n    v4 = iconst.i32 0\n    return v4\n}\n</pre></div>\n\n\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n<p>UPD: This might be useful for this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1076\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1076\">Support volatile store/loads</a></p>\n</blockquote>",
        "id": 195284906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587821279
    },
    {
        "content": "<p>tschneidereit labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>Add Volatile flag to MemFlags.</p>\n<h4>Benefit</h4>\n<p>When some optimization pass knows about load/store type (is it volatile or not?) then it's possible to do a lot of optimizations. One of it is memory to register promotion. I tried to implement mem2reg pass there <a href=\"https://github.com/playXE/cranelift-mem2reg/\" title=\"https://github.com/playXE/cranelift-mem2reg/\">cranelift-mem2reg</a> and this pass works but in some cases it fails e.g this simple C code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compiled with rcc</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Message:  definition error: Compilation error: Verifier errors\nnote: while compiling function u0:0() -&gt; i32 system_v {\n    ss0 = explicit_slot 8\n\nblock0:\n    v1 = iconst.i64 4\n    v2 = iadd.i64 v0, v1\n    v3 = iconst.i32 42\n    store v3, v2\n    v4 = iconst.i32 0\n    return v4\n}\n</pre></div>\n\n\n<p>All loads and stores might be marked as volatile and mem2reg will not optimize <code>struct Foo</code> into registers.  <br>\nVolatile flag also can help in SRoA when it's possible to replace allocation on stack with single 32 or 64 bit register.</p>\n<h4>Implementation</h4>\n<p>Just add additional enum case in <code>codegen/ir/memflags.rs</code> and add 3 simple functions to MemFlags: <code>volatile() -&gt; Self,is_volatile() -&gt; bool, set_volatile(&amp;mut self)</code>.</p>\n<h4>Alternatives</h4>\n<p>I do not see any alternatives.</p>\n<p>UPD: This might be useful for this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1076\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1076\">Support volatile store/loads</a></p>\n</blockquote>",
        "id": 195284907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587821279
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619379796\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619379796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 195284948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587821292
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619389646\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619389646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<p>Giving frontends a way to provide explicit memory dependencies, and using that to implement volatile semantics would be cool. If anyone's interested in a designing a system to do this, it'd be good to start with a design document so we can look at how it'll impact compile times in fast-compilation use cases, and other tradeoffs involved.</p>\n<p>We may want to do something simpler for now that just addresses volatile, and I have a possible alternative. Traditional volatile flags on regular memory accesses turn out to be <a href=\"https://www.cs.utah.edu/~regehr/papers/emsoft08-preprint.pdf\" title=\"https://www.cs.utah.edu/~regehr/papers/emsoft08-preprint.pdf\">very error prone</a>. The recommended solution is to transform volatile into a call or separate opcode, and optionally inline the call after all optimizations. It's now how it systematically eliminates a common class of volatile bugs, however it does add complexity in the backend. So instead, how about the following design:</p>\n<p>Add new two instructions to the IR:</p>\n<p>- <code>y = volatile_unary(x)</code> - observe the value of <code>x</code>, do side effects, and return a new value<br>\n  - <code>volatile_rmw(p)</code> - observe the value of <code>*p</code>, do side effects, and then clobber <code>*p</code>.</p>\n<p>At a very late stage, <code>volatile_transform</code> would be translated as if it were an identity operation, and <code>volatile_rmw</code> would be translated as if it were a no-op. With those, frontends could then translate a volatile load like this:</p>\n<div class=\"codehilite\"><pre><span></span>   volatile_rmw(p)\n   x0 = load(p)\n   x = volatile_unary(x0)\n</pre></div>\n\n\n<p>and a volatile store like this:</p>\n<div class=\"codehilite\"><pre><span></span>   x0 = volatile_unary(x)\n   store(p, x0)\n   volatile_rmw(p)\n</pre></div>\n\n\n<p>That is, we'd use plain load and store instructions, but boxed in with volatile operations, both in control flow and data flow, to prevent any code motion or redundancy elimination. It'll get chatty, especially in the volatile-atomic case, but volatile is rare so it seems like an ok tradeoff. This should let most of the compiler automatically do the right thing, at low cost in overall complexity. And, <code>volatile_rmw</code> and <code>volatile_transform</code> would be handy besides for crafting compiler unit tests :-).</p>\n</blockquote>",
        "id": 195287603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587825718
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619391566\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619391566\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<blockquote>\n<p>The recommended solution is to transform volatile into a call or separate opcode, and optionally inline the call after all optimizations. </p>\n</blockquote>\n<p>Sort of like a memory fence? It marks this load/store as unable to be removed? That sounds reasonable to me.</p>\n<p>I can't quite run csmith yet, but as soon as I do I'm happy to test out the combination of mem2reg and volatile to make sure there's no misoptimization.</p>\n<blockquote>\n<p>make MemFlags some opaque number just like SourceLoc and then pass a MemoryModel to the compile function</p>\n</blockquote>\n<p>I don't know that I like the idea of more indirection. If Cranelift uses opaque IDs for these flags, it makes it much harder to find the intended purpose - it's in an entirely separate part of the documentation. I also don't see the benefit over normal MemFlags.</p>\n</blockquote>",
        "id": 195288189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587826585
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619395195\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598#issuecomment-619395195\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1598\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1598\">Issue #1598</a>:</p>\n<blockquote>\n<blockquote>\n<p>I also don't see the benefit over normal MemFlags.</p>\n</blockquote>\n<p>The benefit is that the <code>MemoryModel</code> can assign arbitrary meanings to it, like this load can only alias with these other loads to prevent a stacked borrows violation. My proposal is that all properties of loads and stores are handled by the <code>MemoryModel</code>, so that you can easily switch between a C memory model, a Java memory model, stacked borrows and any other memory model without changing Cranelift itself.</p>\n<p>Also note that I didn't mean to assign a property like <code>volatile</code> to a specific number, but instead let <code>MemoryModel</code> store a map between the number and any relevant properties.</p>\n</blockquote>",
        "id": 195289184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587828069
    }
]