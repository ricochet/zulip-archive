[
    {
        "content": "<p>galibey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054\">issue #4054</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I would like to have the ability to somehow get a panic reason in the result of invoking WebAssembly function. Currently, it returns<br>\n<code>wasm trap: wasm unreachable instruction execute</code>.</p>\n<h4>Benefit</h4>\n<p>We have a Rust module that runs user-provided wasm programs during processing. If the program panicked, we would like to properly report the cause. </p>\n<h4>Implementation</h4>\n<p>I do not have an implementation plan or ideas on how to implement this.</p>\n<h4>Alternatives</h4>\n<p>In theory, we could use a panic hook to store a message to some static memory and then use it to report an error but it's quite a hacky and the hook can conflict with the user's hook.<br>\n</p>\n</blockquote>",
        "id": 279523801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650450014
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054#issuecomment-1104052706\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054\">issue #4054</a>:</p>\n<blockquote>\n<p>Unfortunately this is not something that Wasmtime can natively provide you and is something you'd need to wrap up as an embedding. WebAssembly doesn't have any notion of a \"panic cause\" so what Rust-compiled-to-WebAssembly does is that it uses WASI to print the panic message and then uses the wasm <code>unreachable</code> instruction to raise a trap. This means that there's two channels the error information is communicated through, so your embedding will likely need to capture the WASI output and provide it with the trap that occurs, if any.</p>\n<p>Would that work for you?</p>\n</blockquote>",
        "id": 279557140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650467708
    },
    {
        "content": "<p>galibey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054#issuecomment-1104938449\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054\">issue #4054</a>:</p>\n<blockquote>\n<p>Yes, the WASI output capturing works for us, thanks for the hint. For WASM we will just probably make an assumption that if <code>unreachable</code> instruction occurred most probably there was a panic in the code. </p>\n<p>Thanks, @alexcrichton for such a quick response. </p>\n</blockquote>",
        "id": 279654992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650532857
    },
    {
        "content": "<p>galibey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4054\">issue #4054</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>I would like to have the ability to somehow get a panic reason in the result of invoking WebAssembly function. Currently, it returns<br>\n<code>wasm trap: wasm unreachable instruction execute</code>.</p>\n<h4>Benefit</h4>\n<p>We have a Rust module that runs user-provided wasm programs during processing. If the program panicked, we would like to properly report the cause. </p>\n<h4>Implementation</h4>\n<p>I do not have an implementation plan or ideas on how to implement this.</p>\n<h4>Alternatives</h4>\n<p>In theory, we could use a panic hook to store a message to some static memory and then use it to report an error but it's quite a hacky and the hook can conflict with the user's hook.<br>\n</p>\n</blockquote>",
        "id": 279654993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650532858
    }
]