[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 191823866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585178949
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 194967223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587577633
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 194968303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587578111
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 194975646,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587581667
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/julian-seward1\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a>.</p>",
        "id": 194975697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587581700
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398784912\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398784912\">PR Review</a>.</p>",
        "id": 195021639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587622261
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413535371\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413535371\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Read naively, this would seem to insert the mask table once for every converted ishl.  That would be ungood.  Does <code>pos.func.dfg.constants.insert</code> de-dup, and hence keep just one copy?</p>\n</blockquote>",
        "id": 195021640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587622261
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398786873\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398786873\">PR Review</a>.</p>",
        "id": 195023331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624355
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413537416\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413537416\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What does <code>this</code> refer to here?  On the whole I'd prefer to stick with the Intel style convention, where the rightmost lane is lane zero.  But note; my comment is very \"drive-by\"; I don't know what the lane numbering conventions in CL are.</p>\n</blockquote>",
        "id": 195023332,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624355
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398786873\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398786873\">PR Review</a>.</p>",
        "id": 195023333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624355
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413550507\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413550507\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Did you mean \"shift an extra 8 bits\" ?</p>\n</blockquote>",
        "id": 195023334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624355
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398804719\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398804719\">PR Review</a>.</p>",
        "id": 195023507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624557
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398806847\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398806847\">PR Review</a>.</p>",
        "id": 195023689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624791
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398808058\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398808058\">PR Review</a>.</p>",
        "id": 195023798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587624927
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398808771\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398808771\">PR Review</a>.</p>",
        "id": 195023909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587625005
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398809638\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398809638\">PR Review</a>.</p>",
        "id": 195024024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587625096
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398809889\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-398809889\">PR Review</a>.</p>",
        "id": 195024063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587625121
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399207065\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399207065\">PR Review</a>.</p>",
        "id": 195076736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655136
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413888462\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413888462\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ConstantPool</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a148de08f8b4ccdb6e79410cb4b3169b44328201/cranelift/codegen/src/ir/constant.rs#L220-L231\" title=\"https://github.com/bytecodealliance/wasmtime/blob/a148de08f8b4ccdb6e79410cb4b3169b44328201/cranelift/codegen/src/ir/constant.rs#L220-L231\">does de-duplicate</a> values but currently it is limited to a per-function boundary because of how things are compiled. I opened #1385 to talk about this some more: I think with a bit of thought we could de-duplicate across modules at least.</p>\n</blockquote>",
        "id": 195076737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655137
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399209617\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399209617\">PR Review</a>.</p>",
        "id": 195077082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655293
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413890727\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413890727\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok, we can switch to Intel-style. I went back and forth on this one and I can't recall why I chose this ordering. I'll look around the file to see if there was something that made me choose this.</p>\n</blockquote>",
        "id": 195077083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655293
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399211961\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#pullrequestreview-399211961\">PR Review</a>.</p>",
        "id": 195077366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655431
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413892593\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409#discussion_r413892593\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yup, good catch.</p>\n</blockquote>",
        "id": 195077369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587655431
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 195081813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587657383
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 195087181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587659743
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a> from <code>additional-i8x16-shift</code> to <code>master</code>:</p>\n<blockquote>\n<p>This is a follow-on to #1377; review once that PR is merged. This PR adds support for i8x16 left shift and arithmetic right shift. Both are long sequences of instructions on x86.</p>\n</blockquote>",
        "id": 195091622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587661733
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1409\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1409\">PR #1409</a>.</p>",
        "id": 195097247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587664556
    }
]