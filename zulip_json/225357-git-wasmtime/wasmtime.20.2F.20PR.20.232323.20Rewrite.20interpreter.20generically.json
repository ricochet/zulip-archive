[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214532244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603686676
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a>.</p>",
        "id": 214532245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603686676
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214617151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603738085
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214638803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603749670
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 214749703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603826029
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-520838161\">PR Review</a>.</p>",
        "id": 215133271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082359
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-520838161\">PR Review</a>.</p>",
        "id": 215133272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082359
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515226424\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You should be able to avoid the <code>is_nan()</code> checks and just defer to <code>f32</code>'s <code>PartialOrd</code> implementation, as it does these same NaN checks.</p>\n</blockquote>",
        "id": 215133273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082359
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515240978\">PR Review Comment</a>:</p>\n<blockquote>\n<p>seems like this doc comment never got finished</p>\n</blockquote>",
        "id": 215133275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515236857\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It seems strange that we have an empty <code>Interpreter</code> struct and all of its methods take <code>&amp;mut InterpreterState</code> as its first parameter. It seems like it would make sense to put merge them together and make all of these methods take <code>&amp;mut self</code>. I see this is <em>sort of</em> similar to what used to exist, so I'm unclear on the motivation for the split as it currently is written.</p>\n</blockquote>",
        "id": 215133276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515228552\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It seems strange that the interpreter enables all target architectures. I would expect it to be possible to enable <em>none</em> of them, and simply use the interpreter to execute target-independent clif.</p>\n</blockquote>",
        "id": 215133277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515226612\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 215133278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515277064\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This code is really macro heavy. I understand the draw here: there is a lot of duplication going on. But it is pretty hard to understand, with all of the implicitly closed over arguments, and macro rules being kinda hard to read in general.</p>\n<p>Would it be possible to refactor these helpers into closures? I think that would help readability a bunch. For example the <code>arg!</code> macro and calls like <code>arg!(1)</code> would become</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">value_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">StepError</span>::<span class=\"n\">UnknownValue</span><span class=\"p\">(</span><span class=\"n\">value_ref</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">inst_context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>(You may have to add some type annotations to the closures, but I think it would be an improvement nonetheless)</p>\n<p>Also a quick sentence in a documentation comment for each helper would help readers understand what they're looking at here.</p>\n</blockquote>",
        "id": 215133279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515225499\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Any reason in particular not to do this instead:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        f32::from_bits(self.0).is_nan()\n</code></pre></div>\n\n<p>?</p>\n</blockquote>",
        "id": 215133280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082359
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515280669\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                _ =&gt; unreachable!(),\n</code></pre></div>\n\n</blockquote>",
        "id": 215133281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515253781\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I feel like this trait's overview documentation could use some love:</p>\n<ul>\n<li>Explain <em>why</em> the interpreter is generic over a trait, and what this enables</li>\n<li>Give an overview of the different things that the trait abstracts -- frames, values, flags, heap memory, and stack memory -- and what they are and how they're used.</li>\n<li>A sketch of an example of implementing this trait (def not full impl, just informative sketch) for simple abstract interpretation (maybe signedness of values only and ignoring memory/flags/etc?) and a link to concrete implementations that exist.</li>\n</ul>\n</blockquote>",
        "id": 215133282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515279099\">PR Review Comment</a>:</p>\n<blockquote>\n<p>because other opcodes should actually be impossible:</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                _ =&gt; unreachable!(),\n</code></pre></div>\n\n</blockquote>",
        "id": 215133283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515286359\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Out of curiosity, how do your static analyses handle control flow joins and loops? I don't see anything in this interpreter to handle that.</p>\n</blockquote>",
        "id": 215133284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604082360
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521269229\">PR Review</a>.</p>",
        "id": 215266111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270379
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515682034\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yup, that makes more sense--changed them. I've been thinking a lot about how to interpret FP arithmetic correctly (e.g. apfloat, softfloat) so I started thinking that I would have to be very explicit everywhere.</p>\n</blockquote>",
        "id": 215266112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270380
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521269246\">PR Review</a>.</p>",
        "id": 215266118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270390
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515682057\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 215266119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270390
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521269433\">PR Review</a>.</p>",
        "id": 215266230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270519
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515682305\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, we should remove this once the old x86 backend goes away. I only had to enable this because otherwise somewhere in the CI a non-x86 build is triggered that doesn't contain all of the <code>Opcode::X86...</code> variants, causing compilation failures.</p>\n</blockquote>",
        "id": 215266231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604270519
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521270910\">PR Review</a>.</p>",
        "id": 215266853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604271464
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515684133\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point. I think I was running into lifetime issues and went the static method route to resolve them. I've changed them back now to <code>&amp;mut self</code>.</p>\n</blockquote>",
        "id": 215266854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604271464
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521273088\">PR Review</a>.</p>",
        "id": 215267773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604272858
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515686703\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yup... this was left a bit unfinished because I was (and am still) debating whether this should be a tree of traits instead of a single level. For example, <code>State</code> could contain <code>fn iflags() -&gt; impl Flags&lt;IntCC&gt;</code> and then separately I could define <code>has/set/clear</code> for <code>Flags</code>. Why I haven't done this? I'm concerned that, since <code>impl Flags</code> is likely not correct (though it expresses what I mean), I will be caught up in <code>dyn</code> issues, possible lifetime issues, mutable vs. non-mutable issues, etc. Do you have an opinion on this? </p>\n</blockquote>",
        "id": 215267774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604272858
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215268375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604273805
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215276526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604287817
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215279406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604292833
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521331385\">PR Review</a>.</p>",
        "id": 215279507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604292985
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515740085\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok, I replaced the macros with closures in 5a121dd. I like the idea of closures better than macros but it made a few things a bit harder to read so I left it as a separate commit in case we want to revert.</p>\n</blockquote>",
        "id": 215279508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604292986
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521332557\">PR Review</a>.</p>",
        "id": 215279657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604293291
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r515741110\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In the constant folding code, I added a <code>PhiValues</code> structure that scans through a function twice, first to capture all block parameters and secondly to map the SSA values that could be inputs to those block parameters (e.g. from a <code>jump</code>). I perform lookups into that mapping when I need to join. Perhaps there is something like <code>PhiValues</code> somewhere but I couldn't find it?</p>\n</blockquote>",
        "id": 215279658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604293292
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521857471\">PR Review</a>.</p>",
        "id": 215352725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604338860
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r516147059\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FYI, traits can't contain <code>-&gt; impl Trait</code> methods, you would have to have an associated type that is returned instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IFlags</span>: <span class=\"nc\">IFlagsState</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">iflags</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Iflags</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// etc...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I generally don't think it is worth it to do this sort of thing unless there is code that will be generic over just <code>IFlagsState</code> and not the whole <code>State</code>, which I suspect isn't the case here.</p>\n</blockquote>",
        "id": 215352726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604338860
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521860519\">PR Review</a>.</p>",
        "id": 215353248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604339104
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r516149700\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We don't have anything generic AFAIK, but you could take a look at the LICM and GVN implementations and see if they have anything we can factor out.</p>\n<p>I must admit that I'm more interested in the design of the trait though. Don't have anything off the top of my head, just think it will need something like a <code>join</code> or <code>meet</code> method depending which way we are modeling our lattices, as well as a \"should I take both branches?\" predicate.</p>\n</blockquote>",
        "id": 215353249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604339104
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521915570\">PR Review</a>.</p>",
        "id": 215363079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604343828
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r516192859\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll upstream that constant folding after this PR is merged and we can iterate on the design.</p>\n</blockquote>",
        "id": 215363080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604343829
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a> from <code>generic-interpreter</code> to <code>main</code>:</p>\n<blockquote>\n<p>This change re-implements the Cranelift interpreter to use generic values; this makes it possible to do abstract interpretation of Cranelift instructions. In doing so, the interpretation state is extracted from the <code>Interpreter</code> structure and is accessed via a <code>State</code> trait; this makes it possible to not only more clearly observe the interpreter's state but also to interpret using a dummy state (e.g. <code>ImmutableRegisterState</code>). This addition made it possible to implement more of the Cranelift instructions (~70%, ignoring the x86-specific instructions).</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 215364378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604344408
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#pullrequestreview-521922367\">PR Review</a>.</p>",
        "id": 215364537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604344471
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323#discussion_r516198175\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I documented it better and left it as-is.</p>\n</blockquote>",
        "id": 215364538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604344471
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2323\">PR #2323</a>.</p>",
        "id": 215373820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604348889
    }
]