[
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>This is necessary to implement the <code>unsized_locals</code> rust feature.</p>\n<p>cc <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/15\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/15</a></p>\n</blockquote>",
        "id": 281218295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651697801
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1562652483\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>As per <a href=\"https://github.com/rust-lang/compiler-team/issues/630\">https://github.com/rust-lang/compiler-team/issues/630</a> unsized locals will be removed from the compiler. No need to implement them in cg_clif any longer. It would still be necessary for implementing a C compiler based on Cranelift though.</p>\n</blockquote>",
        "id": 361011478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685009921
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1562678384\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>I no longer maintain rcc and don't have time to work on this.</p>\n</blockquote>",
        "id": 361016518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685011140
    },
    {
        "content": "<p>jyn514 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1562678384\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>I no longer maintain saltwater-cc and don't have time to work on this.</p>\n</blockquote>",
        "id": 361016639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685011174
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1563260005\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>Okay, I guess let's close this issue. If somebody wants this feature in the future, feel free to re-open this issue then.</p>\n</blockquote>",
        "id": 361123455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685035545
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>This is necessary to implement the <code>unsized_locals</code> rust feature.</p>\n<p>cc <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/15\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/15</a></p>\n</blockquote>",
        "id": 361123457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685035545
    },
    {
        "content": "<p>bryal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1933755806\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>I want to implement something similar to Swift's approach to unboxed polymorphism using Value Witness Tables.[1] <code>alloca</code> is needed to be able to put generic intermediate values on the stack, or we'll have to make a heap allocation for the out-parameter of every other function call. Of course there are optimizations that can alleviate the issue even without <code>alloca</code>, but it would be much more performant and convenient to just have <code>alloca</code> in the first place.</p>\n<p>[1] <a href=\"https://youtu.be/ctS8FzqcRug?t=267\">Implementing Swift Generics @ 2017 LLVM Developer's Meeting </a></p>\n</blockquote>",
        "id": 420425176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707387258
    },
    {
        "content": "<p>jameysharp reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>This is necessary to implement the <code>unsized_locals</code> rust feature.</p>\n<p>cc <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/15\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/15</a></p>\n</blockquote>",
        "id": 420543269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707426965
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1934945367\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>That use-case makes sense to me, @bryal.</p>\n<p>I gather your interest is related to <a href=\"https://git.sr.ht/~jojo/kapreolo/commit/93672f5\">https://git.sr.ht/~jojo/kapreolo/commit/93672f5</a>, right? I like your current workaround of allocating a fixed-size stack slot and falling back to a heap allocation if you need more space, but we can definitely discuss how <code>alloca</code> could work in Cranelift.</p>\n<p>The suggestions that folks made several years ago have some associated costs, both in runtime when accessing stack slots, and in maintenance time. We'll just have to consider those costs carefully in this discussion.</p>\n</blockquote>",
        "id": 420543272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707426966
    },
    {
        "content": "<p>bryal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1935582340\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>Exactly, @jameysharp, that's the one.</p>\n<p>I'm not intimately familiar with any concrete ISAs. Before Cranelift, my only experience with code at this level was using LLVM. I've had to consider calling conventions, but not much more than that. That is to say, I'm not sure I have much to contribute in discussion of how <code>alloca</code> should work here.</p>\n<p>That being said, if we manage to come up with a clear plan, I'd be happy to help out with the manual labour.</p>\n</blockquote>",
        "id": 420612862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707470478
    },
    {
        "content": "<p>bryal edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1935582340\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>Exactly, @jameysharp, that's the one.</p>\n<p>I'm not intimately familiar with any concrete ISAs. Before Cranelift, my only experience with code at this level was using LLVM. I've had to consider calling conventions, but not much more than that. That is to say, I'm not sure I have much to contribute to the discussion of how <code>alloca</code> should work here.</p>\n<p>That being said, if we manage to come up with a clear plan, I'd be happy to help out with the manual labour.</p>\n</blockquote>",
        "id": 420612936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707470519
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1939663097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>I talked with several of the other people working on Cranelift (@cfallin, @fitzgen, @elliottt, and @lpereira) about this today and there is quite a bit to say about it, which I will try to organize here. If I misrepresent any of their positions I hope they will speak up.</p>\n<p>First off, we would welcome a PR demonstrating how this could work! But at least among the people I talked with, working on <code>alloca</code> support is unlikely to be a priority for the moment. We think it's surprisingly complicated to support in conjunction with Cranelift's other goals, and the complexity is difficult for us to justify committing to without a more substantial use case. We have suggestions for things you could try instead though.</p>\n<p>There are several reasons why a fixed-size stack frame is much easier to deal with. One is that Windows requires stack-probing in the function prologue, and while I assume there's a way to make that work with <code>alloca</code>, the specifics are a research question that we'd need somebody to answer.</p>\n<p>A larger reason is that accessing stack slots for spilled registers needs to be as cheap as possible. Currently there are two registers we can add fixed offsets to in order to find any stack slot in the current frame: specifically, each target has a frame pointer and a stack pointer. On x86-64 we could choose to use the frame pointer to access everything, which would allow <code>alloca</code> to move the stack pointer without doing any harm. On aarch64, however, there's a cost to using negative offsets, and for frames larger than something like 128 bytes, accessing stack slots would need an extra instruction. However, the ARM ABI doesn't require the frame layout we use now (\"<a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst\">The location of the frame record within a stack frame is not specified</a>\") so a step toward making this work could be to change our frame layout on aarch64 so that all stack slots are at positive offsets from the frame pointer. We're not certain of other consequences of that change, though.</p>\n<p>You already have a workaround where you fall back to malloc for large allocations, which is a good approach. In a comment you noted that you're \"not sure we can [free] this manually. The temporary may be passed as an arg in a tail call.\" I'd note that <code>alloca</code> wouldn't work in that case either as the allocated space would be part of the caller's frame that's overwritten by the tail call. Anywhere that you can use <code>alloca</code>, you can also safely use <code>malloc</code>/<code>free</code>, at some performance cost.</p>\n<p>To avoid the performance cost of heap allocations, one suggestion that we came up with is that you could allocate a separate stack that is under your compiler's control, rather than trying to share it with the stack used for calling conventions and register allocation. This kind of \"shadow stack\" is a common solution when data lifetimes are tied to function call scopes. Allocation and deallocation are constant-time in the common and amortized cases, just like <code>alloca</code>, but you don't need magic code-generator support. I think this is your best bet.</p>\n<p>I'm going to go ahead and close this issue again to reflect that this is not currently planned, but we still welcome further discussion.</p>\n</blockquote>",
        "id": 421137447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707775225
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>This is necessary to implement the <code>unsized_locals</code> rust feature.</p>\n<p>cc <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/15\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/15</a></p>\n</blockquote>",
        "id": 421137724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707775336
    },
    {
        "content": "<p>bryal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105#issuecomment-1941077160\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1105\">issue #1105</a>:</p>\n<blockquote>\n<p>Thank you @jameysharp for your work and thank you all for your input! Indeed I had not yet stopped to consider how my stack temporaries would play with tail calls. As I intend to employ optimized tail calls extensively in my generated code, you're of course right that this approach will not work as I had planned. I assume Swift does not (or, in 2017, did not) guarantee TCO in the same way, for the <code>alloca</code> to work for them. </p>\n<p>I'll see about using a shadow stack instead -- thanks for the suggestion! Now I need to think a bit about indirectly stored temporaries, tail recursion, and memory leaks.</p>\n<p>For my part, there's no need to implement this anymore.</p>\n</blockquote>",
        "id": 421213772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707819484
    }
]