[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs #7688</p>\n<p>Currently, developers can define resources via <code>Linker::resource</code>, but they can not get a handle to the <code>Resource&lt;T&gt;</code> from a <code>ResourceAny</code>, which is passed to e.g. <code>Linker::func_new</code> functions.</p>\n<h4>Benefit</h4>\n<p>Most importantly, it allows usage of resources for dynamically-typed functions, e.g. such as when WIT definition is not known at compilation time</p>\n<h4>Implementation</h4>\n<p>This should quite similar to #7688, we should make sure to account for the own/borrow state and possibly call the destructor of on <code>Drop</code></p>\n<h4>Alternatives</h4>\n<p>The only alternative seems to be not supporting dynamically-typed functions utilizing resources, developers may use macros/templating to generate all possible type bounds of imported functions at compile time and choose the right one at runtime, but that is very complex and hard to maintain</p>\n<p>A reasonable alternative could be using the \"partially-typed\" bound with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">https://github.com/bytecodealliance/wasmtime/issues/7701</a>, but it still seems preferable to support fully-dynamic use cases</p>\n</blockquote>",
        "id": 408954379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702998880
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs #7688</p>\n<p>Currently, developers can define resources via <code>Linker::resource</code>, but they can not get a handle to the <code>Resource&lt;T&gt;</code> from a <code>ResourceAny</code>, which is passed to e.g. <code>Linker::func_new</code> functions.</p>\n<h4>Benefit</h4>\n<p>Most importantly, it allows usage of resources for dynamically-typed functions, e.g. such as when WIT definition is not known at compilation time</p>\n<h4>Implementation</h4>\n<p>This should be quite similar to #7688, we should make sure to account for the own/borrow state and possibly call the destructor of on <code>Drop</code></p>\n<h4>Alternatives</h4>\n<p>The only alternative seems to be not supporting dynamically-typed functions utilizing resources, developers may use macros/templating to generate all possible type bounds of imported functions at compile time and choose the right one at runtime, but that is very complex and hard to maintain</p>\n<p>A reasonable alternative could be using the \"partially-typed\" bound with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">https://github.com/bytecodealliance/wasmtime/issues/7701</a>, but it still seems preferable to support fully-dynamic use cases</p>\n</blockquote>",
        "id": 408954456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702998905
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs #7688</p>\n<p>Currently, developers can define resources via <code>Linker::resource</code>, but they can not get a handle to the <code>Resource&lt;T&gt;</code> from a <code>ResourceAny</code>, which is passed to e.g. <code>Linker::func_new</code> functions.</p>\n<h4>Benefit</h4>\n<p>Most importantly, it allows usage of resources for dynamically-typed functions, e.g. such as when WIT definition is not known at compilation time</p>\n<h4>Implementation</h4>\n<p>This should be quite similar to #7688, we should make sure to account for the own/borrow state and possibly call the destructor on <code>Drop</code></p>\n<h4>Alternatives</h4>\n<p>The only alternative seems to be not supporting dynamically-typed functions utilizing resources, developers may use macros/templating to generate all possible type bounds of imported functions at compile time and choose the right one at runtime, but that is very complex and hard to maintain</p>\n<p>A reasonable alternative could be using the \"partially-typed\" bound with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">https://github.com/bytecodealliance/wasmtime/issues/7701</a>, but it still seems preferable to support fully-dynamic use cases</p>\n</blockquote>",
        "id": 408954480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702998913
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704#issuecomment-1862960706\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<p>cc @alexcrichton, we briefly discussed this earlier</p>\n</blockquote>",
        "id": 408954540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702998935
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs #7688 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a></p>\n<p>Currently, developers can define resources via <code>Linker::resource</code>, but they can not get a handle to the <code>Resource&lt;T&gt;</code> from a <code>ResourceAny</code>, which is passed to e.g. <code>Linker::func_new</code> functions.</p>\n<h4>Benefit</h4>\n<p>Most importantly, it allows usage of resources for dynamically-typed functions, e.g. such as when WIT definition is not known at compilation time</p>\n<h4>Implementation</h4>\n<p>This should be quite similar to #7688, we should make sure to account for the own/borrow state and possibly call the destructor on <code>Drop</code></p>\n<h4>Alternatives</h4>\n<p>The only alternative seems to be not supporting dynamically-typed functions utilizing resources, developers may use macros/templating to generate all possible type bounds of imported functions at compile time and choose the right one at runtime, but that is very complex and hard to maintain</p>\n<p>A reasonable alternative could be using the \"partially-typed\" bound with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">https://github.com/bytecodealliance/wasmtime/issues/7701</a>, but it still seems preferable to support fully-dynamic use cases</p>\n</blockquote>",
        "id": 408954590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1702998956
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7704\">issue #7704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Refs #7688 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7676\">https://github.com/bytecodealliance/wasmtime/issues/7676</a></p>\n<p>Currently, developers can define resources via <code>Linker::resource</code>, but they can not get a handle to the <code>Resource&lt;T&gt;</code> from a <code>ResourceAny</code>, which is passed to e.g. <code>Linker::func_new</code> functions.</p>\n<h4>Benefit</h4>\n<p>Most importantly, it allows usage of resources for dynamically-typed functions, e.g. such as when WIT definition is not known at compilation time</p>\n<h4>Implementation</h4>\n<p>This should be quite similar to #7688, we should make sure to account for the own/borrow state and possibly call the destructor on <code>Drop</code></p>\n<h4>Alternatives</h4>\n<p>The only alternative seems to be not supporting dynamically-typed functions utilizing resources, developers may use macros/templating to generate all possible type bounds of imported functions at compile time and choose the right one at runtime, but that is very complex and hard to maintain</p>\n<p>A reasonable alternative could be using the \"partially-typed\" bound with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7701\">https://github.com/bytecodealliance/wasmtime/issues/7701</a>, but it still seems preferable to support fully-dynamic use cases</p>\n</blockquote>",
        "id": 411220994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704385555
    }
]