[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114#issuecomment-1741332160\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114\">issue #7114</a>:</p>\n<blockquote>\n<blockquote>\n<p>This PR also includes a test at the Wasmtime level. Note that it takes ~22s to run on my (relatively fast) laptop, because it has to run until it runs out of VRegs in a debug build of the compiler. We could remove the test if we feel we're otherwise confident.</p>\n</blockquote>\n<p>I think it is fine to keep for now, and if it becomes a pain then we can figure out what to do.</p>\n</blockquote>",
        "id": 393985572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696012738
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114#issuecomment-1741404073\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114\">issue #7114</a>:</p>\n<blockquote>\n<p>Updated, thanks!</p>\n<blockquote>\n<p>Would it perhaps be worth handling other callers of <code>vregs.alloc</code> as well? There's a number of other <code>vregs.alloc(...).unwrap()</code> through the ABI code. Additionally there's preexisting error handling for <code>vregs.alloc(...)?</code> and could that use this same pattern as well? It might be relatively simplifying to assume that vreg allocation always succeeds and only at the end is the global error checked to see if allocation actually failed.</p>\n</blockquote>\n<p>Ah, yes, I had missed the ABI code that also unwrapped -- the <code>VRegAllocator</code> now has an <code>alloc_with_deferred_error()</code>. I left the original <code>Result</code>-returning method because there are a few uses in the pre-lowering-loop setup and IMHO it was a bit more awkward to remember to check in all the right toplevel places than to have a special method used during the main lowering loop.</p>\n</blockquote>",
        "id": 393994820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696016920
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114#issuecomment-1741420892\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7114\">issue #7114</a>:</p>\n<blockquote>\n<p>Yep, the ABI code in question is invoked during lowering (at callsites, or at a return instruction) and the last basic block processed will do its check after all other lowering is complete, so everything should be caught, I think.</p>\n</blockquote>",
        "id": 393997019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696017933
    }
]