[
    {
        "content": "<p>dheaton-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>:</p>\n<blockquote>\n<p>Implemented the <code>Extractlane</code>, <code>UaddSat</code>, and <code>UsubSat</code> opcodes for the interpreter,<br>\nand added helper functions for working with SIMD vectors (<code>extractlanes</code>, <code>vectorizelanes</code>,<br>\nand <code>binary_arith</code>).</p>\n<p>Copyright (c) 2021, Arm Limited</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 249603213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629127401
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-730932496\">PR review</a>.</p>",
        "id": 249616300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133507
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r689701258\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to add a <code>test run</code> with the <code>x86_64</code> and <code>aarch64</code> backend to these tests as well? That way we get some more SIMD coverage on those targets. The <code>s390x</code> doesn't support SIMD yet, so no point in adding it.</p>\n<p>Also could we move the test files to the <code>runtests</code> dir since we are testing run targets and the interpreter?<br>\n</p>\n</blockquote>",
        "id": 249616301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133507
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-730932496\">PR review</a>.</p>",
        "id": 249616302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133507
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r689701933\">PR review comment</a>:</p>\n<blockquote>\n<p>I could be wrong, but I think this annotation is only needed on <code>x86_64</code> targets.</p>\n</blockquote>",
        "id": 249616303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133507
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r689701258\">PR review comment</a>.</p>",
        "id": 249616514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629133593
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-730962467\">PR review</a>.</p>",
        "id": 249620250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629135078
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r689724314\">PR review comment</a>:</p>\n<blockquote>\n<p>This might need to be more strict:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        assert!(ty.is_vector() &amp;&amp; elem_ty.bytes() == 16);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249620251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629135078
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r689727327\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think about implementing these instructions as: convert to larger type, use already existing add/sub, convert back to the right type with saturation (maybe with a new saturating <code>ValueConversionKind</code>). I can't remember how many instructions end up being saturating ones but if there are more it could reduce the size of <code>DataValue</code>.</p>\n</blockquote>",
        "id": 249620252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629135078
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-730962467\">PR review</a>.</p>",
        "id": 249620253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629135078
    },
    {
        "content": "<p>dheaton-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-731488982\">PR review</a>.</p>",
        "id": 249691663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629189563
    },
    {
        "content": "<p>dheaton-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690159376\">PR review comment</a>:</p>\n<blockquote>\n<p>Looking at the list of opcodes, there's a few but given that a lot of them are signed/unsigned variants of each other (which I don't think will need re-implementing each time, as in this case for example), I think there'd be ~5 saturating ops in DataValue. We could do that suggestion though if preferred, which might make implementing opcodes like the <code>narrow</code> set easier later (the only question is if <code>[I|U]128</code> is supposed to be supported; I see a few of the other functions in DataValue seem to ignore it and being the typically largest integer type would require different implementation).</p>\n</blockquote>",
        "id": 249691664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629189563
    },
    {
        "content": "<p>dheaton-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-731513604\">PR review</a>.</p>",
        "id": 249693592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629191032
    },
    {
        "content": "<p>dheaton-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690178253\">PR review comment</a>:</p>\n<blockquote>\n<p>Trying this I'm getting errors that <code>i32x4</code> is an unsupported type for <code>uadd_sat</code> and <code>usub_sat</code> on the <code>test run</code> side -- should that be the case?</p>\n</blockquote>",
        "id": 249693593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629191032
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-731609946\">PR review</a>.</p>",
        "id": 249701628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197259
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690252937\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be easier to do a blanket impl of the <code>Value</code> trait like: <code>impl&lt;T: Value, const N: usize&gt; Value for [T; N]</code>? And have a function that would convert the SIMD values into/from the array?</p>\n<p>I don't know how many of these functions we are going to need, but it might be worth considering in the future.</p>\n<p>Although I think this would require rust 1.51 with <code>min_const_generics</code>. Which might be higher than our minimum requirements.</p>\n</blockquote>",
        "id": 249701629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197259
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-731611845\">PR review</a>.</p>",
        "id": 249701750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197365
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690254089\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    for (lhs, rhs) in arg0.iter().zip(arg1.iter()) {\n        // The initial Value::int needs to be on a separate line so the\n        // compiler can determine concrete types.\n        let mut lhs: V = Value::int(*lhs, vector_type.lane_type())?;\n        let mut rhs: V = Value::int(*rhs, vector_type.lane_type())?;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249701751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197365
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690252937\">PR review comment</a>.</p>",
        "id": 249702010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197554
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690254089\">PR review comment</a>.</p>",
        "id": 249702047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197601
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690252937\">PR review comment</a>.</p>",
        "id": 249702172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197707
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690254089\">PR review comment</a>.</p>",
        "id": 249702465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629197917
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-732140419\">PR review</a>.</p>",
        "id": 249765960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629228155
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690657131\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, according to the <a href=\"https://docs.rs/cranelift-codegen/0.76.0/cranelift_codegen/ir/trait.InstBuilder.html#method.uadd_sat\">docs</a>, it should work.</p>\n<p>However, the reason that it probably doesn't work is that its not included in the <a href=\"https://github.com/WebAssembly/simd/blob/main/proposals/simd/SIMD.md#saturating-integer-addition\">WASM SIMD Spec</a>.</p>\n<p>What we usually do in these cases is separate the testcases in two files. <code>8x16</code> / <code>16x8</code> in one file with the run targets, and <code>i32x4</code> / <code>i64x2</code> (could you add testcases for <code>i64x2</code> as well?) into another with just the interpreter.</p>\n<p>I also usually file an issue stating that these are not implemented in the x86_64 and aarch64 backends. We've been finding a lot of code that should compile but doesn't since we started adding these tests instead of relying on the wasm test suite.</p>\n</blockquote>",
        "id": 249765962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629228156
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690657131\">PR review comment</a>.</p>",
        "id": 249766846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629228585
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r690657131\">PR review comment</a>.</p>",
        "id": 249766874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629228600
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>.</p>",
        "id": 249828445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629280827
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-732725930\">PR review</a>.</p>",
        "id": 249833735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629284676
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>.</p>",
        "id": 249849420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629293613
    },
    {
        "content": "<p><strong>dheaton-arm</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a>.</p>",
        "id": 249882421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629307116
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-733191100\">PR review</a>.</p>",
        "id": 249887007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629309157
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r691479758\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it might be slightly preferable here to use <code>SmallVec</code>, perhaps <code>SmallVec&lt;[i128; 1]&gt;</code> or similar (and typedef it so we can easily change it) -- while we don't expect the interpreter to be <em>fast</em>, it's still good to avoid an unnecessary heap allocation per execution of an instruction.</p>\n</blockquote>",
        "id": 249887009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629309157
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-733415029\">PR review</a>.</p>",
        "id": 249921397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629327068
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r691656182\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, it sounds like the current approach will be fine. </p>\n</blockquote>",
        "id": 249921398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629327068
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-733415172\">PR review</a>.</p>",
        "id": 249921412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629327086
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r691656341\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for adding these instructions!</p>\n</blockquote>",
        "id": 249921413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629327086
    },
    {
        "content": "<p>dheaton-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-733820156\">PR review</a>.</p>",
        "id": 249966591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629368690
    },
    {
        "content": "<p>dheaton-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r691984737\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this specifically for <code>extractlanes</code> or would this also apply to the input to <code>vectorizelanes</code>? Just want to check in case you wanted basically all the <code>Vec</code>s in this section of code changing, whilst I'm thinking that parameters aren't an issue (which I may be wrong about) and <code>Vec</code> parameters seem more general / flexible (accepting both <code>SmallVec</code> and <code>Vec</code>).</p>\n</blockquote>",
        "id": 249966593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629368690
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>.</p>",
        "id": 250000405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629385823
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r692418856\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess the advice applies generally. Specifically, this:</p>\n<blockquote>\n<p><code>Vec</code> parameters seem more general / flexible (accepting both <code>SmallVec</code> and <code>Vec</code>)</p>\n</blockquote>\n<p>is not quite right; <code>Vec</code> is a specific type that requires its contents to be heap-allocated. The more idiomatic Rust type for \"any array of values in memory\" would be a slice, i.e. <code>&amp;[128]</code>, which one can get with <code>&amp;vec[..]</code> or <code>&amp;smallvec[..]</code>; but that only works for inbound args because it has no ownership. Returning a <code>SmallVec</code> is a technique we use elsewhere pretty successfully so I think it's' reasonable here too :-)</p>\n</blockquote>",
        "id": 250036420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629401107
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-734380678\">PR review</a>.</p>",
        "id": 250036421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629401107
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r692418856\">PR review comment</a>.</p>",
        "id": 250036497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629401148
    },
    {
        "content": "<p>dheaton-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-735839368\">PR review</a>.</p>",
        "id": 250322299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629706516
    },
    {
        "content": "<p>dheaton-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r693757546\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I was basing that statement off testing where using a <code>Vec</code> parameter but passing a <code>SmallVec</code> was accepted by the compiler and built successfully, but the inverse (using a <code>SmallVec</code> parameter but passing a <code>Vec</code>) was blocked by the compiler. I wasn't sure about if that made the <code>SmallVec</code> behave like a <code>Vec</code> with regards to heap allocations, however, hence my question.</p>\n<blockquote>\n<p>Returning a SmallVec is a technique we use elsewhere pretty successfully</p>\n</blockquote>\n<p>I understood that, and changed it to behave like that in 0089e15; I was more wondering about the input parameters to <code>vectorizelanes</code>. I'm gathering from your response though that the preference is for those to be a slice?</p>\n</blockquote>",
        "id": 250322301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629706516
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>.</p>",
        "id": 250341370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629720117
    },
    {
        "content": "<p>dheaton-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#discussion_r693757546\">PR review comment</a>.</p>",
        "id": 250342864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629721052
    },
    {
        "content": "<p><strong>dheaton-arm</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a>.</p>",
        "id": 250375846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629736092
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188#pullrequestreview-736762255\">PR review</a>.</p>",
        "id": 250440485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629778150
    },
    {
        "content": "<p>dheaton-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a> from <code>implement-satarith</code> to <code>main</code>.</p>",
        "id": 250457338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629794830
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3188\">PR #3188</a>.</p>",
        "id": 250640588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629907401
    }
]