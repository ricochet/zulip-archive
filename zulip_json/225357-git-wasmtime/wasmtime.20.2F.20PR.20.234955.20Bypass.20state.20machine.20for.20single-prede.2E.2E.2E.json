[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955\">PR #4955</a> from <code>shortcut-use-var</code> to <code>main</code>:</p>\n<blockquote>\n<p>This kept bothering me and I couldn't leave well enough alone. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> It's yet another take on @adambratschikaye's issue #4923.</p>\n<p>In the common case where there is a chain of sealed blocks that each have exactly one predecessor, we can keep track of any sub-sequence of those blocks in O(1) space. So there's no need to use the state machine stack to propagate variable definitions back along the chain.</p>\n<p>Instead, we can do one loop to find which block to stop at, then either get the variable definition from that block or introduce a block parameter there, and finally do one more loop to update variable definitions in all the intervening blocks.</p>\n<p>The existing implementation already had to do a graph traversal to propagate variable definitions correctly, so this doesn't visit any more blocks than before. However, this change also makes it possible to integrate cycle detection with the graph traversal. That eliminates the need for the in_predecessor_cycle flags, and any possibility of spiky performance profiles in maintaining those flags.</p>\n<p>To keep the cost of cycle detection down, I used epoch counters: a block is only considered \"visited\" if its epoch counter is equal to the SSABuilder's counter. This lets me amortize the cost of resetting the \"visited\" flags across 2^32 graph traversals. I'm guessing that in practice the epoch counter never actually wraps, making flag maintenance effectively O(1).</p>\n<p>According to DHAT, this reduces by 0.3% the number of instructions executed when compiling the pulldown-cmark benchmark from Sightglass. It also reduces the number of bytes read and number of bytes written by about 1.5MiB each, despite increasing the total memory allocated by about 165KiB.</p>\n<p>According to Sightglass, the runtime improvement is better than the numbers from DHAT suggest. My previous attempt to amortize cycle detection costs improved compiler performance, but this patch improves things even further.</p>\n<p>compilation :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm</p>\n<p>Δ = 30421181.40 ± 21622798.42 (confidence = 99%)</p>\n<p><a href=\"http://shortcut-use-var-b45072fc5.so\">shortcut-use-var-b45072fc5.so</a> is 1.03x to 1.15x faster than <a href=\"http://main-bd870a9d6.so\">main-bd870a9d6.so</a>!</p>\n<p>[230303200 371040077.28 447540220] <a href=\"http://main-bd870a9d6.so\">main-bd870a9d6.so</a><br>\n  [228324186 340618895.88 406919480] <a href=\"http://shortcut-use-var-b45072fc5.so\">shortcut-use-var-b45072fc5.so</a></p>\n<p>compilation :: cycles :: benchmarks/spidermonkey/benchmark.wasm</p>\n<p>Δ = 322167491.42 ± 263599878.59 (confidence = 99%)</p>\n<p><a href=\"http://shortcut-use-var-b45072fc5.so\">shortcut-use-var-b45072fc5.so</a> is 1.01x to 1.07x faster than <a href=\"http://main-bd870a9d6.so\">main-bd870a9d6.so</a>!</p>\n<p>[9018928022 9172881615.14 9380337158] <a href=\"http://main-bd870a9d6.so\">main-bd870a9d6.so</a><br>\n  [5257172910 8850714123.72 9524127710] <a href=\"http://shortcut-use-var-b45072fc5.so\">shortcut-use-var-b45072fc5.so</a></p>\n<p>compilation :: cycles :: benchmarks/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[156992858 174357302.96 270010020] <a href=\"http://main-bd870a9d6.so\">main-bd870a9d6.so</a><br>\n  [120515776 171661174.34 269878252] <a href=\"http://shortcut-use-var-b45072fc5.so\">shortcut-use-var-b45072fc5.so</a></p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 300615654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664090261
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955\">PR #4955</a>.</p>",
        "id": 300615655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664090261
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122784578\">PR review</a>.</p>",
        "id": 301129079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122784578\">PR review</a>.</p>",
        "id": 301129081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981779386\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we have a doc-comment here indicating what a \"new epoch\" means (amortized visited-bit-clearing) and when we do it?</p>\n</blockquote>",
        "id": 301129083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981779058\">PR review comment</a>:</p>\n<blockquote>\n<p>This code is likely never going to be visited at all, because other implementation limits will prevent us from processing a function of 2^32 blocks. And it'll thus be dead and untested code. I think I'd rather see an assert here that the epoch doesn't wrap (or otherwise do a <code>checked_add(1).expect(\"epoch wrapped\")</code> or somesuch).</p>\n</blockquote>",
        "id": 301129084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981776365\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we have a comment here to describe what the semantics of this function are? E.g., when does it return <code>Some(...)</code>, and which block is returned? What must <code>epoch</code> be?</p>\n</blockquote>",
        "id": 301129085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981782082\">PR review comment</a>:</p>\n<blockquote>\n<p>there's something subtle here about detecting/avoiding cycles vs. not visiting a block more than once. Not visiting more than once certainly avoids cycles; but do we need to do something else for them? Could you comment in which cases cycles may occur and why we are correct (insert the appropriate blockparams) in such cases?</p>\n</blockquote>",
        "id": 301129086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981781637\">PR review comment</a>:</p>\n<blockquote>\n<p>I would have, naively, expected <code>new_epoch</code> to be called whenever we modify predecessor info somehow. Perhaps my mental model for what exactly we are caching is wrong. Could we have a comment here (or somewhere) describing the overall scheme?</p>\n<p>Basically I'm looking for a from-first-principles description of why we do this -- something like: when traversing backward to find defs, we want to not visit a block more than once; we could do this by using visited-flags; we can do this more cheaply by setting a field for \"last epoch in which visited\" to a freshly allocated epoch number; etc.</p>\n<p>The \"epoch\" name might be confusing me too. Is it really a \"variable-def search instance number\" (i.e., each search gets a new index/epoch/...)?</p>\n</blockquote>",
        "id": 301129087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664318052
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122841297\">PR review</a>.</p>",
        "id": 301135971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664322406
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981816817\">PR review comment</a>:</p>\n<blockquote>\n<p>It isn't currently a new epoch per block: it's per call to <code>use_var</code> that doesn't find a definition for the variable within the same block, and there could be a lot of those. I'm not sure whether _that_ can happen 2^32 times before hitting other implementation limits. But I'm happy to turn wrapping the counter into a panic, and revisit it later if anyone actually hits it.</p>\n</blockquote>",
        "id": 301135972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664322406
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981819093\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I wonder what the impact of using a <code>u64</code> instead would be then? That would ensure that for all practical purposes we <em>never</em> wrap.</p>\n</blockquote>",
        "id": 301136421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664322728
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122844325\">PR review</a>.</p>",
        "id": 301136422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664322728
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122849282\">PR review</a>.</p>",
        "id": 301137238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664323295
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981823142\">PR review comment</a>:</p>\n<blockquote>\n<p>I considered it, but there were 7 bytes of padding in <code>SSABlockData</code> so a <code>u32</code> was the biggest that would avoid making that struct bigger. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>That said, epoch is only used when the block is sealed, and <code>undef_variables</code> can only be non-empty when the block is not yet sealed, so I could overlap them with an enum... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>And with _that_ said, I should go try a <code>SecondaryMap&lt;Block, bool&gt;</code> to store visited flags instead of any of this epoch machinery and see if that easier-to-explain approach actually has any performance impact.</p>\n</blockquote>",
        "id": 301137239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664323295
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1122871652\">PR review</a>.</p>",
        "id": 301140929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664325736
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r981839444\">PR review comment</a>:</p>\n<blockquote>\n<p>Sightglass claims to be able to tell that the epoch counters are faster, by very small margins. According to hyperfine it's either a wash, or when compiling Spidermonkey, the <code>SecondaryMap</code> might be very slightly faster. DHAT says the epoch counters allocate slightly less (naturally), read 0.04% fewer bytes, and write 4% fewer bytes (11MiB).</p>\n<p>In short, the epoch counters are better, but not enough better to be worth anyone's confusion. I'm switching to a <code>SecondaryMap</code> of <code>bool</code>.</p>\n</blockquote>",
        "id": 301140930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664325736
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955\">PR #4955</a> from <code>shortcut-use-var</code> to <code>main</code>.</p>",
        "id": 301324645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664398553
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1124347393\">PR review</a>.</p>",
        "id": 301324700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664398567
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#discussion_r982854611\">PR review comment</a>:</p>\n<blockquote>\n<p>Actually, switching to <code>EntitySet</code> now that I discovered that exists. DHAT says this does 0.5% more writes than epoch counters and 0.07% more reads, which is a small enough margin that I don't care. It also executes 0.2% more instructions than <code>main</code>, which executes 0.2% more instructions than using epoch counters. </p>\n<p>I've also tested <code>HashSet</code> but that executes a lot more instructions as well as doing even more reads and writes.</p>\n</blockquote>",
        "id": 301324701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664398567
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955#pullrequestreview-1124415476\">PR review</a>.</p>",
        "id": 301337297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664403183
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4955\">PR #4955</a>.</p>",
        "id": 301348718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664409910
    }
]