[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a> from <code>fitzgen:stack-slots-and-alias-analysis</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>And do our usual alias analysis stuff on it.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 452436675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721335267
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>.</p>",
        "id": 452436676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721335267
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>.</p>",
        "id": 452436677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721335267
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>.</p>",
        "id": 452439440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336126
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237559231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<p>If you have a store with no alias flags and a load with the stack alias flag will they be considered as potentially aliasing? If not, this PR makes it impossible to combine loads and stores on the output of stack_addr with stack_load and stack_store.</p>\n<p>Should the docs for stack_load and stack_store be updated to indicate that the stack alias region is used?</p>\n</blockquote>",
        "id": 452439484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336147
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#pullrequestreview-2186892760\">PR review</a>.</p>",
        "id": 452439502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336156
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237563951\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you have a store with no alias flags and a load with the stack alias flag will they be considered as potentially aliasing? If not, this PR makes it impossible to combine loads and stores on the output of stack_addr with stack_load and stack_store.</p>\n<p>Should the docs for stack_load and stack_store be updated to indicate that the stack alias region is used?</p>\n</blockquote>\n<p>You can still arrange for them to be combined, but you have to specify the <code>stack</code> alias region yourself on the manually-legalized loads and stores.</p>\n<p>I'll update the docs tho, good point.</p>\n</blockquote>",
        "id": 452439692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336241
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237573311\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<blockquote>\n<p>You can still arrange for them to be combined, but you have to specify the stack alias region yourself on the manually-legalized loads and stores.</p>\n</blockquote>\n<p>That basically means I can no longer use stack_load and stack_store in cg_clif. A stack_addr result can be passed to arbitrary functions which don't know whether the pointer argument is on the stack or the heap. Maybe you could only apply the stack alias region if there is no stack_addr on the same stack slot anywhere inside the function?</p>\n</blockquote>",
        "id": 452440095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336415
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237585755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<p>This would also be the first UB case where the generator of the IR doesn't explicitly opt in. UB for regular loads and stores is fully opt in. Even being able to access the pointer target is not UB if you don't set the right flag to indicate that the load/store must never fail.</p>\n</blockquote>",
        "id": 452440526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336616
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237591281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<p>Perhaps we could accept an alias region on the stack-slot declaration which is inherited by the <code>stack_addr</code>? That way, by default, we retain today's behavior, but producers that control aliasing more tightly (e.g. ensure the pointer doesn't escape) could get better optimization.</p>\n</blockquote>",
        "id": 452440689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336688
    },
    {
        "content": "<p>fitzgen closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>.</p>",
        "id": 452440730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336712
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974#issuecomment-2237592570\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8974\">PR #8974</a>:</p>\n<blockquote>\n<p>Okay, on reflection let's skip this for the time being. Wasmtime actually has similar issues where we would need to start threading memflags through various places.<br>\n</p>\n</blockquote>",
        "id": 452440731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721336712
    }
]