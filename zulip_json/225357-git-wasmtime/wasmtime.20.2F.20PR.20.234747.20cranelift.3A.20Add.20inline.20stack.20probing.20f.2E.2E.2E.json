[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds inline stack probing for the x64 backend. Opening as a draft since there are still some pending questions.</p>\n<p>This is feature gated behind a <code>enable_inline_probestack</code> and also requires the user to enable <code>enable_probestack</code>.</p>\n<p>Currently we have two implementations, If we only need to probe a few stack pages, we unroll the probes. If we need more we fall back to using a loop.</p>\n<p>Closes: #2299<br>\ncc: @bjorn3 @cfallin </p>\n</blockquote>",
        "id": 294530447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079135
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1079654855\">PR review</a>.</p>",
        "id": 294530486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079165
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950825466\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not too happy about this, and did this mostly as a proof of concept to see if it fixes the issues we were having in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1261#issuecomment-1219307630\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1261#issuecomment-1219307630</a> .</p>\n<p>I think the real solution here is allowing us to emit labels and use those with the regular jump instruction.</p>\n<p><code>gen_prologue</code> curently does two things:</p>\n<ul>\n<li>Initializes part of the <code>Callee</code> struct (calculates stack sizes)</li>\n<li>Generates the prologue instructions</li>\n</ul>\n<p>These instructions aren't emitted immediatley, instead we call this early on in vcode emission to initialize the <code>Callee</code> struct, and the only later on emit the previously generated instructions.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/machinst/vcode.rs#L790-L793\">https://github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/machinst/vcode.rs#L790-L793</a></p>\n<p>I think we can change this slightly to allow label emission in <code>gen_prologue</code> by splitting it into two functions.</p>\n<p>One that precomputes the stack sizes and initializes the <code>Callee</code> struct, that is called early on (where the current <code>gen_prologue</code> currently is).</p>\n<p>And a second one that directly emits the prologue instructions. This way we can emit them and at the same time pass a function to generate a label at the current emit point.</p>\n<p>Are there issues with emitting labels so late in the pipeline? And does this sound like a reasonable refactor?<br>\n</p>\n</blockquote>",
        "id": 294530487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079165
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1079654958\">PR review</a>.</p>",
        "id": 294530535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079221
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950825544\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not too happy about this, and did this mostly as a proof of concept to see if it fixes the issues we were having in <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1261#issuecomment-1219307630\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1261#issuecomment-1219307630</a> .</p>\n<p>I think the real solution here is allowing us to emit labels and use those with the regular jump instruction.</p>\n<p><code>gen_prologue</code> curently does two things:</p>\n<ul>\n<li>Initializes part of the <code>Callee</code> struct (calculates stack sizes)</li>\n<li>Generates the prologue instructions</li>\n</ul>\n<p>These instructions aren't emitted immediatley, instead we call this early on in vcode emission to initialize the <code>Callee</code> struct, and the only later on emit the previously generated instructions.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/machinst/vcode.rs#L790-L793\">https://github.com/bytecodealliance/wasmtime/blob/d620705a323e3da59bd90473b4e627c8502b1255/cranelift/codegen/src/machinst/vcode.rs#L790-L793</a></p>\n<p>I think we can change this slightly to allow label emission in <code>gen_prologue</code> by splitting it into two functions.</p>\n<p>One that precomputes the stack sizes and initializes the <code>Callee</code> struct, that is called early on (where the current <code>gen_prologue</code> currently is).</p>\n<p>And a second one that directly emits the prologue instructions. This way we can emit them and at the same time pass a function to generate a label at the current emit point.</p>\n<p>Are there issues with emitting labels so late in the pipeline? And does this sound like a reasonable refactor?<br>\n</p>\n</blockquote>",
        "id": 294530536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079222
    },
    {
        "content": "<p>afonso360 deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950825544\">PR review comment</a>.</p>",
        "id": 294530545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079238
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1079655273\">PR review</a>.</p>",
        "id": 294531326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079753
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1079655273\">PR review</a>.</p>",
        "id": 294531327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079753
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950825890\">PR review comment</a>:</p>\n<blockquote>\n<p>You can only have either outlined or inlined stack probes, not both at the same time. Maybe make it an enum?</p>\n</blockquote>",
        "id": 294531328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661079753
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1079672306\">PR review</a>.</p>",
        "id": 294543275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661087831
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950844867\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that sounds like a good idea.</p>\n</blockquote>",
        "id": 294543277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661087831
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r950844867\">PR review comment</a>.</p>",
        "id": 294543288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661087837
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1081131776\">PR review</a>.</p>",
        "id": 294764961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661201506
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r951901282\">PR review comment</a>:</p>\n<blockquote>\n<p>@afonso360 in principle we <em>could</em> allow for control flow to be inserted this late in the pipeline, but in practice it's a fairly intrusive refactor as we have to somehow communicate out-of-band the label and reference to it (or hack it with an explicit offset as here, but this definitely is not the right answer IMHO as it bakes in a dependence on encoded instruction sizes determined elsewhere in the code, in a way that could lead to a CVE if it later breaks).</p>\n<p>I think the better answer here is to actually have a psuedo-<code>MachInst</code> that represents \"stack-probe loop\" and emits whatever is appropriate. We already have control-flow-inside-an-instruction for cases like <code>TrapIf</code>; this works well enough and maintains the abstraction that an instruction is a single-in, single-out thing (ignoring CLIF-level branches for now), which the rest of the backend assumes. Does that make sense?</p>\n</blockquote>",
        "id": 294764962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661201506
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r951915090\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that does sound reasonable, and a lot easier that performing that refactor. Thanks!</p>\n</blockquote>",
        "id": 294767272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202533
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1081151695\">PR review</a>.</p>",
        "id": 294767273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202533
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 294838341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661249953
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1081887685\">PR review</a>.</p>",
        "id": 294840415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251020
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r952444030\">PR review comment</a>:</p>\n<blockquote>\n<p>I've added a <code>stackprobe_strategy</code> flag, and while right now its just <code>inline</code> and <code>outline</code> I think in the future we can experiment with adding different strategies to mix the two, such as allowing both and in <code>OptLevel::Size</code> emitting the unroll inline or the call, whichever is smallest.</p>\n</blockquote>",
        "id": 294840416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251020
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r952445557\">PR review comment</a>:</p>\n<blockquote>\n<p>Looks like you haven't pushed it yet.</p>\n</blockquote>",
        "id": 294840601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251120
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1081889693\">PR review</a>.</p>",
        "id": 294840603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251120
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r952444030\">PR review comment</a>.</p>",
        "id": 294840827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251240
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 294840931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251317
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1081893768\">PR review</a>.</p>",
        "id": 294840937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251321
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r952448649\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops, fixed</p>\n</blockquote>",
        "id": 294840952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251322
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r952448649\">PR review comment</a>.</p>",
        "id": 294840984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251327
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 294841038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251359
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 294841049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661251370
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> as ready for review.</p>",
        "id": 294878355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661265413
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 296543747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662022683
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1093608412\">PR review</a>.</p>",
        "id": 296698323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065776
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1093608412\">PR review</a>.</p>",
        "id": 296698324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065776
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r960796881\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment is no longer true, is it? I think you can delete it.</p>\n</blockquote>",
        "id": 296698325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065776
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r960801508\">PR review comment</a>:</p>\n<blockquote>\n<p>Minor edits I just noticed:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            // The inline stack probe loop has 3 phases:\n            //\n            // We generate the \"guard area\" register which is essentially the frame_size aligned to\n            // guard_size. We copy the stack pointer and subtract the guard area from it. This\n            // gets us a register that we can use to compare when looping.\n            //\n            // After that we emit the loop. Essentially we just adjust the stack pointer one guard_size'd\n            // distance at a time and then touch the stack by writing anything to it. We use the previously\n            // created \"guard area\" register to know when to stop looping.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 296698327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065776
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r961090751\">PR review comment</a>:</p>\n<blockquote>\n<p>Why do just a few runtests need stack-probing disabled?</p>\n</blockquote>",
        "id": 296698328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662065776
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a> from <code>inline-stackprobing</code> to <code>main</code>.</p>",
        "id": 296701039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662066899
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#pullrequestreview-1094070960\">PR review</a>.</p>",
        "id": 296701516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662067110
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r961109910\">PR review comment</a>:</p>\n<blockquote>\n<p>These tests have stack slots above the threshold where we emit a stack probe. The default strategy is to outline the stack probing to a external function call, but since we never provide an implementation for that anywhere the JIT can't link these tests, so they fail.</p>\n<p>I manually disabled stack probing for these which reflects the old behaviour of force disabling it everywhere.</p>\n</blockquote>",
        "id": 296701517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662067110
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747#discussion_r961109910\">PR review comment</a>.</p>",
        "id": 296701783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662067219
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a>.</p>",
        "id": 296702803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662067674
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4747\">PR #4747</a>.</p>",
        "id": 296710144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662071576
    }
]