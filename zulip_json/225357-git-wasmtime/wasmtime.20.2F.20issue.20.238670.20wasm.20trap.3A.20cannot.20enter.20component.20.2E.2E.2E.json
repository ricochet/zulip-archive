[
    {
        "content": "<p>redoC-A2k opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>hey there how can I sort of clone a wasm in execution the issue is I call the one of the imported function (1st function) from guest on host ( wasm is in execution as of now)<br>\nNow that imported function from guest to wasm calls another function which is exported by host to guest but this function ( exported function  on host) again needs to call different (let's call it 2nd function) imported function from guest and this is the issue .<br>\nDuring this whole process wasm is in execution and how can I call the 2nd function ?</p>\n<p>I tried storing reactor(component) and store in static variable , reactor works fine as it only requires reference while function calling but issue is in case of store while calling imported function I need to provide mutable reference to store . Which I can't as at a time I can't have two mutable reference . For sharing mutable reference - I created a static option containing Store and passed the mutable reference to function like so </p>\n<div class=\"codehilite\" data-code-language=\"let\"><pre><span></span><code>let result: Result&lt;http_types::Response, anyhow::Error&gt; =\n                guest.call_handle_request(&amp;mut *store, &amp;request).await; (1st function) (in main function where I instantiate component)\nlet result = guest.call_jsonnet_call_native_func(&amp;mut *store, &amp;self.0, \"\")\n                        .await (2nd function) (in some other exported function which component calls as a result of calling above imported function)\n</code></pre></div>\n<p>But in above case I am getting error <br>\n<code> wasm trap: cannot enter component instance</code></p>\n<p>I tried creating new store but then I get some different error , if I use that store with reference of Reactor .</p>\n<p>Please help me , I don't want to use core wasm modules . Nor I think I will be able to break the wasm module in two components (as I my wasm module is basically quickjs runtime along with js code the wasm is generated by cargo building to target wasm32-wasi the quickjs_wasm_rs context (javy approach) .</p>\n</blockquote>",
        "id": 439744346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716274681
    },
    {
        "content": "<p>redoC-A2k <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2121889175\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>If needed I can provide more detail </p>\n</blockquote>",
        "id": 439744434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716274711
    },
    {
        "content": "<p>redoC-A2k edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>hey there how can I sort of clone a wasm in execution the issue is I call the one of the imported function (1st function) from guest on host ( wasm is in execution as of now)<br>\nNow that imported function from guest to wasm calls another function which is exported by host to guest but this function ( exported function  on host) again needs to call different (let's call it 2nd function) imported function from guest and this is the issue .<br>\nDuring this whole process wasm is in execution and how can I call the 2nd function ?</p>\n<p>I tried storing reactor(component) and store in static variable , reactor works fine as it only requires reference while function calling but issue is in case of store while calling imported function I need to provide mutable reference to store . Which I can't as at a time I can't have two mutable reference . For sharing mutable reference - I created a static option containing Store and passed the mutable reference to function like so </p>\n<div class=\"codehilite\" data-code-language=\"let\"><pre><span></span><code>let result: Result&lt;http_types::Response, anyhow::Error&gt; =\n                guest.call_handle_request(&amp;mut *store, &amp;request).await; (1st function) (in main function where I instantiate component)\nlet result = guest.call_jsonnet_call_native_func(&amp;mut *store, &amp;self.0, \"\")\n                        .await (2nd function) (in some other exported function which component calls as a result of calling above imported function)\n</code></pre></div>\n<p>But in above case I am getting error <br>\n<code> wasm trap: cannot enter component instance</code></p>\n<p>I tried creating new store but then I get some different error , if I use that store with reference of Reactor .</p>\n<p>Please help me , I don't want to use core wasm modules . Nor I think I will be able to break the wasm module in two components (as I my wasm module is basically quickjs runtime along with js code the wasm is generated by cargo building to target wasm32-wasi the quickjs_wasm_rs context (javy approach, fermyon spin approach) .</p>\n</blockquote>",
        "id": 439745401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716275133
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2122818056\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>Thanks for the report! What you're running into here is the relatively strict rules around reentrance in the component model. Currently once a component calls an import, provided by the host, the host can't reenter the component until the import has finished. This means that your use case as-is isn't supported with the component model (at least given my understanding). In the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">Canonical ABI document</a> this corresponds to the <code>may_enter</code> boolean.</p>\n<p>Could you describe a bit more what you're trying to achieve at a higher level though? There might be an alternative solution to you perhaps.</p>\n</blockquote>",
        "id": 439835356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716303069
    },
    {
        "content": "<p>redoC-A2k <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2124871948\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>Sure , I will be extermely thankful if you can help in achieving my use-case<br>\nSo basically ( start reading from 4th point ... points above it describes just how we do guest host communication) - <br>\nIn the <a href=\"http://lib.rs\">lib.rs</a> at host side (my host is a hyper server which instantiate guest component and pass the serialized request it)</p>\n<ol>\n<li>I define two static variables - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"c1\">// pub static mut STORE: Option&lt;Mutex&lt;Store&lt;Host&gt;&gt;&gt; = None;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Host</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>For a request this run function is called - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">WasmOutput</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"c1\">// wasmtime_wasi::add_to_linker(&amp;mut linker, |ctx| ctx)?;</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_input</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal input\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_output</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal output\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">monotonic_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks monotonic clock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add random\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Create a new store with the WASI context.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">table</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmInput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">match</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">POST</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Post</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PUT</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Put</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">DELETE</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Delete</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PATCH</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Patch</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">HEAD</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Head</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">OPTIONS</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">            </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">arakoo_edgechains_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Calling guest handle completed\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmOutput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"c1\">// println!(\"Result of guest calling: {:?}\", &amp;result);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">headers_map</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">body_vec</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">};</span>\n\n\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">wasm_output</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>The guest wasm is basically the embedded qjs runtime and js code<br>\nhandle_request function </li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">handle_request</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// TODO: log on env variable basis</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"{:?}\", req);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">CONTEXT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"nx\">javy</span><span class=\"o\">::</span><span class=\"nx\">quickjs</span><span class=\"o\">::</span><span class=\"nx\">Serializer</span><span class=\"o\">::</span><span class=\"nx\">from_context</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">).</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to create serializer\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">HANDLER</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">HttpRequest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">method</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">match</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"GET\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Post</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"POST\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Put</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PUT\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Delete</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Patch</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PATCH\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Head</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"HEAD\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Options</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nx\">uri</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">headers</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">headers</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">params</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">params</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">body</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"nx\">bytes</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">ByteBuf</span><span class=\"o\">::</span><span class=\"kr\">from</span><span class=\"o\">::&lt;</span><span class=\"nx\">Vec</span><span class=\"o\">&lt;</span><span class=\"nx\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"c1\">// let hono_event =</span>\n<span class=\"w\">        </span><span class=\"c1\">// hono_event.serialize(&amp;mut serializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"nx\">request</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"unable to serialize httprequest\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"body of httpRequest : {:?}\", from_qjs_value(request_value).unwrap());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">GLOBAL</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">global</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"requestToEvent\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">request_value</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event_request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"request\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get request from event\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">handler</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">event_request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call handler\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_resolve</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_RESOLVE</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_REJECT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">then_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"then\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">then_func.is_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">then_func</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"nx\">promise</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">on_resolve</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">()],</span>\n<span class=\"w\">                </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">RESPONSE</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">from_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"nx\">context</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">execute_pending</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to execute pending tasks\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let response = to_qjs_value(context, &amp;RESPONSE.lock().unwrap().take().unwrap()).unwrap();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">RESPONSE</span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">take</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let deserializer = &amp;mut Deserializer::from(response);</span>\n<span class=\"w\">        </span><span class=\"c1\">// let response = HttpResponse::deserialize(deserializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"Http Response {:?}\", response);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">JSValue</span><span class=\"o\">::</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_code_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">to_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"status\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">()).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">status</span>\n<span class=\"p\">[</span><span class=\"nx\">message</span><span class=\"w\"> </span><span class=\"nx\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 440098535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716386335
    },
    {
        "content": "<p>redoC-A2k edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2124871948\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>Sure , I will be extermely thankful if you can help in achieving my use-case<br>\nSo basically ( <strong>start reading from 4th point</strong> ... points above it describes just how we do guest host communication) - <br>\nIn the <a href=\"http://lib.rs\">lib.rs</a> at host side (my host is a hyper server which instantiate guest component and pass the serialized request it)</p>\n<ol>\n<li>I define two static variables - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"c1\">// pub static mut STORE: Option&lt;Mutex&lt;Store&lt;Host&gt;&gt;&gt; = None;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Host</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>For a request this run function is called - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">WasmOutput</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"c1\">// wasmtime_wasi::add_to_linker(&amp;mut linker, |ctx| ctx)?;</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_input</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal input\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_output</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal output\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">monotonic_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks monotonic clock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add random\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Create a new store with the WASI context.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">table</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmInput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">match</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">POST</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Post</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PUT</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Put</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">DELETE</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Delete</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PATCH</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Patch</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">HEAD</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Head</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">OPTIONS</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">            </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">arakoo_edgechains_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Calling guest handle completed\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmOutput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"c1\">// println!(\"Result of guest calling: {:?}\", &amp;result);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">headers_map</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">body_vec</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">};</span>\n\n\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">wasm_output</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>The guest wasm is basically the embedded qjs runtime and js code<br>\nhandle_request function </li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">handle_request</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// TODO: log on env variable basis</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"{:?}\", req);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">CONTEXT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"nx\">javy</span><span class=\"o\">::</span><span class=\"nx\">quickjs</span><span class=\"o\">::</span><span class=\"nx\">Serializer</span><span class=\"o\">::</span><span class=\"nx\">from_context</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">).</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to create serializer\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">HANDLER</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">HttpRequest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">method</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">match</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"GET\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Post</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"POST\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Put</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PUT\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Delete</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Patch</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PATCH\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Head</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"HEAD\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Options</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nx\">uri</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">headers</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">headers</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">params</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">params</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">body</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"nx\">bytes</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">ByteBuf</span><span class=\"o\">::</span><span class=\"kr\">from</span><span class=\"o\">::&lt;</span><span class=\"nx\">Vec</span><span class=\"o\">&lt;</span><span class=\"nx\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"c1\">// let hono_event =</span>\n<span class=\"w\">        </span><span class=\"c1\">// hono_event.serialize(&amp;mut serializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"nx\">request</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"unable to serialize httprequest\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"body of httpRequest : {:?}\", from_qjs_value(request_value).unwrap());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">GLOBAL</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">global</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"requestToEvent\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">request_value</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event_request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"request\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get request from event\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">handler</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">event_request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call handler\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_resolve</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_RESOLVE</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_REJECT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">then_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"then\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">then_func.is_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">then_func</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"nx\">promise</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">on_resolve</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">()],</span>\n<span class=\"w\">                </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">RESPONSE</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">from_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"nx\">context</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">execute_pending</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to execute pending tasks\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let response = to_qjs_value(context, &amp;RESPONSE.lock().unwrap().take().unwrap()).unwrap();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">RESPONSE</span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">take</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let deserializer = &amp;mut Deserializer::from(response);</span>\n<span class=\"w\">        </span><span class=\"c1\">// let response = HttpResponse::deserialize(deserializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"Http Response {:?}\", response);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">JSValue</span><span class=\"o\">::</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_code_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">to_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"status\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">()).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_co</span>\n<span class=\"p\">[</span><span class=\"nx\">message</span><span class=\"w\"> </span><span class=\"nx\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 440099669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716386622
    },
    {
        "content": "<p>redoC-A2k edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2124871948\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>Sure , I will be extermely thankful if you can help in achieving my use-case<br>\nSo basically ( <strong>start reading from 4th point</strong> ... points above it describes just how we do guest host communication) - <br>\nIn the <a href=\"http://lib.rs\">lib.rs</a> at host side (my host is a hyper server which instantiate guest component and pass the serialized request it)</p>\n<ol>\n<li>I define two static variables - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"c1\">// pub static mut STORE: Option&lt;Mutex&lt;Store&lt;Host&gt;&gt;&gt; = None;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Host</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>For a request this run function is called - </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">WasmOutput</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"c1\">// wasmtime_wasi::add_to_linker(&amp;mut linker, |ctx| ctx)?;</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">environment</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add environment\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">exit</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">error</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io error\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::io::streams::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add io streams\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">streams</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add io streams\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_input</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal input\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_output</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal output\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdin</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdin\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stdout</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stdout\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">terminal_stderr</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add cli terminal stderr\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">monotonic_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks monotonic clock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">wall_clock</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add clocks wallclock\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// bindings::sync::filesystem::types::add_to_linker(&amp;mut linker, |x| x)</span>\n<span class=\"w\">        </span><span class=\"c1\">//     .expect(\"Unable to add filesystem types\");</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem types\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">filesystem</span><span class=\"p\">::</span><span class=\"n\">preopens</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add filesystem preopens\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Unable to add random\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stderr</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Create a new store with the WASI context.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">table</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">client</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmInput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inbound_http</span><span class=\"p\">::</span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">method</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">match</span><span class=\"w\"> </span><span class=\"n\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">GET</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">POST</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Post</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PUT</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Put</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">DELETE</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Delete</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">PATCH</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Patch</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">HEAD</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Head</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">OPTIONS</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Method</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"n\">uri</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">params</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasm_input</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Instantiated component\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STORE</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">wit</span><span class=\"p\">::</span><span class=\"n\">Reactor</span><span class=\"p\">::</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">            </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">REACTOR</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">arakoo_edgechains_inbound_http</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">http_types</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_handle_request</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Calling guest handle completed\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">wasm_output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasmOutput</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"c1\">// println!(\"Result of guest calling: {:?}\", &amp;result);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">status_text</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">headers_map</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">headers_map</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">body_vec</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">wasm_output</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">::</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">body_vec</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Error occured : {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">};</span>\n\n\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">wasm_output</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>The guest wasm is basically the embedded qjs runtime and js code<br>\nhandle_request function </li>\n</ol>\n<p><div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"nx\">fn</span><span class=\"w\"> </span><span class=\"nx\">handle_request</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// TODO: log on env variable basis</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"{:?}\", req);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">CONTEXT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"nx\">javy</span><span class=\"o\">::</span><span class=\"nx\">quickjs</span><span class=\"o\">::</span><span class=\"nx\">Serializer</span><span class=\"o\">::</span><span class=\"nx\">from_context</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">).</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to create serializer\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"nx\">HANDLER</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">HttpRequest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">method</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">match</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"GET\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Post</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"POST\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Put</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PUT\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Delete</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Patch</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"PATCH\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Head</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"HEAD\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"nx\">wit</span><span class=\"o\">::</span><span class=\"nx\">Method</span><span class=\"o\">::</span><span class=\"nx\">Options</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">.</span><span class=\"nx\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"nx\">uri</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">uri</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">headers</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">headers</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">params</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">params</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"p\">((</span><span class=\"nx\">k</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">v</span><span class=\"p\">.</span><span class=\"nx\">as_str</span><span class=\"p\">().</span><span class=\"nx\">to_owned</span><span class=\"p\">())))</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">collect</span><span class=\"o\">::&lt;</span><span class=\"nx\">Result</span><span class=\"o\">&lt;</span><span class=\"nx\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nx\">body</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"nx\">bytes</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">ByteBuf</span><span class=\"o\">::</span><span class=\"kr\">from</span><span class=\"o\">::&lt;</span><span class=\"nx\">Vec</span><span class=\"o\">&lt;</span><span class=\"nx\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"c1\">// let hono_event =</span>\n<span class=\"w\">        </span><span class=\"c1\">// hono_event.serialize(&amp;mut serializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"nx\">request</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">mut</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"unable to serialize httprequest\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">serializer</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"body of httpRequest : {:?}\", from_qjs_value(request_value).unwrap());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">GLOBAL</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">global</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"requestToEvent\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">request_to_event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">request_value</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call requestToEvent\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">event_request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">event</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"request\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to get request from event\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">handler</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">event_request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">event</span><span class=\"p\">])</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to call handler\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_resolve</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_RESOLVE</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">ON_REJECT</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">then_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">get_property</span><span class=\"p\">(</span><span class=\"s2\">\"then\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">then_func.is_function</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">then_func</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"nx\">promise</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nx\">on_resolve</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nx\">on_reject</span><span class=\"p\">.</span><span class=\"nx\">deref</span><span class=\"p\">().</span><span class=\"nx\">clone</span><span class=\"p\">()],</span>\n<span class=\"w\">                </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">RESPONSE</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">from_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">promise</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"nx\">context</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">execute_pending</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"s2\">\"Unable to execute pending tasks\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let response = to_qjs_value(context, &amp;RESPONSE.lock().unwrap().take().unwrap()).unwrap();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">RESPONSE</span><span class=\"p\">.</span><span class=\"nx\">lock</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">().</span><span class=\"nx\">take</span><span class=\"p\">().</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// let deserializer = &amp;mut Deserializer::from(response);</span>\n<span class=\"w\">        </span><span class=\"c1\">// let response = HttpResponse::deserialize(deserializer).unwrap();</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"Http Response {:?}\", response);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">JSValue</span><span class=\"o\">::</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_code_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">to_qjs_value</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"status\"</span><span class=\"p\">).</span><span class=\"nx\">unwrap</span><span class=\"p\">()).</span><span class=\"nx\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">status_co</span>\n<span class=\"p\">[</span><span class=\"nx\">message</span><span class=\"w\"> </span><span class=\"nx\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 440110154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716389156
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2125040789\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>I commented on this scenario in <a href=\"https://github.com/dicej/isyswasfa/issues/4#issuecomment-2125015257\">https://github.com/dicej/isyswasfa/issues/4#issuecomment-2125015257</a>.  In short, I think this kind of thing _could_ be supported with component model async by deferring the would-be-reentering call to the top-level event loop in the host and connecting it back to the import call via e.g. a oneshot channel.  I'll keep that use case in mind as part of my Wasmtime async implementation work.</p>\n</blockquote>",
        "id": 440115484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716390466
    },
    {
        "content": "<p>redoC-A2k <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2126020227\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>What can I do now ? What I want to do is that possible with core wasm modules ? Or any other solution to solve my use case ?</p>\n</blockquote>",
        "id": 440226171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716426988
    },
    {
        "content": "<p>redoC-A2k edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2126020227\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>What can I do now ? What I want to do is that possible with core wasm modules ? Or any other solution to solve my use case ?<br>\n@dicej @alexcrichton </p>\n</blockquote>",
        "id": 440226262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716427066
    },
    {
        "content": "<p>redoC-A2k edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2126020227\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>What can I do now ? What I want to do is that possible with core wasm modules ? Or any other solution to solve my use case ?<br>\n@dicej </p>\n</blockquote>",
        "id": 440226280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716427081
    },
    {
        "content": "<p>redoC-A2k edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2126020227\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>What can I do now ? What I want to do is that possible with core wasm modules ? Or any other solution to solve my use case ?<br>\n@dicej @alexcrichton </p>\n</blockquote>",
        "id": 440289142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716458657
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2127383429\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>@redoC-A2k I'll admit I haven't read through all the code you posted line-by-line, so maybe I'm missing something that should be obvious.  Why is the guest calling a host function whose only job is to call a guest function?  Can't the guest just call the guest function directly?  Is there a way you can refactor this so any guest calls are direct without involving the host at all?</p>\n<p>Maybe you need the host to do something privileged that the guest can't do on its own?  Or you need the host to decide which guest function to call for some reason?  In the latter case, could you treat the host call as a \"trampoline\" function which returns a value to the guest that tells the guest which guest function to call next?  Keep in mind that recursive calls can always be flattened into iterative calls, and that might be a useful workaround here.</p>\n</blockquote>",
        "id": 440343854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716476943
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>hey there how can I sort of clone a wasm in execution the issue is I call the one of the imported function (1st function) from guest on host ( wasm is in execution as of now)<br>\nNow that imported function from guest to wasm calls another function which is exported by host to guest but this function ( exported function  on host) again needs to call different (let's call it 2nd function) imported function from guest and this is the issue .<br>\nDuring this whole process wasm is in execution and how can I call the 2nd function ?</p>\n<p>I tried storing reactor(component) and store in static variable , reactor works fine as it only requires reference while function calling but issue is in case of store while calling imported function I need to provide mutable reference to store . Which I can't as at a time I can't have two mutable reference . For sharing mutable reference - I created a static option containing Store and passed the mutable reference to function like so </p>\n<div class=\"codehilite\" data-code-language=\"let\"><pre><span></span><code>let result: Result&lt;http_types::Response, anyhow::Error&gt; =\n                guest.call_handle_request(&amp;mut *store, &amp;request).await; (1st function) (in main function where I instantiate component)\nlet result = guest.call_jsonnet_call_native_func(&amp;mut *store, &amp;self.0, \"\")\n                        .await (2nd function) (in some other exported function which component calls as a result of calling above imported function)\n</code></pre></div>\n<p>But in above case I am getting error <br>\n<code> wasm trap: cannot enter component instance</code></p>\n<p>I tried creating new store but then I get some different error , if I use that store with reference of Reactor .</p>\n<p>Please help me , I don't want to use core wasm modules . Nor I think I will be able to break the wasm module in two components (as I my wasm module is basically quickjs runtime along with js code the wasm is generated by cargo building to target wasm32-wasi the quickjs_wasm_rs context (javy approach, fermyon spin approach) .</p>\n</blockquote>",
        "id": 445216948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718655422
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670#issuecomment-2174347246\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8670\">issue #8670</a>:</p>\n<blockquote>\n<p>I believe that the question here more-or-less has been answered and/or the discussion has sort of petered out at this point. I'm going to close this but am happy to reopen if there's more.</p>\n</blockquote>",
        "id": 445216950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718655422
    }
]