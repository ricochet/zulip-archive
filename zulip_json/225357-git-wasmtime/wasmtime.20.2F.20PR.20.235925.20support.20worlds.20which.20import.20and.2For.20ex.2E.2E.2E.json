[
    {
        "content": "<p>dicej opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">PR #5925</a> from <code>wit-templates</code> to <code>main</code>:</p>\n<blockquote>\n<p>Per <a href=\"https://github.com/WebAssembly/component-model/issues/172\">https://github.com/WebAssembly/component-model/issues/172</a>, this implements \"part 1\" of WIT templates, allowing WIT files to define interfaces which contain a single wildcard function, which worlds may import or export.</p>\n<p>I've chosen to implement the bindings for host-implemented functions in such a way that the host may delay import resolution until the latest possible moment, i.e. when the guest is actually calling the function.  This allows for fully dynamic resolution (e.g. using the function name as a key to be looked up in a remote key-value store) when desired.  This does come at a small performance cost compared to doing resolution at e.g. link time instead.</p>\n<p>In cases where the host wants to do resolution earlier (e.g. at deploy or instantiation time), that's certainly possible, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">funcs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"s\">\"imports\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">name</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">my_resolver</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyImports</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">funcs</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">imports</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyImports</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">funcs</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">())()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MyImports</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">funcs</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>If we feel that early resolution is the more common case, we could consider adding a configuration option to the binding generator which indicates whether early or late resolution is desired, allowing the generator to optimize (ergonmically and performance-wise) accordingly.</p>\n<p>Note that the generated <code>add_to_linker</code> functions now take a <code>&amp;Component</code> parameter as well as a <code>&amp;mut Linker</code>.  This allows those functions to inspect the component in order to determine how many <code>func_wrap{_async}</code> calls to make, and with what names.  I'm open to alternatives to this if there's a better way.</p>\n<p>Finally, I've added a temporary dependency override to Cargo.toml, pointing to our fork of <code>wasm-tools</code>, which includes the necessary <code>wit-parser</code> changes.  We're still iterating on that and will PR those changes separately.  We also have a fork of <code>wit-bindgen</code> with a new \"wildcards\" test to verify everything works end-to-end: <a href=\"https://github.com/bytecodealliance/wit-bindgen/compare/main...dicej:wit-templates\">https://github.com/bytecodealliance/wit-bindgen/compare/main...dicej:wit-templates</a>. I'll PR that last once everything else is stable.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</li>\n<li>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</li>\n<li>[ ] This PR contains test cases, if meaningful.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 339463253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677886024
    },
    {
        "content": "<p>dicej updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">PR #5925</a> from <code>wit-templates</code> to <code>main</code>.</p>",
        "id": 339466330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677888003
    },
    {
        "content": "<p>dicej closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5925\">PR #5925</a>.</p>",
        "id": 339749271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678053981
    }
]