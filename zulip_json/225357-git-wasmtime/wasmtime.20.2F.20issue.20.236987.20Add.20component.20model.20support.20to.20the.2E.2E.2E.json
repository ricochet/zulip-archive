[
    {
        "content": "<p>seanisom opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add component model support to the c-api (particularly the ability run a component from a c-api host). </p>\n<h4>Benefit</h4>\n<p>Much of the WebAssembly world is currently (re)tooling around the component model as it approaches MVP. The ability to run components will quickly become more critical with the finalization of the wasi preview 2 abi. Currently C/C++ is the only <code>wit-bindgen</code> supported guest language and example in the new <code>component-docs</code> repo that does not have a path to run from a host in the same language.</p>\n<h4>Implementation</h4>\n<p>I'd be happy to take a go at this modeled roughly around the Rust crate with the current c-api idioms (for example <code>wasmtime_config_wasm_component_model(conf, true);</code>, a component aware linker (perhaps <code>wasmtime_linker_define_component_model(linker);</code>), etc. I haven't looked deep enough into the implementation yet to see if there is significant core functionality to enable this past the standard glue code and lifecycle management for c objects.</p>\n<h4>Alternatives</h4>\n<p>Eventually this will become necessary  - it's a matter of timing. I suspect that this has just not yet been implemented due to the instability of <code>wasmtime::component</code>.</p>\n<p>CC: Discussed with @sunfishcode at the BA hackathon<br>\n</p>\n</blockquote>",
        "id": 390086699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694311633
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987#issuecomment-1712697612\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<p>The Nginx Unit team is also interested in this</p>\n</blockquote>",
        "id": 390091747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694315528
    },
    {
        "content": "<p>seanisom edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add component model support to the c-api (particularly the ability run a component from a c-api host). </p>\n<h4>Benefit</h4>\n<p>Much of the WebAssembly world is currently (re)tooling around the component model as it approaches MVP. The ability to run components will quickly become more critical with the finalization of the wasi preview 2 abi. Currently C/C++ is the largest fully-supported language with a clear path to producing guests (through <code>wit-bindgen</code>) that does not have a path to run from a host in the same language.</p>\n<h4>Implementation</h4>\n<p>I can take a first step with this modeled roughly around the Rust crate with the current c-api idioms (for example <code>wasmtime_config_wasm_component_model(conf, true);</code>, a component aware linker (perhaps <code>wasmtime_linker_define_component_model(linker);</code>), etc. I haven't looked deep enough into the implementation yet to see if there is significant core functionality to enable this past the standard glue code and lifecycle management for c objects.</p>\n<h4>Alternatives</h4>\n<p>Eventually this will become necessary  - it's a matter of timing. I suspect that this has just not yet been implemented due to the instability of <code>wasmtime::component</code>.</p>\n<p>CC: Discussed with @sunfishcode at the BA hackathon<br>\n</p>\n</blockquote>",
        "id": 390116708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694333554
    },
    {
        "content": "<p>seanisom edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add component model support to the c-api (particularly the ability run a component from a c-api host). </p>\n<h4>Benefit</h4>\n<p>Much of the WebAssembly world is currently (re)tooling around the component model as it approaches MVP. The ability to run components will quickly become more critical with the finalization of the wasi preview 2 abi. Currently C/C++ is the largest fully-supported language with a clear path to producing guests (through <code>wit-bindgen</code>) that does not have a path to run from a host in the same language.</p>\n<h4>Implementation</h4>\n<p>I can take a first pass at this modeled roughly around the Rust crate with the current c-api idioms (for example <code>wasmtime_config_wasm_component_model(conf, true);</code>, a component aware linker (perhaps <code>wasmtime_linker_define_component_model(linker);</code>), etc. I haven't looked deep enough into the implementation yet to see if there is significant core functionality to enable this past the standard glue code and lifecycle management for c objects.</p>\n<h4>Alternatives</h4>\n<p>Eventually this will become necessary  - it's a matter of timing. I suspect that this has just not yet been implemented due to the instability of <code>wasmtime::component</code>.</p>\n<p>CC: Discussed with @sunfishcode at the BA hackathon<br>\n</p>\n</blockquote>",
        "id": 390116725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694333572
    },
    {
        "content": "<p>seanisom edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add component model support to the c-api (particularly the ability run a component from a c-api host). </p>\n<h4>Benefit</h4>\n<p>Much of the WebAssembly world is currently (re)tooling around the component model as it approaches MVP. The ability to run components will quickly become more critical with the finalization of the wasi preview 2 abi. Currently C/C++ is the largest fully-supported language with a clear path to producing component guests (through <code>wit-bindgen</code>) that does not have a path to run from a host in the same language.</p>\n<h4>Implementation</h4>\n<p>I can take a first pass at this modeled roughly around the Rust crate with the current c-api idioms (for example <code>wasmtime_config_wasm_component_model(conf, true);</code>, a component aware linker (perhaps <code>wasmtime_linker_define_component_model(linker);</code>), etc. I haven't looked deep enough into the implementation yet to see if there is significant core functionality to enable this past the standard glue code and lifecycle management for c objects.</p>\n<h4>Alternatives</h4>\n<p>Eventually this will become necessary  - it's a matter of timing. I suspect that this has just not yet been implemented due to the instability of <code>wasmtime::component</code>.</p>\n<p>CC: Discussed with @sunfishcode at the BA hackathon<br>\n</p>\n</blockquote>",
        "id": 390116772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694333602
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:c-api label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">Issue #6987</a>.</p>",
        "id": 390374085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694460088
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">Issue #6987</a>.</p>",
        "id": 390374087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694460088
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987#issuecomment-1714449944\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 390374198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694460127
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987#issuecomment-1714457328\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<p>Thanks for opening an issue for this! You're right in that this hasn't quite bubbled to the top of any priority list yet which is why it isn't done, but it's something that definitely should get done!</p>\n<p>My prediction for the main difficulty of this feature will be how to transfer values back and forth. The type grammar of core wasm is quite simple which made this a non-issue for core wasm's C API support, but for components it's significantly different. The easiest route is probably going to be to mirror <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/enum.Val.html\"><code>Val</code></a> into C more-or-less. This will not be really all that efficient in terms of calls because datatypes like lists will be copied in/out and everything will be dynamically type-checked. For example I don't know how <code>wasmtime_func_call_unchecked</code> could get a C/C++ equivalent that skips all the type-checks. That's not a showstopper for any sort of initial support, however. Still though there's tricky questions around how exactly memory management will work with values. I'm not sure the best answer here.</p>\n<p>More minor it might be worth bikeshedding a bit to avoid a <code>wasmtime_component_*</code> prefix on everything which is quite long. Not that I have much of an idea about a better name...</p>\n</blockquote>",
        "id": 390374907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694460481
    },
    {
        "content": "<p>rajsite <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987#issuecomment-2330092184\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6987\">issue #6987</a>:</p>\n<blockquote>\n<p>related #8036 </p>\n</blockquote>",
        "id": 467659707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1725483792
    }
]