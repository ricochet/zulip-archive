[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>:</p>\n<blockquote>\n<p>In service of merging #5947, add the <code>narrower</code> and <code>wider</code> constraints to the <code>TypeVar</code> type in the instruction DSL.</p>\n<p>These two new constraints capture the situation where an instruction requires that its output be either narrower or wider than one of its input arguments. Instructions that fit one of these two patterns include: <code>uextend</code>, <code>sextend</code>, <code>ireduce</code>, <code>fpromote</code>, and <code>fdemote</code>. Previously these constraints were validated by special case typechecking behavior in the verifier, and with their addition those special cases can now be removed.</p>\n<p>The benefit to #5947 is that the constraints are now available to the <code>function_generator</code> module when determining which arguments to select for random instruction instantiations. This gets us a bit closer to being able to use the generated opcode list as the source of truth for how we generate arbitrary instructions.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 341593074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678750020
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a>.</p>",
        "id": 341593098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678750037
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338145740\">PR review</a>.</p>",
        "id": 341594867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678751241
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134726568\">PR review comment</a>:</p>\n<blockquote>\n<p>This function doesn't capture the case where a variable depends on a parent that refines yet another parent. It might be worth thinking a bit about how this would work, though we don't currently have any instructions that combine constraints like that.</p>\n</blockquote>",
        "id": 341594869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678751241
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338148674\">PR review</a>.</p>",
        "id": 341595026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678751354
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134727470\">PR review comment</a>:</p>\n<blockquote>\n<p>It might be worth adding a <code>BitSet::singleton</code> function to make it a bit more obvious what's going on here.</p>\n</blockquote>",
        "id": 341595027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678751355
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338142398\">PR review</a>.</p>",
        "id": 341597104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134725536\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this control flow is equivalent (since it's at the end of the loop where <code>continue</code> is implicit) and maybe easier to reason about.</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        if let Some(tv) = typ.free_typevar() {\n            if &amp;tv != ctrl_typevar {\n                return Err(\"type variable in output not derived from ctrl_typevar\".into());\n            }\n\n            // Variables derived from the control variable are ok, but we remember if they refine\n            // the control variable, as that still requires another type to instantiate.\n            refines_output = typ.refines_parent();\n        }\n</code></pre></div>\n<p>Also, how should <code>refines_output</code> be set if there are multiple output values? Should it be <code>true</code> if _any_ result type is a refinement?</p>\n</blockquote>",
        "id": 341597105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338142398\">PR review</a>.</p>",
        "id": 341597106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134726402\">PR review comment</a>:</p>\n<blockquote>\n<p>This assertion message and the corresponding one for <code>Wider</code> don't reflect that you extended them to floats as well.</p>\n</blockquote>",
        "id": 341597107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134731735\">PR review comment</a>:</p>\n<blockquote>\n<p>I think, in conjunction with the good comment here mentioning <code>2^8</code>, that it's more clear to just use the constant <code>8</code> as the upper bound:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    tys.ints = BitSet::from_range(ctrl_type_bits as u8, 8);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 341597108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134733530\">PR review comment</a>:</p>\n<blockquote>\n<p>Very nice to get rid of the <code>lane_bits</code> checks in the verifier. Can't we also get rid of the <code>lane_count</code> checks? And at that point delete the <code>typecheck_special</code> cases for the <code>Unary</code> format entirely?</p>\n</blockquote>",
        "id": 341597109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678752728
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341600642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678754803
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338252534\">PR review</a>.</p>",
        "id": 341601284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755132
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134758989\">PR review comment</a>:</p>\n<blockquote>\n<p>I had meant to do that, but apparently only got as far as the comment <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n</blockquote>",
        "id": 341601285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755133
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338253631\">PR review</a>.</p>",
        "id": 341601504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755258
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134760405\">PR review comment</a>:</p>\n<blockquote>\n<p>Hah, the only remaining checks were for vector arguments, and none of those instructions support vectors now. Great catch!</p>\n</blockquote>",
        "id": 341601506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755258
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341601590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755304
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341601613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755320
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> as ready for review.</p>",
        "id": 341601617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755325
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341602083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755609
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338255944\">PR review</a>.</p>",
        "id": 341602173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755666
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338255944\">PR review</a>.</p>",
        "id": 341602174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755666
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134764390\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm still wondering how this should work if the instruction has multiple value results. Right now, <code>refines_output</code> is set by the _last_ value result, which doesn't seem right. Should it be set true if _any_ value result is a refinement?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>            if typ.refines_parent() {\n                refines_output = true;\n            }\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 341602175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755666
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134762969\">PR review comment</a>:</p>\n<blockquote>\n<p>I snuck a variable inlining in there so this let-binding should be dead now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n</blockquote>",
        "id": 341602176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755666
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338260267\">PR review</a>.</p>",
        "id": 341602616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755894
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#discussion_r1134767593\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, I think you're correct: it should be true if any result is a refinement. Thanks for catching this!</p>\n</blockquote>",
        "id": 341602617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755894
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341602628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755900
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013#pullrequestreview-1338261216\">PR review</a>.</p>",
        "id": 341602804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678755982
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a> from <code>trevor/narrower-instruction-constraint</code> to <code>main</code>.</p>",
        "id": 341840531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678809903
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6013\">PR #6013</a>.</p>",
        "id": 341859229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678814127
    }
]