[
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp slt_imm x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>.<br>\nfor <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n</blockquote>",
        "id": 291989206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659608929
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205104686\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>This wouldn't help on platforms without flag registers, right? Those have icmp and bint merged together already. If anything it would prevent icmp+brz/brnz fusion I think, even on platforms with flag registers.</p>\n</blockquote>",
        "id": 291991909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659611022
    },
    {
        "content": "<p>MaxGraey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205113639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>Hmm, so perhaps it's better to do on lower level (may be ISTLE) for only specific platforms?</p>\n</blockquote>",
        "id": 291992685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659611561
    },
    {
        "content": "<p>MaxGraey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205113639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>Hmm, so perhaps it's better to do on lower level (may be ISLE) for only specific platforms? </p>\n</blockquote>",
        "id": 291998546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659615345
    },
    {
        "content": "<p>MaxGraey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205113639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>Hmm, so perhaps it's better to do on lower level (may be ISLE) for only specific platforms after icmp+brz/brnz fusion?</p>\n</blockquote>",
        "id": 291998627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659615366
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205206568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>I think so.</p>\n</blockquote>",
        "id": 292001736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659617045
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607#issuecomment-1205391114\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<p>We can definitely incorporate this as a lowering rule case in the backends. The ISLE and lowering machinery is smart enough to do the right thing for the <code>(brnz (icmp ...))</code> case <em>and</em> allow for a rule for <code>(icmp (IntCC.NP) ...)</code> when used directly to compute that value. cc @elliottt as he is in the middle of br+compare stuff in x86-64 right now...</p>\n</blockquote>",
        "id": 292021212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659625889
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>.<br>\nfor <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n</blockquote>",
        "id": 292023411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659626747
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n</blockquote>",
        "id": 292030602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659629855
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n<p><strong>Update Implementation Plan</strong><br>\nWrite necessary rules on ISLE instead <code>simple_opt.rs</code></p>\n</blockquote>",
        "id": 292030734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659629921
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n<h3>Updated Implementation Plan</h3>\n<p>Write necessary rules on ISLE instead <code>simple_opt.rs</code></p>\n</blockquote>",
        "id": 292030761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659629940
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n<h3>Updated Implementation Plan</h3>\n<p>Write necessary rules on ISLE instead in <code>simple_opt.rs</code></p>\n</blockquote>",
        "id": 292030789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659629954
    },
    {
        "content": "<p>MaxGraey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n<h3>Updated Implementation Plan</h3>\n<p>Write necessary rules on ISLE instead in <code>simple_opt.rs</code></p>\n</blockquote>",
        "id": 292030823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659629976
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4607\">issue #4607</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Simple optimization which rewrite <code>x &lt; 0</code> (<code>icmp_imm slt x, 0</code>) to <code>x &gt;&gt;&gt; bit_size(ty) - 1</code> (<code>ushr_imm x, 31 | 63</code>).</p>\n<h4>Benefit</h4>\n<p><code>x &lt; 0</code> is pretty common operation. Although LLVM itself applies this rule, but some code generators / optimizers such as Binaryen (wasm-opt / wasm-pack use it) don't such peephole rewrites because replacing the constant <code>0</code> to <code>31</code> or <code>63</code> has a negative effect on entropy when compressing wasm module via gzip or brotli. </p>\n<p>Besides, such optimization will improve cranelift IR itself, because it will remove the finalizing <code>bint.i32</code> / <code>bint.i64</code> after <code>icmp</code>. For <code>ushr</code>/<code>ushr_imm</code> it is not needed.</p>\n<h4>Implementation</h4>\n<ul>\n<li>Add necessary rewrite for simple_opt before <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L858\">this line</a></li>\n<li>Add tests for <code>filetests/simple_preopt/simplily32.clif</code> and <code>filetests/simple_preopt/simplily64.clif</code></li>\n</ul>\n<h3>Updated Implementation Plan</h3>\n<p>Write necessary rules on ISLE instead in <code>simple_opt.rs</code></p>\n</blockquote>",
        "id": 292615131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660063555
    }
]