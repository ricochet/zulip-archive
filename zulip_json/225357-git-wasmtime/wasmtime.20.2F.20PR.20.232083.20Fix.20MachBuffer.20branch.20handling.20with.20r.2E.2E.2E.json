[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083\">PR #2083</a> from <code>machinst-branch-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>When one branch target label in a MachBuffer is redirected to another,<br>\nwe eventually fix up branches targetting the first to refer to the<br>\nredirected target instead. Separately, we have a branch-folding<br>\noptimization that, when an unconditional branch occurs as the only<br>\ninstruction in a block (right at a label) and the previous instruction<br>\nis also an unconditional branch (hence no fallthrough), we can elide<br>\nthat block entirely and redirect the label. Finally, we prevented<br>\ninfinite loops when resolving label aliases by chasing only one alias<br>\ndeep.</p>\n<p>Unfortunately, these three facts interacted poorly, and this is a result<br>\nof our correctness arguments assuming a fully-general \"redirect\" that<br>\nwas not limited to one indirection level. In particular, we could have<br>\nsome label A that redirected to B, then remove the block at B because it<br>\nis just a single branch to C, redirecting B to C. A would still redirect<br>\nto B, though, without chasing to C, and hence a branch to B would fall<br>\nthrough to the unrelated block that came after block B.</p>\n<p>Thanks to @bnjbvr for finding this bug while debugging the x64 backend<br>\nand reducing a failure to the function in issue #2082. (This is a very<br>\nsubtle bug and it seems to have been quite difficult to chase; my<br>\napologies!)</p>\n<p>The fix is to (i) chase redirects arbitrarily deep, but also (ii) ensure<br>\nthat we do not form a cycle of redirects. The latter is done by very<br>\ncarefully checking the existing fully-resolved target of the label we<br>\nare about to redirect <em>to</em>; if it resolves back to the branch that<br>\nis causing this redirect, then we avoid making the alias. The comments<br>\nin this patch make a slightly more detailed argument why this should be<br>\ncorrect.</p>\n<p>Unfortunately we cannot directly test the CLIF that @bnjbvr reduced<br>\nbecause we don't have a way to assert anything about the machine-code<br>\nthat comes after the branch folding and emission. However, the dedicated<br>\nunit tests in this patch replicate an equivalent folding case, and also<br>\ntest that we handle branch cycles properly (as argued above).</p>\n<p>Fixes #2082.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 205551857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596161799
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083\">PR #2083</a>.</p>",
        "id": 205551858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596161799
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083\">PR #2083</a>.</p>",
        "id": 205551860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596161799
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459116481\">PR Review</a>.</p>",
        "id": 205582341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596196381
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#discussion_r463566199\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is there anything you can do here to stop this looping infinitely in the case of incorrectly constructed <code>self.label_aliases</code>?  On the basis that an assertion failure, in the field, is more informative than a hang.  Like, for example, counting iterations and release-asserting at 1 million?  (I think RA only allows 1 million BBs anyway).</p>\n</blockquote>",
        "id": 205582342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596196381
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459119715\">PR Review</a>.</p>",
        "id": 205582781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596196759
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459174151\">PR Review</a>.</p>",
        "id": 205590771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596202740
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459174151\">PR Review</a>.</p>",
        "id": 205590772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596202740
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#discussion_r463611413\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unless I'm missing something, the exact opposite of this condition is checked right above on line 826, with no apparent side-effects in between, so this is unreachable code, and the existing code already does the right thing. In this case, moving the comment up could be useful.</p>\n</blockquote>",
        "id": 205590773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596202740
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083\">PR #2083</a> from <code>machinst-branch-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>When one branch target label in a MachBuffer is redirected to another,<br>\nwe eventually fix up branches targetting the first to refer to the<br>\nredirected target instead. Separately, we have a branch-folding<br>\noptimization that, when an unconditional branch occurs as the only<br>\ninstruction in a block (right at a label) and the previous instruction<br>\nis also an unconditional branch (hence no fallthrough), we can elide<br>\nthat block entirely and redirect the label. Finally, we prevented<br>\ninfinite loops when resolving label aliases by chasing only one alias<br>\ndeep.</p>\n<p>Unfortunately, these three facts interacted poorly, and this is a result<br>\nof our correctness arguments assuming a fully-general \"redirect\" that<br>\nwas not limited to one indirection level. In particular, we could have<br>\nsome label A that redirected to B, then remove the block at B because it<br>\nis just a single branch to C, redirecting B to C. A would still redirect<br>\nto B, though, without chasing to C, and hence a branch to B would fall<br>\nthrough to the unrelated block that came after block B.</p>\n<p>Thanks to @bnjbvr for finding this bug while debugging the x64 backend<br>\nand reducing a failure to the function in issue #2082. (This is a very<br>\nsubtle bug and it seems to have been quite difficult to chase; my<br>\napologies!)</p>\n<p>The fix is to (i) chase redirects arbitrarily deep, but also (ii) ensure<br>\nthat we do not form a cycle of redirects. The latter is done by very<br>\ncarefully checking the existing fully-resolved target of the label we<br>\nare about to redirect <em>to</em>; if it resolves back to the branch that<br>\nis causing this redirect, then we avoid making the alias. The comments<br>\nin this patch make a slightly more detailed argument why this should be<br>\ncorrect.</p>\n<p>Unfortunately we cannot directly test the CLIF that @bnjbvr reduced<br>\nbecause we don't have a way to assert anything about the machine-code<br>\nthat comes after the branch folding and emission. However, the dedicated<br>\nunit tests in this patch replicate an equivalent folding case, and also<br>\ntest that we handle branch cycles properly (as argued above).</p>\n<p>Fixes #2082.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 205612252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596213280
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#discussion_r463713334\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Excellent point, I had missed this. I made a slight change to the existing <code>if</code>: we need an <code>else</code> that stops the branch-folding loop entirely, to preserve invariants.</p>\n</blockquote>",
        "id": 205612341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596213357
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459309219\">PR Review</a>.</p>",
        "id": 205612342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596213357
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#pullrequestreview-459309284\">PR Review</a>.</p>",
        "id": 205612392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596213364
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083#discussion_r463713397\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 205612394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596213364
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2083\">PR #2083</a>.</p>",
        "id": 205620604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596217952
    }
]