[
    {
        "content": "<p>jakubDoka opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Adding the <a href=\"https://github.com/rkyv/rkyv\">rkyv</a> support behind a cargo feature.</p>\n<h4>Benefit</h4>\n<p>Allows zero copy serialization, which is not supported by serde formats. I particularly find it very useful in my compiler.</p>\n<h4>Implementation</h4>\n<p>Traits can be easily derived with proc macros, for all types that derive serde Traits. </p>\n<p>I have some experience after integrating it into my project, and it is in my interest to be supported, so I can also implement this.</p>\n<h4>Alternatives</h4>\n<p>I don't have notion of other libraries with same capabilities.</p>\n</blockquote>",
        "id": 322769382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674328168
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1399329734\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>Doesn't rkyv produce a separate type for every type which uses the derive for zero-copy deserialization? That would require duplicating a big chunk of the api surface. I believe it also doesn't allow mutating this zero-copy deserialized version, which makes it impossible to compile it without copying it into a regular mutatable Function first. Or were you not talking about adding support for it to Cranelift?</p>\n</blockquote>",
        "id": 322777889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674334090
    },
    {
        "content": "<p>jakubDoka <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1399334444\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>Yes I mean cranelift, sorry should have hed clarified.<br>\n</p>\n</blockquote>",
        "id": 322780065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674335905
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1407192754\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>I think I'm missing something. What do you want Cranelift to use rkyv for? What do you want to serialize/deserialize, and why is it performance-critical?</p>\n</blockquote>",
        "id": 324182458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674862652
    },
    {
        "content": "<p>jakubDoka <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1409036534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>My <a href=\"https://github.com/jakubDoka/Catalyst\">compiler</a> uses rkyv to cache incremental builds, and it improves size and speed at which compiler can load and save metadata. I inevitably need to serialize things like signatures and relocations. This leads to defining shadow types and lot of boilerplate. For now I transmute what I can but really don't like code necessary to work around this. </p>\n</blockquote>",
        "id": 324737090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675100032
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1409055249\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>You could use a serde compatible format to serialize the cranelift types and then put the result as opaque blob of type <code>Vec&lt;u8&gt;</code> in your rkyv serializable cache.</p>\n</blockquote>",
        "id": 324740077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675100865
    },
    {
        "content": "<p>jakubDoka <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1409080344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>Welp, I don't like the idea but seems like it could do the trick. So should i close this? Is there no chance of this being added?</p>\n</blockquote>",
        "id": 324743683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675101916
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1409242921\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>I wouldn't say there's no chance. We just need to have a clear picture of what we're signing up for, including any ongoing maintenance burden. That's a little trickier with any new dependencies like rkyv since we need to audit them, and any crates they depend on, for security concerns.</p>\n<p>One way to help answer those questions is to have a proof-of-concept PR to look at. Usually I'd prefer to decide whether we want a particular feature through discussion first, such as an issue like this. But in this case it sounds to me like you're familiar enough with both Cranelift and rkyv that you could quickly put together a draft pull request illustrating the basic idea.</p>\n<p>I won't promise that we'll merge it, so don't spend too much time on it. But I think for me at least it would help a lot to see what exactly is involved in doing what you're asking for.</p>\n</blockquote>",
        "id": 324764407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675108379
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616#issuecomment-1409342066\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5616\">issue #5616</a>:</p>\n<blockquote>\n<p>We already support one serialization library. It is the most popular serialization library for Rust. I'd really rather not support additional serialization libraries unless there is a <em>very</em> good reason. Do we also support <code>miniserde</code> when someone asks for smaller binary sizes? At what point does it stop? I feel like supporting just the number one library is an incredibly reasonable place for us to be at.</p>\n</blockquote>",
        "id": 324777331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675112945
    }
]