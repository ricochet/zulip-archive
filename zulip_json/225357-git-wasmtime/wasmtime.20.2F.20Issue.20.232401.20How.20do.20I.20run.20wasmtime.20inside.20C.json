[
    {
        "content": "<p>ZW007 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>I followed this official wasmtime tutorial on embedding wasmtime in C. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c</a></p>\n<p>It provides commands to compile the C code with hello-world wasm embedded, but I don't know what does the quoted two lines (cargo build --release -p wasmtime-c-api, target/release/libwasmtime.a) do? cargo build is for building a wasm application, what has it to do with compiling C code, let alone there is no cargo.toml, so the cargo build itself would also fail. And this static library target/release/libwasmtime.a is also not in the wasmtime repo. <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p>cargo build --release -p wasmtime-c-api</p>\n<div class=\"codehilite\"><pre><span></span><code>cc examples/hello.c \\\n</code></pre></div>\n\n<p>-I crates/c-api/include \\<br>\n   -I crates/c-api/wasm-c-api/include \\<br>\ntarget/release/libwasmtime.a \\</p>\n<p>-lpthread -ldl -lm \\<br>\n   -o hello<br>\n./hello</p>\n<p>Without question, I cannot get this hello-world wasm in C compiled and run :(</p>\n<p>Thank you so much!</p>\n</blockquote>",
        "id": 216432557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605162812
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-725901838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<p>cargo build --release -p wasmtime-c-api</p>\n</blockquote>\n<p>This is what compiles <code>target/release/libwasmtime.a</code>. You will have to run it from the root of your wasmtime clone. Rustc can target wasm, but by default it will compile for the host system.</p>\n</blockquote>",
        "id": 216436210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605167113
    },
    {
        "content": "<p>ZW007 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>I followed this official wasmtime tutorial on embedding wasmtime in C. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c</a></p>\n<p>It provides commands to compile the C code with hello-world wasm embedded, but I don't know what do the two lines (cargo build --release -p wasmtime-c-api, target/release/libwasmtime.a) do? cargo build is for building a rust application, what has it to do with compiling C code, let alone there is no cargo.toml, so the cargo build itself would also fail. And this static library target/release/libwasmtime.a is also not in the wasmtime repo. <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p><strong>cargo build --release -p wasmtime-c-api</strong><br>\ncc examples/hello.c \\<br>\n-I crates/c-api/include \\<br>\n-I crates/c-api/wasm-c-api/include \\</p>\n<p>### target/release/libwasmtime.a \\<br>\n-lpthread -ldl -lm \\<br>\n-o hello<br>\n./hello</p>\n<p>Without question, I cannot get this hello-world wasm in C compiled and run :(</p>\n<p>Thank you so much!</p>\n</blockquote>",
        "id": 216473625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605190728
    },
    {
        "content": "<p>ZW007 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726109708\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>cargo build --release -p wasmtime-c-api</p>\n</blockquote>\n<p>This is what compiles <code>target/release/libwasmtime.a</code>. You will have to run it from the root of your wasmtime clone. Rustc can target wasm, but by default it will compile for the host system.</p>\n</blockquote>\n</blockquote>",
        "id": 216474423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605191089
    },
    {
        "content": "<p>ZW007 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>I followed this official wasmtime tutorial on embedding wasmtime in C. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c</a></p>\n<p>It provides commands to compile the C code with hello-world wasm embedded, but I don't know what do the two lines (cargo build --release -p wasmtime-c-api, target/release/libwasmtime.a) do? cargo build is for building a rust application, what has it to do with compiling C code, let alone there is no cargo.toml, so the cargo build itself would also fail. And this static library target/release/libwasmtime.a is also not in the wasmtime repo. <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p><strong>cargo build --release -p wasmtime-c-api</strong><br>\ncc examples/hello.c \\<br>\n-I crates/c-api/include \\<br>\n-I crates/c-api/wasm-c-api/include \\</p>\n<p>### target/release/libwasmtime.a \\<br>\n-lpthread -ldl -lm \\<br>\n-o hello<br>\n./hello</p>\n<p>Without question, I cannot get this hello-world wasm in C compiled and run :(</p>\n<p>Thank you so much!</p>\n</blockquote>",
        "id": 216474425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605191090
    },
    {
        "content": "<p>ZW007 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726109708\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>cargo build --release -p wasmtime-c-api</p>\n</blockquote>\n<p>This is what compiles <code>target/release/libwasmtime.a</code>. You will have to run it from the root of your wasmtime clone. Rustc can target wasm, but by default it will compile for the host system.</p>\n</blockquote>\n<p>Thank you~! When I run cargo build --release -p wasmtime-c-api from the root of wasmtime clone, it says<br>\nerror: failed to read <code>pathtowasmtimeclone/wasmtime/crates/wasi-common/WASI/tools/witx/Cargo.toml</code></p>\n<p>I dont know what to do.</p>\n</blockquote>",
        "id": 216474946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605191314
    },
    {
        "content": "<p>ZW007 reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>I followed this official wasmtime tutorial on embedding wasmtime in C. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c</a></p>\n<p>It provides commands to compile the C code with hello-world wasm embedded, but I don't know what do the two lines (cargo build --release -p wasmtime-c-api, target/release/libwasmtime.a) do? cargo build is for building a rust application, what has it to do with compiling C code, let alone there is no cargo.toml, so the cargo build itself would also fail. And this static library target/release/libwasmtime.a is also not in the wasmtime repo. <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p><strong>cargo build --release -p wasmtime-c-api</strong><br>\ncc examples/hello.c \\<br>\n-I crates/c-api/include \\<br>\n-I crates/c-api/wasm-c-api/include \\</p>\n<p>### target/release/libwasmtime.a \\<br>\n-lpthread -ldl -lm \\<br>\n-o hello<br>\n./hello</p>\n<p>Without question, I cannot get this hello-world wasm in C compiled and run :(</p>\n<p>Thank you so much!</p>\n</blockquote>",
        "id": 216488844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605197202
    },
    {
        "content": "<p>ZW007 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726173711\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>When I run cargo build --release -p wasmtime-c-api from the root of wasmtime clone, it says<br>\nerror: failed to read pathtowasmtimeclone/wasmtime/crates/wasi-common/WASI/tools/witx/Cargo.toml</p>\n<p>I dont know what to do.</p>\n</blockquote>",
        "id": 216488887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605197219
    },
    {
        "content": "<p>ZW007 deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726173711\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>When I run cargo build --release -p wasmtime-c-api from the root of wasmtime clone, it says<br>\nerror: failed to read pathtowasmtimeclone/wasmtime/crates/wasi-common/WASI/tools/witx/Cargo.toml</p>\n<p>I dont know what to do.</p>\n</blockquote>",
        "id": 216489148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605197314
    },
    {
        "content": "<p>ZW007 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726174936\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>cargo build --release -p wasmtime-c-api</p>\n</blockquote>\n<p>This is what compiles <code>target/release/libwasmtime.a</code>. You will have to run it from the root of your wasmtime clone. Rustc can target wasm, but by default it will compile for the host system.</p>\n</blockquote>\n<p>Thank you~! When I run cargo build --release -p wasmtime-c-api from the root of wasmtime clone, it says<br>\nerror: failed to read pathtowasmtimeclone/wasmtime/crates/wasi-common/WASI/tools/witx/Cargo.toml</p>\n<p>I dont know what to do.</p>\n</blockquote>",
        "id": 216489194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605197338
    },
    {
        "content": "<p>ZW007 deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726109708\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>cargo build --release -p wasmtime-c-api</p>\n</blockquote>\n<p>This is what compiles <code>target/release/libwasmtime.a</code>. You will have to run it from the root of your wasmtime clone. Rustc can target wasm, but by default it will compile for the host system.</p>\n</blockquote>\n<p>Thank you~! When I run cargo build --release -p wasmtime-c-api from the root of wasmtime clone, it says<br>\nerror: failed to read <code>pathtowasmtimeclone/wasmtime/crates/wasi-common/WASI/tools/witx/Cargo.toml</code></p>\n<p>I dont know what to do.</p>\n</blockquote>",
        "id": 216489243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605197361
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726198277\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>It sounds like maybe the git submodules aren't cloned? Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">submodule</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">init</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 216494974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605199619
    },
    {
        "content": "<p>ZW007 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726302511\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<p>It sounds like maybe the git submodules aren't cloned? Try this:</p>\n<p><code>\ngit submodule update --init\n</code></p>\n</blockquote>\n<p>Hi Chris, Thank you!! I thought simply a git would work. Now I am able to run the examples except the wasi one.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/eb650f6fe0e1f40432e7fa8d62b2885d0e4c5467/examples/wasi/main.c\">https://github.com/bytecodealliance/wasmtime/blob/eb650f6fe0e1f40432e7fa8d62b2885d0e4c5467/examples/wasi/main.c</a></p>\n<p>The line 40 is:       FILE* file = fopen(\"target/wasm32-wasi/debug/wasi.wasm\", \"rb\"); </p>\n<p>but there is no wasm32-wasi directory in my wasmtime clone. I have already  cargo build --release -p wasmtime-c-api   But  after this command, there is only a ./release directory and a CACHEDIR.TAG file in my ./target directory.  </p>\n<p>There is still something missing in my target directory I think </p>\n</blockquote>",
        "id": 216518227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605210492
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726307029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<p>I think you will also need to run <code>cargo build --target wasm32-wasi --example wasi</code> to build just that file.</p>\n</blockquote>",
        "id": 216519199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211037
    },
    {
        "content": "<p>ZW007 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726316832\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think you will also need to run <code>cargo build --target wasm32-wasi --example wasi</code> to build just that file.</p>\n</blockquote>\n<p>Thank you! I tried this command, but there is compiling error during cargo build: </p>\n<p>Compiling errno v0.2.7<br>\nerror[E0554]: <code>#![feature]</code> may not be used on the stable release channel<br>\n  --&gt; /home/zhen/.cargo/registry/src/github.com-1ecc6299db9ec823/errno-0.2.7/src/lib.rs:20:33<br>\n   |<br>\n20 | #![cfg_attr(target_os = \"wasi\", feature(thread_local))]<br>\n   |                                 ^^^^^^^^^^^^^^^^^^^^^</p>\n<p>Compiling time v0.1.44<br>\nerror: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0554</code>.<br>\nerror: could not compile <code>errno</code>.</p>\n<p>To learn more, run the command again with --verbose.<br>\nwarning: build failed, waiting for other jobs to finish...<br>\nerror: build failed</p>\n</blockquote>",
        "id": 216521576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212190
    },
    {
        "content": "<p>ZW007 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726316832\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think you will also need to run <code>cargo build --target wasm32-wasi --example wasi</code> to build just that file.</p>\n</blockquote>\n<p>Thank you! I tried this command, but there is compiling error during cargo build: </p>\n<blockquote>\n<p>Compiling errno v0.2.7<br>\nerror[E0554]: <code>#![feature]</code> may not be used on the stable release channel<br>\n  --&gt; /home/zhen/.cargo/registry/src/github.com-1ecc6299db9ec823/errno-0.2.7/src/lib.rs:20:33<br>\n   |<br>\n20 | #![cfg_attr(target_os = \"wasi\", feature(thread_local))]<br>\n   |                                 ^^^^^^^^^^^^^^^^^^^^^</p>\n<p>Compiling time v0.1.44<br>\nerror: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0554</code>.<br>\nerror: could not compile <code>errno</code>.</p>\n<p>To learn more, run the command again with --verbose.<br>\nwarning: build failed, waiting for other jobs to finish...<br>\nerror: build failed</p>\n</blockquote>\n<p>rustc --explain E0554 says I need nightly version. So I changed by using rustup default nightly, now I got the new error :(</p>\n<blockquote>\n<p>error[E0463]: can't find crate for <code>core</code><br>\n  |<br>\n  = note: the <code>wasm32-wasi</code> target may not be installed</p>\n<p>error: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0463</code>.<br>\nerror: could not compile <code>cfg-if</code></p>\n</blockquote>\n</blockquote>",
        "id": 216522980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212797
    },
    {
        "content": "<p>ZW007 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401#issuecomment-726316832\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2401\">Issue #2401</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think you will also need to run <code>cargo build --target wasm32-wasi --example wasi</code> to build just that file.</p>\n</blockquote>\n<p>Thank you! I tried this command, but there is compiling error during cargo build: </p>\n<blockquote>\n<p>Compiling errno v0.2.7<br>\nerror[E0554]: <code>#![feature]</code> may not be used on the stable release channel<br>\n  --&gt; /home/zhen/.cargo/registry/src/github.com-1ecc6299db9ec823/errno-0.2.7/src/lib.rs:20:33<br>\n   |<br>\n20 | #![cfg_attr(target_os = \"wasi\", feature(thread_local))]<br>\n   |                                 ^^^^^^^^^^^^^^^^^^^^^</p>\n<p>Compiling time v0.1.44<br>\nerror: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0554</code>.<br>\nerror: could not compile <code>errno</code>.</p>\n<p>To learn more, run the command again with --verbose.<br>\nwarning: build failed, waiting for other jobs to finish...<br>\nerror: build failed</p>\n</blockquote>\n<p>rustc --explain E0554 says I need nightly version. So I changed by using  <strong>rustup default nightly</strong></p>\n<p>, now I got the new error :(</p>\n<blockquote>\n<p>error[E0463]: can't find crate for <code>core</code><br>\n  |<br>\n  = note: the <code>wasm32-wasi</code> target may not be installed</p>\n<p>error: aborting due to previous error</p>\n<p>For more information about this error, try <code>rustc --explain E0463</code>.<br>\nerror: could not compile <code>cfg-if</code></p>\n</blockquote>\n</blockquote>",
        "id": 216523136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605212874
    }
]