[
    {
        "content": "<p>girazoki opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>We have implemented this repo <a href=\"https://github.com/girazoki/wasmtime-try\">https://github.com/girazoki/wasmtime-try</a> to try something that has been happening us with some latest code change we have done at moonbeam. The code change is <a href=\"https://github.com/PureStake/moonbeam/pull/989\">https://github.com/PureStake/moonbeam/pull/989</a>.</p>\n<p>Without the PR, wasmtime takes around 15 seconds to compile the wasm. However, if we include the change (removal of the trait) wasmtime takes less than a second to compile. We wonder how these differences can be so big with such a small code change.</p>\n<p>Any help would be appreciated, thanks!</p>\n</blockquote>",
        "id": 261545114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637003786
    },
    {
        "content": "<p>girazoki edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>We have implemented this repo <a href=\"https://github.com/girazoki/wasmtime-try\">https://github.com/girazoki/wasmtime-try</a> to try something that has been happening us with some latest code change we have done at moonbeam. The code change is <a href=\"https://github.com/PureStake/moonbeam/pull/989\">https://github.com/PureStake/moonbeam/pull/989</a>.</p>\n<p>Without the PR, wasmtime takes around 15 seconds to compile the wasm. However, if we include the change (removal of the trait) wasmtime takes less than a second to compile. We wonder how these differences can be so big with such a small code change.</p>\n<p>Both runtimes are in <a href=\"https://github.com/girazoki/wasmtime-try\">https://github.com/girazoki/wasmtime-try</a> to try them out<br>\nAny help would be appreciated, thanks!</p>\n</blockquote>",
        "id": 261545184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637003829
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969244170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>Running the script from your repository <a href=\"https://github.com/girazoki/wasmtime-try/blob/40783d500705f9a4213cf8ab579d6f5c3cdd8160/src/main.rs#L18\">this file doesn't exist</a>, but when corrected to <code>moonbase_fast_runtime.wasm</code> both modules compile in ~16s for me locally. </p>\n<p>Can you detail a bit more what you're doing, what's fast, and what's slow?</p>\n</blockquote>",
        "id": 261546649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637004456
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969244396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>The repro has a bug where it isn't loading the \"fast\" wasm file (named <code>moonbase_fast_runtime.wasm</code> instead of <code>moonbase_runtime_fast.wasm</code>)</p>\n<p>With that fixed, I see:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Importing</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">moonbase_runtime_slow</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">16830</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"></span>\n<span class=\"n\">Importing</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">moonbase_fast_runtime</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">16952</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 261546689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637004475
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969244396\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>The repro has a bug where it isn't loading the \"fast\" wasm file (named <code>moonbase_fast_runtime.wasm</code> instead of <code>moonbase_runtime_fast.wasm</code>).</p>\n<p>With that fixed, I see:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Importing</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">moonbase_runtime_slow</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">16830</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"></span>\n<span class=\"n\">Importing</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">moonbase_runtime_fast</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">16952</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 261546780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637004503
    },
    {
        "content": "<p>girazoki <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969265168\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>Sorry it was my bad, updated fast. Now you should be able to see the difference, I updated the fast one.</p>\n<p>The context is: We have the moonbase runtime <a href=\"https://github.com/PureStake/moonbeam/blob/master/runtime/moonbase/src/lib.rs\">https://github.com/PureStake/moonbeam/blob/master/runtime/moonbase/src/lib.rs</a> that adds <a href=\"https://github.com/PureStake/moonbeam/blob/57fdb3f18fe0a48471bfcad2c37d89708a3a274f/runtime/moonbase/src/lib.rs#L1023\">https://github.com/PureStake/moonbeam/blob/57fdb3f18fe0a48471bfcad2c37d89708a3a274f/runtime/moonbase/src/lib.rs#L1023</a>. This is moonbase_slow</p>\n<p>When we inserted this change, we realized an increase on the wasm compilation time. So we are trying to monitor the reason why this happens.  For that reason why created this PR <a href=\"https://github.com/PureStake/moonbeam/pull/989\">https://github.com/PureStake/moonbeam/pull/989</a>, with the code commented, compiled it and measured its wasm compilation time. This is moonbase_fast</p>\n<p>For me the first takes 16 secs, while the latter takes around 1. And I am not able to picture the reason of the difference</p>\n</blockquote>",
        "id": 261550148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637006061
    },
    {
        "content": "<p>notlesh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969272263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>FYI, some debugging I've done indicates that we get into one invocation of <code>compile_function()</code> (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/f7543d3d10fee255a2cd7cbb999191168f55b4aa/crates/wasmtime/src/module.rs#L395\">here</a>) which takes the entire duration of the compilation (that is, if it takes 22 seconds to compile the entire binary, this one job takes 22 seconds itself). </p>\n</blockquote>",
        "id": 261551386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637006615
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969319849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p>Thanks for the update, I can indeed reproduce the large discrepancy in compile times. What's happening here is that something pathological is being hit in Cranelift, and it's definitely something that we should fix!</p>\n<p>Specifically in <a href=\"https://github.com/girazoki/wasmtime-try/blob/main/moonbase_runtime_slow.wasm\">this wasm file</a> the <code>&lt;xcm_executor::XcmExecutor&lt;Config&gt; as xcm::v2::traits::ExecuteXcm&lt;&lt;Config as xcm_executor::config::Config&gt;::Call&gt;&gt;::execute_xcm_in_credit</code> function takes 16s to compile. In that wasm file it's function index 1198 and the mangled name is <code>_ZN155_$LT$xcm_executor..XcmExecutor$LT$Config$GT$$u20$as$u20$xcm..v2..traits..ExecuteXcm$LT$$LT$Config$u20$as$u20$xcm_executor..config..Config$GT$..Call$GT$$GT$21execute_xcm_in_credit17hf41c2b7a319ac14dE</code>.</p>\n<p>Extracting just that one function to a wasm module yields <a href=\"https://github.com/bytecodealliance/wasmtime/files/7541621/extract.wasm.gz\">extract.wasm.gz</a> and this can be reproduced locally with <code>wamtime compile extract.wasm</code> taking 16-17s locally. The breakdown I see is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">wasmtime_cranelift</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">wasmtime_cranelift</span>::<span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FuncIndex</span><span class=\"p\">(</span><span class=\"mi\">989</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">translated</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">16.363414899</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_cranelift</span>::<span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FuncIndex</span><span class=\"p\">(</span><span class=\"mi\">989</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">timing</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"></span>\n<span class=\"o\">========</span><span class=\"w\"> </span><span class=\"o\">========</span><span class=\"w\">  </span><span class=\"o\">==================================</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Total</span><span class=\"w\">     </span><span class=\"bp\">Self</span><span class=\"w\">  </span><span class=\"n\">Pass</span><span class=\"w\"></span>\n<span class=\"o\">--------</span><span class=\"w\"> </span><span class=\"o\">--------</span><span class=\"w\">  </span><span class=\"o\">----------------------------------</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.320</span><span class=\"w\">    </span><span class=\"mf\">0.320</span><span class=\"w\">  </span><span class=\"n\">Translate</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">16.039</span><span class=\"w\">    </span><span class=\"mf\">0.025</span><span class=\"w\">  </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">passes</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.001</span><span class=\"w\">    </span><span class=\"mf\">0.001</span><span class=\"w\">  </span><span class=\"n\">Control</span><span class=\"w\"> </span><span class=\"n\">flow</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.002</span><span class=\"w\">    </span><span class=\"mf\">0.002</span><span class=\"w\">  </span><span class=\"n\">Dominator</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.000</span><span class=\"w\">    </span><span class=\"mf\">0.000</span><span class=\"w\">  </span><span class=\"n\">Loop</span><span class=\"w\"> </span><span class=\"n\">analysis</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.001</span><span class=\"w\">    </span><span class=\"mf\">0.001</span><span class=\"w\">  </span><span class=\"n\">Pre</span><span class=\"o\">-</span><span class=\"n\">legalization</span><span class=\"w\"> </span><span class=\"n\">rewriting</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.004</span><span class=\"w\">    </span><span class=\"mf\">0.004</span><span class=\"w\">  </span><span class=\"n\">Dead</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">elimination</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.012</span><span class=\"w\">    </span><span class=\"mf\">0.012</span><span class=\"w\">  </span><span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">numbering</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.036</span><span class=\"w\">    </span><span class=\"mf\">0.027</span><span class=\"w\">  </span><span class=\"n\">Loop</span><span class=\"w\"> </span><span class=\"n\">invariant</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">motion</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.000</span><span class=\"w\">    </span><span class=\"mf\">0.000</span><span class=\"w\">  </span><span class=\"n\">Remove</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.246</span><span class=\"w\">    </span><span class=\"mf\">0.246</span><span class=\"w\">  </span><span class=\"n\">Remove</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">phi</span><span class=\"o\">-</span><span class=\"n\">nodes</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.188</span><span class=\"w\">    </span><span class=\"mf\">0.188</span><span class=\"w\">  </span><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.022</span><span class=\"w\">    </span><span class=\"mf\">0.022</span><span class=\"w\">  </span><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"n\">post</span><span class=\"o\">-</span><span class=\"n\">register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">finalization</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.026</span><span class=\"w\">    </span><span class=\"mf\">0.026</span><span class=\"w\">  </span><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"n\">emission</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.000</span><span class=\"w\">    </span><span class=\"mf\">0.000</span><span class=\"w\">  </span><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"n\">emission</span><span class=\"w\"> </span><span class=\"n\">finalization</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mf\">15.478</span><span class=\"w\">   </span><span class=\"mf\">15.478</span><span class=\"w\">  </span><span class=\"n\">Register</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.004</span><span class=\"w\">    </span><span class=\"mf\">0.004</span><span class=\"w\">  </span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"n\">machine</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">emission</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mf\">0.008</span><span class=\"w\">    </span><span class=\"mf\">0.008</span><span class=\"w\">  </span><span class=\"n\">Layout</span><span class=\"w\"> </span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"n\">renumbering</span><span class=\"w\"></span>\n<span class=\"o\">========</span><span class=\"w\"> </span><span class=\"o\">========</span><span class=\"w\">  </span><span class=\"o\">==================================</span><span class=\"w\"></span>\n</code></pre></div>\n<p>There are known pitfalls with our register allocator at this time and plans to move to a better register allocator. My guess is that this is likely to fall into that category of \"probably will get fixed\", but @cfallin do you think it's worthwhile digging in more here to figure out why something is triggering the slowdown here?</p>\n<p>@girazoki and @notlesh in the meantime for your specific use case if you'd like to avoid this slowdown I'd recommend taking a look at <code>&lt;xcm_executor::XcmExecutor&lt;Config&gt; as xcm::v2::traits::ExecuteXcm&lt;&lt;Config as xcm_executor::config::Config&gt;::Call&gt;&gt;::execute_xcm_in_credit</code> and trying to simplify it a bit. It's a huge function in the wasm and probably has a ton of stuff <code>#[inline]</code>'d into it which greatly increases the size of the function. It may be the case that adding <code>#[inline(never)]</code> or otherwise removing <code>#[inline]</code> annotations in a few places could improve wasmtime compile times. Nevertheless we should still fix this in Wasmtime, but that's at least a possibility for fixing things in the near future if you're interested.</p>\n</blockquote>",
        "id": 261558799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637010306
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969324846\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/7541677/extract-min.wasm.gz\">This is a slightly smaller minimization</a><br>\n with data strings and import strings all removed as well which makes navigating the <code>*.wat</code> a bit easier, and still takes ~16s to compile the one function within.</p>\n</blockquote>",
        "id": 261559599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637010660
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523#issuecomment-969324846\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3523\">issue #3523</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/7541677/extract-min.wasm.gz\">This is a slightly smaller minimization</a> with data strings and import strings all removed as well which makes navigating the <code>*.wat</code> a bit easier, and still takes ~16s to compile the one function within.</p>\n</blockquote>",
        "id": 261559623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637010667
    }
]