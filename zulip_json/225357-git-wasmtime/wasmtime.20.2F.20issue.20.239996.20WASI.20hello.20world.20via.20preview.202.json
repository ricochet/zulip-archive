[
    {
        "content": "<p>rikhuijzer opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>There is a nice \"hello world\" example in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">docs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n    <span class=\"c1\">;; Import the required fd_write WASI function which will write the given io vectors to stdout</span>\n    <span class=\"c1\">;; The function signature for fd_write is:</span>\n    <span class=\"c1\">;; (File Descriptor, *iovs, iovs_len, *nwritten) -&gt; Returns 0 on success, nonzero on error</span>\n    <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_snapshot_preview1\"</span> <span class=\"s2\">\"fd_write\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n    <span class=\"c1\">;; Write 'hello world\\n' to memory at an offset of 8 bytes</span>\n    <span class=\"c1\">;; Note the trailing newline which is required for the text to appear</span>\n    <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"s2\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; Creating a new io vector within linear memory</span>\n        <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">))</span>  <span class=\"c1\">;; iov.iov_base - This is a pointer to the start of the 'hello world\\n' string</span>\n        <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">12</span><span class=\"p\">))</span>  <span class=\"c1\">;; iov.iov_len - The length of the 'hello world\\n' string</span>\n\n        <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$fd_write</span>\n            <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">;; file_descriptor - 1 for stdout</span>\n            <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\">;; *iovs - The pointer to the iov array, which is stored at memory location 0</span>\n            <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">;; iovs_len - We're printing 1 string stored in an iov - so one.</span>\n            <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"c1\">;; nwritten - A place in memory to store the number of bytes written</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">drop</span> <span class=\"c1\">;; Discard the number of bytes written from the top of the stack</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I've just tested this with wasmtime 28.0.0 and it works fine (prints \"hello world\" to stdout).</p>\n<p>However, this example is using the \"wasi_snapshot_preview1\" API while preview 2 is currently stable. I think this example can probably be rewritten using <a href=\"https://github.com/WebAssembly/WASI/blob/main/wasip2/io/streams.wit\">output-stream write from streams.wit</a>, but I'm a bit at a loss where to find code related to this.</p>\n<p>Could anyone give some pointers on how to print via preview 2?</p>\n</blockquote>",
        "id": 493416894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736791833
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2588175165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>I think you probably want this:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (import \"wasi:cli/stdout@0.2.3\" \"get-stdout\"\n    (func $get-stdout (result i32)))\n  (import \"wasi:io/streams@0.2.3\" \"[method]output-stream.blocking-write-and-flush\"\n    (func $blocking-write-and-flush (param i32 i32 i32 i32)))\n  (memory (export \"memory\") 17)\n  (func (export \"wasi:cli/run@0.2.3#run\") (result i32)\n    (local i32 i32 i32)\n    call $get-stdout\n    i32.const 100\n    i32.const 15\n    local.get 0\n    call $blocking-write-and-flush\n    i32.const 0\n  )\n  (data (i32.const 100) \"Hello, world!\\n\")\n)\n</code></pre></div>\n<p>Execute this with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>This is more component-model level documentation rather than Wasmtime documentation which is why it's not currently in this repository (it'd be a good addition to <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> probably!)</p>\n</blockquote>",
        "id": 493446407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736801570
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2588175165\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>I think you probably want this:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (import \"wasi:cli/stdout@0.2.3\" \"get-stdout\"\n    (func $get-stdout (result i32)))\n  (import \"wasi:io/streams@0.2.3\" \"[method]output-stream.blocking-write-and-flush\"\n    (func $blocking-write-and-flush (param i32 i32 i32 i32)))\n  (memory (export \"memory\") 1)\n  (func (export \"wasi:cli/run@0.2.3#run\") (result i32)\n    (local i32 i32 i32)\n    call $get-stdout\n    i32.const 100\n    i32.const 15\n    local.get 0\n    call $blocking-write-and-flush\n    i32.const 0\n  )\n  (data (i32.const 100) \"Hello, world!\\n\")\n)\n</code></pre></div>\n<p>Execute this with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>This is more component-model level documentation rather than Wasmtime documentation which is why it's not currently in this repository (it'd be a good addition to <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> probably!)</p>\n</blockquote>",
        "id": 493446485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736801588
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2588175165\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>I think you probably want this:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (import \"wasi:cli/stdout@0.2.3\" \"get-stdout\"\n    (func $get-stdout (result i32)))\n  (import \"wasi:io/streams@0.2.3\" \"[method]output-stream.blocking-write-and-flush\"\n    (func $blocking-write-and-flush (param i32 i32 i32 i32)))\n  (memory (export \"memory\") 1)\n  (func (export \"wasi:cli/run@0.2.3#run\") (result i32)\n    call $get-stdout\n    i32.const 100\n    i32.const 15\n    i32.const 96\n    call $blocking-write-and-flush\n    i32.const 0\n  )\n  (data (i32.const 100) \"Hello, world!\\n\")\n)\n</code></pre></div>\n<p>Execute this with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>This is more component-model level documentation rather than Wasmtime documentation which is why it's not currently in this repository (it'd be a good addition to <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> probably!)</p>\n</blockquote>",
        "id": 493446576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736801622
    },
    {
        "content": "<p>rikhuijzer <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2589256378\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>Thank you Alex for the help. I've spent now an hour going through the various projects in order to figure out what should be inside \"wasi.wit\". I've looked at <a href=\"https://github.com/bytecodealliance/wit-deps\">wit-deps</a> and tried <a href=\"https://github.com/sunfishcode/hello-wasi-http\">hello-wasi-http</a>, but get errors like even when I have included all the wit files from hello-wasi-http.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">package</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"w\">     </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">11</span>\n<span class=\"w\">      </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">proxy</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"o\">^--------</span>\n</code></pre></div>\n<p>Anyway no need to debug my attempts. How would you go about creating <code>wasi.wit</code>? </p>\n<blockquote>\n<p>(it'd be a good addition to <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> probably!)</p>\n</blockquote>\n<p>I'll happily add it once I've got something working <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 493530477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736841829
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2593978965\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<p>There's a number of ways to get the WIT right now but you're right in that most aren't well documented and there's not necessarily a canonical way of doing so AFAIK for this sort of CLI use case. One way though is to:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/WebAssembly/WASI\">https://github.com/WebAssembly/WASI</a> </li>\n<li>Checkout the tag you want (e.g. 0.2.2)</li>\n<li>Use the <code>wasip2</code> directory as the <code>wasi.wit</code> input (e.g. pass in a directory, not a WIT file).</li>\n</ul>\n<p>This might also require a <code>--world</code> argument to specify <code>wasi:cli/run</code> for example </p>\n</blockquote>",
        "id": 494020703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736976713
    },
    {
        "content": "<p>rikhuijzer <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2597859831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996\">issue #9996</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Clone <a href=\"https://github.com/WebAssembly/WASI\">https://github.com/WebAssembly/WASI</a></li>\n<li>Checkout the tag you want (e.g. 0.2.2)</li>\n<li>Use the wasip2 directory as the wasi.wit input (e.g. pass in a directory, not a WIT file).</li>\n</ul>\n</blockquote>\n<p>Is the following indeed the direction I should take? <code>hello.wat</code> here is the code <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9996#issuecomment-2588175165\">you wrote</a> with the <code>0.2.3</code> replaced by <code>0.2.2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>embed<span class=\"w\"> </span>WASI/wasip2/io<span class=\"w\"> </span>hello.wat<span class=\"w\"> </span><span class=\"c1\"># this at least doesn't crash</span>\nerror:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>print<span class=\"w\"> </span>binary<span class=\"w\"> </span>wasm<span class=\"w\"> </span>output<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>terminal,<span class=\"w\"> </span>pass<span class=\"w\"> </span>the<span class=\"w\"> </span><span class=\"sb\">`</span>-t<span class=\"sb\">`</span><span class=\"w\"> </span>flag<span class=\"w\"> </span>to<span class=\"w\"> </span>print<span class=\"w\"> </span>the<span class=\"w\"> </span>text<span class=\"w\"> </span>format\n\n$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>embed<span class=\"w\"> </span>WASI/wasip2/io<span class=\"w\"> </span>hello.wat<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>-o<span class=\"w\"> </span>component.wasm\nerror:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>encode<span class=\"w\"> </span>a<span class=\"w\"> </span>component<span class=\"w\"> </span>from<span class=\"w\"> </span>module\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>decode<span class=\"w\"> </span>world<span class=\"w\"> </span>from<span class=\"w\"> </span>module\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>module<span class=\"w\"> </span>was<span class=\"w\"> </span>not<span class=\"w\"> </span>valid\n<span class=\"w\">    </span><span class=\"m\">2</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve<span class=\"w\"> </span>import<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:cli/stdout@0.2.2::get-stdout<span class=\"sb\">`</span>\n<span class=\"w\">    </span><span class=\"m\">3</span>:<span class=\"w\"> </span>module<span class=\"w\"> </span>requires<span class=\"w\"> </span>an<span class=\"w\"> </span>import<span class=\"w\"> </span>interface<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:cli/stdout@0.2.2<span class=\"sb\">`</span>\n</code></pre></div>\n<p>So I should point <code>embed</code> to <code>WASI/wasip2</code> because <code>io</code> doesn't include <code>cli</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>embed<span class=\"w\"> </span>WASI/wasip2/<span class=\"w\"> </span>hello.wat\nerror:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span>parsing<span class=\"w\"> </span>WIT<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>path<span class=\"w\"> </span><span class=\"o\">[</span>WASI/wasip2/<span class=\"o\">]</span>\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>parse<span class=\"w\"> </span>package:<span class=\"w\"> </span>WASI/wasip2/\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span>no<span class=\"w\"> </span><span class=\"sb\">`</span>package<span class=\"sb\">`</span><span class=\"w\"> </span>header<span class=\"w\"> </span>was<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>any<span class=\"w\"> </span>WIT<span class=\"w\"> </span>file<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>this<span class=\"w\"> </span>package\nerror:<span class=\"w\"> </span>expected<span class=\"w\"> </span>at<span class=\"w\"> </span>least<span class=\"w\"> </span>one<span class=\"w\"> </span>module<span class=\"w\"> </span>field\n<span class=\"w\">     </span>--&gt;<span class=\"w\"> </span>&lt;stdin&gt;:1:1\n<span class=\"w\">      </span><span class=\"p\">|</span>\n<span class=\"w\">    </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span>\n<span class=\"w\">      </span><span class=\"p\">|</span><span class=\"w\"> </span>^\n\n$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>--version\nwasm-tools<span class=\"w\"> </span><span class=\"m\">1</span>.223.0\n</code></pre></div>\n<p>Now I wonder whether the thing I'm asking for in this issue is actually an aim of wasmtime? Is getting this to work an aim of the wasmtime project or am I trying to do the wrong thing here? If yes? How what problems should I use wasmtime for?</p>\n</blockquote>",
        "id": 494323043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737107929
    }
]