[
    {
        "content": "<p>coolreader18 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"custom-fuel-cost\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmparser</span>::<span class=\"n\">Operator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could perhaps take a <code>wasmtime::Operator</code> or <code>wasmtime::OperatorCategory</code> enum, so as to avoid exposing <code>wasmparser</code> in the public API. However, both of those approaches have issues (a duplicate <code>Operator</code> is.. okay actually thinking about it, if it were to just define another <code>enum Operator</code> using <a href=\"https://docs.rs/wasmparser/latest/wasmparser/macro.for_each_operator.html\"><code>wasmparser::for_each_operator!</code></a> that might not be too bad. That's a valid second option, if wasmparser in public API (behind a feature flag) isn't something that's desirable.</p>\n</blockquote>",
        "id": 305904738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666641806
    },
    {
        "content": "<p>coolreader18 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"custom-fuel-cost\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmparser</span>::<span class=\"n\">Operator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could perhaps take a <code>wasmtime::Operator</code> or <code>wasmtime::OperatorCategory</code> enum, so as to avoid exposing <code>wasmparser</code> in the public API. However, both of those approaches have issues (a duplicate <code>Operator</code> is.. okay actually thinking about it, if it were to just define another <code>enum Operator</code> using <a href=\"https://docs.rs/wasmparser/latest/wasmparser/macro.for_each_operator.html\"><code>wasmparser::for_each_operator!</code></a> (maybe without the parameters at all, just the opcodes themselves?) that might not be too bad. That's a valid second option, if wasmparser in public API (behind a feature flag) isn't something that's desirable.</p>\n</blockquote>",
        "id": 305905450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666642139
    },
    {
        "content": "<p>coolreader18 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"custom-fuel-cost\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmparser</span>::<span class=\"n\">Operator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could perhaps take a <code>wasmtime::Operator</code> or <code>wasmtime::OperatorCategory</code> enum, so as to avoid exposing <code>wasmparser</code> in the public API. However, both of those approaches have issues (a duplicate <code>Operator</code> is.. okay actually thinking about it, if it were to just define another <code>enum Operator</code> using <a href=\"https://docs.rs/wasmparser/latest/wasmparser/macro.for_each_operator.html\"><code>wasmparser::for_each_operator!</code></a> (maybe without the parameters at all, just the opcodes themselves?) that might not be too bad. That's a valid second option, if wasmparser in public API (behind a feature flag) isn't something that's desirable.<br>\nEdit: actually yeah that sounds like a really good idea I'm gonna change my impl to do that.</p>\n</blockquote>",
        "id": 305905508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666642165
    },
    {
        "content": "<p>coolreader18 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"custom-fuel-cost\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmparser</span>::<span class=\"n\">Operator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">OutOfFuelError</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls. <code>OutOfFuelError</code> being made public allows users to check when a Trap was caused by fuel running out.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could perhaps take a <code>wasmtime::Operator</code> or <code>wasmtime::OperatorCategory</code> enum, so as to avoid exposing <code>wasmparser</code> in the public API. However, both of those approaches have issues (a duplicate <code>Operator</code> is.. okay actually thinking about it, if it were to just define another <code>enum Operator</code> using <a href=\"https://docs.rs/wasmparser/latest/wasmparser/macro.for_each_operator.html\"><code>wasmparser::for_each_operator!</code></a> (maybe without the parameters at all, just the opcodes themselves?) that might not be too bad. That's a valid second option, if wasmparser in public API (behind a feature flag) isn't something that's desirable.</p>\n</blockquote>",
        "id": 305914715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666645994
    },
    {
        "content": "<p>coolreader18 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"custom-fuel-cost\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasmparser</span>::<span class=\"n\">Operator</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">OutOfFuelError</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls. <code>OutOfFuelError</code> being made public allows users to check when a Trap was caused by fuel running out.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could perhaps take a <code>wasmtime::Operator</code> or <code>wasmtime::OperatorCategory</code> enum, so as to avoid exposing <code>wasmparser</code> in the public API. However, both of those approaches have issues (a duplicate <code>Operator</code> is.. okay actually thinking about it, if it were to just define another <code>enum Operator</code> using <a href=\"https://docs.rs/wasmparser/latest/wasmparser/macro.for_each_operator.html\"><code>wasmparser::for_each_operator!</code></a> (maybe without the parameters at all, just the opcodes themselves?) that might not be too bad. That's a valid second option, if wasmparser in public API (behind a feature flag) isn't something that's desirable.<br>\nEdit: actually yeah that sounds like a really good idea I'm gonna change my impl to do that.</p>\n</blockquote>",
        "id": 305915382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666646291
    },
    {
        "content": "<p>coolreader18 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109#issuecomment-1289631300\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<p>Oh, looks like wasmtime-fuzzing has a shim for <code>set_fuel</code> the same as I described:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L790-L802\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L790-L802</a></p>\n</blockquote>",
        "id": 305915611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666646403
    },
    {
        "content": "<p>coolreader18 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">WasmOpcode</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">WasmOpcode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unreachable</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Nop</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Loop</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">OutOfFuelError</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls. <code>OutOfFuelError</code> being made public allows users to check when a Trap was caused by fuel running out.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could take a <code>&amp;wasmparser::Operator&lt;'_&gt;</code> as it did in the original version of this issue. However, that would require exposing <code>wasmparser</code> in wasmtime's public api, which is undesirable.</p>\n</blockquote>",
        "id": 305916067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666646620
    },
    {
        "content": "<p>howjmay <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109#issuecomment-1421948169\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<p>Hi I am curious why #5220 can help us set customized fuel for each opcode?</p>\n</blockquote>",
        "id": 326499506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675827650
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">WasmOpcode</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">enum</span> <span class=\"nc\">WasmOpcode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Unreachable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Nop</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Loop</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[non_exhaustive]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">OutOfFuelError</span><span class=\"p\">;</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls. <code>OutOfFuelError</code> being made public allows users to check when a Trap was caused by fuel running out.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could take a <code>&amp;wasmparser::Operator&lt;'_&gt;</code> as it did in the original version of this issue. However, that would require exposing <code>wasmparser</code> in wasmtime's public api, which is undesirable.</p>\n</blockquote>",
        "id": 396955245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697480656
    },
    {
        "content": "<p>RReverser <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109#issuecomment-1765234771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<p>Looks like #7240 only adds <code>reset_fuel</code>, I don't think it should've auto-closed this issue?</p>\n<p>In particular,</p>\n<blockquote>\n<p><code>fn fuel_cost(&amp;mut self, f: impl Fn(WasmOpcode) -&gt; u64 + Send + Sync + 'static) -&gt; &amp;mut Self;</code></p>\n</blockquote>\n<p>this would be still desirable.</p>\n</blockquote>",
        "id": 396974024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697488717
    },
    {
        "content": "<p>alexcrichton reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>A set of new APIs that provide more control over fuel consumption:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">WasmOpcode</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">enum</span> <span class=\"nc\">WasmOpcode</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Unreachable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Nop</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Block</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Loop</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fuel_remaining</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an error if the store is not configured for fuel consumption</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">set_fuel</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#[non_exhaustive]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">OutOfFuelError</span><span class=\"p\">;</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>Allows more direct control over fuel consumption and filling, letting users set custom fuel costs for each operand if they deem some to be more costly/intensive in their environment, as well letting them set precisely how much fuel they might allow a single function call or set of function calls. <code>OutOfFuelError</code> being made public allows users to check when a Trap was caused by fuel running out.</p>\n<h4>Implementation</h4>\n<p>I have an implementation for the custom fuel cost configuration, and the methods on <code>Store</code> should be fairly trivial.</p>\n<h4>Alternatives</h4>\n<p><code>fuel_remaining</code> and <code>set_fuel</code> can be approximated by <code>consume_fuel(0)</code> and <code>if new_fuel &gt; fuel_remaining() { add_fuel(delta) } else { consume_fuel(delta) }</code> respectively. <code>fuel_cost</code> cannot be emulated, so the alternative is to just accept wasmtime's default cost function. As an alternative in designing the API, the <code>fuel_cost</code> closure could take a <code>&amp;wasmparser::Operator&lt;'_&gt;</code> as it did in the original version of this issue. However, that would require exposing <code>wasmparser</code> in wasmtime's public api, which is undesirable.</p>\n</blockquote>",
        "id": 396987658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697496341
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109#issuecomment-1766275526\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5109\">issue #5109</a>:</p>\n<blockquote>\n<p>Apologies for this getting closed. I was picking up #5220 which also would have closed this issue. Maybe @coolreader18 could update this issue to have it be more about a custom cost function for fuel APIs?</p>\n<p>Also if you have opinions on store fuel related APIs would love to hear there here <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7255\">https://github.com/bytecodealliance/wasmtime/issues/7255</a></p>\n</blockquote>",
        "id": 397093596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697544133
    }
]