[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2336\">PR #2336</a> from <code>remove-binaryen</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes the binaryen support for fuzzing from wasmtime,<br>\ninstead switching over to <code>wasm-smith</code>. In general it's great to have<br>\nwhat fuzzing we can, but our binaryen support suffers from a few issues:</p>\n<ul>\n<li>\n<p>The Rust crate, binaryen-sys, seems largely unmaintained at this<br>\n  point. While we could likely take ownership and/or send PRs to update<br>\n  the crate it seems like the maintenance is largely on us at this point.</p>\n</li>\n<li>\n<p>Currently the binaryen-sys crate doesn't support fuzzing anything<br>\n  beyond MVP wasm, but we're interested at least in features like bulk<br>\n  memory and reference types. Additionally we'll also be interested in<br>\n  features like module-linking. New features would require either<br>\n  implementation work in binaryen or the binaryen-sys crate to support.</p>\n</li>\n<li>\n<p>We have 4-5 fuzz-bugs right now related to timeouts simply in<br>\n  generating a module for wasmtime to fuzz. One investigation along<br>\n  these lines in the past revealed a bug in binaryen itself, and in any<br>\n  case these bugs would otherwise need to get investigated, reported,<br>\n  and possibly fixed ourselves in upstream binaryen.</p>\n</li>\n</ul>\n<p>Overall I'm not sure at this point if maintaining binaryen fuzzing is<br>\nworth it with the advent of <code>wasm-smith</code> which has similar goals for<br>\nwasm module generation, but is much more readily maintainable on our<br>\nend.</p>\n<p>Additonally in this commit I've added a fuzzer for wasm-smith's<br>\n<code>SwarmConfig</code>-based fuzzer which should expand the coverage of tested<br>\nmodules.</p>\n<p>Closes #2163</p>\n</blockquote>",
        "id": 214895591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603918101
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2336\">PR #2336</a>.</p>",
        "id": 214895623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603918120
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2336\">PR #2336</a> from <code>remove-binaryen</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes the binaryen support for fuzzing from wasmtime,<br>\ninstead switching over to <code>wasm-smith</code>. In general it's great to have<br>\nwhat fuzzing we can, but our binaryen support suffers from a few issues:</p>\n<ul>\n<li>\n<p>The Rust crate, binaryen-sys, seems largely unmaintained at this<br>\n  point. While we could likely take ownership and/or send PRs to update<br>\n  the crate it seems like the maintenance is largely on us at this point.</p>\n</li>\n<li>\n<p>Currently the binaryen-sys crate doesn't support fuzzing anything<br>\n  beyond MVP wasm, but we're interested at least in features like bulk<br>\n  memory and reference types. Additionally we'll also be interested in<br>\n  features like module-linking. New features would require either<br>\n  implementation work in binaryen or the binaryen-sys crate to support.</p>\n</li>\n<li>\n<p>We have 4-5 fuzz-bugs right now related to timeouts simply in<br>\n  generating a module for wasmtime to fuzz. One investigation along<br>\n  these lines in the past revealed a bug in binaryen itself, and in any<br>\n  case these bugs would otherwise need to get investigated, reported,<br>\n  and possibly fixed ourselves in upstream binaryen.</p>\n</li>\n</ul>\n<p>Overall I'm not sure at this point if maintaining binaryen fuzzing is<br>\nworth it with the advent of <code>wasm-smith</code> which has similar goals for<br>\nwasm module generation, but is much more readily maintainable on our<br>\nend.</p>\n<p>Additonally in this commit I've added a fuzzer for wasm-smith's<br>\n<code>SwarmConfig</code>-based fuzzer which should expand the coverage of tested<br>\nmodules.</p>\n<p>Closes #2163</p>\n</blockquote>",
        "id": 214897978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603919332
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2336#pullrequestreview-519133614\">PR Review</a>.</p>",
        "id": 214905836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603924340
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2336\">PR #2336</a>.</p>",
        "id": 214978886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603983782
    }
]