[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-675969632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:wasm\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 207383378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597826996
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-678231545\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>Suggested additional reviewer: @osa1</p>\n</blockquote>",
        "id": 207621429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598007295
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-678688419\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I think it is better to squash all the commits before a merge and adding a better overall commit message.</p>\n</blockquote>",
        "id": 207740341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598127192
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-679955698\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>@yurydelendik Thanks for the review. I can't see where I have introduced O(n^2). The insertion of <code>LandingPad</code>s is linear in the number of parts, just like the removal of uninteresting ones. Post-translation, building of the <code>old_to_new</code> should be linear (modulo HashMap internals) and the  backpatching too.</p>\n<p>I have contemplated about remembering the offset of every part that is pushed, but the parts are not 1:1 preserved in the transformation. With floating <code>LandingPad</code>s this is not a problem. Attaching an original offset to every part is also tricky, because the translation process would have trouble doing the bookkeeping of offsets.</p>\n<p>Regarding <code>frame_base</code>, yes, this is a hole still, but I need a better understanding what <code>frame_base</code> is for. Is it for the location expressions that guide into structure members?</p>\n</blockquote>",
        "id": 207948788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598353209
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680023495\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<blockquote>\n<p>I can't see where I have introduced O(n^2).</p>\n</blockquote>\n<p>It is near <code>filter_map(.. any()/all() ..).collect()</code> and some <code>old_to_new</code> operations.</p>\n<blockquote>\n<p>I need a better understanding what <code>frame_base</code> is for</p>\n</blockquote>\n<p>This expression is coming from <code>DW_AT_frame_base</code>. (Discard my idea about offsetting, I was incorrect there) It shall be inlined during each <code>DW_OP_fbreg</code> operation.</p>\n</blockquote>",
        "id": 207961999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598361944
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680031050\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<blockquote>\n<p>Attaching an original offset to every part is also tricky, because the translation process would have trouble doing the bookkeeping of offsets.</p>\n</blockquote>\n<p>FWIW I am also thinking about having <code>parts: Vec&lt;(CompiledExpressionPart, usize)&gt;,</code> -- this will take care of bookkeeping. Though you will need to track parts last offset instead of first -- it is the same thing for this logic.</p>\n</blockquote>",
        "id": 207963563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598362742
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680032049\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>Well, I get quadratic behaviour only when assuming # jumps are proportional to the # of <code>DW_OP</code>s. Similarly, <code>old_to_new</code> is bounded by the # of jumps times two. But in principle you are right.</p>\n<p>Is it realistic that <code>DW_AT_frame_base</code> has jumps in it? Should be just bail if so?</p>\n</blockquote>",
        "id": 207963758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598362847
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680032049\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>Well, I get quadratic behaviour only when assuming # jumps are proportional to the # of <code>DW_OP</code>s. Similarly, <code>old_to_new</code> is bounded by the # of jumps times two. But in principle you are right.</p>\n<p>Is it realistic that <code>DW_AT_frame_base</code> has jumps in it? Should we just bail if so?</p>\n</blockquote>",
        "id": 207963938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598362956
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680038160\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it realistic that DW_AT_frame_base has jumps in it? Should we just bail if so?</p>\n</blockquote>\n<p>Yes, let's assume DW_AT_frame_base has no jumps, otherwise let's bail.</p>\n</blockquote>",
        "id": 207964899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598363482
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680059394\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<blockquote>\n<p>FWIW I am also thinking about having <code>parts: Vec&lt;(CompiledExpressionPart, usize)&gt;,</code> -- this will take care of bookkeeping. Though you will need to track parts last offset instead of first -- it is the same thing for this logic.</p>\n</blockquote>\n<p>I tried to go down that route, but got quickly lost in the <code>build_with_locals</code> bowels, string at <code>ranges_builder</code> and co.</p>\n</blockquote>",
        "id": 207969668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598365668
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680059394\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<blockquote>\n<p>FWIW I am also thinking about having <code>parts: Vec&lt;(CompiledExpressionPart, usize)&gt;,</code> -- this will take care of bookkeeping. Though you will need to track parts last offset instead of first -- it is the same thing for this logic.</p>\n</blockquote>\n<p>I tried to go down that route, but got quickly lost in the <code>build_with_locals</code> bowels, staring at <code>ranges_builder</code> and co.</p>\n</blockquote>",
        "id": 207969695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598365679
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680296641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I feel a little bit intimidated by the <code>old_to_new</code> logic here. I hope there is a chance you can adapt my proposal at <a href=\"https://github.com/yurydelendik/wasmtime/tree/ggreif/main\">https://github.com/yurydelendik/wasmtime/tree/ggreif/main</a> with this PR. (If not I will still try my best but it is too hard)</p>\n</blockquote>",
        "id": 208031192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598393765
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680328767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I am happy to look into your proposal (tomorrow, it is really late here)! Meanwhile the keys of <code>old_to_new</code> are the byte offsets for the <code>DW_OP</code>s before translation and the values in the map are the corresponding jump sources and targets of the in terms of the expanded location expression offsets. For every <code>Code</code> block preceded by a <code>LandingPad</code> I also add a few key-&gt;value mappings corresponding to the potential internal operation offsets. After the key-&gt;value map is fully built, I visit each <code>jump_arc</code> and look it up to obtain the translated jump arc. Since the source of the translated jump arc is directly behind the 3 byte <code>DW_OP_bra/skip</code>, we know how to backpatch the jump displacement.</p>\n</blockquote>",
        "id": 208039668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598400419
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680328767\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I am happy to look into your proposal (tomorrow, it is really late here)! Meanwhile the keys of <code>old_to_new</code> are the byte offsets for the <code>DW_OP</code>s before translation and the values in the map are the corresponding jump sources and targets of the in terms of the expanded location expression offsets. For every <code>Code</code> block preceded by a <code>LandingPad</code> I also add a few key-&gt;value mappings corresponding to the potential internal operation offsets. After the key-&gt;value map is fully built, I visit each <code>jump_arc</code> and look it up to obtain the translated jump arc. Since the source of the translated jump arc is directly behind the 3 byte <code>DW_OP_bra/skip</code>, I know how to find the jump operation and then backpatch the jump displacement.</p>\n</blockquote>",
        "id": 208039880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598400635
    },
    {
        "content": "<p>ggreif <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680789145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I looked into your branch. You draw global ids from a static supply, which eliminates a bunch of offset complexity, and adds machinery in different other places. I still don't see where the pre-translation ids meet the post-translation ones. I'll look harder.</p>\n</blockquote>",
        "id": 208073268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598436642
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680789145\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I looked into your branch. You draw global ids from a static supply, which eliminates a bunch of offset complexity, and adds machinery in different other places. I still don't see where the pre-translation ids meet the post-translation ones. I'll look harder.</p>\n<p>I think I understand now. Feel free to file a PR against this branch.</p>\n</blockquote>",
        "id": 208074107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598437245
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680789145\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I looked into your branch. You draw global ids from a static supply, which eliminates a bunch of offset complexity, and adds machinery in different other places. I still don't see where the pre-translation ids meet the post-translation ones. I'll look harder.</p>\n<p>I think I understand now. You run a pre-pass on the original expression to fish for potential landing sites.</p>\n<p>Feel free to file a PR against this branch.</p>\n</blockquote>",
        "id": 208074252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598437347
    },
    {
        "content": "<p>ggreif edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-680789145\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>I looked into your branch. You draw global ids from a static supply, which eliminates a bunch of offset complexity, and adds machinery in different other places. I still don't see where the pre-translation ids meet the post-translation ones. I'll look harder.</p>\n<p>I think I understand now. You run a pre-pass on the original expression to fish for potential landing sites.</p>\n<p><del>Feel free to file a PR against this branch.</del> Done: <a href=\"https://github.com/ggreif/wasmtime/pull/1\">https://github.com/ggreif/wasmtime/pull/1</a>, ping me when you think I can merge.</p>\n</blockquote>",
        "id": 208074731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598437665
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143#issuecomment-681153167\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2143\">Issue #2143</a>:</p>\n<blockquote>\n<p>Thank you for the patch</p>\n</blockquote>",
        "id": 208156308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598480360
    }
]