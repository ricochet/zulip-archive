[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I had this thought overnight and I'm not sure if there are any hidden downsides.</p>\n<p>Both <code>cranelift-icache</code> and <code>clif-util bugpoint</code> change the input functions. <code>cranelift-icache</code> is a bit more random in its approach and <code>bugpoint</code> has some constraints to preserve. However <code>bugpoint</code> is quite developed and can mutate functions in a bunch of ways that <code>icache</code> can't, we could try to use those mutators in <code>icache</code> and check if it breaks the cache or not.</p>\n<p>cc: @bjorn3 @bnjbvr @jameysharp </p>\n</blockquote>",
        "id": 295562505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661589328
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799#issuecomment-1229154597\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p>Bugpoint's mutations are much less flexible as they replace for example int returning imstructions with iconst 0. Or they remove things. They never change or add things. In addition they don't affect function declarations at all if I recall correctly, despite this being one of the main things where icache can break. You can always try bugpoint's mutations, but it probably won't be all that useful and in any case will need a large corpus of existing functions to work on.</p>\n</blockquote>",
        "id": 295565430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661590830
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799#issuecomment-1229174977\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<blockquote>\n<p>Bugpoint's mutations are much less flexible as they replace for example int returning imstructions with iconst 0. Or they remove things. They never change or add things.</p>\n</blockquote>\n<p>Sure, I wasn't proposing replacing all of <code>icache</code>'s mutations, we still need those two sets of random replacing and randomly adding stuff. But we should have the removes somewhat covered without much effort.</p>\n<blockquote>\n<p>In addition they don't affect function declarations at all if I recall correctly, despite this being one of the main things where icache can break. </p>\n</blockquote>\n<p>I had a look at the <code>icache</code> source and it looks like we don't do those transforms either, so that would probably be a good addition.</p>\n<p>And it would also be nice to have that on bugpoint, but only the remove half, and not the add random args part. Although I think we can share some code there.</p>\n<blockquote>\n<p>You can always try bugpoint's mutations, but it probably won't be all that useful and in any case will need a large corpus of existing functions to work on.</p>\n</blockquote>\n<p>The fuzzer specializes in generating huge amounts of random functions, so we should be covered there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 295582522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661599678
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799#issuecomment-1229174977\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<blockquote>\n<p>Bugpoint's mutations are much less flexible as they replace for example int returning imstructions with iconst 0. Or they remove things. They never change or add things.</p>\n</blockquote>\n<p>Sure, I wasn't proposing replacing all of <code>icache</code>'s mutations, we still need those two sets of random replacing and randomly adding stuff. But we should have the removes somewhat covered without much effort.</p>\n<blockquote>\n<p>In addition they don't affect function declarations at all if I recall correctly, despite this being one of the main things where icache can break. </p>\n</blockquote>\n<p>I had a look at the <code>icache</code> source and it looks like we don't do those transforms either, so that would probably be a good addition.</p>\n<p>And it would also be nice to have that on bugpoint, but only the remove half, and not the add random args part. I think we can share some code there.</p>\n<blockquote>\n<p>You can always try bugpoint's mutations, but it probably won't be all that useful and in any case will need a large corpus of existing functions to work on.</p>\n</blockquote>\n<p>The fuzzer specializes in generating huge amounts of random functions, so we should be covered there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 295582991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661599883
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799#issuecomment-1229940228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p>Yes, that would make sense to try to reuse internals of bugpoint in the <code>icache</code> target indeed. Right now, only two \"random\" mutations are done in the <code>icache</code> target:</p>\n<ul>\n<li>either change an actual function target, and make sure it causes a cache hit when using the incremental cache.</li>\n<li>or change one thing in the IR, and cause a cache miss. This is done in a very adhoc way by looking for an instruction with one i32/i64 result, and change it to a constant value (and if it was a constant, just tweak it so it's the same +/- 1).</li>\n</ul>\n<p>The second part could benefit from using <code>bugpoint</code>, in my opinion, by triggering more general changes. Ideally, the _change_ itself would be generated from libfuzz's binary input, instead of having our fuzz target generate this code for us: this would require generating both the <code>Function</code> as well as a valid location + instruction to replace one instruction in the IR.</p>\n</blockquote>",
        "id": 295800581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661761285
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799#issuecomment-1230949858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p>I like this idea!</p>\n<blockquote>\n<blockquote>\n<p>Bugpoint's mutations are much less flexible as they replace for example int returning imstructions with iconst 0. Or they remove things. They never change or add things.</p>\n</blockquote>\n<p>Sure, I wasn't proposing replacing all of <code>icache</code>'s mutations, we still need those two sets of random replacing and randomly adding stuff. But we should have the removes somewhat covered without much effort.</p>\n</blockquote>\n<p>Do mutators which add things test anything different than those that remove things? If you add something to fn1 to produce fn2, how is that different from removing something from fn2 to produce fn1?</p>\n<p>If order does matter, you could consume a boolean from the fuzz input to decide whether to swap the two functions. But I'd hope order doesn't matter: my impression of the incremental cache is that there shouldn't be anything stateful at this level.</p>\n<p>Similarly, I would think that replacing more complex instructions with less complex ones (e.g. <code>iconst 0</code>) tests the same things as the other way around. But that might not be general enough because maybe you want to go from one non-zero constant to another non-zero constant, or replace one binary operator with another, or one operand with another of the same type.</p>\n<p>In any case I'm assuming that the underlying <code>cranelift-fuzzgen</code> function generator can produce the more complex function to begin with. But I like the idea of putting all the \"add complicated stuff\" effort into the function generator, and all the \"remove stuff\" effort in bugpoint.</p>\n</blockquote>",
        "id": 296012002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661813444
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I had this thought overnight and I'm not sure if there are any hidden downsides.</p>\n<p>Both <code>cranelift-icache</code> and <code>clif-util bugpoint</code> change the input functions. <code>cranelift-icache</code> is a bit more random in its approach and <code>bugpoint</code> has some constraints to preserve. However <code>bugpoint</code> is quite developed and can mutate functions in a bunch of ways that <code>icache</code> can't, we could try to use those mutators in <code>icache</code> and check if it breaks the cache or not.</p>\n<p>cc: @bjorn3 @bnjbvr @jameysharp </p>\n</blockquote>",
        "id": 296847240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133716
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4799\">issue #4799</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I had this thought overnight and I'm not sure if there are any hidden downsides.</p>\n<p>Both <code>cranelift-icache</code> and <code>clif-util bugpoint</code> change the input functions. <code>cranelift-icache</code> is a bit more random in its approach and <code>bugpoint</code> has some constraints to preserve. However <code>bugpoint</code> is quite developed and can mutate functions in a bunch of ways that <code>icache</code> can't, we could try to use those mutators in <code>icache</code> and check if it breaks the cache or not.</p>\n<p>cc: @bjorn3 @bnjbvr @jameysharp </p>\n</blockquote>",
        "id": 296847243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662133716
    }
]