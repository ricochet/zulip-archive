[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a> from <code>trevor/cmpps-produces-const</code> to <code>main</code>:</p>\n<blockquote>\n<p>On <code>main</code>, the <code>cmpps</code> and <code>cmppd</code> instructions will be treated as producing<br>\nconstants if their arguments are the same and their immediate operand is <code>0</code>,<br>\nwhich corresponds to ordered equality. The runtime behavior of this instruction<br>\nis not constant however, as it will output a lane of <code>0</code>s if the corresponding<br>\ncomponent is a <code>NaN</code>.</p>\n<p>This PR removes the special handling of <code>cmpps</code> and <code>cmppd</code> from<br>\n<code>produces_const</code>, as it's not correctly identifying constants. An alternative<br>\napproach here would be to say that unordered equality will produce constants,<br>\nlooking instead for the immediate value <code>8</code>. We don't currently have any way of<br>\nemitting unordered equality for this instruction, so that would be an<br>\noptimization that would be worth making if we add that capability in the future.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 293621766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660597977
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a> as ready for review.</p>",
        "id": 293622497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660598342
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a> from <code>trevor/cmpps-produces-const</code> to <code>main</code>:</p>\n<blockquote>\n<p>On <code>main</code>, the <code>cmpps</code> and <code>cmppd</code> instructions will be treated as producing constants if their arguments are the same and their immediate operand is <code>0</code>, which corresponds to ordered equality. The runtime behavior of this instruction is not constant however, as it will output a lane of <code>0</code>s if either of the corresponding components are <code>NaN</code>.</p>\n<p>This PR removes the special handling of <code>cmpps</code> and <code>cmppd</code> from <code>produces_const</code>, as it's not correctly identifying constants. An alternative approach here would be to say that unordered equality will produce constants, looking instead for the immediate value <code>8</code>. We don't currently have any way of emitting unordered equality for this instruction, so that would be an optimization that would be worth making if we add that capability in the future.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 293622689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660598434
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a> from <code>trevor/cmpps-produces-const</code> to <code>main</code>:</p>\n<blockquote>\n<p>On <code>main</code>, the <code>cmpps</code> and <code>cmppd</code> instructions will be treated as producing constants if their arguments are the same and their immediate operand is <code>0</code>, which corresponds to ordered equality. The runtime behavior of this instruction is not constant however, as it will output a lane of <code>0</code>s if either of the corresponding components are <code>NaN</code>.</p>\n<p>This PR removes the special handling of <code>cmpps</code> and <code>cmppd</code> from <code>produces_const</code>, as it's not correctly identifying constants. An alternative approach here would be to say that unordered equality will produce constants, looking instead for the immediate value <code>8</code>. We don't currently have any way of emitting unordered equality tests, so that would be an optimization that would be worth making if we add that capability in the future.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 293627352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660600709
    },
    {
        "content": "<p>elliottt has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a>.</p>",
        "id": 293631794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660603406
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a>.</p>",
        "id": 293631800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660603415
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714#pullrequestreview-1073315727\">PR review</a>.</p>",
        "id": 293632256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660603681
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4714\">PR #4714</a>.</p>",
        "id": 293632279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660603683
    }
]