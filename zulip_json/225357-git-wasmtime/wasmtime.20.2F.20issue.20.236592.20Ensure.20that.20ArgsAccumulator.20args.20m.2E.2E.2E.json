[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592\">issue #6592</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new method to the <code>ArgsAccumulator</code> struct that's specifically for pushing arguments that don't match the formal parameters/return values. Add a flag to <code>ArgsAccumulator</code> that records that if function has been called, and add a debug assertion in <code>ArgsAccumulator::push</code> that the flag is <code>false</code>.</p>\n<h4>Benefit</h4>\n<p>This would prevent special args/return values collected during <code>compute_arg_locs</code> from introducing off-by-one errors when generating the args/rets pseudo instructions.</p>\n<h4>Implementation</h4>\n<p>The implementation would involve adding the functions and assertions mentioned above, and refactoring the implementations of <code>compute_arg_locs</code> in each backend.</p>\n<h4>Alternatives</h4>\n<p>We can continue with things the way they are. This code doesn't change very frequently, so the cost for debugging a problem here is not huge.<br>\n</p>\n</blockquote>",
        "id": 366921687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686941438
    },
    {
        "content": "<p>elliottt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592\">issue #6592</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new method to the <code>ArgsAccumulator</code> struct that's specifically for pushing arguments that don't match the formal parameters/return values. Add a flag to <code>ArgsAccumulator</code> that records that if function has been called, and add a debug assertion in <code>ArgsAccumulator::push</code> that the flag is <code>false</code>.</p>\n<h4>Benefit</h4>\n<p>This would prevent special args/return values collected during <code>compute_arg_locs</code> from introducing off-by-one errors when generating the args/rets pseudo instructions.</p>\n<h4>Implementation</h4>\n<p>The implementation would involve adding the functions and assertions mentioned above, and refactoring the implementations of <code>compute_arg_locs</code> in each backend.</p>\n<h4>Alternatives</h4>\n<p>We can continue with things the way they are. This code doesn't change very frequently, so the cost for debugging a problem here is not huge.<br>\n</p>\n</blockquote>",
        "id": 366921688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686941438
    },
    {
        "content": "<p>elliottt labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592\">issue #6592</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new method to the <code>ArgsAccumulator</code> struct that's specifically for pushing arguments that don't match the formal parameters/return values. Add a flag to <code>ArgsAccumulator</code> that records that if function has been called, and add a debug assertion in <code>ArgsAccumulator::push</code> that the flag is <code>false</code>.</p>\n<h4>Benefit</h4>\n<p>This would prevent special args/return values collected during <code>compute_arg_locs</code> from introducing off-by-one errors when generating the args/rets pseudo instructions.</p>\n<h4>Implementation</h4>\n<p>The implementation would involve adding the functions and assertions mentioned above, and refactoring the implementations of <code>compute_arg_locs</code> in each backend.</p>\n<h4>Alternatives</h4>\n<p>We can continue with things the way they are. This code doesn't change very frequently, so the cost for debugging a problem here is not huge.<br>\n</p>\n</blockquote>",
        "id": 366921689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686941438
    },
    {
        "content": "<p>ilikepi63 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592#issuecomment-1600086670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592\">issue #6592</a>:</p>\n<blockquote>\n<p>Hey, I created this PR with regards to the above issue: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6613\">https://github.com/bytecodealliance/wasmtime/pull/6613</a></p>\n</blockquote>",
        "id": 368112348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687324652
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6592\">issue #6592</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new method to the <code>ArgsAccumulator</code> struct that's specifically for pushing arguments that don't match the formal parameters/return values. Add a flag to <code>ArgsAccumulator</code> that records that if function has been called, and add a debug assertion in <code>ArgsAccumulator::push</code> that the flag is <code>false</code>.</p>\n<h4>Benefit</h4>\n<p>This would prevent special args/return values collected during <code>compute_arg_locs</code> from introducing off-by-one errors when generating the args/rets pseudo instructions.</p>\n<h4>Implementation</h4>\n<p>The implementation would involve adding the functions and assertions mentioned above, and refactoring the implementations of <code>compute_arg_locs</code> in each backend.</p>\n<h4>Alternatives</h4>\n<p>We can continue with things the way they are. This code doesn't change very frequently, so the cost for debugging a problem here is not huge.<br>\n</p>\n</blockquote>",
        "id": 368667793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687460635
    }
]