[
    {
        "content": "<p>andrewmd5 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Thanks for filing a feature request! Please fill out the TODOs below.</p>\n<h4>Feature</h4>\n<p>Compile the C API and produce ARM64 builds for Windows</p>\n<h4>Benefit</h4>\n<p>Will unblock <a href=\"http://this%20issue\">https://github.com/bytecodealliance/wasmtime-dotnet/issues/298</a> in the wasmtime-dotnet package</p>\n<p>Not sure if the wheel exist for this yet; in terms of infrastructure cross compilation on Github Actions should be possible, but if necessary I’m happy to deploy some new self-hosted runners to power this feature.</p>\n</blockquote>",
        "id": 429794424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711522096
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2022076515\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>This depends on #4992 -- a little bit of core runtime functionality (trap handling, unwind info generation) necessary for this OS/architecture pair. If you're willing to work on this, we'd be happy to review a PR!</p>\n</blockquote>",
        "id": 429794737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711522318
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Compile the C API and produce ARM64 builds for Windows</p>\n<h4>Benefit</h4>\n<p>Will unblock <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/298\">this issue</a> in the wasmtime-dotnet package</p>\n<p>Not sure if the wheel exist for this yet; in terms of infrastructure cross compilation on Github Actions should be possible, but if necessary I’m happy to deploy some new self-hosted runners to power this feature.</p>\n</blockquote>",
        "id": 429800162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711525277
    },
    {
        "content": "<p>andrewmd5 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2022143782\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<blockquote>\n<p>This depends on #4992 -- a little bit of core runtime functionality (trap handling, unwind info generation) necessary for this OS/architecture pair. If you're willing to work on this, we'd be happy to review a PR!</p>\n</blockquote>\n<p>Thank you for linking the relevant issue; I’ll take a look and see about submitting a PR.</p>\n</blockquote>",
        "id": 429801098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711525756
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton\">alexcrichton</a> added the wasmtime:platform-support label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">Issue #8247</a>.</p>",
        "id": 429871404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711549516
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2384213910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>I've been trying to get <code>rustc_codegen_cranelift</code> working with Windows ARM64, but I've run into an issue with alignment.</p>\n<p>My work-in-progress branch is available at &lt;<a href=\"https://github.com/dpaoliello/wasmtime/tree/arm64wip\">https://github.com/dpaoliello/wasmtime/tree/arm64wip</a>&gt;</p>\n<p>Current, when I run <code>y build</code>, a bunch of linker errors from link.exe complaining about the alignment of symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"mi\">0891</span><span class=\"n\">cada1b439ffb</span><span class=\"p\">.</span><span class=\"n\">dq2m4pkr5rfjx0xrog6ne1sfh</span><span class=\"p\">.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"n\">LNK2048</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">relocation</span><span class=\"w\"> </span><span class=\"n\">PAGEOFFSET_12L</span><span class=\"w\"> </span><span class=\"n\">targeting</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">memcpy</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0019</span><span class=\"n\">EE84</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">F9400084</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">RVA</span><span class=\"w\"> </span><span class=\"mi\">000</span><span class=\"n\">D6C84</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x137C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">E84</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">aligned</span>\n</code></pre></div>\n<p>Import thing from that output is that <code>memcpy</code> is being located at <code>0019EE84</code>, which is not 8 byte aligned.</p>\n<p>I've tried setting the function alignment to 8: &lt;<a href=\"https://github.com/dpaoliello/wasmtime/blob/e7184160fe909864c767177de17729f876c0da60/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L1184\">https://github.com/dpaoliello/wasmtime/blob/e7184160fe909864c767177de17729f876c0da60/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L1184</a>&gt;</p>\n<p>And the symbol alignment to 8:<br>\n&lt;<a href=\"https://github.com/dpaoliello/wasmtime/blob/e7184160fe909864c767177de17729f876c0da60/cranelift/codegen/src/isa/mod.rs#L430\">https://github.com/dpaoliello/wasmtime/blob/e7184160fe909864c767177de17729f876c0da60/cranelift/codegen/src/isa/mod.rs#L430</a>&gt;</p>\n<p>But neither seems to have fixed this - any idea what I'm doing wrong?</p>\n</blockquote>",
        "id": 473866281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727732914
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2384316525\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>I think <code>memcpy</code> would be defined in the libc-equivalent-windows-has, which might be why changing Cranelift's function/symbol alignment didn't work? How sure are you the <code>memcpy</code> function itself is created by Cranelift?</p>\n<p>If it's not created by Cranelift this might be something where we're generating the wrong relocation against <code>memcpy</code> perhaps? Where the one we're generating requires 8-byte alignment but we should be using something else that doesn't require 8-byte alignment?</p>\n</blockquote>",
        "id": 473879520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727736961
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2391811165\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>It's not <code>memcpy</code> specifically, I'm also seeing a bunch of Win32 function, so it's likely any external symbol that the obj is referencing. I'm not familiar with how external symbols are represented in obj files, or how cranelift places them there, so I'll have to dig into this further when I have time.</p>\n</blockquote>",
        "id": 474631202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727971982
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2481742291\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Ok, I finally understand what's happening here.</p>\n<p>When emitting a call, wasmtime emits it as <code>LoadExtName</code> then the call indirect:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/e56ffd77f1fb2240e163b7f840f8c4e728c98434/cranelift/codegen/src/isa/aarch64/abi.rs#L1041-L1045\">https://github.com/bytecodealliance/wasmtime/blob/e56ffd77f1fb2240e163b7f840f8c4e728c98434/cranelift/codegen/src/isa/aarch64/abi.rs#L1041-L1045</a></p>\n<p><code>LoadExtName</code> always get lowered and the page base + page offset reloc:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/e56ffd77f1fb2240e163b7f840f8c4e728c98434/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L3165-L3185\">https://github.com/bytecodealliance/wasmtime/blob/e56ffd77f1fb2240e163b7f840f8c4e728c98434/cranelift/codegen/src/isa/aarch64/inst/emit.rs#L3165-L3185</a></p>\n<p>That type of reloc needs to be 8 byte aligned, however functions (at least on Windows, not sure about other platforms) aren't guaranteed to be 8 byte aligned, thus the linker complains.</p>\n<p>When I look at code generated by LLVM, I see branch26 relocs being emitted for called functions, which seems to be generated by this:<br>\n<a href=\"https://github.com/llvm/llvm-project/blob/18ee00323f5fc22d32a74b636fcac84e697241f3/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp#L459-L478\">https://github.com/llvm/llvm-project/blob/18ee00323f5fc22d32a74b636fcac84e697241f3/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp#L459-L478</a></p>\n<p>I'm not entirely sure how to handle implementing this in wasmtime with the abstraction between <a href=\"http://abi.rs\">abi.rs</a> and <a href=\"http://emit.rs\">emit.rs</a>.</p>\n</blockquote>",
        "id": 482912784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731892900
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2481746556\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>And, just to confound things, sometimes LLVM will generate a page base + page offset for a call: &lt;<a href=\"https://godbolt.org/z/3c7ce1vP4\">https://godbolt.org/z/3c7ce1vP4</a>&gt;</p>\n</blockquote>",
        "id": 482913262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731893248
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2483574196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Is there a relocation that doesn't need to be 8-byte aligned we could use? I'm a bit surprised by that godbolt link because</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">example</span><span class=\"p\">::</span><span class=\"n\">call_yep</span><span class=\"p\">::</span><span class=\"n\">h3f70d43527bee11a</span><span class=\"p\">:</span>\n<span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"kt\">str</span><span class=\"w\">     </span><span class=\"nc\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">!</span>\n<span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">adrp</span><span class=\"w\">    </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__imp_yep</span>\n<span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">ldr</span><span class=\"w\">     </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"nc\">lo12</span><span class=\"p\">:</span><span class=\"nc\">__imp_yep</span><span class=\"p\">]</span>\n<span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">blr</span><span class=\"w\">     </span><span class=\"n\">x8</span>\n<span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">adrp</span><span class=\"w\">    </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__imp_X</span>\n<span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">ldr</span><span class=\"w\">     </span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"nc\">lo12</span><span class=\"p\">:</span><span class=\"nc\">__imp_X</span><span class=\"p\">]</span>\n<span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">ldr</span><span class=\"w\">     </span><span class=\"n\">w8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x8</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">madd</span><span class=\"w\">    </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span>\n<span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">ldr</span><span class=\"w\">     </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">#</span><span class=\"mi\">16</span>\n<span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"w\">     </span><span class=\"nc\">ret</span>\n</code></pre></div>\n<p>Here <code>adrp</code> falls on both an 8-byte and non-8-byte aligned boundary (0x4/0x10). How does that work if it's required to be 8-byte aligned? Or is the assembler hiding a <code>nop</code> instruction or something like that? </p>\n<p>If we need these relocations to be 8-byte aligned in Cranelift it would probably look like:</p>\n<ul>\n<li>Guarantee all functions are 8-byte-aligned (I think some are 4-byte-aligned right now)</li>\n<li>When emitting this relocation if the current offset is 4-byte aligned then emit a nop to make it 8-byte aligned.</li>\n</ul>\n<p>I'm mostly surprised that LLVM doesn't seem to be doing anything with nops but from what you're saying it should work?</p>\n</blockquote>",
        "id": 483071518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731948401
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2483715772\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Sorry, bit of confusion, the <em>target</em> of the reloc needs to be 8 byte aligned, not the reloc or consuming instruction.</p>\n</blockquote>",
        "id": 483083720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731951852
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2483731088\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Aha that makes more sense! (I should also read more carefully...)</p>\n<p>This might be as simple as <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d79555add5b0d457362af46538af6209c1e057d7/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L1173\">updating this value</a>? That could perhaps have a comment for now saying only Windows so far requires 8-byte alignment but it's easier to bump all platforms to 8-byte so that's why it's unconditionally a minimum of 8 for now.</p>\n</blockquote>",
        "id": 483085336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731952298
    },
    {
        "content": "<p>dpaoliello <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2483741172\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>That helps: it at least means that any function in the current compilation can be the target of a reloc.<br>\nBut I'm also seeing the linker complain about Win32 functions and parts of the CRT.</p>\n</blockquote>",
        "id": 483086349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731952606
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247#issuecomment-2483775461\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8247\">issue #8247</a>:</p>\n<blockquote>\n<p>Oh dear sorry I'm being particularly slow at understanding this, you've already told me that historically as well...</p>\n<p>Is this perhaps something related to dllimport or something like that? Where memcpy should be imported via dllimport and some slightly different form of relocation is something the linker handles when fixing it up? Otherwise I'll probably step aside as I'm probably out of my depth here...</p>\n</blockquote>",
        "id": 483088966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731953355
    }
]