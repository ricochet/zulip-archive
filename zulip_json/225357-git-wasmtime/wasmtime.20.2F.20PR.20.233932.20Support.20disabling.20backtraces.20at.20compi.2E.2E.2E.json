[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3932\">PR #3932</a> from <code>no-backtraces</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit adds support to Wasmtime to disable, at compile time, the<br>\ngathering of backtraces on traps. The <code>wasmtime</code> crate now sports a<br>\n<code>wasm-backtrace</code> feature which, when disabled, will mean that backtraces<br>\nare never collected at compile time nor are unwinding tables inserted<br>\ninto compiled objects.</p>\n<p>The motivation for this commit stems from the fact that generating a<br>\nbacktrace is quite a slow operation. Currently backtrace generation is<br>\ndone with libunwind and <code>_Unwind_Backtrace</code> typically found in glibc or<br>\nother system libraries. When thousands of modules are loaded into the<br>\nsame process though this means that the initial backtrace can take<br>\nnearly half a second and all subsequent backtraces can take upwards of<br>\nhundreds of milliseconds. Relative to all other operations in Wasmtime<br>\nthis is extremely expensive at this time. In the future we'd like to<br>\nimplement a more performant backtrace scheme but such an implementation<br>\nwould require coordination with Cranelift and is a big chunk of work<br>\nthat may take some time, so in the meantime if embedders don't need a<br>\nbacktrace they can still use this option to disable backtraces at<br>\ncompile time and avoid the performance pitfalls of collecting<br>\nbacktraces.</p>\n<p>In general I tried to originally make this a runtime configuration<br>\noption but ended up opting for a compile-time option because <code>Trap::new</code><br>\notherwise has no arguments and always captures a backtrace. By making<br>\nthis a compile-time option it was possible to configure, statically, the<br>\nbehavior of <code>Trap::new</code>. Additionally I also tried to minimize the<br>\namount of <code>#[cfg]</code> necessary by largely only having it at the producer<br>\nand consumer sites.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 275441309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647381411
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3932\">PR #3932</a> from <code>no-backtraces</code> to <code>main</code>.</p>",
        "id": 275441797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647381642
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3932#pullrequestreview-911048056\">PR review</a>.</p>",
        "id": 275462653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647400133
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3932\">PR #3932</a>.</p>",
        "id": 275517488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647440692
    }
]