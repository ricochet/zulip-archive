[
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1891\">issue #1891</a>:</p>\n<blockquote>\n<p>In #1880 @bnjbvr brought up an issue with how Cranelift's filetests use (or don't use) ISA-specific flags. He was trying to use <code>target x86_64 use_new_backend</code> in a <code>test run</code> filetest but the <code>SingleFunctionCompiler</code> doesn't know anything about ISA-specific <code>Flags</code>, only shared <code>Flags</code>. (Perhaps these two sets of flags should be merged in some way, but what I will propose next doesn't require that).</p>\n<p>The current behavior is:</p>\n<ul>\n<li>check if the default host architecture (used by <code>SingleFunctionCompiler</code>) is the same as the one specified by the <code>target</code> directive; if not, skip the test (though in the future this should print some sort of <code>IGNORED [filename]</code> so the user knows what happened, see #1558)</li>\n<li>compile and run the test using the default host <code>TargetIsa</code></li>\n</ul>\n<p>I propose we change the behavior to:</p>\n<ul>\n<li>check if the default host <code>TargetIsa</code> _is compatible with_ the one specified by the <code>target</code> directive; if not, skip the test, etc.</li>\n<li>compile and run the test using the <code>target</code> directive's <code>TargetIsa</code>--this will use any special flags assigned by the user, e.g. <code>use_new_backend</code></li>\n</ul>\n<p>To get this \"_is compatible with_\" behavior, I propose we add a new <code>Flags::matches</code> function to the shared <code>Flags</code> and to each ISA-specific <code>Flags</code> (this likely has to be done as generated code in <code>gen_settings.rs</code> so it only needs to be done once). Then, we expose this function as <code>TargetIsa::matches</code> and implement it in each ISA as <code>self.flags.matches(&amp;other.flags) &amp;&amp; self.isa_flags.matches(&amp;other.isa_flags)</code>. This way we can compare TargetIsa's for compatibility.</p>\n<p>How does <code>Flags::matches</code> work? I think it needs to iterate over the field descriptors and compare them both to the default value and to the other value. Remember that <code>matches</code> only goes one way: if <code>a</code> matches <code>b</code> it does not necessarily mean that <code>b</code> matches <code>a</code>. Though it passes some simple tests, I'm not 100% confident that the following is correct so I would appreciate feedback:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">get_bit</span><span class=\"p\">(</span><span class=\"n\">byte</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bit</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Flags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shared_default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">shared_default</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Check each detail until we see presets.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">byte_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">DESCRIPTORS</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">byte_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">detail</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">detail</span>::<span class=\"n\">Detail</span>::<span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">other_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">default_bit</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">other_bit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">detail</span>::<span class=\"n\">Detail</span>::<span class=\"n\">Num</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">detail</span>::<span class=\"n\">Detail</span>::<span class=\"n\">Enum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">self_byte</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default_byte</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">other_byte</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">self_byte</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">default_byte</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">self_byte</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">other_byte</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">detail</span>::<span class=\"n\">Detail</span>::<span class=\"n\">Preset</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Then check each preset bit.</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">byte_offset</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">byte_offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">other_bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_bit</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">byte_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">default_bit</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">self_bit</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">other_bit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 289770092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657912149
    }
]