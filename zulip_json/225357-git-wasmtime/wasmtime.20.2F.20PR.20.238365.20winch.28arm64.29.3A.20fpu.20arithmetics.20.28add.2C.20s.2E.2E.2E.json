[
    {
        "content": "<p>evacchi opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a> from <code>evacchi:winch-fpu</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<ul>\n<li>Add some of the instructions in #8321</li>\n<li>Introduces preliminary support to FPU registers to regalloc</li>\n<li>Introduces tests for the instructions above (ported over from x64)</li>\n<li>Fixes a few typos.</li>\n</ul>\n<p>This is a draft with a handful of tests for <code>float_add{32,64}</code> (LGTM but another pair of eyes would help), I will add the remaining later. </p>\n</blockquote>",
        "id": 433140872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713106913
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#issuecomment-2054091833\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 433141247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713107242
    },
    {
        "content": "<p>evacchi updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433222068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713166825
    },
    {
        "content": "<p>evacchi edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>:</p>\n<blockquote>\n<ul>\n<li>Add some of the instructions in #8321</li>\n<li>Introduces preliminary support to FPU registers to regalloc</li>\n<li>Introduces tests for the instructions above (ported over from x64)</li>\n<li>Fixes a few typos.</li>\n</ul>\n<p>This is a draft ~with a handful of tests for <code>float_add{32,64}</code> (LGTM but another pair of eyes would help), I will add the remaining later~. Added the remaining tests.</p>\n</blockquote>",
        "id": 433222634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713167019
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2001089561\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the PR; the general direction looks good to me. I left a couple of comments that I think need to be resolved before landing this work.</p>\n</blockquote>",
        "id": 433318234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194126
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2001089561\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the PR; the general direction looks good to me. I left a couple of comments that I think need to be resolved before landing this work.</p>\n</blockquote>",
        "id": 433318235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194127
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1565782825\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe here we need to properly exclude the designated float scratch register?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>pub(crate) const NON_ALLOCATABLE_FPR: u32 = 1 &lt;&lt; float_scratch().hw_enc();\n\n/// Bitmask to represent the available general purpose registers\npub(crate) const ALL_FPR: u32 = u32::MAX &amp; !NON_ALLOCATABLE_FPR;\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433318237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194127
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1565962730\">PR review comment</a>:</p>\n<blockquote>\n<p>I was under the impression that we could emit <code>fmov sd, sn</code> (the non-64-bit case) according to <a href=\"https://developer.arm.com/documentation/ddi0602/2024-03/SIMD-FP-Instructions/FMOV--register---Floating-point-Move-register-without-conversion-?lang=en\">https://developer.arm.com/documentation/ddi0602/2024-03/SIMD-FP-Instructions/FMOV--register---Floating-point-Move-register-without-conversion-?lang=en</a>, but maybe we'd need to implement this in Cranelift to make it possible. Could you a TODO comment here? I'll follow-up on this one. </p>\n</blockquote>",
        "id": 433318239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194127
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1565783797\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// Bitmask to represent the available floating point registers.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433318240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713194127
    },
    {
        "content": "<p>evacchi submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2001546120\">PR review</a>.</p>",
        "id": 433333181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713197866
    },
    {
        "content": "<p>evacchi created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1566053305\">PR review comment</a>:</p>\n<blockquote>\n<p>whoops!</p>\n</blockquote>",
        "id": 433333183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713197866
    },
    {
        "content": "<p>evacchi submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2001549972\">PR review</a>.</p>",
        "id": 433333392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713197916
    },
    {
        "content": "<p>evacchi created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1566056505\">PR review comment</a>:</p>\n<blockquote>\n<p>oh good point!</p>\n</blockquote>",
        "id": 433333393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713197917
    },
    {
        "content": "<p>evacchi submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2001589219\">PR review</a>.</p>",
        "id": 433335435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198473
    },
    {
        "content": "<p>evacchi created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#discussion_r1566085988\">PR review comment</a>:</p>\n<blockquote>\n<p>sure I'll add a TODO! </p>\n<p>If I understand correctly, the optimizing backend always uses F64 unless it needs V128:</p>\n<p>ISLE:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">fpu_move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fpu_move</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"cp\">$I8X16</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">FpuMove128</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">))))</span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fpu_move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"cp\">$F64</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">FpuMove64</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">))))</span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>generated code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Generated as internal constructor for term fpu_move.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">constructor_fpu_move</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span>: <span class=\"nc\">Type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg1</span>: <span class=\"nc\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Reg</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">fits_in_64</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">temp_writable_reg</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F64</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MInst</span>::<span class=\"n\">FpuMove64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rd</span>: <span class=\"nc\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rn</span>: <span class=\"nc\">arg1</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v11</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">writable_reg_to_reg</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// Rule at src/isa/aarch64/inst.isle line 2251.</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"c1\">// v128</span>\n</code></pre></div>\n</blockquote>",
        "id": 433335436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198473
    },
    {
        "content": "<p>evacchi updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198631
    },
    {
        "content": "<p>evacchi updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198659
    },
    {
        "content": "<p>evacchi updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198725
    },
    {
        "content": "<p><strong>evacchi</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a> as ready for review.</p>",
        "id": 433336425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198741
    },
    {
        "content": "<p><strong>evacchi</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198742
    },
    {
        "content": "<p><strong>evacchi</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198742
    },
    {
        "content": "<p><strong>evacchi</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433336432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713198742
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365#pullrequestreview-2002015413\">PR review</a>.</p>",
        "id": 433372245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713210144
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8365\">PR #8365</a>.</p>",
        "id": 433377959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713211942
    }
]