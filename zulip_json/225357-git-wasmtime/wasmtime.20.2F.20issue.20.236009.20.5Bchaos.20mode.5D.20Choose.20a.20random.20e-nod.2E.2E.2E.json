[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<p>This is what <code>wasm-mutate</code> does to generate pseudo-random semantics-preserving Wasm programs from an input Wasm module. We could also do it in our own mid end to exercise the back half of the compiler pipeline.</p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>          I was talking with @jacarte the other day as well and he had a similar idea: do the `wasm-mutate` e-graphs thing (select a random e-node from the e-class rather than the best e-node). I guess this would also fit in with the chaos mode work.\n</code></pre></div>\n\n<p>_Originally posted by @fitzgen in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5967#issuecomment-1464716718_\">https://github.com/bytecodealliance/wasmtime/issues/5967#issuecomment-1464716718_</a></p>\n</blockquote>",
        "id": 341570425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678740509
    },
    {
        "content": "<p>remlse <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009#issuecomment-1470158197\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<p>Related to #4134</p>\n</blockquote>",
        "id": 342081579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678892172
    },
    {
        "content": "<p>Jacarte <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009#issuecomment-1474066363\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<p>(Commenting here the same I wrote in the issue)</p>\n<p>The concept of \"semantically equivalent\" is actually subjective. The rewriting rule can be anything that changes the final code. In a potential real chaos mode, you can add whatever transformation rule, for example, <code>x =&gt; x + 1</code>.</p>\n</blockquote>",
        "id": 342605717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679069215
    },
    {
        "content": "<p>Jacarte edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009#issuecomment-1474066363\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<p>(Commenting here the same I wrote in the issue)</p>\n<p>The concept of \"semantically equivalent\" is actually subjective. The rewriting rule can be anything that changes the final code. In a potential real chaos mode, you can add whatever transformation rule, for example, <code>x =&gt; x + 1</code>. Applying that rule wil eventually stress the memory boundaries.</p>\n<p>Yet, all of this are assumptions :), but, we have some of these \"non-semantic\" rules in wasm-mutate, <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/458ff31e50249646eb89a23519de926be6732b65/crates/wasm-mutate/src/mutators/peephole/rules.rs#L394\">https://github.com/bytecodealliance/wasm-tools/blob/458ff31e50249646eb89a23519de926be6732b65/crates/wasm-mutate/src/mutators/peephole/rules.rs#L394</a> </p>\n</blockquote>",
        "id": 342606559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679069381
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009#issuecomment-1474128955\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<p>@Jacarte I may be missing some context here to interpret your suggestion, but in the context we are imagining in the chaos-mode test infrastructure, we <em>do</em> actually need semantics-preserving transforms only. The idea is that every compilation with arbitrary chaos-mode choices is still a valid compilation. Unless we pair e.g. <code>x -&gt; x + 1</code> with equivalent updates of uses of <code>x</code> everywhere (<code>x' - 1</code>) then we've broken the input program. Perhaps you're thinking in a purely generative context (creating new, arbitrary programs) rather than a transforming/optimizing context?</p>\n</blockquote>",
        "id": 342618224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679072207
    },
    {
        "content": "<p>Jacarte <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009#issuecomment-1474778409\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6009\">issue #6009</a>:</p>\n<blockquote>\n<blockquote>\n<p>@Jacarte I may be missing some context here to interpret your suggestion, but in the context we are imagining in the chaos-mode test infrastructure, we _do_ actually need semantics-preserving transforms only. </p>\n</blockquote>\n<p>I agree, it was just a suggestion on disabling the semantic-aware restriction <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<blockquote>\n<p>The idea is that every compilation with arbitrary chaos-mode choices is still a valid compilation. Unless we pair e.g. <code>x -&gt; x + 1</code> with equivalent updates of uses of <code>x</code> everywhere (<code>x' - 1</code>) then we've broken the input program. Perhaps you're thinking in a purely generative context (creating new, arbitrary programs) rather than a transforming/optimizing context?</p>\n</blockquote>\n<p>Yeah, that was the case, sorry for the missunderstanding.</p>\n<p>Eitherway, here you can find a small (maybe not enough) explanation on what we did <a href=\"https://www.jacarte.me/assets/pdf/wasm_mutate.pdf\">https://www.jacarte.me/assets/pdf/wasm_mutate.pdf</a> </p>\n</blockquote>",
        "id": 342734656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679129679
    }
]