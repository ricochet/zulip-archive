[
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>:</p>\n<blockquote>\n<p>Currently the worker thread managing writes to stdout will drop when the guest-side write end is dropped. We need to fix this, as it's quite common to repeatedly call <code>std::io::get_stdout()</code> and drop the result in rust.</p>\n<p>The general approach that we discussed is to have the stdout/stderr worker tasks alive for the duration of the guest, and a separate channel for reporting new write channels to those tasks. The tasks would then be responsible for selecting between the new writer channel and all the known writer channels when processing incoming jobs, removing known writers from the managed set when those ends drop instead of aborting.</p>\n</blockquote>",
        "id": 396953532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697479833
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258#issuecomment-1780151465\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>:</p>\n<blockquote>\n<p>@pchickey question for you, do you remember why we have it such that stdout/stderr perform async writes? Was that made as a specific design choice or rather \"well everything is async so may as well\"?</p>\n<p>If the latter I might actually propose solving this issue by \"just\" doing a blocking write to stdout/stderr. I feel like I'm forgetting something though because I suspect we would have tried to talk about this when figuring out flushing and such. What I'm thinking is basically the implementation of <code>LogStream</code> from @elliottt's <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7366\">current PR</a> is what we'd bake in as the default stdout/stderr (minus the addition of prefixes per request).</p>\n</blockquote>",
        "id": 398572705,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698273388
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>:</p>\n<blockquote>\n<p>Currently the worker thread managing writes to stdout will drop when the guest-side write end is dropped. We need to fix this, as it's quite common to repeatedly call <code>std::io::get_stdout()</code> and drop the result in rust.</p>\n<p>The general approach that we discussed is to have the stdout/stderr worker tasks alive for the duration of the guest, and a separate channel for reporting new write channels to those tasks. The tasks would then be responsible for selecting between the new writer channel and all the known writer channels when processing incoming jobs, removing known writers from the managed set when those ends drop instead of aborting.</p>\n</blockquote>",
        "id": 399631260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698800690
    }
]