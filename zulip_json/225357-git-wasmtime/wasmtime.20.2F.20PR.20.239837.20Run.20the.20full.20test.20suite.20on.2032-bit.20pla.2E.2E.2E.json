[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a> from <code>alexcrichton:pulley-full-test-suite</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit switches to running the full test suite in its entirety (<code>./ci/run-tests.sh</code>) on 32-bit platforms in CI in addition to 64-bit platforms. This notably adds i686 and armv7 as architectures that are tested in CI.</p>\n<p>Lots of little fixes here and there were applied to a number of tests. Many tests just don't run on 32-bit platforms or a platform without Cranelift support, and they've been annotated as such where necessary. Other tests were adjusted to run on all platforms a few minor bug fixes are here as well.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 489347056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384622
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489347061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384623
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489347063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384623
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489347064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384623
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489347065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384624
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489347066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734384624
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489354286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734387090
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489355933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734387553
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489359909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734388912
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2507499853\">PR review</a>:</p>\n<blockquote>\n<p>I'll defer to @fitzgen on the Pulley interpreter changes but a few thoughts on the conditional logic -- my main thought is that I'd prefer we didn't conflate \"32-bit host\" with \"has no backend\" and instead of a specific feature (or other method) meaning \"we have a native codegen backend for the host platform\"; seems less likely to cause unintentional issues later.</p>\n</blockquote>",
        "id": 489360614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734389187
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887671956\">PR review comment</a>:</p>\n<blockquote>\n<p>This is fairly counterintuitive -- could we take an <code>Option</code> or a custom enum here? <code>Err</code> turning into some other meaning below seems to go against what I'd expect <code>Err</code> to mean.</p>\n</blockquote>",
        "id": 489360616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734389187
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887672833\">PR review comment</a>:</p>\n<blockquote>\n<p>likewise here as above re: \"has native backend\" feature. Or alternatively, allowlist the natively supported ISAs; then at least when we add a new ISA we can grep for all the places ISAs are mentioned...</p>\n</blockquote>",
        "id": 489360617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734389187
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887671248\">PR review comment</a>:</p>\n<blockquote>\n<p>The non-support here has less to do with \"32-bit\" than \"no Cranelift backend for the host architecture\", right? I wonder if we could add some build-script logic to add a <code>cranelift-has-host-backend</code> feature and then <code>cfg</code> on that here? My concern is otherwise that a bunch of \"exclude 32-bit\" conditions scattered through tests get missed if/when we do add a native backend for say arm32 or riscv32.</p>\n</blockquote>",
        "id": 489360618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734389188
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2507523723\">PR review</a>.</p>",
        "id": 489362960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734390083
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887686536\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll try to think of something better yeah, but I also don't want to go too too overboard here because the tests handled in this PR are about 1% of our tests and are probably all largely redundant with all other tests we do from a \"run this on all platforms\" perspective. I definitely agree with what you're thinking though, I'm also not a fan of writing these #[cfg] and I like the idea of a <code>build.rs</code>-based thing (although it may be difficult to propagate that out beyond cranelift-codegen...)</p>\n</blockquote>",
        "id": 489362963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734390084
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2507545187\">PR review</a>.</p>",
        "id": 489365715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734391149
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887698561\">PR review comment</a>:</p>\n<blockquote>\n<p>Alternate idea: could we add a method to <code>Engine</code> (or <code>Config</code> or ...) that lets the user query whether Wasmtime has a native compilation backend? Then the affected tests could early-out succeed. Such a query is probably useful for other cases too...</p>\n</blockquote>",
        "id": 489365716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734391149
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2507546673\">PR review</a>.</p>",
        "id": 489365928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734391242
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887699573\">PR review comment</a>:</p>\n<blockquote>\n<p>(Likewise at the <code>cranelift-native</code> level, or whatever other level, for Cranelift.)</p>\n</blockquote>",
        "id": 489365931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734391242
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887699573\">PR review comment</a>.</p>",
        "id": 489365957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734391254
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2507586571\">PR review</a>.</p>",
        "id": 489370958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734393579
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1887723954\">PR review comment</a>:</p>\n<blockquote>\n<p>It might help yeah, but the problem is that we have tests all over the place in all sorts of crates that need this logic. That leads to either duplication of the logic, moving tests, or something like that. Basically it's just really difficult wrangling a ubiquitous dependency on platform-specific logic when testing across platforms. </p>\n</blockquote>",
        "id": 489370959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734393579
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2547354286\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"pulley\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 489387634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734401732
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2508868903\">PR review</a>:</p>\n<blockquote>\n<p>Just looked at the runtime and pulley changes themselves since Chris looked at the other parts.</p>\n</blockquote>",
        "id": 489484488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734441829
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1888510298\">PR review comment</a>:</p>\n<blockquote>\n<p>Here I think it is worth explicitly checking against our ISAs supported by Cranelift.</p>\n</blockquote>",
        "id": 489484489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734441830
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1888511366\">PR review comment</a>:</p>\n<blockquote>\n<p>Shouldn't this happen automatically when the build script enables the feature?</p>\n</blockquote>",
        "id": 489484490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734441830
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2508880527\">PR review</a>.</p>",
        "id": 489484936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734441976
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#discussion_r1888517214\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess we could push and dedupe the check into some common dependency, which is a bit annoying, but would otherwise work. <code>wasmtime-environ</code>?</p>\n<p>There is someone actively working on a riscv32 backend for cranelift, they've been commenting on zulip, so it would be a shame to build in new cranelift-doesn't-support-32-bit assumptions at this point...</p>\n</blockquote>",
        "id": 489484938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734441976
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489550188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734460977
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 489564651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734466364
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2549569769\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>Ok I've been thinking about how to clean this up. For the tests that @cfallin flagged I added logic to them all to check <code>cranelift_native::builder()</code> and see whether that's an error. That indicates whether the native platform is supported by Cranelift and tests will early-return if that's an error.</p>\n<p>@fitzgen for your points though I'm not sure how to make it better. I'll note that the <code>cargo:rustc-cfg</code> in the build script is not enabling the <code>pulley</code> feature, it's just affecting the <code>--cfg</code> flags to the compiler. Accurately reflecting Cranelift's supported architecture would mean having:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[target.</span><span class=\"s1\">'cfg(not(any(target_arch = \"x86_64\", target_arch = \"aarch64\", target_arch = \"s390x\", target_arch = \"riscv64\")))'</span><span class=\"k\">.dependencies]</span>\n<span class=\"n\">pulley-interpreter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">workspace</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>And then reflecting that same condition into <code>build.rs</code></p>\n<p>This feels \"zoomed out\" enough to me that leaving <code>target_pointer_width = \"32\"</code> as a proxy there for now is probably sufficient, but I want to confirm with you and/or see if you know of a way to simplify this.</p>\n</blockquote>",
        "id": 489567638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734467759
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2549677111\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>That cfg is certainly annoying but seems like it is probably better than baking in new assumptions that we know are unlikely to be true for too long?</p>\n</blockquote>",
        "id": 489575350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734471048
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2549770225\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>To clarify though the precise assumption here is that 32-bit platforms don't have a Cranelift backend so pulley is pulled in as a dependency. This doesn't actually change any logic internally within Cranelift or Wasmtime, it just compiles in Pulley by default without a way to turn that off. That's only a problem with respect to binary size.</p>\n<p>If all of Cranelift's currently supported architectures are listed out here then that's duplicated in two places in Wasmtime (not counting the ones in Cranelift) and they're just going to get blindly added to in the future. Alternatively if Cranelift gets a 32-bit backend then that would be added as an exception to the cfg as-is when binary size becomes a problem.</p>\n<p>To me this is six-to-one-half-dozen-or-the-other where I have a preference for what's as-is as it's a managable cfg that's by-default workable for most platforms (it doesn't work for 64-bit platforms without a Cranelift backend). Listing out architectures individually feels \"just as bad\" to me basically.</p>\n<p>The main alternative to me is that we leave pulley disabled by default on all platforms, regardless of Cranelift support. That feels like a worse experience to me though because it means that Wasmtime only works by default on Cranelift-supported platforms, which if someone's new to Wasmtime they might not understand to enable the Pulley backend.</p>\n</blockquote>",
        "id": 489582312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734474197
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2557377574\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>ping @fitzgen on ^</p>\n</blockquote>",
        "id": 490197909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734713562
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2526919700\">PR review</a>:</p>\n<blockquote>\n<p>I don't feel strongly enough on the issue of <code>cfg</code>s that I want to hold this up from landing. I do think writing out all the targets is slightly better than using pointer-width=32, but even better is running the full test suite on 32-bit platforms.</p>\n</blockquote>",
        "id": 491523599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735760279
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 492159933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736188319
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2573682245\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>Doing a bit of thinking on this, @fitzgen mind looking at the last commit? (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837/commits/b476a2e7e414413a8c6a72de9c85db77477f93d6\">https://github.com/bytecodealliance/wasmtime/pull/9837/commits/b476a2e7e414413a8c6a72de9c85db77477f93d6</a>) It's a different strategy for enabling Pulley but it pulls the on-vs-off out of <code>Cargo.toml</code> which makes it manageable to list out targets IMO (and it's also going to be hard to forget to update because if it's not updated then the native Cranelift backend isn't used by default which would almost surely get noticed)</p>\n</blockquote>",
        "id": 492160087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736188376
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2573894900\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 492181658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736196322
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 492184384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736197309
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2573922178\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>I'll also call out the now-currently-last commit in this PR which is new and (somewhat) substantial. It resolves a segfault on CI which I could reproduce locally and was one of the items listed in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9747\">https://github.com/bytecodealliance/wasmtime/issues/9747</a> namely that the setjmp/longjmp implementation for Pulley needed to restore callee-save state and this was the first time that turned up.</p>\n</blockquote>",
        "id": 492184586,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736197376
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 492187916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736198648
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2550929845\">PR review</a>:</p>\n<blockquote>\n<p>Latest commit seems like a good balance.</p>\n<p>Did you happen to verify that code size didn't increase under this set up when not using Pulley?</p>\n</blockquote>",
        "id": 493662274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736885800
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493668325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736887995
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#issuecomment-2591083090\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>:</p>\n<blockquote>\n<p>Code size is expected to increase due to the Pulley backend being unconditionally enabled in Cranelift now, but otherwise for Wasmtime itself I've confirmed that Pulley support in Wasmtime is not compiled in on x86_64 (I introduced a compile failure in the pulley-specific integration and it didn't get compiled with default features)</p>\n</blockquote>",
        "id": 493668489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736888051
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493668495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736888056
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493702811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736905929
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493717563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736915965
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493982201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736962766
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493989691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736965182
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837\">PR #9837</a>.</p>",
        "id": 493997024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736967847
    },
    {
        "content": "<p>Scutua submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9837#pullrequestreview-2554175571\">PR review</a>.</p>",
        "id": 494029064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736980323
    }
]