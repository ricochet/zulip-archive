[
    {
        "content": "<p>eggyal opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>I happened to be browsing some code in this repo and came upon on some surprising (mis?)use of <code>unsafe</code> in function sigs.  So I decided to search the entire codebase for <code>unsafe</code> and take a deeper look, and these surprises appear to be quite widespread.</p>\n<p>Has this repo a particularly interesting/unusual policy toward <code>unsafe</code>?  My understanding is that a fn should be <code>unsafe</code> if UB could arise <em>from safe code</em> unless the caller upholds some condition.</p>\n<p>But then we have, for example, the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/runtime/src/vmcontext.rs#L1101-L1152\">getter methods on <code>ValRaw</code></a> which should surely all be <code>unsafe</code> as they require the caller to uphold that the instance is of the correct variant for the access; but instead they are exposed as safe methods and just <em>assume</em> that safety condition has been met.  It would be trivial for callers to trigger UB purely in safe code because of this.</p>\n<p>We also have, for example, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/wasmtime/src/ref.rs#L85-L102\"><code>ExternRef::to_raw</code></a> which is currently <code>unsafe</code> ostensibly because the returned raw pointer \"<em>is only safe to pass into a store if a GC doesn't happen between when the value is produce and when it's passed into the store</em>\"; however, for that reason, passing such a raw pointer into a store should always be (and, I think, correctly <strong>is</strong> always) an <code>unsafe</code> operation and so there's no need for <em>this</em> function (nor indeed <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/wasmtime/src/store.rs#L1497-L1499\"><code>StoreOpaque::insert_vmexternref_without_gc</code></a>) to be <code>unsafe</code>.</p>\n<p>If I haven't misunderstood anything or missed some particular policy of this repo, would you accept PRs that:</p>\n<ol>\n<li>correct all such signatures;</li>\n<li>document the safety requirements of all <code>unsafe</code> functions; and</li>\n<li>add comments that justify all <code>unsafe</code> operations?</li>\n</ol>\n<p>I propose undertaking this as both an audit of <code>unsafe</code> usage and (more personally) as an exercise to become more familiar with the codebase.  The downside is that in many cases these will be breaking changes.</p>\n</blockquote>",
        "id": 405892879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701716228
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630#issuecomment-1839289223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>Hi! Welcome to the Wasmtime repository. I'd like to suggest that, as a newcomer to this project which is maintained by many folks who have written Rust for a very long time, and in some cases even helped shape the language and its implementation, that you reframe this report to first try to assume the choices made are correct, and that you want to understand why those choices were made, rather than assume they are incorrect.</p>\n</blockquote>",
        "id": 405894458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701716716
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630#issuecomment-1839289223\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>Hi! Welcome to the Wasmtime project. I'd like to suggest that, as a newcomer to this project which is maintained by many folks who have written Rust for a very long time, and in some cases even helped shape the language and its implementation, that you reframe this report to first try to assume the choices made are correct, and that you want to understand why those choices were made, rather than assume they are incorrect.</p>\n</blockquote>",
        "id": 405894474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701716723
    },
    {
        "content": "<p>eggyal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630#issuecomment-1839298189\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>Not <em>entirely</em> a newcomer to this project, and have contributed to rustc (including bits of <code>unsafe</code> code) for some years now.  I did however frame the question with \"<em>If I haven't misunderstood anything or missed some particular policy of this repo</em>\" because I fully recognise that I may have misunderstood or missed something pertinent and very much welcome being corrected if so.  But I also gave two specific examples that appear objectively incorrect, together with my reasoning.  Please, tell me where I have it wrong.</p>\n</blockquote>",
        "id": 405895261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701717084
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630#issuecomment-1839351415\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>I'd at least personally echo what @pchickey already mentioned in the sense that we're trying to do our due diligence with respect to <code>unsafe</code> in Wasmtime where we can. For example we aren't trying to just slap <code>unsafe</code> around to get things compiling but instead focus on understanding why bits and pieces are <code>unsafe</code> and what impact they have. That being said it's also important to understand the context of this.</p>\n<p>Wasmtime is a WebAssembly runtime which executes code generated by Cranelift. Virtually nothing it does is safe. We explicitly chose to write it in Rust due to Rust's safety guarantees, but that wouldn't help us much if we just tagged everything as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">safe_wrapper</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// SAFETY: can't prove Cranelift is safe so assume it is</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">call_wasm</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So on one hand we're trying to balance what we get from Rust vs the reality of doing unsafe things pervasively throughout the runtime. This is one reason, for example, that we require all changes to go through code review by maintainers which have tests and all that jazz. This of course doesn't catch all bugs, however!</p>\n<p>Another important piece of context is that from an API perspective Wasmtime puts little effort into auditing anything \"beneath\" the <code>wasmtime</code> crate. The <code>wasmtime</code> crate is the public face of Wasmtime and the <code>unsafe</code>-vs-safe there is carefully scrutinized, but an <code>unsafe</code> API in <code>wasmtime-runtime</code> receives little-to-no scrutiny beyond what the author originally chose. For example the <code>insert_vmexternref_without_gc</code> API you pointed out doesn't get much scrutiny since it's internal.</p>\n<p>That's at least my description of the current status quo. I'd echo again what @pchickey said in that it's probably best to approach this with care and understanding to better understand what's going on. I don't doubt that we've made the wrong decision sometimes on what should be <code>unsafe</code> or where the qualifier should be mentioned. While we try to do the right thing we're human after all and make mistakes. That being said I do think it's best to assume good faith intentions on all sides, for example we're not trying to be a special project with our own definition of <code>unsafe</code>. We're no different than any other Rust project in that regard, ideally we'd have zero <code>unsafe</code> but that doesn't work so we try the next best thing.</p>\n<hr>\n<p>With that background context, I personally think it'd be good to have some audits in this area. That being said though this is not an easy undertaking. Modifying internals of Wasmtime like this often requires in-depth knowledge of how the pieces all fit together. I also personally think it would be useful to clutter most of Wasmtime with unchecked brittle comments that generally all repeat the same thing (e.g. if everything just said <code>// SAFETY: well cranelift can't be proven safe so here we are</code>).</p>\n<p>We've historically tried to <a href=\"https://docs.wasmtime.dev/contributing-architecture.html\">keep architecture decisions in Wasmtime documented</a> and that's a good place for decisions along the lines of \"well to understand anything you gotta understand this\". </p>\n<p>So overall I would at least personally say it'd be a good idea to audit things, but I would also request that you don't send a huge PR with comments everywhere that would take quite some time to review. I'd recommend starting on a particular location and working your way out from there.  For example <code>ValRaw</code> might be a good place to start. I wrote that down myself and made those methods all safe to begin with, and I'm not sure I agree with your characterization that they're obviously <code>unsafe</code>. I think it would be good to dig in a bit more to craft an example of unsafety, perhaps even under MIRI, to better understand. Regardless at least more documentation is warranted if you're left with the impression that it should be <code>unsafe</code> (whether or not it should be), because naturally even if it's with internals it's still best to be clear.</p>\n</blockquote>",
        "id": 405899404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701718803
    },
    {
        "content": "<p>eggyal <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630#issuecomment-1839388376\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>Alex, thank you for such a detailed and thorough response.  I will take on board your comments and proceed sensitively and with care.</p>\n</blockquote>",
        "id": 405903059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701720247
    },
    {
        "content": "<p>eggyal closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7630\">issue #7630</a>:</p>\n<blockquote>\n<p>I happened to be browsing some code in this repo and came upon on some surprising (mis?)use of <code>unsafe</code> in function sigs.  So I decided to search the entire codebase for <code>unsafe</code> and take a deeper look, and these surprises appear to be quite widespread.</p>\n<p>Has this repo a particularly interesting/unusual policy toward <code>unsafe</code>?  My understanding is that a fn should be <code>unsafe</code> if UB could arise <em>from safe code</em> unless the caller upholds some condition.</p>\n<p>But then we have, for example, the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/runtime/src/vmcontext.rs#L1101-L1152\">getter methods on <code>ValRaw</code></a> which should surely all be <code>unsafe</code> as they require the caller to uphold that the instance is of the correct variant for the access; but instead they are exposed as safe methods and just <em>assume</em> that safety condition has been met.  It would be trivial for callers to trigger UB purely in safe code because of this.</p>\n<p>We also have, for example, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/wasmtime/src/ref.rs#L85-L102\"><code>ExternRef::to_raw</code></a> which is currently <code>unsafe</code> ostensibly because the returned raw pointer \"<em>is only safe to pass into a store if a GC doesn't happen between when the value is produce and when it's passed into the store</em>\"; however, for that reason, passing such a raw pointer into a store should always be (and, I think, correctly <strong>is</strong> always) an <code>unsafe</code> operation and so there's no need for <em>this</em> function (nor indeed <a href=\"https://github.com/bytecodealliance/wasmtime/blob/af38ee094af6d22e90d705cca45514a71b995c4d/crates/wasmtime/src/store.rs#L1497-L1499\"><code>StoreOpaque::insert_vmexternref_without_gc</code></a>) to be <code>unsafe</code>.</p>\n<p>If I haven't misunderstood anything or missed some particular policy of this repo, would you accept PRs that:</p>\n<ol>\n<li>correct all such signatures;</li>\n<li>document the safety requirements of all <code>unsafe</code> functions; and</li>\n<li>add comments that justify all <code>unsafe</code> operations?</li>\n</ol>\n<p>I propose undertaking this as both an audit of <code>unsafe</code> usage and (more personally) as an exercise to become more familiar with the codebase.  The downside is that in many cases these will be breaking changes.</p>\n</blockquote>",
        "id": 405906563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1701721741
    }
]