[
    {
        "content": "<p>safe4u opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8905\">issue #8905</a>:</p>\n<blockquote>\n<p>Hi, we have found an unsound problem caused by the unsafe call <code>std::slice::from_raw_parts</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/842fa767acdc26f096ac108605353b8b71e23169/crates/jit-debug/src/perf_jitdump.rs#L252\">https://github.com/bytecodealliance/wasmtime/blob/842fa767acdc26f096ac108605353b8b71e23169/crates/jit-debug/src/perf_jitdump.rs#L252</a><br>\n<code>from_raw_parts</code> converts the pointer <code>addr</code> and the <code>len</code> into a slice without validation and that memory block would be dumped.<br>\nThus, the 'safe' function <code>dump_code_load_record</code> is actually 'unsafe' since it requires the caller to guarantee that the <code>addr</code> is valid and <code>len</code> must not overflow.</p>\n<h2>POC</h2>\n<p>Here follows a simple POC written in safe Rust code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_jit_debug</span><span class=\"p\">::</span><span class=\"n\">perf_jitdump</span><span class=\"p\">::</span><span class=\"n\">JitDumpFile</span><span class=\"p\">;</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">jit_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JitDumpFile</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"jitdump\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">str1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hi\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_file</span><span class=\"p\">.</span><span class=\"n\">dump_code_load_record</span><span class=\"p\">(</span><span class=\"s\">\"name\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">str1</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Suggestion</h2>\n<p>There are two possible action choices could be taken:<br>\n1. Mark the function <code>dump_code_load_record</code> as unsafe and write Safety requirement.<br>\n2. (recommended) Merge parameter <code>addr</code> and <code>len</code> into a single parameter <code>code_buffer: &amp;[u8]</code>, so the compiler would guarantee the buffer is valid. </p>\n</blockquote>",
        "id": 449449792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720249111
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8905\">issue #8905</a>:</p>\n<blockquote>\n<p>Hi, we have found an unsound problem caused by the unsafe call <code>std::slice::from_raw_parts</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/842fa767acdc26f096ac108605353b8b71e23169/crates/jit-debug/src/perf_jitdump.rs#L252\">https://github.com/bytecodealliance/wasmtime/blob/842fa767acdc26f096ac108605353b8b71e23169/crates/jit-debug/src/perf_jitdump.rs#L252</a><br>\n<code>from_raw_parts</code> converts the pointer <code>addr</code> and the <code>len</code> into a slice without validation and that memory block would be dumped.<br>\nThus, the 'safe' function <code>dump_code_load_record</code> is actually 'unsafe' since it requires the caller to guarantee that the <code>addr</code> is valid and <code>len</code> must not overflow.</p>\n<h2>POC</h2>\n<p>Here follows a simple POC written in safe Rust code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_jit_debug</span><span class=\"p\">::</span><span class=\"n\">perf_jitdump</span><span class=\"p\">::</span><span class=\"n\">JitDumpFile</span><span class=\"p\">;</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">jit_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JitDumpFile</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"jitdump\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">str1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hi\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_file</span><span class=\"p\">.</span><span class=\"n\">dump_code_load_record</span><span class=\"p\">(</span><span class=\"s\">\"name\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">str1</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Suggestion</h2>\n<p>There are two possible action choices could be taken:<br>\n1. Mark the function <code>dump_code_load_record</code> as unsafe and write Safety requirement.<br>\n2. (recommended) Merge parameter <code>addr</code> and <code>len</code> into a single parameter <code>code_buffer: &amp;[u8]</code>, so the compiler would guarantee the buffer is valid. </p>\n</blockquote>",
        "id": 449958178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720465684
    }
]