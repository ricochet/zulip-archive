[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162#issuecomment-680196026\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162\">Issue #2162</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 208002279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598380054
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162#issuecomment-680206873\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162\">Issue #2162</a>:</p>\n<blockquote>\n<blockquote>\n<p>Could this add a parameter to <code>oracles::instantiate</code> though to assert that <code>Module::new</code> succeeds? Here I think it always should, and probably for <code>wasm-opt -ttf</code> it always should as well?</p>\n</blockquote>\n<p>I think we can run up against Wasmtime-specific limits on things like number of locals and all that. I think we've hit this before with <code>wasm-opt -ttf</code>. Let me poke at it a little...</p>\n</blockquote>",
        "id": 208005638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598381360
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162#issuecomment-680265026\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162\">Issue #2162</a>:</p>\n<blockquote>\n<p>I tried asserting that the module compiles OK and hit a bug where a valid module wasn't validating with Wasmtime's version of <code>wasmparser</code>. This has since been fixed upstream, but updating <code>wasmparser</code> is a bit of a pain right now, because it hits your big refactor for module linking and all the interface changes therein as well. I spent a bit of time on updating <code>wasmparser</code> but I think we probably need to expose more methods on the new readers to get the underlying binary reader and things like that.</p>\n<p>Anyways, I think we should land this as-is, and then re-investigate asserting that the modules compile after we've updated <code>wasmparser</code>.</p>\n</blockquote>",
        "id": 208022184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598388899
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162#issuecomment-680272788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2162\">Issue #2162</a>:</p>\n<blockquote>\n<p>Oh the main bulk of the wasmparser update is in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2059\">https://github.com/bytecodealliance/wasmtime/pull/2059</a> and is blocked on cranelift/spidermonkey, but it's got caught up I imagine in all the changes happening recently. Looks like I need to rebase that too.</p>\n</blockquote>",
        "id": 208024267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598389979
    }
]