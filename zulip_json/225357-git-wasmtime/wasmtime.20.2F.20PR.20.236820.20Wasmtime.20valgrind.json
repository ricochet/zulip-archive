[
    {
        "content": "<p>ssunkin-fastly opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a> from <code>ssunkin-fastly:wasmtime-valgrind-hacking</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is a draft PR for Valgrind on Wasm for early review by cfallin and ixi.<br>\n</p>\n</blockquote>",
        "id": 383036834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691517246
    },
    {
        "content": "<p>ssunkin-fastly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383037260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691517370
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1567889944\">PR review</a>:</p>\n<blockquote>\n<p>This is looking really great! I have a whole bunch of minor comments but the overall shape of the code is good and we should be able to refine things fairly quickly, I think.</p>\n<p>I know you're working on doc-comments but will note in particular that our CI checks will fail until there's a doc-comment on every public type, enum, function; it might feel a little tedious but it's good practice :-)</p>\n<p>It'd be good to file some followup GitHub issues and refer to issue numbers where appropriate in comments as well. Off the top of my head:</p>\n<ul>\n<li>Support for multiple memories</li>\n<li>Support for instrumenting SIMD loads/stores</li>\n<li>Support for handling different memory layouts (assume whole initial memory size is valid, for example)</li>\n<li>Option to print valgrind errors and continue (as the \"real Valgrind\" does) rather than trap</li>\n</ul>\n<p>and anything else on your to-do list you want to capture.</p>\n<p>Happy to pair on any of the requests here if unclear!</p>\n</blockquote>",
        "id": 383050838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1567889944\">PR review</a>:</p>\n<blockquote>\n<p>This is looking really great! I have a whole bunch of minor comments but the overall shape of the code is good and we should be able to refine things fairly quickly, I think.</p>\n<p>I know you're working on doc-comments but will note in particular that our CI checks will fail until there's a doc-comment on every public type, enum, function; it might feel a little tedious but it's good practice :-)</p>\n<p>It'd be good to file some followup GitHub issues and refer to issue numbers where appropriate in comments as well. Off the top of my head:</p>\n<ul>\n<li>Support for multiple memories</li>\n<li>Support for instrumenting SIMD loads/stores</li>\n<li>Support for handling different memory layouts (assume whole initial memory size is valid, for example)</li>\n<li>Option to print valgrind errors and continue (as the \"real Valgrind\" does) rather than trap</li>\n</ul>\n<p>and anything else on your to-do list you want to capture.</p>\n<p>Happy to pair on any of the requests here if unclear!</p>\n</blockquote>",
        "id": 383050839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287496884\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's call this <code>wasmtime-valgrind</code> for consistency with the other crates in <code>crates/</code>; also, the version should match the others (<code>11.0.0</code> here but likely <code>13</code> once you merge or rebase to a latest <code>main</code>).</p>\n</blockquote>",
        "id": 383050841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287501775\">PR review comment</a>:</p>\n<blockquote>\n<p>tiny style nit but there's a missing newline at the end of this file (GitHub flags it with a symbol) -- could you add one?</p>\n</blockquote>",
        "id": 383050842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287502534\">PR review comment</a>:</p>\n<blockquote>\n<p>stray comment about <code>Value</code> can be removed I think?</p>\n</blockquote>",
        "id": 383050843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287498576\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a TODO referring to a filed issue to add the load/store hooks for vector operands -- something like <code>// TODO(#1234): add </code>before_load<code> / </code>before_store<code> for SIMD loads and stores.</code> where <code>1234</code> is a GitHub issue number for a new issue you've filed.</p>\n</blockquote>",
        "id": 383050844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287501233\">PR review comment</a>:</p>\n<blockquote>\n<p>stray comment we can remove I think?</p>\n</blockquote>",
        "id": 383050845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520881
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287500766\">PR review comment</a>:</p>\n<blockquote>\n<p>Just making a note here of empty doc-comments to fill in before merge (I know you're working on this at the moment).</p>\n</blockquote>",
        "id": 383050847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287505964\">PR review comment</a>:</p>\n<blockquote>\n<p>To make this a bit more robust (someone <em>could</em> define a function named <code>malloc</code> with no args), let's check whether there actually is an arg 2. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">entry_block</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">func_args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// If a function named `malloc` has at least one argument, we assume the</span>\n<span class=\"w\">  </span><span class=\"c1\">// first argument is the requested allocation size.</span>\n<span class=\"w\">  </span><span class=\"n\">func_args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>(also comment about the assumption, something like the above, would be good)</p>\n</blockquote>",
        "id": 383050848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287502893\">PR review comment</a>:</p>\n<blockquote>\n<p>commented-out println and comment can be removed</p>\n</blockquote>",
        "id": 383050849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287506786\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a similar early return if <code>retvals</code> is empty (someone could define <code>void malloc()</code> if they wanted to!) and a comment about the assumption (that the returned value is a pointer to the allocated memory).</p>\n</blockquote>",
        "id": 383050850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287503811\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's call this <code>hook_malloc_exit</code> I think -- it's a little clearer (we're \"hooking\" or inserting a hook, rather than checking right now at compile time). Likewise below for <code>check_free_exit</code>...</p>\n</blockquote>",
        "id": 383050852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287509941\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's change this to a <code>panic</code> and add a helpful message -- \"function name not a <code>UserFuncName::User</code> as expected\" or something like that?</p>\n</blockquote>",
        "id": 383050853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287507019\">PR review comment</a>:</p>\n<blockquote>\n<p>Likewise here: check, early return, comment about assumption.</p>\n</blockquote>",
        "id": 383050854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287508258\">PR review comment</a>:</p>\n<blockquote>\n<p>Have we tested what happens if we don't have a name section? We should I think handle this case gracefully (I guess by treating it as if no functions match). You can test this by doing <code>wasm-strip program.wasm</code> and then running (<code>wasm-strip</code> is part of Binaryen I think; happy to help or run this for you if needed).</p>\n</blockquote>",
        "id": 383050855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287511177\">PR review comment</a>:</p>\n<blockquote>\n<p>This pattern occurs several times -- can we wrap it in a helper <code>current_func_name(&amp;self) -&gt; Option&lt;&amp;str&gt;</code>?</p>\n<p>(The <code>Option</code> return lets us naturally handle the missing name section too: we can do <code>if self.current_func_name() == Some(\"malloc\") { ... }</code> and we get no-match for <code>None</code>.)</p>\n</blockquote>",
        "id": 383050856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287508955\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we can skip these calls here and below (and then rename the <code>builder</code> argument to <code>_builder</code> so we don't get warnings about unused variables/args).</p>\n</blockquote>",
        "id": 383050857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287513801\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a TODO here to support multiple memories; for now we have just one <code>valgrind_state</code> and it corresponds to memory 0.</p>\n</blockquote>",
        "id": 383050858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287513367\">PR review comment</a>:</p>\n<blockquote>\n<p>likewise here, add newline at end of file</p>\n</blockquote>",
        "id": 383050859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287511712\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a comment here about the assumption we're making -- that global 0 is the auxiliary stack pointer.</p>\n</blockquote>",
        "id": 383050860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287512560\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we add an argument here for the memory index (<code>MemoryIndex</code> type), and insert the below logic only if the grow is on memory 0? In practice we won't hit the case today but it's possible to define a Wasm module that has multiple memories, and a grow of some other memory could confuse this logic otherwise.</p>\n</blockquote>",
        "id": 383050861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287514141\">PR review comment</a>:</p>\n<blockquote>\n<p>we can remove this println now I think (also search for printlns elsewhere to be sure)</p>\n</blockquote>",
        "id": 383050863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287516364\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's make this a constant (and then uppercase it to keep rustc happy): <code>let KIB: usize = 1024;</code></p>\n</blockquote>",
        "id": 383050864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287518302\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is left-over from prior to the import of sources into the main repo -- you should be able to edit <code>.gitmodules</code> manually to remove the stanza?</p>\n</blockquote>",
        "id": 383050865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287515567\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's re-enable this -- or is it disabled because of some assumption we're making wrt data location?</p>\n</blockquote>",
        "id": 383050866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520882
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287517549\">PR review comment</a>:</p>\n<blockquote>\n<p>enormously tiny nitpick but this would read slightly more naturally for me as <code>... * 64 * KIB</code></p>\n</blockquote>",
        "id": 383050867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287518994\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's update all the metadata here to match the other crates in <code>crates/</code> -- developers as \"The Wasmtime Developers\", license, current version, etc (and remove the comment from the starter template below).</p>\n</blockquote>",
        "id": 383050869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287519491\">PR review comment</a>:</p>\n<blockquote>\n<p>We can probably remove this TODO?</p>\n</blockquote>",
        "id": 383050870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287521352\">PR review comment</a>:</p>\n<blockquote>\n<p>To reduce ambiguity I think this should be called <code>stack_end</code> or something similar? (\"Stack size\" makes me think of the actual size, so a stack from 1MiB down to 1MiB - 4KiB is 4KiB large; but the \"end\" is 1MiB)</p>\n</blockquote>",
        "id": 383050871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287522865\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a doc-comment at the top of this module like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! add some docs here</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! in markdown format, with multiple paragraphs as desired</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! like this</span>\n</code></pre></div>\n<p>documenting the assumptions about memory layout here.</p>\n</blockquote>",
        "id": 383050872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287524480\">PR review comment</a>:</p>\n<blockquote>\n<p>We'll want a much longer doc-comment of course, probably with a pointer to documentation for more details on how to use!</p>\n</blockquote>",
        "id": 383050873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1287523585\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm somewhat surprised this is needed -- could we document the case where it is if so (example addresses or whatnot)?</p>\n</blockquote>",
        "id": 383050874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691520883
    },
    {
        "content": "<p>ssunkin-fastly submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1570615719\">PR review</a>.</p>",
        "id": 383423692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691617760
    },
    {
        "content": "<p>ssunkin-fastly created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1289238077\">PR review comment</a>:</p>\n<blockquote>\n<p>This was disabled because all memory below the start of the stack is just marked as read-write-ok</p>\n</blockquote>",
        "id": 383423693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691617760
    },
    {
        "content": "<p>ssunkin-fastly submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1570780251\">PR review</a>.</p>",
        "id": 383435526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691624834
    },
    {
        "content": "<p>ssunkin-fastly created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1289366790\">PR review comment</a>:</p>\n<blockquote>\n<p>ah the reason these were added were to call the builtins so that there wouldn't be unused function warnings</p>\n</blockquote>",
        "id": 383435527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691624834
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572305891\">PR review</a>.</p>",
        "id": 383690698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691685198
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290397404\">PR review comment</a>:</p>\n<blockquote>\n<p>fwiw i think the error here is when <code>state.allocations.len() == 0</code>, if the length is one i expect this would choose the one valid index (<code>0</code>). maybe this comment predates the <code>if state.allocations.is_empty()</code> check above?</p>\n</blockquote>",
        "id": 383690699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691685199
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572323796\">PR review</a>.</p>",
        "id": 383693688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691685766
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290409452\">PR review comment</a>:</p>\n<blockquote>\n<p>Chris mentioned a longer doc comment on the CLI flag below, but this also seems to have <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fe3db2a59e8b5f05d6c58c23a59799067a4dcb35/crates/wasmtime/src/config.rs#L1004\">prior art</a> for linking to <a href=\"http://bytecodealliance.github.io\">bytecodealliance.github.io</a> for docs pages. i'm not sure if it makes sense to basically copy the CLI flag's help text here, or maybe have the flag say something a little shorter like \"enables memory checking for wasm programs, see the doc comment over on config for more\"...?</p>\n<p>suppose that also depends on what you've changed through the first iteration of feedback here. i'll keep an eye out!</p>\n</blockquote>",
        "id": 383693690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691685766
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383724194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692317
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383724287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692326
    },
    {
        "content": "<p>ssunkin-fastly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383724399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692346
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a> as ready for review.</p>",
        "id": 383724432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692354
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383725261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692540
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383725796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691692653
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290543648\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's add a brief note that wmemcheck requires a non-stripped wasm (with a name section) so that it can recognize the malloc and free functions, and doesn't work with custom allocators yet.</p>\n<p>Also, can we add a reference to Valgrind? Something like \"wmemcheck is inspired by, and replicates the basic functionality of, Valgrind's memcheck tool.\"</p>\n</blockquote>",
        "id": 383727380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691693024
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572520278\">PR review</a>:</p>\n<blockquote>\n<p>Very close now!</p>\n</blockquote>",
        "id": 383727737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691693115
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290541450\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's write these from the generic perspective of Cranelift, without knowledge of wasmtime or wmemcheck (here we're defining the interface/tools that the higher abstraction layer uses). So something like \"Insert code before a function return.\"</p>\n<p>Likewise below: before loads/stores/global updates/memory growths.</p>\n</blockquote>",
        "id": 383727757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691693122
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290544510\">PR review comment</a>:</p>\n<blockquote>\n<p>No need to refer to the implementation (\"including wmemcheck_state\") here -- the relevant bit for the CLI user is just that it does memory-usage error checking.</p>\n</blockquote>",
        "id": 383728295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691693256
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572531315\">PR review</a>.</p>",
        "id": 383731534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694006
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572520278\">PR review</a>:</p>\n<blockquote>\n<p>Very close now!</p>\n</blockquote>",
        "id": 383732689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694318
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383732751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694335
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572553969\">PR review</a>:</p>\n<blockquote>\n<p>LGTM, thanks so much!</p>\n</blockquote>",
        "id": 383733333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694496
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572562232\">PR review</a>.</p>",
        "id": 383733801,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694621
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290571820\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps cause an error to get returned during <code>Engine::new</code> if <code>wmemcheck</code> wasn't enabled at compile time?</p>\n</blockquote>",
        "id": 383733842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694631
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290548929\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's rename this to <code>wasmtime-wmemcheck</code>, to stick with the convention that everything in <code>crates/</code> is named with that prefix.</p>\n</blockquote>",
        "id": 383733929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694658
    },
    {
        "content": "<p>ssunkin-fastly updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383733990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694682
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572562232\">PR review</a>.</p>",
        "id": 383734658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694876
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290570736\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be added to the overall workspace in this repository? (there's a few other examples of crates that have their own fuzzers which are also part of the main workspace)</p>\n</blockquote>",
        "id": 383734666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691694877
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290569301\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of making this <code>pub</code> can access to the underlying index go through <code>.as_u32()</code>?</p>\n</blockquote>",
        "id": 383742597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691697125
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>.</p>",
        "id": 383765114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704040
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572779410\">PR review</a>.</p>",
        "id": 383765137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704056
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290714595\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, added a check to <code>Config::validate()</code>!</p>\n</blockquote>",
        "id": 383765138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704056
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572779822\">PR review</a>.</p>",
        "id": 383765228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704085
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290714910\">PR review comment</a>:</p>\n<blockquote>\n<p>I've gone ahead and deleted the <code>fuzz</code> crate -- I think we had talked about this earlier but missed it, as the fuzz targets are out-of-date anyway.</p>\n</blockquote>",
        "id": 383765229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704085
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#pullrequestreview-1572779903\">PR review</a>.</p>",
        "id": 383765242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704091
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820#discussion_r1290714989\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed.</p>\n</blockquote>",
        "id": 383765243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704091
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6820\">PR #6820</a>:</p>\n<blockquote>\n<p>This PR introduces <code>wmemcheck</code>, a memory checker for a Wasm guest running inside Wasmtime.</p>\n<p><code>wmemcheck</code> operates by recognizing calls to malloc and free inside the Wasm module, and tracking which bytes are valid. It then instruments loads and stores and flags errors when accesses are invalid. This is inspired by the <code>memcheck</code> tool in Valgrind, hence the name.</p>\n<p>The functionality is off by default and is enabled with <code>wasmtime run --wmemcheck</code>.</p>\n</blockquote>",
        "id": 383765619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691704223
    }
]