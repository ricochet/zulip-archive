[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit migrates the <code>ishl</code>, <code>ushr</code>, and <code>sshr</code> instructions to<br>\nISLE. These involve special cases for almost all types of integers<br>\n(including vectors) and helper functions for the i128 lowerings since<br>\nthe i128 lowerings look to be used for other instructions as well. This<br>\ndoesn't delete the i128 lowerings in the Rust code just yet because<br>\nthey're still used by Rust lowerings, but they should be deletable in<br>\ndue time once those lowerings are translated to ISLE.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 265180171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639671810
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834457523\">PR review</a>.</p>",
        "id": 265199613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834457523\">PR review</a>.</p>",
        "id": 265199614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770804134\">PR review comment</a>:</p>\n<blockquote>\n<p>I think it'd probably be good to build out the <code>ProducesFlags</code> / <code>ConsumesFlags</code> type wrappers initially, just to avoid the cost later of undoing the \"temporary manually-managed-for-now flags usage\" approach. It's hopefully not more than 10-20 lines of ISLE? If it turns out to be too difficult for some reason then of course we can reconsider...</p>\n</blockquote>",
        "id": 265199615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770806274\">PR review comment</a>:</p>\n<blockquote>\n<p>Same comment here as above for the temp names (thanks!).</p>\n</blockquote>",
        "id": 265199616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770804907\">PR review comment</a>:</p>\n<blockquote>\n<p>This sequence (copied from the original non-SSA code) reuses temps, so it's a bit confusing in context here... could you rewrite it in terms of the variable binding names in the <code>let</code> below?</p>\n</blockquote>",
        "id": 265199617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770808788\">PR review comment</a>:</p>\n<blockquote>\n<p>This is definitely a pre-existing thing, but reading through this code it's becoming pretty apparent to me that having helpers to be able to write e.g. <code>(lsl64 src lo_amt)</code> rather than <code>(alu_rrr (ALUOp.Lsl64) ...)</code> would make things a lot more readable. I know <code>ALUOp</code> can be used in multiple instruction formats so we have duplication (lsl64 with immediate vs not, add64 with immediate, extend, shift, ...) but it seems reasonable to me to pay that cost in order to have super-clear lowering patterns. Thoughts? (This is out-of-scope for this PR of course, would be a followup refactor if we do it)</p>\n</blockquote>",
        "id": 265199618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639679810
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834477086\">PR review</a>.</p>",
        "id": 265200433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639680207
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770818059\">PR review comment</a>:</p>\n<blockquote>\n<p>I originally started to do that but the idioms of the AArch64 backend are what stopped me. On x86 each instruction seems to largely be used with one variant of the <code>Inst</code> enum, but on AArch64 one <code>ALUOp</code> can be used with multiple variants (as you've pointed out). </p>\n<p>Basically I wasn't sure how to resolve that. I figured that going down the route of <code>alu_rrr</code> inst builders was not horrible but I agree it's not exactly the most readable. I'd be happy to change though if you've got an idea of how to name the constructors or resolve this</p>\n</blockquote>",
        "id": 265200434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639680207
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>.</p>",
        "id": 265205019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639682134
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834510016\">PR review</a>.</p>",
        "id": 265205054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639682152
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770851371\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure thing! I believe the most recent commit should take care of this</p>\n</blockquote>",
        "id": 265205056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639682152
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834535632\">PR review</a>.</p>",
        "id": 265209352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639683855
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770872741\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe something like: just the mnemonic for the all-regs case (so <code>(add64 rn rm)</code>, <code>(lsl64 rn rm)</code>, etc.), and then e.g. <code>add64_imm12</code>, <code>add64_shift</code>, <code>add64_extend</code>? This also fixes the issue where illegal combinations are allowed currently: e.g. right now we can put the pieces together to make an <code>add64</code> with <code>ImmLogic</code> but that's disallowed (should hit a panic during emission) -- better to catch statically.</p>\n<p>Not super-urgent, just better to do sooner than later if we're going to do it!</p>\n</blockquote>",
        "id": 265209353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639683856
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834544052\">PR review</a>.</p>",
        "id": 265210455,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639684428
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770878605\">PR review comment</a>:</p>\n<blockquote>\n<p>Interesting approach here! I kind of like the functional design (flags consumer just takes a flags producer) vs. what we have in x64 (separate toplevel combinator takes a consumer and producer).</p>\n<p>That said, this abstraction won't allow us to reuse flags later, unless I'm missing some approach -- e.g. we couldn't have two separate <code>csel</code>s, or a <code>csel</code> and an <code>adc</code>, or something like that, both use one compare. That was part of the reasoning for the top-level combinator approach. I'd also sort of prefer to be consistent if we can, just so folks jumping back and forth between the machine backends don't have to shift mindset more than necessary (admittedly this purely aspirational and we have plenty of differences in the handwritten code).</p>\n<p>Was there a reason you had in mind to prefer this approach over the x64-style one, or just preference? If not, and if it's not too much trouble (and sorry for pushing a bit more on this!), I think it might be good to take the x64-style approach... thanks!</p>\n</blockquote>",
        "id": 265210456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639684429
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>.</p>",
        "id": 265213911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639686065
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834568204\">PR review</a>.</p>",
        "id": 265214006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639686117
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#discussion_r770895166\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh when I originally looked at <code>ProducesFlags</code> it didn't seem right because it has a <code>Reg</code> payload and I thought that <code>tst</code> didn't produce any registers so it was intened for something else. After reading how this is used with x64 though I see that the field can be <code>(invalid_reg)</code> which means I was able to switch over to the existing functions in <code>prelude.isle</code> for this.</p>\n</blockquote>",
        "id": 265214008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639686117
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>.</p>",
        "id": 265214538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639686360
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608#pullrequestreview-834580859\">PR review</a>.</p>",
        "id": 265215907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639687023
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>.</p>",
        "id": 265223623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639691002
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a> from <code>isle-7-ushr</code> to <code>main</code>.</p>",
        "id": 265230974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639694892
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3608\">PR #3608</a>.</p>",
        "id": 265235598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1639697874
    }
]