[
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713394979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>It seems to me that the simplest fix is simply to remove all <code>NxM</code> types from CL's type system, where <code>NxM == 128</code>, and replace them with a single <code>V128</code> type.  What benefit does having all these types bring us?  They are not useful for typechecking CLIF that is derived from wasm, since wasm allows free intermixing of the types.</p>\n</blockquote>",
        "id": 214020153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603268216
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713396900\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>(notes copied from #2303):</p>\n<p>Disadvantages of using bitcasts:</p>\n<ul>\n<li>\n<p>they make the logic in this file [<code>code_translator.rs</code>] fragile: miss out a bitcast for any reason, and there is the risk of the system failing in the verifier.  At least for debug builds.</p>\n</li>\n<li>\n<p>in the new backends, they potentially interfere with pattern matching on CLIF -- the patterns need to take into account the presence of bitcast nodes.</p>\n</li>\n<li>\n<p>in the new backends, they get translated into machine-level vector-register-copy instructions, none of which are actually necessary.  We then depend on the register allocator to coalesce them all out.</p>\n</li>\n<li>\n<p>they increase the total number of CLIF nodes that have to be processed, hence slowing down the compilation pipeline.  Also, the extra coalescing work generates a slowdown.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 214020514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603268418
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713397720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>Replacing <code>NxM</code> with <code>V128</code> would require a new variant of many instructions for every lane size. The current design allows using the same <code>iadd</code> instruction for every integer type both scalar and vector. It is also useful for typechecking CLIF derived from rust, as rust doesn't allow mixing vector types without an explicit transmute.</p>\n</blockquote>",
        "id": 214020634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603268498
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713403469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>One longer-term way around that, once the old backend is no longer needed, that would be to abandon the DSL for defining CLIF instructions.  And instead define them using a simple Rust enum, in the same way that the new backends define target specific instructions.  And for the vector instructions, include a field of type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Laneage</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">I8X16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I16X8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I32X4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I64X2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">versions</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">etc</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214021621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603269067
    },
    {
        "content": "<p>julian-seward1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713403469\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>One longer-term way around that, once the old backend is no longer needed, would be to abandon the DSL for defining CLIF instructions.  And instead define them using a simple Rust enum, in the same way that the new backends define target specific instructions.  And for the vector instructions, include a field of type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Laneage</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">I8X16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I16X8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I32X4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I64X2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"n\">versions</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">etc</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>",
        "id": 214021782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603269166
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147#issuecomment-713404633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">Issue #1147</a>:</p>\n<blockquote>\n<p>Currently many instructions are both scalar <strong>and</strong> vector instructions at the same time. For example <code>iadd</code>. Adding a <code>Laneage</code> argument would add unnecessary noise when using scalars only.</p>\n</blockquote>",
        "id": 214021806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603269188
    }
]