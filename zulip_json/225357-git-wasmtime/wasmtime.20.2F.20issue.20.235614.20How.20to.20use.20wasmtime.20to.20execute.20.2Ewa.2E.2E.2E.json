[
    {
        "content": "<p>guest271314 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">xubuntu</span><span class=\"o\">/</span><span class=\"n\">localscripts</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"http://Native%20messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not a comment and .py file.</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322674236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674284313
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not a comment and .py file.</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322674326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674284404
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not a comment and .py file.</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322674554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674284585
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not a comment and .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322674739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674284728
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript and .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't wastime recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322675337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285198
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript and .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't wastime recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322675477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285312
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript and .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't wastime recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322675578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285389
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement.</p>\n</blockquote>",
        "id": 322675871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285659
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_c.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement. Thanks.</p>\n</blockquote>",
        "id": 322675894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285688
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime nm_wasm.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement. Thanks.</p>\n</blockquote>",
        "id": 322675986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674285735
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime nm_wasm.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used wasm2wat to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement. Thanks.</p>\n</blockquote>",
        "id": 322676585,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674286176
    },
    {
        "content": "<p>guest271314 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime nm_wasm.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used <code>wasm2wat</code> to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement. Thanks.</p>\n</blockquote>",
        "id": 322676600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674286199
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399332877\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@tschneidereit Should I go ahead and close this issue?</p>\n</blockquote>",
        "id": 322779325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674335285
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399343282\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@guest271314 if you think that shebang support is the only way to achieve your desired outcome here, then that might make sense. I don't have the bandwidth to look into the issue enough to know whether that's the case, I'm afraid</p>\n</blockquote>",
        "id": 322784170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674339394
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399344997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>W3C banned me so I can't propose anything given your current criteria. I am rather surprised that <code>wasmtime</code> doesn't support shebang. I kept searching after you locked the linked issue and found several issues concerning this limitation.  I have went through all the hoops to download WASI SDK and <code>wasmtime</code> and am not limited. I think it makes sense for you folks to figure out a way to solve this internally.</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/196\">https://github.com/bytecodealliance/wasmtime/issues/196</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/740\">https://github.com/bytecodealliance/wasmtime/issues/740</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/196\">https://github.com/bytecodealliance/wasmtime/issues/196</a></li>\n</ul>\n</blockquote>",
        "id": 322785189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674340184
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399345437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>For reference I'm trying to help them over at <a href=\"https://github.com/guest271314/native-messaging-c/pull/2\">https://github.com/guest271314/native-messaging-c/pull/2</a>. Maybe it would make sense to close this issue and if the debugging over at there shows a concrete bug in wasmtime or a fetaure request that is reasonably likely to be accepted, a new issue could be opened focused on just this?</p>\n</blockquote>",
        "id": 322785396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674340331
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399347271\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@bjorn3 Sure. I just anticipated 19MB <code>wasmtime</code> and the breadth of WASI SDK to handle these cases. </p>\n</blockquote>",
        "id": 322786303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674340994
    },
    {
        "content": "<p>guest271314 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>I downloaded the WASI SDK and <code>wasmtime</code>. I then compiled working C Native Messaging host <a href=\"https://github.com/guest271314/native-messaging-c\">https://github.com/guest271314/native-messaging-c</a> to WASM, with and without <code>--sysroot</code> option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.0</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">-</span><span class=\"n\">messaging</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime run /path/to/nm_wasm.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">nm_wasm</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://nm_wasm.sh\">nm_wasm.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime nm_wasm.cwasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I then used <code>wasm2wat</code> to try to run the module that way, first testing with hello demo</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env wasmtime</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vectors</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">fd_write</span><span class=\"w\"> </span><span class=\"n\">is</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"n\">Descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Returns</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_unstable\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trailing</span><span class=\"w\"> </span><span class=\"n\">newline</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">appear</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"hello world</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">io</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_base</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"p\">.</span><span class=\"n\">iov_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hello</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$fd_write</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">file_descriptor</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">iovs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">iovs_len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">printing</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iov</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">nwritten</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"w\"> </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Discard</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">'</span><span class=\"na\">re</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">demo</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span>#<span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and after the script exited I searched and located <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3715\">https://github.com/bytecodealliance/wasmtime/issues/3715</a> then tried </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/sh</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">__END__</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_close\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_close</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_fdstat_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_fdstat_get</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_read\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_seek\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_seek</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t5</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_fd_write</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t4</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t6</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t7</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail. See <a href=\"https://github.com/WebAssembly/wasi-filesystem/discussions/82\">https://github.com/WebAssembly/wasi-filesystem/discussions/82</a>.</p>\n<p>Native Messaging protocol is initiated from the browser. The host reads input from the browser as stdin, stdout from the host is sent to the client browser. See <a href=\"https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-host-protocol\">Native messaging protocol</a>; and MDN's <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">Native Messaging</a>.</p>\n<p>Notice how we can use shebang line in a .js file where <code>#</code> is not the beginning of  a comment in JavaScript - and Python .py file. I use shebang line in QuickJS, Deno, Bun, Node.js - and Python Native Messaging hosts.</p>\n<p>Why can't <code>wasmtime</code> have the option to recognize that we intend to execute the code below the shebang line and not self-execute the same file starting at the beginning of the script - just skip to the next line then execute the script body?</p>\n<p>Not sure how to solve this given lack of shebang support and inability to utilize <code>/usr/bin/env</code> with <code>S</code> option.</p>\n<p>Asking for help to achieve the requirement. Thanks.</p>\n</blockquote>",
        "id": 322786304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674340994
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399371091\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@tschneidereit @bjorn3 @JoeStrout</p>\n<p>Solved.</p>\n<p>I think the install script </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//wasmtime.dev/install.sh -sSf | bash</span>\n</code></pre></div>\n<p>sets <code>wasmtime</code> in <code>PATH</code> only for local terminal, not system wide. So when we use something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime ...</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>env</code> is not finding <code>wasmtime</code>, e.g., </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">su</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">help</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We need to use the full path to the <code>wasmtime</code> executable, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env bash</span><span class=\"w\"></span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S /home/user/.wasmtime/bin/wasmtime run nm_c.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or more directly where we write the executable to the directory where we intent to use it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/wasmtime/bin/wasmtime run nm_c.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For completeness I also tested using WAT in the shell script using \"approach 1\" from <a href=\"https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/\">https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/</a>, again, where I for this test just copied <code>wasmtime</code> from <code>~/.wasmtime/bin</code> to the directory I am using the executable in </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/bin/bash</span><span class=\"w\"></span>\n\n<span class=\"n\">script</span><span class=\"o\">='</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">'%</span><span class=\"n\">s</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"s\">\"$script\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 322797230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674349921
    },
    {
        "content": "<p>guest271314 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399371091\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@tschneidereit @bjorn3 @JoeStrout</p>\n<p>Solved.</p>\n<p>I think the install script </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//wasmtime.dev/install.sh -sSf | bash</span>\n</code></pre></div>\n<p>sets <code>wasmtime</code> in <code>PATH</code> only for local terminal, not system wide. So when we use something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime ...</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>env</code> is not finding <code>wasmtime</code>, e.g., </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">su</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">help</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We need to use the full path to the <code>wasmtime</code> executable, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env bash</span><span class=\"w\"></span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or more directly where we write the executable to the directory where we intent to use it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S ./wasmtime run nm_c.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For completeness I also tested using WAT in the shell script using \"approach 1\" from <a href=\"https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/\">https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/</a>, again, where I for this test just copied <code>wasmtime</code> from <code>~/.wasmtime/bin</code> to the directory I am using the executable in </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/bin/bash</span><span class=\"w\"></span>\n\n<span class=\"n\">script</span><span class=\"o\">='</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">'%</span><span class=\"n\">s</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"s\">\"$script\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 322797625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674350208
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399393973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>Note, the Bash process substitution approach does not kill <code>wasmtime</code> whrn the Native Messaging host exits.</p>\n</blockquote>",
        "id": 322804793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674357342
    },
    {
        "content": "<p>guest271314 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399371091\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@tschneidereit @bjorn3 @JoeStrout</p>\n<p>Solved.</p>\n<p>I think the install script </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//wasmtime.dev/install.sh -sSf | bash</span>\n</code></pre></div>\n<p>sets <code>wasmtime</code> in <code>PATH</code> only for local terminal, not system wide. So when we use something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env -S wasmtime ...</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>env</code> is not finding <code>wasmtime</code>, e.g., </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">su</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">help</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime</span>: <span class=\"nc\">command</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We need to use the full path to the <code>wasmtime</code> executable, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/usr/bin/env bash</span><span class=\"w\"></span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">user</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">nm_c</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or more directly where we write the executable to the directory where we intent to use it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!wasmtime nm_c.wasm</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!wasmtime nm_c_wasm.wat</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For completeness I also tested using WAT in the shell script using \"approach 1\" from <a href=\"https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/\">https://www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/</a>, again, where I for this test just copied <code>wasmtime</code> from <code>~/.wasmtime/bin</code> to the directory I am using the executable in </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/bin/bash</span><span class=\"w\"></span>\n\n<span class=\"n\">script</span><span class=\"o\">='</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">'%</span><span class=\"n\">s</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"s\">\"$script\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 322864140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674396538
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399638188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>The workaround so far for running <code>wasmtime</code> with WAT in the same file is using a separate script to terminate <code>wasmtime</code> executable when the Native Messaging host exits</p>\n<p><a href=\"http://nm_c_wat.sh\">nm_c_wat.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/bin/bash</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//www.reddit.com/r/bash/comments/10i09se/comment/j5blsrw/</span>\n\n<span class=\"n\">script</span><span class=\"o\">='</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">'</span><span class=\"w\"></span>\n\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">kill_wasmtime</span><span class=\"p\">.</span><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"></span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"o\">'%</span><span class=\"n\">s</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"s\">\"$script\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"http://kill_wasmtime.sh\">kill_wasmtime.sh</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#!/bin/bash</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">pgrep</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">nm_c_wat</span><span class=\"p\">.</span><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">null</span><span class=\"w\"></span>\n<span class=\"kr\">do</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">done</span><span class=\"w\"></span>\n<span class=\"n\">killall</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 322917835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674429585
    },
    {
        "content": "<p>guest271314 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614#issuecomment-1399667983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5614\">issue #5614</a>:</p>\n<blockquote>\n<p>@tschneidereit @JoeStrout See <a href=\"https://github.com/WebAssembly/spec/issues/1581\">https://github.com/WebAssembly/spec/issues/1581</a></p>\n</blockquote>",
        "id": 322924627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1674435686
    }
]