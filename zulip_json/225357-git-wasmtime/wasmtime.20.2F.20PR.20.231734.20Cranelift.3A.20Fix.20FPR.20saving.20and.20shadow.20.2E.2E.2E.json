[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a> from <code>fix-saved-fprs</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR fixes both how FPR callee-saved registers are saved and how the<br>\nshadow space allocation occurs when laying out the stack for Windows x64<br>\ncalling convention.</p>\n<p>Importantly, this PR removes the compiler limitation of stack size for<br>\nWindows x64 that was imposed because FPR saves previously couldn't always be<br>\nrepresented in the unwind information.</p>\n<p>The FPR saves are now performed without using stack slots, much like how the<br>\ncallee-saved GPRs are saved. The total CSR space is given to <code>layout_stack</code> so<br>\nthat it is included in the frame size and to offset the layout of spills and<br>\nexplicit slots.</p>\n<p>The FPR saves are now done via an RSP offset (post adjustment) and they always<br>\nfollow the GPR saves on the stack. A simpler calculation can now be made to<br>\ndetermine the proper offsets of the FPR saves for representing the unwind<br>\ninformation.</p>\n<p>Additionally, the shadow space is no longer treated as an incoming argument,<br>\nbut an explicit stack slot that gets laid out at the lowest address possible in<br>\nthe local frame. This prevents <code>layout_stack</code> from putting a spill or explicit<br>\nslot in this reserved space. In the future, <code>layout_stack</code> should take<br>\nadvantage of the <em>caller-provided</em> shadow space for spills, but this PR does<br>\nnot attempt to address that.</p>\n<p>The shadow space is now omitted from the local frame for leaf functions.</p>\n<p>Fixes #1728.<br>\nFixes #1587.<br>\nFixes #1475.</p>\n</blockquote>",
        "id": 198266311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590014366
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a>.</p>",
        "id": 198266312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590014366
    },
    {
        "content": "<p><strong>peterhuene</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/iximeow\">iximeow</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a>.</p>",
        "id": 198266313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590014366
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416466219\">PR Review</a>.</p>",
        "id": 198376659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416466219\">PR Review</a>.</p>",
        "id": 198376660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428894522\">PR Review Comment</a>:</p>\n<blockquote>\n<p>To be correct for cases where <code>isa.pointer_bytes() != 8</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>        csr_stack_size = (csr_stack_size + 15) &amp; !15;\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198376661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428905072\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Being <code>winx64.rs</code>, I think the assumption that a GPR is half the size of an FPR is workable, but do you think that's worth noting in this comment?</p>\n</blockquote>",
        "id": 198376662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428895608\">PR Review Comment</a>:</p>\n<blockquote>\n<p>since <code>local_stack_size</code> ought to be 16-byte aligned, shouldn't <code>stack_size &amp; isa.pointer_bytes()</code> always be zero? It seems like we could lift this up to an assert on function entry, if so.</p>\n</blockquote>",
        "id": 198376663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428906126\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Any particular reason to check the rest of the function? Seems independent of making sure there's an <code>ss0</code> and that this compiles.</p>\n</blockquote>",
        "id": 198376664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428906406\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Likewise, I'm not sure what the checks on this function body are intending to test past the <code>ss0</code> line?</p>\n</blockquote>",
        "id": 198376665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428907770\">PR Review Comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n</blockquote>",
        "id": 198376666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590094736
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416495925\">PR Review</a>.</p>",
        "id": 198378184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095538
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428917298\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>stack_size</code> (i.e. the adjustment to RSP) is not 16-byte aligned as it might be aligning RSP back to a 16-byte alignment.</p>\n<p>Take for instance a prologue in a non-leaf function that pushes the frame pointer and then saves a single GPR.  The push of the frame pointer realigned the stack from the push of return address, but the push of the GPR causes a misalignment.  The local stack allocation will be +0x8 to account for that, which means <code>stack_size</code> itself is not a multiple of 16, but 8.</p>\n<p>This lines cause causes the offset to be +0x8 when <code>stack_size</code> itself is +0x8 so that it gets subtracted out from the final offset from the post-adjusted RSP.  The end result is that the offset should always be a multiple of 16 from a post-adjusted 16-byte aligned RSP.</p>\n</blockquote>",
        "id": 198378185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095538
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416498290\">PR Review</a>.</p>",
        "id": 198378572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095778
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428919079\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That said, I'm totally open to calculating this in a clearer way if you have any suggestions!</p>\n</blockquote>",
        "id": 198378573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095778
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416498948\">PR Review</a>.</p>",
        "id": 198378666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095849
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428919565\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think that's clearer and congruent with other places where we round up for alignment.  I'll change.</p>\n</blockquote>",
        "id": 198378667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095849
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416499895\">PR Review</a>.</p>",
        "id": 198378835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095940
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428920326\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I can add a comment.</p>\n</blockquote>",
        "id": 198378836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590095940
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416501424\">PR Review</a>.</p>",
        "id": 198379086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096086
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428921586\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wanted to check the prologues and epilogues for correctness in each function.  The intermediate instructions I'm not as concerned about, although I personally don't mind them being checked unless we think there's a likelihood that this will cause a maintenance headache for these tests.</p>\n</blockquote>",
        "id": 198379087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096086
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416501975\">PR Review</a>.</p>",
        "id": 198379195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096139
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428922007\">PR Review Comment</a>:</p>\n<blockquote>\n<p>See reply above.  Do you think it would be best if we simply limited it to just the stack layout and prologue/epilogue instructions?</p>\n</blockquote>",
        "id": 198379196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096139
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416502254\">PR Review</a>.</p>",
        "id": 198379223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096165
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428922228\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It turns out asserting things in tests is good <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>.</p>\n</blockquote>",
        "id": 198379225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096166
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428917298\">PR Review Comment</a>.</p>",
        "id": 198379353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096244
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416513860\">PR Review</a>.</p>",
        "id": 198380916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097327
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428932310\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That example helps, thanks. How's <code>% types::F64X2.bytes()</code> instead of <code>&amp; isa.pointer_bytes()</code> sound to you? That picks an aligned offset for the type to store, ought to work for <code>isa.pointer_bytes() == 4</code>, and makes extension for ymm preservation (if we get to that in the future) clearer (they don't _need_ 32-byte alignment, but iiuc are somewhat penalized for misaligned access)</p>\n</blockquote>",
        "id": 198380917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097327
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416515374\">PR Review</a>.</p>",
        "id": 198381241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097503
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428933498\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah I'm just thinking of maintenance for these. But I've convinced myself it's actually good to extend these checks here: I don't think we explicitly tested fastcall gpr preservation works as expected anywhere, and these aren't really liable to change in a surprising way.</p>\n</blockquote>",
        "id": 198381243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097504
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416515526\">PR Review</a>.</p>",
        "id": 198381268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097523
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428933643\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(as above, now convinced that these are Good Actually)</p>\n</blockquote>",
        "id": 198381269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590097523
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428917298\">PR Review Comment</a>.</p>",
        "id": 198385696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590100273
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428917298\">PR Review Comment</a>.</p>",
        "id": 198385710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590100282
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416537771\">PR Review</a>.</p>",
        "id": 198385976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590100435
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428951459\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Works for me.  I'll get that changed!</p>\n</blockquote>",
        "id": 198385977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590100435
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a> from <code>fix-saved-fprs</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR fixes both how FPR callee-saved registers are saved and how the<br>\nshadow space allocation occurs when laying out the stack for Windows x64<br>\ncalling convention.</p>\n<p>Importantly, this PR removes the compiler limitation of stack size for<br>\nWindows x64 that was imposed because FPR saves previously couldn't always be<br>\nrepresented in the unwind information.</p>\n<p>The FPR saves are now performed without using stack slots, much like how the<br>\ncallee-saved GPRs are saved. The total CSR space is given to <code>layout_stack</code> so<br>\nthat it is included in the frame size and to offset the layout of spills and<br>\nexplicit slots.</p>\n<p>The FPR saves are now done via an RSP offset (post adjustment) and they always<br>\nfollow the GPR saves on the stack. A simpler calculation can now be made to<br>\ndetermine the proper offsets of the FPR saves for representing the unwind<br>\ninformation.</p>\n<p>Additionally, the shadow space is no longer treated as an incoming argument,<br>\nbut an explicit stack slot that gets laid out at the lowest address possible in<br>\nthe local frame. This prevents <code>layout_stack</code> from putting a spill or explicit<br>\nslot in this reserved space. In the future, <code>layout_stack</code> should take<br>\nadvantage of the <em>caller-provided</em> shadow space for spills, but this PR does<br>\nnot attempt to address that.</p>\n<p>The shadow space is now omitted from the local frame for leaf functions.</p>\n<p>Fixes #1728.<br>\nFixes #1587.<br>\nFixes #1475.</p>\n</blockquote>",
        "id": 198388232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590101749
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a> from <code>fix-saved-fprs</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR fixes both how FPR callee-saved registers are saved and how the<br>\nshadow space allocation occurs when laying out the stack for Windows x64<br>\ncalling convention.</p>\n<p>Importantly, this PR removes the compiler limitation of stack size for<br>\nWindows x64 that was imposed because FPR saves previously couldn't always be<br>\nrepresented in the unwind information.</p>\n<p>The FPR saves are now performed without using stack slots, much like how the<br>\ncallee-saved GPRs are saved. The total CSR space is given to <code>layout_stack</code> so<br>\nthat it is included in the frame size and to offset the layout of spills and<br>\nexplicit slots.</p>\n<p>The FPR saves are now done via an RSP offset (post adjustment) and they always<br>\nfollow the GPR saves on the stack. A simpler calculation can now be made to<br>\ndetermine the proper offsets of the FPR saves for representing the unwind<br>\ninformation.</p>\n<p>Additionally, the shadow space is no longer treated as an incoming argument,<br>\nbut an explicit stack slot that gets laid out at the lowest address possible in<br>\nthe local frame. This prevents <code>layout_stack</code> from putting a spill or explicit<br>\nslot in this reserved space. In the future, <code>layout_stack</code> should take<br>\nadvantage of the <em>caller-provided</em> shadow space for spills, but this PR does<br>\nnot attempt to address that.</p>\n<p>The shadow space is now omitted from the local frame for leaf functions.</p>\n<p>Fixes #1728.<br>\nFixes #1587.<br>\nFixes #1475.</p>\n</blockquote>",
        "id": 198388410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590101840
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416550120\">PR Review</a>.</p>",
        "id": 198389222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590102356
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#pullrequestreview-416558365\">PR Review</a>.</p>",
        "id": 198391354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590103847
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734#discussion_r428968150\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This should actually check if a frame pointer is being used, even though we currently always use one.</p>\n<p>If a frame pointer is not used, then the offsets for the FPRs saves should not be altered as they already have the correct offset from RSP.</p>\n<p>I'll quickly fix this.</p>\n</blockquote>",
        "id": 198391355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590103847
    },
    {
        "content": "<p>peterhuene updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a> from <code>fix-saved-fprs</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR fixes both how FPR callee-saved registers are saved and how the<br>\nshadow space allocation occurs when laying out the stack for Windows x64<br>\ncalling convention.</p>\n<p>Importantly, this PR removes the compiler limitation of stack size for<br>\nWindows x64 that was imposed because FPR saves previously couldn't always be<br>\nrepresented in the unwind information.</p>\n<p>The FPR saves are now performed without using stack slots, much like how the<br>\ncallee-saved GPRs are saved. The total CSR space is given to <code>layout_stack</code> so<br>\nthat it is included in the frame size and to offset the layout of spills and<br>\nexplicit slots.</p>\n<p>The FPR saves are now done via an RSP offset (post adjustment) and they always<br>\nfollow the GPR saves on the stack. A simpler calculation can now be made to<br>\ndetermine the proper offsets of the FPR saves for representing the unwind<br>\ninformation.</p>\n<p>Additionally, the shadow space is no longer treated as an incoming argument,<br>\nbut an explicit stack slot that gets laid out at the lowest address possible in<br>\nthe local frame. This prevents <code>layout_stack</code> from putting a spill or explicit<br>\nslot in this reserved space. In the future, <code>layout_stack</code> should take<br>\nadvantage of the <em>caller-provided</em> shadow space for spills, but this PR does<br>\nnot attempt to address that.</p>\n<p>The shadow space is now omitted from the local frame for leaf functions.</p>\n<p>Fixes #1728.<br>\nFixes #1587.<br>\nFixes #1475.</p>\n</blockquote>",
        "id": 198392444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590104892
    },
    {
        "content": "<p>peterhuene merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1734\">PR #1734</a>.</p>",
        "id": 198482117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590174400
    }
]