[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1408881220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 324644925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675094517
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1412417277\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<p>@cfallin regarding signal safety -- I did a verification with the program below, using <code>bl_signal</code> which as far as I can tell doesn't set up an alternative stack.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Signal handler&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"na\">.global</span><span class=\"w\"> </span><span class=\"no\">_start</span><span class=\"w\"></span>\n<span class=\"na\">.align</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n\n<span class=\"nl\">_start:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Signal number, sigint in this case</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#2</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Load address of the handler</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_signal_handler</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Call bsd_signal to register the signal handler</span>\n<span class=\"w\">  </span><span class=\"nf\">bl</span><span class=\"w\"> </span><span class=\"no\">_bsd_signal</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Unalign the sp;</span>\n<span class=\"w\">  </span><span class=\"c1\">;; simulate making space for word-wise pushes</span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Infinite loop;</span>\n<span class=\"c1\">;; simulate waiting</span>\n<span class=\"w\">   </span><span class=\"nl\">loop:</span><span class=\"w\"> </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">  </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">   </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_looping</span><span class=\"w\">   </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#5</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">         </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">   </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                  </span><span class=\"c1\">;; Call service</span>\n<span class=\"w\">   </span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">loop</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Commented out since it will never make it here</span>\n<span class=\"c1\">;; ldp x29, x30, [sp], #16</span>\n<span class=\"c1\">;; ret</span>\n\n<span class=\"nl\">_signal_handler:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">             </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_message</span><span class=\"w\">  </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#15</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">           </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                    </span><span class=\"c1\">;;  Call service</span>\n\n<span class=\"w\">  </span><span class=\"nf\">ldp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">#16</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Terminate the program (for demonstration purposes)</span>\n<span class=\"w\">  </span><span class=\"c1\">;; and to quit the infinite loop</span>\n\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">      </span><span class=\"c1\">;; Return code</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">     </span><span class=\"c1\">;; Service code</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">              </span><span class=\"c1\">;; Call to terminate</span>\n\n<span class=\"nl\">_message:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Signal handled\\n\"</span><span class=\"w\"></span>\n<span class=\"nl\">_looping:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Loop\\n\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>and the results confirm the theory that SP is aligned when entering the signal handler's frame. The program above runs successfully even though the stack pointer is not aligned to 16 before entering the loop. When the signal handler's code is changed to use an unaligned SP to address memory (e.g. <code>stp x29, x30, [sp, #-24]!</code>) we get a bus error crash as expected. </p>\n</blockquote>",
        "id": 325218698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675271521
    },
    {
        "content": "<p>saulecabrera edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1412417277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<p>@cfallin regarding signal safety -- I did a verification with the program below, using <code>bl_signal</code> which as far as I can tell doesn't set up an alternative stack.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Signal handler&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"na\">.global</span><span class=\"w\"> </span><span class=\"no\">_start</span><span class=\"w\"></span>\n<span class=\"na\">.align</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n\n<span class=\"nl\">_start:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Signal number, sigint in this case</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#2</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Load address of the handler</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_signal_handler</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Call bsd_signal to register the signal handler</span>\n<span class=\"w\">  </span><span class=\"nf\">bl</span><span class=\"w\"> </span><span class=\"no\">_bsd_signal</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Unalign the sp;</span>\n<span class=\"w\">  </span><span class=\"c1\">;; simulate making space for word-wise pushes</span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Infinite loop;</span>\n<span class=\"c1\">;; simulate waiting</span>\n<span class=\"w\">   </span><span class=\"nl\">loop:</span><span class=\"w\"> </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">  </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">   </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_looping</span><span class=\"w\">   </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#5</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">         </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">   </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                  </span><span class=\"c1\">;; Call service</span>\n<span class=\"w\">   </span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">loop</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Commented out since it will never make it here</span>\n<span class=\"c1\">;; ldp x29, x30, [sp], #16</span>\n<span class=\"c1\">;; ret</span>\n\n<span class=\"nl\">_signal_handler:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">             </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_message</span><span class=\"w\">  </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#15</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">           </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                    </span><span class=\"c1\">;;  Call service</span>\n\n<span class=\"w\">  </span><span class=\"nf\">ldp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">#16</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Terminate the program (for demonstration purposes)</span>\n<span class=\"w\">  </span><span class=\"c1\">;; and to quit the infinite loop</span>\n\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">      </span><span class=\"c1\">;; Return code</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">     </span><span class=\"c1\">;; Service code</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">              </span><span class=\"c1\">;; Call to terminate</span>\n\n<span class=\"nl\">_message:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Signal handled\\n\"</span><span class=\"w\"></span>\n<span class=\"nl\">_looping:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Loop\\n\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>and the results confirm the theory that SP is aligned when entering the signal handler's frame. The program above runs successfully even though the stack pointer is not aligned to 16 before entering the loop. If the signal handler's code is changed to use an unaligned SP to address memory (e.g. <code>stp x29, x30, [sp, #-24]!</code>) we get a bus error crash as expected. </p>\n</blockquote>",
        "id": 325219268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675271658
    },
    {
        "content": "<p>saulecabrera edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1412417277\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<p>@cfallin regarding signal safety -- I did a verification with the program below, using <code>bl_signal</code> which as far as I can tell doesn't set up an alternative stack.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Signal handler&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"na\">.global</span><span class=\"w\"> </span><span class=\"no\">_start</span><span class=\"w\"></span>\n<span class=\"na\">.align</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n\n<span class=\"nl\">_start:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Signal number, sigint in this case</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#2</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Load address of the handler</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_signal_handler</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Call bsd_signal to register the signal handler</span>\n<span class=\"w\">  </span><span class=\"nf\">bl</span><span class=\"w\"> </span><span class=\"no\">_bsd_signal</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Unalign the sp;</span>\n<span class=\"w\">  </span><span class=\"c1\">;; simulate making space for word-wise pushes</span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">sub</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#8</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Infinite loop;</span>\n<span class=\"c1\">;; simulate waiting</span>\n<span class=\"w\">   </span><span class=\"nl\">loop:</span><span class=\"w\"> </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">  </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">   </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_looping</span><span class=\"w\">   </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#5</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">   </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">         </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">   </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                  </span><span class=\"c1\">;; Call service</span>\n<span class=\"w\">   </span><span class=\"nf\">b</span><span class=\"w\"> </span><span class=\"no\">loop</span><span class=\"w\"></span>\n\n<span class=\"c1\">;; Commented out since it will never make it here</span>\n<span class=\"c1\">;; ldp x29, x30, [sp], #16</span>\n<span class=\"c1\">;; ret</span>\n\n<span class=\"nl\">_signal_handler:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">stp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#-16</span><span class=\"p\">]!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">             </span><span class=\"c1\">;; Descriptor</span>\n<span class=\"w\">  </span><span class=\"nf\">adr</span><span class=\"w\"> </span><span class=\"no\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">_message</span><span class=\"w\">  </span><span class=\"c1\">;; Message address</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#15</span><span class=\"w\">           </span><span class=\"c1\">;; Length</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#4</span><span class=\"w\">           </span><span class=\"c1\">;; Write</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">                    </span><span class=\"c1\">;;  Call service</span>\n\n<span class=\"w\">  </span><span class=\"nf\">ldp</span><span class=\"w\"> </span><span class=\"no\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">#16</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c1\">;; Terminate the program (for demonstration purposes)</span>\n<span class=\"w\">  </span><span class=\"c1\">;; and to quit the infinite loop</span>\n\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">      </span><span class=\"c1\">;; Return code</span>\n<span class=\"w\">  </span><span class=\"nf\">mov</span><span class=\"w\"> </span><span class=\"no\">x16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">#1</span><span class=\"w\">     </span><span class=\"c1\">;; Service code</span>\n<span class=\"w\">  </span><span class=\"nf\">svc</span><span class=\"w\"> </span><span class=\"mi\">#0</span><span class=\"w\">              </span><span class=\"c1\">;; Call to terminate</span>\n\n<span class=\"nl\">_message:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Signal handled\\n\"</span><span class=\"w\"></span>\n<span class=\"nl\">_looping:</span><span class=\"w\"> </span><span class=\"na\">.ascii</span><span class=\"w\"> </span><span class=\"s\">\"Loop\\n\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>and the results confirm the theory that SP is _correctly_ aligned when entering the signal handler's frame. The program above runs successfully even though the stack pointer is not aligned to 16 before entering the loop. If the signal handler's code is changed to use an unaligned SP to address memory (e.g. <code>stp x29, x30, [sp, #-24]!</code>) we get a bus error crash as expected. </p>\n</blockquote>",
        "id": 325298275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675299095
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1414011441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<p>Ah, that's a really interesting outcome, thanks! Was this on macOS/aarch64 or Linux/aarch64? (I guess we'd want to make sure it's properly handled on both?)</p>\n</blockquote>",
        "id": 325439958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675354947
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652#issuecomment-1414450611\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5652\">issue #5652</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah, that's a really interesting outcome, thanks! Was this on macOS/aarch64 or Linux/aarch64? (I guess we'd want to make sure it's properly handled on both?)</p>\n</blockquote>\n<p>Yeah, tested in both.</p>\n<ul>\n<li>MacOS Ventura 13.2: the linked example in my previous comment is the one I used in Mac.</li>\n<li>For linux: I used <a href=\"https://releases.ubuntu.com/focal/\">Ubuntu 20.04.5</a>. I tweaked the program above to use the right params for syscalls. </li>\n</ul>\n</blockquote>",
        "id": 325508535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675376363
    }
]