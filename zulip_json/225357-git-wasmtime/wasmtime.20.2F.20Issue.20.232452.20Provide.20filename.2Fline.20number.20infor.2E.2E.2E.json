[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-733958731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 217942863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606340512
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-733959628\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can we test on some of whitequark's yowasp stuff?</p>\n</blockquote>\n<p>Some instructions here: <a href=\"https://github.com/YosysHQ/yosys/pull/1483\">https://github.com/YosysHQ/yosys/pull/1483</a></p>\n</blockquote>",
        "id": 217943099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606340673
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-733967502\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>Currently the memory overhead is the size of the dwarf debug information itself, we copy that from the original wasm blob into a side table which is then connected to <code>CompilationArtifacts</code>. That's then copied again to have an independent version living in <code>Store</code>, but this second copy could be removed with an <code>Arc</code> pretty easily (just needs some serde-fu). This is also all pretty easy to turn off, and I currently haven't added a knob to turn it off at all (and opted to not connect it to <code>debug_info</code> just yet because that's off-by-default).</p>\n<p>It looks like I'd have to compile the yosys blob from source, I'll see if I can play around with a few things here and there.</p>\n</blockquote>",
        "id": 217944984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606342115
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-735923679\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>Ok so fiddling with yosys module compilation, looks like yosys is about a 10MB wasm file but has 270MB (ish) of debuginfo. Loading the wasm file (with debuginfo) and retaining it as expected takes about 200MB more of resident memory.  Instantiation would then take another 200 more until the module itself is dropped, freeing one of the blocks.</p>\n<p>In the spirit of having knobs as necessary I went ahead and added a <code>Config</code> option to disable retaining parsed debuginfo. I left it as default-<code>true</code>, however, since I suspect that this is useful enough we'll want it most of the time.</p>\n</blockquote>",
        "id": 218316906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606756743
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-735926555\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>I'm a bit concerned about adding that much potential memory overhead by default :/ I assume it's not possible to instead use pointers into the original wasm file that we then resolve only when needed?</p>\n<p>Assuming so, could we instead disable this by default, but print out instructions for how to enable it, similar to the \"note: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace\" line rustc compiled code prints?</p>\n</blockquote>",
        "id": 218317534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606757054
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-735944088\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>I don't think it's easy to optimize this too much more (apart from the one copy from the module to the store which we could elide with more effort), because unlike with native debuginfo situations we aren't guaranteed to have a disk to store all the pesky debuginfo to read later.</p>\n<p>I think that it should be possible to print out a message, but I'm not sure what it would say. Enabling debuginfo parsing is likely embedding-dependent and would have a different flag on the command line, for example, than it would if it were embedded into a different application. I also think there's some good value from newcomers coming to wasmtime and automatically seeing filenames/line numbers in backtraces without having to do anything. There's always a knob to turn it off it it becomes a pressing isssue, but having a good new-user experience I think is pretty valuable.</p>\n</blockquote>",
        "id": 218321618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606758982
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-735953301\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>We can make <code>Module::from_file</code> remember the file path and lazily re-read the debug info (we could even remember the debug info section offsets in the file to avoid parsing the Wasm again in addition to parsing DWARF).</p>\n<p>In general, using <code>from_file</code> is nice since we can mmap other things directly from the wasm file at a later date without keeping it eagerly in memory (thinking about the data segment lazy + CoW stuff, which would require creating temporary in-memory file descriptors via <code>memfd</code> if we didn't use <code>Module::from_file</code>).</p>\n</blockquote>",
        "id": 218323709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606759994
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-735987838\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>I'm hesitant to get too fancy with the optimizations just yet without a motivating use case, but if you'd prefer I can just turn this off-by-default and do something like hook it up to the CLI flag and call it a day.</p>\n</blockquote>",
        "id": 218332313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606763929
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-736684777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think that it should be possible to print out a message, but I'm not sure what it would say.</p>\n</blockquote>\n<p>I guess I'm thinking about something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASM_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">richer</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">frames</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">0</span>: <span class=\"mh\">0x6c1c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">panic_abort</span>::<span class=\"n\">__rust_start_panic</span>::<span class=\"n\">abort</span>::<span class=\"n\">h2d60298621b1ccbf</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 218451107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606842079
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-736729126\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<blockquote>\n<p>There's always a knob to turn it off it it becomes a pressing isssue, but having a good new-user experience I think is pretty valuable.</p>\n</blockquote>\n<p>I should emphasize that I very much agree with this, yes! Unfortunately this seems like a situation where we have to trade off two dimensions of exactly this. Having the default be to increase memory usage, potentially quite drastically, seems really risky to me, in a similar way to disabling perf optimizations by default. That's why I feel like giving pointers on how to improve the debugging situation would be preferable to eating the overhead by default.</p>\n</blockquote>",
        "id": 218460486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606846485
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-736750388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>Ok, I think using an env var seems pretty reasonable for this too. I've added a commit which makes a few changes. <code>Config</code> how has a tri-state  configuration for parsing debuginfo for wasm backtraces -- enabled, disabled, read an env var. The default is read an env var (the env var being <code>WASM_BACKTRACE_DETAILS</code> and enabling being seeing that to <code>1</code>). This means that backtrace information is disabled by default but can be enabled with an env var. Embedders can also unconditionally enable it or unconditionally disable it.</p>\n<p>The <code>Display for Trap</code> will also print a hint to set the env var, but only when we're in environment variable mode <em>and</em> the original module actually had debug information. Otherwise no hint is printed because it won't do anything.</p>\n</blockquote>",
        "id": 218465497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606848900
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452#issuecomment-736761180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2452\">Issue #2452</a>:</p>\n<blockquote>\n<p>That looks great, thank you! (Not adding a review, because I'm clearly not the right person to review the meat of this PR <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</p>\n</blockquote>",
        "id": 218467960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606850099
    }
]