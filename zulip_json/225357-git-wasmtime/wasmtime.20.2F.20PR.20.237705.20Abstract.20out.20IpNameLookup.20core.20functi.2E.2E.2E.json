[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a> from <code>rylev:lookup-override</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This follows the design outlined in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681\">bytecodealliance/wasmtime#7681</a> for IpNameLookup.</p>\n<p>A new trait <code>IpNameLookup</code> is introduced that factors out the conversion from a <code>String</code> to a list of IP addresses. Another trait, <code>WasiIpNameLookupView</code> is used to configure which concrete type that implements <code>IpNameLookup</code> will be used in the actual IpNameLookup host implementation. Lastly. the <code>SystemIpNameLookup</code> is provided as a default implementation.</p>\n<p>Some questions that might guide tweaks:</p>\n<ul>\n<li>Users are now forced to implement <code>WasiIpNameLookupView</code> - it would be nice if there was a to default to the built in <code>SystemIpNameLookup</code>. If there were default associated types for traits, we could get rid of <code>WasiIpNameLookupView</code> and make <code>ip_name_lookup</code> a function on <code>WasiView</code> that defaults to the the <code>SystemIpNameLookup</code>.  But alas that's not available to us.</li>\n</ul>\n</blockquote>",
        "id": 408960844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703000929
    },
    {
        "content": "<p><strong>rylev</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 408960845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703000929
    },
    {
        "content": "<p><strong>rylev</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 408960846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703000929
    },
    {
        "content": "<p>rylev edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>This follows the design outlined in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681\">bytecodealliance/wasmtime#7681</a> for IpNameLookup.</p>\n<p>A new trait <code>IpNameLookup</code> is introduced that factors out the conversion from a <code>String</code> to a list of IP addresses. Another trait, <code>WasiIpNameLookupView</code> is used to configure which concrete type that implements <code>IpNameLookup</code> will be used in the actual IpNameLookup host implementation. Lastly. the <code>SystemIpNameLookup</code> is provided as a default implementation.</p>\n<p>Some questions that might guide tweaks:</p>\n<ul>\n<li>Users are now forced to implement <code>WasiIpNameLookupView</code> - it would be nice if there was a to default to the built in <code>SystemIpNameLookup</code>. If there were default associated types for traits, we could get rid of <code>WasiIpNameLookupView</code> and make <code>ip_name_lookup</code> a function on <code>WasiView</code> that defaults to the the <code>SystemIpNameLookup</code>.  But alas that's not available to us.</li>\n</ul>\n<p>r? @badeend </p>\n</blockquote>",
        "id": 408960899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703000945
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789211337\">PR review</a>.</p>",
        "id": 408963123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703001626
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431617259\">PR review comment</a>:</p>\n<blockquote>\n<p>With these changes, can <code>network.allow_ip_name_lookup</code> now be removed?</p>\n</blockquote>",
        "id": 408963125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703001626
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789219350\">PR review</a>.</p>",
        "id": 408964031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703001852
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431623299\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm curious; why isn't <code>resolve_addresses</code> placed directly  on <code>WasiIpNameLookupView</code>? Is there something the extra indirection buys us?</p>\n</blockquote>",
        "id": 408964032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703001852
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789231387\">PR review</a>.</p>",
        "id": 408964955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703002128
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431631597\">PR review comment</a>:</p>\n<blockquote>\n<p>It could be potentially. Right now the default is to not allow ip name lookups, so if we remove this, the default will flip. Additionally, the new way to turn off name lookups would be through a trait implementation (i.e., <code>impl IpNameLookup for BlockedIpNameLookup</code> or similar) and not through <code>WasiCtx</code>/<code>WasiCtxBuilder</code>.</p>\n<p>Though it's probably somewhat confusing to implement <code>WasiIpNameLookupView</code> and then not have name lookups work because you forgot to flip the bit on <code>WasiCtx</code>.</p>\n<p>Perhaps we remove the <code>allow_ip_name_lookup</code> and provide an additional implementation of <code>IpNameLookup</code>: <code>BlockedIpNameLookup</code> so that users can easily turn off IP name lookup if they like. Thoughts?</p>\n</blockquote>",
        "id": 408964956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703002128
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789233847\">PR review</a>.</p>",
        "id": 408965220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703002206
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431633230\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure it gives a ton given that we initialize the type that implements <code>IpNameLookup</code> right before we call <code>resolve_addresses</code>. The reason I initially went this direction is that it mirrors how the UDP and TCP implementations will work. I can remove it though. Shall I?</p>\n</blockquote>",
        "id": 408965222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703002206
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 408966293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703002547
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789294758\">PR review</a>.</p>",
        "id": 408970411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703003934
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431672946\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm. Interesting.<br>\nI think the WASI translation layer (<code>preview2/ip_name_lookup.rs</code> in this case) should only depend on a single source of truth: <code>WasiIpNameLookupView</code>. It should not _also_ go peeking into <code>network.allow_ip_name_lookup</code> on its own.</p>\n<p>It might be an idea to provide an additional implementation of <code>IpNameLookup</code> based on <code>WasiCtx</code>, that dynamically checks <code>allowed_network_uses</code>. This could supersede the <code>BlockedIpNameLookup</code> you suggested<br>\n</p>\n</blockquote>",
        "id": 408970412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703003934
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789319344\">PR review</a>.</p>",
        "id": 408975468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703004609
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431687644\">PR review comment</a>:</p>\n<blockquote>\n<p>Alright. Was just curious.<br>\nNo strong preference</p>\n</blockquote>",
        "id": 408975470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703004610
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1789387990\">PR review</a>.</p>",
        "id": 408984083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703006893
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431731216\">PR review comment</a>:</p>\n<blockquote>\n<p>This does have the downside that the WasiCtx setting can be ignored by users. If their implementation of <code>IpNameLookup</code> doesn't check for <code>allowed_network_uses</code>, that option will simply be ignored. I guess it seems fine that the user can ignore that option (they're the ones setting it anyway), but it does seem somewhat error prone.  </p>\n</blockquote>",
        "id": 408984085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703006893
    },
    {
        "content": "<p>rylev edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1431731216\">PR review comment</a>.</p>",
        "id": 408984165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703006927
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 408984189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703006937
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1863265128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>All in all, looks good to me <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> </p>\n</blockquote>",
        "id": 408991576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703009761
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 409001285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703013603
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 411189741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704375145
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1877127068\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>@badeend @alexcrichton </p>\n<p>I've moved the implementation towards having a single <code>WasiNetworkView</code> trait where all network based overrides will be implemented. I'm happier with this solution than the previous <code>IpNameLookupView</code> version, but I'm still not convinced we've arrived at a good solution. </p>\n<p>The current solution has the following charactertistics:</p>\n<ul>\n<li>Two new methods on <code>WasiView</code>: <code>network_view</code> and <code>network_view_mut</code> which return references to a <code>dyn WasiNetworkView</code><ul>\n<li>This prevents all the methods necessarily being on <code>WasiView</code> which might get crowded over time. It also makes it easy for users who want to use an off-the-shelf solution to get implement 2 methods instead of the N methods <code>WasiNetworkView</code> will have.</li>\n<li>The use of dynamic dispatch is new to WasiView but seems appropriate here.</li>\n</ul>\n</li>\n<li>The various implementors in Wasmtime of <code>WasiView</code> gain a new field with <code>SystemNetwork</code> (the default implementation of  <code>WasiNetworkView</code>)</li>\n</ul>\n<p>I would said, we move forward with this for now and we can adjust as we add TCP and UDP support (and of course continue to evolve over time). Thoughts?</p>\n</blockquote>",
        "id": 411192252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704376271
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804605051\">PR review</a>.</p>",
        "id": 411225595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704387217
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804605051\">PR review</a>.</p>",
        "id": 411225596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704387217
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442025675\">PR review comment</a>:</p>\n<blockquote>\n<p>This might be best to model as an <code>async</code> function rather than returning an <code>AbortOnDropJoinHandle</code>?</p>\n</blockquote>",
        "id": 411225597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704387218
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442026887\">PR review comment</a>:</p>\n<blockquote>\n<p>(then it might be neat to have default implementations of <code>fn network_view</code> perhaps?)</p>\n</blockquote>",
        "id": 411225598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704387218
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442026522\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps manifest as a <code>impl WasiNetworkView for WasiCtx</code> to avoid a second type?</p>\n</blockquote>",
        "id": 411225599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704387218
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804689412\">PR review</a>.</p>",
        "id": 411233190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704390164
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442077093\">PR review comment</a>:</p>\n<blockquote>\n<p>This is indeed very annoying... The value returned from <code>resolve_address</code> must be <code>Send + Sync</code> as it is used in <code>ResolveAddressStream</code> which impls <code>Subscribe</code> which requires the type implementing it to be <code>Send + Sync</code>.</p>\n<p>The <code>#[async_trait]</code> macro puts a <code>Send</code> bound on the return type but not <code>Sync</code> and there is no way to instruct it to do so. We could move to using <code>Box&lt;dyn Future&gt;</code> but that means we loose the developer experience of <code>async_trait</code>. We could potentially move to using <code>impl Future</code> but that requires the latest version of Rust, and I'm not sure if that's ok.</p>\n</blockquote>",
        "id": 411233191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704390164
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 411234948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704390918
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804708783\">PR review</a>.</p>",
        "id": 411234985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704390936
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442088533\">PR review comment</a>:</p>\n<blockquote>\n<p>Great idea!</p>\n</blockquote>",
        "id": 411234987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704390936
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 411239047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704392633
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804917202\">PR review</a>.</p>",
        "id": 411256614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704400113
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1804917202\">PR review</a>.</p>",
        "id": 411256615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704400113
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442216672\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be removed in lieu of implementing <code>WasiNetworkView for WasiCtx</code> itself? (given that <code>WasiCtx</code> is needed to create this structure anyway it may not buy a whole lot)</p>\n</blockquote>",
        "id": 411256616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704400113
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442222783\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm that's true, and yeah I see how there's no great way to manage this right now.</p>\n<p>I suppose this can stay for now, but I'm still worried that this will inevitably cause some pain down the road. The best alternative I can think of is to return a <code>oneshot::Receiver&lt;T&gt;</code> instead but that's still pretty cumbersome to work with and wouldn't work great here.</p>\n</blockquote>",
        "id": 411256617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704400113
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1805768647\">PR review</a>.</p>",
        "id": 411351483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704453500
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442758209\">PR review comment</a>:</p>\n<blockquote>\n<p>We could take a page out of <code>WasiHttpView</code>'s playbook and have the function return a <code>wasmtime::Result&lt;Resource&lt;ResolveAddressStream&gt;&gt;</code> just like <code>WasiHttpView::send_request</code> returns a <code>wasmtime::Result&lt;Resource&lt;HostFutureIncomingResponse&gt;&gt;</code>. I don't really love this either, but at least it's consistent?</p>\n</blockquote>",
        "id": 411351484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704453500
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1805772400\">PR review</a>.</p>",
        "id": 411351870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704453677
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1442760647\">PR review comment</a>:</p>\n<blockquote>\n<p>If a user wants to have some logic where they conditionally switch between either their own network implementation and <code>SystemNetwork</code>, they need some way of constructing the <code>SystemNetwork</code>. Without this constructor, they would not be able to do so. We could do the following: </p>\n<ul>\n<li>make all fields of <code>SystemNetwork</code> public</li>\n<li>Make the constructor just take a simple <code>bool</code> instead of a <code>WasiCtx</code></li>\n<li>Leave it as is</li>\n</ul>\n<p>I think I'd be most in favor of the last two options.</p>\n</blockquote>",
        "id": 411351871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704453677
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1879673755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>Having thought about it some more I would like to offer one more suggestion. See code below.<br>\nThis touches multiple discussions above, so tagging @alexcrichton.</p>\n<p>The main difference is that this setup doesn't modify WasiView at all, but instead dispatches through WasiCtx::network</p>\n<hr>\n<blockquote>\n<p>@rylev: This does have the downside that the WasiCtx setting can be ignored by users.</p>\n</blockquote>\n<p>In setup below that can't happen.</p>\n<hr>\n<p>The strict separation between the \"System<em>\" and \"Default</em>\" structs below might be overkill for this PR because of the relative trivial \"System<em>\" and \"Default</em>\" implementations. However, for TCP/UDP sockets the implementation won't be so trivial anymore.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Trait for any WASI-compliant network implementation.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_addresses</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// fn new_tcp_socket(family) -&gt; ...</span>\n<span class=\"w\">    </span><span class=\"c1\">// fn new_udp_socket(family) -&gt; ...</span>\n<span class=\"p\">}</span>\n\n\n\n\n<span class=\"sd\">/// A WASI-compliant \"base\" implementation.</span>\n<span class=\"sd\">/// Without any opinions on how to do filtering, permission checks or whatever.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">SystemNetwork</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SystemNetwork</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// Probably no parameters</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SystemNetwork</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_addresses</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// Perform the syscalls without any additional permission checks</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n\n\n<span class=\"sd\">/// A \"good enough\" default implementation for Wasmtime users, _with_ permission checks.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">DefaultNetwork</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sys</span>: <span class=\"nc\">SystemNetwork</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">allowed</span>: <span class=\"kt\">bool</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">DefaultNetwork</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Whatever parameters we want.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Currently just a simple boolean, but could be extended to any</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">allowed</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DefaultNetwork</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_addresses</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">allowed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">resolve_addresses</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">PermissionDenied</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">random</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">RngCore</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">insecure_random</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">RngCore</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">insecure_random_seed</span>: <span class=\"kt\">u128</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">wall_clock</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">HostWallClock</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">monotonic_clock</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">HostMonotonicClock</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">env</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">preopens</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Dir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">stdin</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">StdinStream</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">stdout</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">StdoutStream</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">stderr</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">StdoutStream</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Remove `socket_addr_check`</span>\n<span class=\"w\">    </span><span class=\"c1\">// Remove `allowed_network_uses`</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Add:</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">network</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WasiCtxBuilder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// (...)</span>\n\n<span class=\"w\">    </span><span class=\"n\">network</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// (...)</span>\n<span class=\"w\">            </span><span class=\"n\">network</span>: <span class=\"nc\">DefaultNetwork</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"cm\">/*allowed: */</span><span class=\"kc\">false</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">allow_network</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enable</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">network</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefaultNetwork</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">enable</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">custom_network</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">net</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Network</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">network</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">net</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 411505844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704545590
    },
    {
        "content": "<p>badeend submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1807498021\">PR review</a>.</p>",
        "id": 411517707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704556960
    },
    {
        "content": "<p>badeend created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1443792308\">PR review comment</a>:</p>\n<blockquote>\n<p>Of all the options mentioned so far, the <code>Box&lt;dyn Future&gt;</code> route seems the least worst to me.</p>\n<p>The fact that we currently use a quick&amp;dirty implementation using spawn_blocking should be an implementation detail of <code>SystemNetwork</code></p>\n</blockquote>",
        "id": 411517708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704556960
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1809458214\">PR review</a>.</p>",
        "id": 411766411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729314
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1444888757\">PR review comment</a>:</p>\n<blockquote>\n<p>Returning a <code>Resource&lt;ResolveAddressStream&gt;</code> would be nice yeah but it seems like that would have all the same design questions around \"how do you actually create one of those\". </p>\n<p>Although as I say that we could perhaps get around <code>async trait</code> by having something like <code>fn from_future&lt;T: Future + Send + Sync + 'static&gt; (...)</code> on the <code>ResolveAddressStream</code> type. That way you could pass an <code>async</code> block which would have bounds generated correctly and additioanlly the handle from <code>spawn_blocking</code> could also be passed in? That way we might be able to avoid async traits altogether and rely entirely on that.</p>\n</blockquote>",
        "id": 411766413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729314
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1809466247\">PR review</a>.</p>",
        "id": 411766859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729437
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1444893080\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm I'm not sure I understand? Given <code>impl WasiNetworkView for WasiCtx</code> then if users are themselves implementing <code>WasiNetworkView</code> for their own custom type then conditionally using the default behavior would be calling <code>self.ctx.the_method_name()</code> so I'm not sure where the need for having this separate <code>SystemNetwork</code> structure arises?</p>\n</blockquote>",
        "id": 411766861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729437
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1881361254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>@badeend your sketch makes sense yeah, but my thoughts at <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7694#issuecomment-1858351478\">https://github.com/bytecodealliance/wasmtime/issues/7694#issuecomment-1858351478</a> showcase how something like that breaks down unless all callbacks about configuration go through <code>trait Network</code>, so for example we'd also need to route IP address checks through that trait as well. (not a problem of course, just pointing out that once things are behind a trait everything needs to be behind that trait to share state between callbacks).</p>\n<p>Otherwise though I think it'd be reasonable to configure a trait object on <code>WasiCtx</code> vs returning a <code>&amp;mut dyn Trait</code> from <code>WasiView</code> (although it having a default impl returning <code>self.ctx_mut()</code> I think is pretty nifty and makes it almost hidden.</p>\n</blockquote>",
        "id": 411768054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729773
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1809520776\">PR review</a>.</p>",
        "id": 411770665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704730635
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1444938415\">PR review comment</a>:</p>\n<blockquote>\n<p>Thinking about this more, returning <code>Resource&lt;ResolveAddressStream&gt;</code> would mean that the implementor would have to also implement <code>WasiCtx</code> or otherwise have multiple access to the <code>ResourceTable</code>. Right now we don't require that from the implementor of <code>WasiNetworkView</code>, and I'm not sure we want to.</p>\n</blockquote>",
        "id": 411770666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704730635
    },
    {
        "content": "<p>rylev submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1809543737\">PR review</a>.</p>",
        "id": 411772253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704731147
    },
    {
        "content": "<p>rylev created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1444957672\">PR review comment</a>:</p>\n<blockquote>\n<p>You're right that <code>SystemNetwork</code> isn't strictly necessary. It felt nice to have a distinct type that lives in the <code>ip_name_lookup</code> module that can handle name lookups, but you're right that we can just implement that logic directly on <code>WasiCtx</code>. It does make the code a wee bit simpler.</p>\n</blockquote>",
        "id": 411772256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704731147
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1809568320\">PR review</a>.</p>",
        "id": 411774107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704731748
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1444975284\">PR review comment</a>:</p>\n<blockquote>\n<p><code>ResolveAddressStream</code> itself could be returned though leaving the table management bits to the glue?</p>\n</blockquote>",
        "id": 411774109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704731748
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1881513252\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>I like @badeend's suggestion. I initially shared the same concern that @alexcrichton pointed out, but I think it should be relatively easy for users to implement the <code>Network</code> trait by delegating all the parts they don't care about to <code>SystemNetwork</code> or <code>DefaultNetwork</code> and only changing what they do care about. The only issue I can see with this is that if the <code>Network</code> trait grows large (which I think we anticipate it will), then there will be a large amount of boiler plate of delegating <code>Network</code> methods to the <code>SystemNetwork</code> or <code>DefaultNetwork</code>. This could be really annoying. </p>\n</blockquote>",
        "id": 411783397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704734459
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 411787306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704735503
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1881544128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>@alexcrichton @badeend I've pushed a new change that moves more towards @badeend's design as well as changing the return type of <code>resolve_addresses</code> to be a <code>ResolveAddressStream</code>. </p>\n<p>I think the only way for us to be sure about this design is to keep going and implement UDP and TCP on top of it. With that in mind, I think we should merge this PR and continue the design exploration in a follow up. Thoughts?</p>\n</blockquote>",
        "id": 411787543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704735601
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1881739646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<blockquote>\n<p>something like that breaks down unless all callbacks about configuration go through trait Network, so for example we'd also need to route IP address checks through that trait as well.</p>\n</blockquote>\n<p>Correct. In my mind that was exactly the goal of this (and upcoming) PRs. <code>socket_addr_check</code> &amp; <code>allowed_network_uses</code> would most likely be moved to <code>DefaultNetwork</code></p>\n<blockquote>\n<p>I think the only way for us to be sure about this design is to keep going and implement UDP and TCP on top of it.</p>\n</blockquote>\n<p>Agree.</p>\n<blockquote>\n<p>With that in mind, I think we should merge this PR and continue the design exploration in a follow up. Thoughts?</p>\n</blockquote>\n<p>I'm not familiar with wasmtime's release process, but if a release gets cut partway through these changes it could be weird for consumers when e.g. IP lookup &amp; TCP use the Network trait but UDP still uses an old &amp; completely different customization mechanism. I'll leave this up for @alexcrichton <br>\n</p>\n</blockquote>",
        "id": 411807472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704744147
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1811396829\">PR review</a>:</p>\n<blockquote>\n<p>Looks reasonable to me!</p>\n<p>Unless this is particularly urgent though I would personally agree with @badeend in that I'd prefer to see a more complete picture before landing if possible. If this is needed to unblock work I think it's ok to land, but if you're ok working with a fork for now though I think it'd be best to sketch out the other checks you're thinking of implementing to be able to see them altogether at once.</p>\n</blockquote>",
        "id": 411957664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704814036
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#pullrequestreview-1811396829\">PR review</a>:</p>\n<blockquote>\n<p>Looks reasonable to me!</p>\n<p>Unless this is particularly urgent though I would personally agree with @badeend in that I'd prefer to see a more complete picture before landing if possible. If this is needed to unblock work I think it's ok to land, but if you're ok working with a fork for now though I think it'd be best to sketch out the other checks you're thinking of implementing to be able to see them altogether at once.</p>\n</blockquote>",
        "id": 411957665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704814036
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#discussion_r1446237092\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the <code>+ Sized</code> may not be necessary here?</p>\n</blockquote>",
        "id": 411957667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704814036
    },
    {
        "content": "<p>rylev <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1883435908\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>:</p>\n<blockquote>\n<p>I'm fine with not landing this on main. I just think we need to decide which fork/branch is the integration point so that if @badeend and I continue the work, we can bring that all together into one unified branch that will ultimately be merged into main. </p>\n</blockquote>",
        "id": 411975746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704819654
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">PR #7705</a>.</p>",
        "id": 413106791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705395281
    }
]