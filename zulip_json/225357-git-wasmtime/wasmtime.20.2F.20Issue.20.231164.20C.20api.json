[
    {
        "content": "<p>carlokok <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-640067293\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">Issue #1164</a>:</p>\n<blockquote>\n<p>If it's of any interest to anyone, I wrote a C api that allows this.</p>\n<p>api: <a href=\"https://gist.github.com/carlokok/d0d079dba76ee253a1571d58f2e791fb\">https://gist.github.com/carlokok/d0d079dba76ee253a1571d58f2e791fb</a></p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;cranelift.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid cb1(uintptr_t userdata, const char* err, const char* fn) {\n  printf(&quot;Error %s: %s\\n&quot;, fn, err);\n}\n\nvoid cb2(uintptr_t userdata, const char* err, const char* fn) {\n  printf(&quot;Message %s: %s\\n&quot;, fn, err);\n}\n\nvoid cb(uintptr_t userdata, FunctionData* fd)\n{\n  BlockCode entry = cranelift_create_block(fd);\n  BlockCode larger = cranelift_create_block(fd);\n  BlockCode exit = cranelift_create_block(fd);\n\n  cranelift_append_block_params_for_function_params(fd, entry);\n\n  cranelift_switch_to_block(fd, entry);\n\n  ValueCode res[2];\n  cranelift_block_params(fd, entry, res);\n\n  VariableCode a = cranelift_declare_var(fd, TypeI32);\n  cranelift_def_var(fd, a, res[0]);\n\n  VariableCode b = cranelift_declare_var(fd, TypeI32);\n  cranelift_def_var(fd, b, res[1]);\n\n  VariableCode retvar = cranelift_declare_var(fd, TypeI32);\n  cranelift_def_var(fd, retvar, cranelift_iconst(fd, TypeI32, 0));\n\n  cranelift_ins_br_icmp(fd, CraneliftIntCCSignedLessThan, a, b, larger, 0, NULL);\n\n  cranelift_def_var(fd, retvar, cranelift_use_var(fd, a));\n\n  cranelift_ins_jump(fd, exit, 0, NULL);\n\n  cranelift_switch_to_block(fd, larger);\n\n  cranelift_def_var(fd, retvar, cranelift_use_var(fd, b));\n\n  cranelift_ins_jump(fd, exit, 0, NULL);\n\n  cranelift_switch_to_block(fd, exit);\n\n  ValueCode retval = cranelift_use_var(fd, retvar);\n  cranelift_return(fd, 1, &amp;retval);\n\n  cranelift_seal_all_blocks(fd);\n\n\n}\n\nvoid cbp(uintptr_t ud, char* data)\n{\n  printf(&quot;\\n%s\\n&quot;, data);\n}\n\nint main()\n{\n  ModuleData* mod = cranelift_module_new(&quot;x86_64-pc-windows&quot;, &quot;is_pic,enable_simd,enable_atomics,enable_verifier&quot;, &quot;mymodule&quot;, 0, cb1, cb2);\n\n  cranelift_signature_builder_add_param(mod, TypeI32);\n  cranelift_signature_builder_add_param(mod, TypeI32);\n  cranelift_signature_builder_add_result(mod, TypeI32);\n  cranelift_build_function(mod, 0, cb);\n  cranelift_function_to_string(mod, 0, cbp);\n  uint32_t id;\n  cranelift_declare_function(mod, &quot;max&quot;, Export, &amp;id);\n  cranelift_define_function(mod, id);\n\n  uint32_t id2;\n  uint8_t c[4] = { 1,2,3,4 };\n  cranelift_set_data_value(mod, c, 4);\n  cranelift_define_data(mod, &quot;testdata_w&quot;, Export, Writable, 0, &amp;id2);\n  cranelift_assign_data_to_global(mod, id2);\n  cranelift_clear_data(mod);\n\n  cranelift_set_data_value(mod, c, 4);\n  cranelift_define_data(mod, &quot;testdata_r&quot;, Export, None, 0, &amp;id2);\n  cranelift_assign_data_to_global(mod, id2);\n  cranelift_clear_data(mod);\n\n  cranelift_set_data_value(mod, c, 4);\n  cranelift_define_data(mod, &quot;testdata_w2&quot;, Export, Writable, 0, &amp;id2);\n  cranelift_set_data_section(mod, &quot;SEG&quot;, &quot;SEC&quot;);\n  cranelift_assign_data_to_global(mod, id2);\n  //  cranelift_clear_data(mod);\n\n  cranelift_module_emit_object(mod, &quot;c:\\\\projects\\\\test.o&quot;);\n  cranelift_module_delete(mod);\n}\n</code></pre></div>\n\n\n</blockquote>",
        "id": 199976857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591452782
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-640071813\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">Issue #1164</a>:</p>\n<blockquote>\n<p>I think <code>cranelift_block_params</code> should take the expected param count as argument to prevent accidental out-of-bounds memory accesses.</p>\n</blockquote>",
        "id": 199978118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591454581
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-640071987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">Issue #1164</a>:</p>\n<blockquote>\n<p>It would also be nice if <code>cranelift-codegen-meta</code> automatically generated all <code>cranelift_ins_*</code> functions.</p>\n</blockquote>",
        "id": 199978183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591454651
    },
    {
        "content": "<p>carlokok <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164#issuecomment-640072469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1164\">Issue #1164</a>:</p>\n<blockquote>\n<p>agreed :) but if there's no interest or if the interfaces don't want to be tied down then I won't bother. Also this was my very first foray into Rust.</p>\n</blockquote>",
        "id": 199978338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591454856
    }
]