[
    {
        "content": "<p>sehz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300\">issue #4300</a>:</p>\n<blockquote>\n<p>It seem like wasmtime allow Instance to be created with  multiple memories (including shared memory) <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Instance.html#method.new\">https://docs.wasmtime.dev/api/wasmtime/struct.Instance.html#method.new</a>.   Is there examples on how to write Rust WebAssembly code to access those memories? </p>\n</blockquote>",
        "id": 287130997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655944778
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300#issuecomment-1164105841\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300\">issue #4300</a>:</p>\n<blockquote>\n<p>I don't believe LLVM exports the ability to use multiple memories.</p>\n</blockquote>",
        "id": 287158302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655972547
    },
    {
        "content": "<p>Rochet2 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300#issuecomment-1164717249\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300\">issue #4300</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/206238-general/topic/Multiple.20memories.20without.20WAT\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Multiple.20memories.20without.20WAT</a><br>\nIn this topic in Mar 4. 2021 it was said:</p>\n<blockquote>\n<p>wasmtime supports running wat files directly, so that should work</p>\n</blockquote>\n<blockquote>\n<p>Wasmtime should have runtime support for multi-module and the wasm-toolsrepo should have support for the text/binary format as well. I don't personally know of any toolchains which support using or emitting multi-memory at this time. I'm not sure if LLVM has plans to add support for it in the future either.</p>\n</blockquote>\n<p>So you likely need to code directly in WAT and then maybe you can compile that into a module. I do not know if there are advancements in this area since then.</p>\n<p>This may also be interesting: <a href=\"#narrow/stream/223391-wasm/topic/Multi-memory.20.2F.20shared.20memory\">https://bytecodealliance.zulipchat.com/#narrow/stream/223391-wasm/topic/Multi-memory.20.2F.20shared.20memory</a></p>\n<p>When looking into the matter a previously, it looked like LLVM supports multiple memories for some platforms through <code>__attribute__((address_space(N))</code> extension <a href=\"https://clang.llvm.org/docs/AttributeReference.html#address-space\">https://clang.llvm.org/docs/AttributeReference.html#address-space</a><br>\nSee <a href=\"http://openasip.org/user_manual/TCE/node15.html\">http://openasip.org/user_manual/TCE/node15.html</a><br>\nBut Wasm was not yet supported at that point and probably isnt yet either.</p>\n<hr>\n<p>I previously had some ideas on making a separate module that would act as a separate memory area.<br>\nYou could have three modules, where one module is hand written to import the memories of the other modules (and possibly to create its own memory). The hand written module would implement functions for copying memory from one to another and would implement operations to work on the memory directly without copying. This would allow the other two modules to leverage the hand written module to operate on each other's memory or on a shared memory.</p>\n<p>Normal C and Rust and other modules can import the hand written module's functions and call them. Its not ideal, but it is a PoC idea at least. I understand that a similar functionality could be implemented with host functions alone, so without toolchain support the appeal of the PoC isnt high.</p>\n</blockquote>",
        "id": 287227722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656007648
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300#issuecomment-1164789559\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300\">issue #4300</a>:</p>\n<blockquote>\n<p>I think the answers here cover the current state of the space, and otherwise this is more of a toolchain issue than a Wasmtime issue so I'm going to close this.</p>\n</blockquote>",
        "id": 287237464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656012655
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4300\">issue #4300</a>:</p>\n<blockquote>\n<p>It seem like wasmtime allow Instance to be created with  multiple memories (including shared memory) <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Instance.html#method.new\">https://docs.wasmtime.dev/api/wasmtime/struct.Instance.html#method.new</a>.   Is there examples on how to write Rust WebAssembly code to access those memories? </p>\n</blockquote>",
        "id": 287237465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656012655
    }
]