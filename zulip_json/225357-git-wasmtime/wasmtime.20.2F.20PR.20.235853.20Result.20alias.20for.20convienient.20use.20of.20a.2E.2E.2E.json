[
    {
        "content": "<p>rylev opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">PR #5853</a> from <code>result-alias</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\nAs discussed on <a href=\"#narrow/stream/217126-wasmtime/topic/Assumption.20of.20anyhow\">Zulip</a>, the <code>bindgen!</code> macro assumes the usage of <code>anyhow</code>. This adds a type alias to <code>wasmtime</code> for <code>std::result::Result&lt;T, anyhow::Error&gt;</code> that allows users to use <code>wasmtime::Result</code> where a <code>std::result::Result&lt;T, anyhow::Error&gt;</code> is expected. </p>\n<p>In particular, this means that users of <code>bindgen!</code> can use <code>wasmtime::Result</code> when they are implementing an import function. </p>\n<p>One caveat: after making this change, I realized that the <code>bindgen!</code> macro has the <code>trappable_error_type</code> option which could be used to change the error type assume. While some changes need to be made no matter what (as many of the methods generated by the macro still assume <code>anyhow</code> and don't respect that option), we might want to consider not adding this type alias and just making it clearer that users should use the <code>trappable_error_type</code> option if they are not using <code>anyhow</code>.</p>\n<p>r? @alexcrichton </p>\n</blockquote>",
        "id": 329486535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677086652
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1309799395\">PR review</a>.</p>",
        "id": 329489879,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677087493
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1309799395\">PR review</a>.</p>",
        "id": 329489882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677087493
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#discussion_r1114705085\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd add a note saying that the type is identical to <code>anyhow::Result</code> as well</p>\n</blockquote>",
        "id": 329489883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677087493
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1309827981\">PR review</a>.</p>",
        "id": 329493989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677088564
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1309827981\">PR review</a>.</p>",
        "id": 329493998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677088564
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#discussion_r1114724616\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// A convenience wrapper for `Result&lt;T, anyhow::Error&gt;`.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 329494004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677088564
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">PR #5853</a> from <code>result-alias</code> to <code>main</code>.</p>",
        "id": 329496153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677089176
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1311553997\">PR review</a>.</p>",
        "id": 329748532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677166068
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1311553997\">PR review</a>.</p>",
        "id": 329748534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677166068
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#discussion_r1115856216\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be <code>pub use anyhow::{Result, Error}</code> perhaps? One key feature this is currently missing is the <code>E</code> generic defaulting to <code>anyhow::Error</code> but still allowing two generics.</p>\n</blockquote>",
        "id": 329748535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677166069
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#discussion_r1115856503\">PR review comment</a>:</p>\n<blockquote>\n<p>e.g. from my comment above this shouldn't need to use <code>std::result::</code> ideally</p>\n</blockquote>",
        "id": 329748536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677166069
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">PR #5853</a> from <code>result-alias</code> to <code>main</code>.</p>",
        "id": 336431828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677231215
    },
    {
        "content": "<p>rylev updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">PR #5853</a> from <code>result-alias</code> to <code>main</code>.</p>",
        "id": 336449557,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677235827
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853#pullrequestreview-1313754753\">PR review</a>.</p>",
        "id": 336514880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677253048
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">PR #5853</a>.</p>",
        "id": 336536524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677258167
    }
]