[
    {
        "content": "<p><a href=\"https://github.com/dgryski\">dgryski</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">Issue #7336</a>.</p>",
        "id": 398135486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698084988
    },
    {
        "content": "<p>dgryski opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Go uses <code>wasmtime</code> as the default when running wasip1 binaries: <a href=\"https://github.com/golang/go/blob/master/misc/wasm/go_wasip1_wasm_exec\">https://github.com/golang/go/blob/master/misc/wasm/go_wasip1_wasm_exec</a>  . This script will break the default runner for users once they upgrade wasmtime.</p>\n<p>Similarly, TinyGo constructs command lines to run wasm binaries.  The changes to the argument parsing breaks that:<br>\n<a href=\"https://github.com/tinygo-org/tinygo/issues/3970\">https://github.com/tinygo-org/tinygo/issues/3970</a> .</p>\n</blockquote>",
        "id": 398135488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698084989
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1775765701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Thanks for the report! If you're curious more discussion about this can be found on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6925\">https://github.com/bytecodealliance/wasmtime/pull/6925</a> and related links.</p>\n<p>Is it possible to have these scripts to get updated to require Wasmtime 14? Or is it desired that any Wasmtime version in the environment suffices? In the case that any Wasmtime version would suffice I think that will unfortunately require version detection to select the right CLI.</p>\n</blockquote>",
        "id": 398136088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698085308
    },
    {
        "content": "<p>ydnar <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1775833945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Regardless of the merits of the redesigned CLI, I think having a compatibility shim with deprecation warnings might have been warranted, for at least one major version.</p>\n<p><code>--max-wasm-stack: deprecated in wasmtime v14. Did you mean -W max-wasm-stack=N?</code></p>\n</blockquote>",
        "id": 398140442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698087420
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1779810774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>I wanted to be sure to copy over some comments <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6925#issuecomment-1775847262\">from here</a> to this dedicated issue as well as I suspect others will land here in the future too.</p>\n<p>First off, if this is catching folks by surprise, I'm sorry about that! The intent was to gradually roll this out the best we could to prevent catching anyone by surprise. The places this was previously discussed prior to the Wasmtime 14 release were:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6741\">original issue</a></li>\n<li><a href=\"#narrow/stream/217126-wasmtime/topic/Upcoming.20changes.20to.20Wasmtime's.20CLI/near/388395163\">Zulip discussion</a></li>\n<li><a href=\"https://github.com/bytecodealliance/meetings/blob/main/wasmtime/2023/wasmtime-08-31.md\">Discussed in a bi-weekly meeting</a></li>\n</ul>\n<p>That being said if you're surprised by this change, that definitely wasn't sufficient communication! I would at least personally be interested in learning how to better communicate possible breaking changes like this to downstream consumers. Feel free to reach out to me (or other project members) either here, on email, or on Zulip, and we can continue discussion.</p>\n<p>Now with that being there's two points that were discussed historically in the above discussions which I think are also important to reiterate here as well:</p>\n<ol>\n<li>\n<p>It was discussed and explicitly decided to not have a period of warnings or similar related to this change. This primarily arose from the difficulty of detecting when to warn due to the fact that CLI args not only changed syntax (e.g. <code>--disable-cache</code> to <code>-Ccache=n</code>) but additionally changed how they were parsed. For example previously <code>wasmtime foo.wasm --disable-cache</code> would be parsed as disabling the cache in Wasmtime, but after this change would be parsed as passing the <code>--disable-cache</code> flag to <code>foo.wasm</code>. This means that, for example, if <code>foo.wasm</code> actually took a <code>--disable-cache</code> it's difficult to determine whether the warning should be emitted or not. In the end it was decided that by combining both the syntax and parsing changes in the same release (as opposed to two different releases) that it would assist in alerting users to a change as opposed to silently breaking.</p>\n</li>\n<li>\n<p>This is intended to be The Last major breaking change to the CLI. Emphasis was placed in multiple locations when talking about the change that this was basically the last opportunity to have changes made on this scale. Such a breaking change will not be allowed in the future. Minor changes may still happen but if they do they'll be required to go through a warning/deprecation/etc process.</p>\n</li>\n</ol>\n<p>I bring up these two points less to justify what happened but moreso to help highlight that these were discussed and to additionally summarize (to the best I can) the results of the discussions at the time. If folks are landing here then I'll reiterate again that it primarily means that the communication here wasn't handled as best as it could have. I (and I'm sure others) am interested in improving communication going forward, so please reach out of you have concerns and we can figure out how best to take into account more feedback and communicate more effectively.</p>\n</blockquote>",
        "id": 398538974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698257828
    },
    {
        "content": "<p>ydnar <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1780086596\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Thanks for the additional context!</p>\n<blockquote>\n<p>That being said if you're surprised by this change, that definitely wasn't sufficient communication! I would at least personally be interested in learning how to better communicate possible breaking changes like this to downstream consumers. Feel free to reach out to me (or other project members) either here, on email, or on Zulip, and we can continue discussion.</p>\n</blockquote>\n<p>In the spirit of constructive feedback, I think a couple things could have been improved with the rollout. The first is comms, and the second is implementation.</p>\n<h3>Comms</h3>\n<p>I think it’s important to distinguish between internal project comms and external comms. Zulip, GH issues, PRs, and internal discussion are just that—internal. I don’t think it’s reasonable to expect your users (or their users, who might also be affected) to keep abreast of internal discussions.</p>\n<ul>\n<li>For breaking changes, it’s probably worth a blog post, a Tweet, and/or reaching out proactively to significant users ahead of shipping the change.</li>\n<li>Second, it might have been worth waiting until Monday to ship the change. Shipping a big release on a Friday with little to no public notice gave folks little time during the work week to adapt to the change.<br>\n    - Somewhat related: monthly semver-major releases do not signal <a href=\"https://docs.wasmtime.dev/stability-release.html\">stability</a>. Recommendation: preserve monthly release cadence, but shift to semver-minor, with additional communication ahead of breaking semver-major releases on a lower frequency.</li>\n<li>Last, improved release documentation:<br>\n    - Publish a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/RELEASES.md\">changelog</a> on the <a href=\"https://wasmtime.dev\">website</a>.<br>\n    - Document <em>all</em> of the CLI arguments in the <a href=\"https://docs.wasmtime.dev/cli-options.html\">documentation</a>. Currently the only way to get complete CLI documentation is to install <code>wasmtime</code> or examine the source code.<br>\n    - Publish a migration guide for <em>every</em> CLI argument.<br>\n    - Add a changelog to the Wasmtime CLI page on <a href=\"https://crates.io/crates/wasmtime-cli\">crates.io</a>.</li>\n</ul>\n<h3>Implementation</h3>\n<p>Given this was a breaking change for all users of the Wasmtime CLI, I think having some period of backwards compatibility is warranted.</p>\n<ul>\n<li>For N (&lt;= 2?) major versions, support both the existing CLI arguments in a frozen v13 state, as well as the new v14+ argument structure.</li>\n<li>For each legacy argument, emit a deprecation warning with a translation from old → new so callers can adapt their programs quickly and easily.</li>\n<li>Consider whether a longer duration of backwards compatibility is warranted, e.g. for arguments whose names and function have changed entirely (<code>--mapdir</code> to <code>--dir</code>).</li>\n</ul>\n<p>Hopefully some of this is useful, and happy to discuss here or live. Thanks for your consideration!</p>\n</blockquote>",
        "id": 398563460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698269570
    },
    {
        "content": "<p>ydnar <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1780095451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>A couple other notes:</p>\n<ol>\n<li>Shipping major changes like this behind a feature flag or as a pre-release version is another way to give notice users affected by the change.</li>\n<li>A pre-release period or a period of backwards compatibility gives you a chance to refine the new CLI arguments (with further breaking changes) while existing users depend on the legacy CLI.</li>\n<li>Changes like this inevitably create work for every stakeholder. I have no doubt the new CLI redesign was well-considered and probably the right plan over the long term. But I think the question worth asking is: what is the work we want our users to bear, versus what work can we take on as maintainers to promote usage of the product by making our users’ lives easier?</li>\n</ol>\n</blockquote>",
        "id": 398564294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698270050
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1780179742\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>(Only quickly replying to two points before I sign off for the night)</p>\n<blockquote>\n<p>Somewhat related: monthly semver-major releases do not signal <a href=\"https://docs.wasmtime.dev/stability-release.html\">stability</a>. Recommendation: preserve monthly release cadence, but shift to semver-minor, with additional communication ahead of breaking semver-major releases on a lower frequency.</p>\n</blockquote>\n<p>We have very thoroughly thought about this before landing on this approach, see the section on <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-one-dot-oh.md#release-process-and-cadence\">release cadence</a> and the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasmtime-one-dot-oh.md#rationale-and-alternatives\">rationale</a> in the RFC for the 1.0 release.</p>\n<p>The underlying problem is that we're in a space that is rapidly evolving, and we have a number of different embeddings of wasmtime that we think should always be able to communicate the version number of wasmtime, not the embedding itself, as the most important aspect. This has fundamental tensions in it, and I still believe that quickly iterating major version numbers is the best of a range of not-great options.</p>\n<blockquote>\n<p>I think the question worth asking is: what is the work we want our users to bear, versus what work can we take on as maintainers to promote usage of the product by making our users’ lives easier?</p>\n</blockquote>\n<p>As I mentioned over in <a href=\"https://github.com/golang/go/issues/63718\">https://github.com/golang/go/issues/63718</a>, and as Alex said above, we got this one wrong, and should've done a better job of communicating and rolling out this change. Nevertheless, please rest assured that we're very very aware of the fact that building a platform like wasmtime comes with great responsibility. And I think we're getting this right almost all of the time, in part because we put a lot of thought into how we go about both building and releasing wasmtime.</p>\n</blockquote>",
        "id": 398575718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698275383
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1781511239\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>We just discussed this in the Wasmtime project call, and decided on a remediation plan.</p>\n<p>Most importantly, <strong>work is underway right now to put out a patch release that restores support for the current CLI</strong> (while retaining support for the new one as well).</p>\n<p>We also agreed on handling the CLI as a stable interface with strong compatibility guarantees, as well as the shape of a process for ensuring that we can keep to these guarantees, as well as how we'll communicate changes to the CLI. We'll publish an <a href=\"https://github.com/bytecodealliance/rfcs/\">RFC</a> detailing this, with ample opportunity to weigh in.</p>\n<p>Note that we deem the changes to the new interface foundationally important for these stability guarantees, so the RFC and an accompanying blog post will also include details on how we'll fully transition, and eventually sunset support for the old interface.</p>\n</blockquote>",
        "id": 398731634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698339962
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1781899856\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7385\">https://github.com/bytecodealliance/wasmtime/pull/7385</a> which implements compatibility shims and warnings. Once that lands on the <code>main</code> branch I will backport it to the 14.0.x release, likely as 14.0.3. My guess as to the ETA on that is probably early next week. I've additionally opened a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7384\">tracking issue</a> which will be pointed to by warnings the CLI will now print. That tracking issue contains further information about translating CLI invocations between the old and the new.</p>\n</blockquote>",
        "id": 398768272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698354676
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1785562486\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Wasmtime 14.0.3 is <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v14.0.3\">now released</a>, and it should address concerns raised here. If there are still issues with it please let us know!</p>\n</blockquote>",
        "id": 399335262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698682533
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>Go uses <code>wasmtime</code> as the default when running wasip1 binaries: <a href=\"https://github.com/golang/go/blob/master/misc/wasm/go_wasip1_wasm_exec\">https://github.com/golang/go/blob/master/misc/wasm/go_wasip1_wasm_exec</a>  . This script will break the default runner for users once they upgrade wasmtime.</p>\n<p>Similarly, TinyGo constructs command lines to run wasm binaries.  The changes to the argument parsing breaks that:<br>\n<a href=\"https://github.com/tinygo-org/tinygo/issues/3970\">https://github.com/tinygo-org/tinygo/issues/3970</a> .</p>\n</blockquote>",
        "id": 399572835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698774346
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336#issuecomment-1787693116\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7336\">issue #7336</a>:</p>\n<blockquote>\n<p>I'm going to close this now in favor of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7384\">https://github.com/bytecodealliance/wasmtime/issues/7384</a> as I believe the concerns have been addressed. Please follow-up though if that's not the case.</p>\n</blockquote>",
        "id": 399572836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698774346
    }
]