[
    {
        "content": "<p>kaivol opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">issue #9826</a>:</p>\n<blockquote>\n<p>I noticed a significant performance penalty when returning <code>list&lt;f32&gt;</code> from WebAssembly components. <br>\nBy overriding/specializing <code>Lift::load_list</code> for <code>Vec&lt;f32&gt;</code> (similar to the implementation for integers), I was able to achieve significantly better performance (I will make an issue or PR about this when I find the time). </p>\n<p>While doing so I wondered whether it is necessary to canonicalize floating point numbers <code>lift</code>ed/<code>load</code>ed from the WebAssembly runtime, as seen here:  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/128decddf236b21b60f4813f7ae01391428fef9a/crates/wasmtime/src/runtime/component/func/typed.rs#L932-L945\">https://github.com/bytecodealliance/wasmtime/blob/128decddf236b21b60f4813f7ae01391428fef9a/crates/wasmtime/src/runtime/component/func/typed.rs#L932-L945</a><br>\nI understand that (in the Component Model) <code>f32</code> and <code>f64</code> logically only have a single <code>NaN</code> value.<br>\nIs it correct that for this reason we must ensure that we only pass the canonical <code>NaN</code> _to_ components?</p>\n<p>Anyways I don't quite understand why this should be necessary for values passed _from_ components to the host, as Rust doesn't really make any promises about the bit patterns of <code>NaN</code>. <br>\nAlso, shouldn't all floating point numbers coming from a component already be provided in canonical form, making another canonicalization redundant?</p>\n<p>I would be delighted if someone could enlighten me about this. </p>\n</blockquote>",
        "id": 489082975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734268191
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826#issuecomment-2544029685\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">issue #9826</a>:</p>\n<blockquote>\n<p>Good catch! This canonicalization used to be required by the specification, but that requirement has since been <a href=\"https://github.com/WebAssembly/component-model/pull/260\">removed</a>â€”precisely over the <a href=\"https://github.com/WebAssembly/component-model/issues/247#issuecomment-1732003268\">performance concerns</a> you raise here. Seems like we never updated Wasmtime to match the spec change.</p>\n<p>@alexcrichton, I assume removing the canonicalization here is fairly straight-forward?</p>\n</blockquote>",
        "id": 489110116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734292361
    },
    {
        "content": "<p><a href=\"https://github.com/tschneidereit\">tschneidereit</a> added the performance label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">Issue #9826</a>.</p>",
        "id": 489110161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734292417
    },
    {
        "content": "<p><a href=\"https://github.com/tschneidereit\">tschneidereit</a> added the wasm-proposal:component-model label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">Issue #9826</a>.</p>",
        "id": 489110162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734292417
    },
    {
        "content": "<p>kaivol <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826#issuecomment-2544046318\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">issue #9826</a>:</p>\n<blockquote>\n<p>Thanks for the explanation!</p>\n</blockquote>",
        "id": 489112362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734294509
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826#issuecomment-2545952532\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">issue #9826</a>:</p>\n<blockquote>\n<p>Ah yes this is an artifact of the original implementation. @kaivol would you be interested in sending a PR for this? It in theory is as easy as \"just remove <code>canonicalize</code>\" I think</p>\n</blockquote>",
        "id": 489268658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734363354
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9826\">issue #9826</a>:</p>\n<blockquote>\n<p>I noticed a significant performance penalty when returning <code>list&lt;f32&gt;</code> from WebAssembly components. <br>\nBy overriding/specializing <code>Lift::load_list</code> for <code>Vec&lt;f32&gt;</code> (similar to the implementation for integers), I was able to achieve significantly better performance (I will make an issue or PR about this when I find the time). </p>\n<p>While doing so I wondered whether it is necessary to canonicalize floating point numbers <code>lift</code>ed/<code>load</code>ed from the WebAssembly runtime, as seen here:  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/128decddf236b21b60f4813f7ae01391428fef9a/crates/wasmtime/src/runtime/component/func/typed.rs#L932-L945\">https://github.com/bytecodealliance/wasmtime/blob/128decddf236b21b60f4813f7ae01391428fef9a/crates/wasmtime/src/runtime/component/func/typed.rs#L932-L945</a><br>\nI understand that (in the Component Model) <code>f32</code> and <code>f64</code> logically only have a single <code>NaN</code> value.<br>\nIs it correct that for this reason we must ensure that we only pass the canonical <code>NaN</code> _to_ components?</p>\n<p>Anyways I don't quite understand why this should be necessary for values passed _from_ components to the host, as Rust doesn't really make any promises about the bit patterns of <code>NaN</code>. <br>\nAlso, shouldn't all floating point numbers coming from a component already be provided in canonical form, making another canonicalization redundant?</p>\n<p>I would be delighted if someone could enlighten me about this. </p>\n</blockquote>",
        "id": 490201539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734714993
    }
]