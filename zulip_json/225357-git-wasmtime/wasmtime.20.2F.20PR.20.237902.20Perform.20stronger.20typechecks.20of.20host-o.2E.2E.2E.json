[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 420665628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707489727
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a> from <code>alexcrichton:more-typechecks</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Right now the abstraction for host-owned resources in Wasmtime is quite simple, it's \"just an index\". This can be error prone because the host can suffer both from use-after-free and ABA-style problems. While there's not much that can be done about use-after-free the previous implementation would accidentally enable \"AB\" style problems where if a host-owned resource index was deallocated and then reallocated with another type the original handle would still work. While not a major bug this can be confusing and additionally violate's our guarantees as a component runtime to guests to ensure that resources always have valid <code>rep</code>s going into components.</p>\n<p>This commit adds a new layer of storage which keeps track of the <code>ResourceType</code> for all host-owned resources. This means that resources going into a host-owned table now record their type and coming out of a host-owned table a typecheck is always performed. Note that guests can continue to skip this logic as they already have per-type tables and so won't suffer the same issue.</p>\n<p>This change is inspired by my taking a look at #7883. The crux of the issue was a typo where a resource was reused by accident which led to confusing behavior due to the reuse. This change instead makes it return an error more quickly and doesn't allow the component to see any invalid state.</p>\n<p>Closes #7883</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 420665629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707489727
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 420665630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707489727
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 420671076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491395
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 420671231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707491431
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#issuecomment-1936251919\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 420690886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707497074
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#issuecomment-1936262406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>:</p>\n<blockquote>\n<p>I haven't looked at the actual PR yet, just read your comment, but:</p>\n<p>Is recording the type info enough to solve the ABA problem?</p>\n<p>I don't think so: we could allocate a resource of type A, create an index handle to it, deallocate it, allocate a new resource that is also of type A in that place, and then use the old index handle to access the wrong resource.</p>\n<p>I think adding a generation counter is the most straightforward way to definitely resolve the ABA problem here.</p>\n</blockquote>",
        "id": 420692225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707497513
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#pullrequestreview-1872869440\">PR review</a>:</p>\n<blockquote>\n<p>The code itself LGTM, and this is an improvement over the current status quo, so I don't mind landing this.</p>\n<p>But I'd like to hear your thoughts on how we can integrate a generation to fully prevent ABA issues. I'm not 100% sure on the constraints we are working within here. For example, are we restricted to <code>u32</code> indices and therefore we can't add a second <code>u32</code> for generation? If so, perhaps we can repurpose 8 bits into a generation? Would 24 bits be enough for all active resources? Do we have a limit on how many active resources can exist at a time? Such a small generation likely wouldn't be enough to fully prevent ABA problems, but I think it would still be a further improvement.</p>\n</blockquote>",
        "id": 420698294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707499534
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#pullrequestreview-1872869440\">PR review</a>:</p>\n<blockquote>\n<p>The code itself LGTM, and this is an improvement over the current status quo, so I don't mind landing this.</p>\n<p>But I'd like to hear your thoughts on how we can integrate a generation to fully prevent ABA issues. I'm not 100% sure on the constraints we are working within here. For example, are we restricted to <code>u32</code> indices and therefore we can't add a second <code>u32</code> for generation? If so, perhaps we can repurpose 8 bits into a generation? Would 24 bits be enough for all active resources? Do we have a limit on how many active resources can exist at a time? Such a small generation likely wouldn't be enough to fully prevent ABA problems, but I think it would still be a further improvement.</p>\n</blockquote>",
        "id": 420698296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707499534
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#discussion_r1484604720\">PR review comment</a>:</p>\n<blockquote>\n<p>commented out code</p>\n</blockquote>",
        "id": 420698297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707499534
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#discussion_r1484602776\">PR review comment</a>:</p>\n<blockquote>\n<p>todo</p>\n</blockquote>",
        "id": 420698298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707499534
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 421117564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707768114
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#issuecomment-1939471297\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>:</p>\n<blockquote>\n<p>A few days ago I was halfway through writing up a comment saying that I wasn't originally intending to solve the \"full ABA problem\" but was just targetting a smaller slice. Halfway through I asked myself \"but why?\" and scrapped that approach and took your suggestion of the generation counters and such.</p>\n<p>I think this should be an even stronger guarantee now where host-owned resources should be nearly fully resistant to ABA issues (modulo overflow of counters)</p>\n<p>Mind taking another look though @fitzgen since enough has changed?</p>\n</blockquote>",
        "id": 421117889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707768228
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#pullrequestreview-1876439567\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 421138445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707775644
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#pullrequestreview-1876439567\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 421138446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707775644
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902#discussion_r1486837436\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind explicitly masking off the generation and doing <code>u32::try_from(masked).unwrap()</code>? I think that would make things a lot more clear and avoid hiding subtle issues with <code>as</code> casts as we change representations and stuff like that.</p>\n</blockquote>",
        "id": 421138448,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707775644
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 421139721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707776176
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 421139726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707776181
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7902\">PR #7902</a>.</p>",
        "id": 421147251,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707779478
    }
]