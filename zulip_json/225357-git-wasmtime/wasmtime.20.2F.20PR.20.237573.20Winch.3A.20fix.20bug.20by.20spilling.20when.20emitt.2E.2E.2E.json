[
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403656594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700682727
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403656595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700682727
    },
    {
        "content": "<p>jeffcharles opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a> from <code>jeffcharles:winch-spill-when-calling</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;<br>\nThe differential fuzzer triggered a <code>mem.slot.offset.as_u32() == masm.sp_offset().as_u32()</code> assertion while compiling the following module:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">br_if</span> <span class=\"mi\">0</span> <span class=\"cm\">(;@0;)</span>\n    <span class=\"nb\">unreachable</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>It looks like cause of the issue is that using <code>save_live_registers_and_calculate_sizeof</code> can violate a value stack invariant by placing <code>Memory</code> entries after <code>Local</code> and <code>Reg</code> entries.</p>\n<p>To remediate this, we can trigger a spill instead of only saving live registers when emitting the machine code for a function call and we can calculate the amount of stack space consumed by the call in the <code>cleanup</code> method by summing the size of each memory entry used as an argument for the call.</p>\n<p>As a result of spilling, I needed to add specify which scratch register to use for <code>funcref</code>s. I also needed to add a spill at the start of visiting a <code>call_indirect</code> operator. This is because the machine code associated with a spill that occurs when calling a function to initialize the table element may be jumped over, resulting in the codegen context state being out of sync with the machine state, which potentially causes the machine stack to become unbalanced.</p>\n</blockquote>",
        "id": 403656597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700682727
    },
    {
        "content": "<p>jeffcharles created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#discussion_r1402657149\">PR review comment</a>:</p>\n<blockquote>\n<p>My understanding is <code>v</code> should never be a register when we reach this code because we spilled the value stack earlier. I've tried to confirm that by adding a panic if <code>v</code> is a register and running the test suite and filetests and both passed.</p>\n</blockquote>",
        "id": 403656945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700682908
    },
    {
        "content": "<p>jeffcharles submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#pullrequestreview-1745289260\">PR review</a>.</p>",
        "id": 403656947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700682909
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403658818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700683812
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#pullrequestreview-1745313700\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for digging into this. Left a few comments in the code, and also: can we update the comments in <code>call.rs</code> to reflect the new changes? The module documentation and the documentation for <code>FnCall::emit</code> both state that the implementation only saves live registers, which is no longer true. </p>\n</blockquote>",
        "id": 403663155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686075
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#discussion_r1402678404\">PR review comment</a>:</p>\n<blockquote>\n<p>Your understanding is correct, aside from matching against <code>Val::Memory</code>, I think it'd be useful to assert for such invariant in the code (e.g. <code>debug_assert!(v.is_mem() || v.is_const())</code>, that way we'd at least have a way of identifying any issues early on if this invariant ever breaks. </p>\n<p>NB: <code>is_const()</code> currently doesn't exist, so if we go with this approach, it needs  to be added. </p>\n</blockquote>",
        "id": 403663156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686075
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#pullrequestreview-1745313700\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for digging into this. Left a few comments in the code, and also: can we update the comments in <code>call.rs</code> to reflect the new changes? The module documentation and the documentation for <code>FnCall::emit</code> both state that the implementation only saves live registers, which is no longer true. </p>\n</blockquote>",
        "id": 403663157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686075
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#discussion_r1402671642\">PR review comment</a>:</p>\n<blockquote>\n<p>Only <code>WasmHeapType::Func</code> is supported at the moment. Can we update this snippet to reflect that? We'll be able to lift such restriction once externrefs and typed funcs are supported. </p>\n</blockquote>",
        "id": 403663158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686076
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#pullrequestreview-1745357213\">PR review</a>.</p>",
        "id": 403663302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686141
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#discussion_r1402699242\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you add a bit more context here on when these instructions get jumped over? e.g. if the funcref was previously initialized. </p>\n</blockquote>",
        "id": 403663303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700686142
    },
    {
        "content": "<p>jeffcharles updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403671873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700690772
    },
    {
        "content": "<p><strong>jeffcharles</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403677599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700694115
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573#pullrequestreview-1746308077\">PR review</a>.</p>",
        "id": 403774808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700740765
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7573\">PR #7573</a>.</p>",
        "id": 403781516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700743391
    }
]