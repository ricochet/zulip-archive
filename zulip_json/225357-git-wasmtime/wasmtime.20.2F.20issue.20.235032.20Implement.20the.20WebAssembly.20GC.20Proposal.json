[
    {
        "content": "<p>Srinivasa314 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Implement the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<h4>Benefit</h4>\n<p>Most modern languages use GC. The current way to do it is on top of linear memory. However there are disadvantages to this approach</p>\n<ul>\n<li>The WebAssembly stack cannot be scanned for GC roots. As of now a shadow stack is usually used but it is not ideal.</li>\n<li>Webassembly modules of GC languages are huge as they must include the GC</li>\n<li>GCs implemented under WASM are less efficient and slower </li>\n</ul>\n<h4>Implementation</h4>\n<p>Wasmtime already supports stack maps and stack scanning but the rest has to be implemnted</p>\n</blockquote>",
        "id": 302819065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665138110
    },
    {
        "content": "<p>sdeleuze <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1445799790\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>FYI we are now able to run a <a href=\"https://twitter.com/sdeleuze/status/1629930949944147968\">Kotlin/Wasm HTTP server via KoWasm on Node.js</a> and I would be happy to leverage Wasmtime to run it as soon as it will get GC support.</p>\n<p>This would be a really good fit since we would like to leverage WASI Preview2+ and Wasm Component Model asap.</p>\n<p>See also my blog post <a href=\"https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/\">The huge potential of Kotlin/Wasm</a> for more context.</p>\n</blockquote>",
        "id": 338250588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677480991
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1490914368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Heads up: I am working on an RFC to work out the design of our Wasm GC support. I expect to start implementing Wasm GC once that RFC reaches consensus and merges and I've finished implementing Wasm tail calls.</p>\n</blockquote>",
        "id": 345781398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680208384
    },
    {
        "content": "<p>fitzgen assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a> (assigned to fitzgen):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Implement the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<h4>Benefit</h4>\n<p>Most modern languages use GC. The current way to do it is on top of linear memory. However there are disadvantages to this approach</p>\n<ul>\n<li>The WebAssembly stack cannot be scanned for GC roots. As of now a shadow stack is usually used but it is not ideal.</li>\n<li>Webassembly modules of GC languages are huge as they must include the GC</li>\n<li>GCs implemented under WASM are less efficient and slower </li>\n</ul>\n<h4>Implementation</h4>\n<p>Wasmtime already supports stack maps and stack scanning but the rest has to be implemnted</p>\n</blockquote>",
        "id": 345781413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680208390
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1509868097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>RFC is up: <a href=\"https://github.com/bytecodealliance/rfcs/pull/31\">https://github.com/bytecodealliance/rfcs/pull/31</a></p>\n</blockquote>",
        "id": 350178789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681571517
    },
    {
        "content": "<p>tw-atroehrsm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1776756567\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>hey there! any updates on this front? Really looking forward to use Kotlin/WASM with this runtime. <br>\nFor now only V8 is feasible, as it includes a GC and has implemented the proposal</p>\n</blockquote>",
        "id": 398235026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698136153
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1779688006\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>There is work on parsing and validation, and refactors setting the stage for these things, happening in the <code>wasm-tools</code> repository, since we need to be able to parse and validate Wasm before we can compile and run it.</p>\n</blockquote>",
        "id": 398527422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698253020
    },
    {
        "content": "<p>smndtrl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1877034765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen could you provide links to the issues over there? I want to keep track with the progress due to the impact on Kotlin</p>\n</blockquote>",
        "id": 411182277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704372042
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1877467762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@smndtrl since <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1346\">https://github.com/bytecodealliance/wasm-tools/pull/1346</a> merged, all GC spec tests are passing in wasm-tools.</p>\n<p>You can look at <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md#incremental-implementation-plan\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md#incremental-implementation-plan</a> and <a href=\"https://docs.wasmtime.dev/contributing-implementing-wasm-proposals.html\">https://docs.wasmtime.dev/contributing-implementing-wasm-proposals.html</a> to get an idea of what is still to be done.</p>\n</blockquote>",
        "id": 411228278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704388166
    },
    {
        "content": "<p>tw-atroehrsm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1929183168\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>So it there any timeline, roadmap when this will be available at least with the null GC?</p>\n<p>this was merged in may 2023 so can be marked as done?</p>\n<p>what could one do to support this effort?</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138\">https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138</a>)<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\">https://github.com/bytecodealliance/wasmtime/pull/5288</a> is merged since May</p>\n</blockquote>",
        "id": 420013545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707214281
    },
    {
        "content": "<p>tw-atroehrsm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1929183168\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>So it there any timeline, roadmap when this will be available at least with the null GC?</p>\n<p>this was merged in may 2023 so can be marked as done?<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138\">https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138</a>)<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\">https://github.com/bytecodealliance/wasmtime/pull/5288</a> </p>\n<p>what could one do to support this effort?</p>\n</blockquote>",
        "id": 420013850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707214390
    },
    {
        "content": "<p>tw-atroehrsm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1929183168\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>So it there any timeline, roadmap when this will be available at least with the null GC?</p>\n<p>this was merged in may 2023 so can be marked as done?<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138\">https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138</a>)<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\">https://github.com/bytecodealliance/wasmtime/pull/5288</a> </p>\n<p>what could one do to support this effort?</p>\n</blockquote>",
        "id": 420013904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707214413
    },
    {
        "content": "<p>tw-atroehrsm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1929183168\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>So it there any timeline, roadmap when this will be available at least with the null GC?</p>\n<p>this was merged in may 2023 so can be marked as done?<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138\">https://github.com/bytecodealliance/wasmtime/assets/116177334/822311d1-2577-4811-82c5-1fa09c2fc138</a>)</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\">https://github.com/bytecodealliance/wasmtime/pull/5288</a></p>\n<p>what could one do to support this effort?</p>\n</blockquote>",
        "id": 420013953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707214429
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1930462223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>The function references proposal still needs to be exposed in the embedder API.</p>\n<p>I am actively working on that and the rest of getting Wasm GC implemented. Right now it mostly involves some refactoring to the runtime's internals to pave the way for future changes. Unfortunately, there isn't much that can be split out and implemented in parallel right now.</p>\n</blockquote>",
        "id": 420101936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707241676
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-1945172816\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>FYI: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">https://github.com/bytecodealliance/wasmtime/pull/7943</a> finishes the function references proposal and takes the first baby steps towards Wasm GC inside Wasmtime, adding support for Wasm GC's <code>nofunc</code> and a <code>Config::wasm_gc(enabled)</code> knob.</p>\n</blockquote>",
        "id": 421558404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707957211
    },
    {
        "content": "<p>oovm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2132288929\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>It looks like all gc types declarations are supported.</p>\n<p>Can we create an issue to track the progress of the gc proposal, such as</p>\n<ul>\n<li>gc instruction support</li>\n<li>non-collection runtime</li>\n<li>baseline gc runtime</li>\n</ul>\n</blockquote>",
        "id": 440726945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716743446
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2136323060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Yes all the types are supported now, but instantiating them is not implemented yet; I'm working on it. Then the various instructions. Then the collector itself. (Right now we are reusing the deferred reference-counting collector that Wasmtime already has, so we can collect some garbage, but not cycles).</p>\n<p>Personally, I'm not a huge fan of opening a bunch of tracking issues for things already effectively tracked by this issue. Happy to cross-link more PRs here as they come in though.</p>\n</blockquote>",
        "id": 441139268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716943533
    },
    {
        "content": "<p>lppedd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2373633147\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Hi there! Just wondering if there are noteworthy updates on this front.</p>\n</blockquote>",
        "id": 472657835,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727258576
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2374519316\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>All the <code>struct</code>-related instructions are implemented.</p>\n<p>Almost done with <code>array</code>-related instructions.</p>\n<p>Still to do:</p>\n<ul>\n<li><code>ref.test</code></li>\n<li><code>ref.cast</code></li>\n<li>branch-on-cast instructions</li>\n<li>conversions between <code>anyref</code> and <code>externref</code></li>\n<li>support for <code>funcref</code>s in the GC heap</li>\n<li>lots of various optimizations</li>\n<li>better pooling allocator integration</li>\n</ul>\n</blockquote>",
        "id": 472731847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727280559
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2386524641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Two notes:</p>\n<ol>\n<li>\n<p>All array instructions other than <code>array.{copy,init_elem}</code> have been implemented. Those last two will be coming very soon.</p>\n</li>\n<li>\n<p>Folks following this issue might also be interested in following <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></p>\n</li>\n</ol>\n</blockquote>",
        "id": 474083781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727802036
    },
    {
        "content": "<p>bashor <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2386762788\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen Great news! Thanks for the updates!</p>\n</blockquote>",
        "id": 474108836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727809898
    },
    {
        "content": "<p>bashor <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2405959081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen, do I understand correctly that storing a <code>funcref</code> in a struct's field is not supported yet?</p>\n</blockquote>",
        "id": 476216598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728591230
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2406186849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>That was true before a few days ago. Now, <code>funcref</code>s inside GC objects should be fully supported.</p>\n<p>And FWIW, all Wasm GC spec tests are now passing on <code>main</code>!</p>\n</blockquote>",
        "id": 476240967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601350
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Implement the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<h4>Benefit</h4>\n<p>Most modern languages use GC. The current way to do it is on top of linear memory. However there are disadvantages to this approach</p>\n<ul>\n<li>The WebAssembly stack cannot be scanned for GC roots. As of now a shadow stack is usually used but it is not ideal.</li>\n<li>Webassembly modules of GC languages are huge as they must include the GC</li>\n<li>GCs implemented under WASM are less efficient and slower </li>\n</ul>\n<h4>Implementation</h4>\n<p>Wasmtime already supports stack maps and stack scanning but the rest has to be implemnted<br>\n```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601370
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Implement the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<h4>Benefit</h4>\n<p>Most modern languages use GC. The current way to do it is on top of linear memory. However there are disadvantages to this approach</p>\n<ul>\n<li>The WebAssembly stack cannot be scanned for GC roots. As of now a shadow stack is usually used but it is not ideal.</li>\n<li>Webassembly modules of GC languages are huge as they must include the GC</li>\n<li>GCs implemented under WASM are less efficient and slower </li>\n</ul>\n<h4>Implementation</h4>\n<p>Wasmtime already supports stack maps and stack scanning but the rest has to be implemnted<br>\n```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601406
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601446
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601462
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601518
    },
    {
        "content": "<p>bashor <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2406190404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen, but I got the following error on dev build from <code>f59cad10572b9618b300af9e8fecf2ce13dba373</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">gc</span><span class=\"o\">/</span><span class=\"n\">enabled</span><span class=\"o\">/</span><span class=\"n\">structref</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">331</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">:</span>\n<span class=\"nc\">not</span><span class=\"w\"> </span><span class=\"n\">yet</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">funcrefs</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">GC</span><span class=\"w\"> </span><span class=\"n\">objects</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">_rust_begin_unwind</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">gc</span><span class=\"p\">::</span><span class=\"n\">enabled</span><span class=\"p\">::</span><span class=\"n\">structref</span><span class=\"p\">::</span><span class=\"n\">VMStructRef</span><span class=\"p\">::</span><span class=\"n\">initialize_field</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">gc</span><span class=\"p\">::</span><span class=\"n\">enabled</span><span class=\"p\">::</span><span class=\"n\">structref</span><span class=\"p\">::</span><span class=\"n\">StructRef</span><span class=\"p\">::</span><span class=\"n\">_new</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">const_expr</span><span class=\"p\">::</span><span class=\"n\">ConstEvalContext</span><span class=\"p\">::</span><span class=\"n\">struct_new</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">const_expr</span><span class=\"p\">::</span><span class=\"n\">ConstExprEvaluator</span><span class=\"p\">::</span><span class=\"n\">eval</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">allocator</span><span class=\"p\">::</span><span class=\"n\">initialize_instance</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new_raw</span>\n<span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"w\"> </span><span class=\"nc\">details</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">omitted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"n\">full</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">verbose</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">.</span>\n<span class=\"n\">zsh</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">abort</span><span class=\"w\">      </span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">gc</span><span class=\"o\">=</span><span class=\"n\">y</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476241411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601574
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2406192796\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@bashor ah! looks like I missed a spot, thanks for finding it. FWIW, I think this should only be reachable from const expressions and host APIs. Will whip up a fix in a minute.</p>\n</blockquote>",
        "id": 476241659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728601716
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476245521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728603686
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2406242468\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@bashor fix is over in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9454\">https://github.com/bytecodealliance/wasmtime/pull/9454</a> !</p>\n</blockquote>",
        "id": 476246464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728604250
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476248047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728605127
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476248080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728605154
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] <code>wasmtime::NoneRef</code> host API type</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476248147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728605176
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476248248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728605230
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476253977,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728608268
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476254203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728608393
    },
    {
        "content": "<p>bashor <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2407378607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen Thanks! </p>\n<p>Now it works! <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> <a href=\"https://x.com/bashorov/status/1844725893752553957\">https://x.com/bashorov/status/1844725893752553957</a></p>\n</blockquote>",
        "id": 476384935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728652013
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2407642853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@bashor awesome!! Thanks for kicking the tires :)</p>\n</blockquote>",
        "id": 476410463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728660179
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476413965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661297
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476414112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661334
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476414145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661345
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476414156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728661350
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476444115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728673487
    },
    {
        "content": "<p>hoangpq <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2409037414\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Hi @bashor </p>\n<p>I'm interested in running Kotlin WASI on Wasmtime, so I gave it a try, but I encountered an error. Do you have any ideas</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"w\"> </span>./target/debug/wasmtime<span class=\"w\"> </span>-W<span class=\"w\"> </span><span class=\"k\">function</span>-references,gc<span class=\"w\"> </span>./kotlin-wasm-wasi-example-wasm-wasi.wasm\nError:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>parse<span class=\"w\"> </span>WebAssembly<span class=\"w\"> </span>module\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span>exceptions<span class=\"w\"> </span>proposal<span class=\"w\"> </span>not<span class=\"w\"> </span>enabled<span class=\"w\"> </span><span class=\"o\">(</span>at<span class=\"w\"> </span>offset<span class=\"w\"> </span>0x6750<span class=\"o\">)</span>\n</code></pre></div>\n<p>Envs:<br>\n- Wasmtime: debug build from Wasmtime main branch<br>\n- Wasm from <a href=\"https://github.com/Kotlin/kotlin-wasm-wasi-template\">https://github.com/Kotlin/kotlin-wasm-wasi-template</a></p>\n</blockquote>",
        "id": 476617857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728836262
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2409042831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@hoangpq you might be interested in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3427#issuecomment-2408987952\">this comment</a> perhaps. Wasmtime doesn't yet implement the exception-handling proposal for WebAssembly, so Kotlin won't run until that's implemented.</p>\n</blockquote>",
        "id": 476619200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728837235
    },
    {
        "content": "<p>hoangpq <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2409063766\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Thank you @alexcrichton.</p>\n</blockquote>",
        "id": 476623723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728841349
    },
    {
        "content": "<p>bashor <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2409108487\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Hi, @hoangpq!</p>\n<p>You can uncomment/add <a href=\"https://github.com/Kotlin/kotlin-wasm-wasi-template/blob/main/build.gradle.kts#L39-L41\">these lines</a> to prevent using EH by Kotlin/Wasm toolchain.</p>\n<p>Note that the option was added only to allow earlier experimentation with VMs with limited/lack of EH support. In this mode, throwing an exception will lead to a trap (~program termination).<br>\n</p>\n</blockquote>",
        "id": 476633365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728850127
    },
    {
        "content": "<p>hoangpq <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2409771626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Got it. Thanks, @bashor.</p>\n</blockquote>",
        "id": 476656998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728872278
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[x] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 479933480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730397895
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[x] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 479933538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730397909
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[x] <code>wasmtime::NoneRef</code> host API type</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] Implement the null GC described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 479933567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730397919
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 479933587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730397928
    },
    {
        "content": "<p>vouillon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2464913437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>@fitzgen I get the following error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">919</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">:</span>\n<span class=\"nc\">not</span><span class=\"w\"> </span><span class=\"n\">yet</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">eqref</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">rust_begin_unwind</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.80</span><span class=\"o\">-</span><span class=\"n\">R0vcdR</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.80</span><span class=\"o\">-</span><span class=\"mf\">1.80.1</span><span class=\"o\">+</span><span class=\"n\">dfsg0ubuntu1</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">652</span><span class=\"p\">:</span><span class=\"mi\">5</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.80</span><span class=\"o\">-</span><span class=\"n\">R0vcdR</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"mf\">1.80</span><span class=\"o\">-</span><span class=\"mf\">1.80.1</span><span class=\"o\">+</span><span class=\"n\">dfsg0ubuntu1</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">72</span><span class=\"p\">:</span><span class=\"mi\">14</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">values</span><span class=\"p\">::</span><span class=\"n\">Ref</span><span class=\"p\">::</span><span class=\"n\">_matches_ty</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">919</span><span class=\"p\">:</span><span class=\"mi\">50</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">values</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">_matches_ty</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">193</span><span class=\"p\">:</span><span class=\"mi\">55</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">values</span><span class=\"p\">::</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">ensure_matches_ty</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">213</span><span class=\"p\">:</span><span class=\"mi\">12</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">gc</span><span class=\"p\">::</span><span class=\"n\">enabled</span><span class=\"p\">::</span><span class=\"n\">arrayref</span><span class=\"p\">::</span><span class=\"n\">ArrayRef</span><span class=\"p\">::</span><span class=\"n\">_new</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">gc</span><span class=\"o\">/</span><span class=\"n\">enabled</span><span class=\"o\">/</span><span class=\"n\">arrayref</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">276</span><span class=\"p\">:</span><span class=\"mi\">9</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">const_expr</span><span class=\"p\">::</span><span class=\"n\">ConstExprEvaluator</span><span class=\"p\">::</span><span class=\"n\">eval</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">const_expr</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">301</span><span class=\"p\">:</span><span class=\"mi\">33</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">instance</span><span class=\"p\">::</span><span class=\"n\">allocator</span><span class=\"p\">::</span><span class=\"n\">initialize_globals</span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">instance</span><span class=\"o\">/</span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">800</span><span class=\"p\">:</span><span class=\"mi\">13</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 481326551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731076434
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2465337996\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<blockquote>\n<p>@fitzgen I get the following error:</p>\n</blockquote>\n<p>Looks like I missed a spot! Thanks for the report. Can you share the test case and steps to reproduce? Either here or in a new issue is fine. Thanks!</p>\n</blockquote>",
        "id": 481356449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731086518
    },
    {
        "content": "<p>vouillon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2465402599\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>I was trying this piece of code: <a href=\"https://github.com/user-attachments/files/17682157/bdd.zip\">bdd.zip</a><br>\nUsing the following command:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">proposals</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">bdd</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 481358473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731087371
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2465537039\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Thanks! I'll take a look soon</p>\n</blockquote>",
        "id": 481369446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731091966
    },
    {
        "content": "<p>whyoleg <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2483656302\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Hey @fitzgen! During experiments with Kotlin Wasm WASI on Wasmtime I found several issues.<br>\nThe code is <a href=\"https://github.com/Kotlin/kotlin-wasm-wasi-template/blob/c7f4e14962ff7458c6a2249591a8cf814116a293/src/wasmWasiMain/kotlin/MonotonicTime.kt\">here</a> and produced Wasm file is <a href=\"https://github.com/user-attachments/files/17803973/kotlin.wasm.zip\">here</a>. Executed by running <code>dev</code> version of wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"p\">,</span><span class=\"n\">gc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">logging</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">kotlin</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Overall, every line from the example above produces an error on it's own :)</p>\n<p>First four lines produces the following stack trace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">slab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">387</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span>\n<span class=\"nc\">id</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">different</span><span class=\"w\"> </span><span class=\"n\">slab</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103470b5c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">BacktraceLock</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">::</span><span class=\"n\">DisplayBacktrace</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">habbf9c4f641febb1</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10348f690</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">::</span><span class=\"n\">ha36a8060c13608ea</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10346c724</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Write</span><span class=\"p\">::</span><span class=\"n\">write_fmt</span><span class=\"p\">::</span><span class=\"n\">h431832c8ebcc85c9</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471b68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h4aa1f60327dfff6a</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471718</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::</span><span class=\"n\">h4ebc6eb4ae179807</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x1034725e4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">rust_panic_with_hook</span><span class=\"p\">::</span><span class=\"n\">h6a84efe4dcab239c</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103472010</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">begin_panic_handler</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h5eef292190467fef</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471020</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">__rust_end_short_backtrace</span><span class=\"p\">::</span><span class=\"n\">hd7e7925203f20af9</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471cd8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">_rust_begin_unwind</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10350d854</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span><span class=\"p\">::</span><span class=\"n\">h410d3f147658259b</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10350d824</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">option</span><span class=\"p\">::</span><span class=\"n\">expect_failed</span><span class=\"p\">::</span><span class=\"n\">h1b731afdb81ee447</span>\n<span class=\"w\">  </span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x102b395d8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">get_interned_func_ref</span><span class=\"p\">::</span><span class=\"n\">h1699d9d932a55f6c</span>\n<span class=\"w\">  </span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x104747638</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>And the last line produces the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">slab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">203</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">Slab</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">MAX_CAPACITY</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b98b5c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">BacktraceLock</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">::</span><span class=\"n\">DisplayBacktrace</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">habbf9c4f641febb1</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105bb7690</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">::</span><span class=\"n\">ha36a8060c13608ea</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b94724</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Write</span><span class=\"p\">::</span><span class=\"n\">write_fmt</span><span class=\"p\">::</span><span class=\"n\">h431832c8ebcc85c9</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99b68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h4aa1f60327dfff6a</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99718</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::</span><span class=\"n\">h4ebc6eb4ae179807</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b9a5e4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">rust_panic_with_hook</span><span class=\"p\">::</span><span class=\"n\">h6a84efe4dcab239c</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99fe8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">begin_panic_handler</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h5eef292190467fef</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99020</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">__rust_end_short_backtrace</span><span class=\"p\">::</span><span class=\"n\">hd7e7925203f20af9</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99cd8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">_rust_begin_unwind</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105c35854</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span><span class=\"p\">::</span><span class=\"n\">h410d3f147658259b</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105c358c0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic</span><span class=\"p\">::</span><span class=\"n\">hee236ca94fc05047</span>\n<span class=\"w\">  </span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x1052615a8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">get_interned_func_ref</span><span class=\"p\">::</span><span class=\"n\">h1699d9d932a55f6c</span>\n<span class=\"w\">  </span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x106e6fd18</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>Hope this is fine to leave this here :)</p>\n</blockquote>",
        "id": 483079339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731950550
    },
    {
        "content": "<p>whyoleg edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2483656302\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Hey @fitzgen! During experiments with Kotlin Wasm WASI on Wasmtime I found several issues.<br>\nThe code is <a href=\"https://github.com/Kotlin/kotlin-wasm-wasi-template/blob/c7f4e14962ff7458c6a2249591a8cf814116a293/src/wasmWasiMain/kotlin/MonotonicTime.kt\">here</a> and produced Wasm file is <a href=\"https://github.com/user-attachments/files/17803973/kotlin.wasm.zip\">here</a>. Executed by running <code>dev</code> version of wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"o\">-</span><span class=\"n\">references</span><span class=\"p\">,</span><span class=\"n\">gc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">logging</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">kotlin</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Overall, every line from the example above produces an error on it's own :)</p>\n<p>First four lines produces the following stack trace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">slab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">387</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"p\">:</span>\n<span class=\"nc\">id</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">different</span><span class=\"w\"> </span><span class=\"n\">slab</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103470b5c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">BacktraceLock</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">::</span><span class=\"n\">DisplayBacktrace</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">habbf9c4f641febb1</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10348f690</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">::</span><span class=\"n\">ha36a8060c13608ea</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10346c724</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Write</span><span class=\"p\">::</span><span class=\"n\">write_fmt</span><span class=\"p\">::</span><span class=\"n\">h431832c8ebcc85c9</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471b68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h4aa1f60327dfff6a</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471718</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::</span><span class=\"n\">h4ebc6eb4ae179807</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x1034725e4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">rust_panic_with_hook</span><span class=\"p\">::</span><span class=\"n\">h6a84efe4dcab239c</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103472010</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">begin_panic_handler</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h5eef292190467fef</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471020</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">__rust_end_short_backtrace</span><span class=\"p\">::</span><span class=\"n\">hd7e7925203f20af9</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x103471cd8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">_rust_begin_unwind</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10350d854</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span><span class=\"p\">::</span><span class=\"n\">h410d3f147658259b</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x10350d824</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">option</span><span class=\"p\">::</span><span class=\"n\">expect_failed</span><span class=\"p\">::</span><span class=\"n\">h1b731afdb81ee447</span>\n<span class=\"w\">  </span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x102b395d8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">get_interned_func_ref</span><span class=\"p\">::</span><span class=\"n\">h1699d9d932a55f6c</span>\n<span class=\"w\">  </span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x104747638</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>And the last line produces the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">slab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">203</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">:</span>\n<span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">index</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">Slab</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">MAX_CAPACITY</span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b98b5c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">BacktraceLock</span><span class=\"p\">::</span><span class=\"n\">print</span><span class=\"p\">::</span><span class=\"n\">DisplayBacktrace</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">habbf9c4f641febb1</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105bb7690</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">fmt</span><span class=\"p\">::</span><span class=\"n\">write</span><span class=\"p\">::</span><span class=\"n\">ha36a8060c13608ea</span>\n<span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b94724</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Write</span><span class=\"p\">::</span><span class=\"n\">write_fmt</span><span class=\"p\">::</span><span class=\"n\">h431832c8ebcc85c9</span>\n<span class=\"w\">   </span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99b68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h4aa1f60327dfff6a</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99718</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">default_hook</span><span class=\"p\">::</span><span class=\"n\">h4ebc6eb4ae179807</span>\n<span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b9a5e4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">rust_panic_with_hook</span><span class=\"p\">::</span><span class=\"n\">h6a84efe4dcab239c</span>\n<span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99fe8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">begin_panic_handler</span><span class=\"p\">::{{</span><span class=\"n\">closure</span><span class=\"p\">}}::</span><span class=\"n\">h5eef292190467fef</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99020</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sys</span><span class=\"p\">::</span><span class=\"n\">backtrace</span><span class=\"p\">::</span><span class=\"n\">__rust_end_short_backtrace</span><span class=\"p\">::</span><span class=\"n\">hd7e7925203f20af9</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105b99cd8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">_rust_begin_unwind</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105c35854</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic_fmt</span><span class=\"p\">::</span><span class=\"n\">h410d3f147658259b</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x105c358c0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">panicking</span><span class=\"p\">::</span><span class=\"n\">panic</span><span class=\"p\">::</span><span class=\"n\">hee236ca94fc05047</span>\n<span class=\"w\">  </span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x1052615a8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">vm</span><span class=\"p\">::</span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">get_interned_func_ref</span><span class=\"p\">::</span><span class=\"n\">h1699d9d932a55f6c</span>\n<span class=\"w\">  </span><span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"w\">        </span><span class=\"mh\">0x106e6fd18</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>It works with Node.js and WasmEdge and outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Class</span><span class=\"o\">@</span><span class=\"mi\">687611678</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">REALTIME</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MONOTONIC</span><span class=\"p\">]</span>\n<span class=\"kc\">true</span>\n<span class=\"kc\">true</span>\n</code></pre></div>\n<blockquote>\n<p>687611678 is a hash code, so it could change per execution</p>\n</blockquote>\n<p>Hope this is fine to leave this here :)</p>\n</blockquote>",
        "id": 483079758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731950677
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9669\">https://github.com/bytecodealliance/wasmtime/issues/9669</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 486165193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733340977
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032#issuecomment-2518400260\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hey @fitzgen! During experiments with Kotlin Wasm WASI on Wasmtime I found several issues.</p>\n</blockquote>\n<p>Thanks for reporting the issue! I just got back from vacation and am slowly catching up on things. Will take a deeper look soon.</p>\n</blockquote>",
        "id": 486165323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733341040
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9669\">https://github.com/bytecodealliance/wasmtime/issues/9669</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">https://github.com/bytecodealliance/wasmtime/issues/9701</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 486165530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733341096
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9669\">https://github.com/bytecodealliance/wasmtime/issues/9669</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">https://github.com/bytecodealliance/wasmtime/issues/9701</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9714\">https://github.com/bytecodealliance/wasmtime/issues/9714</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 486167980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733342065
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5032\">issue #5032</a>:</p>\n<blockquote>\n<p>Tracking issue for implementation of the <a href=\"https://github.com/WebAssembly/gc\">WebAssembly GC proposal</a></p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<ul>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9351\">https://github.com/bytecodealliance/wasmtime/issues/9351</a></li>\n<li>[ ] Implement the copying collector described in the RFC: <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/wasm-gc.md</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9350\">https://github.com/bytecodealliance/wasmtime/issues/9350</a></li>\n<li>[ ] add gc support to general/differential fuzzing info</li>\n<li>[ ] rewrite the <code>table_ops</code> fuzzer to hammer on all GC/reference types things</li>\n<li>[ ] write an announcement blog post that we support Wasm GC</li>\n<li>[ ] prototype wasm GC &amp; component model canonical ABI support</li>\n<li>[ ] support struct/array/i31 in wasmtime's C API</li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9669\">https://github.com/bytecodealliance/wasmtime/issues/9669</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9701\">https://github.com/bytecodealliance/wasmtime/issues/9701</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9714\">https://github.com/bytecodealliance/wasmtime/issues/9714</a></li>\n<li>[ ] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9848\">https://github.com/bytecodealliance/wasmtime/issues/9848</a></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 489805862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734542234
    }
]