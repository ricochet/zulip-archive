[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5174#issuecomment-1299515394\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5174\">issue #5174</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 307444156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667359698
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5174#issuecomment-1301096028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5174\">issue #5174</a>:</p>\n<blockquote>\n<p>I've thought of one hypothetical case where this might change behavior: if the top-level pattern on the left-hand side of some rule is a bind-pattern.</p>\n<p>In the current implementation, <code>ir::lower_rule</code> calls <code>ruledata.lhs.root_term()</code> to determine where to get the generated function's parameters from. It then calls <code>gen_pattern</code> on the <code>ruledata.lhs</code>.</p>\n<p><code>Pattern::root_term</code> recurses on the subpattern if it's called on a <code>Pattern::BindPattern</code>, until it finds a <code>Pattern::Term</code>. But after this PR, <code>Rule::visit</code> panics if the top-level pattern is a bind-pattern instead of a term.</p>\n<p>I think the existing behavior isn't useful, because you can't _do_ anything with a name bound to the root term. The root term doesn't have a Rust representation that you can pattern match on or use in expressions. The current implementation of <code>gen_pattern</code> silently ignores the attempt to bind the name, so if you later try to use that name, it'll panic saying \"Variable should already be bound\".</p>\n<p>So I think this is a reasonable behavior \"change\" in that it'll report a meaningless ISLE construct sooner. And this doesn't happen anywhere in our test suite or our existing cranelift-codegen rules (or we'd see this panic in CI).</p>\n<p>I think we should go a step further and forbid bind-patterns in <code>Pattern::root_term</code>, as well as anywhere else that might currently permit them at the root of <code>Rule::lhs</code>.</p>\n</blockquote>",
        "id": 307600235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667416232
    }
]