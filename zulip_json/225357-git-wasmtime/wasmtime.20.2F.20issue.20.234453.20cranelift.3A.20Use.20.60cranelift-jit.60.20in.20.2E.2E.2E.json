[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1185610180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 289735536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895859
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1208574067\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>With the CRT issue resolved I think this is ready to merge.</p>\n<p>The only changes since the last review were a rebase and enabling the FMA tests that we couldn't enable in #4460.</p>\n<p>Thanks for reviewing!</p>\n</blockquote>",
        "id": 292491710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659990252
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1209855479\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>@jameysharp I agree with your comments, however this is sort of an intermediate PR with the follow up cleaning pretty much all of it.</p>\n<p>See #4667, we do away with SingleFunctionCompiler and link the entire test file at once, so the repeated compilation issue goes away.</p>\n</blockquote>",
        "id": 292653704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077517
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1209855479\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>@jameysharp I agree with your comments, however this is sort of an intermediate PR with the follow up cleaning pretty much all of it.</p>\n<p>See #4667, we do away with SingleFunctionCompiler and link the entire test file at once, so the repeated compilation issue goes away.</p>\n<p>I'd prefer not to have to clean this up, since it's going away as soon as that is done. But let me know if this is a blocker.</p>\n</blockquote>",
        "id": 292653773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077548
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1209931926\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>I hadn't looked at 4667 yet, and that resolves my concerns. Thanks!</p>\n</blockquote>",
        "id": 292664097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660082102
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303803222\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>As of this commit, I'm now seeing test failures on s390x (Ubuntu 20.04), specifically when running <code>cargo test --doc</code> in the filetests directory.  The symptom is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Test</span><span class=\"w\"> </span><span class=\"n\">executable</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">101</span><span class=\"p\">).</span><span class=\"w\"></span>\n<span class=\"n\">stderr</span>:\n<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">readable</span><span class=\"o\">+</span><span class=\"n\">executable</span>: <span class=\"nc\">SystemCall</span><span class=\"p\">(</span><span class=\"n\">Os</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">PermissionDenied</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"Permission denied\"</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">jit</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">178</span>:<span class=\"mi\">30</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when running the sample code in <code>src/function_runner.rs</code>.   A backtrace shows that the failing call is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x000003fffdc8cce0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">mprotect</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">lib64</span><span class=\"o\">/</span><span class=\"n\">libc</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">.</span><span class=\"mi\">6</span><span class=\"w\"></span>\n#<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa0008ee96</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">region</span>::<span class=\"n\">os</span>::<span class=\"n\">unix</span>::<span class=\"n\">set_protection</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">=</span><span class=\"mh\">0x2aa00847000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">protection</span><span class=\"o\">=..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">os</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">30</span><span class=\"w\"></span>\n#<span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa0008e880</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">region</span>::<span class=\"n\">protect</span>::<span class=\"n\">protect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mh\">0x2aa00847000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">protection</span><span class=\"o\">=..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">protect</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">48</span><span class=\"w\"></span>\n#<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa00072f6e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"n\">memory</span>::<span class=\"p\">{</span><span class=\"k\">impl</span>#<span class=\"mi\">2</span><span class=\"p\">}</span>::<span class=\"n\">set_readable_and_executable</span>::<span class=\"p\">{</span><span class=\"n\">closure</span>#<span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"o\">=</span><span class=\"mh\">0x2aa00847000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">jit</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">211</span><span class=\"w\"></span>\n#<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa00086824</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"n\">memory</span>::<span class=\"n\">Memory</span>::<span class=\"n\">set_readable_and_executable</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x3ffffffd2d0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">jit</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span><span class=\"w\"></span>\n#<span class=\"mi\">5</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa00068332</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cranelift_jit</span>::<span class=\"n\">backend</span>::<span class=\"n\">JITModule</span>::<span class=\"n\">finalize_definitions</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x3ffffffd260</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">jit</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">backend</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">461</span><span class=\"w\"></span>\n#<span class=\"mi\">6</span><span class=\"w\">  </span><span class=\"mh\">0x000002aa00045ae0</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span>::<span class=\"n\">function_runner</span>::<span class=\"n\">TestFileCompiler</span>::<span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=&lt;</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">reading</span><span class=\"w\"> </span><span class=\"n\">variable</span>: <span class=\"nc\">value</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">function_runner</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">247</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Note that this attempts to use <code>mprotect</code> to grant execute permission to memory allocated on the <em>heap</em>.   This is not supported everywhere, and will in particular be prevented by various security hardening settings on Linux.</p>\n<p>Instead, you should use separate <code>mmap</code> allocations if you need to grant execute permissions.</p>\n</blockquote>",
        "id": 307991541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667577560
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303884402\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Do the regular filetests pass for you on <code>main</code>? We still use <code>mprotect</code>, so I'm surprised as to how we haven't detected this sooner.</p>\n<p><code>cranelift-jit</code> has the <code>selinux-fix</code> feature that switches to <code>mmap</code> based allocations, if you try to use that, does that make it pass?</p>\n<p>If so, that might be related to: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a></p>\n</blockquote>",
        "id": 308004795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667581142
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303884402\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Do the regular filetests pass for you on <code>main</code>? We still use <code>mprotect</code>, so I'm surprised as to how we haven't detected this sooner.</p>\n<p><code>cranelift-jit</code> has the <code>selinux-fix</code> feature that switches to <code>mmap</code> based allocations, if you try to use that, does that make it pass?</p>\n<p>If so, this might be related to: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a></p>\n</blockquote>",
        "id": 308005116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667581226
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303884402\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>~Do the regular filetests pass for you on <code>main</code>? We still use <code>mprotect</code>, so I'm surprised as to how we haven't detected this sooner.~</p>\n<p>Edit: Ignore that I misread your comment and thought that only the doc tests were failing.</p>\n<p><code>cranelift-jit</code> has the <code>selinux-fix</code> feature that switches to <code>mmap</code> based allocations, if you try to use that, does that make it pass?</p>\n<p>If so, this might be related to: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a></p>\n</blockquote>",
        "id": 308006449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667581615
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303884402\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>~Do the regular filetests pass for you on <code>main</code>? We still use <code>mprotect</code>, so I'm surprised as to how we haven't detected this sooner.~</p>\n<p>Edit: Ignore that, I misread your comment and thought that only the doc tests were failing.</p>\n<p><code>cranelift-jit</code> has the <code>selinux-fix</code> feature that switches to <code>mmap</code> based allocations, if you try to use that, does that make it pass?</p>\n<p>If so, this might be related to: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a></p>\n</blockquote>",
        "id": 308006466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667581622
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303915069\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<p>No, only the doc tests are indeed failing.  I've been debugging this right now, and the difference is that doc test sample program is single-threaded and uses the main heap, where <code>mprotect</code> <code>PROT_EXEC</code> fails.  However, when running the main filetests, the <code>clif-util</code> program is multi-threaded and glibc uses per-thread heaps, which are separately created via <code>mmap</code>, and therefore the <code>mprotect</code> happens to work ...</p>\n<p>How would I use the <code>selinux-fix</code> feature with a doc test?</p>\n</blockquote>",
        "id": 308010242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667582824
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303927705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<blockquote>\n<p>No, only the doc tests are indeed failing. I've been debugging this right now, and the difference is that doc test sample program is single-threaded and uses the main heap, where mprotect PROT_EXEC fails. However, when running the main filetests, the clif-util program is multi-threaded and glibc uses per-thread heaps, which are separately created via mmap, and therefore the mprotect happens to work ...</p>\n</blockquote>\n<p>That's interesting, and weird!</p>\n<blockquote>\n<p>How would I use the selinux-fix feature with a doc test?</p>\n</blockquote>\n<p><a href=\"https://github.com/afonso360/wasmtime/commit/9d72edd9ab411669fa43268e1de70d88c985e8b7\">This</a> should do it.</p>\n</blockquote>",
        "id": 308012391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667583496
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303927705\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<blockquote>\n<p>No, only the doc tests are indeed failing. I've been debugging this right now, and the difference is that doc test sample program is single-threaded and uses the main heap, where mprotect PROT_EXEC fails. However, when running the main filetests, the clif-util program is multi-threaded and glibc uses per-thread heaps, which are separately created via mmap, and therefore the mprotect happens to work ...</p>\n</blockquote>\n<p>That's interesting, and weird!</p>\n<blockquote>\n<p>How would I use the selinux-fix feature with a doc test?</p>\n</blockquote>\n<p><a href=\"https://github.com/afonso360/wasmtime/commit/9d72edd9ab411669fa43268e1de70d88c985e8b7\">This</a> should do it.</p>\n<p>However I think that we probably should switch to a mmap allocator since that apparently can solve a bunch of other issues with cranelift-jit.</p>\n</blockquote>",
        "id": 308012632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667583584
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#issuecomment-1303955742\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">issue #4453</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>How would I use the selinux-fix feature with a doc test?</p>\n</blockquote>\n<p><a href=\"https://github.com/afonso360/wasmtime/commit/9d72edd9ab411669fa43268e1de70d88c985e8b7\">This</a> should do it.</p>\n</blockquote>\n<p>This fixes the problem for me.  Submitted as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5204\">https://github.com/bytecodealliance/wasmtime/pull/5204</a></p>\n<blockquote>\n<p>However I think that we probably should switch to a mmap allocator since that apparently can solve a bunch of other issues with cranelift-jit.</p>\n</blockquote>\n<p>Agreed!<br>\n</p>\n</blockquote>",
        "id": 308017374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667584749
    }
]