[
    {
        "content": "<p>YjyJeff opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437\">issue #6437</a>:</p>\n<blockquote>\n<p>After reading the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#overall-structure\">Overall Structure section in IR</a>, I found the <code>sum</code> variable is explicitly placed in the stack with <code>ss0 = explicit_slot 32</code>. However, the loop induction variable <code>i</code> is not placed explicitly placed in the stack.  The document said:</p>\n<blockquote>\n<p>Such variables can also be presented to Cranelift as [stack slot]s. Stack slots are accessed with the <code>stack_store</code> and <code>stack_load</code> instructions, and can have their address taken with <code>stack_addr</code>, which supports C-like programming languages where local variables can have their address taken.</p>\n</blockquote>\n<p>I am confused about when should we create a <code>StackSlot</code>. What is the advantage of <code>StackSlot</code> over <code>Variable</code> like <code>i</code> in the above?  In my view, all of them are in the stack, there is no difference here. I searched a lot and did not find the answer. Could anyone explain it?  </p>\n<p>Thanks in advance. </p>\n</blockquote>",
        "id": 360417408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684812415
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437#issuecomment-1558521750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437\">issue #6437</a>:</p>\n<blockquote>\n<p>I think the main point of confusion is</p>\n<blockquote>\n<p>In my view, all of them are in the stack</p>\n</blockquote>\n<p>which is not quite true: in the example you linked, <code>i</code> is never stored on the stack; it exists only as SSA values. That is exactly the difference: <code>StackSlot</code> is an allocation of <em>memory</em>, and you can load and store to it whenever you like; <code>Variable</code> is an abstraction in <code>cranelift_frontend</code> that builds <code>Value</code>s, which are values computed in your program that may only live in registers. You can load a stack-slot to get a value, and you can store a value to a stack-slot; but a stack-slot itself is not a value.</p>\n</blockquote>",
        "id": 360425937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684817999
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437#issuecomment-1558521750\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437\">issue #6437</a>:</p>\n<blockquote>\n<p>I think the main point of confusion is</p>\n<blockquote>\n<p>In my view, all of them are in the stack</p>\n</blockquote>\n<p>which is not quite true: in the example you linked, <code>i</code> is never stored on the stack; it exists only as SSA values. That is exactly the difference: <code>StackSlot</code> is an allocation of <em>memory</em>, and you can load and store to it whenever you like; <code>Variable</code> is an abstraction in <code>cranelift_frontend</code> that builds <code>Value</code>s, which are values computed in your program that might only live in registers (the register allocator might also \"spill\" them to the stack but that's transparent to you). You can load a stack-slot to get a value, and you can store a value to a stack-slot; but a stack-slot itself is not a value.</p>\n</blockquote>",
        "id": 360432057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684821008
    },
    {
        "content": "<p>YjyJeff closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6437\">issue #6437</a>:</p>\n<blockquote>\n<p>After reading the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#overall-structure\">Overall Structure section in IR</a>, I found the <code>sum</code> variable is explicitly placed in the stack with <code>ss0 = explicit_slot 32</code>. However, the loop induction variable <code>i</code> is not placed explicitly placed in the stack.  The document said:</p>\n<blockquote>\n<p>Such variables can also be presented to Cranelift as [stack slot]s. Stack slots are accessed with the <code>stack_store</code> and <code>stack_load</code> instructions, and can have their address taken with <code>stack_addr</code>, which supports C-like programming languages where local variables can have their address taken.</p>\n</blockquote>\n<p>I am confused about when should we create a <code>StackSlot</code>. What is the advantage of <code>StackSlot</code> over <code>Variable</code> like <code>i</code> in the above?  In my view, all of them are in the stack, there is no difference here. I searched a lot and did not find the answer. Could anyone explain it?  </p>\n<p>Thanks in advance. </p>\n</blockquote>",
        "id": 360434935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684822121
    }
]