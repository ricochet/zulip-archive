[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198957673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590616024
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a>.</p>",
        "id": 198957674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590616024
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198972350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590627355
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199438662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591057329
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-419935901\">PR Review</a>.</p>",
        "id": 199499119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-419935901\">PR Review</a>.</p>",
        "id": 199499122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r431704473\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: requested</p>\n</blockquote>",
        "id": 199499123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433890230\">PR Review Comment</a>:</p>\n<blockquote>\n<p>uber-nit: I might be on the side of being overly explicit, but what do you think about precising (maybe just once) that <code>a return</code> is a return value, not a return instruction?</p>\n</blockquote>",
        "id": 199499124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433895542\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(a missed opportunity to use the XOR binary operator! more seriously, i like that what we have here is very explicit, so either way works fine)</p>\n</blockquote>",
        "id": 199499126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433907572\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is breaking the encapsulation with <code>compute_arg_locs</code>, since the index of the stack return area pointer is chosen there; could this function return it, instead?</p>\n</blockquote>",
        "id": 199499127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108018
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433910002\">PR Review Comment</a>:</p>\n<blockquote>\n<p>To avoid the Vec of at most one instruction (and the associated memory allocation), could this return either an <code>Option&lt;Inst&gt;</code> or a <code>SmallVec&lt;[Inst, N]&gt;</code>?</p>\n</blockquote>",
        "id": 199499128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433900473\">PR Review Comment</a>:</p>\n<blockquote>\n<p>An idea (that would avoid a few bounds checks): instead of doing this, could we take <code>params.iter()</code>, and call <code>rev()</code> on it in the <code>Rets &amp; Baldrdash</code> case, before iterating?</p>\n</blockquote>",
        "id": 199499129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433911144\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do we want to check for overflow here?</p>\n</blockquote>",
        "id": 199499130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433911210\">PR Review Comment</a>:</p>\n<blockquote>\n<p>and here?</p>\n</blockquote>",
        "id": 199499131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433911957\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since this is basically user-controlled, I think this could happen in practice, right? If so, could we bubble up the error with an ImplLimit error, or open an issue to not forget about it?</p>\n</blockquote>",
        "id": 199499133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r433916306\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This might have been made with future-proofing in mind, but in this case, since we only need 0 or 1 temporary all the time, it seems that this could just return a boolean right now, and <code>init_with_tmps</code> could take a single <code>tmp</code> argument. Alternatively, could we pass a closure function to <code>init_with_tmps</code> that returns a tmp, so that it can claim as many as it requires? (and then <code>needed_tmps</code> wouldn't be needed at all)</p>\n<p>(Implementing any of these ideas would avoid the short-lived SmallVec allocation below.)</p>\n</blockquote>",
        "id": 199499134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108019
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434052806\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I thought about that too :-) But it's a little obscure that it works for bools (at least my C-trained brain was unsure) so I think it might be better to be explicit...</p>\n</blockquote>",
        "id": 199526470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591119254
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-422905073\">PR Review</a>.</p>",
        "id": 199526471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591119254
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-422906502\">PR Review</a>.</p>",
        "id": 199526741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591119379
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434053991\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wanted to do that! Unfortunately if we want the iterator type to be statically known, this doesn't work, I think (the iterator would be either <code>std::slice::Iter</code> or <code>std::iter::Rev</code>), hence this explicit indexing.</p>\n</blockquote>",
        "id": 199526744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591119379
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423131014\">PR Review</a>.</p>",
        "id": 199566897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591141883
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434235499\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The u32 + u32 you mean? I think that wasm implementation limits will prevent the arg space + ret space from reaching 2GB (or getting close), but maybe I'm misunderstanding which overflow case you mean?</p>\n</blockquote>",
        "id": 199566898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591141883
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423131348\">PR Review</a>.</p>",
        "id": 199566961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591141947
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434235791\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So, this sent me on a bit of an adventure to add a new <code>RegOffset</code> pseudo-amode that does the Right Thing during emission (e.g. synthesize a large offset with a constant and an add). This had some carryover effects elsewhere so I'll PTAL the patch back to you before merging :-)</p>\n</blockquote>",
        "id": 199566962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591141947
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199567254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591142300
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199567456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591142519
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423371977\">PR Review</a>.</p>",
        "id": 199596737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591176078
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434428972\">PR Review Comment</a>:</p>\n<blockquote>\n<p>WASM may prevent it, but other users may not impose such constraints themselves.</p>\n</blockquote>",
        "id": 199596738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591176078
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423410926\">PR Review</a>.</p>",
        "id": 199601424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591179170
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434459380\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, what @bjorn3 said (thanks!).</p>\n</blockquote>",
        "id": 199601425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591179170
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423635114\">PR Review</a>.</p>",
        "id": 199629707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591196074
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434628088\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this return <code>MemArg::RegOffset</code> (not in an option anymore) unconditionally now?</p>\n</blockquote>",
        "id": 199629709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591196074
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423635114\">PR Review</a>.</p>",
        "id": 199629710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591196074
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199641905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201482
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423727295\">PR Review</a>.</p>",
        "id": 199642009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201524
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434697307\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done -- added a reasonable limit (128MB) to the <code>ABISig</code> construction so this is guaranteed not to overflow. Thanks!</p>\n</blockquote>",
        "id": 199642010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201524
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#discussion_r434697865\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, I had somehow stopped halfway through updating that, but it turns out it's dead code, so I just removed it (all the uses build a <code>MemArg</code> directly).</p>\n</blockquote>",
        "id": 199642165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201578
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774#pullrequestreview-423728007\">PR Review</a>.</p>",
        "id": 199642166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591201578
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a> from <code>aarch64-multivalue</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR adds support for multi-value returns to the new aarch64 backend's ABI implementation, using an ABI that should match that of SpiderMonkey's Wasm baseline compiler on aarch64.</p>\n<p>The existing multivalue Wasm spec-tests pass; curiously, these did not seem to actually be disabled before, so the rudimentary \"return values in x0..x7\" ABI that was previously implemented actually was sufficient. Nevertheless, it seems most reasonable to standardize on the SpiderMonkey-style struct-return-area ABI so that we don't need to maintain two different schemes.</p>\n<p>I have not yet been able to test this in SpiderMonkey; we first need to resolve the newly-failing tests on an Cranelift version bump on the SM side, and then I need to work out how to cross-compile SM, since I'm back to working on an x86 host for now. Putting this up for review now in any case, and can tweak if need be as we work out the above.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199673457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591216609
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1774\">PR #1774</a>.</p>",
        "id": 199677603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591218880
    }
]