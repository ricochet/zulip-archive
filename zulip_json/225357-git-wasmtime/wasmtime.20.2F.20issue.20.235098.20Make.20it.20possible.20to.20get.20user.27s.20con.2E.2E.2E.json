[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1287584720\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 305474078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666405045
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1289164025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>Personally I'm a bit hesitant to dive into this world of errors and downcasting and trying to make <code>Trap</code> look like an <code>anyhow::Error</code>, mostly because we'll probably just have a long tail of feature requests. I wonder, though, if we could perhaps make a slight change to the embedding APIs and solve this? For example I think the underlying issue here is the ability for an embedder to return an error in a host function and get back the original error on \"the other side\". I think that could be possible with:</p>\n<ul>\n<li>Change all host functions to return <code>anyhow::Error</code> as the <code>Result</code> error instead of <code>Trap</code></li>\n<li>Remove the <code>From</code> impls for <code>Trap</code> for error-looking things</li>\n<li>Change all Wasmtime APIs that return <code>Result&lt;_, Trap&gt;</code> to instead return <code>anyhow::Result&lt;_&gt;</code></li>\n</ul>\n<p>That would effectively mean that we punt all error handling to <code>anyhow</code> and everything is plumbed through there rather than having to go through <code>Trap</code>. Traps would then always be a \"leaf\" error which wouldn't contain anything other than a message -- and we could perhaps even do away with that since there's probably no need for a host-created <code>Trap</code> at that point any more.</p>\n<p>While it would be a more impactful change in terms of embedding APIs at least to me it feels more sustainable over time than slowly moving much of <code>anyhow::Error</code> into <code>Trap</code> which. Basically, in retrospect, I think that the current design of <code>Trap</code> may be a mistake.</p>\n</blockquote>",
        "id": 305838044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666623293
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1289416973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>I spent some time thinking about this and I totally agree we should try changing the design to use anyhow everywhere and see how it goes. For instance, it has the additional knock-on effect that the i32 exit can become a concrete user error <code>struct I32Exit(i32)</code> belonging to the <code>wasi-common</code> crate, something we all wanted since the i32 variant was added to traps when Wasi was created.</p>\n<p>However, I'm worrying about prioritizing this redesign right now, because it will involve touching a lot of crates, tests, and downstream consumers of wasmtime. This project isn't on the critical path for our current thrust to make the component model a usable thing. So, with that in mind, I'd rather merge this non-breaking (except for the Box error thing) change now, and then circle back and revisit the whole design a bit later.</p>\n</blockquote>",
        "id": 305887930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666635688
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1289585304\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>It occurred to me that we only need to merge this PR to get the benefits of moving WASI to a concrete exit type, so I guess thats an additional argument towards merging - it makes our migration path clearer</p>\n</blockquote>",
        "id": 305909978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666643859
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1289585304\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>It occurred to me that we only need to merge this PR to get the benefits of moving WASI to a concrete exit type, so I guess thats an additional argument towards merging - it makes our migration path incremental</p>\n</blockquote>",
        "id": 305910008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666643877
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1289605593\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>I'm ok taking a more expedient route, but I wouldn't expect this to have much \"complicated\" churn with it since signatures can largely \"just\" be updated and <code>?</code> should continue to work as usual. I realize though that the churn, while easy to handle, can be large and cumbersome.</p>\n<p>As-is though this'll need to change a little bit since when printing a stack of errors this'll double-print the error that the trap represents with <code>anyhow::Error</code>. It'll be printed by <code>Display for Trap</code> and then it will additionally be printed by the <code>.source()</code> since that returns the same trap. I think that we would at least need to fix that before landing, even in an interim state.</p>\n</blockquote>",
        "id": 305912265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666644903
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1292717687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>It appears to me that the trap source only gets printed twice with <code>println!(\"{:?}\", anyhow::Error::from(the_trap))</code> - anyhow's display impl doesn't print the source. I don't think we should make Trap's Display impl less useful when the only benefit is to improve an anyhow::Error wrapper's Debug impl.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">        (func $hello (import \"\" \"hello\"))</span>\n<span class=\"s\">        (func (export \"run\") (call $hello))</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">MyTrap</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyTrap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">write!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"my trap\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyTrap</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hello_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">MyTrap</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hello_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error calling function\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display run_func's err: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug run_func's err: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span>::<span class=\"n\">source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"trap has a source\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display err's source: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug err's source: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">source</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyTrap</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"source downcasts to MyTrap\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display run_func's anyhow'd err: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug run_func's anyhow'd err: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"anyhow trap has a source\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display anyhow'd err's source: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug anyhow'd err's source: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">Trap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">reason</span>: <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">wasm_trace</span>: <span class=\"p\">[</span><span class=\"n\">FrameInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">module_name</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_index</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_name</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_start</span>: <span class=\"nc\">FilePos</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">instr</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">FilePos</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">symbols</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">runtime_trace</span>: <span class=\"nc\">Backtrace</span><span class=\"p\">([</span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pc</span>: <span class=\"mi\">140485629587494</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fp</span>: <span class=\"mi\">140726870698496</span><span class=\"w\"> </span><span class=\"p\">}])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">MyTrap</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">MyTrap</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 306342431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666822375
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1292717687\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>It appears to me that the trap source only gets printed twice with <code>println!(\"{:?}\", anyhow::Error::from(the_trap))</code> - anyhow's display impl doesn't print the source. I don't think we should make Trap's Display impl less useful when the only benefit is to improve an anyhow::Error wrapper's Debug impl.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r#\"</span>\n<span class=\"s\">        (module</span>\n<span class=\"s\">        (func $hello (import \"\" \"hello\"))</span>\n<span class=\"s\">        (func (export \"run\") (call $hello))</span>\n<span class=\"s\">        )</span>\n<span class=\"s\">    \"#</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">MyTrap</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyTrap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">write!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"my trap\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyTrap</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">wat</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hello_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hello_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Trap</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">MyTrap</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hello_func</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"error calling function\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display run_func's err: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug run_func's err: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span>::<span class=\"n\">source</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"trap has a source\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display err's source: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug err's source: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">source</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyTrap</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"source downcasts to MyTrap\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display run_func's anyhow'd err: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug run_func's anyhow'd err: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"anyhow trap has a source\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"display anyhow'd err's source: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"debug anyhow'd err's source: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">source</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">downcast_ref</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyTrap</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"source downcasts to MyTrap\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">Trap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">reason</span>: <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">wasm_trace</span>: <span class=\"p\">[</span><span class=\"n\">FrameInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">module_name</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_index</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_name</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_start</span>: <span class=\"nc\">FilePos</span><span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">instr</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">FilePos</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">symbols</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">runtime_trace</span>: <span class=\"nc\">Backtrace</span><span class=\"p\">([</span><span class=\"n\">Frame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pc</span>: <span class=\"mi\">140485629587494</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fp</span>: <span class=\"mi\">140726870698496</span><span class=\"w\"> </span><span class=\"p\">}])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">MyTrap</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">run_func</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:   <span class=\"mh\">0x2c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">my</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"></span>\n<span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">source</span>: <span class=\"nc\">MyTrap</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 306342572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666822443
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1293685863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>Right yeah the hit is to <code>Debug for anyhow::Error</code>, although that's the primary mechanism by which errors are displayed AFAIK for <code>anyhow</code>, notably used by the CLI for example. </p>\n<p>If you'd prefer I'd be happy to take on the change to use <code>anyhow::Error</code> everywhere and remove the ability for <code>Trap</code> to contain arbitrary host errors, personally I think that's the best way forward without contorting ourselves too much internally within <code>wasmtime::Trap</code></p>\n</blockquote>",
        "id": 306471670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666883607
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098#issuecomment-1293784405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5098\">issue #5098</a>:</p>\n<blockquote>\n<p>OK, that works for me. I took a whack at it the other day for about 90 minutes and got sidetracked into wiggle. I'd rather go mess with snapshot1.wasm today than traps :)</p>\n</blockquote>",
        "id": 306488400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666888207
    }
]