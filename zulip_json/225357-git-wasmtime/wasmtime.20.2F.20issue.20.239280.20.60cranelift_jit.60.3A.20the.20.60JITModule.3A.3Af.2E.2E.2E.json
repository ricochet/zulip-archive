[
    {
        "content": "<p>tertsdiepraam opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280\">issue #9280</a>:</p>\n<blockquote>\n<p>Currently, the <code>free_memory</code> method on <code>JITModule</code> takes <code>self</code>. This makes some sense, because the whole thing is then invalidated. However, it is preventing me from (easily) making a wrapper type that frees the memory on drop:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyJIT</span><span class=\"p\">(</span><span class=\"n\">JITModule</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyJit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">free_memory</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// error! Can't move out of &amp;mut self</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The above is simplified from what I'm actually trying to do because the above is obviously unsafe. I was trying to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyJIT</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">JITModule</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyJit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">get_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">free_memory</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where all functions that I give out would have a <code>MyJIT</code>, so that the memory automatically gets dropped once the last function that uses it would drop the memory.</p>\n<p>I can work around this by swapping in a new <code>JITModule</code>, but that doesn't seem ideal. Since <code>free_memory</code> is already <code>unsafe</code>, I think it's alright to let it take <code>&amp;mut self</code> and allow people to build safe abstractions over it.</p>\n</blockquote>",
        "id": 471481328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726750854
    },
    {
        "content": "<p>tertsdiepraam <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280#issuecomment-2361024530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280\">issue #9280</a>:</p>\n<blockquote>\n<p>To illustrate why the workaround is annoying: it requires creating a <code>JITModule</code>, which requires creating a <code>JITBuilder</code>, which requires a function for libcalls and can fail. So the final function becomes something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ModuleData</span><span class=\"p\">(</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">JITModule</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ModuleData</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// get_mut returns None if we are not the last Arc, so the JITModule</span>\n<span class=\"w\">        </span><span class=\"c1\">// shouldn't be dropped yet.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// If this fails we'd rather just return and leak some memory than</span>\n<span class=\"w\">        </span><span class=\"c1\">// panic.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">JITBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cranelift_module</span><span class=\"p\">::</span><span class=\"n\">default_libcall_names</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Swap in an empty JITModule so that we can take ownership</span>\n<span class=\"w\">        </span><span class=\"c1\">// so that we can call `free_memory` on the old one.</span>\n<span class=\"w\">        </span><span class=\"c1\">// The new one hasn't allocated anything so it will just get dropped</span>\n<span class=\"w\">        </span><span class=\"c1\">// normally.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JITModule</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: We only give out functions that hold a ModuleData and</span>\n<span class=\"w\">        </span><span class=\"c1\">// therefore an Arc to this module. By `get_mut`, we know that we are</span>\n<span class=\"w\">        </span><span class=\"c1\">// the last Arc to this memory and hence it is safe to free its</span>\n<span class=\"w\">        </span><span class=\"c1\">// memory. New Arcs cannot have been created in the meantime because</span>\n<span class=\"w\">        </span><span class=\"c1\">// that requires access to the last Arc, which we know that we have.</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">free_memory</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 471489503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726753281
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280#issuecomment-2361038092\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280\">issue #9280</a>:</p>\n<blockquote>\n<p>The canonical solution for this is wrapping <code>JITModule</code> in <code>ManuallyDrop</code> and then doing something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"p\">::</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span><span class=\"p\">::</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">free_memory</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In this case given that <code>free_memory</code> is unsafe anyway and it is already possible for pointers to outlive the jit module, I think accepting <code>&amp;mut self</code> in <code>free_memory</code> is fine.</p>\n</blockquote>",
        "id": 471490536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726753616
    },
    {
        "content": "<p>tertsdiepraam <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280#issuecomment-2361172923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280\">issue #9280</a>:</p>\n<blockquote>\n<p>Oh that sounds reasonable! Thanks!</p>\n</blockquote>",
        "id": 471500718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726756408
    },
    {
        "content": "<p>tertsdiepraam <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280#issuecomment-2361206405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9280\">issue #9280</a>:</p>\n<blockquote>\n<p>I've got it working. Feel free to close this, though it might still be useful. I'll leave that decision up to you. If you want this I'd be happy to attempt a PR.</p>\n</blockquote>",
        "id": 471502744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726757021
    }
]