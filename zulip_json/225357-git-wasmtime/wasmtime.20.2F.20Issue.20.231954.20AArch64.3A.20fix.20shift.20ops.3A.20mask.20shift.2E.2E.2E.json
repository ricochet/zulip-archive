[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954#issuecomment-652124984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954\">Issue #1954</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202520187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593565156
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954#issuecomment-652218984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954\">Issue #1954</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm concerned that this fix isn't at the right level in the system. What it does is to take an insn with (presumably) undefined semantics, eg <code>lsl w4, w5, #53</code> and emit it as some other insn that does have defined semantics, eg `lsl w4, w5, #1921 </p>\n</blockquote>\n<p>I was skeptical at first, but it seems this is precisely defined both for WebAssembly and for CLIF:</p>\n<ul>\n<li>\n<p>in the <a href=\"https://webassembly.github.io/spec/core/_download/WebAssembly.pdf\">Wasm spec</a>, page 51, the \"ishl\" instruction is defined to \"return the result of shifting ... left by k bits, modulo 2^N\": i.e., we mask the shift amount.</p>\n</li>\n<li>\n<p>in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/meta/src/shared/instructions.rs#L3085\">CLIF instruction definition for ishl</a>, the definition states \"the shift amount is masked to the size of the register\". That's a little ambiguous (size of the shiftee register or size of the shift-amount register?) but I take it to mean that a shift of an <code>i32</code> is masked to a 5-bit shift amount.</p>\n</li>\n</ul>\n<p>So I <em>think</em> that we just define proper masking/modulo behavior at the Wasm level, and at the CLIF level, and translate it appropriately when we lower to machine instructions. (The <code>LSL</code>/<code>LSR</code> instructions also appear to do the appropriate masking, so the translation for variable-amount shifts is correct as well.) So i think everything is correct as it stands, but I could be missing something!</p>\n</blockquote>",
        "id": 202534889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593584823
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954#issuecomment-652316528\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954\">Issue #1954</a>:</p>\n<blockquote>\n<p>So then out-of-range shifts have meaning both at the wasm and CLIR level, but not at the ARM64 level.  Indeed, the ARM docs say the machine will trap on an out-of-range shift of a 32-bit value:</p>\n<div class=\"codehilite\"><pre><span></span><code>if sf == &#39;0&#39; &amp;&amp; imm6&lt;5&gt; == &#39;1&#39; then ReservedValue();\n...\nReservedValue():\n   if UsingAArch32() &amp;&amp; !AArch32.GeneralExceptionsToAArch64() then\n      AArch32.TakeUndefInstrException();\n   else\n      AArch64.UndefinedFault();\n</code></pre></div>\n\n\n<p>I'm still of the opinion that the proposed fix is at the wrong level, though.  It seems to me the right place for it is at the CLIR -&gt; AArch64::Inst translation (lowering) point, not at the AArch64::Inst emission point.  I'm sorry to be a nuisance about this.  I really would prefer to avoid all \"undefined semantics\" in the overall pipeline, and an AArch64::Inst for an out-of-range 32-bit shift would be undefined, even though the existing patch \"fixes\" it at the emission point.</p>\n</blockquote>",
        "id": 202549721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593596968
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954#issuecomment-652506163\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954\">Issue #1954</a>:</p>\n<blockquote>\n<p>Right, this is actually much simpler now that it's done in lowering -- thanks for persisting :-)</p>\n</blockquote>",
        "id": 202587314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593619260
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954#issuecomment-652516182\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1954\">Issue #1954</a>:</p>\n<blockquote>\n<p>Sorry to have been a nuisance :-)</p>\n</blockquote>",
        "id": 202589775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593620340
    }
]